
HCSR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000396  0000042a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000396  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002e  00800102  00800102  0000042c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000045c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a37  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000746  00000000  00000000  00000f33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f0  00000000  00000000  00001679  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048c  00000000  00000000  00001b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000018d  00000000  00000000  00001ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002185  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_10>
  2c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_11>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_12>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e9       	ldi	r30, 0x96	; 150
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 33       	cpi	r26, 0x30	; 48
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 83 01 	call	0x306	; 0x306 <main>
  9e:	0c 94 c9 01 	jmp	0x392	; 0x392 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_12>:

/* END Constant in Flash -----------------------------------------------------*/


/* Function ISR --------------------------------------------------------------*/
ISR(TIMER1_COMPB_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	ef 93       	push	r30
  b6:	ff 93       	push	r31
	
	IS10MS=TRUE;
  b8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <flag1>
  bc:	82 60       	ori	r24, 0x02	; 2
  be:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <flag1>
	OCR1B += 20000;
  c2:	ea e8       	ldi	r30, 0x8A	; 138
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	91 81       	ldd	r25, Z+1	; 0x01
  ca:	80 5e       	subi	r24, 0xE0	; 224
  cc:	91 4b       	sbci	r25, 0xB1	; 177
  ce:	91 83       	std	Z+1, r25	; 0x01
  d0:	80 83       	st	Z, r24
	
}
  d2:	ff 91       	pop	r31
  d4:	ef 91       	pop	r30
  d6:	9f 91       	pop	r25
  d8:	8f 91       	pop	r24
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <__vector_11>:

//entro aca cuando devuelve el echo 
ISR(TIMER1_COMPA_vect){
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	8f 93       	push	r24
	meas_state = MEAS_WAIT_FOR_ECHO;
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
}
  f6:	8f 91       	pop	r24
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <__vector_10>:

ISR(TIMER1_CAPT_vect){
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
 110:	ef 93       	push	r30
 112:	ff 93       	push	r31
	
	//ices1 es el input capture edge , me decta el falco desendente en caso de ser 0
	if(TCCR1B & _BV(ICES1)){
 114:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 118:	86 ff       	sbrs	r24, 6
 11a:	0e c0       	rjmp	.+28     	; 0x138 <__vector_10+0x36>
		timehc.startEcho = ICR1;
 11c:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 120:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 124:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <timehc+0x1>
 128:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <timehc>
		TCCR1B &= ~_BV(ICES1);
 12c:	e1 e8       	ldi	r30, 0x81	; 129
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	8f 7b       	andi	r24, 0xBF	; 191
 134:	80 83       	st	Z, r24
 136:	0b c0       	rjmp	.+22     	; 0x14e <__vector_10+0x4c>
		//rising
	}else{
		//falling
		timehc.stopEcho = ICR1;
 138:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 13c:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 140:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <timehc+0x3>
 144:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <timehc+0x2>
		meas_state = MEAS_DONE;
 148:	83 e0       	ldi	r24, 0x03	; 3
 14a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	}
}
 14e:	ff 91       	pop	r31
 150:	ef 91       	pop	r30
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <ini_ports>:
/* Function prototypes user code ----------------------------------------------*/
void ini_ports(){
	
	//DDRB = ((1 << Led) | (0 << SW0) | (0<<Echo) | (1<<Trigger));
	//OUTPUTS
	DDRB = ((1 << Led) | (1 << Led1) | (1 << Led2) | (1 << Led3) | (1 << Trigger));
 160:	8e e3       	ldi	r24, 0x3E	; 62
 162:	84 b9       	out	0x04, r24	; 4
	//INPUTS
	DDRB &= ~(1<<Echo);
 164:	84 b1       	in	r24, 0x04	; 4
 166:	8e 7f       	andi	r24, 0xFE	; 254
 168:	84 b9       	out	0x04, r24	; 4
	//PORTB = ((1 << SW0) | (1<<Trigger));
	PORTB = (1<<Echo);
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	85 b9       	out	0x05, r24	; 5
 16e:	08 95       	ret

00000170 <ini_timer1>:
}

void ini_timer1(){
	
	TCCR1A = 0x00;
 170:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	//configuro el Prescaler 8 (f = 16MHz / 8 = 2MHz ? 1 tick = 0.5 µs)
	TCCR1B = 0xC2;
 174:	82 ec       	ldi	r24, 0xC2	; 194
 176:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	// CONFIGURACION DE LA CANCELACION DE RUIDO
	TCNT1 = 0x00;
 17a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 17e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TIMSK1 = (1<<OCIE1B); 
 182:	84 e0       	ldi	r24, 0x04	; 4
 184:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	OCR1B = 19999;
 188:	8f e1       	ldi	r24, 0x1F	; 31
 18a:	9e e4       	ldi	r25, 0x4E	; 78
 18c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 190:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	TIFR1 = TIFR1;
 194:	86 b3       	in	r24, 0x16	; 22
 196:	86 bb       	out	0x16, r24	; 22
 198:	08 95       	ret

0000019a <ini_UART>:
	
}

void ini_UART(uint16_t Config){
	UBRR0H = (unsigned char)(Config>>8);
 19a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)Config;
 19e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	UCSR0A = 0xFE; //inicializo todas las banderas excepto el multiprocesor
 1a2:	8e ef       	ldi	r24, 0xFE	; 254
 1a4:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXCIE0) | (1<<RXEN0)|(1<<TXEN0);
 1a8:	88 e9       	ldi	r24, 0x98	; 152
 1aa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	/* Set frame format: 8data, 2stop bit */
	UCSR0C =  (0<<UCSZ02) | (1<<UCSZ01) | (1<<UCSZ00);
 1ae:	86 e0       	ldi	r24, 0x06	; 6
 1b0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 1b4:	08 95       	ret

000001b6 <Measure>:
}

void Measure(){
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
	
	switch(meas_state){
 1ba:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	71 f0       	breq	.+28     	; 0x1de <Measure+0x28>
 1c2:	28 f0       	brcs	.+10     	; 0x1ce <Measure+0x18>
 1c4:	82 30       	cpi	r24, 0x02	; 2
 1c6:	59 f1       	breq	.+86     	; 0x21e <Measure+0x68>
 1c8:	83 30       	cpi	r24, 0x03	; 3
 1ca:	b9 f1       	breq	.+110    	; 0x23a <Measure+0x84>
 1cc:	87 c0       	rjmp	.+270    	; 0x2dc <Measure+0x126>
		
		case MEAS_IDLE:
			if(ECHOREADY){
 1ce:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <flag1>
 1d2:	83 ff       	sbrs	r24, 3
 1d4:	83 c0       	rjmp	.+262    	; 0x2dc <Measure+0x126>
				meas_state = MEAS_TRIGGER;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 1dc:	7f c0       	rjmp	.+254    	; 0x2dc <Measure+0x126>
			}
		break;
		
		case MEAS_TRIGGER:
		//aca debo esperar los 10us y pasar a wait for echo
			if(ECHOREADY){
 1de:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <flag1>
 1e2:	83 ff       	sbrs	r24, 3
 1e4:	7b c0       	rjmp	.+246    	; 0x2dc <Measure+0x126>
			
				PORTB |= (1<<Trigger);//lanzo el trigger
 1e6:	85 b1       	in	r24, 0x05	; 5
 1e8:	82 60       	ori	r24, 0x02	; 2
 1ea:	85 b9       	out	0x05, r24	; 5
				OCR1A = TCNT1 + 19;//hago una interrupcion a 20 ciclos que son 10us
 1ec:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 1f0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 1f4:	43 96       	adiw	r24, 0x13	; 19
 1f6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1fa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				ECHOREADY = FALSE;
 1fe:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <flag1>
 202:	87 7f       	andi	r24, 0xF7	; 247
 204:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <flag1>
				TIMSK1 |= (1<<OCIE1A);
 208:	ef e6       	ldi	r30, 0x6F	; 111
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	82 60       	ori	r24, 0x02	; 2
 210:	80 83       	st	Z, r24
				TCCR1B |= (1<<ICES1);
 212:	e1 e8       	ldi	r30, 0x81	; 129
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	80 64       	ori	r24, 0x40	; 64
 21a:	80 83       	st	Z, r24
 21c:	5f c0       	rjmp	.+190    	; 0x2dc <Measure+0x126>
		break;
		
		case MEAS_WAIT_FOR_ECHO:
			
			//apago el trigger y espero a que devuelva el echo en la interrupcion del input caputre
			if (PORTB & (1<<Trigger)){
 21e:	29 9b       	sbis	0x05, 1	; 5
 220:	5d c0       	rjmp	.+186    	; 0x2dc <Measure+0x126>
			
				PORTB &= ~(1<<Trigger);
 222:	85 b1       	in	r24, 0x05	; 5
 224:	8d 7f       	andi	r24, 0xFD	; 253
 226:	85 b9       	out	0x05, r24	; 5
				TIMSK1 |= (1 << ICIE1);
 228:	ef e6       	ldi	r30, 0x6F	; 111
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	80 62       	ori	r24, 0x20	; 32
 230:	80 83       	st	Z, r24
				TIMSK1 &= ~(1<<OCIE1A);
 232:	80 81       	ld	r24, Z
 234:	8d 7f       	andi	r24, 0xFD	; 253
 236:	80 83       	st	Z, r24
 238:	51 c0       	rjmp	.+162    	; 0x2dc <Measure+0x126>
				
			}
		break;
		
		case MEAS_DONE: //obtengo la distancia en cm
			if(timehc.startEcho <= timehc.stopEcho){
 23a:	e7 e0       	ldi	r30, 0x07	; 7
 23c:	f1 e0       	ldi	r31, 0x01	; 1
 23e:	20 81       	ld	r18, Z
 240:	31 81       	ldd	r19, Z+1	; 0x01
 242:	82 81       	ldd	r24, Z+2	; 0x02
 244:	93 81       	ldd	r25, Z+3	; 0x03
 246:	82 17       	cp	r24, r18
 248:	93 07       	cpc	r25, r19
 24a:	48 f0       	brcs	.+18     	; 0x25e <Measure+0xa8>
				timehc.distance = timehc.stopEcho - timehc.startEcho;
 24c:	82 81       	ldd	r24, Z+2	; 0x02
 24e:	93 81       	ldd	r25, Z+3	; 0x03
 250:	20 81       	ld	r18, Z
 252:	31 81       	ldd	r19, Z+1	; 0x01
 254:	82 1b       	sub	r24, r18
 256:	93 0b       	sbc	r25, r19
 258:	95 83       	std	Z+5, r25	; 0x05
 25a:	84 83       	std	Z+4, r24	; 0x04
 25c:	0b c0       	rjmp	.+22     	; 0x274 <Measure+0xbe>
				}else{
				timehc.distance = timehc.stopEcho - timehc.startEcho + 0xffff;
 25e:	e7 e0       	ldi	r30, 0x07	; 7
 260:	f1 e0       	ldi	r31, 0x01	; 1
 262:	82 81       	ldd	r24, Z+2	; 0x02
 264:	93 81       	ldd	r25, Z+3	; 0x03
 266:	20 81       	ld	r18, Z
 268:	31 81       	ldd	r19, Z+1	; 0x01
 26a:	82 1b       	sub	r24, r18
 26c:	93 0b       	sbc	r25, r19
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	95 83       	std	Z+5, r25	; 0x05
 272:	84 83       	std	Z+4, r24	; 0x04
			}
			
			timehc.distance = timehc.distance/116;
 274:	e7 e0       	ldi	r30, 0x07	; 7
 276:	f1 e0       	ldi	r31, 0x01	; 1
 278:	24 81       	ldd	r18, Z+4	; 0x04
 27a:	35 81       	ldd	r19, Z+5	; 0x05
 27c:	af e9       	ldi	r26, 0x9F	; 159
 27e:	b6 e4       	ldi	r27, 0x46	; 70
 280:	0e 94 ba 01 	call	0x374	; 0x374 <__umulhisi3>
 284:	96 95       	lsr	r25
 286:	87 95       	ror	r24
 288:	92 95       	swap	r25
 28a:	82 95       	swap	r24
 28c:	8f 70       	andi	r24, 0x0F	; 15
 28e:	89 27       	eor	r24, r25
 290:	9f 70       	andi	r25, 0x0F	; 15
 292:	89 27       	eor	r24, r25
 294:	95 83       	std	Z+5, r25	; 0x05
 296:	84 83       	std	Z+4, r24	; 0x04
			//lo divido por el doble de lo que seria
			
			Converse.ui16[0] = timehc.distance;
 298:	c3 e0       	ldi	r28, 0x03	; 3
 29a:	d1 e0       	ldi	r29, 0x01	; 1
 29c:	99 83       	std	Y+1, r25	; 0x01
 29e:	88 83       	st	Y, r24
			DatoSerie.bufferTx[DatoSerie.indexWriteTx++]= Converse.ui8[1];
 2a0:	8e e0       	ldi	r24, 0x0E	; 14
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	dc 01       	movw	r26, r24
 2a6:	ec 91       	ld	r30, X
 2a8:	a1 e0       	ldi	r26, 0x01	; 1
 2aa:	ae 0f       	add	r26, r30
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	29 81       	ldd	r18, Y+1	; 0x01
 2b0:	e2 5f       	subi	r30, 0xF2	; 242
 2b2:	fe 4f       	sbci	r31, 0xFE	; 254
 2b4:	22 83       	std	Z+2, r18	; 0x02
			DatoSerie.bufferTx[DatoSerie.indexWriteTx++]= Converse.ui8[0];
 2b6:	e1 e0       	ldi	r30, 0x01	; 1
 2b8:	ea 0f       	add	r30, r26
 2ba:	b0 e0       	ldi	r27, 0x00	; 0
 2bc:	28 81       	ld	r18, Y
 2be:	a2 5f       	subi	r26, 0xF2	; 242
 2c0:	be 4f       	sbci	r27, 0xFE	; 254
 2c2:	12 96       	adiw	r26, 0x02	; 2
 2c4:	2c 93       	st	X, r18
		
			
			DatoSerie.bufferTx[DatoSerie.indexWriteTx++]= 32;
 2c6:	21 e0       	ldi	r18, 0x01	; 1
 2c8:	2e 0f       	add	r18, r30
 2ca:	dc 01       	movw	r26, r24
 2cc:	2c 93       	st	X, r18
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	e2 5f       	subi	r30, 0xF2	; 242
 2d2:	fe 4f       	sbci	r31, 0xFE	; 254
 2d4:	80 e2       	ldi	r24, 0x20	; 32
 2d6:	82 83       	std	Z+2, r24	; 0x02
			meas_state=MEAS_IDLE;
 2d8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
		
		break;
		
	}
	return;
}
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <sendUart>:
/* END Function prototypes user code ------------------------------------------*/

void sendUart(_sDato* datosCom){
 2e2:	fc 01       	movw	r30, r24
	if (datosCom->indexReadTx != datosCom->indexWriteTx) {
 2e4:	81 81       	ldd	r24, Z+1	; 0x01
 2e6:	90 81       	ld	r25, Z
 2e8:	89 17       	cp	r24, r25
 2ea:	61 f0       	breq	.+24     	; 0x304 <sendUart+0x22>
		if (UCSR0A & (1 << UDRE0)) { // Si el buffer de transmisión está vacío
 2ec:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2f0:	95 ff       	sbrs	r25, 5
 2f2:	08 c0       	rjmp	.+16     	; 0x304 <sendUart+0x22>
			UDR0 = datosCom->bufferTx[datosCom->indexReadTx++]; // Enviar el dato
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	98 0f       	add	r25, r24
 2f8:	91 83       	std	Z+1, r25	; 0x01
 2fa:	e8 0f       	add	r30, r24
 2fc:	f1 1d       	adc	r31, r1
 2fe:	82 81       	ldd	r24, Z+2	; 0x02
 300:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 304:	08 95       	ret

00000306 <main>:
	//datosCom->indexWriteTx &= 0xF1; //31
	//datosCom->indexReadTx &= 0xF1; //31
}
int main()
{
	cli();
 306:	f8 94       	cli
	/* Local variables -----------------------------------------------------------*/
	static uint8_t Mytimer = 10;
	/* END Local variables -------------------------------------------------------*/

	/* User code Init ------------------------------------------------------------*/
	ini_ports();
 308:	0e 94 b0 00 	call	0x160	; 0x160 <ini_ports>
	ini_timer1();
 30c:	0e 94 b8 00 	call	0x170	; 0x170 <ini_timer1>
	ini_UART(16);
 310:	80 e1       	ldi	r24, 0x10	; 16
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 cd 00 	call	0x19a	; 0x19a <ini_UART>
	ECHOREADY=TRUE;
 318:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <flag1>
 31c:	88 60       	ori	r24, 0x08	; 8
 31e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <flag1>
	timehc.distance=0;
 322:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <timehc+0x5>
 326:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <timehc+0x4>
	/* END User code Init --------------------------------------------------------*/

	sei();
 32a:	78 94       	sei
	
	while (1){
		/* User Code loop ------------------------------------------------------------*/
		Measure();
 32c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Measure>
		sendUart(&DatoSerie);
 330:	8e e0       	ldi	r24, 0x0E	; 14
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	0e 94 71 01 	call	0x2e2	; 0x2e2 <sendUart>
		if(IS10MS){
 338:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <flag1>
 33c:	81 ff       	sbrs	r24, 1
 33e:	f6 cf       	rjmp	.-20     	; 0x32c <main+0x26>
			Mytimer--;
 340:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 344:	81 50       	subi	r24, 0x01	; 1
 346:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			IS10MS=0;
 34a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <flag1>
 34e:	9d 7f       	andi	r25, 0xFD	; 253
 350:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <flag1>
			
			if (!Mytimer){
 354:	81 11       	cpse	r24, r1
 356:	ea cf       	rjmp	.-44     	; 0x32c <main+0x26>
				Mytimer=10;
 358:	8a e0       	ldi	r24, 0x0A	; 10
 35a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				ECHOREADY=1;
 35e:	89 2f       	mov	r24, r25
 360:	88 60       	ori	r24, 0x08	; 8
 362:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <flag1>
				meas_state=MEAS_IDLE;
 366:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
				PORTB ^= (1<<Led);
 36a:	95 b1       	in	r25, 0x05	; 5
 36c:	80 e2       	ldi	r24, 0x20	; 32
 36e:	89 27       	eor	r24, r25
 370:	85 b9       	out	0x05, r24	; 5
 372:	dc cf       	rjmp	.-72     	; 0x32c <main+0x26>

00000374 <__umulhisi3>:
 374:	a2 9f       	mul	r26, r18
 376:	b0 01       	movw	r22, r0
 378:	b3 9f       	mul	r27, r19
 37a:	c0 01       	movw	r24, r0
 37c:	a3 9f       	mul	r26, r19
 37e:	70 0d       	add	r23, r0
 380:	81 1d       	adc	r24, r1
 382:	11 24       	eor	r1, r1
 384:	91 1d       	adc	r25, r1
 386:	b2 9f       	mul	r27, r18
 388:	70 0d       	add	r23, r0
 38a:	81 1d       	adc	r24, r1
 38c:	11 24       	eor	r1, r1
 38e:	91 1d       	adc	r25, r1
 390:	08 95       	ret

00000392 <_exit>:
 392:	f8 94       	cli

00000394 <__stop_program>:
 394:	ff cf       	rjmp	.-2      	; 0x394 <__stop_program>
