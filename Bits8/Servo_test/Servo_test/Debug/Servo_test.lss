
Servo_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000382  00000416  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000382  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800104  00800104  0000041a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ac9  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f2  00000000  00000000  00000fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004a1  00000000  00000000  000017c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00001c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048a  00000000  00000000  00001d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e5  00000000  00000000  00002222  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002407  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e8       	ldi	r30, 0x82	; 130
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 31       	cpi	r26, 0x15	; 21
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <main>
  9e:	0c 94 bf 01 	jmp	0x37e	; 0x37e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_11>:

/* END Constant in Flash -----------------------------------------------------*/


/* Function ISR --------------------------------------------------------------*/
ISR(TIMER1_COMPA_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	ef 93       	push	r30
  b6:	ff 93       	push	r31
	OCR1A += 2000;
  b8:	e8 e8       	ldi	r30, 0x88	; 136
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	91 81       	ldd	r25, Z+1	; 0x01
  c0:	80 53       	subi	r24, 0x30	; 48
  c2:	98 4f       	sbci	r25, 0xF8	; 248
  c4:	91 83       	std	Z+1, r25	; 0x01
  c6:	80 83       	st	Z, r24
	count10ms--;
  c8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count10ms>
  cc:	81 50       	subi	r24, 0x01	; 1
  ce:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count10ms>
	if(!count10ms){
  d2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count10ms>
  d6:	81 11       	cpse	r24, r1
  d8:	08 c0       	rjmp	.+16     	; 0xea <__vector_11+0x44>
		IS10MS = 1;							// Flag that indicates that 10 ms have passed
  da:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag0>
  de:	81 60       	ori	r24, 0x01	; 1
  e0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <flag0>
		count10ms = 10;
  e4:	8a e0       	ldi	r24, 0x0A	; 10
  e6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count10ms>
	}
}
  ea:	ff 91       	pop	r31
  ec:	ef 91       	pop	r30
  ee:	9f 91       	pop	r25
  f0:	8f 91       	pop	r24
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <__vector_16>:

ISR(TIMER0_OVF_vect){
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	2f 93       	push	r18
 108:	3f 93       	push	r19
 10a:	4f 93       	push	r20
 10c:	5f 93       	push	r21
 10e:	6f 93       	push	r22
 110:	7f 93       	push	r23
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
 116:	af 93       	push	r26
 118:	bf 93       	push	r27
 11a:	ef 93       	push	r30
 11c:	ff 93       	push	r31
	writeServo();
 11e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <writeServo>
}
 122:	ff 91       	pop	r31
 124:	ef 91       	pop	r30
 126:	bf 91       	pop	r27
 128:	af 91       	pop	r26
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	7f 91       	pop	r23
 130:	6f 91       	pop	r22
 132:	5f 91       	pop	r21
 134:	4f 91       	pop	r20
 136:	3f 91       	pop	r19
 138:	2f 91       	pop	r18
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <initialize_ports>:
/* END Function ISR ----------------------------------------------------------*/


/* Function prototypes user code ----------------------------------------------*/
void initialize_ports(){
	DDRB = (1 << LED_HB);		
 144:	80 e2       	ldi	r24, 0x20	; 32
 146:	84 b9       	out	0x04, r24	; 4
	
	DDRD = (1 << SERVO0)|(1<<SERVO1);
 148:	80 e6       	ldi	r24, 0x60	; 96
 14a:	8a b9       	out	0x0a, r24	; 10
 14c:	08 95       	ret

0000014e <initialize_timer1>:
}

void initialize_timer1(){
	TCCR1A = 0;
 14e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	OCR1A = 19999;
 152:	8f e1       	ldi	r24, 0x1F	; 31
 154:	9e e4       	ldi	r25, 0x4E	; 78
 156:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 15a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIFR1 = TIFR1;
 15e:	86 b3       	in	r24, 0x16	; 22
 160:	86 bb       	out	0x16, r24	; 22
	TIMSK1 = (1 << OCIE1A);
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	TCCR1B = (1 << ICNC1) | (1 << CS11);
 168:	82 e8       	ldi	r24, 0x82	; 130
 16a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 16e:	08 95       	ret

00000170 <initialize_timer0>:
}

void initialize_timer0(){ 
	TCCR0A = 0;
 170:	14 bc       	out	0x24, r1	; 36
	TCNT0 = 0;
 172:	16 bc       	out	0x26, r1	; 38
	TIFR0 = 0x07;
 174:	87 e0       	ldi	r24, 0x07	; 7
 176:	85 bb       	out	0x15, r24	; 21
	TIMSK0 = (1<<TOIE0);
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCCR0B = (1<<CS01);
 17e:	82 e0       	ldi	r24, 0x02	; 2
 180:	85 bd       	out	0x25, r24	; 37
 182:	08 95       	ret

00000184 <every10ms>:
	//con el prescaler en 8, salta la tov cada 500ns
}

void every10ms(){
	if (!count60ms){								// If 1000 ms have passed
 184:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <count60ms>
 188:	81 11       	cpse	r24, r1
 18a:	0e c0       	rjmp	.+28     	; 0x1a8 <every10ms+0x24>
		servo_Angle(0,90);
 18c:	6a e5       	ldi	r22, 0x5A	; 90
 18e:	0e 94 25 01 	call	0x24a	; 0x24a <servo_Angle>
		servo_Angle(1,0);
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 25 01 	call	0x24a	; 0x24a <servo_Angle>
		PORTB ^= (1 << LED_HB);
 19a:	95 b1       	in	r25, 0x05	; 5
 19c:	80 e2       	ldi	r24, 0x20	; 32
 19e:	89 27       	eor	r24, r25
 1a0:	85 b9       	out	0x05, r24	; 5
		count60ms = 100;
 1a2:	84 e6       	ldi	r24, 0x64	; 100
 1a4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <count60ms>
	}
	if (!count40ms){								// If 2000 ms have passed
 1a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ac:	81 11       	cpse	r24, r1
 1ae:	0e c0       	rjmp	.+28     	; 0x1cc <every10ms+0x48>
		servo_Angle(0,0);
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	0e 94 25 01 	call	0x24a	; 0x24a <servo_Angle>
		servo_Angle(1,90);
 1b6:	6a e5       	ldi	r22, 0x5A	; 90
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	0e 94 25 01 	call	0x24a	; 0x24a <servo_Angle>
		PORTB ^= (1 << LED_HB);
 1be:	95 b1       	in	r25, 0x05	; 5
 1c0:	80 e2       	ldi	r24, 0x20	; 32
 1c2:	89 27       	eor	r24, r25
 1c4:	85 b9       	out	0x05, r24	; 5
		count40ms = 200;
 1c6:	88 ec       	ldi	r24, 0xC8	; 200
 1c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	count60ms--;
 1cc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <count60ms>
 1d0:	81 50       	subi	r24, 0x01	; 1
 1d2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <count60ms>
	count40ms--;
 1d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1da:	81 50       	subi	r24, 0x01	; 1
 1dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	IS10MS = 0;
 1e0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag0>
 1e4:	8e 7f       	andi	r24, 0xFE	; 254
 1e6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <flag0>
 1ea:	08 95       	ret

000001ec <main>:
}

/* END Function prototypes user code ------------------------------------------*/

int main(){
	cli();
 1ec:	f8 94       	cli
	/* Local variables -----------------------------------------------------------*/
	
	/* END Local variables -------------------------------------------------------*/

	/* User code Init ------------------------------------------------------------*/
	flag0.byte = 0;
 1ee:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <flag0>
	initialize_ports();
 1f2:	0e 94 a2 00 	call	0x144	; 0x144 <initialize_ports>
	initialize_timer0();
 1f6:	0e 94 b8 00 	call	0x170	; 0x170 <initialize_timer0>
	initialize_timer1();
 1fa:	0e 94 a7 00 	call	0x14e	; 0x14e <initialize_timer1>
	
	addServo(&PORTD,SERVO0);
 1fe:	65 e0       	ldi	r22, 0x05	; 5
 200:	8b e2       	ldi	r24, 0x2B	; 43
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 11 01 	call	0x222	; 0x222 <addServo>
	addServo(&PORTD,SERVO1);
 208:	66 e0       	ldi	r22, 0x06	; 6
 20a:	8b e2       	ldi	r24, 0x2B	; 43
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 11 01 	call	0x222	; 0x222 <addServo>

	/* END User code Init --------------------------------------------------------*/
	sei();
 212:	78 94       	sei

	while (1){
		/* User Code loop ------------------------------------------------------------*/
		if(IS10MS)
 214:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag0>
 218:	80 ff       	sbrs	r24, 0
 21a:	fc cf       	rjmp	.-8      	; 0x214 <main+0x28>
			every10ms();
 21c:	0e 94 c2 00 	call	0x184	; 0x184 <every10ms>
 220:	f9 cf       	rjmp	.-14     	; 0x214 <main+0x28>

00000222 <addServo>:
static uint8_t ServN = 0;
volatile static uint8_t is20ms=156;
 
void addServo(volatile uint8_t* PORT,uint8_t Pin){
	
	servoHandle[ServN].pin=Pin;
 222:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
 226:	e2 2f       	mov	r30, r18
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	af 01       	movw	r20, r30
 22c:	44 0f       	add	r20, r20
 22e:	55 1f       	adc	r21, r21
 230:	44 0f       	add	r20, r20
 232:	55 1f       	adc	r21, r21
 234:	e4 0f       	add	r30, r20
 236:	f5 1f       	adc	r31, r21
 238:	eb 5f       	subi	r30, 0xFB	; 251
 23a:	fe 4f       	sbci	r31, 0xFE	; 254
 23c:	62 83       	std	Z+2, r22	; 0x02
	servoHandle[ServN].port=PORT;
 23e:	91 83       	std	Z+1, r25	; 0x01
 240:	80 83       	st	Z, r24
	ServN++;
 242:	2f 5f       	subi	r18, 0xFF	; 255
 244:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <__data_end>
 248:	08 95       	ret

0000024a <servo_Angle>:
}
void servo_Angle(uint8_t servo,uint8_t angulo){
 24a:	48 2f       	mov	r20, r24
	
	uint16_t riseValue;
	
	riseValue = (uint16_t)angulo * ANGLE_TO_PWM_SLOPE;
 24c:	85 e7       	ldi	r24, 0x75	; 117
 24e:	68 9f       	mul	r22, r24
 250:	90 01       	movw	r18, r0
 252:	11 24       	eor	r1, r1
	riseValue += ANGLE_TO_PWM_OFFSET;
 254:	2e 5c       	subi	r18, 0xCE	; 206
 256:	36 4d       	sbci	r19, 0xD6	; 214
	riseValue /= 180;
 258:	a3 e8       	ldi	r26, 0x83	; 131
 25a:	bd e2       	ldi	r27, 0x2D	; 45
 25c:	0e 94 b0 01 	call	0x360	; 0x360 <__umulhisi3>
 260:	96 95       	lsr	r25
 262:	87 95       	ror	r24
 264:	92 95       	swap	r25
 266:	82 95       	swap	r24
 268:	8f 70       	andi	r24, 0x0F	; 15
 26a:	89 27       	eor	r24, r25
 26c:	9f 70       	andi	r25, 0x0F	; 15
 26e:	89 27       	eor	r24, r25
	riseValue += ROUNDING_CORRECTION;
 270:	9c 01       	movw	r18, r24
 272:	2b 5f       	subi	r18, 0xFB	; 251
 274:	3f 4f       	sbci	r19, 0xFF	; 255
	riseValue /= 10;
 276:	ad ec       	ldi	r26, 0xCD	; 205
 278:	bc ec       	ldi	r27, 0xCC	; 204
 27a:	0e 94 b0 01 	call	0x360	; 0x360 <__umulhisi3>
 27e:	96 95       	lsr	r25
 280:	87 95       	ror	r24
 282:	96 95       	lsr	r25
 284:	87 95       	ror	r24
 286:	96 95       	lsr	r25
 288:	87 95       	ror	r24
		
	servoHandle[servo].dutyCycle = (uint8_t)riseValue;
 28a:	24 2f       	mov	r18, r20
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	f9 01       	movw	r30, r18
 290:	ee 0f       	add	r30, r30
 292:	ff 1f       	adc	r31, r31
 294:	ee 0f       	add	r30, r30
 296:	ff 1f       	adc	r31, r31
 298:	2e 0f       	add	r18, r30
 29a:	3f 1f       	adc	r19, r31
 29c:	f9 01       	movw	r30, r18
 29e:	eb 5f       	subi	r30, 0xFB	; 251
 2a0:	fe 4f       	sbci	r31, 0xFE	; 254
 2a2:	84 83       	std	Z+4, r24	; 0x04
 2a4:	08 95       	ret

000002a6 <writeServo>:
}

void writeServo(){
	is20ms--;
 2a6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <is20ms>
 2aa:	81 50       	subi	r24, 0x01	; 1
 2ac:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <is20ms>
	
	uint8_t counter=0;
	
	for(counter = 0; counter < ServN; counter++){
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	2a c0       	rjmp	.+84     	; 0x308 <writeServo+0x62>
		servoHandle[counter].cycle--;
 2b4:	82 2f       	mov	r24, r18
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	fc 01       	movw	r30, r24
 2ba:	ee 0f       	add	r30, r30
 2bc:	ff 1f       	adc	r31, r31
 2be:	ee 0f       	add	r30, r30
 2c0:	ff 1f       	adc	r31, r31
 2c2:	e8 0f       	add	r30, r24
 2c4:	f9 1f       	adc	r31, r25
 2c6:	eb 5f       	subi	r30, 0xFB	; 251
 2c8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ca:	33 81       	ldd	r19, Z+3	; 0x03
 2cc:	31 50       	subi	r19, 0x01	; 1
 2ce:	33 83       	std	Z+3, r19	; 0x03
		if(!servoHandle[counter].cycle)
 2d0:	33 81       	ldd	r19, Z+3	; 0x03
 2d2:	31 11       	cpse	r19, r1
 2d4:	18 c0       	rjmp	.+48     	; 0x306 <writeServo+0x60>
		*servoHandle[counter].port &= ~(1 << servoHandle[counter].pin);
 2d6:	fc 01       	movw	r30, r24
 2d8:	ee 0f       	add	r30, r30
 2da:	ff 1f       	adc	r31, r31
 2dc:	ee 0f       	add	r30, r30
 2de:	ff 1f       	adc	r31, r31
 2e0:	8e 0f       	add	r24, r30
 2e2:	9f 1f       	adc	r25, r31
 2e4:	fc 01       	movw	r30, r24
 2e6:	eb 5f       	subi	r30, 0xFB	; 251
 2e8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ea:	a0 81       	ld	r26, Z
 2ec:	b1 81       	ldd	r27, Z+1	; 0x01
 2ee:	3c 91       	ld	r19, X
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	02 80       	ldd	r0, Z+2	; 0x02
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <writeServo+0x56>
 2f8:	88 0f       	add	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	0a 94       	dec	r0
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <writeServo+0x52>
 300:	80 95       	com	r24
 302:	83 23       	and	r24, r19
 304:	8c 93       	st	X, r24
void writeServo(){
	is20ms--;
	
	uint8_t counter=0;
	
	for(counter = 0; counter < ServN; counter++){
 306:	2f 5f       	subi	r18, 0xFF	; 255
 308:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 30c:	28 17       	cp	r18, r24
 30e:	90 f2       	brcs	.-92     	; 0x2b4 <writeServo+0xe>
		servoHandle[counter].cycle--;
		if(!servoHandle[counter].cycle)
		*servoHandle[counter].port &= ~(1 << servoHandle[counter].pin);
	}
	if(!is20ms){
 310:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <is20ms>
 314:	99 23       	and	r25, r25
 316:	e9 f0       	breq	.+58     	; 0x352 <writeServo+0xac>
 318:	08 95       	ret
		for(counter = 0; counter < ServN; counter++){
			servoHandle[counter].cycle = servoHandle[counter].dutyCycle;
 31a:	e9 2f       	mov	r30, r25
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	9f 01       	movw	r18, r30
 320:	22 0f       	add	r18, r18
 322:	33 1f       	adc	r19, r19
 324:	22 0f       	add	r18, r18
 326:	33 1f       	adc	r19, r19
 328:	e2 0f       	add	r30, r18
 32a:	f3 1f       	adc	r31, r19
 32c:	eb 5f       	subi	r30, 0xFB	; 251
 32e:	fe 4f       	sbci	r31, 0xFE	; 254
 330:	24 81       	ldd	r18, Z+4	; 0x04
 332:	23 83       	std	Z+3, r18	; 0x03
			*servoHandle[counter].port |= (1 << servoHandle[counter].pin);
 334:	a0 81       	ld	r26, Z
 336:	b1 81       	ldd	r27, Z+1	; 0x01
 338:	4c 91       	ld	r20, X
 33a:	21 e0       	ldi	r18, 0x01	; 1
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	02 80       	ldd	r0, Z+2	; 0x02
 340:	02 c0       	rjmp	.+4      	; 0x346 <writeServo+0xa0>
 342:	22 0f       	add	r18, r18
 344:	33 1f       	adc	r19, r19
 346:	0a 94       	dec	r0
 348:	e2 f7       	brpl	.-8      	; 0x342 <writeServo+0x9c>
 34a:	24 2b       	or	r18, r20
 34c:	2c 93       	st	X, r18
		servoHandle[counter].cycle--;
		if(!servoHandle[counter].cycle)
		*servoHandle[counter].port &= ~(1 << servoHandle[counter].pin);
	}
	if(!is20ms){
		for(counter = 0; counter < ServN; counter++){
 34e:	9f 5f       	subi	r25, 0xFF	; 255
 350:	01 c0       	rjmp	.+2      	; 0x354 <writeServo+0xae>
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	98 17       	cp	r25, r24
 356:	08 f3       	brcs	.-62     	; 0x31a <writeServo+0x74>
			servoHandle[counter].cycle = servoHandle[counter].dutyCycle;
			*servoHandle[counter].port |= (1 << servoHandle[counter].pin);
		}
		is20ms = 156;
 358:	8c e9       	ldi	r24, 0x9C	; 156
 35a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <is20ms>
 35e:	08 95       	ret

00000360 <__umulhisi3>:
 360:	a2 9f       	mul	r26, r18
 362:	b0 01       	movw	r22, r0
 364:	b3 9f       	mul	r27, r19
 366:	c0 01       	movw	r24, r0
 368:	a3 9f       	mul	r26, r19
 36a:	70 0d       	add	r23, r0
 36c:	81 1d       	adc	r24, r1
 36e:	11 24       	eor	r1, r1
 370:	91 1d       	adc	r25, r1
 372:	b2 9f       	mul	r27, r18
 374:	70 0d       	add	r23, r0
 376:	81 1d       	adc	r24, r1
 378:	11 24       	eor	r1, r1
 37a:	91 1d       	adc	r25, r1
 37c:	08 95       	ret

0000037e <_exit>:
 37e:	f8 94       	cli

00000380 <__stop_program>:
 380:	ff cf       	rjmp	.-2      	; 0x380 <__stop_program>
