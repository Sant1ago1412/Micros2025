
BlackScreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5dc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800b77c  0800b77c  0000c77c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b828  0800b828  0000d158  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b828  0800b828  0000c828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b830  0800b830  0000d158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b830  0800b830  0000c830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b834  0800b834  0000c834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  0800b838  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001798  20000158  0800b990  0000d158  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200018f0  0800b990  0000d8f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d158  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c94  00000000  00000000  0000d188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004143  00000000  00000000  00026e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a8  00000000  00000000  0002af60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001240  00000000  00000000  0002c708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000071cc  00000000  00000000  0002d948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ea02  00000000  00000000  00034b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f509  00000000  00000000  00053516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f2a1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068a0  00000000  00000000  000f2a64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000f9304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000158 	.word	0x20000158
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b764 	.word	0x0800b764

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000015c 	.word	0x2000015c
 80001dc:	0800b764 	.word	0x0800b764

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <UP_initprotocol>:
_work casts;
int16_t value=9999;
_eProtocolo estadoProtocolo;
_sDato *datosComLib;

void UP_initprotocol(_sDato *datosCom,uint8_t ringbuff){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	70fb      	strb	r3, [r7, #3]

		datosCom->bufferRx = malloc(ringbuff);
 80005b8:	78fb      	ldrb	r3, [r7, #3]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f00a fc2a 	bl	800ae14 <malloc>
 80005c0:	4603      	mov	r3, r0
 80005c2:	461a      	mov	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	609a      	str	r2, [r3, #8]
	    datosCom->bufferTx = malloc(ringbuff);
 80005c8:	78fb      	ldrb	r3, [r7, #3]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f00a fc22 	bl	800ae14 <malloc>
 80005d0:	4603      	mov	r3, r0
 80005d2:	461a      	mov	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	60da      	str	r2, [r3, #12]
	    datosComLib=datosCom;
 80005d8:	4a03      	ldr	r2, [pc, #12]	@ (80005e8 <UP_initprotocol+0x3c>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6013      	str	r3, [r2, #0]

}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	2000017c 	.word	0x2000017c

080005ec <UP_sendInfo>:

void UP_sendInfo(uint8_t bufferAux[],uint8_t bytes){
 80005ec:	b490      	push	{r4, r7}
 80005ee:	b08c      	sub	sp, #48	@ 0x30
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	460b      	mov	r3, r1
 80005f6:	70fb      	strb	r3, [r7, #3]

    uint8_t bufAux[30], indiceAux=0,cks=0,i=0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80005fe:	2300      	movs	r3, #0
 8000600:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000604:	2300      	movs	r3, #0
 8000606:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    bufAux[indiceAux++]='U';
 800060a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800060e:	1c5a      	adds	r2, r3, #1
 8000610:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000614:	3330      	adds	r3, #48	@ 0x30
 8000616:	443b      	add	r3, r7
 8000618:	2255      	movs	r2, #85	@ 0x55
 800061a:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='N';
 800061e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000622:	1c5a      	adds	r2, r3, #1
 8000624:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000628:	3330      	adds	r3, #48	@ 0x30
 800062a:	443b      	add	r3, r7
 800062c:	224e      	movs	r2, #78	@ 0x4e
 800062e:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='E';
 8000632:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000636:	1c5a      	adds	r2, r3, #1
 8000638:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 800063c:	3330      	adds	r3, #48	@ 0x30
 800063e:	443b      	add	r3, r7
 8000640:	2245      	movs	r2, #69	@ 0x45
 8000642:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='R';
 8000646:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800064a:	1c5a      	adds	r2, r3, #1
 800064c:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000650:	3330      	adds	r3, #48	@ 0x30
 8000652:	443b      	add	r3, r7
 8000654:	2252      	movs	r2, #82	@ 0x52
 8000656:	f803 2c24 	strb.w	r2, [r3, #-36]

    bufAux[indiceAux++]=bytes;
 800065a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800065e:	1c5a      	adds	r2, r3, #1
 8000660:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000664:	3330      	adds	r3, #48	@ 0x30
 8000666:	443b      	add	r3, r7
 8000668:	78fa      	ldrb	r2, [r7, #3]
 800066a:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]=':';
 800066e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000672:	1c5a      	adds	r2, r3, #1
 8000674:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000678:	3330      	adds	r3, #48	@ 0x30
 800067a:	443b      	add	r3, r7
 800067c:	223a      	movs	r2, #58	@ 0x3a
 800067e:	f803 2c24 	strb.w	r2, [r3, #-36]

    for(i=0; i<bytes-1; i++)
 8000682:	2300      	movs	r3, #0
 8000684:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000688:	e012      	b.n	80006b0 <UP_sendInfo+0xc4>
        bufAux[indiceAux++] = bufferAux[i];
 800068a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	441a      	add	r2, r3
 8000692:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000696:	1c59      	adds	r1, r3, #1
 8000698:	f887 102f 	strb.w	r1, [r7, #47]	@ 0x2f
 800069c:	7812      	ldrb	r2, [r2, #0]
 800069e:	3330      	adds	r3, #48	@ 0x30
 80006a0:	443b      	add	r3, r7
 80006a2:	f803 2c24 	strb.w	r2, [r3, #-36]
    for(i=0; i<bytes-1; i++)
 80006a6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80006aa:	3301      	adds	r3, #1
 80006ac:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80006b0:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80006b4:	78fb      	ldrb	r3, [r7, #3]
 80006b6:	3b01      	subs	r3, #1
 80006b8:	429a      	cmp	r2, r3
 80006ba:	dbe6      	blt.n	800068a <UP_sendInfo+0x9e>

    cks=0;
 80006bc:	2300      	movs	r3, #0
 80006be:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    for(i=0 ;i<indiceAux;i++){
 80006c2:	2300      	movs	r3, #0
 80006c4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80006c8:	e022      	b.n	8000710 <UP_sendInfo+0x124>
        cks^= bufAux[i];
 80006ca:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80006ce:	3330      	adds	r3, #48	@ 0x30
 80006d0:	443b      	add	r3, r7
 80006d2:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 80006d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80006da:	4053      	eors	r3, r2
 80006dc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        datosComLib->bufferTx[datosComLib->indexWriteTx++]=bufAux[i];
 80006e0:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 80006e4:	4b19      	ldr	r3, [pc, #100]	@ (800074c <UP_sendInfo+0x160>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	68d8      	ldr	r0, [r3, #12]
 80006ea:	4b18      	ldr	r3, [pc, #96]	@ (800074c <UP_sendInfo+0x160>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	795a      	ldrb	r2, [r3, #5]
 80006f0:	1c54      	adds	r4, r2, #1
 80006f2:	b2e4      	uxtb	r4, r4
 80006f4:	715c      	strb	r4, [r3, #5]
 80006f6:	4613      	mov	r3, r2
 80006f8:	4403      	add	r3, r0
 80006fa:	f101 0230 	add.w	r2, r1, #48	@ 0x30
 80006fe:	443a      	add	r2, r7
 8000700:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 8000704:	701a      	strb	r2, [r3, #0]
    for(i=0 ;i<indiceAux;i++){
 8000706:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800070a:	3301      	adds	r3, #1
 800070c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000710:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000714:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000718:	429a      	cmp	r2, r3
 800071a:	d3d6      	bcc.n	80006ca <UP_sendInfo+0xde>
    }
     datosComLib->bufferTx[datosComLib->indexWriteTx++]=cks;
 800071c:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <UP_sendInfo+0x160>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	68d9      	ldr	r1, [r3, #12]
 8000722:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <UP_sendInfo+0x160>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	795a      	ldrb	r2, [r3, #5]
 8000728:	1c50      	adds	r0, r2, #1
 800072a:	b2c0      	uxtb	r0, r0
 800072c:	7158      	strb	r0, [r3, #5]
 800072e:	4613      	mov	r3, r2
 8000730:	440b      	add	r3, r1
 8000732:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000736:	701a      	strb	r2, [r3, #0]

     datosComLib->bytesTosend=indiceAux;
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <UP_sendInfo+0x160>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000740:	741a      	strb	r2, [r3, #16]

}
 8000742:	bf00      	nop
 8000744:	3730      	adds	r7, #48	@ 0x30
 8000746:	46bd      	mov	sp, r7
 8000748:	bc90      	pop	{r4, r7}
 800074a:	4770      	bx	lr
 800074c:	2000017c 	.word	0x2000017c

08000750 <UP_decodeHeader>:

void UP_decodeHeader(_sDato *datosComLib){
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]

    static uint8_t nBytes=0;

    uint8_t indexWriteRxCopy=datosComLib->indexWriteRx;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	78db      	ldrb	r3, [r3, #3]
 800075c:	73fb      	strb	r3, [r7, #15]

    while (datosComLib->indexReadRx!=indexWriteRxCopy)
 800075e:	e0e2      	b.n	8000926 <UP_decodeHeader+0x1d6>
    {
        switch (estadoProtocolo) {
 8000760:	4b76      	ldr	r3, [pc, #472]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b06      	cmp	r3, #6
 8000766:	f200 80d7 	bhi.w	8000918 <UP_decodeHeader+0x1c8>
 800076a:	a201      	add	r2, pc, #4	@ (adr r2, 8000770 <UP_decodeHeader+0x20>)
 800076c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000770:	0800078d 	.word	0x0800078d
 8000774:	080007b5 	.word	0x080007b5
 8000778:	080007e9 	.word	0x080007e9
 800077c:	0800081d 	.word	0x0800081d
 8000780:	08000851 	.word	0x08000851
 8000784:	08000879 	.word	0x08000879
 8000788:	080008bb 	.word	0x080008bb
            case START:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='U'){
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	689a      	ldr	r2, [r3, #8]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	791b      	ldrb	r3, [r3, #4]
 8000794:	1c59      	adds	r1, r3, #1
 8000796:	b2c8      	uxtb	r0, r1
 8000798:	6879      	ldr	r1, [r7, #4]
 800079a:	7108      	strb	r0, [r1, #4]
 800079c:	4413      	add	r3, r2
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b55      	cmp	r3, #85	@ 0x55
 80007a2:	f040 80bd 	bne.w	8000920 <UP_decodeHeader+0x1d0>
                    estadoProtocolo=HEADER_1;
 80007a6:	4b65      	ldr	r3, [pc, #404]	@ (800093c <UP_decodeHeader+0x1ec>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	701a      	strb	r2, [r3, #0]
                    datosComLib->cheksumRx=0;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2200      	movs	r2, #0
 80007b0:	709a      	strb	r2, [r3, #2]
                }
                break;
 80007b2:	e0b5      	b.n	8000920 <UP_decodeHeader+0x1d0>
            case HEADER_1:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='N')
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	689a      	ldr	r2, [r3, #8]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	791b      	ldrb	r3, [r3, #4]
 80007bc:	1c59      	adds	r1, r3, #1
 80007be:	b2c8      	uxtb	r0, r1
 80007c0:	6879      	ldr	r1, [r7, #4]
 80007c2:	7108      	strb	r0, [r1, #4]
 80007c4:	4413      	add	r3, r2
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b4e      	cmp	r3, #78	@ 0x4e
 80007ca:	d103      	bne.n	80007d4 <UP_decodeHeader+0x84>
                   estadoProtocolo=HEADER_2;
 80007cc:	4b5b      	ldr	r3, [pc, #364]	@ (800093c <UP_decodeHeader+0x1ec>)
 80007ce:	2202      	movs	r2, #2
 80007d0:	701a      	strb	r2, [r3, #0]
                else{
                    datosComLib->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 80007d2:	e0a8      	b.n	8000926 <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	791b      	ldrb	r3, [r3, #4]
 80007d8:	3b01      	subs	r3, #1
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 80007e0:	4b56      	ldr	r3, [pc, #344]	@ (800093c <UP_decodeHeader+0x1ec>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
                break;
 80007e6:	e09e      	b.n	8000926 <UP_decodeHeader+0x1d6>
            case HEADER_2:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='E')
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	689a      	ldr	r2, [r3, #8]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	791b      	ldrb	r3, [r3, #4]
 80007f0:	1c59      	adds	r1, r3, #1
 80007f2:	b2c8      	uxtb	r0, r1
 80007f4:	6879      	ldr	r1, [r7, #4]
 80007f6:	7108      	strb	r0, [r1, #4]
 80007f8:	4413      	add	r3, r2
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b45      	cmp	r3, #69	@ 0x45
 80007fe:	d103      	bne.n	8000808 <UP_decodeHeader+0xb8>
                    estadoProtocolo=HEADER_3;
 8000800:	4b4e      	ldr	r3, [pc, #312]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000802:	2203      	movs	r2, #3
 8000804:	701a      	strb	r2, [r3, #0]
                else{
                    datosComLib->indexReadRx--;
                   estadoProtocolo=START;
                }
                break;
 8000806:	e08e      	b.n	8000926 <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	791b      	ldrb	r3, [r3, #4]
 800080c:	3b01      	subs	r3, #1
 800080e:	b2da      	uxtb	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	711a      	strb	r2, [r3, #4]
                   estadoProtocolo=START;
 8000814:	4b49      	ldr	r3, [pc, #292]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
                break;
 800081a:	e084      	b.n	8000926 <UP_decodeHeader+0x1d6>
			case HEADER_3:
				if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='R')
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	689a      	ldr	r2, [r3, #8]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	791b      	ldrb	r3, [r3, #4]
 8000824:	1c59      	adds	r1, r3, #1
 8000826:	b2c8      	uxtb	r0, r1
 8000828:	6879      	ldr	r1, [r7, #4]
 800082a:	7108      	strb	r0, [r1, #4]
 800082c:	4413      	add	r3, r2
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b52      	cmp	r3, #82	@ 0x52
 8000832:	d103      	bne.n	800083c <UP_decodeHeader+0xec>
					estadoProtocolo=NBYTES;
 8000834:	4b41      	ldr	r3, [pc, #260]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000836:	2204      	movs	r2, #4
 8000838:	701a      	strb	r2, [r3, #0]
				else{
					datosComLib->indexReadRx--;
				    estadoProtocolo=START;
				}
            break;
 800083a:	e074      	b.n	8000926 <UP_decodeHeader+0x1d6>
					datosComLib->indexReadRx--;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	791b      	ldrb	r3, [r3, #4]
 8000840:	3b01      	subs	r3, #1
 8000842:	b2da      	uxtb	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	711a      	strb	r2, [r3, #4]
				    estadoProtocolo=START;
 8000848:	4b3c      	ldr	r3, [pc, #240]	@ (800093c <UP_decodeHeader+0x1ec>)
 800084a:	2200      	movs	r2, #0
 800084c:	701a      	strb	r2, [r3, #0]
            break;
 800084e:	e06a      	b.n	8000926 <UP_decodeHeader+0x1d6>
            case NBYTES:
                datosComLib->indexStart=datosComLib->indexReadRx;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	791a      	ldrb	r2, [r3, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	705a      	strb	r2, [r3, #1]
                nBytes=datosComLib->bufferRx[datosComLib->indexReadRx++];
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	689a      	ldr	r2, [r3, #8]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	791b      	ldrb	r3, [r3, #4]
 8000860:	1c59      	adds	r1, r3, #1
 8000862:	b2c8      	uxtb	r0, r1
 8000864:	6879      	ldr	r1, [r7, #4]
 8000866:	7108      	strb	r0, [r1, #4]
 8000868:	4413      	add	r3, r2
 800086a:	781a      	ldrb	r2, [r3, #0]
 800086c:	4b34      	ldr	r3, [pc, #208]	@ (8000940 <UP_decodeHeader+0x1f0>)
 800086e:	701a      	strb	r2, [r3, #0]
                estadoProtocolo=TOKEN;
 8000870:	4b32      	ldr	r3, [pc, #200]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000872:	2205      	movs	r2, #5
 8000874:	701a      	strb	r2, [r3, #0]
                break;
 8000876:	e056      	b.n	8000926 <UP_decodeHeader+0x1d6>
            case TOKEN:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]==':'){
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	689a      	ldr	r2, [r3, #8]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	791b      	ldrb	r3, [r3, #4]
 8000880:	1c59      	adds	r1, r3, #1
 8000882:	b2c8      	uxtb	r0, r1
 8000884:	6879      	ldr	r1, [r7, #4]
 8000886:	7108      	strb	r0, [r1, #4]
 8000888:	4413      	add	r3, r2
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b3a      	cmp	r3, #58	@ 0x3a
 800088e:	d10a      	bne.n	80008a6 <UP_decodeHeader+0x156>
                   estadoProtocolo=PAYLOAD;
 8000890:	4b2a      	ldr	r3, [pc, #168]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000892:	2206      	movs	r2, #6
 8000894:	701a      	strb	r2, [r3, #0]
                    datosComLib->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 8000896:	4b2a      	ldr	r3, [pc, #168]	@ (8000940 <UP_decodeHeader+0x1f0>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	709a      	strb	r2, [r3, #2]
                }
                else{
                    datosComLib->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 80008a4:	e03f      	b.n	8000926 <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	791b      	ldrb	r3, [r3, #4]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 80008b2:	4b22      	ldr	r3, [pc, #136]	@ (800093c <UP_decodeHeader+0x1ec>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
                break;
 80008b8:	e035      	b.n	8000926 <UP_decodeHeader+0x1d6>
            case PAYLOAD:
                if (nBytes>1){
 80008ba:	4b21      	ldr	r3, [pc, #132]	@ (8000940 <UP_decodeHeader+0x1f0>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d90f      	bls.n	80008e2 <UP_decodeHeader+0x192>
                    datosComLib->cheksumRx ^= datosComLib->bufferRx[datosComLib->indexReadRx++];
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	689a      	ldr	r2, [r3, #8]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	791b      	ldrb	r3, [r3, #4]
 80008ca:	1c59      	adds	r1, r3, #1
 80008cc:	b2c8      	uxtb	r0, r1
 80008ce:	6879      	ldr	r1, [r7, #4]
 80008d0:	7108      	strb	r0, [r1, #4]
 80008d2:	4413      	add	r3, r2
 80008d4:	781a      	ldrb	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	789b      	ldrb	r3, [r3, #2]
 80008da:	4053      	eors	r3, r2
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	709a      	strb	r2, [r3, #2]
                }
                nBytes--;
 80008e2:	4b17      	ldr	r3, [pc, #92]	@ (8000940 <UP_decodeHeader+0x1f0>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4b15      	ldr	r3, [pc, #84]	@ (8000940 <UP_decodeHeader+0x1f0>)
 80008ec:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){
 80008ee:	4b14      	ldr	r3, [pc, #80]	@ (8000940 <UP_decodeHeader+0x1f0>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d116      	bne.n	8000924 <UP_decodeHeader+0x1d4>
                    estadoProtocolo=START;
 80008f6:	4b11      	ldr	r3, [pc, #68]	@ (800093c <UP_decodeHeader+0x1ec>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
                    if(datosComLib->cheksumRx == datosComLib->bufferRx[datosComLib->indexReadRx]){
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	789a      	ldrb	r2, [r3, #2]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	6879      	ldr	r1, [r7, #4]
 8000906:	7909      	ldrb	r1, [r1, #4]
 8000908:	440b      	add	r3, r1
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	429a      	cmp	r2, r3
 800090e:	d109      	bne.n	8000924 <UP_decodeHeader+0x1d4>
                    	UP_decodeData(datosComLib);
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f000 f817 	bl	8000944 <UP_decodeData>
                    }
                }

                break;
 8000916:	e005      	b.n	8000924 <UP_decodeHeader+0x1d4>
            default:
                estadoProtocolo=START;
 8000918:	4b08      	ldr	r3, [pc, #32]	@ (800093c <UP_decodeHeader+0x1ec>)
 800091a:	2200      	movs	r2, #0
 800091c:	701a      	strb	r2, [r3, #0]
                break;
 800091e:	e002      	b.n	8000926 <UP_decodeHeader+0x1d6>
                break;
 8000920:	bf00      	nop
 8000922:	e000      	b.n	8000926 <UP_decodeHeader+0x1d6>
                break;
 8000924:	bf00      	nop
    while (datosComLib->indexReadRx!=indexWriteRxCopy)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	791b      	ldrb	r3, [r3, #4]
 800092a:	7bfa      	ldrb	r2, [r7, #15]
 800092c:	429a      	cmp	r2, r3
 800092e:	f47f af17 	bne.w	8000760 <UP_decodeHeader+0x10>
        }
    }
}
 8000932:	bf00      	nop
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000178 	.word	0x20000178
 8000940:	20000180 	.word	0x20000180

08000944 <UP_decodeData>:

void UP_decodeData(_sDato *datosComLib){
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]

    uint8_t bufAux[20], indiceAux=0,bytes=0;
 800094c:	2300      	movs	r3, #0
 800094e:	77bb      	strb	r3, [r7, #30]
 8000950:	2300      	movs	r3, #0
 8000952:	77fb      	strb	r3, [r7, #31]

    switch (datosComLib->bufferRx[datosComLib->indexStart+2])//CMD EN LA POSICION 2
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	689a      	ldr	r2, [r3, #8]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	785b      	ldrb	r3, [r3, #1]
 800095c:	3302      	adds	r3, #2
 800095e:	4413      	add	r3, r2
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2bf2      	cmp	r3, #242	@ 0xf2
 8000964:	d01f      	beq.n	80009a6 <UP_decodeData+0x62>
 8000966:	2bf2      	cmp	r3, #242	@ 0xf2
 8000968:	dc46      	bgt.n	80009f8 <UP_decodeData+0xb4>
 800096a:	2bf1      	cmp	r3, #241	@ 0xf1
 800096c:	d010      	beq.n	8000990 <UP_decodeData+0x4c>
 800096e:	2bf1      	cmp	r3, #241	@ 0xf1
 8000970:	dc42      	bgt.n	80009f8 <UP_decodeData+0xb4>
 8000972:	2b00      	cmp	r3, #0
 8000974:	d020      	beq.n	80009b8 <UP_decodeData+0x74>
 8000976:	2bf0      	cmp	r3, #240	@ 0xf0
 8000978:	d13e      	bne.n	80009f8 <UP_decodeData+0xb4>
    {
    case ALIVE:

        bufAux[indiceAux++]=ALIVE;
 800097a:	7fbb      	ldrb	r3, [r7, #30]
 800097c:	1c5a      	adds	r2, r3, #1
 800097e:	77ba      	strb	r2, [r7, #30]
 8000980:	3320      	adds	r3, #32
 8000982:	443b      	add	r3, r7
 8000984:	22f0      	movs	r2, #240	@ 0xf0
 8000986:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;//aca debo darle CMD+CKS+PAYLOAD
 800098a:	2302      	movs	r3, #2
 800098c:	77fb      	strb	r3, [r7, #31]

    break;
 800098e:	e03e      	b.n	8000a0e <UP_decodeData+0xca>
    case FIRMWARE:

		bufAux[indiceAux++]=FIRMWARE;
 8000990:	7fbb      	ldrb	r3, [r7, #30]
 8000992:	1c5a      	adds	r2, r3, #1
 8000994:	77ba      	strb	r2, [r7, #30]
 8000996:	3320      	adds	r3, #32
 8000998:	443b      	add	r3, r7
 800099a:	22f1      	movs	r2, #241	@ 0xf1
 800099c:	f803 2c18 	strb.w	r2, [r3, #-24]
		bytes=0x02;
 80009a0:	2302      	movs	r3, #2
 80009a2:	77fb      	strb	r3, [r7, #31]

    break;
 80009a4:	e033      	b.n	8000a0e <UP_decodeData+0xca>

    case TEXT:

		bufAux[indiceAux++]=TEXT;
 80009a6:	7fbb      	ldrb	r3, [r7, #30]
 80009a8:	1c5a      	adds	r2, r3, #1
 80009aa:	77ba      	strb	r2, [r7, #30]
 80009ac:	3320      	adds	r3, #32
 80009ae:	443b      	add	r3, r7
 80009b0:	22f2      	movs	r2, #242	@ 0xf2
 80009b2:	f803 2c18 	strb.w	r2, [r3, #-24]
//		bytes=;

    break;
 80009b6:	e02a      	b.n	8000a0e <UP_decodeData+0xca>

    case ENGINES:
    	bufAux[indiceAux++]=ENGINES;
 80009b8:	7fbb      	ldrb	r3, [r7, #30]
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	77ba      	strb	r2, [r7, #30]
 80009be:	3320      	adds	r3, #32
 80009c0:	443b      	add	r3, r7
 80009c2:	2200      	movs	r2, #0
 80009c4:	f803 2c18 	strb.w	r2, [r3, #-24]

    	casts.u8[0]=datosComLib->bufferRx[datosComLib->indexStart+3];
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	689a      	ldr	r2, [r3, #8]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	785b      	ldrb	r3, [r3, #1]
 80009d0:	3303      	adds	r3, #3
 80009d2:	4413      	add	r3, r2
 80009d4:	781a      	ldrb	r2, [r3, #0]
 80009d6:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <UP_decodeData+0xe0>)
 80009d8:	701a      	strb	r2, [r3, #0]
    	casts.u8[1]=datosComLib->bufferRx[datosComLib->indexStart+4];
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	689a      	ldr	r2, [r3, #8]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	785b      	ldrb	r3, [r3, #1]
 80009e2:	3304      	adds	r3, #4
 80009e4:	4413      	add	r3, r2
 80009e6:	781a      	ldrb	r2, [r3, #0]
 80009e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <UP_decodeData+0xe0>)
 80009ea:	705a      	strb	r2, [r3, #1]

    	value = casts.i16[0]; //ver aca que pasa para recuperar el valor de la velocidad
 80009ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000a24 <UP_decodeData+0xe0>)
 80009ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 80009f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a28 <UP_decodeData+0xe4>)
 80009f4:	801a      	strh	r2, [r3, #0]

    break;
 80009f6:	e00a      	b.n	8000a0e <UP_decodeData+0xca>
    default:

        bufAux[indiceAux++]=0xFF;
 80009f8:	7fbb      	ldrb	r3, [r7, #30]
 80009fa:	1c5a      	adds	r2, r3, #1
 80009fc:	77ba      	strb	r2, [r7, #30]
 80009fe:	3320      	adds	r3, #32
 8000a00:	443b      	add	r3, r7
 8000a02:	22ff      	movs	r2, #255	@ 0xff
 8000a04:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	77fb      	strb	r3, [r7, #31]

    break;
 8000a0c:	bf00      	nop
    }

    UP_sendInfo(bufAux,bytes);
 8000a0e:	7ffa      	ldrb	r2, [r7, #31]
 8000a10:	f107 0308 	add.w	r3, r7, #8
 8000a14:	4611      	mov	r1, r2
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff fde8 	bl	80005ec <UP_sendInfo>
}
 8000a1c:	bf00      	nop
 8000a1e:	3720      	adds	r7, #32
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000174 	.word	0x20000174
 8000a28:	20000000 	.word	0x20000000

08000a2c <UP_datafromUSB>:

void UP_datafromUSB(uint8_t *buf, uint16_t length) {
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	460b      	mov	r3, r1
 8000a36:	807b      	strh	r3, [r7, #2]

  uint16_t i;

  for (i = 0; i < length; i++) {
 8000a38:	2300      	movs	r3, #0
 8000a3a:	81fb      	strh	r3, [r7, #14]
 8000a3c:	e016      	b.n	8000a6c <UP_datafromUSB+0x40>
	datosComLib->bufferRx[datosComLib->indexWriteRx] = buf[i];
 8000a3e:	89fb      	ldrh	r3, [r7, #14]
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	441a      	add	r2, r3
 8000a44:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <UP_datafromUSB+0x58>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	490e      	ldr	r1, [pc, #56]	@ (8000a84 <UP_datafromUSB+0x58>)
 8000a4c:	6809      	ldr	r1, [r1, #0]
 8000a4e:	78c9      	ldrb	r1, [r1, #3]
 8000a50:	b2c9      	uxtb	r1, r1
 8000a52:	440b      	add	r3, r1
 8000a54:	7812      	ldrb	r2, [r2, #0]
 8000a56:	701a      	strb	r2, [r3, #0]
	datosComLib->indexWriteRx++;
 8000a58:	4b0a      	ldr	r3, [pc, #40]	@ (8000a84 <UP_datafromUSB+0x58>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	78da      	ldrb	r2, [r3, #3]
 8000a5e:	b2d2      	uxtb	r2, r2
 8000a60:	3201      	adds	r2, #1
 8000a62:	b2d2      	uxtb	r2, r2
 8000a64:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < length; i++) {
 8000a66:	89fb      	ldrh	r3, [r7, #14]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	81fb      	strh	r3, [r7, #14]
 8000a6c:	89fa      	ldrh	r2, [r7, #14]
 8000a6e:	887b      	ldrh	r3, [r7, #2]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d3e4      	bcc.n	8000a3e <UP_datafromUSB+0x12>
  }
}
 8000a74:	bf00      	nop
 8000a76:	bf00      	nop
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	2000017c 	.word	0x2000017c

08000a88 <en_InitENG>:
 *      Author: Baccon
 */
#include "engines.h"
#include "stdlib.h"

void en_InitENG(_sEng *engines,uint16_t maxSpeed){
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	807b      	strh	r3, [r7, #2]

	engines->estado=FREE;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2202      	movs	r2, #2
 8000a98:	709a      	strb	r2, [r3, #2]
	engines->speed=0;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	801a      	strh	r2, [r3, #0]
	engines->maxSpeed=maxSpeed;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	887a      	ldrh	r2, [r7, #2]
 8000aa4:	809a      	strh	r2, [r3, #4]

}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
	...

08000ab4 <HAL_ADC_ConvCpltCallback>:
//void I2C_1_Abstract_Mem_Read_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b088      	sub	sp, #32
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]

	uint8_t u=0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	77fb      	strb	r3, [r7, #31]
	char palabra[18];

	for(u=0;u<NUM_CHANNELS;u++){
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	77fb      	strb	r3, [r7, #31]
 8000ac4:	e00c      	b.n	8000ae0 <HAL_ADC_ConvCpltCallback+0x2c>

//		casts.u16[0]=adcBuffer[u];
		sprintf(&palabra[0],"Channel %d:%i\n",u,adcBuffer[u]);
 8000ac6:	7ffa      	ldrb	r2, [r7, #31]
 8000ac8:	7ffb      	ldrb	r3, [r7, #31]
 8000aca:	490b      	ldr	r1, [pc, #44]	@ (8000af8 <HAL_ADC_ConvCpltCallback+0x44>)
 8000acc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ad0:	f107 000c 	add.w	r0, r7, #12
 8000ad4:	4909      	ldr	r1, [pc, #36]	@ (8000afc <HAL_ADC_ConvCpltCallback+0x48>)
 8000ad6:	f00a fa53 	bl	800af80 <siprintf>
	for(u=0;u<NUM_CHANNELS;u++){
 8000ada:	7ffb      	ldrb	r3, [r7, #31]
 8000adc:	3301      	adds	r3, #1
 8000ade:	77fb      	strb	r3, [r7, #31]
 8000ae0:	7ffb      	ldrb	r3, [r7, #31]
 8000ae2:	2b07      	cmp	r3, #7
 8000ae4:	d9ef      	bls.n	8000ac6 <HAL_ADC_ConvCpltCallback+0x12>
//		memcpy(datosComSerie.bufferTx,palabra,sizeof(palabra));
//		datosComSerie.indexWriteTx  += sizeof(palabra);
	}
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000ae6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aea:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000aec:	f002 fa37 	bl	8002f5e <HAL_GPIO_TogglePin>
}
 8000af0:	bf00      	nop
 8000af2:	3720      	adds	r7, #32
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000384 	.word	0x20000384
 8000afc:	0800b77c 	.word	0x0800b77c
 8000b00:	40020800 	.word	0x40020800

08000b04 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM11) {
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a04      	ldr	r2, [pc, #16]	@ (8000b24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d101      	bne.n	8000b1a <HAL_TIM_PeriodElapsedCallback+0x16>
		task10ms();//cambiar esto por una bandera
 8000b16:	f000 f815 	bl	8000b44 <task10ms>
	}
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40014800 	.word	0x40014800

08000b28 <HAL_I2C_MemRxCpltCallback>:
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
	if(hi2c->Devaddress==SSD1306_I2C_ADDR){
		SSD1306_DMAREADY();
	}
}
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress==SSD1306_I2C_ADDR){
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b34:	2b78      	cmp	r3, #120	@ 0x78
 8000b36:	d101      	bne.n	8000b3c <HAL_I2C_MemRxCpltCallback+0x14>
		SSD1306_DMAREADY();
 8000b38:	f000 fd0a 	bl	8001550 <SSD1306_DMAREADY>
	}
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <task10ms>:
void task10ms(){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0

	static uint8_t ticker=0;

	SSD1306_UpdateScreen();
 8000b48:	f000 fc04 	bl	8001354 <SSD1306_UpdateScreen>

	if(!SISINIT){
 8000b4c:	4b19      	ldr	r3, [pc, #100]	@ (8000bb4 <task10ms+0x70>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d10e      	bne.n	8000b78 <task10ms+0x34>
		if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 5000) == HAL_OK){
 8000b5a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2178      	movs	r1, #120	@ 0x78
 8000b62:	4815      	ldr	r0, [pc, #84]	@ (8000bb8 <task10ms+0x74>)
 8000b64:	f002 fd84 	bl	8003670 <HAL_I2C_IsDeviceReady>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d104      	bne.n	8000b78 <task10ms+0x34>

			SISINIT=TRUE;
 8000b6e:	4a11      	ldr	r2, [pc, #68]	@ (8000bb4 <task10ms+0x70>)
 8000b70:	7813      	ldrb	r3, [r2, #0]
 8000b72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b76:	7013      	strb	r3, [r2, #0]
		}
	}
	if(ticker%10==0){
 8000b78:	4b10      	ldr	r3, [pc, #64]	@ (8000bbc <task10ms+0x78>)
 8000b7a:	781a      	ldrb	r2, [r3, #0]
 8000b7c:	4b10      	ldr	r3, [pc, #64]	@ (8000bc0 <task10ms+0x7c>)
 8000b7e:	fba3 1302 	umull	r1, r3, r3, r2
 8000b82:	08d9      	lsrs	r1, r3, #3
 8000b84:	460b      	mov	r3, r1
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	440b      	add	r3, r1
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d107      	bne.n	8000ba4 <task10ms+0x60>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000b94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b98:	480a      	ldr	r0, [pc, #40]	@ (8000bc4 <task10ms+0x80>)
 8000b9a:	f002 f9e0 	bl	8002f5e <HAL_GPIO_TogglePin>
		ticker=0;
 8000b9e:	4b07      	ldr	r3, [pc, #28]	@ (8000bbc <task10ms+0x78>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
	}
	ticker++;
 8000ba4:	4b05      	ldr	r3, [pc, #20]	@ (8000bbc <task10ms+0x78>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	4b03      	ldr	r3, [pc, #12]	@ (8000bbc <task10ms+0x78>)
 8000bae:	701a      	strb	r2, [r3, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000394 	.word	0x20000394
 8000bb8:	200001cc 	.word	0x200001cc
 8000bbc:	200003a6 	.word	0x200003a6
 8000bc0:	cccccccd 	.word	0xcccccccd
 8000bc4:	40020800 	.word	0x40020800

08000bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bcc:	f000 ff66 	bl	8001a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd0:	f000 f85c 	bl	8000c8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd4:	f000 fa10 	bl	8000ff8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bd8:	f000 f9e6 	bl	8000fa8 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000bdc:	f009 fb9c 	bl	800a318 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8000be0:	f000 f93c 	bl	8000e5c <MX_TIM3_Init>
  MX_TIM11_Init();
 8000be4:	f000 f9bc 	bl	8000f60 <MX_TIM11_Init>
  MX_ADC1_Init();
 8000be8:	f000 f8b8 	bl	8000d5c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000bec:	f000 f908 	bl	8000e00 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000bf0:	481d      	ldr	r0, [pc, #116]	@ (8000c68 <main+0xa0>)
 8000bf2:	f005 f8f1 	bl	8005dd8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8000bf6:	481d      	ldr	r0, [pc, #116]	@ (8000c6c <main+0xa4>)
 8000bf8:	f005 f8ee 	bl	8005dd8 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000bfc:	2104      	movs	r1, #4
 8000bfe:	481a      	ldr	r0, [pc, #104]	@ (8000c68 <main+0xa0>)
 8000c00:	f005 f9a6 	bl	8005f50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c04:	2100      	movs	r1, #0
 8000c06:	4818      	ldr	r0, [pc, #96]	@ (8000c68 <main+0xa0>)
 8000c08:	f005 f9a2 	bl	8005f50 <HAL_TIM_PWM_Start>

  Display_Set_I2C_Master_Transmit(&I2C_1_Abstract_Master_Transmit, &I2C_1_Abstract_Master_Transmit_Blocking);
 8000c0c:	4918      	ldr	r1, [pc, #96]	@ (8000c70 <main+0xa8>)
 8000c0e:	4819      	ldr	r0, [pc, #100]	@ (8000c74 <main+0xac>)
 8000c10:	f000 fc88 	bl	8001524 <Display_Set_I2C_Master_Transmit>

  HAL_Delay(10);
 8000c14:	200a      	movs	r0, #10
 8000c16:	f000 ffb3 	bl	8001b80 <HAL_Delay>
  SSD1306_Init();
 8000c1a:	f000 faf5 	bl	8001208 <SSD1306_Init>
  SSD1306_Fill(WHITE);
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f000 fbe8 	bl	80013f4 <SSD1306_Fill>
  HAL_Delay(100);
 8000c24:	2064      	movs	r0, #100	@ 0x64
 8000c26:	f000 ffab 	bl	8001b80 <HAL_Delay>

  CDC_AttachRxData(&UP_datafromUSB);
 8000c2a:	4813      	ldr	r0, [pc, #76]	@ (8000c78 <main+0xb0>)
 8000c2c:	f009 fcc8 	bl	800a5c0 <CDC_AttachRxData>
  myFlags.allFlags=0;
 8000c30:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <main+0xb4>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	701a      	strb	r2, [r3, #0]
  UP_initprotocol(&datosComSerie,(uint8_t)RINGBUFFER);
 8000c36:	2100      	movs	r1, #0
 8000c38:	4811      	ldr	r0, [pc, #68]	@ (8000c80 <main+0xb8>)
 8000c3a:	f7ff fcb7 	bl	80005ac <UP_initprotocol>
  en_InitENG(&motorL, (uint16_t)htim3.Instance->ARR);
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c68 <main+0xa0>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	4619      	mov	r1, r3
 8000c48:	480e      	ldr	r0, [pc, #56]	@ (8000c84 <main+0xbc>)
 8000c4a:	f7ff ff1d 	bl	8000a88 <en_InitENG>
  en_InitENG(&motorR, (uint16_t)htim3.Instance->ARR);
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <main+0xa0>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	4619      	mov	r1, r3
 8000c58:	480b      	ldr	r0, [pc, #44]	@ (8000c88 <main+0xc0>)
 8000c5a:	f7ff ff15 	bl	8000a88 <en_InitENG>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	UP_comunicationsTask(&datosComSerie);
 8000c5e:	4808      	ldr	r0, [pc, #32]	@ (8000c80 <main+0xb8>)
 8000c60:	f000 fa56 	bl	8001110 <UP_comunicationsTask>
 8000c64:	e7fb      	b.n	8000c5e <main+0x96>
 8000c66:	bf00      	nop
 8000c68:	200002e0 	.word	0x200002e0
 8000c6c:	20000328 	.word	0x20000328
 8000c70:	080011cd 	.word	0x080011cd
 8000c74:	080011a5 	.word	0x080011a5
 8000c78:	08000a2d 	.word	0x08000a2d
 8000c7c:	20000394 	.word	0x20000394
 8000c80:	20000370 	.word	0x20000370
 8000c84:	20000398 	.word	0x20000398
 8000c88:	200003a0 	.word	0x200003a0

08000c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b094      	sub	sp, #80	@ 0x50
 8000c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c92:	f107 0320 	add.w	r3, r7, #32
 8000c96:	2230      	movs	r2, #48	@ 0x30
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f00a f992 	bl	800afc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	4b27      	ldr	r3, [pc, #156]	@ (8000d54 <SystemClock_Config+0xc8>)
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb8:	4a26      	ldr	r2, [pc, #152]	@ (8000d54 <SystemClock_Config+0xc8>)
 8000cba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cc0:	4b24      	ldr	r3, [pc, #144]	@ (8000d54 <SystemClock_Config+0xc8>)
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ccc:	2300      	movs	r3, #0
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	4b21      	ldr	r3, [pc, #132]	@ (8000d58 <SystemClock_Config+0xcc>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a20      	ldr	r2, [pc, #128]	@ (8000d58 <SystemClock_Config+0xcc>)
 8000cd6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cda:	6013      	str	r3, [r2, #0]
 8000cdc:	4b1e      	ldr	r3, [pc, #120]	@ (8000d58 <SystemClock_Config+0xcc>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cf0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cf6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000cfc:	2319      	movs	r3, #25
 8000cfe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000d00:	23c0      	movs	r3, #192	@ 0xc0
 8000d02:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d04:	2302      	movs	r3, #2
 8000d06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d08:	2304      	movs	r3, #4
 8000d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0c:	f107 0320 	add.w	r3, r7, #32
 8000d10:	4618      	mov	r0, r3
 8000d12:	f004 fbcd 	bl	80054b0 <HAL_RCC_OscConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d1c:	f000 fa6e 	bl	80011fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d20:	230f      	movs	r3, #15
 8000d22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d24:	2302      	movs	r3, #2
 8000d26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d36:	f107 030c 	add.w	r3, r7, #12
 8000d3a:	2103      	movs	r1, #3
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f004 fe2f 	bl	80059a0 <HAL_RCC_ClockConfig>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d48:	f000 fa58 	bl	80011fc <Error_Handler>
  }
}
 8000d4c:	bf00      	nop
 8000d4e:	3750      	adds	r7, #80	@ 0x50
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40007000 	.word	0x40007000

08000d5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d62:	463b      	mov	r3, r7
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d6e:	4b21      	ldr	r3, [pc, #132]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000d70:	4a21      	ldr	r2, [pc, #132]	@ (8000df8 <MX_ADC1_Init+0x9c>)
 8000d72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d74:	4b1f      	ldr	r3, [pc, #124]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000d76:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d82:	4b1c      	ldr	r3, [pc, #112]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d88:	4b1a      	ldr	r3, [pc, #104]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d8e:	4b19      	ldr	r3, [pc, #100]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d96:	4b17      	ldr	r3, [pc, #92]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d9c:	4b15      	ldr	r3, [pc, #84]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000d9e:	4a17      	ldr	r2, [pc, #92]	@ (8000dfc <MX_ADC1_Init+0xa0>)
 8000da0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000da2:	4b14      	ldr	r3, [pc, #80]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000da8:	4b12      	ldr	r3, [pc, #72]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dae:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000db6:	4b0f      	ldr	r3, [pc, #60]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dbc:	480d      	ldr	r0, [pc, #52]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000dbe:	f000 ff03 	bl	8001bc8 <HAL_ADC_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000dc8:	f000 fa18 	bl	80011fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd8:	463b      	mov	r3, r7
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4805      	ldr	r0, [pc, #20]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000dde:	f001 f85b 	bl	8001e98 <HAL_ADC_ConfigChannel>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000de8:	f000 fa08 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000184 	.word	0x20000184
 8000df8:	40012000 	.word	0x40012000
 8000dfc:	0f000001 	.word	0x0f000001

08000e00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e04:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <MX_I2C1_Init+0x50>)
 8000e06:	4a13      	ldr	r2, [pc, #76]	@ (8000e54 <MX_I2C1_Init+0x54>)
 8000e08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e0a:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <MX_I2C1_Init+0x50>)
 8000e0c:	4a12      	ldr	r2, [pc, #72]	@ (8000e58 <MX_I2C1_Init+0x58>)
 8000e0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <MX_I2C1_Init+0x50>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	@ (8000e50 <MX_I2C1_Init+0x50>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e50 <MX_I2C1_Init+0x50>)
 8000e1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e24:	4b0a      	ldr	r3, [pc, #40]	@ (8000e50 <MX_I2C1_Init+0x50>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e2a:	4b09      	ldr	r3, [pc, #36]	@ (8000e50 <MX_I2C1_Init+0x50>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e30:	4b07      	ldr	r3, [pc, #28]	@ (8000e50 <MX_I2C1_Init+0x50>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e36:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <MX_I2C1_Init+0x50>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e3c:	4804      	ldr	r0, [pc, #16]	@ (8000e50 <MX_I2C1_Init+0x50>)
 8000e3e:	f002 f8a9 	bl	8002f94 <HAL_I2C_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e48:	f000 f9d8 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	200001cc 	.word	0x200001cc
 8000e54:	40005400 	.word	0x40005400
 8000e58:	00061a80 	.word	0x00061a80

08000e5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08e      	sub	sp, #56	@ 0x38
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e70:	f107 0320 	add.w	r3, r7, #32
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
 8000e88:	615a      	str	r2, [r3, #20]
 8000e8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e8c:	4b32      	ldr	r3, [pc, #200]	@ (8000f58 <MX_TIM3_Init+0xfc>)
 8000e8e:	4a33      	ldr	r2, [pc, #204]	@ (8000f5c <MX_TIM3_Init+0x100>)
 8000e90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8000e92:	4b31      	ldr	r3, [pc, #196]	@ (8000f58 <MX_TIM3_Init+0xfc>)
 8000e94:	220f      	movs	r2, #15
 8000e96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e98:	4b2f      	ldr	r3, [pc, #188]	@ (8000f58 <MX_TIM3_Init+0xfc>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8000e9e:	4b2e      	ldr	r3, [pc, #184]	@ (8000f58 <MX_TIM3_Init+0xfc>)
 8000ea0:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000ea4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea6:	4b2c      	ldr	r3, [pc, #176]	@ (8000f58 <MX_TIM3_Init+0xfc>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eac:	4b2a      	ldr	r3, [pc, #168]	@ (8000f58 <MX_TIM3_Init+0xfc>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000eb2:	4829      	ldr	r0, [pc, #164]	@ (8000f58 <MX_TIM3_Init+0xfc>)
 8000eb4:	f004 ff40 	bl	8005d38 <HAL_TIM_Base_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000ebe:	f000 f99d 	bl	80011fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ec8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4822      	ldr	r0, [pc, #136]	@ (8000f58 <MX_TIM3_Init+0xfc>)
 8000ed0:	f005 faa0 	bl	8006414 <HAL_TIM_ConfigClockSource>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000eda:	f000 f98f 	bl	80011fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ede:	481e      	ldr	r0, [pc, #120]	@ (8000f58 <MX_TIM3_Init+0xfc>)
 8000ee0:	f004 ffdc 	bl	8005e9c <HAL_TIM_PWM_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000eea:	f000 f987 	bl	80011fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ef6:	f107 0320 	add.w	r3, r7, #32
 8000efa:	4619      	mov	r1, r3
 8000efc:	4816      	ldr	r0, [pc, #88]	@ (8000f58 <MX_TIM3_Init+0xfc>)
 8000efe:	f005 fe4b 	bl	8006b98 <HAL_TIMEx_MasterConfigSynchronization>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000f08:	f000 f978 	bl	80011fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f0c:	2360      	movs	r3, #96	@ 0x60
 8000f0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	2200      	movs	r2, #0
 8000f20:	4619      	mov	r1, r3
 8000f22:	480d      	ldr	r0, [pc, #52]	@ (8000f58 <MX_TIM3_Init+0xfc>)
 8000f24:	f005 f9b4 	bl	8006290 <HAL_TIM_PWM_ConfigChannel>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000f2e:	f000 f965 	bl	80011fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	2204      	movs	r2, #4
 8000f36:	4619      	mov	r1, r3
 8000f38:	4807      	ldr	r0, [pc, #28]	@ (8000f58 <MX_TIM3_Init+0xfc>)
 8000f3a:	f005 f9a9 	bl	8006290 <HAL_TIM_PWM_ConfigChannel>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000f44:	f000 f95a 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f48:	4803      	ldr	r0, [pc, #12]	@ (8000f58 <MX_TIM3_Init+0xfc>)
 8000f4a:	f000 fc8f 	bl	800186c <HAL_TIM_MspPostInit>

}
 8000f4e:	bf00      	nop
 8000f50:	3738      	adds	r7, #56	@ 0x38
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200002e0 	.word	0x200002e0
 8000f5c:	40000400 	.word	0x40000400

08000f60 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000f64:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa0 <MX_TIM11_Init+0x40>)
 8000f66:	4a0f      	ldr	r2, [pc, #60]	@ (8000fa4 <MX_TIM11_Init+0x44>)
 8000f68:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 95;
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa0 <MX_TIM11_Init+0x40>)
 8000f6c:	225f      	movs	r2, #95	@ 0x5f
 8000f6e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f70:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa0 <MX_TIM11_Init+0x40>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 9999;
 8000f76:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <MX_TIM11_Init+0x40>)
 8000f78:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000f7c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7e:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <MX_TIM11_Init+0x40>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f84:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <MX_TIM11_Init+0x40>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000f8a:	4805      	ldr	r0, [pc, #20]	@ (8000fa0 <MX_TIM11_Init+0x40>)
 8000f8c:	f004 fed4 	bl	8005d38 <HAL_TIM_Base_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000f96:	f000 f931 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000328 	.word	0x20000328
 8000fa4:	40014800 	.word	0x40014800

08000fa8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ff4 <MX_DMA_Init+0x4c>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8000ff4 <MX_DMA_Init+0x4c>)
 8000fb8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff4 <MX_DMA_Init+0x4c>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2100      	movs	r1, #0
 8000fce:	200b      	movs	r0, #11
 8000fd0:	f001 fa75 	bl	80024be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000fd4:	200b      	movs	r0, #11
 8000fd6:	f001 fa8e 	bl	80024f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	200c      	movs	r0, #12
 8000fe0:	f001 fa6d 	bl	80024be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000fe4:	200c      	movs	r0, #12
 8000fe6:	f001 fa86 	bl	80024f6 <HAL_NVIC_EnableIRQ>

}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800

08000ff8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	@ 0x28
 8000ffc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	4b3b      	ldr	r3, [pc, #236]	@ (8001100 <MX_GPIO_Init+0x108>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	4a3a      	ldr	r2, [pc, #232]	@ (8001100 <MX_GPIO_Init+0x108>)
 8001018:	f043 0304 	orr.w	r3, r3, #4
 800101c:	6313      	str	r3, [r2, #48]	@ 0x30
 800101e:	4b38      	ldr	r3, [pc, #224]	@ (8001100 <MX_GPIO_Init+0x108>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	f003 0304 	and.w	r3, r3, #4
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b34      	ldr	r3, [pc, #208]	@ (8001100 <MX_GPIO_Init+0x108>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	4a33      	ldr	r2, [pc, #204]	@ (8001100 <MX_GPIO_Init+0x108>)
 8001034:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001038:	6313      	str	r3, [r2, #48]	@ 0x30
 800103a:	4b31      	ldr	r3, [pc, #196]	@ (8001100 <MX_GPIO_Init+0x108>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	4b2d      	ldr	r3, [pc, #180]	@ (8001100 <MX_GPIO_Init+0x108>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	4a2c      	ldr	r2, [pc, #176]	@ (8001100 <MX_GPIO_Init+0x108>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6313      	str	r3, [r2, #48]	@ 0x30
 8001056:	4b2a      	ldr	r3, [pc, #168]	@ (8001100 <MX_GPIO_Init+0x108>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	4b26      	ldr	r3, [pc, #152]	@ (8001100 <MX_GPIO_Init+0x108>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	4a25      	ldr	r2, [pc, #148]	@ (8001100 <MX_GPIO_Init+0x108>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	6313      	str	r3, [r2, #48]	@ 0x30
 8001072:	4b23      	ldr	r3, [pc, #140]	@ (8001100 <MX_GPIO_Init+0x108>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001084:	481f      	ldr	r0, [pc, #124]	@ (8001104 <MX_GPIO_Init+0x10c>)
 8001086:	f001 ff51 	bl	8002f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Out2_2_Pin|Out2_1_Pin|Out1_2_Pin, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	f44f 4106 	mov.w	r1, #34304	@ 0x8600
 8001090:	481d      	ldr	r0, [pc, #116]	@ (8001108 <MX_GPIO_Init+0x110>)
 8001092:	f001 ff4b 	bl	8002f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Out1_1_GPIO_Port, Out1_1_Pin, GPIO_PIN_RESET);
 8001096:	2200      	movs	r2, #0
 8001098:	2108      	movs	r1, #8
 800109a:	481c      	ldr	r0, [pc, #112]	@ (800110c <MX_GPIO_Init+0x114>)
 800109c:	f001 ff46 	bl	8002f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80010a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a6:	2301      	movs	r3, #1
 80010a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4619      	mov	r1, r3
 80010b8:	4812      	ldr	r0, [pc, #72]	@ (8001104 <MX_GPIO_Init+0x10c>)
 80010ba:	f001 fdb3 	bl	8002c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : Out2_2_Pin Out2_1_Pin Out1_2_Pin */
  GPIO_InitStruct.Pin = Out2_2_Pin|Out2_1_Pin|Out1_2_Pin;
 80010be:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 80010c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c4:	2301      	movs	r3, #1
 80010c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4619      	mov	r1, r3
 80010d6:	480c      	ldr	r0, [pc, #48]	@ (8001108 <MX_GPIO_Init+0x110>)
 80010d8:	f001 fda4 	bl	8002c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : Out1_1_Pin */
  GPIO_InitStruct.Pin = Out1_1_Pin;
 80010dc:	2308      	movs	r3, #8
 80010de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e0:	2301      	movs	r3, #1
 80010e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	2300      	movs	r3, #0
 80010ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Out1_1_GPIO_Port, &GPIO_InitStruct);
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	4619      	mov	r1, r3
 80010f2:	4806      	ldr	r0, [pc, #24]	@ (800110c <MX_GPIO_Init+0x114>)
 80010f4:	f001 fd96 	bl	8002c24 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80010f8:	bf00      	nop
 80010fa:	3728      	adds	r7, #40	@ 0x28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40023800 	.word	0x40023800
 8001104:	40020800 	.word	0x40020800
 8001108:	40020000 	.word	0x40020000
 800110c:	40020400 	.word	0x40020400

08001110 <UP_comunicationsTask>:

/* USER CODE BEGIN 4 */
void UP_comunicationsTask(_sDato *datosCom){
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

	if(datosCom->indexReadRx!=datosCom->indexWriteRx ){
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	791a      	ldrb	r2, [r3, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	78db      	ldrb	r3, [r3, #3]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	429a      	cmp	r2, r3
 8001124:	d007      	beq.n	8001136 <UP_comunicationsTask+0x26>
		UP_decodeHeader(datosCom);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff fb12 	bl	8000750 <UP_decodeHeader>
		datosCom->indexReadRx=datosCom->indexWriteRx;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	78db      	ldrb	r3, [r3, #3]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	711a      	strb	r2, [r3, #4]
	}

	if(datosCom->indexReadTx!=datosCom->indexWriteTx ){
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	799a      	ldrb	r2, [r3, #6]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	795b      	ldrb	r3, [r3, #5]
 800113e:	429a      	cmp	r2, r3
 8001140:	d02b      	beq.n	800119a <UP_comunicationsTask+0x8a>

		if(datosCom->indexWriteTx > datosCom->indexReadTx){
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	795a      	ldrb	r2, [r3, #5]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	799b      	ldrb	r3, [r3, #6]
 800114a:	429a      	cmp	r2, r3
 800114c:	d908      	bls.n	8001160 <UP_comunicationsTask+0x50>
				datosCom->bytesTosend = datosCom->indexWriteTx - datosCom->indexReadTx;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	795a      	ldrb	r2, [r3, #5]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	799b      	ldrb	r3, [r3, #6]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	b2da      	uxtb	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	741a      	strb	r2, [r3, #16]
 800115e:	e006      	b.n	800116e <UP_comunicationsTask+0x5e>
		    }else{
		    	datosCom->bytesTosend =  sizeof(datosCom->bufferRx) - datosCom->indexReadTx;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	799b      	ldrb	r3, [r3, #6]
 8001164:	f1c3 0304 	rsb	r3, r3, #4
 8001168:	b2da      	uxtb	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	741a      	strb	r2, [r3, #16]
		    }
		    if(CDC_Transmit_FS(&datosCom->bufferTx[datosCom->indexReadTx], datosCom->bytesTosend) == USBD_OK){
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	7992      	ldrb	r2, [r2, #6]
 8001176:	441a      	add	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	7c1b      	ldrb	r3, [r3, #16]
 800117c:	4619      	mov	r1, r3
 800117e:	4610      	mov	r0, r2
 8001180:	f009 f9e6 	bl	800a550 <CDC_Transmit_FS>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d107      	bne.n	800119a <UP_comunicationsTask+0x8a>
		    	datosCom->indexReadTx += datosCom->bytesTosend;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	799a      	ldrb	r2, [r3, #6]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	7c1b      	ldrb	r3, [r3, #16]
 8001192:	4413      	add	r3, r2
 8001194:	b2da      	uxtb	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	719a      	strb	r2, [r3, #6]
		    }
	}
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <I2C_1_Abstract_Master_Transmit>:

void I2C_1_Abstract_Master_Transmit(uint16_t Dev_Address, uint8_t *p_Data, uint16_t _Size){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	6039      	str	r1, [r7, #0]
 80011ae:	80fb      	strh	r3, [r7, #6]
 80011b0:	4613      	mov	r3, r2
 80011b2:	80bb      	strh	r3, [r7, #4]
//	HAL_I2C_Mem_Write_DMA(&hi2c1, Dev_Address, 0x40, 1, p_Data, _Size);
	HAL_I2C_Master_Transmit_DMA(&hi2c1, Dev_Address, p_Data, _Size);
 80011b4:	88bb      	ldrh	r3, [r7, #4]
 80011b6:	88f9      	ldrh	r1, [r7, #6]
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	4803      	ldr	r0, [pc, #12]	@ (80011c8 <I2C_1_Abstract_Master_Transmit+0x24>)
 80011bc:	f002 f92c 	bl	8003418 <HAL_I2C_Master_Transmit_DMA>
//	HAL_I2C_Mem_Write(&hi2c1, Dev_Address, 0x40, 1, p_Data, _Size, 10);
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200001cc 	.word	0x200001cc

080011cc <I2C_1_Abstract_Master_Transmit_Blocking>:

void I2C_1_Abstract_Master_Transmit_Blocking(uint16_t Dev_Address, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af02      	add	r7, sp, #8
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	4603      	mov	r3, r0
 80011d8:	81fb      	strh	r3, [r7, #14]
 80011da:	4613      	mov	r3, r2
 80011dc:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1, Dev_Address, p_Data, _Size, _Timeout);
 80011de:	89ba      	ldrh	r2, [r7, #12]
 80011e0:	89f9      	ldrh	r1, [r7, #14]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	4613      	mov	r3, r2
 80011e8:	68ba      	ldr	r2, [r7, #8]
 80011ea:	4803      	ldr	r0, [pc, #12]	@ (80011f8 <I2C_1_Abstract_Master_Transmit_Blocking+0x2c>)
 80011ec:	f002 f816 	bl	800321c <HAL_I2C_Master_Transmit>
}
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200001cc 	.word	0x200001cc

080011fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001200:	b672      	cpsid	i
}
 8001202:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <Error_Handler+0x8>

08001208 <SSD1306_Init>:
        }
    }
}

void SSD1306_Init()
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0

	SSD1306_WRITECOMMAND(0xAE);
 800120c:	22ae      	movs	r2, #174	@ 0xae
 800120e:	2100      	movs	r1, #0
 8001210:	2078      	movs	r0, #120	@ 0x78
 8001212:	f000 f96b 	bl	80014ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 8001216:	2220      	movs	r2, #32
 8001218:	2100      	movs	r1, #0
 800121a:	2078      	movs	r0, #120	@ 0x78
 800121c:	f000 f966 	bl	80014ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 8001220:	2210      	movs	r2, #16
 8001222:	2100      	movs	r1, #0
 8001224:	2078      	movs	r0, #120	@ 0x78
 8001226:	f000 f961 	bl	80014ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0);
 800122a:	22b0      	movs	r2, #176	@ 0xb0
 800122c:	2100      	movs	r1, #0
 800122e:	2078      	movs	r0, #120	@ 0x78
 8001230:	f000 f95c 	bl	80014ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8);
 8001234:	22c8      	movs	r2, #200	@ 0xc8
 8001236:	2100      	movs	r1, #0
 8001238:	2078      	movs	r0, #120	@ 0x78
 800123a:	f000 f957 	bl	80014ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	2078      	movs	r0, #120	@ 0x78
 8001244:	f000 f952 	bl	80014ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 8001248:	2210      	movs	r2, #16
 800124a:	2100      	movs	r1, #0
 800124c:	2078      	movs	r0, #120	@ 0x78
 800124e:	f000 f94d 	bl	80014ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40);
 8001252:	2240      	movs	r2, #64	@ 0x40
 8001254:	2100      	movs	r1, #0
 8001256:	2078      	movs	r0, #120	@ 0x78
 8001258:	f000 f948 	bl	80014ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81);
 800125c:	2281      	movs	r2, #129	@ 0x81
 800125e:	2100      	movs	r1, #0
 8001260:	2078      	movs	r0, #120	@ 0x78
 8001262:	f000 f943 	bl	80014ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001266:	22ff      	movs	r2, #255	@ 0xff
 8001268:	2100      	movs	r1, #0
 800126a:	2078      	movs	r0, #120	@ 0x78
 800126c:	f000 f93e 	bl	80014ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1);
 8001270:	22a1      	movs	r2, #161	@ 0xa1
 8001272:	2100      	movs	r1, #0
 8001274:	2078      	movs	r0, #120	@ 0x78
 8001276:	f000 f939 	bl	80014ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6);
 800127a:	22a6      	movs	r2, #166	@ 0xa6
 800127c:	2100      	movs	r1, #0
 800127e:	2078      	movs	r0, #120	@ 0x78
 8001280:	f000 f934 	bl	80014ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8);
 8001284:	22a8      	movs	r2, #168	@ 0xa8
 8001286:	2100      	movs	r1, #0
 8001288:	2078      	movs	r0, #120	@ 0x78
 800128a:	f000 f92f 	bl	80014ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F);
 800128e:	223f      	movs	r2, #63	@ 0x3f
 8001290:	2100      	movs	r1, #0
 8001292:	2078      	movs	r0, #120	@ 0x78
 8001294:	f000 f92a 	bl	80014ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4);
 8001298:	22a4      	movs	r2, #164	@ 0xa4
 800129a:	2100      	movs	r1, #0
 800129c:	2078      	movs	r0, #120	@ 0x78
 800129e:	f000 f925 	bl	80014ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3);
 80012a2:	22d3      	movs	r2, #211	@ 0xd3
 80012a4:	2100      	movs	r1, #0
 80012a6:	2078      	movs	r0, #120	@ 0x78
 80012a8:	f000 f920 	bl	80014ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 80012ac:	2200      	movs	r2, #0
 80012ae:	2100      	movs	r1, #0
 80012b0:	2078      	movs	r0, #120	@ 0x78
 80012b2:	f000 f91b 	bl	80014ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5);
 80012b6:	22d5      	movs	r2, #213	@ 0xd5
 80012b8:	2100      	movs	r1, #0
 80012ba:	2078      	movs	r0, #120	@ 0x78
 80012bc:	f000 f916 	bl	80014ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0);
 80012c0:	22f0      	movs	r2, #240	@ 0xf0
 80012c2:	2100      	movs	r1, #0
 80012c4:	2078      	movs	r0, #120	@ 0x78
 80012c6:	f000 f911 	bl	80014ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9);
 80012ca:	22d9      	movs	r2, #217	@ 0xd9
 80012cc:	2100      	movs	r1, #0
 80012ce:	2078      	movs	r0, #120	@ 0x78
 80012d0:	f000 f90c 	bl	80014ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22);
 80012d4:	2222      	movs	r2, #34	@ 0x22
 80012d6:	2100      	movs	r1, #0
 80012d8:	2078      	movs	r0, #120	@ 0x78
 80012da:	f000 f907 	bl	80014ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA);
 80012de:	22da      	movs	r2, #218	@ 0xda
 80012e0:	2100      	movs	r1, #0
 80012e2:	2078      	movs	r0, #120	@ 0x78
 80012e4:	f000 f902 	bl	80014ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80012e8:	2212      	movs	r2, #18
 80012ea:	2100      	movs	r1, #0
 80012ec:	2078      	movs	r0, #120	@ 0x78
 80012ee:	f000 f8fd 	bl	80014ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB);
 80012f2:	22db      	movs	r2, #219	@ 0xdb
 80012f4:	2100      	movs	r1, #0
 80012f6:	2078      	movs	r0, #120	@ 0x78
 80012f8:	f000 f8f8 	bl	80014ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 80012fc:	2220      	movs	r2, #32
 80012fe:	2100      	movs	r1, #0
 8001300:	2078      	movs	r0, #120	@ 0x78
 8001302:	f000 f8f3 	bl	80014ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D);
 8001306:	228d      	movs	r2, #141	@ 0x8d
 8001308:	2100      	movs	r1, #0
 800130a:	2078      	movs	r0, #120	@ 0x78
 800130c:	f000 f8ee 	bl	80014ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14);
 8001310:	2214      	movs	r2, #20
 8001312:	2100      	movs	r1, #0
 8001314:	2078      	movs	r0, #120	@ 0x78
 8001316:	f000 f8e9 	bl	80014ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF);
 800131a:	22af      	movs	r2, #175	@ 0xaf
 800131c:	2100      	movs	r1, #0
 800131e:	2078      	movs	r0, #120	@ 0x78
 8001320:	f000 f8e4 	bl	80014ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001324:	222e      	movs	r2, #46	@ 0x2e
 8001326:	2100      	movs	r1, #0
 8001328:	2078      	movs	r0, #120	@ 0x78
 800132a:	f000 f8df 	bl	80014ec <ssd1306_I2C_Write>

	SSD1306.CurrentX = 0;
 800132e:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <SSD1306_Init+0x148>)
 8001330:	2200      	movs	r2, #0
 8001332:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001334:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <SSD1306_Init+0x148>)
 8001336:	2200      	movs	r2, #0
 8001338:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 800133a:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <SSD1306_Init+0x148>)
 800133c:	2201      	movs	r2, #1
 800133e:	715a      	strb	r2, [r3, #5]
	SSD1306.Page=0;
 8001340:	4b03      	ldr	r3, [pc, #12]	@ (8001350 <SSD1306_Init+0x148>)
 8001342:	2200      	movs	r2, #0
 8001344:	719a      	strb	r2, [r3, #6]
	SSD1306.DMA = Init;
 8001346:	4b02      	ldr	r3, [pc, #8]	@ (8001350 <SSD1306_Init+0x148>)
 8001348:	2200      	movs	r2, #0
 800134a:	71da      	strb	r2, [r3, #7]

}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	200007b0 	.word	0x200007b0

08001354 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	switch(SSD1306.DMA){
 8001358:	4b24      	ldr	r3, [pc, #144]	@ (80013ec <SSD1306_UpdateScreen+0x98>)
 800135a:	79db      	ldrb	r3, [r3, #7]
 800135c:	2b03      	cmp	r3, #3
 800135e:	d83a      	bhi.n	80013d6 <SSD1306_UpdateScreen+0x82>
 8001360:	a201      	add	r2, pc, #4	@ (adr r2, 8001368 <SSD1306_UpdateScreen+0x14>)
 8001362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001366:	bf00      	nop
 8001368:	08001379 	.word	0x08001379
 800136c:	080013d7 	.word	0x080013d7
 8001370:	08001381 	.word	0x08001381
 8001374:	08001395 	.word	0x08001395
		case Init:
			SSD1306.DMA=Ready;
 8001378:	4b1c      	ldr	r3, [pc, #112]	@ (80013ec <SSD1306_UpdateScreen+0x98>)
 800137a:	2203      	movs	r2, #3
 800137c:	71da      	strb	r2, [r3, #7]
			break;
 800137e:	e02b      	b.n	80013d8 <SSD1306_UpdateScreen+0x84>
		case Waiting:
			//uso esto para esperar al callback del dma
			break;
		case Printing:
			SSD1306.DMA=Waiting;
 8001380:	4b1a      	ldr	r3, [pc, #104]	@ (80013ec <SSD1306_UpdateScreen+0x98>)
 8001382:	2201      	movs	r2, #1
 8001384:	71da      	strb	r2, [r3, #7]
			SSD1306.Page++;
 8001386:	4b19      	ldr	r3, [pc, #100]	@ (80013ec <SSD1306_UpdateScreen+0x98>)
 8001388:	799b      	ldrb	r3, [r3, #6]
 800138a:	3301      	adds	r3, #1
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4b17      	ldr	r3, [pc, #92]	@ (80013ec <SSD1306_UpdateScreen+0x98>)
 8001390:	719a      	strb	r2, [r3, #6]
			break;
 8001392:	e021      	b.n	80013d8 <SSD1306_UpdateScreen+0x84>
		case Ready:
			SSD1306_WRITECOMMAND(0xB0 + SSD1306.Page);
 8001394:	4b15      	ldr	r3, [pc, #84]	@ (80013ec <SSD1306_UpdateScreen+0x98>)
 8001396:	799b      	ldrb	r3, [r3, #6]
 8001398:	3b50      	subs	r3, #80	@ 0x50
 800139a:	b2db      	uxtb	r3, r3
 800139c:	461a      	mov	r2, r3
 800139e:	2100      	movs	r1, #0
 80013a0:	2078      	movs	r0, #120	@ 0x78
 80013a2:	f000 f8a3 	bl	80014ec <ssd1306_I2C_Write>
			SSD1306_WRITECOMMAND(0x00);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	2078      	movs	r0, #120	@ 0x78
 80013ac:	f000 f89e 	bl	80014ec <ssd1306_I2C_Write>
			SSD1306_WRITECOMMAND(0x10);
 80013b0:	2210      	movs	r2, #16
 80013b2:	2100      	movs	r1, #0
 80013b4:	2078      	movs	r0, #120	@ 0x78
 80013b6:	f000 f899 	bl	80014ec <ssd1306_I2C_Write>
			ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * SSD1306.Page], SSD1306_WIDTH);
 80013ba:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <SSD1306_UpdateScreen+0x98>)
 80013bc:	799b      	ldrb	r3, [r3, #6]
 80013be:	01db      	lsls	r3, r3, #7
 80013c0:	4a0b      	ldr	r2, [pc, #44]	@ (80013f0 <SSD1306_UpdateScreen+0x9c>)
 80013c2:	441a      	add	r2, r3
 80013c4:	2380      	movs	r3, #128	@ 0x80
 80013c6:	2140      	movs	r1, #64	@ 0x40
 80013c8:	2078      	movs	r0, #120	@ 0x78
 80013ca:	f000 f82b 	bl	8001424 <ssd1306_I2C_WriteMulti>
			SSD1306.DMA=Printing;
 80013ce:	4b07      	ldr	r3, [pc, #28]	@ (80013ec <SSD1306_UpdateScreen+0x98>)
 80013d0:	2202      	movs	r2, #2
 80013d2:	71da      	strb	r2, [r3, #7]
			break;
 80013d4:	e000      	b.n	80013d8 <SSD1306_UpdateScreen+0x84>
		default:
			break;
 80013d6:	bf00      	nop
		}
	if(SSD1306.Page>7){
 80013d8:	4b04      	ldr	r3, [pc, #16]	@ (80013ec <SSD1306_UpdateScreen+0x98>)
 80013da:	799b      	ldrb	r3, [r3, #6]
 80013dc:	2b07      	cmp	r3, #7
 80013de:	d902      	bls.n	80013e6 <SSD1306_UpdateScreen+0x92>
		SSD1306.Page=0;
 80013e0:	4b02      	ldr	r3, [pc, #8]	@ (80013ec <SSD1306_UpdateScreen+0x98>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	719a      	strb	r2, [r3, #6]
	}
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200007b0 	.word	0x200007b0
 80013f0:	200003a8 	.word	0x200003a8

080013f4 <SSD1306_Fill>:
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
	memset(SSD1306_Buffer, (color == BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <SSD1306_Fill+0x14>
 8001404:	2300      	movs	r3, #0
 8001406:	e000      	b.n	800140a <SSD1306_Fill+0x16>
 8001408:	23ff      	movs	r3, #255	@ 0xff
 800140a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800140e:	4619      	mov	r1, r3
 8001410:	4803      	ldr	r0, [pc, #12]	@ (8001420 <SSD1306_Fill+0x2c>)
 8001412:	f009 fdd7 	bl	800afc4 <memset>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200003a8 	.word	0x200003a8

08001424 <ssd1306_I2C_WriteMulti>:
	SSD1306_WRITECOMMAND(0x8D);
	SSD1306_WRITECOMMAND(0x10);
	SSD1306_WRITECOMMAND(0xAE);
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001424:	b590      	push	{r4, r7, lr}
 8001426:	b0c5      	sub	sp, #276	@ 0x114
 8001428:	af00      	add	r7, sp, #0
 800142a:	4604      	mov	r4, r0
 800142c:	4608      	mov	r0, r1
 800142e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001432:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001436:	600a      	str	r2, [r1, #0]
 8001438:	4619      	mov	r1, r3
 800143a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800143e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001442:	4622      	mov	r2, r4
 8001444:	701a      	strb	r2, [r3, #0]
 8001446:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800144a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800144e:	4602      	mov	r2, r0
 8001450:	701a      	strb	r2, [r3, #0]
 8001452:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001456:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800145a:	460a      	mov	r2, r1
 800145c:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 800145e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001462:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001466:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800146a:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800146e:	7812      	ldrb	r2, [r2, #0]
 8001470:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8001472:	2300      	movs	r3, #0
 8001474:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001478:	e015      	b.n	80014a6 <ssd1306_I2C_WriteMulti+0x82>
		dt[i+1] = data[i];
 800147a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800147e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001482:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001486:	6812      	ldr	r2, [r2, #0]
 8001488:	441a      	add	r2, r3
 800148a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800148e:	3301      	adds	r3, #1
 8001490:	7811      	ldrb	r1, [r2, #0]
 8001492:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001496:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800149a:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 800149c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80014a0:	3301      	adds	r3, #1
 80014a2:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80014a6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80014b0:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80014b4:	8812      	ldrh	r2, [r2, #0]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d8df      	bhi.n	800147a <ssd1306_I2C_WriteMulti+0x56>

	I2C_Master_Transmit(address, dt, count+1);
 80014ba:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <ssd1306_I2C_WriteMulti+0xc4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80014c2:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 80014c6:	7812      	ldrb	r2, [r2, #0]
 80014c8:	b290      	uxth	r0, r2
 80014ca:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80014ce:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80014d2:	8812      	ldrh	r2, [r2, #0]
 80014d4:	3201      	adds	r2, #1
 80014d6:	b292      	uxth	r2, r2
 80014d8:	f107 010c 	add.w	r1, r7, #12
 80014dc:	4798      	blx	r3
}
 80014de:	bf00      	nop
 80014e0:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd90      	pop	{r4, r7, pc}
 80014e8:	200007a8 	.word	0x200007a8

080014ec <ssd1306_I2C_Write>:

void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data){
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
 80014f6:	460b      	mov	r3, r1
 80014f8:	71bb      	strb	r3, [r7, #6]
 80014fa:	4613      	mov	r3, r2
 80014fc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80014fe:	79bb      	ldrb	r3, [r7, #6]
 8001500:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001502:	797b      	ldrb	r3, [r7, #5]
 8001504:	737b      	strb	r3, [r7, #13]
	I2C_Master_Transmit_Blocking(address, dt, 2, 10);
 8001506:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <ssd1306_I2C_Write+0x34>)
 8001508:	681c      	ldr	r4, [r3, #0]
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	b298      	uxth	r0, r3
 800150e:	f107 010c 	add.w	r1, r7, #12
 8001512:	230a      	movs	r3, #10
 8001514:	2202      	movs	r2, #2
 8001516:	47a0      	blx	r4
}
 8001518:	bf00      	nop
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	bd90      	pop	{r4, r7, pc}
 8001520:	200007ac 	.word	0x200007ac

08001524 <Display_Set_I2C_Master_Transmit>:

void Display_Set_I2C_Master_Transmit(void (*Master_Transmit)(uint16_t DevAddress, uint8_t *pData, uint16_t Size),void (*Master_Transmit_Blocking)(uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)){
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
	I2C_Master_Transmit = Master_Transmit;
 800152e:	4a06      	ldr	r2, [pc, #24]	@ (8001548 <Display_Set_I2C_Master_Transmit+0x24>)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6013      	str	r3, [r2, #0]
	I2C_Master_Transmit_Blocking = Master_Transmit_Blocking;
 8001534:	4a05      	ldr	r2, [pc, #20]	@ (800154c <Display_Set_I2C_Master_Transmit+0x28>)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	6013      	str	r3, [r2, #0]
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	200007a8 	.word	0x200007a8
 800154c:	200007ac 	.word	0x200007ac

08001550 <SSD1306_DMAREADY>:

void SSD1306_DMAREADY(){
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
	SSD1306.DMA=Ready;
 8001554:	4b03      	ldr	r3, [pc, #12]	@ (8001564 <SSD1306_DMAREADY+0x14>)
 8001556:	2203      	movs	r2, #3
 8001558:	71da      	strb	r2, [r3, #7]
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	200007b0 	.word	0x200007b0

08001568 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	607b      	str	r3, [r7, #4]
 8001572:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <HAL_MspInit+0x4c>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001576:	4a0f      	ldr	r2, [pc, #60]	@ (80015b4 <HAL_MspInit+0x4c>)
 8001578:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800157c:	6453      	str	r3, [r2, #68]	@ 0x44
 800157e:	4b0d      	ldr	r3, [pc, #52]	@ (80015b4 <HAL_MspInit+0x4c>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001582:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	603b      	str	r3, [r7, #0]
 800158e:	4b09      	ldr	r3, [pc, #36]	@ (80015b4 <HAL_MspInit+0x4c>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001592:	4a08      	ldr	r2, [pc, #32]	@ (80015b4 <HAL_MspInit+0x4c>)
 8001594:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001598:	6413      	str	r3, [r2, #64]	@ 0x40
 800159a:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <HAL_MspInit+0x4c>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015a2:	603b      	str	r3, [r7, #0]
 80015a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40023800 	.word	0x40023800

080015b8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	@ 0x28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a28      	ldr	r2, [pc, #160]	@ (8001678 <HAL_ADC_MspInit+0xc0>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d149      	bne.n	800166e <HAL_ADC_MspInit+0xb6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	4b27      	ldr	r3, [pc, #156]	@ (800167c <HAL_ADC_MspInit+0xc4>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e2:	4a26      	ldr	r2, [pc, #152]	@ (800167c <HAL_ADC_MspInit+0xc4>)
 80015e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ea:	4b24      	ldr	r3, [pc, #144]	@ (800167c <HAL_ADC_MspInit+0xc4>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	4b20      	ldr	r3, [pc, #128]	@ (800167c <HAL_ADC_MspInit+0xc4>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	4a1f      	ldr	r2, [pc, #124]	@ (800167c <HAL_ADC_MspInit+0xc4>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6313      	str	r3, [r2, #48]	@ 0x30
 8001606:	4b1d      	ldr	r3, [pc, #116]	@ (800167c <HAL_ADC_MspInit+0xc4>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	4b19      	ldr	r3, [pc, #100]	@ (800167c <HAL_ADC_MspInit+0xc4>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	4a18      	ldr	r2, [pc, #96]	@ (800167c <HAL_ADC_MspInit+0xc4>)
 800161c:	f043 0302 	orr.w	r3, r3, #2
 8001620:	6313      	str	r3, [r2, #48]	@ 0x30
 8001622:	4b16      	ldr	r3, [pc, #88]	@ (800167c <HAL_ADC_MspInit+0xc4>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800162e:	23fe      	movs	r3, #254	@ 0xfe
 8001630:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001632:	2303      	movs	r3, #3
 8001634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	480f      	ldr	r0, [pc, #60]	@ (8001680 <HAL_ADC_MspInit+0xc8>)
 8001642:	f001 faef 	bl	8002c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001646:	2301      	movs	r3, #1
 8001648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800164a:	2303      	movs	r3, #3
 800164c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	480a      	ldr	r0, [pc, #40]	@ (8001684 <HAL_ADC_MspInit+0xcc>)
 800165a:	f001 fae3 	bl	8002c24 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800165e:	2200      	movs	r2, #0
 8001660:	2100      	movs	r1, #0
 8001662:	2012      	movs	r0, #18
 8001664:	f000 ff2b 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001668:	2012      	movs	r0, #18
 800166a:	f000 ff44 	bl	80024f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800166e:	bf00      	nop
 8001670:	3728      	adds	r7, #40	@ 0x28
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40012000 	.word	0x40012000
 800167c:	40023800 	.word	0x40023800
 8001680:	40020000 	.word	0x40020000
 8001684:	40020400 	.word	0x40020400

08001688 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	@ 0x28
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a47      	ldr	r2, [pc, #284]	@ (80017c4 <HAL_I2C_MspInit+0x13c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	f040 8087 	bne.w	80017ba <HAL_I2C_MspInit+0x132>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ac:	2300      	movs	r3, #0
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	4b45      	ldr	r3, [pc, #276]	@ (80017c8 <HAL_I2C_MspInit+0x140>)
 80016b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b4:	4a44      	ldr	r2, [pc, #272]	@ (80017c8 <HAL_I2C_MspInit+0x140>)
 80016b6:	f043 0302 	orr.w	r3, r3, #2
 80016ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80016bc:	4b42      	ldr	r3, [pc, #264]	@ (80017c8 <HAL_I2C_MspInit+0x140>)
 80016be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016c8:	23c0      	movs	r3, #192	@ 0xc0
 80016ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016cc:	2312      	movs	r3, #18
 80016ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d4:	2303      	movs	r3, #3
 80016d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016d8:	2304      	movs	r3, #4
 80016da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	4619      	mov	r1, r3
 80016e2:	483a      	ldr	r0, [pc, #232]	@ (80017cc <HAL_I2C_MspInit+0x144>)
 80016e4:	f001 fa9e 	bl	8002c24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016e8:	2300      	movs	r3, #0
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	4b36      	ldr	r3, [pc, #216]	@ (80017c8 <HAL_I2C_MspInit+0x140>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f0:	4a35      	ldr	r2, [pc, #212]	@ (80017c8 <HAL_I2C_MspInit+0x140>)
 80016f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f8:	4b33      	ldr	r3, [pc, #204]	@ (80017c8 <HAL_I2C_MspInit+0x140>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8001704:	4b32      	ldr	r3, [pc, #200]	@ (80017d0 <HAL_I2C_MspInit+0x148>)
 8001706:	4a33      	ldr	r2, [pc, #204]	@ (80017d4 <HAL_I2C_MspInit+0x14c>)
 8001708:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800170a:	4b31      	ldr	r3, [pc, #196]	@ (80017d0 <HAL_I2C_MspInit+0x148>)
 800170c:	2200      	movs	r2, #0
 800170e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001710:	4b2f      	ldr	r3, [pc, #188]	@ (80017d0 <HAL_I2C_MspInit+0x148>)
 8001712:	2240      	movs	r2, #64	@ 0x40
 8001714:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001716:	4b2e      	ldr	r3, [pc, #184]	@ (80017d0 <HAL_I2C_MspInit+0x148>)
 8001718:	2200      	movs	r2, #0
 800171a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800171c:	4b2c      	ldr	r3, [pc, #176]	@ (80017d0 <HAL_I2C_MspInit+0x148>)
 800171e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001722:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001724:	4b2a      	ldr	r3, [pc, #168]	@ (80017d0 <HAL_I2C_MspInit+0x148>)
 8001726:	2200      	movs	r2, #0
 8001728:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800172a:	4b29      	ldr	r3, [pc, #164]	@ (80017d0 <HAL_I2C_MspInit+0x148>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001730:	4b27      	ldr	r3, [pc, #156]	@ (80017d0 <HAL_I2C_MspInit+0x148>)
 8001732:	2200      	movs	r2, #0
 8001734:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001736:	4b26      	ldr	r3, [pc, #152]	@ (80017d0 <HAL_I2C_MspInit+0x148>)
 8001738:	2200      	movs	r2, #0
 800173a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800173c:	4b24      	ldr	r3, [pc, #144]	@ (80017d0 <HAL_I2C_MspInit+0x148>)
 800173e:	2200      	movs	r2, #0
 8001740:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001742:	4823      	ldr	r0, [pc, #140]	@ (80017d0 <HAL_I2C_MspInit+0x148>)
 8001744:	f000 fef2 	bl	800252c <HAL_DMA_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 800174e:	f7ff fd55 	bl	80011fc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a1e      	ldr	r2, [pc, #120]	@ (80017d0 <HAL_I2C_MspInit+0x148>)
 8001756:	635a      	str	r2, [r3, #52]	@ 0x34
 8001758:	4a1d      	ldr	r2, [pc, #116]	@ (80017d0 <HAL_I2C_MspInit+0x148>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800175e:	4b1e      	ldr	r3, [pc, #120]	@ (80017d8 <HAL_I2C_MspInit+0x150>)
 8001760:	4a1e      	ldr	r2, [pc, #120]	@ (80017dc <HAL_I2C_MspInit+0x154>)
 8001762:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001764:	4b1c      	ldr	r3, [pc, #112]	@ (80017d8 <HAL_I2C_MspInit+0x150>)
 8001766:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800176a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800176c:	4b1a      	ldr	r3, [pc, #104]	@ (80017d8 <HAL_I2C_MspInit+0x150>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001772:	4b19      	ldr	r3, [pc, #100]	@ (80017d8 <HAL_I2C_MspInit+0x150>)
 8001774:	2200      	movs	r2, #0
 8001776:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001778:	4b17      	ldr	r3, [pc, #92]	@ (80017d8 <HAL_I2C_MspInit+0x150>)
 800177a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800177e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001780:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <HAL_I2C_MspInit+0x150>)
 8001782:	2200      	movs	r2, #0
 8001784:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001786:	4b14      	ldr	r3, [pc, #80]	@ (80017d8 <HAL_I2C_MspInit+0x150>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800178c:	4b12      	ldr	r3, [pc, #72]	@ (80017d8 <HAL_I2C_MspInit+0x150>)
 800178e:	2200      	movs	r2, #0
 8001790:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001792:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <HAL_I2C_MspInit+0x150>)
 8001794:	2200      	movs	r2, #0
 8001796:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001798:	4b0f      	ldr	r3, [pc, #60]	@ (80017d8 <HAL_I2C_MspInit+0x150>)
 800179a:	2200      	movs	r2, #0
 800179c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800179e:	480e      	ldr	r0, [pc, #56]	@ (80017d8 <HAL_I2C_MspInit+0x150>)
 80017a0:	f000 fec4 	bl	800252c <HAL_DMA_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 80017aa:	f7ff fd27 	bl	80011fc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a09      	ldr	r2, [pc, #36]	@ (80017d8 <HAL_I2C_MspInit+0x150>)
 80017b2:	639a      	str	r2, [r3, #56]	@ 0x38
 80017b4:	4a08      	ldr	r2, [pc, #32]	@ (80017d8 <HAL_I2C_MspInit+0x150>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80017ba:	bf00      	nop
 80017bc:	3728      	adds	r7, #40	@ 0x28
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40005400 	.word	0x40005400
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40020400 	.word	0x40020400
 80017d0:	20000220 	.word	0x20000220
 80017d4:	40026028 	.word	0x40026028
 80017d8:	20000280 	.word	0x20000280
 80017dc:	40026010 	.word	0x40026010

080017e0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001860 <HAL_TIM_Base_MspInit+0x80>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d116      	bne.n	8001820 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001864 <HAL_TIM_Base_MspInit+0x84>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fa:	4a1a      	ldr	r2, [pc, #104]	@ (8001864 <HAL_TIM_Base_MspInit+0x84>)
 80017fc:	f043 0302 	orr.w	r3, r3, #2
 8001800:	6413      	str	r3, [r2, #64]	@ 0x40
 8001802:	4b18      	ldr	r3, [pc, #96]	@ (8001864 <HAL_TIM_Base_MspInit+0x84>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	2100      	movs	r1, #0
 8001812:	201d      	movs	r0, #29
 8001814:	f000 fe53 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001818:	201d      	movs	r0, #29
 800181a:	f000 fe6c 	bl	80024f6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM11_MspInit 1 */

    /* USER CODE END TIM11_MspInit 1 */
  }

}
 800181e:	e01a      	b.n	8001856 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a10      	ldr	r2, [pc, #64]	@ (8001868 <HAL_TIM_Base_MspInit+0x88>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d115      	bne.n	8001856 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	4b0d      	ldr	r3, [pc, #52]	@ (8001864 <HAL_TIM_Base_MspInit+0x84>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001832:	4a0c      	ldr	r2, [pc, #48]	@ (8001864 <HAL_TIM_Base_MspInit+0x84>)
 8001834:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001838:	6453      	str	r3, [r2, #68]	@ 0x44
 800183a:	4b0a      	ldr	r3, [pc, #40]	@ (8001864 <HAL_TIM_Base_MspInit+0x84>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800183e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2100      	movs	r1, #0
 800184a:	201a      	movs	r0, #26
 800184c:	f000 fe37 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001850:	201a      	movs	r0, #26
 8001852:	f000 fe50 	bl	80024f6 <HAL_NVIC_EnableIRQ>
}
 8001856:	bf00      	nop
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40000400 	.word	0x40000400
 8001864:	40023800 	.word	0x40023800
 8001868:	40014800 	.word	0x40014800

0800186c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a12      	ldr	r2, [pc, #72]	@ (80018d4 <HAL_TIM_MspPostInit+0x68>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d11d      	bne.n	80018ca <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	4b11      	ldr	r3, [pc, #68]	@ (80018d8 <HAL_TIM_MspPostInit+0x6c>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	4a10      	ldr	r2, [pc, #64]	@ (80018d8 <HAL_TIM_MspPostInit+0x6c>)
 8001898:	f043 0302 	orr.w	r3, r3, #2
 800189c:	6313      	str	r3, [r2, #48]	@ 0x30
 800189e:	4b0e      	ldr	r3, [pc, #56]	@ (80018d8 <HAL_TIM_MspPostInit+0x6c>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Eng2PWM_Pin|Eng1PWM_Pin;
 80018aa:	2330      	movs	r3, #48	@ 0x30
 80018ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018ba:	2302      	movs	r3, #2
 80018bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018be:	f107 030c 	add.w	r3, r7, #12
 80018c2:	4619      	mov	r1, r3
 80018c4:	4805      	ldr	r0, [pc, #20]	@ (80018dc <HAL_TIM_MspPostInit+0x70>)
 80018c6:	f001 f9ad 	bl	8002c24 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018ca:	bf00      	nop
 80018cc:	3720      	adds	r7, #32
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40000400 	.word	0x40000400
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40020400 	.word	0x40020400

080018e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018e4:	bf00      	nop
 80018e6:	e7fd      	b.n	80018e4 <NMI_Handler+0x4>

080018e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ec:	bf00      	nop
 80018ee:	e7fd      	b.n	80018ec <HardFault_Handler+0x4>

080018f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <MemManage_Handler+0x4>

080018f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <BusFault_Handler+0x4>

08001900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <UsageFault_Handler+0x4>

08001908 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001936:	f000 f903 	bl	8001b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001944:	4802      	ldr	r0, [pc, #8]	@ (8001950 <DMA1_Stream0_IRQHandler+0x10>)
 8001946:	f000 fef7 	bl	8002738 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000280 	.word	0x20000280

08001954 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001958:	4802      	ldr	r0, [pc, #8]	@ (8001964 <DMA1_Stream1_IRQHandler+0x10>)
 800195a:	f000 feed 	bl	8002738 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000220 	.word	0x20000220

08001968 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800196c:	4802      	ldr	r0, [pc, #8]	@ (8001978 <ADC_IRQHandler+0x10>)
 800196e:	f000 f96e 	bl	8001c4e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000184 	.word	0x20000184

0800197c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001980:	4802      	ldr	r0, [pc, #8]	@ (800198c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001982:	f004 fb95 	bl	80060b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000328 	.word	0x20000328

08001990 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001994:	4802      	ldr	r0, [pc, #8]	@ (80019a0 <TIM3_IRQHandler+0x10>)
 8001996:	f004 fb8b 	bl	80060b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200002e0 	.word	0x200002e0

080019a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80019a8:	4802      	ldr	r0, [pc, #8]	@ (80019b4 <OTG_FS_IRQHandler+0x10>)
 80019aa:	f002 fc72 	bl	8004292 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200010a4 	.word	0x200010a4

080019b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019c0:	4a14      	ldr	r2, [pc, #80]	@ (8001a14 <_sbrk+0x5c>)
 80019c2:	4b15      	ldr	r3, [pc, #84]	@ (8001a18 <_sbrk+0x60>)
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019cc:	4b13      	ldr	r3, [pc, #76]	@ (8001a1c <_sbrk+0x64>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d102      	bne.n	80019da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d4:	4b11      	ldr	r3, [pc, #68]	@ (8001a1c <_sbrk+0x64>)
 80019d6:	4a12      	ldr	r2, [pc, #72]	@ (8001a20 <_sbrk+0x68>)
 80019d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019da:	4b10      	ldr	r3, [pc, #64]	@ (8001a1c <_sbrk+0x64>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d207      	bcs.n	80019f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e8:	f009 fb04 	bl	800aff4 <__errno>
 80019ec:	4603      	mov	r3, r0
 80019ee:	220c      	movs	r2, #12
 80019f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019f2:	f04f 33ff 	mov.w	r3, #4294967295
 80019f6:	e009      	b.n	8001a0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f8:	4b08      	ldr	r3, [pc, #32]	@ (8001a1c <_sbrk+0x64>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019fe:	4b07      	ldr	r3, [pc, #28]	@ (8001a1c <_sbrk+0x64>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	4a05      	ldr	r2, [pc, #20]	@ (8001a1c <_sbrk+0x64>)
 8001a08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20020000 	.word	0x20020000
 8001a18:	00000400 	.word	0x00000400
 8001a1c:	200007b8 	.word	0x200007b8
 8001a20:	200018f0 	.word	0x200018f0

08001a24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a28:	4b06      	ldr	r3, [pc, #24]	@ (8001a44 <SystemInit+0x20>)
 8001a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a2e:	4a05      	ldr	r2, [pc, #20]	@ (8001a44 <SystemInit+0x20>)
 8001a30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a4c:	f7ff ffea 	bl	8001a24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a50:	480c      	ldr	r0, [pc, #48]	@ (8001a84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a52:	490d      	ldr	r1, [pc, #52]	@ (8001a88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a54:	4a0d      	ldr	r2, [pc, #52]	@ (8001a8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a58:	e002      	b.n	8001a60 <LoopCopyDataInit>

08001a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a5e:	3304      	adds	r3, #4

08001a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a64:	d3f9      	bcc.n	8001a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a66:	4a0a      	ldr	r2, [pc, #40]	@ (8001a90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a68:	4c0a      	ldr	r4, [pc, #40]	@ (8001a94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a6c:	e001      	b.n	8001a72 <LoopFillZerobss>

08001a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a70:	3204      	adds	r2, #4

08001a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a74:	d3fb      	bcc.n	8001a6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a76:	f009 fac3 	bl	800b000 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a7a:	f7ff f8a5 	bl	8000bc8 <main>
  bx  lr    
 8001a7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a88:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8001a8c:	0800b838 	.word	0x0800b838
  ldr r2, =_sbss
 8001a90:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8001a94:	200018f0 	.word	0x200018f0

08001a98 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a98:	e7fe      	b.n	8001a98 <DMA1_Stream2_IRQHandler>
	...

08001a9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8001adc <HAL_Init+0x40>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8001adc <HAL_Init+0x40>)
 8001aa6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001aac:	4b0b      	ldr	r3, [pc, #44]	@ (8001adc <HAL_Init+0x40>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8001adc <HAL_Init+0x40>)
 8001ab2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ab6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ab8:	4b08      	ldr	r3, [pc, #32]	@ (8001adc <HAL_Init+0x40>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a07      	ldr	r2, [pc, #28]	@ (8001adc <HAL_Init+0x40>)
 8001abe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ac2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac4:	2003      	movs	r0, #3
 8001ac6:	f000 fcef 	bl	80024a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aca:	200f      	movs	r0, #15
 8001acc:	f000 f808 	bl	8001ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ad0:	f7ff fd4a 	bl	8001568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40023c00 	.word	0x40023c00

08001ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ae8:	4b12      	ldr	r3, [pc, #72]	@ (8001b34 <HAL_InitTick+0x54>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b12      	ldr	r3, [pc, #72]	@ (8001b38 <HAL_InitTick+0x58>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	4619      	mov	r1, r3
 8001af2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 fd07 	bl	8002512 <HAL_SYSTICK_Config>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e00e      	b.n	8001b2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b0f      	cmp	r3, #15
 8001b12:	d80a      	bhi.n	8001b2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b14:	2200      	movs	r2, #0
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	f04f 30ff 	mov.w	r0, #4294967295
 8001b1c:	f000 fccf 	bl	80024be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b20:	4a06      	ldr	r2, [pc, #24]	@ (8001b3c <HAL_InitTick+0x5c>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
 8001b28:	e000      	b.n	8001b2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000004 	.word	0x20000004
 8001b38:	2000000c 	.word	0x2000000c
 8001b3c:	20000008 	.word	0x20000008

08001b40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b44:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <HAL_IncTick+0x20>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <HAL_IncTick+0x24>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4413      	add	r3, r2
 8001b50:	4a04      	ldr	r2, [pc, #16]	@ (8001b64 <HAL_IncTick+0x24>)
 8001b52:	6013      	str	r3, [r2, #0]
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	2000000c 	.word	0x2000000c
 8001b64:	200007bc 	.word	0x200007bc

08001b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b6c:	4b03      	ldr	r3, [pc, #12]	@ (8001b7c <HAL_GetTick+0x14>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	200007bc 	.word	0x200007bc

08001b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b88:	f7ff ffee 	bl	8001b68 <HAL_GetTick>
 8001b8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b98:	d005      	beq.n	8001ba6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc4 <HAL_Delay+0x44>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ba6:	bf00      	nop
 8001ba8:	f7ff ffde 	bl	8001b68 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d8f7      	bhi.n	8001ba8 <HAL_Delay+0x28>
  {
  }
}
 8001bb8:	bf00      	nop
 8001bba:	bf00      	nop
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	2000000c 	.word	0x2000000c

08001bc8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e033      	b.n	8001c46 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d109      	bne.n	8001bfa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff fce6 	bl	80015b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfe:	f003 0310 	and.w	r3, r3, #16
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d118      	bne.n	8001c38 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c0e:	f023 0302 	bic.w	r3, r3, #2
 8001c12:	f043 0202 	orr.w	r2, r3, #2
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 fa6e 	bl	80020fc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2a:	f023 0303 	bic.w	r3, r3, #3
 8001c2e:	f043 0201 	orr.w	r2, r3, #1
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c36:	e001      	b.n	8001c3c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b086      	sub	sp, #24
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	f003 0320 	and.w	r3, r3, #32
 8001c7c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d049      	beq.n	8001d18 <HAL_ADC_IRQHandler+0xca>
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d046      	beq.n	8001d18 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	f003 0310 	and.w	r3, r3, #16
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d105      	bne.n	8001ca2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d12b      	bne.n	8001d08 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d127      	bne.n	8001d08 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cbe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d006      	beq.n	8001cd4 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d119      	bne.n	8001d08 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0220 	bic.w	r2, r2, #32
 8001ce2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d105      	bne.n	8001d08 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d00:	f043 0201 	orr.w	r2, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7fe fed3 	bl	8000ab4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f06f 0212 	mvn.w	r2, #18
 8001d16:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d26:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d057      	beq.n	8001dde <HAL_ADC_IRQHandler+0x190>
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d054      	beq.n	8001dde <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d38:	f003 0310 	and.w	r3, r3, #16
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d105      	bne.n	8001d4c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d44:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d139      	bne.n	8001dce <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d60:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d006      	beq.n	8001d76 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d12b      	bne.n	8001dce <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d124      	bne.n	8001dce <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d11d      	bne.n	8001dce <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d119      	bne.n	8001dce <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001da8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d105      	bne.n	8001dce <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc6:	f043 0201 	orr.w	r2, r3, #1
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 fa90 	bl	80022f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f06f 020c 	mvn.w	r2, #12
 8001ddc:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dec:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d017      	beq.n	8001e24 <HAL_ADC_IRQHandler+0x1d6>
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d014      	beq.n	8001e24 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d10d      	bne.n	8001e24 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f82a 	bl	8001e6e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f06f 0201 	mvn.w	r2, #1
 8001e22:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 0320 	and.w	r3, r3, #32
 8001e2a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e32:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d015      	beq.n	8001e66 <HAL_ADC_IRQHandler+0x218>
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d012      	beq.n	8001e66 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e44:	f043 0202 	orr.w	r2, r3, #2
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f06f 0220 	mvn.w	r2, #32
 8001e54:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f813 	bl	8001e82 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f06f 0220 	mvn.w	r2, #32
 8001e64:	601a      	str	r2, [r3, #0]
  }
}
 8001e66:	bf00      	nop
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
	...

08001e98 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x1c>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e113      	b.n	80020dc <HAL_ADC_ConfigChannel+0x244>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b09      	cmp	r3, #9
 8001ec2:	d925      	bls.n	8001f10 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68d9      	ldr	r1, [r3, #12]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	4413      	add	r3, r2
 8001ed8:	3b1e      	subs	r3, #30
 8001eda:	2207      	movs	r2, #7
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43da      	mvns	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	400a      	ands	r2, r1
 8001ee8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68d9      	ldr	r1, [r3, #12]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	4618      	mov	r0, r3
 8001efc:	4603      	mov	r3, r0
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	4403      	add	r3, r0
 8001f02:	3b1e      	subs	r3, #30
 8001f04:	409a      	lsls	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	e022      	b.n	8001f56 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6919      	ldr	r1, [r3, #16]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4613      	mov	r3, r2
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	4413      	add	r3, r2
 8001f24:	2207      	movs	r2, #7
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43da      	mvns	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	400a      	ands	r2, r1
 8001f32:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6919      	ldr	r1, [r3, #16]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	4618      	mov	r0, r3
 8001f46:	4603      	mov	r3, r0
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4403      	add	r3, r0
 8001f4c:	409a      	lsls	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b06      	cmp	r3, #6
 8001f5c:	d824      	bhi.n	8001fa8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3b05      	subs	r3, #5
 8001f70:	221f      	movs	r2, #31
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43da      	mvns	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	400a      	ands	r2, r1
 8001f7e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	3b05      	subs	r3, #5
 8001f9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fa6:	e04c      	b.n	8002042 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b0c      	cmp	r3, #12
 8001fae:	d824      	bhi.n	8001ffa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3b23      	subs	r3, #35	@ 0x23
 8001fc2:	221f      	movs	r2, #31
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43da      	mvns	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	400a      	ands	r2, r1
 8001fd0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	4618      	mov	r0, r3
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	3b23      	subs	r3, #35	@ 0x23
 8001fec:	fa00 f203 	lsl.w	r2, r0, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ff8:	e023      	b.n	8002042 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	3b41      	subs	r3, #65	@ 0x41
 800200c:	221f      	movs	r2, #31
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43da      	mvns	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	400a      	ands	r2, r1
 800201a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	b29b      	uxth	r3, r3
 8002028:	4618      	mov	r0, r3
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	3b41      	subs	r3, #65	@ 0x41
 8002036:	fa00 f203 	lsl.w	r2, r0, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002042:	4b29      	ldr	r3, [pc, #164]	@ (80020e8 <HAL_ADC_ConfigChannel+0x250>)
 8002044:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a28      	ldr	r2, [pc, #160]	@ (80020ec <HAL_ADC_ConfigChannel+0x254>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d10f      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x1d8>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b12      	cmp	r3, #18
 8002056:	d10b      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a1d      	ldr	r2, [pc, #116]	@ (80020ec <HAL_ADC_ConfigChannel+0x254>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d12b      	bne.n	80020d2 <HAL_ADC_ConfigChannel+0x23a>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a1c      	ldr	r2, [pc, #112]	@ (80020f0 <HAL_ADC_ConfigChannel+0x258>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d003      	beq.n	800208c <HAL_ADC_ConfigChannel+0x1f4>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b11      	cmp	r3, #17
 800208a:	d122      	bne.n	80020d2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a11      	ldr	r2, [pc, #68]	@ (80020f0 <HAL_ADC_ConfigChannel+0x258>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d111      	bne.n	80020d2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020ae:	4b11      	ldr	r3, [pc, #68]	@ (80020f4 <HAL_ADC_ConfigChannel+0x25c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a11      	ldr	r2, [pc, #68]	@ (80020f8 <HAL_ADC_ConfigChannel+0x260>)
 80020b4:	fba2 2303 	umull	r2, r3, r2, r3
 80020b8:	0c9a      	lsrs	r2, r3, #18
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80020c4:	e002      	b.n	80020cc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	3b01      	subs	r3, #1
 80020ca:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f9      	bne.n	80020c6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	40012300 	.word	0x40012300
 80020ec:	40012000 	.word	0x40012000
 80020f0:	10000012 	.word	0x10000012
 80020f4:	20000004 	.word	0x20000004
 80020f8:	431bde83 	.word	0x431bde83

080020fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002104:	4b79      	ldr	r3, [pc, #484]	@ (80022ec <ADC_Init+0x1f0>)
 8002106:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	431a      	orrs	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002130:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6859      	ldr	r1, [r3, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	021a      	lsls	r2, r3, #8
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002154:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6859      	ldr	r1, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002176:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6899      	ldr	r1, [r3, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218e:	4a58      	ldr	r2, [pc, #352]	@ (80022f0 <ADC_Init+0x1f4>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d022      	beq.n	80021da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6899      	ldr	r1, [r3, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6899      	ldr	r1, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	e00f      	b.n	80021fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021f8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0202 	bic.w	r2, r2, #2
 8002208:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6899      	ldr	r1, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	7e1b      	ldrb	r3, [r3, #24]
 8002214:	005a      	lsls	r2, r3, #1
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d01b      	beq.n	8002260 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002236:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002246:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6859      	ldr	r1, [r3, #4]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002252:	3b01      	subs	r3, #1
 8002254:	035a      	lsls	r2, r3, #13
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	e007      	b.n	8002270 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800226e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800227e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	3b01      	subs	r3, #1
 800228c:	051a      	lsls	r2, r3, #20
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80022a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6899      	ldr	r1, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80022b2:	025a      	lsls	r2, r3, #9
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6899      	ldr	r1, [r3, #8]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	029a      	lsls	r2, r3, #10
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	609a      	str	r2, [r3, #8]
}
 80022e0:	bf00      	nop
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	40012300 	.word	0x40012300
 80022f0:	0f000001 	.word	0x0f000001

080022f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002318:	4b0c      	ldr	r3, [pc, #48]	@ (800234c <__NVIC_SetPriorityGrouping+0x44>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002324:	4013      	ands	r3, r2
 8002326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002330:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002334:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800233a:	4a04      	ldr	r2, [pc, #16]	@ (800234c <__NVIC_SetPriorityGrouping+0x44>)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	60d3      	str	r3, [r2, #12]
}
 8002340:	bf00      	nop
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002354:	4b04      	ldr	r3, [pc, #16]	@ (8002368 <__NVIC_GetPriorityGrouping+0x18>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	0a1b      	lsrs	r3, r3, #8
 800235a:	f003 0307 	and.w	r3, r3, #7
}
 800235e:	4618      	mov	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	2b00      	cmp	r3, #0
 800237c:	db0b      	blt.n	8002396 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	f003 021f 	and.w	r2, r3, #31
 8002384:	4907      	ldr	r1, [pc, #28]	@ (80023a4 <__NVIC_EnableIRQ+0x38>)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	095b      	lsrs	r3, r3, #5
 800238c:	2001      	movs	r0, #1
 800238e:	fa00 f202 	lsl.w	r2, r0, r2
 8002392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	e000e100 	.word	0xe000e100

080023a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	6039      	str	r1, [r7, #0]
 80023b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	db0a      	blt.n	80023d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	490c      	ldr	r1, [pc, #48]	@ (80023f4 <__NVIC_SetPriority+0x4c>)
 80023c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c6:	0112      	lsls	r2, r2, #4
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	440b      	add	r3, r1
 80023cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d0:	e00a      	b.n	80023e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	4908      	ldr	r1, [pc, #32]	@ (80023f8 <__NVIC_SetPriority+0x50>)
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	3b04      	subs	r3, #4
 80023e0:	0112      	lsls	r2, r2, #4
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	440b      	add	r3, r1
 80023e6:	761a      	strb	r2, [r3, #24]
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	e000e100 	.word	0xe000e100
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b089      	sub	sp, #36	@ 0x24
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f1c3 0307 	rsb	r3, r3, #7
 8002416:	2b04      	cmp	r3, #4
 8002418:	bf28      	it	cs
 800241a:	2304      	movcs	r3, #4
 800241c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3304      	adds	r3, #4
 8002422:	2b06      	cmp	r3, #6
 8002424:	d902      	bls.n	800242c <NVIC_EncodePriority+0x30>
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3b03      	subs	r3, #3
 800242a:	e000      	b.n	800242e <NVIC_EncodePriority+0x32>
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002430:	f04f 32ff 	mov.w	r2, #4294967295
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43da      	mvns	r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	401a      	ands	r2, r3
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002444:	f04f 31ff 	mov.w	r1, #4294967295
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	fa01 f303 	lsl.w	r3, r1, r3
 800244e:	43d9      	mvns	r1, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002454:	4313      	orrs	r3, r2
         );
}
 8002456:	4618      	mov	r0, r3
 8002458:	3724      	adds	r7, #36	@ 0x24
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
	...

08002464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3b01      	subs	r3, #1
 8002470:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002474:	d301      	bcc.n	800247a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002476:	2301      	movs	r3, #1
 8002478:	e00f      	b.n	800249a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800247a:	4a0a      	ldr	r2, [pc, #40]	@ (80024a4 <SysTick_Config+0x40>)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3b01      	subs	r3, #1
 8002480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002482:	210f      	movs	r1, #15
 8002484:	f04f 30ff 	mov.w	r0, #4294967295
 8002488:	f7ff ff8e 	bl	80023a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800248c:	4b05      	ldr	r3, [pc, #20]	@ (80024a4 <SysTick_Config+0x40>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002492:	4b04      	ldr	r3, [pc, #16]	@ (80024a4 <SysTick_Config+0x40>)
 8002494:	2207      	movs	r2, #7
 8002496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	e000e010 	.word	0xe000e010

080024a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff ff29 	bl	8002308 <__NVIC_SetPriorityGrouping>
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024be:	b580      	push	{r7, lr}
 80024c0:	b086      	sub	sp, #24
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	4603      	mov	r3, r0
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
 80024ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024d0:	f7ff ff3e 	bl	8002350 <__NVIC_GetPriorityGrouping>
 80024d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68b9      	ldr	r1, [r7, #8]
 80024da:	6978      	ldr	r0, [r7, #20]
 80024dc:	f7ff ff8e 	bl	80023fc <NVIC_EncodePriority>
 80024e0:	4602      	mov	r2, r0
 80024e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024e6:	4611      	mov	r1, r2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff ff5d 	bl	80023a8 <__NVIC_SetPriority>
}
 80024ee:	bf00      	nop
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b082      	sub	sp, #8
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	4603      	mov	r3, r0
 80024fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff ff31 	bl	800236c <__NVIC_EnableIRQ>
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff ffa2 	bl	8002464 <SysTick_Config>
 8002520:	4603      	mov	r3, r0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002538:	f7ff fb16 	bl	8001b68 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e099      	b.n	800267c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2202      	movs	r2, #2
 800254c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0201 	bic.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002568:	e00f      	b.n	800258a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800256a:	f7ff fafd 	bl	8001b68 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b05      	cmp	r3, #5
 8002576:	d908      	bls.n	800258a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2220      	movs	r2, #32
 800257c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2203      	movs	r2, #3
 8002582:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e078      	b.n	800267c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1e8      	bne.n	800256a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	4b38      	ldr	r3, [pc, #224]	@ (8002684 <HAL_DMA_Init+0x158>)
 80025a4:	4013      	ands	r3, r2
 80025a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	4313      	orrs	r3, r2
 80025da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d107      	bne.n	80025f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ec:	4313      	orrs	r3, r2
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f023 0307 	bic.w	r3, r3, #7
 800260a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	4313      	orrs	r3, r2
 8002614:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261a:	2b04      	cmp	r3, #4
 800261c:	d117      	bne.n	800264e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	4313      	orrs	r3, r2
 8002626:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00e      	beq.n	800264e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 fa7b 	bl	8002b2c <DMA_CheckFifoParam>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d008      	beq.n	800264e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2240      	movs	r2, #64	@ 0x40
 8002640:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800264a:	2301      	movs	r3, #1
 800264c:	e016      	b.n	800267c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 fa32 	bl	8002ac0 <DMA_CalcBaseAndBitshift>
 800265c:	4603      	mov	r3, r0
 800265e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002664:	223f      	movs	r2, #63	@ 0x3f
 8002666:	409a      	lsls	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	f010803f 	.word	0xf010803f

08002688 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
 8002694:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002696:	2300      	movs	r3, #0
 8002698:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800269e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <HAL_DMA_Start_IT+0x26>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e040      	b.n	8002730 <HAL_DMA_Start_IT+0xa8>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d12f      	bne.n	8002722 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2202      	movs	r2, #2
 80026c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	68b9      	ldr	r1, [r7, #8]
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 f9c4 	bl	8002a64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e0:	223f      	movs	r2, #63	@ 0x3f
 80026e2:	409a      	lsls	r2, r3
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 0216 	orr.w	r2, r2, #22
 80026f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d007      	beq.n	8002710 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0208 	orr.w	r2, r2, #8
 800270e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0201 	orr.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	e005      	b.n	800272e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800272a:	2302      	movs	r3, #2
 800272c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800272e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002744:	4b8e      	ldr	r3, [pc, #568]	@ (8002980 <HAL_DMA_IRQHandler+0x248>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a8e      	ldr	r2, [pc, #568]	@ (8002984 <HAL_DMA_IRQHandler+0x24c>)
 800274a:	fba2 2303 	umull	r2, r3, r2, r3
 800274e:	0a9b      	lsrs	r3, r3, #10
 8002750:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002756:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002762:	2208      	movs	r2, #8
 8002764:	409a      	lsls	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4013      	ands	r3, r2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d01a      	beq.n	80027a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d013      	beq.n	80027a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0204 	bic.w	r2, r2, #4
 800278a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002790:	2208      	movs	r2, #8
 8002792:	409a      	lsls	r2, r3
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800279c:	f043 0201 	orr.w	r2, r3, #1
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a8:	2201      	movs	r2, #1
 80027aa:	409a      	lsls	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4013      	ands	r3, r2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d012      	beq.n	80027da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00b      	beq.n	80027da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c6:	2201      	movs	r2, #1
 80027c8:	409a      	lsls	r2, r3
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d2:	f043 0202 	orr.w	r2, r3, #2
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027de:	2204      	movs	r2, #4
 80027e0:	409a      	lsls	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4013      	ands	r3, r2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d012      	beq.n	8002810 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00b      	beq.n	8002810 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027fc:	2204      	movs	r2, #4
 80027fe:	409a      	lsls	r2, r3
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002808:	f043 0204 	orr.w	r2, r3, #4
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002814:	2210      	movs	r2, #16
 8002816:	409a      	lsls	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4013      	ands	r3, r2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d043      	beq.n	80028a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	2b00      	cmp	r3, #0
 800282c:	d03c      	beq.n	80028a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002832:	2210      	movs	r2, #16
 8002834:	409a      	lsls	r2, r3
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d018      	beq.n	800287a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d108      	bne.n	8002868 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d024      	beq.n	80028a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	4798      	blx	r3
 8002866:	e01f      	b.n	80028a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800286c:	2b00      	cmp	r3, #0
 800286e:	d01b      	beq.n	80028a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	4798      	blx	r3
 8002878:	e016      	b.n	80028a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002884:	2b00      	cmp	r3, #0
 8002886:	d107      	bne.n	8002898 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0208 	bic.w	r2, r2, #8
 8002896:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ac:	2220      	movs	r2, #32
 80028ae:	409a      	lsls	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 808f 	beq.w	80029d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0310 	and.w	r3, r3, #16
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 8087 	beq.w	80029d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ce:	2220      	movs	r2, #32
 80028d0:	409a      	lsls	r2, r3
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b05      	cmp	r3, #5
 80028e0:	d136      	bne.n	8002950 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0216 	bic.w	r2, r2, #22
 80028f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	695a      	ldr	r2, [r3, #20]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002900:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002906:	2b00      	cmp	r3, #0
 8002908:	d103      	bne.n	8002912 <HAL_DMA_IRQHandler+0x1da>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800290e:	2b00      	cmp	r3, #0
 8002910:	d007      	beq.n	8002922 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0208 	bic.w	r2, r2, #8
 8002920:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002926:	223f      	movs	r2, #63	@ 0x3f
 8002928:	409a      	lsls	r2, r3
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002942:	2b00      	cmp	r3, #0
 8002944:	d07e      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	4798      	blx	r3
        }
        return;
 800294e:	e079      	b.n	8002a44 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d01d      	beq.n	800299a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10d      	bne.n	8002988 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002970:	2b00      	cmp	r3, #0
 8002972:	d031      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	4798      	blx	r3
 800297c:	e02c      	b.n	80029d8 <HAL_DMA_IRQHandler+0x2a0>
 800297e:	bf00      	nop
 8002980:	20000004 	.word	0x20000004
 8002984:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800298c:	2b00      	cmp	r3, #0
 800298e:	d023      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	4798      	blx	r3
 8002998:	e01e      	b.n	80029d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10f      	bne.n	80029c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0210 	bic.w	r2, r2, #16
 80029b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d032      	beq.n	8002a46 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d022      	beq.n	8002a32 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2205      	movs	r2, #5
 80029f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0201 	bic.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	3301      	adds	r3, #1
 8002a08:	60bb      	str	r3, [r7, #8]
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d307      	bcc.n	8002a20 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f2      	bne.n	8002a04 <HAL_DMA_IRQHandler+0x2cc>
 8002a1e:	e000      	b.n	8002a22 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a20:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d005      	beq.n	8002a46 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	4798      	blx	r3
 8002a42:	e000      	b.n	8002a46 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a44:	bf00      	nop
    }
  }
}
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002a80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	2b40      	cmp	r3, #64	@ 0x40
 8002a90:	d108      	bne.n	8002aa4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002aa2:	e007      	b.n	8002ab4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	60da      	str	r2, [r3, #12]
}
 8002ab4:	bf00      	nop
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	3b10      	subs	r3, #16
 8002ad0:	4a14      	ldr	r2, [pc, #80]	@ (8002b24 <DMA_CalcBaseAndBitshift+0x64>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	091b      	lsrs	r3, r3, #4
 8002ad8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ada:	4a13      	ldr	r2, [pc, #76]	@ (8002b28 <DMA_CalcBaseAndBitshift+0x68>)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4413      	add	r3, r2
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	d909      	bls.n	8002b02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002af6:	f023 0303 	bic.w	r3, r3, #3
 8002afa:	1d1a      	adds	r2, r3, #4
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b00:	e007      	b.n	8002b12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b0a:	f023 0303 	bic.w	r3, r3, #3
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	aaaaaaab 	.word	0xaaaaaaab
 8002b28:	0800b7ec 	.word	0x0800b7ec

08002b2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b34:	2300      	movs	r3, #0
 8002b36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d11f      	bne.n	8002b86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d856      	bhi.n	8002bfa <DMA_CheckFifoParam+0xce>
 8002b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8002b54 <DMA_CheckFifoParam+0x28>)
 8002b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b52:	bf00      	nop
 8002b54:	08002b65 	.word	0x08002b65
 8002b58:	08002b77 	.word	0x08002b77
 8002b5c:	08002b65 	.word	0x08002b65
 8002b60:	08002bfb 	.word	0x08002bfb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d046      	beq.n	8002bfe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b74:	e043      	b.n	8002bfe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b7a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b7e:	d140      	bne.n	8002c02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b84:	e03d      	b.n	8002c02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b8e:	d121      	bne.n	8002bd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	d837      	bhi.n	8002c06 <DMA_CheckFifoParam+0xda>
 8002b96:	a201      	add	r2, pc, #4	@ (adr r2, 8002b9c <DMA_CheckFifoParam+0x70>)
 8002b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b9c:	08002bad 	.word	0x08002bad
 8002ba0:	08002bb3 	.word	0x08002bb3
 8002ba4:	08002bad 	.word	0x08002bad
 8002ba8:	08002bc5 	.word	0x08002bc5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	73fb      	strb	r3, [r7, #15]
      break;
 8002bb0:	e030      	b.n	8002c14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d025      	beq.n	8002c0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc2:	e022      	b.n	8002c0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002bcc:	d11f      	bne.n	8002c0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bd2:	e01c      	b.n	8002c0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d903      	bls.n	8002be2 <DMA_CheckFifoParam+0xb6>
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d003      	beq.n	8002be8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002be0:	e018      	b.n	8002c14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	73fb      	strb	r3, [r7, #15]
      break;
 8002be6:	e015      	b.n	8002c14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00e      	beq.n	8002c12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8002bf8:	e00b      	b.n	8002c12 <DMA_CheckFifoParam+0xe6>
      break;
 8002bfa:	bf00      	nop
 8002bfc:	e00a      	b.n	8002c14 <DMA_CheckFifoParam+0xe8>
      break;
 8002bfe:	bf00      	nop
 8002c00:	e008      	b.n	8002c14 <DMA_CheckFifoParam+0xe8>
      break;
 8002c02:	bf00      	nop
 8002c04:	e006      	b.n	8002c14 <DMA_CheckFifoParam+0xe8>
      break;
 8002c06:	bf00      	nop
 8002c08:	e004      	b.n	8002c14 <DMA_CheckFifoParam+0xe8>
      break;
 8002c0a:	bf00      	nop
 8002c0c:	e002      	b.n	8002c14 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c0e:	bf00      	nop
 8002c10:	e000      	b.n	8002c14 <DMA_CheckFifoParam+0xe8>
      break;
 8002c12:	bf00      	nop
    }
  } 
  
  return status; 
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop

08002c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b089      	sub	sp, #36	@ 0x24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61fb      	str	r3, [r7, #28]
 8002c3e:	e159      	b.n	8002ef4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c40:	2201      	movs	r2, #1
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	4013      	ands	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	f040 8148 	bne.w	8002eee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d005      	beq.n	8002c76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d130      	bne.n	8002cd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	2203      	movs	r2, #3
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	43db      	mvns	r3, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cac:	2201      	movs	r2, #1
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	091b      	lsrs	r3, r3, #4
 8002cc2:	f003 0201 	and.w	r2, r3, #1
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 0303 	and.w	r3, r3, #3
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d017      	beq.n	8002d14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	2203      	movs	r2, #3
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 0303 	and.w	r3, r3, #3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d123      	bne.n	8002d68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	08da      	lsrs	r2, r3, #3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3208      	adds	r2, #8
 8002d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	220f      	movs	r2, #15
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	691a      	ldr	r2, [r3, #16]
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	08da      	lsrs	r2, r3, #3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3208      	adds	r2, #8
 8002d62:	69b9      	ldr	r1, [r7, #24]
 8002d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	2203      	movs	r2, #3
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 0203 	and.w	r2, r3, #3
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 80a2 	beq.w	8002eee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	4b57      	ldr	r3, [pc, #348]	@ (8002f0c <HAL_GPIO_Init+0x2e8>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db2:	4a56      	ldr	r2, [pc, #344]	@ (8002f0c <HAL_GPIO_Init+0x2e8>)
 8002db4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002db8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dba:	4b54      	ldr	r3, [pc, #336]	@ (8002f0c <HAL_GPIO_Init+0x2e8>)
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dc6:	4a52      	ldr	r2, [pc, #328]	@ (8002f10 <HAL_GPIO_Init+0x2ec>)
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	089b      	lsrs	r3, r3, #2
 8002dcc:	3302      	adds	r3, #2
 8002dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	220f      	movs	r2, #15
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43db      	mvns	r3, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4013      	ands	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a49      	ldr	r2, [pc, #292]	@ (8002f14 <HAL_GPIO_Init+0x2f0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d019      	beq.n	8002e26 <HAL_GPIO_Init+0x202>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a48      	ldr	r2, [pc, #288]	@ (8002f18 <HAL_GPIO_Init+0x2f4>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d013      	beq.n	8002e22 <HAL_GPIO_Init+0x1fe>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a47      	ldr	r2, [pc, #284]	@ (8002f1c <HAL_GPIO_Init+0x2f8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d00d      	beq.n	8002e1e <HAL_GPIO_Init+0x1fa>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a46      	ldr	r2, [pc, #280]	@ (8002f20 <HAL_GPIO_Init+0x2fc>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d007      	beq.n	8002e1a <HAL_GPIO_Init+0x1f6>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a45      	ldr	r2, [pc, #276]	@ (8002f24 <HAL_GPIO_Init+0x300>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d101      	bne.n	8002e16 <HAL_GPIO_Init+0x1f2>
 8002e12:	2304      	movs	r3, #4
 8002e14:	e008      	b.n	8002e28 <HAL_GPIO_Init+0x204>
 8002e16:	2307      	movs	r3, #7
 8002e18:	e006      	b.n	8002e28 <HAL_GPIO_Init+0x204>
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e004      	b.n	8002e28 <HAL_GPIO_Init+0x204>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e002      	b.n	8002e28 <HAL_GPIO_Init+0x204>
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <HAL_GPIO_Init+0x204>
 8002e26:	2300      	movs	r3, #0
 8002e28:	69fa      	ldr	r2, [r7, #28]
 8002e2a:	f002 0203 	and.w	r2, r2, #3
 8002e2e:	0092      	lsls	r2, r2, #2
 8002e30:	4093      	lsls	r3, r2
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e38:	4935      	ldr	r1, [pc, #212]	@ (8002f10 <HAL_GPIO_Init+0x2ec>)
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	089b      	lsrs	r3, r3, #2
 8002e3e:	3302      	adds	r3, #2
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e46:	4b38      	ldr	r3, [pc, #224]	@ (8002f28 <HAL_GPIO_Init+0x304>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	4013      	ands	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e6a:	4a2f      	ldr	r2, [pc, #188]	@ (8002f28 <HAL_GPIO_Init+0x304>)
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e70:	4b2d      	ldr	r3, [pc, #180]	@ (8002f28 <HAL_GPIO_Init+0x304>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e94:	4a24      	ldr	r2, [pc, #144]	@ (8002f28 <HAL_GPIO_Init+0x304>)
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e9a:	4b23      	ldr	r3, [pc, #140]	@ (8002f28 <HAL_GPIO_Init+0x304>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ebe:	4a1a      	ldr	r2, [pc, #104]	@ (8002f28 <HAL_GPIO_Init+0x304>)
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ec4:	4b18      	ldr	r3, [pc, #96]	@ (8002f28 <HAL_GPIO_Init+0x304>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ee8:	4a0f      	ldr	r2, [pc, #60]	@ (8002f28 <HAL_GPIO_Init+0x304>)
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	61fb      	str	r3, [r7, #28]
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	2b0f      	cmp	r3, #15
 8002ef8:	f67f aea2 	bls.w	8002c40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002efc:	bf00      	nop
 8002efe:	bf00      	nop
 8002f00:	3724      	adds	r7, #36	@ 0x24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	40013800 	.word	0x40013800
 8002f14:	40020000 	.word	0x40020000
 8002f18:	40020400 	.word	0x40020400
 8002f1c:	40020800 	.word	0x40020800
 8002f20:	40020c00 	.word	0x40020c00
 8002f24:	40021000 	.word	0x40021000
 8002f28:	40013c00 	.word	0x40013c00

08002f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	807b      	strh	r3, [r7, #2]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f3c:	787b      	ldrb	r3, [r7, #1]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f42:	887a      	ldrh	r2, [r7, #2]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f48:	e003      	b.n	8002f52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f4a:	887b      	ldrh	r3, [r7, #2]
 8002f4c:	041a      	lsls	r2, r3, #16
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	619a      	str	r2, [r3, #24]
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b085      	sub	sp, #20
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	460b      	mov	r3, r1
 8002f68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f70:	887a      	ldrh	r2, [r7, #2]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4013      	ands	r3, r2
 8002f76:	041a      	lsls	r2, r3, #16
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	43d9      	mvns	r1, r3
 8002f7c:	887b      	ldrh	r3, [r7, #2]
 8002f7e:	400b      	ands	r3, r1
 8002f80:	431a      	orrs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	619a      	str	r2, [r3, #24]
}
 8002f86:	bf00      	nop
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
	...

08002f94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e12b      	b.n	80031fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d106      	bne.n	8002fc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7fe fb64 	bl	8001688 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2224      	movs	r2, #36	@ 0x24
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 0201 	bic.w	r2, r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fe6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ff6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ff8:	f002 fe8a 	bl	8005d10 <HAL_RCC_GetPCLK1Freq>
 8002ffc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	4a81      	ldr	r2, [pc, #516]	@ (8003208 <HAL_I2C_Init+0x274>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d807      	bhi.n	8003018 <HAL_I2C_Init+0x84>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4a80      	ldr	r2, [pc, #512]	@ (800320c <HAL_I2C_Init+0x278>)
 800300c:	4293      	cmp	r3, r2
 800300e:	bf94      	ite	ls
 8003010:	2301      	movls	r3, #1
 8003012:	2300      	movhi	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	e006      	b.n	8003026 <HAL_I2C_Init+0x92>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4a7d      	ldr	r2, [pc, #500]	@ (8003210 <HAL_I2C_Init+0x27c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	bf94      	ite	ls
 8003020:	2301      	movls	r3, #1
 8003022:	2300      	movhi	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e0e7      	b.n	80031fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	4a78      	ldr	r2, [pc, #480]	@ (8003214 <HAL_I2C_Init+0x280>)
 8003032:	fba2 2303 	umull	r2, r3, r2, r3
 8003036:	0c9b      	lsrs	r3, r3, #18
 8003038:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	430a      	orrs	r2, r1
 800304c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	4a6a      	ldr	r2, [pc, #424]	@ (8003208 <HAL_I2C_Init+0x274>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d802      	bhi.n	8003068 <HAL_I2C_Init+0xd4>
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	3301      	adds	r3, #1
 8003066:	e009      	b.n	800307c <HAL_I2C_Init+0xe8>
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800306e:	fb02 f303 	mul.w	r3, r2, r3
 8003072:	4a69      	ldr	r2, [pc, #420]	@ (8003218 <HAL_I2C_Init+0x284>)
 8003074:	fba2 2303 	umull	r2, r3, r2, r3
 8003078:	099b      	lsrs	r3, r3, #6
 800307a:	3301      	adds	r3, #1
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6812      	ldr	r2, [r2, #0]
 8003080:	430b      	orrs	r3, r1
 8003082:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800308e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	495c      	ldr	r1, [pc, #368]	@ (8003208 <HAL_I2C_Init+0x274>)
 8003098:	428b      	cmp	r3, r1
 800309a:	d819      	bhi.n	80030d0 <HAL_I2C_Init+0x13c>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	1e59      	subs	r1, r3, #1
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80030aa:	1c59      	adds	r1, r3, #1
 80030ac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030b0:	400b      	ands	r3, r1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <HAL_I2C_Init+0x138>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	1e59      	subs	r1, r3, #1
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80030c4:	3301      	adds	r3, #1
 80030c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ca:	e051      	b.n	8003170 <HAL_I2C_Init+0x1dc>
 80030cc:	2304      	movs	r3, #4
 80030ce:	e04f      	b.n	8003170 <HAL_I2C_Init+0x1dc>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d111      	bne.n	80030fc <HAL_I2C_Init+0x168>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	1e58      	subs	r0, r3, #1
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6859      	ldr	r1, [r3, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	440b      	add	r3, r1
 80030e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ea:	3301      	adds	r3, #1
 80030ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	bf0c      	ite	eq
 80030f4:	2301      	moveq	r3, #1
 80030f6:	2300      	movne	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	e012      	b.n	8003122 <HAL_I2C_Init+0x18e>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	1e58      	subs	r0, r3, #1
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6859      	ldr	r1, [r3, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	0099      	lsls	r1, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003112:	3301      	adds	r3, #1
 8003114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003118:	2b00      	cmp	r3, #0
 800311a:	bf0c      	ite	eq
 800311c:	2301      	moveq	r3, #1
 800311e:	2300      	movne	r3, #0
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_I2C_Init+0x196>
 8003126:	2301      	movs	r3, #1
 8003128:	e022      	b.n	8003170 <HAL_I2C_Init+0x1dc>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10e      	bne.n	8003150 <HAL_I2C_Init+0x1bc>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	1e58      	subs	r0, r3, #1
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6859      	ldr	r1, [r3, #4]
 800313a:	460b      	mov	r3, r1
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	440b      	add	r3, r1
 8003140:	fbb0 f3f3 	udiv	r3, r0, r3
 8003144:	3301      	adds	r3, #1
 8003146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800314a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800314e:	e00f      	b.n	8003170 <HAL_I2C_Init+0x1dc>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	1e58      	subs	r0, r3, #1
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6859      	ldr	r1, [r3, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	0099      	lsls	r1, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	fbb0 f3f3 	udiv	r3, r0, r3
 8003166:	3301      	adds	r3, #1
 8003168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800316c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	6809      	ldr	r1, [r1, #0]
 8003174:	4313      	orrs	r3, r2
 8003176:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69da      	ldr	r2, [r3, #28]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800319e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6911      	ldr	r1, [r2, #16]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	68d2      	ldr	r2, [r2, #12]
 80031aa:	4311      	orrs	r1, r2
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6812      	ldr	r2, [r2, #0]
 80031b0:	430b      	orrs	r3, r1
 80031b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	695a      	ldr	r2, [r3, #20]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0201 	orr.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2220      	movs	r2, #32
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	000186a0 	.word	0x000186a0
 800320c:	001e847f 	.word	0x001e847f
 8003210:	003d08ff 	.word	0x003d08ff
 8003214:	431bde83 	.word	0x431bde83
 8003218:	10624dd3 	.word	0x10624dd3

0800321c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b088      	sub	sp, #32
 8003220:	af02      	add	r7, sp, #8
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	607a      	str	r2, [r7, #4]
 8003226:	461a      	mov	r2, r3
 8003228:	460b      	mov	r3, r1
 800322a:	817b      	strh	r3, [r7, #10]
 800322c:	4613      	mov	r3, r2
 800322e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003230:	f7fe fc9a 	bl	8001b68 <HAL_GetTick>
 8003234:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b20      	cmp	r3, #32
 8003240:	f040 80e0 	bne.w	8003404 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	2319      	movs	r3, #25
 800324a:	2201      	movs	r2, #1
 800324c:	4970      	ldr	r1, [pc, #448]	@ (8003410 <HAL_I2C_Master_Transmit+0x1f4>)
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 fd02 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800325a:	2302      	movs	r3, #2
 800325c:	e0d3      	b.n	8003406 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <HAL_I2C_Master_Transmit+0x50>
 8003268:	2302      	movs	r3, #2
 800326a:	e0cc      	b.n	8003406 <HAL_I2C_Master_Transmit+0x1ea>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b01      	cmp	r3, #1
 8003280:	d007      	beq.n	8003292 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f042 0201 	orr.w	r2, r2, #1
 8003290:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2221      	movs	r2, #33	@ 0x21
 80032a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2210      	movs	r2, #16
 80032ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	893a      	ldrh	r2, [r7, #8]
 80032c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4a50      	ldr	r2, [pc, #320]	@ (8003414 <HAL_I2C_Master_Transmit+0x1f8>)
 80032d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032d4:	8979      	ldrh	r1, [r7, #10]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	6a3a      	ldr	r2, [r7, #32]
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 fb1e 	bl	800391c <I2C_MasterRequestWrite>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e08d      	b.n	8003406 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ea:	2300      	movs	r3, #0
 80032ec:	613b      	str	r3, [r7, #16]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	613b      	str	r3, [r7, #16]
 80032fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003300:	e066      	b.n	80033d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	6a39      	ldr	r1, [r7, #32]
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 fdc0 	bl	8003e8c <I2C_WaitOnTXEFlagUntilTimeout>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00d      	beq.n	800332e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003316:	2b04      	cmp	r3, #4
 8003318:	d107      	bne.n	800332a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003328:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e06b      	b.n	8003406 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003332:	781a      	ldrb	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003348:	b29b      	uxth	r3, r3
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003356:	3b01      	subs	r3, #1
 8003358:	b29a      	uxth	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b04      	cmp	r3, #4
 800336a:	d11b      	bne.n	80033a4 <HAL_I2C_Master_Transmit+0x188>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003370:	2b00      	cmp	r3, #0
 8003372:	d017      	beq.n	80033a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003378:	781a      	ldrb	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800338e:	b29b      	uxth	r3, r3
 8003390:	3b01      	subs	r3, #1
 8003392:	b29a      	uxth	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800339c:	3b01      	subs	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	6a39      	ldr	r1, [r7, #32]
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 fdb7 	bl	8003f1c <I2C_WaitOnBTFFlagUntilTimeout>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00d      	beq.n	80033d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	d107      	bne.n	80033cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e01a      	b.n	8003406 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d194      	bne.n	8003302 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003400:	2300      	movs	r3, #0
 8003402:	e000      	b.n	8003406 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003404:	2302      	movs	r3, #2
  }
}
 8003406:	4618      	mov	r0, r3
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	00100002 	.word	0x00100002
 8003414:	ffff0000 	.word	0xffff0000

08003418 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	607a      	str	r2, [r7, #4]
 8003422:	461a      	mov	r2, r3
 8003424:	460b      	mov	r3, r1
 8003426:	817b      	strh	r3, [r7, #10]
 8003428:	4613      	mov	r3, r2
 800342a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b20      	cmp	r3, #32
 800343a:	f040 8109 	bne.w	8003650 <HAL_I2C_Master_Transmit_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800343e:	4b87      	ldr	r3, [pc, #540]	@ (800365c <HAL_I2C_Master_Transmit_DMA+0x244>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	08db      	lsrs	r3, r3, #3
 8003444:	4a86      	ldr	r2, [pc, #536]	@ (8003660 <HAL_I2C_Master_Transmit_DMA+0x248>)
 8003446:	fba2 2303 	umull	r2, r3, r2, r3
 800344a:	0a1a      	lsrs	r2, r3, #8
 800344c:	4613      	mov	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	009a      	lsls	r2, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	3b01      	subs	r3, #1
 800345c:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d112      	bne.n	800348a <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2220      	movs	r2, #32
 800346e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347e:	f043 0220 	orr.w	r2, r3, #32
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8003486:	2302      	movs	r3, #2
 8003488:	e0e3      	b.n	8003652 <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b02      	cmp	r3, #2
 8003496:	d0df      	beq.n	8003458 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d101      	bne.n	80034a6 <HAL_I2C_Master_Transmit_DMA+0x8e>
 80034a2:	2302      	movs	r3, #2
 80034a4:	e0d5      	b.n	8003652 <HAL_I2C_Master_Transmit_DMA+0x23a>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d007      	beq.n	80034cc <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0201 	orr.w	r2, r2, #1
 80034ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2221      	movs	r2, #33	@ 0x21
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2210      	movs	r2, #16
 80034e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	893a      	ldrh	r2, [r7, #8]
 80034fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	4a56      	ldr	r2, [pc, #344]	@ (8003664 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 800350c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800350e:	897a      	ldrh	r2, [r7, #10]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003518:	2b00      	cmp	r3, #0
 800351a:	d07b      	beq.n	8003614 <HAL_I2C_Master_Transmit_DMA+0x1fc>
    {
      if (hi2c->hdmatx != NULL)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003520:	2b00      	cmp	r3, #0
 8003522:	d02a      	beq.n	800357a <HAL_I2C_Master_Transmit_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003528:	4a4f      	ldr	r2, [pc, #316]	@ (8003668 <HAL_I2C_Master_Transmit_DMA+0x250>)
 800352a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003530:	4a4e      	ldr	r2, [pc, #312]	@ (800366c <HAL_I2C_Master_Transmit_DMA+0x254>)
 8003532:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003538:	2200      	movs	r2, #0
 800353a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003540:	2200      	movs	r2, #0
 8003542:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003548:	2200      	movs	r2, #0
 800354a:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003550:	2200      	movs	r2, #0
 8003552:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355c:	4619      	mov	r1, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	3310      	adds	r3, #16
 8003564:	461a      	mov	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800356a:	f7ff f88d 	bl	8002688 <HAL_DMA_Start_IT>
 800356e:	4603      	mov	r3, r0
 8003570:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003572:	7dfb      	ldrb	r3, [r7, #23]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d139      	bne.n	80035ec <HAL_I2C_Master_Transmit_DMA+0x1d4>
 8003578:	e013      	b.n	80035a2 <HAL_I2C_Master_Transmit_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2220      	movs	r2, #32
 800357e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e057      	b.n	8003652 <HAL_I2C_Master_Transmit_DMA+0x23a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80035b8:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035c8:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80035d8:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	e02f      	b.n	800364c <HAL_I2C_Master_Transmit_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003600:	f043 0210 	orr.w	r2, r3, #16
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e01e      	b.n	8003652 <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003622:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003632:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800364a:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800364c:	2300      	movs	r3, #0
 800364e:	e000      	b.n	8003652 <HAL_I2C_Master_Transmit_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8003650:	2302      	movs	r3, #2
  }
}
 8003652:	4618      	mov	r0, r3
 8003654:	3718      	adds	r7, #24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	20000004 	.word	0x20000004
 8003660:	14f8b589 	.word	0x14f8b589
 8003664:	ffff0000 	.word	0xffff0000
 8003668:	08003a21 	.word	0x08003a21
 800366c:	08003bdf 	.word	0x08003bdf

08003670 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b08a      	sub	sp, #40	@ 0x28
 8003674:	af02      	add	r7, sp, #8
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	607a      	str	r2, [r7, #4]
 800367a:	603b      	str	r3, [r7, #0]
 800367c:	460b      	mov	r3, r1
 800367e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003680:	f7fe fa72 	bl	8001b68 <HAL_GetTick>
 8003684:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003686:	2300      	movs	r3, #0
 8003688:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b20      	cmp	r3, #32
 8003694:	f040 8111 	bne.w	80038ba <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	2319      	movs	r3, #25
 800369e:	2201      	movs	r2, #1
 80036a0:	4988      	ldr	r1, [pc, #544]	@ (80038c4 <HAL_I2C_IsDeviceReady+0x254>)
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 fad8 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80036ae:	2302      	movs	r3, #2
 80036b0:	e104      	b.n	80038bc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d101      	bne.n	80036c0 <HAL_I2C_IsDeviceReady+0x50>
 80036bc:	2302      	movs	r3, #2
 80036be:	e0fd      	b.n	80038bc <HAL_I2C_IsDeviceReady+0x24c>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d007      	beq.n	80036e6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f042 0201 	orr.w	r2, r2, #1
 80036e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2224      	movs	r2, #36	@ 0x24
 80036fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4a70      	ldr	r2, [pc, #448]	@ (80038c8 <HAL_I2C_IsDeviceReady+0x258>)
 8003708:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003718:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	2200      	movs	r2, #0
 8003722:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 fa96 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00d      	beq.n	800374e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800373c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003740:	d103      	bne.n	800374a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003748:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e0b6      	b.n	80038bc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800374e:	897b      	ldrh	r3, [r7, #10]
 8003750:	b2db      	uxtb	r3, r3
 8003752:	461a      	mov	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800375c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800375e:	f7fe fa03 	bl	8001b68 <HAL_GetTick>
 8003762:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b02      	cmp	r3, #2
 8003770:	bf0c      	ite	eq
 8003772:	2301      	moveq	r3, #1
 8003774:	2300      	movne	r3, #0
 8003776:	b2db      	uxtb	r3, r3
 8003778:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003784:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003788:	bf0c      	ite	eq
 800378a:	2301      	moveq	r3, #1
 800378c:	2300      	movne	r3, #0
 800378e:	b2db      	uxtb	r3, r3
 8003790:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003792:	e025      	b.n	80037e0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003794:	f7fe f9e8 	bl	8001b68 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d302      	bcc.n	80037aa <HAL_I2C_IsDeviceReady+0x13a>
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d103      	bne.n	80037b2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	22a0      	movs	r2, #160	@ 0xa0
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b02      	cmp	r3, #2
 80037be:	bf0c      	ite	eq
 80037c0:	2301      	moveq	r3, #1
 80037c2:	2300      	movne	r3, #0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037d6:	bf0c      	ite	eq
 80037d8:	2301      	moveq	r3, #1
 80037da:	2300      	movne	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2ba0      	cmp	r3, #160	@ 0xa0
 80037ea:	d005      	beq.n	80037f8 <HAL_I2C_IsDeviceReady+0x188>
 80037ec:	7dfb      	ldrb	r3, [r7, #23]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d102      	bne.n	80037f8 <HAL_I2C_IsDeviceReady+0x188>
 80037f2:	7dbb      	ldrb	r3, [r7, #22]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0cd      	beq.n	8003794 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2220      	movs	r2, #32
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b02      	cmp	r3, #2
 800380c:	d129      	bne.n	8003862 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800381c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800381e:	2300      	movs	r3, #0
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	613b      	str	r3, [r7, #16]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	2319      	movs	r3, #25
 800383a:	2201      	movs	r2, #1
 800383c:	4921      	ldr	r1, [pc, #132]	@ (80038c4 <HAL_I2C_IsDeviceReady+0x254>)
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 fa0a 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e036      	b.n	80038bc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2220      	movs	r2, #32
 8003852:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800385e:	2300      	movs	r3, #0
 8003860:	e02c      	b.n	80038bc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003870:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800387a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	2319      	movs	r3, #25
 8003882:	2201      	movs	r2, #1
 8003884:	490f      	ldr	r1, [pc, #60]	@ (80038c4 <HAL_I2C_IsDeviceReady+0x254>)
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 f9e6 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e012      	b.n	80038bc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	3301      	adds	r3, #1
 800389a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	f4ff af32 	bcc.w	800370a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2220      	movs	r2, #32
 80038aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e000      	b.n	80038bc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80038ba:	2302      	movs	r3, #2
  }
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3720      	adds	r7, #32
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	00100002 	.word	0x00100002
 80038c8:	ffff0000 	.word	0xffff0000

080038cc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b088      	sub	sp, #32
 8003920:	af02      	add	r7, sp, #8
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	607a      	str	r2, [r7, #4]
 8003926:	603b      	str	r3, [r7, #0]
 8003928:	460b      	mov	r3, r1
 800392a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003930:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	2b08      	cmp	r3, #8
 8003936:	d006      	beq.n	8003946 <I2C_MasterRequestWrite+0x2a>
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d003      	beq.n	8003946 <I2C_MasterRequestWrite+0x2a>
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003944:	d108      	bne.n	8003958 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	e00b      	b.n	8003970 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395c:	2b12      	cmp	r3, #18
 800395e:	d107      	bne.n	8003970 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800396e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 f96b 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00d      	beq.n	80039a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003992:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003996:	d103      	bne.n	80039a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800399e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e035      	b.n	8003a10 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039ac:	d108      	bne.n	80039c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039ae:	897b      	ldrh	r3, [r7, #10]
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	461a      	mov	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80039bc:	611a      	str	r2, [r3, #16]
 80039be:	e01b      	b.n	80039f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039c0:	897b      	ldrh	r3, [r7, #10]
 80039c2:	11db      	asrs	r3, r3, #7
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f003 0306 	and.w	r3, r3, #6
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	f063 030f 	orn	r3, r3, #15
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	490e      	ldr	r1, [pc, #56]	@ (8003a18 <I2C_MasterRequestWrite+0xfc>)
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 f9b4 	bl	8003d4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e010      	b.n	8003a10 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039ee:	897b      	ldrh	r3, [r7, #10]
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	4907      	ldr	r1, [pc, #28]	@ (8003a1c <I2C_MasterRequestWrite+0x100>)
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 f9a4 	bl	8003d4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	00010008 	.word	0x00010008
 8003a1c:	00010002 	.word	0x00010002

08003a20 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a2c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a34:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a3c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003a52:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a60:	2200      	movs	r2, #0
 8003a62:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d003      	beq.n	8003a74 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a70:	2200      	movs	r2, #0
 8003a72:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8003a74:	7cfb      	ldrb	r3, [r7, #19]
 8003a76:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8003a7a:	2b21      	cmp	r3, #33	@ 0x21
 8003a7c:	d007      	beq.n	8003a8e <I2C_DMAXferCplt+0x6e>
 8003a7e:	7cfb      	ldrb	r3, [r7, #19]
 8003a80:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8003a84:	2b22      	cmp	r3, #34	@ 0x22
 8003a86:	d131      	bne.n	8003aec <I2C_DMAXferCplt+0xcc>
 8003a88:	7cbb      	ldrb	r3, [r7, #18]
 8003a8a:	2b20      	cmp	r3, #32
 8003a8c:	d12e      	bne.n	8003aec <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a9c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003aa4:	7cfb      	ldrb	r3, [r7, #19]
 8003aa6:	2b29      	cmp	r3, #41	@ 0x29
 8003aa8:	d10a      	bne.n	8003ac0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	2221      	movs	r2, #33	@ 0x21
 8003aae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	2228      	movs	r2, #40	@ 0x28
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ab8:	6978      	ldr	r0, [r7, #20]
 8003aba:	f7ff ff11 	bl	80038e0 <HAL_I2C_SlaveTxCpltCallback>
 8003abe:	e00c      	b.n	8003ada <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003ac0:	7cfb      	ldrb	r3, [r7, #19]
 8003ac2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ac4:	d109      	bne.n	8003ada <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	2222      	movs	r2, #34	@ 0x22
 8003aca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2228      	movs	r2, #40	@ 0x28
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ad4:	6978      	ldr	r0, [r7, #20]
 8003ad6:	f7ff ff0d 	bl	80038f4 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003ae8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003aea:	e074      	b.n	8003bd6 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d06e      	beq.n	8003bd6 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d107      	bne.n	8003b12 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b10:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003b20:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b28:	d009      	beq.n	8003b3e <I2C_DMAXferCplt+0x11e>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d006      	beq.n	8003b3e <I2C_DMAXferCplt+0x11e>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003b36:	d002      	beq.n	8003b3e <I2C_DMAXferCplt+0x11e>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2b20      	cmp	r3, #32
 8003b3c:	d107      	bne.n	8003b4e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b4c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b5c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b6c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2200      	movs	r2, #0
 8003b72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8003b7c:	6978      	ldr	r0, [r7, #20]
 8003b7e:	f7ff fec3 	bl	8003908 <HAL_I2C_ErrorCallback>
}
 8003b82:	e028      	b.n	8003bd6 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b40      	cmp	r3, #64	@ 0x40
 8003b96:	d10a      	bne.n	8003bae <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003ba6:	6978      	ldr	r0, [r7, #20]
 8003ba8:	f7fc ffbe 	bl	8000b28 <HAL_I2C_MemRxCpltCallback>
}
 8003bac:	e013      	b.n	8003bd6 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d002      	beq.n	8003bc2 <I2C_DMAXferCplt+0x1a2>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b20      	cmp	r3, #32
 8003bc0:	d103      	bne.n	8003bca <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	631a      	str	r2, [r3, #48]	@ 0x30
 8003bc8:	e002      	b.n	8003bd0 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	2212      	movs	r2, #18
 8003bce:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003bd0:	6978      	ldr	r0, [r7, #20]
 8003bd2:	f7ff fe7b 	bl	80038cc <HAL_I2C_MasterRxCpltCallback>
}
 8003bd6:	bf00      	nop
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b084      	sub	sp, #16
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c08:	2200      	movs	r2, #0
 8003c0a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7fe ff1d 	bl	8002a4c <HAL_DMA_GetError>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d01b      	beq.n	8003c50 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c26:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2220      	movs	r2, #32
 8003c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c42:	f043 0210 	orr.w	r2, r3, #16
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f7ff fe5c 	bl	8003908 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003c50:	bf00      	nop
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	4613      	mov	r3, r2
 8003c66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c68:	e048      	b.n	8003cfc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c70:	d044      	beq.n	8003cfc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c72:	f7fd ff79 	bl	8001b68 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d302      	bcc.n	8003c88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d139      	bne.n	8003cfc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	0c1b      	lsrs	r3, r3, #16
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d10d      	bne.n	8003cae <I2C_WaitOnFlagUntilTimeout+0x56>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	43da      	mvns	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	bf0c      	ite	eq
 8003ca4:	2301      	moveq	r3, #1
 8003ca6:	2300      	movne	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	461a      	mov	r2, r3
 8003cac:	e00c      	b.n	8003cc8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	43da      	mvns	r2, r3
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	bf0c      	ite	eq
 8003cc0:	2301      	moveq	r3, #1
 8003cc2:	2300      	movne	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	79fb      	ldrb	r3, [r7, #7]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d116      	bne.n	8003cfc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce8:	f043 0220 	orr.w	r2, r3, #32
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e023      	b.n	8003d44 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	0c1b      	lsrs	r3, r3, #16
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d10d      	bne.n	8003d22 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	43da      	mvns	r2, r3
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	4013      	ands	r3, r2
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	bf0c      	ite	eq
 8003d18:	2301      	moveq	r3, #1
 8003d1a:	2300      	movne	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	461a      	mov	r2, r3
 8003d20:	e00c      	b.n	8003d3c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	43da      	mvns	r2, r3
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	bf0c      	ite	eq
 8003d34:	2301      	moveq	r3, #1
 8003d36:	2300      	movne	r3, #0
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	79fb      	ldrb	r3, [r7, #7]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d093      	beq.n	8003c6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
 8003d58:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d5a:	e071      	b.n	8003e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d6a:	d123      	bne.n	8003db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d7a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da0:	f043 0204 	orr.w	r2, r3, #4
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e067      	b.n	8003e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dba:	d041      	beq.n	8003e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dbc:	f7fd fed4 	bl	8001b68 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d302      	bcc.n	8003dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d136      	bne.n	8003e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	0c1b      	lsrs	r3, r3, #16
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d10c      	bne.n	8003df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	43da      	mvns	r2, r3
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	4013      	ands	r3, r2
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	bf14      	ite	ne
 8003dee:	2301      	movne	r3, #1
 8003df0:	2300      	moveq	r3, #0
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	e00b      	b.n	8003e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	43da      	mvns	r2, r3
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	4013      	ands	r3, r2
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	bf14      	ite	ne
 8003e08:	2301      	movne	r3, #1
 8003e0a:	2300      	moveq	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d016      	beq.n	8003e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2c:	f043 0220 	orr.w	r2, r3, #32
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e021      	b.n	8003e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	0c1b      	lsrs	r3, r3, #16
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d10c      	bne.n	8003e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	43da      	mvns	r2, r3
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	4013      	ands	r3, r2
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	bf14      	ite	ne
 8003e5c:	2301      	movne	r3, #1
 8003e5e:	2300      	moveq	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	e00b      	b.n	8003e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	43da      	mvns	r2, r3
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	bf14      	ite	ne
 8003e76:	2301      	movne	r3, #1
 8003e78:	2300      	moveq	r3, #0
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f47f af6d 	bne.w	8003d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e98:	e034      	b.n	8003f04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 f886 	bl	8003fac <I2C_IsAcknowledgeFailed>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e034      	b.n	8003f14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb0:	d028      	beq.n	8003f04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eb2:	f7fd fe59 	bl	8001b68 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d302      	bcc.n	8003ec8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d11d      	bne.n	8003f04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ed2:	2b80      	cmp	r3, #128	@ 0x80
 8003ed4:	d016      	beq.n	8003f04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef0:	f043 0220 	orr.w	r2, r3, #32
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e007      	b.n	8003f14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f0e:	2b80      	cmp	r3, #128	@ 0x80
 8003f10:	d1c3      	bne.n	8003e9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f28:	e034      	b.n	8003f94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 f83e 	bl	8003fac <I2C_IsAcknowledgeFailed>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e034      	b.n	8003fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f40:	d028      	beq.n	8003f94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f42:	f7fd fe11 	bl	8001b68 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d302      	bcc.n	8003f58 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d11d      	bne.n	8003f94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d016      	beq.n	8003f94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f80:	f043 0220 	orr.w	r2, r3, #32
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e007      	b.n	8003fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	f003 0304 	and.w	r3, r3, #4
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d1c3      	bne.n	8003f2a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fc2:	d11b      	bne.n	8003ffc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fcc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe8:	f043 0204 	orr.w	r2, r3, #4
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e000      	b.n	8003ffe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b086      	sub	sp, #24
 800400e:	af02      	add	r7, sp, #8
 8004010:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e101      	b.n	8004220 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d106      	bne.n	800403c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f006 fbe2 	bl	800a800 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2203      	movs	r2, #3
 8004040:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800404a:	d102      	bne.n	8004052 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f002 ff37 	bl	8006eca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6818      	ldr	r0, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	7c1a      	ldrb	r2, [r3, #16]
 8004064:	f88d 2000 	strb.w	r2, [sp]
 8004068:	3304      	adds	r3, #4
 800406a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800406c:	f002 fe16 	bl	8006c9c <USB_CoreInit>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d005      	beq.n	8004082 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2202      	movs	r2, #2
 800407a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e0ce      	b.n	8004220 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2100      	movs	r1, #0
 8004088:	4618      	mov	r0, r3
 800408a:	f002 ff2f 	bl	8006eec <USB_SetCurrentMode>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d005      	beq.n	80040a0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e0bf      	b.n	8004220 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040a0:	2300      	movs	r3, #0
 80040a2:	73fb      	strb	r3, [r7, #15]
 80040a4:	e04a      	b.n	800413c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80040a6:	7bfa      	ldrb	r2, [r7, #15]
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	4613      	mov	r3, r2
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	4413      	add	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	440b      	add	r3, r1
 80040b4:	3315      	adds	r3, #21
 80040b6:	2201      	movs	r2, #1
 80040b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80040ba:	7bfa      	ldrb	r2, [r7, #15]
 80040bc:	6879      	ldr	r1, [r7, #4]
 80040be:	4613      	mov	r3, r2
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	4413      	add	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	440b      	add	r3, r1
 80040c8:	3314      	adds	r3, #20
 80040ca:	7bfa      	ldrb	r2, [r7, #15]
 80040cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80040ce:	7bfa      	ldrb	r2, [r7, #15]
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
 80040d2:	b298      	uxth	r0, r3
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	4613      	mov	r3, r2
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	4413      	add	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	440b      	add	r3, r1
 80040e0:	332e      	adds	r3, #46	@ 0x2e
 80040e2:	4602      	mov	r2, r0
 80040e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80040e6:	7bfa      	ldrb	r2, [r7, #15]
 80040e8:	6879      	ldr	r1, [r7, #4]
 80040ea:	4613      	mov	r3, r2
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	4413      	add	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	440b      	add	r3, r1
 80040f4:	3318      	adds	r3, #24
 80040f6:	2200      	movs	r2, #0
 80040f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80040fa:	7bfa      	ldrb	r2, [r7, #15]
 80040fc:	6879      	ldr	r1, [r7, #4]
 80040fe:	4613      	mov	r3, r2
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	4413      	add	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	440b      	add	r3, r1
 8004108:	331c      	adds	r3, #28
 800410a:	2200      	movs	r2, #0
 800410c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800410e:	7bfa      	ldrb	r2, [r7, #15]
 8004110:	6879      	ldr	r1, [r7, #4]
 8004112:	4613      	mov	r3, r2
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	4413      	add	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	440b      	add	r3, r1
 800411c:	3320      	adds	r3, #32
 800411e:	2200      	movs	r2, #0
 8004120:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004122:	7bfa      	ldrb	r2, [r7, #15]
 8004124:	6879      	ldr	r1, [r7, #4]
 8004126:	4613      	mov	r3, r2
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	440b      	add	r3, r1
 8004130:	3324      	adds	r3, #36	@ 0x24
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004136:	7bfb      	ldrb	r3, [r7, #15]
 8004138:	3301      	adds	r3, #1
 800413a:	73fb      	strb	r3, [r7, #15]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	791b      	ldrb	r3, [r3, #4]
 8004140:	7bfa      	ldrb	r2, [r7, #15]
 8004142:	429a      	cmp	r2, r3
 8004144:	d3af      	bcc.n	80040a6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004146:	2300      	movs	r3, #0
 8004148:	73fb      	strb	r3, [r7, #15]
 800414a:	e044      	b.n	80041d6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800414c:	7bfa      	ldrb	r2, [r7, #15]
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	4613      	mov	r3, r2
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	4413      	add	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800415e:	2200      	movs	r2, #0
 8004160:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004162:	7bfa      	ldrb	r2, [r7, #15]
 8004164:	6879      	ldr	r1, [r7, #4]
 8004166:	4613      	mov	r3, r2
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	4413      	add	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	440b      	add	r3, r1
 8004170:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004174:	7bfa      	ldrb	r2, [r7, #15]
 8004176:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004178:	7bfa      	ldrb	r2, [r7, #15]
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	4613      	mov	r3, r2
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	4413      	add	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	440b      	add	r3, r1
 8004186:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800418a:	2200      	movs	r2, #0
 800418c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800418e:	7bfa      	ldrb	r2, [r7, #15]
 8004190:	6879      	ldr	r1, [r7, #4]
 8004192:	4613      	mov	r3, r2
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	4413      	add	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	440b      	add	r3, r1
 800419c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80041a4:	7bfa      	ldrb	r2, [r7, #15]
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	4613      	mov	r3, r2
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	4413      	add	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80041b6:	2200      	movs	r2, #0
 80041b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80041ba:	7bfa      	ldrb	r2, [r7, #15]
 80041bc:	6879      	ldr	r1, [r7, #4]
 80041be:	4613      	mov	r3, r2
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	4413      	add	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	440b      	add	r3, r1
 80041c8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041d0:	7bfb      	ldrb	r3, [r7, #15]
 80041d2:	3301      	adds	r3, #1
 80041d4:	73fb      	strb	r3, [r7, #15]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	791b      	ldrb	r3, [r3, #4]
 80041da:	7bfa      	ldrb	r2, [r7, #15]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d3b5      	bcc.n	800414c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	7c1a      	ldrb	r2, [r3, #16]
 80041e8:	f88d 2000 	strb.w	r2, [sp]
 80041ec:	3304      	adds	r3, #4
 80041ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041f0:	f002 fec8 	bl	8006f84 <USB_DevInit>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d005      	beq.n	8004206 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2202      	movs	r2, #2
 80041fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e00c      	b.n	8004220 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4618      	mov	r0, r3
 800421a:	f003 ff12 	bl	8008042 <USB_DevDisconnect>

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <HAL_PCD_Start+0x1c>
 8004240:	2302      	movs	r3, #2
 8004242:	e022      	b.n	800428a <HAL_PCD_Start+0x62>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004254:	2b00      	cmp	r3, #0
 8004256:	d009      	beq.n	800426c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800425c:	2b01      	cmp	r3, #1
 800425e:	d105      	bne.n	800426c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004264:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4618      	mov	r0, r3
 8004272:	f002 fe19 	bl	8006ea8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f003 fec0 	bl	8008000 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004292:	b590      	push	{r4, r7, lr}
 8004294:	b08d      	sub	sp, #52	@ 0x34
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f003 ff7e 	bl	80081aa <USB_GetMode>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f040 848c 	bne.w	8004bce <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f003 fee2 	bl	8008084 <USB_ReadInterrupts>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 8482 	beq.w	8004bcc <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	0a1b      	lsrs	r3, r3, #8
 80042d2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f003 fecf 	bl	8008084 <USB_ReadInterrupts>
 80042e6:	4603      	mov	r3, r0
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d107      	bne.n	8004300 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695a      	ldr	r2, [r3, #20]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f002 0202 	and.w	r2, r2, #2
 80042fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f003 febd 	bl	8008084 <USB_ReadInterrupts>
 800430a:	4603      	mov	r3, r0
 800430c:	f003 0310 	and.w	r3, r3, #16
 8004310:	2b10      	cmp	r3, #16
 8004312:	d161      	bne.n	80043d8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699a      	ldr	r2, [r3, #24]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0210 	bic.w	r2, r2, #16
 8004322:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	f003 020f 	and.w	r2, r3, #15
 8004330:	4613      	mov	r3, r2
 8004332:	00db      	lsls	r3, r3, #3
 8004334:	4413      	add	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	4413      	add	r3, r2
 8004340:	3304      	adds	r3, #4
 8004342:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800434a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800434e:	d124      	bne.n	800439a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004356:	4013      	ands	r3, r2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d035      	beq.n	80043c8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	091b      	lsrs	r3, r3, #4
 8004364:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004366:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800436a:	b29b      	uxth	r3, r3
 800436c:	461a      	mov	r2, r3
 800436e:	6a38      	ldr	r0, [r7, #32]
 8004370:	f003 fcf4 	bl	8007d5c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	68da      	ldr	r2, [r3, #12]
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	091b      	lsrs	r3, r3, #4
 800437c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004380:	441a      	add	r2, r3
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	695a      	ldr	r2, [r3, #20]
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	091b      	lsrs	r3, r3, #4
 800438e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004392:	441a      	add	r2, r3
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	615a      	str	r2, [r3, #20]
 8004398:	e016      	b.n	80043c8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80043a0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80043a4:	d110      	bne.n	80043c8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80043ac:	2208      	movs	r2, #8
 80043ae:	4619      	mov	r1, r3
 80043b0:	6a38      	ldr	r0, [r7, #32]
 80043b2:	f003 fcd3 	bl	8007d5c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	695a      	ldr	r2, [r3, #20]
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	091b      	lsrs	r3, r3, #4
 80043be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043c2:	441a      	add	r2, r3
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	699a      	ldr	r2, [r3, #24]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0210 	orr.w	r2, r2, #16
 80043d6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4618      	mov	r0, r3
 80043de:	f003 fe51 	bl	8008084 <USB_ReadInterrupts>
 80043e2:	4603      	mov	r3, r0
 80043e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043e8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80043ec:	f040 80a7 	bne.w	800453e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f003 fe56 	bl	80080aa <USB_ReadDevAllOutEpInterrupt>
 80043fe:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004400:	e099      	b.n	8004536 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 808e 	beq.w	800452a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004414:	b2d2      	uxtb	r2, r2
 8004416:	4611      	mov	r1, r2
 8004418:	4618      	mov	r0, r3
 800441a:	f003 fe7a 	bl	8008112 <USB_ReadDevOutEPInterrupt>
 800441e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00c      	beq.n	8004444 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800442a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800442c:	015a      	lsls	r2, r3, #5
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	4413      	add	r3, r2
 8004432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004436:	461a      	mov	r2, r3
 8004438:	2301      	movs	r3, #1
 800443a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800443c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fea4 	bl	800518c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	f003 0308 	and.w	r3, r3, #8
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00c      	beq.n	8004468 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800444e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	4413      	add	r3, r2
 8004456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800445a:	461a      	mov	r2, r3
 800445c:	2308      	movs	r3, #8
 800445e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004460:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 ff7a 	bl	800535c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	f003 0310 	and.w	r3, r3, #16
 800446e:	2b00      	cmp	r3, #0
 8004470:	d008      	beq.n	8004484 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	4413      	add	r3, r2
 800447a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800447e:	461a      	mov	r2, r3
 8004480:	2310      	movs	r3, #16
 8004482:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d030      	beq.n	80044f0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800448e:	6a3b      	ldr	r3, [r7, #32]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004496:	2b80      	cmp	r3, #128	@ 0x80
 8004498:	d109      	bne.n	80044ae <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	69fa      	ldr	r2, [r7, #28]
 80044a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044a8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80044ac:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80044ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044b0:	4613      	mov	r3, r2
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	4413      	add	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	4413      	add	r3, r2
 80044c0:	3304      	adds	r3, #4
 80044c2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	78db      	ldrb	r3, [r3, #3]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d108      	bne.n	80044de <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	2200      	movs	r2, #0
 80044d0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80044d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	4619      	mov	r1, r3
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f006 fa8d 	bl	800a9f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80044de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e0:	015a      	lsls	r2, r3, #5
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	4413      	add	r3, r2
 80044e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044ea:	461a      	mov	r2, r3
 80044ec:	2302      	movs	r3, #2
 80044ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f003 0320 	and.w	r3, r3, #32
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d008      	beq.n	800450c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80044fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fc:	015a      	lsls	r2, r3, #5
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	4413      	add	r3, r2
 8004502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004506:	461a      	mov	r2, r3
 8004508:	2320      	movs	r3, #32
 800450a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d009      	beq.n	800452a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	4413      	add	r3, r2
 800451e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004522:	461a      	mov	r2, r3
 8004524:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004528:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800452a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452c:	3301      	adds	r3, #1
 800452e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004532:	085b      	lsrs	r3, r3, #1
 8004534:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004538:	2b00      	cmp	r3, #0
 800453a:	f47f af62 	bne.w	8004402 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4618      	mov	r0, r3
 8004544:	f003 fd9e 	bl	8008084 <USB_ReadInterrupts>
 8004548:	4603      	mov	r3, r0
 800454a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800454e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004552:	f040 80db 	bne.w	800470c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f003 fdbf 	bl	80080de <USB_ReadDevAllInEpInterrupt>
 8004560:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004562:	2300      	movs	r3, #0
 8004564:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004566:	e0cd      	b.n	8004704 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	f000 80c2 	beq.w	80046f8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	4611      	mov	r1, r2
 800457e:	4618      	mov	r0, r3
 8004580:	f003 fde5 	bl	800814e <USB_ReadDevInEPInterrupt>
 8004584:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d057      	beq.n	8004640 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004592:	f003 030f 	and.w	r3, r3, #15
 8004596:	2201      	movs	r2, #1
 8004598:	fa02 f303 	lsl.w	r3, r2, r3
 800459c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	43db      	mvns	r3, r3
 80045aa:	69f9      	ldr	r1, [r7, #28]
 80045ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80045b0:	4013      	ands	r3, r2
 80045b2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80045b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045c0:	461a      	mov	r2, r3
 80045c2:	2301      	movs	r3, #1
 80045c4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	799b      	ldrb	r3, [r3, #6]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d132      	bne.n	8004634 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80045ce:	6879      	ldr	r1, [r7, #4]
 80045d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045d2:	4613      	mov	r3, r2
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	4413      	add	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	440b      	add	r3, r1
 80045dc:	3320      	adds	r3, #32
 80045de:	6819      	ldr	r1, [r3, #0]
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045e4:	4613      	mov	r3, r2
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	4413      	add	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4403      	add	r3, r0
 80045ee:	331c      	adds	r3, #28
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4419      	add	r1, r3
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045f8:	4613      	mov	r3, r2
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	4413      	add	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4403      	add	r3, r0
 8004602:	3320      	adds	r3, #32
 8004604:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004608:	2b00      	cmp	r3, #0
 800460a:	d113      	bne.n	8004634 <HAL_PCD_IRQHandler+0x3a2>
 800460c:	6879      	ldr	r1, [r7, #4]
 800460e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004610:	4613      	mov	r3, r2
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	4413      	add	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	440b      	add	r3, r1
 800461a:	3324      	adds	r3, #36	@ 0x24
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d108      	bne.n	8004634 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6818      	ldr	r0, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800462c:	461a      	mov	r2, r3
 800462e:	2101      	movs	r1, #1
 8004630:	f003 fdec 	bl	800820c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004636:	b2db      	uxtb	r3, r3
 8004638:	4619      	mov	r1, r3
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f006 f961 	bl	800a902 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	f003 0308 	and.w	r3, r3, #8
 8004646:	2b00      	cmp	r3, #0
 8004648:	d008      	beq.n	800465c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800464a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	4413      	add	r3, r2
 8004652:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004656:	461a      	mov	r2, r3
 8004658:	2308      	movs	r3, #8
 800465a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	f003 0310 	and.w	r3, r3, #16
 8004662:	2b00      	cmp	r3, #0
 8004664:	d008      	beq.n	8004678 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004668:	015a      	lsls	r2, r3, #5
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	4413      	add	r3, r2
 800466e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004672:	461a      	mov	r2, r3
 8004674:	2310      	movs	r3, #16
 8004676:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800467e:	2b00      	cmp	r3, #0
 8004680:	d008      	beq.n	8004694 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004684:	015a      	lsls	r2, r3, #5
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	4413      	add	r3, r2
 800468a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800468e:	461a      	mov	r2, r3
 8004690:	2340      	movs	r3, #64	@ 0x40
 8004692:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d023      	beq.n	80046e6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800469e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046a0:	6a38      	ldr	r0, [r7, #32]
 80046a2:	f002 fdd3 	bl	800724c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80046a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046a8:	4613      	mov	r3, r2
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	3310      	adds	r3, #16
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	4413      	add	r3, r2
 80046b6:	3304      	adds	r3, #4
 80046b8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	78db      	ldrb	r3, [r3, #3]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d108      	bne.n	80046d4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	2200      	movs	r2, #0
 80046c6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80046c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	4619      	mov	r1, r3
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f006 f9a4 	bl	800aa1c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80046d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046e0:	461a      	mov	r2, r3
 80046e2:	2302      	movs	r3, #2
 80046e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80046f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 fcbd 	bl	8005072 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80046f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fa:	3301      	adds	r3, #1
 80046fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80046fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004700:	085b      	lsrs	r3, r3, #1
 8004702:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004706:	2b00      	cmp	r3, #0
 8004708:	f47f af2e 	bne.w	8004568 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4618      	mov	r0, r3
 8004712:	f003 fcb7 	bl	8008084 <USB_ReadInterrupts>
 8004716:	4603      	mov	r3, r0
 8004718:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800471c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004720:	d122      	bne.n	8004768 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	69fa      	ldr	r2, [r7, #28]
 800472c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004730:	f023 0301 	bic.w	r3, r3, #1
 8004734:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800473c:	2b01      	cmp	r3, #1
 800473e:	d108      	bne.n	8004752 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004748:	2100      	movs	r1, #0
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 fea4 	bl	8005498 <HAL_PCDEx_LPM_Callback>
 8004750:	e002      	b.n	8004758 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f006 f942 	bl	800a9dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695a      	ldr	r2, [r3, #20]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004766:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4618      	mov	r0, r3
 800476e:	f003 fc89 	bl	8008084 <USB_ReadInterrupts>
 8004772:	4603      	mov	r3, r0
 8004774:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004778:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800477c:	d112      	bne.n	80047a4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b01      	cmp	r3, #1
 800478c:	d102      	bne.n	8004794 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f006 f8fe 	bl	800a990 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	695a      	ldr	r2, [r3, #20]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80047a2:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f003 fc6b 	bl	8008084 <USB_ReadInterrupts>
 80047ae:	4603      	mov	r3, r0
 80047b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047b8:	f040 80b7 	bne.w	800492a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	69fa      	ldr	r2, [r7, #28]
 80047c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047ca:	f023 0301 	bic.w	r3, r3, #1
 80047ce:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2110      	movs	r1, #16
 80047d6:	4618      	mov	r0, r3
 80047d8:	f002 fd38 	bl	800724c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047dc:	2300      	movs	r3, #0
 80047de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047e0:	e046      	b.n	8004870 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80047e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047ee:	461a      	mov	r2, r3
 80047f0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80047f4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80047f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004806:	0151      	lsls	r1, r2, #5
 8004808:	69fa      	ldr	r2, [r7, #28]
 800480a:	440a      	add	r2, r1
 800480c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004810:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004814:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004818:	015a      	lsls	r2, r3, #5
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	4413      	add	r3, r2
 800481e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004822:	461a      	mov	r2, r3
 8004824:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004828:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800482a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	4413      	add	r3, r2
 8004832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800483a:	0151      	lsls	r1, r2, #5
 800483c:	69fa      	ldr	r2, [r7, #28]
 800483e:	440a      	add	r2, r1
 8004840:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004844:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004848:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800484a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800484c:	015a      	lsls	r2, r3, #5
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	4413      	add	r3, r2
 8004852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800485a:	0151      	lsls	r1, r2, #5
 800485c:	69fa      	ldr	r2, [r7, #28]
 800485e:	440a      	add	r2, r1
 8004860:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004864:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004868:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800486a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800486c:	3301      	adds	r3, #1
 800486e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	791b      	ldrb	r3, [r3, #4]
 8004874:	461a      	mov	r2, r3
 8004876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004878:	4293      	cmp	r3, r2
 800487a:	d3b2      	bcc.n	80047e2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	69fa      	ldr	r2, [r7, #28]
 8004886:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800488a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800488e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	7bdb      	ldrb	r3, [r3, #15]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d016      	beq.n	80048c6 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800489e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048a2:	69fa      	ldr	r2, [r7, #28]
 80048a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048a8:	f043 030b 	orr.w	r3, r3, #11
 80048ac:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b8:	69fa      	ldr	r2, [r7, #28]
 80048ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048be:	f043 030b 	orr.w	r3, r3, #11
 80048c2:	6453      	str	r3, [r2, #68]	@ 0x44
 80048c4:	e015      	b.n	80048f2 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	69fa      	ldr	r2, [r7, #28]
 80048d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80048d8:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80048dc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	69fa      	ldr	r2, [r7, #28]
 80048e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048ec:	f043 030b 	orr.w	r3, r3, #11
 80048f0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	69fa      	ldr	r2, [r7, #28]
 80048fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004900:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004904:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6818      	ldr	r0, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004914:	461a      	mov	r2, r3
 8004916:	f003 fc79 	bl	800820c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	695a      	ldr	r2, [r3, #20]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004928:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f003 fba8 	bl	8008084 <USB_ReadInterrupts>
 8004934:	4603      	mov	r3, r0
 8004936:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800493a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800493e:	d123      	bne.n	8004988 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4618      	mov	r0, r3
 8004946:	f003 fc3e 	bl	80081c6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4618      	mov	r0, r3
 8004950:	f002 fcf5 	bl	800733e <USB_GetDevSpeed>
 8004954:	4603      	mov	r3, r0
 8004956:	461a      	mov	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681c      	ldr	r4, [r3, #0]
 8004960:	f001 f9ca 	bl	8005cf8 <HAL_RCC_GetHCLKFreq>
 8004964:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800496a:	461a      	mov	r2, r3
 800496c:	4620      	mov	r0, r4
 800496e:	f002 f9f9 	bl	8006d64 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f005 ffed 	bl	800a952 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	695a      	ldr	r2, [r3, #20]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004986:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4618      	mov	r0, r3
 800498e:	f003 fb79 	bl	8008084 <USB_ReadInterrupts>
 8004992:	4603      	mov	r3, r0
 8004994:	f003 0308 	and.w	r3, r3, #8
 8004998:	2b08      	cmp	r3, #8
 800499a:	d10a      	bne.n	80049b2 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f005 ffca 	bl	800a936 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	695a      	ldr	r2, [r3, #20]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f002 0208 	and.w	r2, r2, #8
 80049b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f003 fb64 	bl	8008084 <USB_ReadInterrupts>
 80049bc:	4603      	mov	r3, r0
 80049be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049c2:	2b80      	cmp	r3, #128	@ 0x80
 80049c4:	d123      	bne.n	8004a0e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80049c6:	6a3b      	ldr	r3, [r7, #32]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049d2:	2301      	movs	r3, #1
 80049d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80049d6:	e014      	b.n	8004a02 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80049d8:	6879      	ldr	r1, [r7, #4]
 80049da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049dc:	4613      	mov	r3, r2
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	4413      	add	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	440b      	add	r3, r1
 80049e6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d105      	bne.n	80049fc <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80049f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	4619      	mov	r1, r3
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 fb0a 	bl	8005010 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fe:	3301      	adds	r3, #1
 8004a00:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	791b      	ldrb	r3, [r3, #4]
 8004a06:	461a      	mov	r2, r3
 8004a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d3e4      	bcc.n	80049d8 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f003 fb36 	bl	8008084 <USB_ReadInterrupts>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a22:	d13c      	bne.n	8004a9e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a24:	2301      	movs	r3, #1
 8004a26:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a28:	e02b      	b.n	8004a82 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a3e:	4613      	mov	r3, r2
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	4413      	add	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	440b      	add	r3, r1
 8004a48:	3318      	adds	r3, #24
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d115      	bne.n	8004a7c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004a50:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	da12      	bge.n	8004a7c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	00db      	lsls	r3, r3, #3
 8004a5e:	4413      	add	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	440b      	add	r3, r1
 8004a64:	3317      	adds	r3, #23
 8004a66:	2201      	movs	r2, #1
 8004a68:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	4619      	mov	r1, r3
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 faca 	bl	8005010 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7e:	3301      	adds	r3, #1
 8004a80:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	791b      	ldrb	r3, [r3, #4]
 8004a86:	461a      	mov	r2, r3
 8004a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d3cd      	bcc.n	8004a2a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695a      	ldr	r2, [r3, #20]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004a9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f003 faee 	bl	8008084 <USB_ReadInterrupts>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004aae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ab2:	d156      	bne.n	8004b62 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ab8:	e045      	b.n	8004b46 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004aca:	6879      	ldr	r1, [r7, #4]
 8004acc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ace:	4613      	mov	r3, r2
 8004ad0:	00db      	lsls	r3, r3, #3
 8004ad2:	4413      	add	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	440b      	add	r3, r1
 8004ad8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d12e      	bne.n	8004b40 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004ae2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	da2b      	bge.n	8004b40 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	0c1a      	lsrs	r2, r3, #16
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004af2:	4053      	eors	r3, r2
 8004af4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d121      	bne.n	8004b40 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004afc:	6879      	ldr	r1, [r7, #4]
 8004afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b00:	4613      	mov	r3, r2
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	4413      	add	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	440b      	add	r3, r1
 8004b0a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004b0e:	2201      	movs	r2, #1
 8004b10:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004b12:	6a3b      	ldr	r3, [r7, #32]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004b1e:	6a3b      	ldr	r3, [r7, #32]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10a      	bne.n	8004b40 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	69fa      	ldr	r2, [r7, #28]
 8004b34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b38:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b3c:	6053      	str	r3, [r2, #4]
            break;
 8004b3e:	e008      	b.n	8004b52 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b42:	3301      	adds	r3, #1
 8004b44:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	791b      	ldrb	r3, [r3, #4]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d3b3      	bcc.n	8004aba <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	695a      	ldr	r2, [r3, #20]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004b60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f003 fa8c 	bl	8008084 <USB_ReadInterrupts>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004b72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b76:	d10a      	bne.n	8004b8e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f005 ff61 	bl	800aa40 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	695a      	ldr	r2, [r3, #20]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004b8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f003 fa76 	bl	8008084 <USB_ReadInterrupts>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	f003 0304 	and.w	r3, r3, #4
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	d115      	bne.n	8004bce <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f005 ff51 	bl	800aa5c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6859      	ldr	r1, [r3, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	605a      	str	r2, [r3, #4]
 8004bca:	e000      	b.n	8004bce <HAL_PCD_IRQHandler+0x93c>
      return;
 8004bcc:	bf00      	nop
    }
  }
}
 8004bce:	3734      	adds	r7, #52	@ 0x34
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd90      	pop	{r4, r7, pc}

08004bd4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	460b      	mov	r3, r1
 8004bde:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d101      	bne.n	8004bee <HAL_PCD_SetAddress+0x1a>
 8004bea:	2302      	movs	r3, #2
 8004bec:	e012      	b.n	8004c14 <HAL_PCD_SetAddress+0x40>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	78fa      	ldrb	r2, [r7, #3]
 8004bfa:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	78fa      	ldrb	r2, [r7, #3]
 8004c02:	4611      	mov	r1, r2
 8004c04:	4618      	mov	r0, r3
 8004c06:	f003 f9d5 	bl	8007fb4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	4608      	mov	r0, r1
 8004c26:	4611      	mov	r1, r2
 8004c28:	461a      	mov	r2, r3
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	70fb      	strb	r3, [r7, #3]
 8004c2e:	460b      	mov	r3, r1
 8004c30:	803b      	strh	r3, [r7, #0]
 8004c32:	4613      	mov	r3, r2
 8004c34:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	da0f      	bge.n	8004c62 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c42:	78fb      	ldrb	r3, [r7, #3]
 8004c44:	f003 020f 	and.w	r2, r3, #15
 8004c48:	4613      	mov	r3, r2
 8004c4a:	00db      	lsls	r3, r3, #3
 8004c4c:	4413      	add	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	3310      	adds	r3, #16
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	4413      	add	r3, r2
 8004c56:	3304      	adds	r3, #4
 8004c58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	705a      	strb	r2, [r3, #1]
 8004c60:	e00f      	b.n	8004c82 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c62:	78fb      	ldrb	r3, [r7, #3]
 8004c64:	f003 020f 	and.w	r2, r3, #15
 8004c68:	4613      	mov	r3, r2
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	4413      	add	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	4413      	add	r3, r2
 8004c78:	3304      	adds	r3, #4
 8004c7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004c82:	78fb      	ldrb	r3, [r7, #3]
 8004c84:	f003 030f 	and.w	r3, r3, #15
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004c8e:	883b      	ldrh	r3, [r7, #0]
 8004c90:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	78ba      	ldrb	r2, [r7, #2]
 8004c9c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	785b      	ldrb	r3, [r3, #1]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d004      	beq.n	8004cb0 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	461a      	mov	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004cb0:	78bb      	ldrb	r3, [r7, #2]
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d102      	bne.n	8004cbc <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d101      	bne.n	8004cca <HAL_PCD_EP_Open+0xae>
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	e00e      	b.n	8004ce8 <HAL_PCD_EP_Open+0xcc>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68f9      	ldr	r1, [r7, #12]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f002 fb55 	bl	8007388 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004ce6:	7afb      	ldrb	r3, [r7, #11]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004cfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	da0f      	bge.n	8004d24 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d04:	78fb      	ldrb	r3, [r7, #3]
 8004d06:	f003 020f 	and.w	r2, r3, #15
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	00db      	lsls	r3, r3, #3
 8004d0e:	4413      	add	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	3310      	adds	r3, #16
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	4413      	add	r3, r2
 8004d18:	3304      	adds	r3, #4
 8004d1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	705a      	strb	r2, [r3, #1]
 8004d22:	e00f      	b.n	8004d44 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d24:	78fb      	ldrb	r3, [r7, #3]
 8004d26:	f003 020f 	and.w	r2, r3, #15
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	4413      	add	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	4413      	add	r3, r2
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d44:	78fb      	ldrb	r3, [r7, #3]
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	b2da      	uxtb	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d101      	bne.n	8004d5e <HAL_PCD_EP_Close+0x6e>
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	e00e      	b.n	8004d7c <HAL_PCD_EP_Close+0x8c>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68f9      	ldr	r1, [r7, #12]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f002 fb93 	bl	8007498 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	607a      	str	r2, [r7, #4]
 8004d8e:	603b      	str	r3, [r7, #0]
 8004d90:	460b      	mov	r3, r1
 8004d92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d94:	7afb      	ldrb	r3, [r7, #11]
 8004d96:	f003 020f 	and.w	r2, r3, #15
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	4413      	add	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	4413      	add	r3, r2
 8004daa:	3304      	adds	r3, #4
 8004dac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dc6:	7afb      	ldrb	r3, [r7, #11]
 8004dc8:	f003 030f 	and.w	r3, r3, #15
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	799b      	ldrb	r3, [r3, #6]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d102      	bne.n	8004de0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6818      	ldr	r0, [r3, #0]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	799b      	ldrb	r3, [r3, #6]
 8004de8:	461a      	mov	r2, r3
 8004dea:	6979      	ldr	r1, [r7, #20]
 8004dec:	f002 fc30 	bl	8007650 <USB_EPStartXfer>

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3718      	adds	r7, #24
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b083      	sub	sp, #12
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
 8004e02:	460b      	mov	r3, r1
 8004e04:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004e06:	78fb      	ldrb	r3, [r7, #3]
 8004e08:	f003 020f 	and.w	r2, r3, #15
 8004e0c:	6879      	ldr	r1, [r7, #4]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	4413      	add	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	440b      	add	r3, r1
 8004e18:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004e1c:	681b      	ldr	r3, [r3, #0]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b086      	sub	sp, #24
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	60f8      	str	r0, [r7, #12]
 8004e32:	607a      	str	r2, [r7, #4]
 8004e34:	603b      	str	r3, [r7, #0]
 8004e36:	460b      	mov	r3, r1
 8004e38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e3a:	7afb      	ldrb	r3, [r7, #11]
 8004e3c:	f003 020f 	and.w	r2, r3, #15
 8004e40:	4613      	mov	r3, r2
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	4413      	add	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	3310      	adds	r3, #16
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	3304      	adds	r3, #4
 8004e50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2200      	movs	r2, #0
 8004e62:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2201      	movs	r2, #1
 8004e68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e6a:	7afb      	ldrb	r3, [r7, #11]
 8004e6c:	f003 030f 	and.w	r3, r3, #15
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	799b      	ldrb	r3, [r3, #6]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d102      	bne.n	8004e84 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6818      	ldr	r0, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	799b      	ldrb	r3, [r3, #6]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	6979      	ldr	r1, [r7, #20]
 8004e90:	f002 fbde 	bl	8007650 <USB_EPStartXfer>

  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3718      	adds	r7, #24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b084      	sub	sp, #16
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004eaa:	78fb      	ldrb	r3, [r7, #3]
 8004eac:	f003 030f 	and.w	r3, r3, #15
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	7912      	ldrb	r2, [r2, #4]
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d901      	bls.n	8004ebc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e04f      	b.n	8004f5c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ebc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	da0f      	bge.n	8004ee4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ec4:	78fb      	ldrb	r3, [r7, #3]
 8004ec6:	f003 020f 	and.w	r2, r3, #15
 8004eca:	4613      	mov	r3, r2
 8004ecc:	00db      	lsls	r3, r3, #3
 8004ece:	4413      	add	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	3310      	adds	r3, #16
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	3304      	adds	r3, #4
 8004eda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	705a      	strb	r2, [r3, #1]
 8004ee2:	e00d      	b.n	8004f00 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ee4:	78fa      	ldrb	r2, [r7, #3]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	4413      	add	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2201      	movs	r2, #1
 8004f04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f06:	78fb      	ldrb	r3, [r7, #3]
 8004f08:	f003 030f 	and.w	r3, r3, #15
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d101      	bne.n	8004f20 <HAL_PCD_EP_SetStall+0x82>
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	e01d      	b.n	8004f5c <HAL_PCD_EP_SetStall+0xbe>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68f9      	ldr	r1, [r7, #12]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f002 ff6c 	bl	8007e0c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f34:	78fb      	ldrb	r3, [r7, #3]
 8004f36:	f003 030f 	and.w	r3, r3, #15
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d109      	bne.n	8004f52 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6818      	ldr	r0, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	7999      	ldrb	r1, [r3, #6]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	f003 f95d 	bl	800820c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004f70:	78fb      	ldrb	r3, [r7, #3]
 8004f72:	f003 030f 	and.w	r3, r3, #15
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	7912      	ldrb	r2, [r2, #4]
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d901      	bls.n	8004f82 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e042      	b.n	8005008 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004f82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	da0f      	bge.n	8004faa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f8a:	78fb      	ldrb	r3, [r7, #3]
 8004f8c:	f003 020f 	and.w	r2, r3, #15
 8004f90:	4613      	mov	r3, r2
 8004f92:	00db      	lsls	r3, r3, #3
 8004f94:	4413      	add	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	3310      	adds	r3, #16
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	3304      	adds	r3, #4
 8004fa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	705a      	strb	r2, [r3, #1]
 8004fa8:	e00f      	b.n	8004fca <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004faa:	78fb      	ldrb	r3, [r7, #3]
 8004fac:	f003 020f 	and.w	r2, r3, #15
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	4413      	add	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fd0:	78fb      	ldrb	r3, [r7, #3]
 8004fd2:	f003 030f 	and.w	r3, r3, #15
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d101      	bne.n	8004fea <HAL_PCD_EP_ClrStall+0x86>
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	e00e      	b.n	8005008 <HAL_PCD_EP_ClrStall+0xa4>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68f9      	ldr	r1, [r7, #12]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f002 ff75 	bl	8007ee8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	460b      	mov	r3, r1
 800501a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800501c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005020:	2b00      	cmp	r3, #0
 8005022:	da0c      	bge.n	800503e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005024:	78fb      	ldrb	r3, [r7, #3]
 8005026:	f003 020f 	and.w	r2, r3, #15
 800502a:	4613      	mov	r3, r2
 800502c:	00db      	lsls	r3, r3, #3
 800502e:	4413      	add	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	3310      	adds	r3, #16
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	4413      	add	r3, r2
 8005038:	3304      	adds	r3, #4
 800503a:	60fb      	str	r3, [r7, #12]
 800503c:	e00c      	b.n	8005058 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800503e:	78fb      	ldrb	r3, [r7, #3]
 8005040:	f003 020f 	and.w	r2, r3, #15
 8005044:	4613      	mov	r3, r2
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	4413      	add	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	4413      	add	r3, r2
 8005054:	3304      	adds	r3, #4
 8005056:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68f9      	ldr	r1, [r7, #12]
 800505e:	4618      	mov	r0, r3
 8005060:	f002 fd94 	bl	8007b8c <USB_EPStopXfer>
 8005064:	4603      	mov	r3, r0
 8005066:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005068:	7afb      	ldrb	r3, [r7, #11]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b08a      	sub	sp, #40	@ 0x28
 8005076:	af02      	add	r7, sp, #8
 8005078:	6078      	str	r0, [r7, #4]
 800507a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	4613      	mov	r3, r2
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	4413      	add	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	3310      	adds	r3, #16
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	4413      	add	r3, r2
 8005096:	3304      	adds	r3, #4
 8005098:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	695a      	ldr	r2, [r3, #20]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d901      	bls.n	80050aa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e06b      	b.n	8005182 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	691a      	ldr	r2, [r3, #16]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	69fa      	ldr	r2, [r7, #28]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d902      	bls.n	80050c6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	3303      	adds	r3, #3
 80050ca:	089b      	lsrs	r3, r3, #2
 80050cc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80050ce:	e02a      	b.n	8005126 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	691a      	ldr	r2, [r3, #16]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	69fa      	ldr	r2, [r7, #28]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d902      	bls.n	80050ec <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	3303      	adds	r3, #3
 80050f0:	089b      	lsrs	r3, r3, #2
 80050f2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	68d9      	ldr	r1, [r3, #12]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	b2da      	uxtb	r2, r3
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	4603      	mov	r3, r0
 8005108:	6978      	ldr	r0, [r7, #20]
 800510a:	f002 fde9 	bl	8007ce0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	68da      	ldr	r2, [r3, #12]
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	441a      	add	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	695a      	ldr	r2, [r3, #20]
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	441a      	add	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	429a      	cmp	r2, r3
 800513a:	d809      	bhi.n	8005150 <PCD_WriteEmptyTxFifo+0xde>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	695a      	ldr	r2, [r3, #20]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005144:	429a      	cmp	r2, r3
 8005146:	d203      	bcs.n	8005150 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1bf      	bne.n	80050d0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	691a      	ldr	r2, [r3, #16]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	429a      	cmp	r2, r3
 800515a:	d811      	bhi.n	8005180 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	f003 030f 	and.w	r3, r3, #15
 8005162:	2201      	movs	r2, #1
 8005164:	fa02 f303 	lsl.w	r3, r2, r3
 8005168:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005170:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	43db      	mvns	r3, r3
 8005176:	6939      	ldr	r1, [r7, #16]
 8005178:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800517c:	4013      	ands	r3, r2
 800517e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3720      	adds	r7, #32
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
	...

0800518c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b088      	sub	sp, #32
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	333c      	adds	r3, #60	@ 0x3c
 80051a4:	3304      	adds	r3, #4
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	799b      	ldrb	r3, [r3, #6]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d17b      	bne.n	80052ba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	f003 0308 	and.w	r3, r3, #8
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d015      	beq.n	80051f8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	4a61      	ldr	r2, [pc, #388]	@ (8005354 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	f240 80b9 	bls.w	8005348 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 80b3 	beq.w	8005348 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051ee:	461a      	mov	r2, r3
 80051f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051f4:	6093      	str	r3, [r2, #8]
 80051f6:	e0a7      	b.n	8005348 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	f003 0320 	and.w	r3, r3, #32
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d009      	beq.n	8005216 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	4413      	add	r3, r2
 800520a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800520e:	461a      	mov	r2, r3
 8005210:	2320      	movs	r3, #32
 8005212:	6093      	str	r3, [r2, #8]
 8005214:	e098      	b.n	8005348 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800521c:	2b00      	cmp	r3, #0
 800521e:	f040 8093 	bne.w	8005348 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	4a4b      	ldr	r2, [pc, #300]	@ (8005354 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d90f      	bls.n	800524a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00a      	beq.n	800524a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	4413      	add	r3, r2
 800523c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005240:	461a      	mov	r2, r3
 8005242:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005246:	6093      	str	r3, [r2, #8]
 8005248:	e07e      	b.n	8005348 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	4613      	mov	r3, r2
 800524e:	00db      	lsls	r3, r3, #3
 8005250:	4413      	add	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	4413      	add	r3, r2
 800525c:	3304      	adds	r3, #4
 800525e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6a1a      	ldr	r2, [r3, #32]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	0159      	lsls	r1, r3, #5
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	440b      	add	r3, r1
 800526c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005276:	1ad2      	subs	r2, r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d114      	bne.n	80052ac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d109      	bne.n	800529e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6818      	ldr	r0, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005294:	461a      	mov	r2, r3
 8005296:	2101      	movs	r1, #1
 8005298:	f002 ffb8 	bl	800820c <USB_EP0_OutStart>
 800529c:	e006      	b.n	80052ac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	68da      	ldr	r2, [r3, #12]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	441a      	add	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	4619      	mov	r1, r3
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f005 fb0a 	bl	800a8cc <HAL_PCD_DataOutStageCallback>
 80052b8:	e046      	b.n	8005348 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	4a26      	ldr	r2, [pc, #152]	@ (8005358 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d124      	bne.n	800530c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00a      	beq.n	80052e2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052d8:	461a      	mov	r2, r3
 80052da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052de:	6093      	str	r3, [r2, #8]
 80052e0:	e032      	b.n	8005348 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f003 0320 	and.w	r3, r3, #32
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d008      	beq.n	80052fe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052f8:	461a      	mov	r2, r3
 80052fa:	2320      	movs	r3, #32
 80052fc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	b2db      	uxtb	r3, r3
 8005302:	4619      	mov	r1, r3
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f005 fae1 	bl	800a8cc <HAL_PCD_DataOutStageCallback>
 800530a:	e01d      	b.n	8005348 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d114      	bne.n	800533c <PCD_EP_OutXfrComplete_int+0x1b0>
 8005312:	6879      	ldr	r1, [r7, #4]
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	4613      	mov	r3, r2
 8005318:	00db      	lsls	r3, r3, #3
 800531a:	4413      	add	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	440b      	add	r3, r1
 8005320:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d108      	bne.n	800533c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6818      	ldr	r0, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005334:	461a      	mov	r2, r3
 8005336:	2100      	movs	r1, #0
 8005338:	f002 ff68 	bl	800820c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	b2db      	uxtb	r3, r3
 8005340:	4619      	mov	r1, r3
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f005 fac2 	bl	800a8cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3720      	adds	r7, #32
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	4f54300a 	.word	0x4f54300a
 8005358:	4f54310a 	.word	0x4f54310a

0800535c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	333c      	adds	r3, #60	@ 0x3c
 8005374:	3304      	adds	r3, #4
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	4413      	add	r3, r2
 8005382:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	4a15      	ldr	r2, [pc, #84]	@ (80053e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d90e      	bls.n	80053b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005398:	2b00      	cmp	r3, #0
 800539a:	d009      	beq.n	80053b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053a8:	461a      	mov	r2, r3
 80053aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f005 fa79 	bl	800a8a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	4a0a      	ldr	r2, [pc, #40]	@ (80053e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d90c      	bls.n	80053d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	799b      	ldrb	r3, [r3, #6]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d108      	bne.n	80053d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6818      	ldr	r0, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80053d0:	461a      	mov	r2, r3
 80053d2:	2101      	movs	r1, #1
 80053d4:	f002 ff1a 	bl	800820c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3718      	adds	r7, #24
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	4f54300a 	.word	0x4f54300a

080053e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	460b      	mov	r3, r1
 80053f2:	70fb      	strb	r3, [r7, #3]
 80053f4:	4613      	mov	r3, r2
 80053f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005400:	78fb      	ldrb	r3, [r7, #3]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d107      	bne.n	8005416 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005406:	883b      	ldrh	r3, [r7, #0]
 8005408:	0419      	lsls	r1, r3, #16
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	430a      	orrs	r2, r1
 8005412:	629a      	str	r2, [r3, #40]	@ 0x28
 8005414:	e028      	b.n	8005468 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800541c:	0c1b      	lsrs	r3, r3, #16
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	4413      	add	r3, r2
 8005422:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005424:	2300      	movs	r3, #0
 8005426:	73fb      	strb	r3, [r7, #15]
 8005428:	e00d      	b.n	8005446 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	7bfb      	ldrb	r3, [r7, #15]
 8005430:	3340      	adds	r3, #64	@ 0x40
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	0c1b      	lsrs	r3, r3, #16
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	4413      	add	r3, r2
 800543e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005440:	7bfb      	ldrb	r3, [r7, #15]
 8005442:	3301      	adds	r3, #1
 8005444:	73fb      	strb	r3, [r7, #15]
 8005446:	7bfa      	ldrb	r2, [r7, #15]
 8005448:	78fb      	ldrb	r3, [r7, #3]
 800544a:	3b01      	subs	r3, #1
 800544c:	429a      	cmp	r2, r3
 800544e:	d3ec      	bcc.n	800542a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005450:	883b      	ldrh	r3, [r7, #0]
 8005452:	0418      	lsls	r0, r3, #16
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6819      	ldr	r1, [r3, #0]
 8005458:	78fb      	ldrb	r3, [r7, #3]
 800545a:	3b01      	subs	r3, #1
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	4302      	orrs	r2, r0
 8005460:	3340      	adds	r3, #64	@ 0x40
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	440b      	add	r3, r1
 8005466:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005476:	b480      	push	{r7}
 8005478:	b083      	sub	sp, #12
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
 800547e:	460b      	mov	r3, r1
 8005480:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	887a      	ldrh	r2, [r7, #2]
 8005488:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	460b      	mov	r3, r1
 80054a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e267      	b.n	8005992 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d075      	beq.n	80055ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80054ce:	4b88      	ldr	r3, [pc, #544]	@ (80056f0 <HAL_RCC_OscConfig+0x240>)
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f003 030c 	and.w	r3, r3, #12
 80054d6:	2b04      	cmp	r3, #4
 80054d8:	d00c      	beq.n	80054f4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054da:	4b85      	ldr	r3, [pc, #532]	@ (80056f0 <HAL_RCC_OscConfig+0x240>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80054e2:	2b08      	cmp	r3, #8
 80054e4:	d112      	bne.n	800550c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054e6:	4b82      	ldr	r3, [pc, #520]	@ (80056f0 <HAL_RCC_OscConfig+0x240>)
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054f2:	d10b      	bne.n	800550c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054f4:	4b7e      	ldr	r3, [pc, #504]	@ (80056f0 <HAL_RCC_OscConfig+0x240>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d05b      	beq.n	80055b8 <HAL_RCC_OscConfig+0x108>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d157      	bne.n	80055b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e242      	b.n	8005992 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005514:	d106      	bne.n	8005524 <HAL_RCC_OscConfig+0x74>
 8005516:	4b76      	ldr	r3, [pc, #472]	@ (80056f0 <HAL_RCC_OscConfig+0x240>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a75      	ldr	r2, [pc, #468]	@ (80056f0 <HAL_RCC_OscConfig+0x240>)
 800551c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005520:	6013      	str	r3, [r2, #0]
 8005522:	e01d      	b.n	8005560 <HAL_RCC_OscConfig+0xb0>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800552c:	d10c      	bne.n	8005548 <HAL_RCC_OscConfig+0x98>
 800552e:	4b70      	ldr	r3, [pc, #448]	@ (80056f0 <HAL_RCC_OscConfig+0x240>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a6f      	ldr	r2, [pc, #444]	@ (80056f0 <HAL_RCC_OscConfig+0x240>)
 8005534:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005538:	6013      	str	r3, [r2, #0]
 800553a:	4b6d      	ldr	r3, [pc, #436]	@ (80056f0 <HAL_RCC_OscConfig+0x240>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a6c      	ldr	r2, [pc, #432]	@ (80056f0 <HAL_RCC_OscConfig+0x240>)
 8005540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005544:	6013      	str	r3, [r2, #0]
 8005546:	e00b      	b.n	8005560 <HAL_RCC_OscConfig+0xb0>
 8005548:	4b69      	ldr	r3, [pc, #420]	@ (80056f0 <HAL_RCC_OscConfig+0x240>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a68      	ldr	r2, [pc, #416]	@ (80056f0 <HAL_RCC_OscConfig+0x240>)
 800554e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005552:	6013      	str	r3, [r2, #0]
 8005554:	4b66      	ldr	r3, [pc, #408]	@ (80056f0 <HAL_RCC_OscConfig+0x240>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a65      	ldr	r2, [pc, #404]	@ (80056f0 <HAL_RCC_OscConfig+0x240>)
 800555a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800555e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d013      	beq.n	8005590 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005568:	f7fc fafe 	bl	8001b68 <HAL_GetTick>
 800556c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800556e:	e008      	b.n	8005582 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005570:	f7fc fafa 	bl	8001b68 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b64      	cmp	r3, #100	@ 0x64
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e207      	b.n	8005992 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005582:	4b5b      	ldr	r3, [pc, #364]	@ (80056f0 <HAL_RCC_OscConfig+0x240>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d0f0      	beq.n	8005570 <HAL_RCC_OscConfig+0xc0>
 800558e:	e014      	b.n	80055ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005590:	f7fc faea 	bl	8001b68 <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005596:	e008      	b.n	80055aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005598:	f7fc fae6 	bl	8001b68 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b64      	cmp	r3, #100	@ 0x64
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e1f3      	b.n	8005992 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055aa:	4b51      	ldr	r3, [pc, #324]	@ (80056f0 <HAL_RCC_OscConfig+0x240>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1f0      	bne.n	8005598 <HAL_RCC_OscConfig+0xe8>
 80055b6:	e000      	b.n	80055ba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d063      	beq.n	800568e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80055c6:	4b4a      	ldr	r3, [pc, #296]	@ (80056f0 <HAL_RCC_OscConfig+0x240>)
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f003 030c 	and.w	r3, r3, #12
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00b      	beq.n	80055ea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055d2:	4b47      	ldr	r3, [pc, #284]	@ (80056f0 <HAL_RCC_OscConfig+0x240>)
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80055da:	2b08      	cmp	r3, #8
 80055dc:	d11c      	bne.n	8005618 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055de:	4b44      	ldr	r3, [pc, #272]	@ (80056f0 <HAL_RCC_OscConfig+0x240>)
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d116      	bne.n	8005618 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055ea:	4b41      	ldr	r3, [pc, #260]	@ (80056f0 <HAL_RCC_OscConfig+0x240>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d005      	beq.n	8005602 <HAL_RCC_OscConfig+0x152>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d001      	beq.n	8005602 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e1c7      	b.n	8005992 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005602:	4b3b      	ldr	r3, [pc, #236]	@ (80056f0 <HAL_RCC_OscConfig+0x240>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	4937      	ldr	r1, [pc, #220]	@ (80056f0 <HAL_RCC_OscConfig+0x240>)
 8005612:	4313      	orrs	r3, r2
 8005614:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005616:	e03a      	b.n	800568e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d020      	beq.n	8005662 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005620:	4b34      	ldr	r3, [pc, #208]	@ (80056f4 <HAL_RCC_OscConfig+0x244>)
 8005622:	2201      	movs	r2, #1
 8005624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005626:	f7fc fa9f 	bl	8001b68 <HAL_GetTick>
 800562a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800562c:	e008      	b.n	8005640 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800562e:	f7fc fa9b 	bl	8001b68 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d901      	bls.n	8005640 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e1a8      	b.n	8005992 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005640:	4b2b      	ldr	r3, [pc, #172]	@ (80056f0 <HAL_RCC_OscConfig+0x240>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0f0      	beq.n	800562e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800564c:	4b28      	ldr	r3, [pc, #160]	@ (80056f0 <HAL_RCC_OscConfig+0x240>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	4925      	ldr	r1, [pc, #148]	@ (80056f0 <HAL_RCC_OscConfig+0x240>)
 800565c:	4313      	orrs	r3, r2
 800565e:	600b      	str	r3, [r1, #0]
 8005660:	e015      	b.n	800568e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005662:	4b24      	ldr	r3, [pc, #144]	@ (80056f4 <HAL_RCC_OscConfig+0x244>)
 8005664:	2200      	movs	r2, #0
 8005666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005668:	f7fc fa7e 	bl	8001b68 <HAL_GetTick>
 800566c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800566e:	e008      	b.n	8005682 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005670:	f7fc fa7a 	bl	8001b68 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b02      	cmp	r3, #2
 800567c:	d901      	bls.n	8005682 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e187      	b.n	8005992 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005682:	4b1b      	ldr	r3, [pc, #108]	@ (80056f0 <HAL_RCC_OscConfig+0x240>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1f0      	bne.n	8005670 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0308 	and.w	r3, r3, #8
 8005696:	2b00      	cmp	r3, #0
 8005698:	d036      	beq.n	8005708 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d016      	beq.n	80056d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056a2:	4b15      	ldr	r3, [pc, #84]	@ (80056f8 <HAL_RCC_OscConfig+0x248>)
 80056a4:	2201      	movs	r2, #1
 80056a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a8:	f7fc fa5e 	bl	8001b68 <HAL_GetTick>
 80056ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056ae:	e008      	b.n	80056c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056b0:	f7fc fa5a 	bl	8001b68 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e167      	b.n	8005992 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056c2:	4b0b      	ldr	r3, [pc, #44]	@ (80056f0 <HAL_RCC_OscConfig+0x240>)
 80056c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d0f0      	beq.n	80056b0 <HAL_RCC_OscConfig+0x200>
 80056ce:	e01b      	b.n	8005708 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056d0:	4b09      	ldr	r3, [pc, #36]	@ (80056f8 <HAL_RCC_OscConfig+0x248>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056d6:	f7fc fa47 	bl	8001b68 <HAL_GetTick>
 80056da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056dc:	e00e      	b.n	80056fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056de:	f7fc fa43 	bl	8001b68 <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d907      	bls.n	80056fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e150      	b.n	8005992 <HAL_RCC_OscConfig+0x4e2>
 80056f0:	40023800 	.word	0x40023800
 80056f4:	42470000 	.word	0x42470000
 80056f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056fc:	4b88      	ldr	r3, [pc, #544]	@ (8005920 <HAL_RCC_OscConfig+0x470>)
 80056fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1ea      	bne.n	80056de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 8097 	beq.w	8005844 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005716:	2300      	movs	r3, #0
 8005718:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800571a:	4b81      	ldr	r3, [pc, #516]	@ (8005920 <HAL_RCC_OscConfig+0x470>)
 800571c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10f      	bne.n	8005746 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005726:	2300      	movs	r3, #0
 8005728:	60bb      	str	r3, [r7, #8]
 800572a:	4b7d      	ldr	r3, [pc, #500]	@ (8005920 <HAL_RCC_OscConfig+0x470>)
 800572c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572e:	4a7c      	ldr	r2, [pc, #496]	@ (8005920 <HAL_RCC_OscConfig+0x470>)
 8005730:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005734:	6413      	str	r3, [r2, #64]	@ 0x40
 8005736:	4b7a      	ldr	r3, [pc, #488]	@ (8005920 <HAL_RCC_OscConfig+0x470>)
 8005738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800573a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800573e:	60bb      	str	r3, [r7, #8]
 8005740:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005742:	2301      	movs	r3, #1
 8005744:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005746:	4b77      	ldr	r3, [pc, #476]	@ (8005924 <HAL_RCC_OscConfig+0x474>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800574e:	2b00      	cmp	r3, #0
 8005750:	d118      	bne.n	8005784 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005752:	4b74      	ldr	r3, [pc, #464]	@ (8005924 <HAL_RCC_OscConfig+0x474>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a73      	ldr	r2, [pc, #460]	@ (8005924 <HAL_RCC_OscConfig+0x474>)
 8005758:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800575c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800575e:	f7fc fa03 	bl	8001b68 <HAL_GetTick>
 8005762:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005764:	e008      	b.n	8005778 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005766:	f7fc f9ff 	bl	8001b68 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d901      	bls.n	8005778 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e10c      	b.n	8005992 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005778:	4b6a      	ldr	r3, [pc, #424]	@ (8005924 <HAL_RCC_OscConfig+0x474>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005780:	2b00      	cmp	r3, #0
 8005782:	d0f0      	beq.n	8005766 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d106      	bne.n	800579a <HAL_RCC_OscConfig+0x2ea>
 800578c:	4b64      	ldr	r3, [pc, #400]	@ (8005920 <HAL_RCC_OscConfig+0x470>)
 800578e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005790:	4a63      	ldr	r2, [pc, #396]	@ (8005920 <HAL_RCC_OscConfig+0x470>)
 8005792:	f043 0301 	orr.w	r3, r3, #1
 8005796:	6713      	str	r3, [r2, #112]	@ 0x70
 8005798:	e01c      	b.n	80057d4 <HAL_RCC_OscConfig+0x324>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	2b05      	cmp	r3, #5
 80057a0:	d10c      	bne.n	80057bc <HAL_RCC_OscConfig+0x30c>
 80057a2:	4b5f      	ldr	r3, [pc, #380]	@ (8005920 <HAL_RCC_OscConfig+0x470>)
 80057a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057a6:	4a5e      	ldr	r2, [pc, #376]	@ (8005920 <HAL_RCC_OscConfig+0x470>)
 80057a8:	f043 0304 	orr.w	r3, r3, #4
 80057ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80057ae:	4b5c      	ldr	r3, [pc, #368]	@ (8005920 <HAL_RCC_OscConfig+0x470>)
 80057b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057b2:	4a5b      	ldr	r2, [pc, #364]	@ (8005920 <HAL_RCC_OscConfig+0x470>)
 80057b4:	f043 0301 	orr.w	r3, r3, #1
 80057b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80057ba:	e00b      	b.n	80057d4 <HAL_RCC_OscConfig+0x324>
 80057bc:	4b58      	ldr	r3, [pc, #352]	@ (8005920 <HAL_RCC_OscConfig+0x470>)
 80057be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057c0:	4a57      	ldr	r2, [pc, #348]	@ (8005920 <HAL_RCC_OscConfig+0x470>)
 80057c2:	f023 0301 	bic.w	r3, r3, #1
 80057c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80057c8:	4b55      	ldr	r3, [pc, #340]	@ (8005920 <HAL_RCC_OscConfig+0x470>)
 80057ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057cc:	4a54      	ldr	r2, [pc, #336]	@ (8005920 <HAL_RCC_OscConfig+0x470>)
 80057ce:	f023 0304 	bic.w	r3, r3, #4
 80057d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d015      	beq.n	8005808 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057dc:	f7fc f9c4 	bl	8001b68 <HAL_GetTick>
 80057e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057e2:	e00a      	b.n	80057fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057e4:	f7fc f9c0 	bl	8001b68 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e0cb      	b.n	8005992 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057fa:	4b49      	ldr	r3, [pc, #292]	@ (8005920 <HAL_RCC_OscConfig+0x470>)
 80057fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d0ee      	beq.n	80057e4 <HAL_RCC_OscConfig+0x334>
 8005806:	e014      	b.n	8005832 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005808:	f7fc f9ae 	bl	8001b68 <HAL_GetTick>
 800580c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800580e:	e00a      	b.n	8005826 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005810:	f7fc f9aa 	bl	8001b68 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800581e:	4293      	cmp	r3, r2
 8005820:	d901      	bls.n	8005826 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e0b5      	b.n	8005992 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005826:	4b3e      	ldr	r3, [pc, #248]	@ (8005920 <HAL_RCC_OscConfig+0x470>)
 8005828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1ee      	bne.n	8005810 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005832:	7dfb      	ldrb	r3, [r7, #23]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d105      	bne.n	8005844 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005838:	4b39      	ldr	r3, [pc, #228]	@ (8005920 <HAL_RCC_OscConfig+0x470>)
 800583a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583c:	4a38      	ldr	r2, [pc, #224]	@ (8005920 <HAL_RCC_OscConfig+0x470>)
 800583e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005842:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 80a1 	beq.w	8005990 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800584e:	4b34      	ldr	r3, [pc, #208]	@ (8005920 <HAL_RCC_OscConfig+0x470>)
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f003 030c 	and.w	r3, r3, #12
 8005856:	2b08      	cmp	r3, #8
 8005858:	d05c      	beq.n	8005914 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	2b02      	cmp	r3, #2
 8005860:	d141      	bne.n	80058e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005862:	4b31      	ldr	r3, [pc, #196]	@ (8005928 <HAL_RCC_OscConfig+0x478>)
 8005864:	2200      	movs	r2, #0
 8005866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005868:	f7fc f97e 	bl	8001b68 <HAL_GetTick>
 800586c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005870:	f7fc f97a 	bl	8001b68 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b02      	cmp	r3, #2
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e087      	b.n	8005992 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005882:	4b27      	ldr	r3, [pc, #156]	@ (8005920 <HAL_RCC_OscConfig+0x470>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1f0      	bne.n	8005870 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	69da      	ldr	r2, [r3, #28]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	431a      	orrs	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800589c:	019b      	lsls	r3, r3, #6
 800589e:	431a      	orrs	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a4:	085b      	lsrs	r3, r3, #1
 80058a6:	3b01      	subs	r3, #1
 80058a8:	041b      	lsls	r3, r3, #16
 80058aa:	431a      	orrs	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b0:	061b      	lsls	r3, r3, #24
 80058b2:	491b      	ldr	r1, [pc, #108]	@ (8005920 <HAL_RCC_OscConfig+0x470>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005928 <HAL_RCC_OscConfig+0x478>)
 80058ba:	2201      	movs	r2, #1
 80058bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058be:	f7fc f953 	bl	8001b68 <HAL_GetTick>
 80058c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058c4:	e008      	b.n	80058d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058c6:	f7fc f94f 	bl	8001b68 <HAL_GetTick>
 80058ca:	4602      	mov	r2, r0
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d901      	bls.n	80058d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e05c      	b.n	8005992 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058d8:	4b11      	ldr	r3, [pc, #68]	@ (8005920 <HAL_RCC_OscConfig+0x470>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d0f0      	beq.n	80058c6 <HAL_RCC_OscConfig+0x416>
 80058e4:	e054      	b.n	8005990 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058e6:	4b10      	ldr	r3, [pc, #64]	@ (8005928 <HAL_RCC_OscConfig+0x478>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ec:	f7fc f93c 	bl	8001b68 <HAL_GetTick>
 80058f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058f2:	e008      	b.n	8005906 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058f4:	f7fc f938 	bl	8001b68 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d901      	bls.n	8005906 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e045      	b.n	8005992 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005906:	4b06      	ldr	r3, [pc, #24]	@ (8005920 <HAL_RCC_OscConfig+0x470>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1f0      	bne.n	80058f4 <HAL_RCC_OscConfig+0x444>
 8005912:	e03d      	b.n	8005990 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d107      	bne.n	800592c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e038      	b.n	8005992 <HAL_RCC_OscConfig+0x4e2>
 8005920:	40023800 	.word	0x40023800
 8005924:	40007000 	.word	0x40007000
 8005928:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800592c:	4b1b      	ldr	r3, [pc, #108]	@ (800599c <HAL_RCC_OscConfig+0x4ec>)
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d028      	beq.n	800598c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005944:	429a      	cmp	r2, r3
 8005946:	d121      	bne.n	800598c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005952:	429a      	cmp	r2, r3
 8005954:	d11a      	bne.n	800598c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800595c:	4013      	ands	r3, r2
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005962:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005964:	4293      	cmp	r3, r2
 8005966:	d111      	bne.n	800598c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005972:	085b      	lsrs	r3, r3, #1
 8005974:	3b01      	subs	r3, #1
 8005976:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005978:	429a      	cmp	r2, r3
 800597a:	d107      	bne.n	800598c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005986:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005988:	429a      	cmp	r2, r3
 800598a:	d001      	beq.n	8005990 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e000      	b.n	8005992 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3718      	adds	r7, #24
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	40023800 	.word	0x40023800

080059a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e0cc      	b.n	8005b4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059b4:	4b68      	ldr	r3, [pc, #416]	@ (8005b58 <HAL_RCC_ClockConfig+0x1b8>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0307 	and.w	r3, r3, #7
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d90c      	bls.n	80059dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059c2:	4b65      	ldr	r3, [pc, #404]	@ (8005b58 <HAL_RCC_ClockConfig+0x1b8>)
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ca:	4b63      	ldr	r3, [pc, #396]	@ (8005b58 <HAL_RCC_ClockConfig+0x1b8>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0307 	and.w	r3, r3, #7
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d001      	beq.n	80059dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e0b8      	b.n	8005b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d020      	beq.n	8005a2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0304 	and.w	r3, r3, #4
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d005      	beq.n	8005a00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059f4:	4b59      	ldr	r3, [pc, #356]	@ (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	4a58      	ldr	r2, [pc, #352]	@ (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 80059fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80059fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0308 	and.w	r3, r3, #8
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d005      	beq.n	8005a18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a0c:	4b53      	ldr	r3, [pc, #332]	@ (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	4a52      	ldr	r2, [pc, #328]	@ (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005a12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005a16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a18:	4b50      	ldr	r3, [pc, #320]	@ (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	494d      	ldr	r1, [pc, #308]	@ (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d044      	beq.n	8005ac0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d107      	bne.n	8005a4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a3e:	4b47      	ldr	r3, [pc, #284]	@ (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d119      	bne.n	8005a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e07f      	b.n	8005b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d003      	beq.n	8005a5e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a5a:	2b03      	cmp	r3, #3
 8005a5c:	d107      	bne.n	8005a6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a5e:	4b3f      	ldr	r3, [pc, #252]	@ (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d109      	bne.n	8005a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e06f      	b.n	8005b4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a6e:	4b3b      	ldr	r3, [pc, #236]	@ (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e067      	b.n	8005b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a7e:	4b37      	ldr	r3, [pc, #220]	@ (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f023 0203 	bic.w	r2, r3, #3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	4934      	ldr	r1, [pc, #208]	@ (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a90:	f7fc f86a 	bl	8001b68 <HAL_GetTick>
 8005a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a96:	e00a      	b.n	8005aae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a98:	f7fc f866 	bl	8001b68 <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d901      	bls.n	8005aae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e04f      	b.n	8005b4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aae:	4b2b      	ldr	r3, [pc, #172]	@ (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f003 020c 	and.w	r2, r3, #12
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d1eb      	bne.n	8005a98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ac0:	4b25      	ldr	r3, [pc, #148]	@ (8005b58 <HAL_RCC_ClockConfig+0x1b8>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0307 	and.w	r3, r3, #7
 8005ac8:	683a      	ldr	r2, [r7, #0]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d20c      	bcs.n	8005ae8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ace:	4b22      	ldr	r3, [pc, #136]	@ (8005b58 <HAL_RCC_ClockConfig+0x1b8>)
 8005ad0:	683a      	ldr	r2, [r7, #0]
 8005ad2:	b2d2      	uxtb	r2, r2
 8005ad4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ad6:	4b20      	ldr	r3, [pc, #128]	@ (8005b58 <HAL_RCC_ClockConfig+0x1b8>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0307 	and.w	r3, r3, #7
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d001      	beq.n	8005ae8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e032      	b.n	8005b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0304 	and.w	r3, r3, #4
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d008      	beq.n	8005b06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005af4:	4b19      	ldr	r3, [pc, #100]	@ (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	4916      	ldr	r1, [pc, #88]	@ (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0308 	and.w	r3, r3, #8
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d009      	beq.n	8005b26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b12:	4b12      	ldr	r3, [pc, #72]	@ (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	490e      	ldr	r1, [pc, #56]	@ (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005b26:	f000 f821 	bl	8005b6c <HAL_RCC_GetSysClockFreq>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	091b      	lsrs	r3, r3, #4
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	490a      	ldr	r1, [pc, #40]	@ (8005b60 <HAL_RCC_ClockConfig+0x1c0>)
 8005b38:	5ccb      	ldrb	r3, [r1, r3]
 8005b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b3e:	4a09      	ldr	r2, [pc, #36]	@ (8005b64 <HAL_RCC_ClockConfig+0x1c4>)
 8005b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005b42:	4b09      	ldr	r3, [pc, #36]	@ (8005b68 <HAL_RCC_ClockConfig+0x1c8>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7fb ffca 	bl	8001ae0 <HAL_InitTick>

  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	40023c00 	.word	0x40023c00
 8005b5c:	40023800 	.word	0x40023800
 8005b60:	0800b7d4 	.word	0x0800b7d4
 8005b64:	20000004 	.word	0x20000004
 8005b68:	20000008 	.word	0x20000008

08005b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b70:	b090      	sub	sp, #64	@ 0x40
 8005b72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005b80:	2300      	movs	r3, #0
 8005b82:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b84:	4b59      	ldr	r3, [pc, #356]	@ (8005cec <HAL_RCC_GetSysClockFreq+0x180>)
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f003 030c 	and.w	r3, r3, #12
 8005b8c:	2b08      	cmp	r3, #8
 8005b8e:	d00d      	beq.n	8005bac <HAL_RCC_GetSysClockFreq+0x40>
 8005b90:	2b08      	cmp	r3, #8
 8005b92:	f200 80a1 	bhi.w	8005cd8 <HAL_RCC_GetSysClockFreq+0x16c>
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d002      	beq.n	8005ba0 <HAL_RCC_GetSysClockFreq+0x34>
 8005b9a:	2b04      	cmp	r3, #4
 8005b9c:	d003      	beq.n	8005ba6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b9e:	e09b      	b.n	8005cd8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ba0:	4b53      	ldr	r3, [pc, #332]	@ (8005cf0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005ba4:	e09b      	b.n	8005cde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ba6:	4b53      	ldr	r3, [pc, #332]	@ (8005cf4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005ba8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005baa:	e098      	b.n	8005cde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bac:	4b4f      	ldr	r3, [pc, #316]	@ (8005cec <HAL_RCC_GetSysClockFreq+0x180>)
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005bb4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bb6:	4b4d      	ldr	r3, [pc, #308]	@ (8005cec <HAL_RCC_GetSysClockFreq+0x180>)
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d028      	beq.n	8005c14 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bc2:	4b4a      	ldr	r3, [pc, #296]	@ (8005cec <HAL_RCC_GetSysClockFreq+0x180>)
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	099b      	lsrs	r3, r3, #6
 8005bc8:	2200      	movs	r2, #0
 8005bca:	623b      	str	r3, [r7, #32]
 8005bcc:	627a      	str	r2, [r7, #36]	@ 0x24
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	4b47      	ldr	r3, [pc, #284]	@ (8005cf4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005bd8:	fb03 f201 	mul.w	r2, r3, r1
 8005bdc:	2300      	movs	r3, #0
 8005bde:	fb00 f303 	mul.w	r3, r0, r3
 8005be2:	4413      	add	r3, r2
 8005be4:	4a43      	ldr	r2, [pc, #268]	@ (8005cf4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005be6:	fba0 1202 	umull	r1, r2, r0, r2
 8005bea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005bec:	460a      	mov	r2, r1
 8005bee:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005bf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bf2:	4413      	add	r3, r2
 8005bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	61bb      	str	r3, [r7, #24]
 8005bfc:	61fa      	str	r2, [r7, #28]
 8005bfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005c06:	f7fa fb3b 	bl	8000280 <__aeabi_uldivmod>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	4613      	mov	r3, r2
 8005c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c12:	e053      	b.n	8005cbc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c14:	4b35      	ldr	r3, [pc, #212]	@ (8005cec <HAL_RCC_GetSysClockFreq+0x180>)
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	099b      	lsrs	r3, r3, #6
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	613b      	str	r3, [r7, #16]
 8005c1e:	617a      	str	r2, [r7, #20]
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005c26:	f04f 0b00 	mov.w	fp, #0
 8005c2a:	4652      	mov	r2, sl
 8005c2c:	465b      	mov	r3, fp
 8005c2e:	f04f 0000 	mov.w	r0, #0
 8005c32:	f04f 0100 	mov.w	r1, #0
 8005c36:	0159      	lsls	r1, r3, #5
 8005c38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c3c:	0150      	lsls	r0, r2, #5
 8005c3e:	4602      	mov	r2, r0
 8005c40:	460b      	mov	r3, r1
 8005c42:	ebb2 080a 	subs.w	r8, r2, sl
 8005c46:	eb63 090b 	sbc.w	r9, r3, fp
 8005c4a:	f04f 0200 	mov.w	r2, #0
 8005c4e:	f04f 0300 	mov.w	r3, #0
 8005c52:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005c56:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005c5a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005c5e:	ebb2 0408 	subs.w	r4, r2, r8
 8005c62:	eb63 0509 	sbc.w	r5, r3, r9
 8005c66:	f04f 0200 	mov.w	r2, #0
 8005c6a:	f04f 0300 	mov.w	r3, #0
 8005c6e:	00eb      	lsls	r3, r5, #3
 8005c70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c74:	00e2      	lsls	r2, r4, #3
 8005c76:	4614      	mov	r4, r2
 8005c78:	461d      	mov	r5, r3
 8005c7a:	eb14 030a 	adds.w	r3, r4, sl
 8005c7e:	603b      	str	r3, [r7, #0]
 8005c80:	eb45 030b 	adc.w	r3, r5, fp
 8005c84:	607b      	str	r3, [r7, #4]
 8005c86:	f04f 0200 	mov.w	r2, #0
 8005c8a:	f04f 0300 	mov.w	r3, #0
 8005c8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c92:	4629      	mov	r1, r5
 8005c94:	028b      	lsls	r3, r1, #10
 8005c96:	4621      	mov	r1, r4
 8005c98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c9c:	4621      	mov	r1, r4
 8005c9e:	028a      	lsls	r2, r1, #10
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	60bb      	str	r3, [r7, #8]
 8005caa:	60fa      	str	r2, [r7, #12]
 8005cac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cb0:	f7fa fae6 	bl	8000280 <__aeabi_uldivmod>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	4613      	mov	r3, r2
 8005cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8005cec <HAL_RCC_GetSysClockFreq+0x180>)
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	0c1b      	lsrs	r3, r3, #16
 8005cc2:	f003 0303 	and.w	r3, r3, #3
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005ccc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005cd6:	e002      	b.n	8005cde <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005cd8:	4b05      	ldr	r3, [pc, #20]	@ (8005cf0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005cda:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3740      	adds	r7, #64	@ 0x40
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cea:	bf00      	nop
 8005cec:	40023800 	.word	0x40023800
 8005cf0:	00f42400 	.word	0x00f42400
 8005cf4:	017d7840 	.word	0x017d7840

08005cf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cfc:	4b03      	ldr	r3, [pc, #12]	@ (8005d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	20000004 	.word	0x20000004

08005d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d14:	f7ff fff0 	bl	8005cf8 <HAL_RCC_GetHCLKFreq>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	4b05      	ldr	r3, [pc, #20]	@ (8005d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	0a9b      	lsrs	r3, r3, #10
 8005d20:	f003 0307 	and.w	r3, r3, #7
 8005d24:	4903      	ldr	r1, [pc, #12]	@ (8005d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d26:	5ccb      	ldrb	r3, [r1, r3]
 8005d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	40023800 	.word	0x40023800
 8005d34:	0800b7e4 	.word	0x0800b7e4

08005d38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d101      	bne.n	8005d4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e041      	b.n	8005dce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d106      	bne.n	8005d64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f7fb fd3e 	bl	80017e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	3304      	adds	r3, #4
 8005d74:	4619      	mov	r1, r3
 8005d76:	4610      	mov	r0, r2
 8005d78:	f000 fc3c 	bl	80065f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
	...

08005dd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d001      	beq.n	8005df0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e044      	b.n	8005e7a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2202      	movs	r2, #2
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f042 0201 	orr.w	r2, r2, #1
 8005e06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a1e      	ldr	r2, [pc, #120]	@ (8005e88 <HAL_TIM_Base_Start_IT+0xb0>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d018      	beq.n	8005e44 <HAL_TIM_Base_Start_IT+0x6c>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e1a:	d013      	beq.n	8005e44 <HAL_TIM_Base_Start_IT+0x6c>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a1a      	ldr	r2, [pc, #104]	@ (8005e8c <HAL_TIM_Base_Start_IT+0xb4>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d00e      	beq.n	8005e44 <HAL_TIM_Base_Start_IT+0x6c>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a19      	ldr	r2, [pc, #100]	@ (8005e90 <HAL_TIM_Base_Start_IT+0xb8>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d009      	beq.n	8005e44 <HAL_TIM_Base_Start_IT+0x6c>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a17      	ldr	r2, [pc, #92]	@ (8005e94 <HAL_TIM_Base_Start_IT+0xbc>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d004      	beq.n	8005e44 <HAL_TIM_Base_Start_IT+0x6c>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a16      	ldr	r2, [pc, #88]	@ (8005e98 <HAL_TIM_Base_Start_IT+0xc0>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d111      	bne.n	8005e68 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f003 0307 	and.w	r3, r3, #7
 8005e4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2b06      	cmp	r3, #6
 8005e54:	d010      	beq.n	8005e78 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f042 0201 	orr.w	r2, r2, #1
 8005e64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e66:	e007      	b.n	8005e78 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f042 0201 	orr.w	r2, r2, #1
 8005e76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	40010000 	.word	0x40010000
 8005e8c:	40000400 	.word	0x40000400
 8005e90:	40000800 	.word	0x40000800
 8005e94:	40000c00 	.word	0x40000c00
 8005e98:	40014000 	.word	0x40014000

08005e9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e041      	b.n	8005f32 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d106      	bne.n	8005ec8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f839 	bl	8005f3a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	3304      	adds	r3, #4
 8005ed8:	4619      	mov	r1, r3
 8005eda:	4610      	mov	r0, r2
 8005edc:	f000 fb8a 	bl	80065f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b083      	sub	sp, #12
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f42:	bf00      	nop
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
	...

08005f50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d109      	bne.n	8005f74 <HAL_TIM_PWM_Start+0x24>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	bf14      	ite	ne
 8005f6c:	2301      	movne	r3, #1
 8005f6e:	2300      	moveq	r3, #0
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	e022      	b.n	8005fba <HAL_TIM_PWM_Start+0x6a>
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	2b04      	cmp	r3, #4
 8005f78:	d109      	bne.n	8005f8e <HAL_TIM_PWM_Start+0x3e>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	bf14      	ite	ne
 8005f86:	2301      	movne	r3, #1
 8005f88:	2300      	moveq	r3, #0
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	e015      	b.n	8005fba <HAL_TIM_PWM_Start+0x6a>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b08      	cmp	r3, #8
 8005f92:	d109      	bne.n	8005fa8 <HAL_TIM_PWM_Start+0x58>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	bf14      	ite	ne
 8005fa0:	2301      	movne	r3, #1
 8005fa2:	2300      	moveq	r3, #0
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	e008      	b.n	8005fba <HAL_TIM_PWM_Start+0x6a>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	bf14      	ite	ne
 8005fb4:	2301      	movne	r3, #1
 8005fb6:	2300      	moveq	r3, #0
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e068      	b.n	8006094 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d104      	bne.n	8005fd2 <HAL_TIM_PWM_Start+0x82>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2202      	movs	r2, #2
 8005fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fd0:	e013      	b.n	8005ffa <HAL_TIM_PWM_Start+0xaa>
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b04      	cmp	r3, #4
 8005fd6:	d104      	bne.n	8005fe2 <HAL_TIM_PWM_Start+0x92>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fe0:	e00b      	b.n	8005ffa <HAL_TIM_PWM_Start+0xaa>
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b08      	cmp	r3, #8
 8005fe6:	d104      	bne.n	8005ff2 <HAL_TIM_PWM_Start+0xa2>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2202      	movs	r2, #2
 8005fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ff0:	e003      	b.n	8005ffa <HAL_TIM_PWM_Start+0xaa>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2201      	movs	r2, #1
 8006000:	6839      	ldr	r1, [r7, #0]
 8006002:	4618      	mov	r0, r3
 8006004:	f000 fda2 	bl	8006b4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a23      	ldr	r2, [pc, #140]	@ (800609c <HAL_TIM_PWM_Start+0x14c>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d107      	bne.n	8006022 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006020:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a1d      	ldr	r2, [pc, #116]	@ (800609c <HAL_TIM_PWM_Start+0x14c>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d018      	beq.n	800605e <HAL_TIM_PWM_Start+0x10e>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006034:	d013      	beq.n	800605e <HAL_TIM_PWM_Start+0x10e>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a19      	ldr	r2, [pc, #100]	@ (80060a0 <HAL_TIM_PWM_Start+0x150>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d00e      	beq.n	800605e <HAL_TIM_PWM_Start+0x10e>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a17      	ldr	r2, [pc, #92]	@ (80060a4 <HAL_TIM_PWM_Start+0x154>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d009      	beq.n	800605e <HAL_TIM_PWM_Start+0x10e>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a16      	ldr	r2, [pc, #88]	@ (80060a8 <HAL_TIM_PWM_Start+0x158>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d004      	beq.n	800605e <HAL_TIM_PWM_Start+0x10e>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a14      	ldr	r2, [pc, #80]	@ (80060ac <HAL_TIM_PWM_Start+0x15c>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d111      	bne.n	8006082 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f003 0307 	and.w	r3, r3, #7
 8006068:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2b06      	cmp	r3, #6
 800606e:	d010      	beq.n	8006092 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f042 0201 	orr.w	r2, r2, #1
 800607e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006080:	e007      	b.n	8006092 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f042 0201 	orr.w	r2, r2, #1
 8006090:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	40010000 	.word	0x40010000
 80060a0:	40000400 	.word	0x40000400
 80060a4:	40000800 	.word	0x40000800
 80060a8:	40000c00 	.word	0x40000c00
 80060ac:	40014000 	.word	0x40014000

080060b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d020      	beq.n	8006114 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f003 0302 	and.w	r3, r3, #2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d01b      	beq.n	8006114 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f06f 0202 	mvn.w	r2, #2
 80060e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	f003 0303 	and.w	r3, r3, #3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 fa5b 	bl	80065b6 <HAL_TIM_IC_CaptureCallback>
 8006100:	e005      	b.n	800610e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 fa4d 	bl	80065a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 fa5e 	bl	80065ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	f003 0304 	and.w	r3, r3, #4
 800611a:	2b00      	cmp	r3, #0
 800611c:	d020      	beq.n	8006160 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f003 0304 	and.w	r3, r3, #4
 8006124:	2b00      	cmp	r3, #0
 8006126:	d01b      	beq.n	8006160 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f06f 0204 	mvn.w	r2, #4
 8006130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2202      	movs	r2, #2
 8006136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 fa35 	bl	80065b6 <HAL_TIM_IC_CaptureCallback>
 800614c:	e005      	b.n	800615a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 fa27 	bl	80065a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 fa38 	bl	80065ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f003 0308 	and.w	r3, r3, #8
 8006166:	2b00      	cmp	r3, #0
 8006168:	d020      	beq.n	80061ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f003 0308 	and.w	r3, r3, #8
 8006170:	2b00      	cmp	r3, #0
 8006172:	d01b      	beq.n	80061ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f06f 0208 	mvn.w	r2, #8
 800617c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2204      	movs	r2, #4
 8006182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	f003 0303 	and.w	r3, r3, #3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 fa0f 	bl	80065b6 <HAL_TIM_IC_CaptureCallback>
 8006198:	e005      	b.n	80061a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 fa01 	bl	80065a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 fa12 	bl	80065ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f003 0310 	and.w	r3, r3, #16
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d020      	beq.n	80061f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f003 0310 	and.w	r3, r3, #16
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d01b      	beq.n	80061f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f06f 0210 	mvn.w	r2, #16
 80061c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2208      	movs	r2, #8
 80061ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	69db      	ldr	r3, [r3, #28]
 80061d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d003      	beq.n	80061e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f9e9 	bl	80065b6 <HAL_TIM_IC_CaptureCallback>
 80061e4:	e005      	b.n	80061f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f9db 	bl	80065a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f9ec 	bl	80065ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00c      	beq.n	800621c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f003 0301 	and.w	r3, r3, #1
 8006208:	2b00      	cmp	r3, #0
 800620a:	d007      	beq.n	800621c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f06f 0201 	mvn.w	r2, #1
 8006214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7fa fc74 	bl	8000b04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00c      	beq.n	8006240 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800622c:	2b00      	cmp	r3, #0
 800622e:	d007      	beq.n	8006240 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fd24 	bl	8006c88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00c      	beq.n	8006264 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006250:	2b00      	cmp	r3, #0
 8006252:	d007      	beq.n	8006264 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800625c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f9bd 	bl	80065de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	f003 0320 	and.w	r3, r3, #32
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00c      	beq.n	8006288 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f003 0320 	and.w	r3, r3, #32
 8006274:	2b00      	cmp	r3, #0
 8006276:	d007      	beq.n	8006288 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f06f 0220 	mvn.w	r2, #32
 8006280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fcf6 	bl	8006c74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006288:	bf00      	nop
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800629c:	2300      	movs	r3, #0
 800629e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d101      	bne.n	80062ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80062aa:	2302      	movs	r3, #2
 80062ac:	e0ae      	b.n	800640c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2b0c      	cmp	r3, #12
 80062ba:	f200 809f 	bhi.w	80063fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80062be:	a201      	add	r2, pc, #4	@ (adr r2, 80062c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80062c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c4:	080062f9 	.word	0x080062f9
 80062c8:	080063fd 	.word	0x080063fd
 80062cc:	080063fd 	.word	0x080063fd
 80062d0:	080063fd 	.word	0x080063fd
 80062d4:	08006339 	.word	0x08006339
 80062d8:	080063fd 	.word	0x080063fd
 80062dc:	080063fd 	.word	0x080063fd
 80062e0:	080063fd 	.word	0x080063fd
 80062e4:	0800637b 	.word	0x0800637b
 80062e8:	080063fd 	.word	0x080063fd
 80062ec:	080063fd 	.word	0x080063fd
 80062f0:	080063fd 	.word	0x080063fd
 80062f4:	080063bb 	.word	0x080063bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68b9      	ldr	r1, [r7, #8]
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 f9fe 	bl	8006700 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	699a      	ldr	r2, [r3, #24]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f042 0208 	orr.w	r2, r2, #8
 8006312:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	699a      	ldr	r2, [r3, #24]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f022 0204 	bic.w	r2, r2, #4
 8006322:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6999      	ldr	r1, [r3, #24]
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	691a      	ldr	r2, [r3, #16]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	430a      	orrs	r2, r1
 8006334:	619a      	str	r2, [r3, #24]
      break;
 8006336:	e064      	b.n	8006402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68b9      	ldr	r1, [r7, #8]
 800633e:	4618      	mov	r0, r3
 8006340:	f000 fa44 	bl	80067cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	699a      	ldr	r2, [r3, #24]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	699a      	ldr	r2, [r3, #24]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6999      	ldr	r1, [r3, #24]
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	021a      	lsls	r2, r3, #8
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	430a      	orrs	r2, r1
 8006376:	619a      	str	r2, [r3, #24]
      break;
 8006378:	e043      	b.n	8006402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68b9      	ldr	r1, [r7, #8]
 8006380:	4618      	mov	r0, r3
 8006382:	f000 fa8f 	bl	80068a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	69da      	ldr	r2, [r3, #28]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f042 0208 	orr.w	r2, r2, #8
 8006394:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	69da      	ldr	r2, [r3, #28]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f022 0204 	bic.w	r2, r2, #4
 80063a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	69d9      	ldr	r1, [r3, #28]
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	691a      	ldr	r2, [r3, #16]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	430a      	orrs	r2, r1
 80063b6:	61da      	str	r2, [r3, #28]
      break;
 80063b8:	e023      	b.n	8006402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68b9      	ldr	r1, [r7, #8]
 80063c0:	4618      	mov	r0, r3
 80063c2:	f000 fad9 	bl	8006978 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	69da      	ldr	r2, [r3, #28]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	69da      	ldr	r2, [r3, #28]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	69d9      	ldr	r1, [r3, #28]
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	021a      	lsls	r2, r3, #8
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	61da      	str	r2, [r3, #28]
      break;
 80063fa:	e002      	b.n	8006402 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006400:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800640a:	7dfb      	ldrb	r3, [r7, #23]
}
 800640c:	4618      	mov	r0, r3
 800640e:	3718      	adds	r7, #24
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800641e:	2300      	movs	r3, #0
 8006420:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006428:	2b01      	cmp	r3, #1
 800642a:	d101      	bne.n	8006430 <HAL_TIM_ConfigClockSource+0x1c>
 800642c:	2302      	movs	r3, #2
 800642e:	e0b4      	b.n	800659a <HAL_TIM_ConfigClockSource+0x186>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800644e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006456:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006468:	d03e      	beq.n	80064e8 <HAL_TIM_ConfigClockSource+0xd4>
 800646a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800646e:	f200 8087 	bhi.w	8006580 <HAL_TIM_ConfigClockSource+0x16c>
 8006472:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006476:	f000 8086 	beq.w	8006586 <HAL_TIM_ConfigClockSource+0x172>
 800647a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800647e:	d87f      	bhi.n	8006580 <HAL_TIM_ConfigClockSource+0x16c>
 8006480:	2b70      	cmp	r3, #112	@ 0x70
 8006482:	d01a      	beq.n	80064ba <HAL_TIM_ConfigClockSource+0xa6>
 8006484:	2b70      	cmp	r3, #112	@ 0x70
 8006486:	d87b      	bhi.n	8006580 <HAL_TIM_ConfigClockSource+0x16c>
 8006488:	2b60      	cmp	r3, #96	@ 0x60
 800648a:	d050      	beq.n	800652e <HAL_TIM_ConfigClockSource+0x11a>
 800648c:	2b60      	cmp	r3, #96	@ 0x60
 800648e:	d877      	bhi.n	8006580 <HAL_TIM_ConfigClockSource+0x16c>
 8006490:	2b50      	cmp	r3, #80	@ 0x50
 8006492:	d03c      	beq.n	800650e <HAL_TIM_ConfigClockSource+0xfa>
 8006494:	2b50      	cmp	r3, #80	@ 0x50
 8006496:	d873      	bhi.n	8006580 <HAL_TIM_ConfigClockSource+0x16c>
 8006498:	2b40      	cmp	r3, #64	@ 0x40
 800649a:	d058      	beq.n	800654e <HAL_TIM_ConfigClockSource+0x13a>
 800649c:	2b40      	cmp	r3, #64	@ 0x40
 800649e:	d86f      	bhi.n	8006580 <HAL_TIM_ConfigClockSource+0x16c>
 80064a0:	2b30      	cmp	r3, #48	@ 0x30
 80064a2:	d064      	beq.n	800656e <HAL_TIM_ConfigClockSource+0x15a>
 80064a4:	2b30      	cmp	r3, #48	@ 0x30
 80064a6:	d86b      	bhi.n	8006580 <HAL_TIM_ConfigClockSource+0x16c>
 80064a8:	2b20      	cmp	r3, #32
 80064aa:	d060      	beq.n	800656e <HAL_TIM_ConfigClockSource+0x15a>
 80064ac:	2b20      	cmp	r3, #32
 80064ae:	d867      	bhi.n	8006580 <HAL_TIM_ConfigClockSource+0x16c>
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d05c      	beq.n	800656e <HAL_TIM_ConfigClockSource+0x15a>
 80064b4:	2b10      	cmp	r3, #16
 80064b6:	d05a      	beq.n	800656e <HAL_TIM_ConfigClockSource+0x15a>
 80064b8:	e062      	b.n	8006580 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064ca:	f000 fb1f 	bl	8006b0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80064dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	609a      	str	r2, [r3, #8]
      break;
 80064e6:	e04f      	b.n	8006588 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064f8:	f000 fb08 	bl	8006b0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	689a      	ldr	r2, [r3, #8]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800650a:	609a      	str	r2, [r3, #8]
      break;
 800650c:	e03c      	b.n	8006588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800651a:	461a      	mov	r2, r3
 800651c:	f000 fa7c 	bl	8006a18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2150      	movs	r1, #80	@ 0x50
 8006526:	4618      	mov	r0, r3
 8006528:	f000 fad5 	bl	8006ad6 <TIM_ITRx_SetConfig>
      break;
 800652c:	e02c      	b.n	8006588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800653a:	461a      	mov	r2, r3
 800653c:	f000 fa9b 	bl	8006a76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2160      	movs	r1, #96	@ 0x60
 8006546:	4618      	mov	r0, r3
 8006548:	f000 fac5 	bl	8006ad6 <TIM_ITRx_SetConfig>
      break;
 800654c:	e01c      	b.n	8006588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800655a:	461a      	mov	r2, r3
 800655c:	f000 fa5c 	bl	8006a18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2140      	movs	r1, #64	@ 0x40
 8006566:	4618      	mov	r0, r3
 8006568:	f000 fab5 	bl	8006ad6 <TIM_ITRx_SetConfig>
      break;
 800656c:	e00c      	b.n	8006588 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4619      	mov	r1, r3
 8006578:	4610      	mov	r0, r2
 800657a:	f000 faac 	bl	8006ad6 <TIM_ITRx_SetConfig>
      break;
 800657e:	e003      	b.n	8006588 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	73fb      	strb	r3, [r7, #15]
      break;
 8006584:	e000      	b.n	8006588 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006586:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006598:	7bfb      	ldrb	r3, [r7, #15]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b083      	sub	sp, #12
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065aa:	bf00      	nop
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b083      	sub	sp, #12
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065be:	bf00      	nop
 80065c0:	370c      	adds	r7, #12
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065ca:	b480      	push	{r7}
 80065cc:	b083      	sub	sp, #12
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065d2:	bf00      	nop
 80065d4:	370c      	adds	r7, #12
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065de:	b480      	push	{r7}
 80065e0:	b083      	sub	sp, #12
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065e6:	bf00      	nop
 80065e8:	370c      	adds	r7, #12
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
	...

080065f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a37      	ldr	r2, [pc, #220]	@ (80066e4 <TIM_Base_SetConfig+0xf0>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d00f      	beq.n	800662c <TIM_Base_SetConfig+0x38>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006612:	d00b      	beq.n	800662c <TIM_Base_SetConfig+0x38>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a34      	ldr	r2, [pc, #208]	@ (80066e8 <TIM_Base_SetConfig+0xf4>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d007      	beq.n	800662c <TIM_Base_SetConfig+0x38>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a33      	ldr	r2, [pc, #204]	@ (80066ec <TIM_Base_SetConfig+0xf8>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d003      	beq.n	800662c <TIM_Base_SetConfig+0x38>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a32      	ldr	r2, [pc, #200]	@ (80066f0 <TIM_Base_SetConfig+0xfc>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d108      	bne.n	800663e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	4313      	orrs	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a28      	ldr	r2, [pc, #160]	@ (80066e4 <TIM_Base_SetConfig+0xf0>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d01b      	beq.n	800667e <TIM_Base_SetConfig+0x8a>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800664c:	d017      	beq.n	800667e <TIM_Base_SetConfig+0x8a>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a25      	ldr	r2, [pc, #148]	@ (80066e8 <TIM_Base_SetConfig+0xf4>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d013      	beq.n	800667e <TIM_Base_SetConfig+0x8a>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a24      	ldr	r2, [pc, #144]	@ (80066ec <TIM_Base_SetConfig+0xf8>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d00f      	beq.n	800667e <TIM_Base_SetConfig+0x8a>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a23      	ldr	r2, [pc, #140]	@ (80066f0 <TIM_Base_SetConfig+0xfc>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d00b      	beq.n	800667e <TIM_Base_SetConfig+0x8a>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a22      	ldr	r2, [pc, #136]	@ (80066f4 <TIM_Base_SetConfig+0x100>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d007      	beq.n	800667e <TIM_Base_SetConfig+0x8a>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a21      	ldr	r2, [pc, #132]	@ (80066f8 <TIM_Base_SetConfig+0x104>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d003      	beq.n	800667e <TIM_Base_SetConfig+0x8a>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a20      	ldr	r2, [pc, #128]	@ (80066fc <TIM_Base_SetConfig+0x108>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d108      	bne.n	8006690 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	4313      	orrs	r3, r2
 800668e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	4313      	orrs	r3, r2
 800669c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	689a      	ldr	r2, [r3, #8]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a0c      	ldr	r2, [pc, #48]	@ (80066e4 <TIM_Base_SetConfig+0xf0>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d103      	bne.n	80066be <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	691a      	ldr	r2, [r3, #16]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f043 0204 	orr.w	r2, r3, #4
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2201      	movs	r2, #1
 80066ce:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	601a      	str	r2, [r3, #0]
}
 80066d6:	bf00      	nop
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	40010000 	.word	0x40010000
 80066e8:	40000400 	.word	0x40000400
 80066ec:	40000800 	.word	0x40000800
 80066f0:	40000c00 	.word	0x40000c00
 80066f4:	40014000 	.word	0x40014000
 80066f8:	40014400 	.word	0x40014400
 80066fc:	40014800 	.word	0x40014800

08006700 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	f023 0201 	bic.w	r2, r3, #1
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800672e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f023 0303 	bic.w	r3, r3, #3
 8006736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	4313      	orrs	r3, r2
 8006740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f023 0302 	bic.w	r3, r3, #2
 8006748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	4313      	orrs	r3, r2
 8006752:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a1c      	ldr	r2, [pc, #112]	@ (80067c8 <TIM_OC1_SetConfig+0xc8>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d10c      	bne.n	8006776 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f023 0308 	bic.w	r3, r3, #8
 8006762:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	4313      	orrs	r3, r2
 800676c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f023 0304 	bic.w	r3, r3, #4
 8006774:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a13      	ldr	r2, [pc, #76]	@ (80067c8 <TIM_OC1_SetConfig+0xc8>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d111      	bne.n	80067a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006784:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800678c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	4313      	orrs	r3, r2
 8006796:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	4313      	orrs	r3, r2
 80067a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	685a      	ldr	r2, [r3, #4]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	621a      	str	r2, [r3, #32]
}
 80067bc:	bf00      	nop
 80067be:	371c      	adds	r7, #28
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr
 80067c8:	40010000 	.word	0x40010000

080067cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b087      	sub	sp, #28
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a1b      	ldr	r3, [r3, #32]
 80067da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a1b      	ldr	r3, [r3, #32]
 80067e0:	f023 0210 	bic.w	r2, r3, #16
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006802:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	021b      	lsls	r3, r3, #8
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	4313      	orrs	r3, r2
 800680e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f023 0320 	bic.w	r3, r3, #32
 8006816:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	011b      	lsls	r3, r3, #4
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	4313      	orrs	r3, r2
 8006822:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a1e      	ldr	r2, [pc, #120]	@ (80068a0 <TIM_OC2_SetConfig+0xd4>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d10d      	bne.n	8006848 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006832:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	011b      	lsls	r3, r3, #4
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	4313      	orrs	r3, r2
 800683e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006846:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a15      	ldr	r2, [pc, #84]	@ (80068a0 <TIM_OC2_SetConfig+0xd4>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d113      	bne.n	8006878 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006856:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800685e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	4313      	orrs	r3, r2
 800686a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	4313      	orrs	r3, r2
 8006876:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	685a      	ldr	r2, [r3, #4]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	621a      	str	r2, [r3, #32]
}
 8006892:	bf00      	nop
 8006894:	371c      	adds	r7, #28
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	40010000 	.word	0x40010000

080068a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b087      	sub	sp, #28
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	69db      	ldr	r3, [r3, #28]
 80068ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f023 0303 	bic.w	r3, r3, #3
 80068da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80068ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	021b      	lsls	r3, r3, #8
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006974 <TIM_OC3_SetConfig+0xd0>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d10d      	bne.n	800691e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006908:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	021b      	lsls	r3, r3, #8
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	4313      	orrs	r3, r2
 8006914:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800691c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a14      	ldr	r2, [pc, #80]	@ (8006974 <TIM_OC3_SetConfig+0xd0>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d113      	bne.n	800694e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800692c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006934:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	011b      	lsls	r3, r3, #4
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	4313      	orrs	r3, r2
 8006940:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	011b      	lsls	r3, r3, #4
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	4313      	orrs	r3, r2
 800694c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	621a      	str	r2, [r3, #32]
}
 8006968:	bf00      	nop
 800696a:	371c      	adds	r7, #28
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	40010000 	.word	0x40010000

08006978 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006978:	b480      	push	{r7}
 800697a:	b087      	sub	sp, #28
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a1b      	ldr	r3, [r3, #32]
 800698c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	021b      	lsls	r3, r3, #8
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80069c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	031b      	lsls	r3, r3, #12
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a10      	ldr	r2, [pc, #64]	@ (8006a14 <TIM_OC4_SetConfig+0x9c>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d109      	bne.n	80069ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	695b      	ldr	r3, [r3, #20]
 80069e4:	019b      	lsls	r3, r3, #6
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	693a      	ldr	r2, [r7, #16]
 8006a04:	621a      	str	r2, [r3, #32]
}
 8006a06:	bf00      	nop
 8006a08:	371c      	adds	r7, #28
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	40010000 	.word	0x40010000

08006a18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b087      	sub	sp, #28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6a1b      	ldr	r3, [r3, #32]
 8006a28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	f023 0201 	bic.w	r2, r3, #1
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	011b      	lsls	r3, r3, #4
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f023 030a 	bic.w	r3, r3, #10
 8006a54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	621a      	str	r2, [r3, #32]
}
 8006a6a:	bf00      	nop
 8006a6c:	371c      	adds	r7, #28
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr

08006a76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b087      	sub	sp, #28
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	60f8      	str	r0, [r7, #12]
 8006a7e:	60b9      	str	r1, [r7, #8]
 8006a80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6a1b      	ldr	r3, [r3, #32]
 8006a8c:	f023 0210 	bic.w	r2, r3, #16
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006aa0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	031b      	lsls	r3, r3, #12
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006ab2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	011b      	lsls	r3, r3, #4
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	621a      	str	r2, [r3, #32]
}
 8006aca:	bf00      	nop
 8006acc:	371c      	adds	r7, #28
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b085      	sub	sp, #20
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
 8006ade:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	f043 0307 	orr.w	r3, r3, #7
 8006af8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	609a      	str	r2, [r3, #8]
}
 8006b00:	bf00      	nop
 8006b02:	3714      	adds	r7, #20
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
 8006b18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	021a      	lsls	r2, r3, #8
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	431a      	orrs	r2, r3
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	609a      	str	r2, [r3, #8]
}
 8006b40:	bf00      	nop
 8006b42:	371c      	adds	r7, #28
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b087      	sub	sp, #28
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	f003 031f 	and.w	r3, r3, #31
 8006b5e:	2201      	movs	r2, #1
 8006b60:	fa02 f303 	lsl.w	r3, r2, r3
 8006b64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6a1a      	ldr	r2, [r3, #32]
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	43db      	mvns	r3, r3
 8006b6e:	401a      	ands	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6a1a      	ldr	r2, [r3, #32]
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	f003 031f 	and.w	r3, r3, #31
 8006b7e:	6879      	ldr	r1, [r7, #4]
 8006b80:	fa01 f303 	lsl.w	r3, r1, r3
 8006b84:	431a      	orrs	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	621a      	str	r2, [r3, #32]
}
 8006b8a:	bf00      	nop
 8006b8c:	371c      	adds	r7, #28
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
	...

08006b98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d101      	bne.n	8006bb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bac:	2302      	movs	r3, #2
 8006bae:	e050      	b.n	8006c52 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a1c      	ldr	r2, [pc, #112]	@ (8006c60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d018      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bfc:	d013      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a18      	ldr	r2, [pc, #96]	@ (8006c64 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d00e      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a16      	ldr	r2, [pc, #88]	@ (8006c68 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d009      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a15      	ldr	r2, [pc, #84]	@ (8006c6c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d004      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a13      	ldr	r2, [pc, #76]	@ (8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d10c      	bne.n	8006c40 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	40010000 	.word	0x40010000
 8006c64:	40000400 	.word	0x40000400
 8006c68:	40000800 	.word	0x40000800
 8006c6c:	40000c00 	.word	0x40000c00
 8006c70:	40014000 	.word	0x40014000

08006c74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c9c:	b084      	sub	sp, #16
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b084      	sub	sp, #16
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
 8006ca6:	f107 001c 	add.w	r0, r7, #28
 8006caa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006cae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d123      	bne.n	8006cfe <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006cca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006cde:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d105      	bne.n	8006cf2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f001 fae8 	bl	80082c8 <USB_CoreReset>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	73fb      	strb	r3, [r7, #15]
 8006cfc:	e01b      	b.n	8006d36 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f001 fadc 	bl	80082c8 <USB_CoreReset>
 8006d10:	4603      	mov	r3, r0
 8006d12:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006d14:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d106      	bne.n	8006d2a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d20:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	639a      	str	r2, [r3, #56]	@ 0x38
 8006d28:	e005      	b.n	8006d36 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d2e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006d36:	7fbb      	ldrb	r3, [r7, #30]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d10b      	bne.n	8006d54 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f043 0206 	orr.w	r2, r3, #6
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f043 0220 	orr.w	r2, r3, #32
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d60:	b004      	add	sp, #16
 8006d62:	4770      	bx	lr

08006d64 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b087      	sub	sp, #28
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006d72:	79fb      	ldrb	r3, [r7, #7]
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d165      	bne.n	8006e44 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	4a41      	ldr	r2, [pc, #260]	@ (8006e80 <USB_SetTurnaroundTime+0x11c>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d906      	bls.n	8006d8e <USB_SetTurnaroundTime+0x2a>
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	4a40      	ldr	r2, [pc, #256]	@ (8006e84 <USB_SetTurnaroundTime+0x120>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d202      	bcs.n	8006d8e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006d88:	230f      	movs	r3, #15
 8006d8a:	617b      	str	r3, [r7, #20]
 8006d8c:	e062      	b.n	8006e54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	4a3c      	ldr	r2, [pc, #240]	@ (8006e84 <USB_SetTurnaroundTime+0x120>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d306      	bcc.n	8006da4 <USB_SetTurnaroundTime+0x40>
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	4a3b      	ldr	r2, [pc, #236]	@ (8006e88 <USB_SetTurnaroundTime+0x124>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d202      	bcs.n	8006da4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006d9e:	230e      	movs	r3, #14
 8006da0:	617b      	str	r3, [r7, #20]
 8006da2:	e057      	b.n	8006e54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	4a38      	ldr	r2, [pc, #224]	@ (8006e88 <USB_SetTurnaroundTime+0x124>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d306      	bcc.n	8006dba <USB_SetTurnaroundTime+0x56>
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	4a37      	ldr	r2, [pc, #220]	@ (8006e8c <USB_SetTurnaroundTime+0x128>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d202      	bcs.n	8006dba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006db4:	230d      	movs	r3, #13
 8006db6:	617b      	str	r3, [r7, #20]
 8006db8:	e04c      	b.n	8006e54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	4a33      	ldr	r2, [pc, #204]	@ (8006e8c <USB_SetTurnaroundTime+0x128>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d306      	bcc.n	8006dd0 <USB_SetTurnaroundTime+0x6c>
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	4a32      	ldr	r2, [pc, #200]	@ (8006e90 <USB_SetTurnaroundTime+0x12c>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d802      	bhi.n	8006dd0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006dca:	230c      	movs	r3, #12
 8006dcc:	617b      	str	r3, [r7, #20]
 8006dce:	e041      	b.n	8006e54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	4a2f      	ldr	r2, [pc, #188]	@ (8006e90 <USB_SetTurnaroundTime+0x12c>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d906      	bls.n	8006de6 <USB_SetTurnaroundTime+0x82>
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	4a2e      	ldr	r2, [pc, #184]	@ (8006e94 <USB_SetTurnaroundTime+0x130>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d802      	bhi.n	8006de6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006de0:	230b      	movs	r3, #11
 8006de2:	617b      	str	r3, [r7, #20]
 8006de4:	e036      	b.n	8006e54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	4a2a      	ldr	r2, [pc, #168]	@ (8006e94 <USB_SetTurnaroundTime+0x130>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d906      	bls.n	8006dfc <USB_SetTurnaroundTime+0x98>
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	4a29      	ldr	r2, [pc, #164]	@ (8006e98 <USB_SetTurnaroundTime+0x134>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d802      	bhi.n	8006dfc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006df6:	230a      	movs	r3, #10
 8006df8:	617b      	str	r3, [r7, #20]
 8006dfa:	e02b      	b.n	8006e54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	4a26      	ldr	r2, [pc, #152]	@ (8006e98 <USB_SetTurnaroundTime+0x134>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d906      	bls.n	8006e12 <USB_SetTurnaroundTime+0xae>
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	4a25      	ldr	r2, [pc, #148]	@ (8006e9c <USB_SetTurnaroundTime+0x138>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d202      	bcs.n	8006e12 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006e0c:	2309      	movs	r3, #9
 8006e0e:	617b      	str	r3, [r7, #20]
 8006e10:	e020      	b.n	8006e54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	4a21      	ldr	r2, [pc, #132]	@ (8006e9c <USB_SetTurnaroundTime+0x138>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d306      	bcc.n	8006e28 <USB_SetTurnaroundTime+0xc4>
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	4a20      	ldr	r2, [pc, #128]	@ (8006ea0 <USB_SetTurnaroundTime+0x13c>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d802      	bhi.n	8006e28 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006e22:	2308      	movs	r3, #8
 8006e24:	617b      	str	r3, [r7, #20]
 8006e26:	e015      	b.n	8006e54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	4a1d      	ldr	r2, [pc, #116]	@ (8006ea0 <USB_SetTurnaroundTime+0x13c>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d906      	bls.n	8006e3e <USB_SetTurnaroundTime+0xda>
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	4a1c      	ldr	r2, [pc, #112]	@ (8006ea4 <USB_SetTurnaroundTime+0x140>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d202      	bcs.n	8006e3e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006e38:	2307      	movs	r3, #7
 8006e3a:	617b      	str	r3, [r7, #20]
 8006e3c:	e00a      	b.n	8006e54 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006e3e:	2306      	movs	r3, #6
 8006e40:	617b      	str	r3, [r7, #20]
 8006e42:	e007      	b.n	8006e54 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006e44:	79fb      	ldrb	r3, [r7, #7]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d102      	bne.n	8006e50 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006e4a:	2309      	movs	r3, #9
 8006e4c:	617b      	str	r3, [r7, #20]
 8006e4e:	e001      	b.n	8006e54 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006e50:	2309      	movs	r3, #9
 8006e52:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	68da      	ldr	r2, [r3, #12]
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	029b      	lsls	r3, r3, #10
 8006e68:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006e6c:	431a      	orrs	r2, r3
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	371c      	adds	r7, #28
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr
 8006e80:	00d8acbf 	.word	0x00d8acbf
 8006e84:	00e4e1c0 	.word	0x00e4e1c0
 8006e88:	00f42400 	.word	0x00f42400
 8006e8c:	01067380 	.word	0x01067380
 8006e90:	011a499f 	.word	0x011a499f
 8006e94:	01312cff 	.word	0x01312cff
 8006e98:	014ca43f 	.word	0x014ca43f
 8006e9c:	016e3600 	.word	0x016e3600
 8006ea0:	01a6ab1f 	.word	0x01a6ab1f
 8006ea4:	01e84800 	.word	0x01e84800

08006ea8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f043 0201 	orr.w	r2, r3, #1
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b083      	sub	sp, #12
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	f023 0201 	bic.w	r2, r3, #1
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006f08:	78fb      	ldrb	r3, [r7, #3]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d115      	bne.n	8006f3a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006f1a:	200a      	movs	r0, #10
 8006f1c:	f7fa fe30 	bl	8001b80 <HAL_Delay>
      ms += 10U;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	330a      	adds	r3, #10
 8006f24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f001 f93f 	bl	80081aa <USB_GetMode>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d01e      	beq.n	8006f70 <USB_SetCurrentMode+0x84>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2bc7      	cmp	r3, #199	@ 0xc7
 8006f36:	d9f0      	bls.n	8006f1a <USB_SetCurrentMode+0x2e>
 8006f38:	e01a      	b.n	8006f70 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f3a:	78fb      	ldrb	r3, [r7, #3]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d115      	bne.n	8006f6c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006f4c:	200a      	movs	r0, #10
 8006f4e:	f7fa fe17 	bl	8001b80 <HAL_Delay>
      ms += 10U;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	330a      	adds	r3, #10
 8006f56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f001 f926 	bl	80081aa <USB_GetMode>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d005      	beq.n	8006f70 <USB_SetCurrentMode+0x84>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2bc7      	cmp	r3, #199	@ 0xc7
 8006f68:	d9f0      	bls.n	8006f4c <USB_SetCurrentMode+0x60>
 8006f6a:	e001      	b.n	8006f70 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e005      	b.n	8006f7c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2bc8      	cmp	r3, #200	@ 0xc8
 8006f74:	d101      	bne.n	8006f7a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e000      	b.n	8006f7c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f84:	b084      	sub	sp, #16
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b086      	sub	sp, #24
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
 8006f8e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006f92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	613b      	str	r3, [r7, #16]
 8006fa2:	e009      	b.n	8006fb8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	3340      	adds	r3, #64	@ 0x40
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	4413      	add	r3, r2
 8006fae:	2200      	movs	r2, #0
 8006fb0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	613b      	str	r3, [r7, #16]
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	2b0e      	cmp	r3, #14
 8006fbc:	d9f2      	bls.n	8006fa4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006fbe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d11c      	bne.n	8007000 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fd4:	f043 0302 	orr.w	r3, r3, #2
 8006fd8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fde:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fea:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	639a      	str	r2, [r3, #56]	@ 0x38
 8006ffe:	e00b      	b.n	8007018 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007004:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007010:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800701e:	461a      	mov	r2, r3
 8007020:	2300      	movs	r3, #0
 8007022:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007024:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007028:	2b01      	cmp	r3, #1
 800702a:	d10d      	bne.n	8007048 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800702c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007030:	2b00      	cmp	r3, #0
 8007032:	d104      	bne.n	800703e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007034:	2100      	movs	r1, #0
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f968 	bl	800730c <USB_SetDevSpeed>
 800703c:	e008      	b.n	8007050 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800703e:	2101      	movs	r1, #1
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 f963 	bl	800730c <USB_SetDevSpeed>
 8007046:	e003      	b.n	8007050 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007048:	2103      	movs	r1, #3
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f95e 	bl	800730c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007050:	2110      	movs	r1, #16
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 f8fa 	bl	800724c <USB_FlushTxFifo>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 f924 	bl	80072b0 <USB_FlushRxFifo>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d001      	beq.n	8007072 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007078:	461a      	mov	r2, r3
 800707a:	2300      	movs	r3, #0
 800707c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007084:	461a      	mov	r2, r3
 8007086:	2300      	movs	r3, #0
 8007088:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007090:	461a      	mov	r2, r3
 8007092:	2300      	movs	r3, #0
 8007094:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007096:	2300      	movs	r3, #0
 8007098:	613b      	str	r3, [r7, #16]
 800709a:	e043      	b.n	8007124 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	015a      	lsls	r2, r3, #5
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	4413      	add	r3, r2
 80070a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070b2:	d118      	bne.n	80070e6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10a      	bne.n	80070d0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	015a      	lsls	r2, r3, #5
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	4413      	add	r3, r2
 80070c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070c6:	461a      	mov	r2, r3
 80070c8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80070cc:	6013      	str	r3, [r2, #0]
 80070ce:	e013      	b.n	80070f8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	015a      	lsls	r2, r3, #5
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	4413      	add	r3, r2
 80070d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070dc:	461a      	mov	r2, r3
 80070de:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80070e2:	6013      	str	r3, [r2, #0]
 80070e4:	e008      	b.n	80070f8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	015a      	lsls	r2, r3, #5
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	4413      	add	r3, r2
 80070ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070f2:	461a      	mov	r2, r3
 80070f4:	2300      	movs	r3, #0
 80070f6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	015a      	lsls	r2, r3, #5
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	4413      	add	r3, r2
 8007100:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007104:	461a      	mov	r2, r3
 8007106:	2300      	movs	r3, #0
 8007108:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	015a      	lsls	r2, r3, #5
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	4413      	add	r3, r2
 8007112:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007116:	461a      	mov	r2, r3
 8007118:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800711c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	3301      	adds	r3, #1
 8007122:	613b      	str	r3, [r7, #16]
 8007124:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007128:	461a      	mov	r2, r3
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	4293      	cmp	r3, r2
 800712e:	d3b5      	bcc.n	800709c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007130:	2300      	movs	r3, #0
 8007132:	613b      	str	r3, [r7, #16]
 8007134:	e043      	b.n	80071be <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	015a      	lsls	r2, r3, #5
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	4413      	add	r3, r2
 800713e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007148:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800714c:	d118      	bne.n	8007180 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d10a      	bne.n	800716a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	015a      	lsls	r2, r3, #5
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	4413      	add	r3, r2
 800715c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007160:	461a      	mov	r2, r3
 8007162:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007166:	6013      	str	r3, [r2, #0]
 8007168:	e013      	b.n	8007192 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	015a      	lsls	r2, r3, #5
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	4413      	add	r3, r2
 8007172:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007176:	461a      	mov	r2, r3
 8007178:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800717c:	6013      	str	r3, [r2, #0]
 800717e:	e008      	b.n	8007192 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	015a      	lsls	r2, r3, #5
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	4413      	add	r3, r2
 8007188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800718c:	461a      	mov	r2, r3
 800718e:	2300      	movs	r3, #0
 8007190:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	015a      	lsls	r2, r3, #5
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	4413      	add	r3, r2
 800719a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800719e:	461a      	mov	r2, r3
 80071a0:	2300      	movs	r3, #0
 80071a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	015a      	lsls	r2, r3, #5
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4413      	add	r3, r2
 80071ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071b0:	461a      	mov	r2, r3
 80071b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80071b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	3301      	adds	r3, #1
 80071bc:	613b      	str	r3, [r7, #16]
 80071be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80071c2:	461a      	mov	r2, r3
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d3b5      	bcc.n	8007136 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071dc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80071ea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80071ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d105      	bne.n	8007200 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	f043 0210 	orr.w	r2, r3, #16
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	699a      	ldr	r2, [r3, #24]
 8007204:	4b10      	ldr	r3, [pc, #64]	@ (8007248 <USB_DevInit+0x2c4>)
 8007206:	4313      	orrs	r3, r2
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800720c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007210:	2b00      	cmp	r3, #0
 8007212:	d005      	beq.n	8007220 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	f043 0208 	orr.w	r2, r3, #8
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007220:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007224:	2b01      	cmp	r3, #1
 8007226:	d107      	bne.n	8007238 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007230:	f043 0304 	orr.w	r3, r3, #4
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007238:	7dfb      	ldrb	r3, [r7, #23]
}
 800723a:	4618      	mov	r0, r3
 800723c:	3718      	adds	r7, #24
 800723e:	46bd      	mov	sp, r7
 8007240:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007244:	b004      	add	sp, #16
 8007246:	4770      	bx	lr
 8007248:	803c3800 	.word	0x803c3800

0800724c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007256:	2300      	movs	r3, #0
 8007258:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	3301      	adds	r3, #1
 800725e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007266:	d901      	bls.n	800726c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007268:	2303      	movs	r3, #3
 800726a:	e01b      	b.n	80072a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	2b00      	cmp	r3, #0
 8007272:	daf2      	bge.n	800725a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007274:	2300      	movs	r3, #0
 8007276:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	019b      	lsls	r3, r3, #6
 800727c:	f043 0220 	orr.w	r2, r3, #32
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	3301      	adds	r3, #1
 8007288:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007290:	d901      	bls.n	8007296 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e006      	b.n	80072a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	f003 0320 	and.w	r3, r3, #32
 800729e:	2b20      	cmp	r3, #32
 80072a0:	d0f0      	beq.n	8007284 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3714      	adds	r7, #20
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	3301      	adds	r3, #1
 80072c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072c8:	d901      	bls.n	80072ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e018      	b.n	8007300 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	daf2      	bge.n	80072bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80072d6:	2300      	movs	r3, #0
 80072d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2210      	movs	r2, #16
 80072de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	3301      	adds	r3, #1
 80072e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072ec:	d901      	bls.n	80072f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e006      	b.n	8007300 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	f003 0310 	and.w	r3, r3, #16
 80072fa:	2b10      	cmp	r3, #16
 80072fc:	d0f0      	beq.n	80072e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3714      	adds	r7, #20
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	460b      	mov	r3, r1
 8007316:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	78fb      	ldrb	r3, [r7, #3]
 8007326:	68f9      	ldr	r1, [r7, #12]
 8007328:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800732c:	4313      	orrs	r3, r2
 800732e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3714      	adds	r7, #20
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr

0800733e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800733e:	b480      	push	{r7}
 8007340:	b087      	sub	sp, #28
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f003 0306 	and.w	r3, r3, #6
 8007356:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d102      	bne.n	8007364 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800735e:	2300      	movs	r3, #0
 8007360:	75fb      	strb	r3, [r7, #23]
 8007362:	e00a      	b.n	800737a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2b02      	cmp	r3, #2
 8007368:	d002      	beq.n	8007370 <USB_GetDevSpeed+0x32>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2b06      	cmp	r3, #6
 800736e:	d102      	bne.n	8007376 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007370:	2302      	movs	r3, #2
 8007372:	75fb      	strb	r3, [r7, #23]
 8007374:	e001      	b.n	800737a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007376:	230f      	movs	r3, #15
 8007378:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800737a:	7dfb      	ldrb	r3, [r7, #23]
}
 800737c:	4618      	mov	r0, r3
 800737e:	371c      	adds	r7, #28
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	785b      	ldrb	r3, [r3, #1]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d13a      	bne.n	800741a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073aa:	69da      	ldr	r2, [r3, #28]
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	f003 030f 	and.w	r3, r3, #15
 80073b4:	2101      	movs	r1, #1
 80073b6:	fa01 f303 	lsl.w	r3, r1, r3
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	68f9      	ldr	r1, [r7, #12]
 80073be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073c2:	4313      	orrs	r3, r2
 80073c4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	015a      	lsls	r2, r3, #5
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	4413      	add	r3, r2
 80073ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d155      	bne.n	8007488 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	015a      	lsls	r2, r3, #5
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	791b      	ldrb	r3, [r3, #4]
 80073f6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80073f8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	059b      	lsls	r3, r3, #22
 80073fe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007400:	4313      	orrs	r3, r2
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	0151      	lsls	r1, r2, #5
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	440a      	add	r2, r1
 800740a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800740e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007412:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007416:	6013      	str	r3, [r2, #0]
 8007418:	e036      	b.n	8007488 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007420:	69da      	ldr	r2, [r3, #28]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	f003 030f 	and.w	r3, r3, #15
 800742a:	2101      	movs	r1, #1
 800742c:	fa01 f303 	lsl.w	r3, r1, r3
 8007430:	041b      	lsls	r3, r3, #16
 8007432:	68f9      	ldr	r1, [r7, #12]
 8007434:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007438:	4313      	orrs	r3, r2
 800743a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	015a      	lsls	r2, r3, #5
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	4413      	add	r3, r2
 8007444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800744e:	2b00      	cmp	r3, #0
 8007450:	d11a      	bne.n	8007488 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	015a      	lsls	r2, r3, #5
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	4413      	add	r3, r2
 800745a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	791b      	ldrb	r3, [r3, #4]
 800746c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800746e:	430b      	orrs	r3, r1
 8007470:	4313      	orrs	r3, r2
 8007472:	68ba      	ldr	r2, [r7, #8]
 8007474:	0151      	lsls	r1, r2, #5
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	440a      	add	r2, r1
 800747a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800747e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007482:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007486:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3714      	adds	r7, #20
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
	...

08007498 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	785b      	ldrb	r3, [r3, #1]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d161      	bne.n	8007578 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	015a      	lsls	r2, r3, #5
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	4413      	add	r3, r2
 80074bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074ca:	d11f      	bne.n	800750c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	015a      	lsls	r2, r3, #5
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	0151      	lsls	r1, r2, #5
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	440a      	add	r2, r1
 80074e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80074ea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	015a      	lsls	r2, r3, #5
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68ba      	ldr	r2, [r7, #8]
 80074fc:	0151      	lsls	r1, r2, #5
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	440a      	add	r2, r1
 8007502:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007506:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800750a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007512:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	f003 030f 	and.w	r3, r3, #15
 800751c:	2101      	movs	r1, #1
 800751e:	fa01 f303 	lsl.w	r3, r1, r3
 8007522:	b29b      	uxth	r3, r3
 8007524:	43db      	mvns	r3, r3
 8007526:	68f9      	ldr	r1, [r7, #12]
 8007528:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800752c:	4013      	ands	r3, r2
 800752e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007536:	69da      	ldr	r2, [r3, #28]
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	f003 030f 	and.w	r3, r3, #15
 8007540:	2101      	movs	r1, #1
 8007542:	fa01 f303 	lsl.w	r3, r1, r3
 8007546:	b29b      	uxth	r3, r3
 8007548:	43db      	mvns	r3, r3
 800754a:	68f9      	ldr	r1, [r7, #12]
 800754c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007550:	4013      	ands	r3, r2
 8007552:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	015a      	lsls	r2, r3, #5
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	4413      	add	r3, r2
 800755c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	0159      	lsls	r1, r3, #5
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	440b      	add	r3, r1
 800756a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800756e:	4619      	mov	r1, r3
 8007570:	4b35      	ldr	r3, [pc, #212]	@ (8007648 <USB_DeactivateEndpoint+0x1b0>)
 8007572:	4013      	ands	r3, r2
 8007574:	600b      	str	r3, [r1, #0]
 8007576:	e060      	b.n	800763a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	015a      	lsls	r2, r3, #5
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	4413      	add	r3, r2
 8007580:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800758a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800758e:	d11f      	bne.n	80075d0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	015a      	lsls	r2, r3, #5
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	4413      	add	r3, r2
 8007598:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68ba      	ldr	r2, [r7, #8]
 80075a0:	0151      	lsls	r1, r2, #5
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	440a      	add	r2, r1
 80075a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075aa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80075ae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	015a      	lsls	r2, r3, #5
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	4413      	add	r3, r2
 80075b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68ba      	ldr	r2, [r7, #8]
 80075c0:	0151      	lsls	r1, r2, #5
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	440a      	add	r2, r1
 80075c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80075ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	f003 030f 	and.w	r3, r3, #15
 80075e0:	2101      	movs	r1, #1
 80075e2:	fa01 f303 	lsl.w	r3, r1, r3
 80075e6:	041b      	lsls	r3, r3, #16
 80075e8:	43db      	mvns	r3, r3
 80075ea:	68f9      	ldr	r1, [r7, #12]
 80075ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80075f0:	4013      	ands	r3, r2
 80075f2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075fa:	69da      	ldr	r2, [r3, #28]
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	f003 030f 	and.w	r3, r3, #15
 8007604:	2101      	movs	r1, #1
 8007606:	fa01 f303 	lsl.w	r3, r1, r3
 800760a:	041b      	lsls	r3, r3, #16
 800760c:	43db      	mvns	r3, r3
 800760e:	68f9      	ldr	r1, [r7, #12]
 8007610:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007614:	4013      	ands	r3, r2
 8007616:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	4413      	add	r3, r2
 8007620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	0159      	lsls	r1, r3, #5
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	440b      	add	r3, r1
 800762e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007632:	4619      	mov	r1, r3
 8007634:	4b05      	ldr	r3, [pc, #20]	@ (800764c <USB_DeactivateEndpoint+0x1b4>)
 8007636:	4013      	ands	r3, r2
 8007638:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3714      	adds	r7, #20
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr
 8007648:	ec337800 	.word	0xec337800
 800764c:	eff37800 	.word	0xeff37800

08007650 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b08a      	sub	sp, #40	@ 0x28
 8007654:	af02      	add	r7, sp, #8
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	4613      	mov	r3, r2
 800765c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	785b      	ldrb	r3, [r3, #1]
 800766c:	2b01      	cmp	r3, #1
 800766e:	f040 817f 	bne.w	8007970 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d132      	bne.n	80076e0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	015a      	lsls	r2, r3, #5
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	4413      	add	r3, r2
 8007682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	69ba      	ldr	r2, [r7, #24]
 800768a:	0151      	lsls	r1, r2, #5
 800768c:	69fa      	ldr	r2, [r7, #28]
 800768e:	440a      	add	r2, r1
 8007690:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007694:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007698:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800769c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	015a      	lsls	r2, r3, #5
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	4413      	add	r3, r2
 80076a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	69ba      	ldr	r2, [r7, #24]
 80076ae:	0151      	lsls	r1, r2, #5
 80076b0:	69fa      	ldr	r2, [r7, #28]
 80076b2:	440a      	add	r2, r1
 80076b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80076bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	015a      	lsls	r2, r3, #5
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	4413      	add	r3, r2
 80076c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	69ba      	ldr	r2, [r7, #24]
 80076ce:	0151      	lsls	r1, r2, #5
 80076d0:	69fa      	ldr	r2, [r7, #28]
 80076d2:	440a      	add	r2, r1
 80076d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076d8:	0cdb      	lsrs	r3, r3, #19
 80076da:	04db      	lsls	r3, r3, #19
 80076dc:	6113      	str	r3, [r2, #16]
 80076de:	e097      	b.n	8007810 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	015a      	lsls	r2, r3, #5
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	4413      	add	r3, r2
 80076e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	69ba      	ldr	r2, [r7, #24]
 80076f0:	0151      	lsls	r1, r2, #5
 80076f2:	69fa      	ldr	r2, [r7, #28]
 80076f4:	440a      	add	r2, r1
 80076f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076fa:	0cdb      	lsrs	r3, r3, #19
 80076fc:	04db      	lsls	r3, r3, #19
 80076fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	015a      	lsls	r2, r3, #5
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	4413      	add	r3, r2
 8007708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	69ba      	ldr	r2, [r7, #24]
 8007710:	0151      	lsls	r1, r2, #5
 8007712:	69fa      	ldr	r2, [r7, #28]
 8007714:	440a      	add	r2, r1
 8007716:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800771a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800771e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007722:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d11a      	bne.n	8007760 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	691a      	ldr	r2, [r3, #16]
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	429a      	cmp	r2, r3
 8007734:	d903      	bls.n	800773e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	689a      	ldr	r2, [r3, #8]
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	015a      	lsls	r2, r3, #5
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	4413      	add	r3, r2
 8007746:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	69ba      	ldr	r2, [r7, #24]
 800774e:	0151      	lsls	r1, r2, #5
 8007750:	69fa      	ldr	r2, [r7, #28]
 8007752:	440a      	add	r2, r1
 8007754:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007758:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800775c:	6113      	str	r3, [r2, #16]
 800775e:	e044      	b.n	80077ea <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	691a      	ldr	r2, [r3, #16]
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	4413      	add	r3, r2
 800776a:	1e5a      	subs	r2, r3, #1
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	fbb2 f3f3 	udiv	r3, r2, r3
 8007774:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	015a      	lsls	r2, r3, #5
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	4413      	add	r3, r2
 800777e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007782:	691a      	ldr	r2, [r3, #16]
 8007784:	8afb      	ldrh	r3, [r7, #22]
 8007786:	04d9      	lsls	r1, r3, #19
 8007788:	4ba4      	ldr	r3, [pc, #656]	@ (8007a1c <USB_EPStartXfer+0x3cc>)
 800778a:	400b      	ands	r3, r1
 800778c:	69b9      	ldr	r1, [r7, #24]
 800778e:	0148      	lsls	r0, r1, #5
 8007790:	69f9      	ldr	r1, [r7, #28]
 8007792:	4401      	add	r1, r0
 8007794:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007798:	4313      	orrs	r3, r2
 800779a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	791b      	ldrb	r3, [r3, #4]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d122      	bne.n	80077ea <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	015a      	lsls	r2, r3, #5
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	4413      	add	r3, r2
 80077ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	69ba      	ldr	r2, [r7, #24]
 80077b4:	0151      	lsls	r1, r2, #5
 80077b6:	69fa      	ldr	r2, [r7, #28]
 80077b8:	440a      	add	r2, r1
 80077ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077be:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80077c2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	015a      	lsls	r2, r3, #5
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	4413      	add	r3, r2
 80077cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077d0:	691a      	ldr	r2, [r3, #16]
 80077d2:	8afb      	ldrh	r3, [r7, #22]
 80077d4:	075b      	lsls	r3, r3, #29
 80077d6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80077da:	69b9      	ldr	r1, [r7, #24]
 80077dc:	0148      	lsls	r0, r1, #5
 80077de:	69f9      	ldr	r1, [r7, #28]
 80077e0:	4401      	add	r1, r0
 80077e2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80077e6:	4313      	orrs	r3, r2
 80077e8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	015a      	lsls	r2, r3, #5
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	4413      	add	r3, r2
 80077f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077f6:	691a      	ldr	r2, [r3, #16]
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007800:	69b9      	ldr	r1, [r7, #24]
 8007802:	0148      	lsls	r0, r1, #5
 8007804:	69f9      	ldr	r1, [r7, #28]
 8007806:	4401      	add	r1, r0
 8007808:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800780c:	4313      	orrs	r3, r2
 800780e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007810:	79fb      	ldrb	r3, [r7, #7]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d14b      	bne.n	80078ae <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d009      	beq.n	8007832 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	015a      	lsls	r2, r3, #5
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	4413      	add	r3, r2
 8007826:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800782a:	461a      	mov	r2, r3
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	69db      	ldr	r3, [r3, #28]
 8007830:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	791b      	ldrb	r3, [r3, #4]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d128      	bne.n	800788c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007846:	2b00      	cmp	r3, #0
 8007848:	d110      	bne.n	800786c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	015a      	lsls	r2, r3, #5
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	4413      	add	r3, r2
 8007852:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	69ba      	ldr	r2, [r7, #24]
 800785a:	0151      	lsls	r1, r2, #5
 800785c:	69fa      	ldr	r2, [r7, #28]
 800785e:	440a      	add	r2, r1
 8007860:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007864:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007868:	6013      	str	r3, [r2, #0]
 800786a:	e00f      	b.n	800788c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	015a      	lsls	r2, r3, #5
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	4413      	add	r3, r2
 8007874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	69ba      	ldr	r2, [r7, #24]
 800787c:	0151      	lsls	r1, r2, #5
 800787e:	69fa      	ldr	r2, [r7, #28]
 8007880:	440a      	add	r2, r1
 8007882:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007886:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800788a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	015a      	lsls	r2, r3, #5
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	4413      	add	r3, r2
 8007894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	69ba      	ldr	r2, [r7, #24]
 800789c:	0151      	lsls	r1, r2, #5
 800789e:	69fa      	ldr	r2, [r7, #28]
 80078a0:	440a      	add	r2, r1
 80078a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078a6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80078aa:	6013      	str	r3, [r2, #0]
 80078ac:	e166      	b.n	8007b7c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	015a      	lsls	r2, r3, #5
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	4413      	add	r3, r2
 80078b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	69ba      	ldr	r2, [r7, #24]
 80078be:	0151      	lsls	r1, r2, #5
 80078c0:	69fa      	ldr	r2, [r7, #28]
 80078c2:	440a      	add	r2, r1
 80078c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078c8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80078cc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	791b      	ldrb	r3, [r3, #4]
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d015      	beq.n	8007902 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f000 814e 	beq.w	8007b7c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	f003 030f 	and.w	r3, r3, #15
 80078f0:	2101      	movs	r1, #1
 80078f2:	fa01 f303 	lsl.w	r3, r1, r3
 80078f6:	69f9      	ldr	r1, [r7, #28]
 80078f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078fc:	4313      	orrs	r3, r2
 80078fe:	634b      	str	r3, [r1, #52]	@ 0x34
 8007900:	e13c      	b.n	8007b7c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800790e:	2b00      	cmp	r3, #0
 8007910:	d110      	bne.n	8007934 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	015a      	lsls	r2, r3, #5
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	4413      	add	r3, r2
 800791a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	69ba      	ldr	r2, [r7, #24]
 8007922:	0151      	lsls	r1, r2, #5
 8007924:	69fa      	ldr	r2, [r7, #28]
 8007926:	440a      	add	r2, r1
 8007928:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800792c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007930:	6013      	str	r3, [r2, #0]
 8007932:	e00f      	b.n	8007954 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	015a      	lsls	r2, r3, #5
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	4413      	add	r3, r2
 800793c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	69ba      	ldr	r2, [r7, #24]
 8007944:	0151      	lsls	r1, r2, #5
 8007946:	69fa      	ldr	r2, [r7, #28]
 8007948:	440a      	add	r2, r1
 800794a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800794e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007952:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	68d9      	ldr	r1, [r3, #12]
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	781a      	ldrb	r2, [r3, #0]
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	b298      	uxth	r0, r3
 8007962:	79fb      	ldrb	r3, [r7, #7]
 8007964:	9300      	str	r3, [sp, #0]
 8007966:	4603      	mov	r3, r0
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f000 f9b9 	bl	8007ce0 <USB_WritePacket>
 800796e:	e105      	b.n	8007b7c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	015a      	lsls	r2, r3, #5
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	4413      	add	r3, r2
 8007978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	69ba      	ldr	r2, [r7, #24]
 8007980:	0151      	lsls	r1, r2, #5
 8007982:	69fa      	ldr	r2, [r7, #28]
 8007984:	440a      	add	r2, r1
 8007986:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800798a:	0cdb      	lsrs	r3, r3, #19
 800798c:	04db      	lsls	r3, r3, #19
 800798e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	015a      	lsls	r2, r3, #5
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	4413      	add	r3, r2
 8007998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	69ba      	ldr	r2, [r7, #24]
 80079a0:	0151      	lsls	r1, r2, #5
 80079a2:	69fa      	ldr	r2, [r7, #28]
 80079a4:	440a      	add	r2, r1
 80079a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079aa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80079ae:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80079b2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d132      	bne.n	8007a20 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d003      	beq.n	80079ca <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	689a      	ldr	r2, [r3, #8]
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	689a      	ldr	r2, [r3, #8]
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	015a      	lsls	r2, r3, #5
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	4413      	add	r3, r2
 80079da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079de:	691a      	ldr	r2, [r3, #16]
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	6a1b      	ldr	r3, [r3, #32]
 80079e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079e8:	69b9      	ldr	r1, [r7, #24]
 80079ea:	0148      	lsls	r0, r1, #5
 80079ec:	69f9      	ldr	r1, [r7, #28]
 80079ee:	4401      	add	r1, r0
 80079f0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80079f4:	4313      	orrs	r3, r2
 80079f6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	015a      	lsls	r2, r3, #5
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	4413      	add	r3, r2
 8007a00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	69ba      	ldr	r2, [r7, #24]
 8007a08:	0151      	lsls	r1, r2, #5
 8007a0a:	69fa      	ldr	r2, [r7, #28]
 8007a0c:	440a      	add	r2, r1
 8007a0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a12:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a16:	6113      	str	r3, [r2, #16]
 8007a18:	e062      	b.n	8007ae0 <USB_EPStartXfer+0x490>
 8007a1a:	bf00      	nop
 8007a1c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d123      	bne.n	8007a70 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	015a      	lsls	r2, r3, #5
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	4413      	add	r3, r2
 8007a30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a34:	691a      	ldr	r2, [r3, #16]
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a3e:	69b9      	ldr	r1, [r7, #24]
 8007a40:	0148      	lsls	r0, r1, #5
 8007a42:	69f9      	ldr	r1, [r7, #28]
 8007a44:	4401      	add	r1, r0
 8007a46:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	015a      	lsls	r2, r3, #5
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	4413      	add	r3, r2
 8007a56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	69ba      	ldr	r2, [r7, #24]
 8007a5e:	0151      	lsls	r1, r2, #5
 8007a60:	69fa      	ldr	r2, [r7, #28]
 8007a62:	440a      	add	r2, r1
 8007a64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a68:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a6c:	6113      	str	r3, [r2, #16]
 8007a6e:	e037      	b.n	8007ae0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	691a      	ldr	r2, [r3, #16]
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	4413      	add	r3, r2
 8007a7a:	1e5a      	subs	r2, r3, #1
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a84:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	8afa      	ldrh	r2, [r7, #22]
 8007a8c:	fb03 f202 	mul.w	r2, r3, r2
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	015a      	lsls	r2, r3, #5
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aa0:	691a      	ldr	r2, [r3, #16]
 8007aa2:	8afb      	ldrh	r3, [r7, #22]
 8007aa4:	04d9      	lsls	r1, r3, #19
 8007aa6:	4b38      	ldr	r3, [pc, #224]	@ (8007b88 <USB_EPStartXfer+0x538>)
 8007aa8:	400b      	ands	r3, r1
 8007aaa:	69b9      	ldr	r1, [r7, #24]
 8007aac:	0148      	lsls	r0, r1, #5
 8007aae:	69f9      	ldr	r1, [r7, #28]
 8007ab0:	4401      	add	r1, r0
 8007ab2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	015a      	lsls	r2, r3, #5
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ac6:	691a      	ldr	r2, [r3, #16]
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	6a1b      	ldr	r3, [r3, #32]
 8007acc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ad0:	69b9      	ldr	r1, [r7, #24]
 8007ad2:	0148      	lsls	r0, r1, #5
 8007ad4:	69f9      	ldr	r1, [r7, #28]
 8007ad6:	4401      	add	r1, r0
 8007ad8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007adc:	4313      	orrs	r3, r2
 8007ade:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007ae0:	79fb      	ldrb	r3, [r7, #7]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d10d      	bne.n	8007b02 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d009      	beq.n	8007b02 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	68d9      	ldr	r1, [r3, #12]
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	015a      	lsls	r2, r3, #5
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	4413      	add	r3, r2
 8007afa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007afe:	460a      	mov	r2, r1
 8007b00:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	791b      	ldrb	r3, [r3, #4]
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d128      	bne.n	8007b5c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d110      	bne.n	8007b3c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	015a      	lsls	r2, r3, #5
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	4413      	add	r3, r2
 8007b22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	69ba      	ldr	r2, [r7, #24]
 8007b2a:	0151      	lsls	r1, r2, #5
 8007b2c:	69fa      	ldr	r2, [r7, #28]
 8007b2e:	440a      	add	r2, r1
 8007b30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b34:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007b38:	6013      	str	r3, [r2, #0]
 8007b3a:	e00f      	b.n	8007b5c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	015a      	lsls	r2, r3, #5
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	4413      	add	r3, r2
 8007b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	69ba      	ldr	r2, [r7, #24]
 8007b4c:	0151      	lsls	r1, r2, #5
 8007b4e:	69fa      	ldr	r2, [r7, #28]
 8007b50:	440a      	add	r2, r1
 8007b52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b5a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	015a      	lsls	r2, r3, #5
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	4413      	add	r3, r2
 8007b64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	69ba      	ldr	r2, [r7, #24]
 8007b6c:	0151      	lsls	r1, r2, #5
 8007b6e:	69fa      	ldr	r2, [r7, #28]
 8007b70:	440a      	add	r2, r1
 8007b72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b76:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007b7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3720      	adds	r7, #32
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	1ff80000 	.word	0x1ff80000

08007b8c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b087      	sub	sp, #28
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b96:	2300      	movs	r3, #0
 8007b98:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	785b      	ldrb	r3, [r3, #1]
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d14a      	bne.n	8007c40 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	015a      	lsls	r2, r3, #5
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007bbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007bc2:	f040 8086 	bne.w	8007cd2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	015a      	lsls	r2, r3, #5
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	4413      	add	r3, r2
 8007bd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	7812      	ldrb	r2, [r2, #0]
 8007bda:	0151      	lsls	r1, r2, #5
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	440a      	add	r2, r1
 8007be0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007be4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007be8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	683a      	ldr	r2, [r7, #0]
 8007bfc:	7812      	ldrb	r2, [r2, #0]
 8007bfe:	0151      	lsls	r1, r2, #5
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	440a      	add	r2, r1
 8007c04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c08:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c0c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	3301      	adds	r3, #1
 8007c12:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d902      	bls.n	8007c24 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	75fb      	strb	r3, [r7, #23]
          break;
 8007c22:	e056      	b.n	8007cd2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	015a      	lsls	r2, r3, #5
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c3c:	d0e7      	beq.n	8007c0e <USB_EPStopXfer+0x82>
 8007c3e:	e048      	b.n	8007cd2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	015a      	lsls	r2, r3, #5
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	4413      	add	r3, r2
 8007c4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c58:	d13b      	bne.n	8007cd2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	015a      	lsls	r2, r3, #5
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	4413      	add	r3, r2
 8007c64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	683a      	ldr	r2, [r7, #0]
 8007c6c:	7812      	ldrb	r2, [r2, #0]
 8007c6e:	0151      	lsls	r1, r2, #5
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	440a      	add	r2, r1
 8007c74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c78:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007c7c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	015a      	lsls	r2, r3, #5
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	4413      	add	r3, r2
 8007c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	683a      	ldr	r2, [r7, #0]
 8007c90:	7812      	ldrb	r2, [r2, #0]
 8007c92:	0151      	lsls	r1, r2, #5
 8007c94:	693a      	ldr	r2, [r7, #16]
 8007c96:	440a      	add	r2, r1
 8007c98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ca0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d902      	bls.n	8007cb8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	75fb      	strb	r3, [r7, #23]
          break;
 8007cb6:	e00c      	b.n	8007cd2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	015a      	lsls	r2, r3, #5
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ccc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007cd0:	d0e7      	beq.n	8007ca2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	371c      	adds	r7, #28
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b089      	sub	sp, #36	@ 0x24
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	4611      	mov	r1, r2
 8007cec:	461a      	mov	r2, r3
 8007cee:	460b      	mov	r3, r1
 8007cf0:	71fb      	strb	r3, [r7, #7]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007cfe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d123      	bne.n	8007d4e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007d06:	88bb      	ldrh	r3, [r7, #4]
 8007d08:	3303      	adds	r3, #3
 8007d0a:	089b      	lsrs	r3, r3, #2
 8007d0c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007d0e:	2300      	movs	r3, #0
 8007d10:	61bb      	str	r3, [r7, #24]
 8007d12:	e018      	b.n	8007d46 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007d14:	79fb      	ldrb	r3, [r7, #7]
 8007d16:	031a      	lsls	r2, r3, #12
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d20:	461a      	mov	r2, r3
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	3301      	adds	r3, #1
 8007d32:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	3301      	adds	r3, #1
 8007d38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	3301      	adds	r3, #1
 8007d44:	61bb      	str	r3, [r7, #24]
 8007d46:	69ba      	ldr	r2, [r7, #24]
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d3e2      	bcc.n	8007d14 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3724      	adds	r7, #36	@ 0x24
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b08b      	sub	sp, #44	@ 0x2c
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	4613      	mov	r3, r2
 8007d68:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007d72:	88fb      	ldrh	r3, [r7, #6]
 8007d74:	089b      	lsrs	r3, r3, #2
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007d7a:	88fb      	ldrh	r3, [r7, #6]
 8007d7c:	f003 0303 	and.w	r3, r3, #3
 8007d80:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007d82:	2300      	movs	r3, #0
 8007d84:	623b      	str	r3, [r7, #32]
 8007d86:	e014      	b.n	8007db2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007d88:	69bb      	ldr	r3, [r7, #24]
 8007d8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d92:	601a      	str	r2, [r3, #0]
    pDest++;
 8007d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d96:	3301      	adds	r3, #1
 8007d98:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da2:	3301      	adds	r3, #1
 8007da4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da8:	3301      	adds	r3, #1
 8007daa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007dac:	6a3b      	ldr	r3, [r7, #32]
 8007dae:	3301      	adds	r3, #1
 8007db0:	623b      	str	r3, [r7, #32]
 8007db2:	6a3a      	ldr	r2, [r7, #32]
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d3e6      	bcc.n	8007d88 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007dba:	8bfb      	ldrh	r3, [r7, #30]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d01e      	beq.n	8007dfe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007dca:	461a      	mov	r2, r3
 8007dcc:	f107 0310 	add.w	r3, r7, #16
 8007dd0:	6812      	ldr	r2, [r2, #0]
 8007dd2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007dd4:	693a      	ldr	r2, [r7, #16]
 8007dd6:	6a3b      	ldr	r3, [r7, #32]
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	00db      	lsls	r3, r3, #3
 8007ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8007de0:	b2da      	uxtb	r2, r3
 8007de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de4:	701a      	strb	r2, [r3, #0]
      i++;
 8007de6:	6a3b      	ldr	r3, [r7, #32]
 8007de8:	3301      	adds	r3, #1
 8007dea:	623b      	str	r3, [r7, #32]
      pDest++;
 8007dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dee:	3301      	adds	r3, #1
 8007df0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007df2:	8bfb      	ldrh	r3, [r7, #30]
 8007df4:	3b01      	subs	r3, #1
 8007df6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007df8:	8bfb      	ldrh	r3, [r7, #30]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1ea      	bne.n	8007dd4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	372c      	adds	r7, #44	@ 0x2c
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	785b      	ldrb	r3, [r3, #1]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d12c      	bne.n	8007e82 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	015a      	lsls	r2, r3, #5
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	4413      	add	r3, r2
 8007e30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	db12      	blt.n	8007e60 <USB_EPSetStall+0x54>
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00f      	beq.n	8007e60 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	015a      	lsls	r2, r3, #5
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	4413      	add	r3, r2
 8007e48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68ba      	ldr	r2, [r7, #8]
 8007e50:	0151      	lsls	r1, r2, #5
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	440a      	add	r2, r1
 8007e56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e5a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007e5e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	015a      	lsls	r2, r3, #5
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	4413      	add	r3, r2
 8007e68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	0151      	lsls	r1, r2, #5
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	440a      	add	r2, r1
 8007e76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e7a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007e7e:	6013      	str	r3, [r2, #0]
 8007e80:	e02b      	b.n	8007eda <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	015a      	lsls	r2, r3, #5
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	4413      	add	r3, r2
 8007e8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	db12      	blt.n	8007eba <USB_EPSetStall+0xae>
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00f      	beq.n	8007eba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	015a      	lsls	r2, r3, #5
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	0151      	lsls	r1, r2, #5
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	440a      	add	r2, r1
 8007eb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007eb4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007eb8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	015a      	lsls	r2, r3, #5
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	0151      	lsls	r1, r2, #5
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	440a      	add	r2, r1
 8007ed0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ed4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007ed8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3714      	adds	r7, #20
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	785b      	ldrb	r3, [r3, #1]
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d128      	bne.n	8007f56 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	015a      	lsls	r2, r3, #5
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	0151      	lsls	r1, r2, #5
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	440a      	add	r2, r1
 8007f1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f1e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007f22:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	791b      	ldrb	r3, [r3, #4]
 8007f28:	2b03      	cmp	r3, #3
 8007f2a:	d003      	beq.n	8007f34 <USB_EPClearStall+0x4c>
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	791b      	ldrb	r3, [r3, #4]
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d138      	bne.n	8007fa6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	015a      	lsls	r2, r3, #5
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	0151      	lsls	r1, r2, #5
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	440a      	add	r2, r1
 8007f4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f52:	6013      	str	r3, [r2, #0]
 8007f54:	e027      	b.n	8007fa6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	015a      	lsls	r2, r3, #5
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	68ba      	ldr	r2, [r7, #8]
 8007f66:	0151      	lsls	r1, r2, #5
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	440a      	add	r2, r1
 8007f6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f70:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007f74:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	791b      	ldrb	r3, [r3, #4]
 8007f7a:	2b03      	cmp	r3, #3
 8007f7c:	d003      	beq.n	8007f86 <USB_EPClearStall+0x9e>
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	791b      	ldrb	r3, [r3, #4]
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d10f      	bne.n	8007fa6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	015a      	lsls	r2, r3, #5
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	68ba      	ldr	r2, [r7, #8]
 8007f96:	0151      	lsls	r1, r2, #5
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	440a      	add	r2, r1
 8007f9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fa4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3714      	adds	r7, #20
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	68fa      	ldr	r2, [r7, #12]
 8007fce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fd2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007fd6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	78fb      	ldrb	r3, [r7, #3]
 8007fe2:	011b      	lsls	r3, r3, #4
 8007fe4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007fe8:	68f9      	ldr	r1, [r7, #12]
 8007fea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3714      	adds	r7, #20
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008000:	b480      	push	{r7}
 8008002:	b085      	sub	sp, #20
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800801a:	f023 0303 	bic.w	r3, r3, #3
 800801e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800802e:	f023 0302 	bic.w	r3, r3, #2
 8008032:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3714      	adds	r7, #20
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr

08008042 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008042:	b480      	push	{r7}
 8008044:	b085      	sub	sp, #20
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800805c:	f023 0303 	bic.w	r3, r3, #3
 8008060:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008070:	f043 0302 	orr.w	r3, r3, #2
 8008074:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	3714      	adds	r7, #20
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	695b      	ldr	r3, [r3, #20]
 8008090:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	4013      	ands	r3, r2
 800809a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800809c:	68fb      	ldr	r3, [r7, #12]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3714      	adds	r7, #20
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr

080080aa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80080aa:	b480      	push	{r7}
 80080ac:	b085      	sub	sp, #20
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080c6:	69db      	ldr	r3, [r3, #28]
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	4013      	ands	r3, r2
 80080cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	0c1b      	lsrs	r3, r3, #16
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3714      	adds	r7, #20
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr

080080de <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80080de:	b480      	push	{r7}
 80080e0:	b085      	sub	sp, #20
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080f0:	699b      	ldr	r3, [r3, #24]
 80080f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080fa:	69db      	ldr	r3, [r3, #28]
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	4013      	ands	r3, r2
 8008100:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	b29b      	uxth	r3, r3
}
 8008106:	4618      	mov	r0, r3
 8008108:	3714      	adds	r7, #20
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008112:	b480      	push	{r7}
 8008114:	b085      	sub	sp, #20
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
 800811a:	460b      	mov	r3, r1
 800811c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008122:	78fb      	ldrb	r3, [r7, #3]
 8008124:	015a      	lsls	r2, r3, #5
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	4413      	add	r3, r2
 800812a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008138:	695b      	ldr	r3, [r3, #20]
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	4013      	ands	r3, r2
 800813e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008140:	68bb      	ldr	r3, [r7, #8]
}
 8008142:	4618      	mov	r0, r3
 8008144:	3714      	adds	r7, #20
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800814e:	b480      	push	{r7}
 8008150:	b087      	sub	sp, #28
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	460b      	mov	r3, r1
 8008158:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800816e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008170:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008172:	78fb      	ldrb	r3, [r7, #3]
 8008174:	f003 030f 	and.w	r3, r3, #15
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	fa22 f303 	lsr.w	r3, r2, r3
 800817e:	01db      	lsls	r3, r3, #7
 8008180:	b2db      	uxtb	r3, r3
 8008182:	693a      	ldr	r2, [r7, #16]
 8008184:	4313      	orrs	r3, r2
 8008186:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008188:	78fb      	ldrb	r3, [r7, #3]
 800818a:	015a      	lsls	r2, r3, #5
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	4413      	add	r3, r2
 8008190:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	693a      	ldr	r2, [r7, #16]
 8008198:	4013      	ands	r3, r2
 800819a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800819c:	68bb      	ldr	r3, [r7, #8]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	371c      	adds	r7, #28
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b083      	sub	sp, #12
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	695b      	ldr	r3, [r3, #20]
 80081b6:	f003 0301 	and.w	r3, r3, #1
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	370c      	adds	r7, #12
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80081c6:	b480      	push	{r7}
 80081c8:	b085      	sub	sp, #20
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081e0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80081e4:	f023 0307 	bic.w	r3, r3, #7
 80081e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800820c:	b480      	push	{r7}
 800820e:	b087      	sub	sp, #28
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	460b      	mov	r3, r1
 8008216:	607a      	str	r2, [r7, #4]
 8008218:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	333c      	adds	r3, #60	@ 0x3c
 8008222:	3304      	adds	r3, #4
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	4a26      	ldr	r2, [pc, #152]	@ (80082c4 <USB_EP0_OutStart+0xb8>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d90a      	bls.n	8008246 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800823c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008240:	d101      	bne.n	8008246 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008242:	2300      	movs	r3, #0
 8008244:	e037      	b.n	80082b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800824c:	461a      	mov	r2, r3
 800824e:	2300      	movs	r3, #0
 8008250:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	697a      	ldr	r2, [r7, #20]
 800825c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008260:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008264:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800826c:	691b      	ldr	r3, [r3, #16]
 800826e:	697a      	ldr	r2, [r7, #20]
 8008270:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008274:	f043 0318 	orr.w	r3, r3, #24
 8008278:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	697a      	ldr	r2, [r7, #20]
 8008284:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008288:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800828c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800828e:	7afb      	ldrb	r3, [r7, #11]
 8008290:	2b01      	cmp	r3, #1
 8008292:	d10f      	bne.n	80082b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800829a:	461a      	mov	r2, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	697a      	ldr	r2, [r7, #20]
 80082aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082ae:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80082b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	371c      	adds	r7, #28
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	4f54300a 	.word	0x4f54300a

080082c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80082d0:	2300      	movs	r3, #0
 80082d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	3301      	adds	r3, #1
 80082d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082e0:	d901      	bls.n	80082e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80082e2:	2303      	movs	r3, #3
 80082e4:	e022      	b.n	800832c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	daf2      	bge.n	80082d4 <USB_CoreReset+0xc>

  count = 10U;
 80082ee:	230a      	movs	r3, #10
 80082f0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80082f2:	e002      	b.n	80082fa <USB_CoreReset+0x32>
  {
    count--;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	3b01      	subs	r3, #1
 80082f8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d1f9      	bne.n	80082f4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	f043 0201 	orr.w	r2, r3, #1
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	3301      	adds	r3, #1
 8008310:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008318:	d901      	bls.n	800831e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800831a:	2303      	movs	r3, #3
 800831c:	e006      	b.n	800832c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	f003 0301 	and.w	r3, r3, #1
 8008326:	2b01      	cmp	r3, #1
 8008328:	d0f0      	beq.n	800830c <USB_CoreReset+0x44>

  return HAL_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	3714      	adds	r7, #20
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	460b      	mov	r3, r1
 8008342:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008344:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008348:	f002 fd20 	bl	800ad8c <USBD_static_malloc>
 800834c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d109      	bne.n	8008368 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	32b0      	adds	r2, #176	@ 0xb0
 800835e:	2100      	movs	r1, #0
 8008360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008364:	2302      	movs	r3, #2
 8008366:	e0d4      	b.n	8008512 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008368:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800836c:	2100      	movs	r1, #0
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f002 fe28 	bl	800afc4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	32b0      	adds	r2, #176	@ 0xb0
 800837e:	68f9      	ldr	r1, [r7, #12]
 8008380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	32b0      	adds	r2, #176	@ 0xb0
 800838e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	7c1b      	ldrb	r3, [r3, #16]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d138      	bne.n	8008412 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80083a0:	4b5e      	ldr	r3, [pc, #376]	@ (800851c <USBD_CDC_Init+0x1e4>)
 80083a2:	7819      	ldrb	r1, [r3, #0]
 80083a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80083a8:	2202      	movs	r2, #2
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f002 fbcb 	bl	800ab46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80083b0:	4b5a      	ldr	r3, [pc, #360]	@ (800851c <USBD_CDC_Init+0x1e4>)
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	f003 020f 	and.w	r2, r3, #15
 80083b8:	6879      	ldr	r1, [r7, #4]
 80083ba:	4613      	mov	r3, r2
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	4413      	add	r3, r2
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	440b      	add	r3, r1
 80083c4:	3323      	adds	r3, #35	@ 0x23
 80083c6:	2201      	movs	r2, #1
 80083c8:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80083ca:	4b55      	ldr	r3, [pc, #340]	@ (8008520 <USBD_CDC_Init+0x1e8>)
 80083cc:	7819      	ldrb	r1, [r3, #0]
 80083ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80083d2:	2202      	movs	r2, #2
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f002 fbb6 	bl	800ab46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80083da:	4b51      	ldr	r3, [pc, #324]	@ (8008520 <USBD_CDC_Init+0x1e8>)
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	f003 020f 	and.w	r2, r3, #15
 80083e2:	6879      	ldr	r1, [r7, #4]
 80083e4:	4613      	mov	r3, r2
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	4413      	add	r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	440b      	add	r3, r1
 80083ee:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80083f2:	2201      	movs	r2, #1
 80083f4:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80083f6:	4b4b      	ldr	r3, [pc, #300]	@ (8008524 <USBD_CDC_Init+0x1ec>)
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	f003 020f 	and.w	r2, r3, #15
 80083fe:	6879      	ldr	r1, [r7, #4]
 8008400:	4613      	mov	r3, r2
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	4413      	add	r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	440b      	add	r3, r1
 800840a:	331c      	adds	r3, #28
 800840c:	2210      	movs	r2, #16
 800840e:	601a      	str	r2, [r3, #0]
 8008410:	e035      	b.n	800847e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008412:	4b42      	ldr	r3, [pc, #264]	@ (800851c <USBD_CDC_Init+0x1e4>)
 8008414:	7819      	ldrb	r1, [r3, #0]
 8008416:	2340      	movs	r3, #64	@ 0x40
 8008418:	2202      	movs	r2, #2
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f002 fb93 	bl	800ab46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008420:	4b3e      	ldr	r3, [pc, #248]	@ (800851c <USBD_CDC_Init+0x1e4>)
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	f003 020f 	and.w	r2, r3, #15
 8008428:	6879      	ldr	r1, [r7, #4]
 800842a:	4613      	mov	r3, r2
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	4413      	add	r3, r2
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	440b      	add	r3, r1
 8008434:	3323      	adds	r3, #35	@ 0x23
 8008436:	2201      	movs	r2, #1
 8008438:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800843a:	4b39      	ldr	r3, [pc, #228]	@ (8008520 <USBD_CDC_Init+0x1e8>)
 800843c:	7819      	ldrb	r1, [r3, #0]
 800843e:	2340      	movs	r3, #64	@ 0x40
 8008440:	2202      	movs	r2, #2
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f002 fb7f 	bl	800ab46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008448:	4b35      	ldr	r3, [pc, #212]	@ (8008520 <USBD_CDC_Init+0x1e8>)
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	f003 020f 	and.w	r2, r3, #15
 8008450:	6879      	ldr	r1, [r7, #4]
 8008452:	4613      	mov	r3, r2
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	4413      	add	r3, r2
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	440b      	add	r3, r1
 800845c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008460:	2201      	movs	r2, #1
 8008462:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008464:	4b2f      	ldr	r3, [pc, #188]	@ (8008524 <USBD_CDC_Init+0x1ec>)
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	f003 020f 	and.w	r2, r3, #15
 800846c:	6879      	ldr	r1, [r7, #4]
 800846e:	4613      	mov	r3, r2
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	4413      	add	r3, r2
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	440b      	add	r3, r1
 8008478:	331c      	adds	r3, #28
 800847a:	2210      	movs	r2, #16
 800847c:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800847e:	4b29      	ldr	r3, [pc, #164]	@ (8008524 <USBD_CDC_Init+0x1ec>)
 8008480:	7819      	ldrb	r1, [r3, #0]
 8008482:	2308      	movs	r3, #8
 8008484:	2203      	movs	r2, #3
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f002 fb5d 	bl	800ab46 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800848c:	4b25      	ldr	r3, [pc, #148]	@ (8008524 <USBD_CDC_Init+0x1ec>)
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	f003 020f 	and.w	r2, r3, #15
 8008494:	6879      	ldr	r1, [r7, #4]
 8008496:	4613      	mov	r3, r2
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4413      	add	r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	440b      	add	r3, r1
 80084a0:	3323      	adds	r3, #35	@ 0x23
 80084a2:	2201      	movs	r2, #1
 80084a4:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2200      	movs	r2, #0
 80084aa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	33b0      	adds	r3, #176	@ 0xb0
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	4413      	add	r3, r2
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2200      	movs	r2, #0
 80084ce:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d101      	bne.n	80084e0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80084dc:	2302      	movs	r3, #2
 80084de:	e018      	b.n	8008512 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	7c1b      	ldrb	r3, [r3, #16]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d10a      	bne.n	80084fe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80084e8:	4b0d      	ldr	r3, [pc, #52]	@ (8008520 <USBD_CDC_Init+0x1e8>)
 80084ea:	7819      	ldrb	r1, [r3, #0]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80084f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f002 fc14 	bl	800ad24 <USBD_LL_PrepareReceive>
 80084fc:	e008      	b.n	8008510 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80084fe:	4b08      	ldr	r3, [pc, #32]	@ (8008520 <USBD_CDC_Init+0x1e8>)
 8008500:	7819      	ldrb	r1, [r3, #0]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008508:	2340      	movs	r3, #64	@ 0x40
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f002 fc0a 	bl	800ad24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	20000097 	.word	0x20000097
 8008520:	20000098 	.word	0x20000098
 8008524:	20000099 	.word	0x20000099

08008528 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	460b      	mov	r3, r1
 8008532:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008534:	4b3a      	ldr	r3, [pc, #232]	@ (8008620 <USBD_CDC_DeInit+0xf8>)
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	4619      	mov	r1, r3
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f002 fb29 	bl	800ab92 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008540:	4b37      	ldr	r3, [pc, #220]	@ (8008620 <USBD_CDC_DeInit+0xf8>)
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	f003 020f 	and.w	r2, r3, #15
 8008548:	6879      	ldr	r1, [r7, #4]
 800854a:	4613      	mov	r3, r2
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	4413      	add	r3, r2
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	440b      	add	r3, r1
 8008554:	3323      	adds	r3, #35	@ 0x23
 8008556:	2200      	movs	r2, #0
 8008558:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800855a:	4b32      	ldr	r3, [pc, #200]	@ (8008624 <USBD_CDC_DeInit+0xfc>)
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	4619      	mov	r1, r3
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f002 fb16 	bl	800ab92 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008566:	4b2f      	ldr	r3, [pc, #188]	@ (8008624 <USBD_CDC_DeInit+0xfc>)
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	f003 020f 	and.w	r2, r3, #15
 800856e:	6879      	ldr	r1, [r7, #4]
 8008570:	4613      	mov	r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	4413      	add	r3, r2
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	440b      	add	r3, r1
 800857a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800857e:	2200      	movs	r2, #0
 8008580:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008582:	4b29      	ldr	r3, [pc, #164]	@ (8008628 <USBD_CDC_DeInit+0x100>)
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	4619      	mov	r1, r3
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f002 fb02 	bl	800ab92 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800858e:	4b26      	ldr	r3, [pc, #152]	@ (8008628 <USBD_CDC_DeInit+0x100>)
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	f003 020f 	and.w	r2, r3, #15
 8008596:	6879      	ldr	r1, [r7, #4]
 8008598:	4613      	mov	r3, r2
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	4413      	add	r3, r2
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	440b      	add	r3, r1
 80085a2:	3323      	adds	r3, #35	@ 0x23
 80085a4:	2200      	movs	r2, #0
 80085a6:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80085a8:	4b1f      	ldr	r3, [pc, #124]	@ (8008628 <USBD_CDC_DeInit+0x100>)
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	f003 020f 	and.w	r2, r3, #15
 80085b0:	6879      	ldr	r1, [r7, #4]
 80085b2:	4613      	mov	r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	4413      	add	r3, r2
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	440b      	add	r3, r1
 80085bc:	331c      	adds	r3, #28
 80085be:	2200      	movs	r2, #0
 80085c0:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	32b0      	adds	r2, #176	@ 0xb0
 80085cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d01f      	beq.n	8008614 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	33b0      	adds	r3, #176	@ 0xb0
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	4413      	add	r3, r2
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	32b0      	adds	r2, #176	@ 0xb0
 80085f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f002 fbd6 	bl	800ada8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	32b0      	adds	r2, #176	@ 0xb0
 8008606:	2100      	movs	r1, #0
 8008608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3708      	adds	r7, #8
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	20000097 	.word	0x20000097
 8008624:	20000098 	.word	0x20000098
 8008628:	20000099 	.word	0x20000099

0800862c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b086      	sub	sp, #24
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	32b0      	adds	r2, #176	@ 0xb0
 8008640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008644:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008646:	2300      	movs	r3, #0
 8008648:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800864a:	2300      	movs	r3, #0
 800864c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800864e:	2300      	movs	r3, #0
 8008650:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d101      	bne.n	800865c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008658:	2303      	movs	r3, #3
 800865a:	e0bf      	b.n	80087dc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008664:	2b00      	cmp	r3, #0
 8008666:	d050      	beq.n	800870a <USBD_CDC_Setup+0xde>
 8008668:	2b20      	cmp	r3, #32
 800866a:	f040 80af 	bne.w	80087cc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	88db      	ldrh	r3, [r3, #6]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d03a      	beq.n	80086ec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	b25b      	sxtb	r3, r3
 800867c:	2b00      	cmp	r3, #0
 800867e:	da1b      	bge.n	80086b8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	33b0      	adds	r3, #176	@ 0xb0
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	4413      	add	r3, r2
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	683a      	ldr	r2, [r7, #0]
 8008694:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008696:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008698:	683a      	ldr	r2, [r7, #0]
 800869a:	88d2      	ldrh	r2, [r2, #6]
 800869c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	88db      	ldrh	r3, [r3, #6]
 80086a2:	2b07      	cmp	r3, #7
 80086a4:	bf28      	it	cs
 80086a6:	2307      	movcs	r3, #7
 80086a8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	89fa      	ldrh	r2, [r7, #14]
 80086ae:	4619      	mov	r1, r3
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f001 fda9 	bl	800a208 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80086b6:	e090      	b.n	80087da <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	785a      	ldrb	r2, [r3, #1]
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	88db      	ldrh	r3, [r3, #6]
 80086c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80086c8:	d803      	bhi.n	80086d2 <USBD_CDC_Setup+0xa6>
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	88db      	ldrh	r3, [r3, #6]
 80086ce:	b2da      	uxtb	r2, r3
 80086d0:	e000      	b.n	80086d4 <USBD_CDC_Setup+0xa8>
 80086d2:	2240      	movs	r2, #64	@ 0x40
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80086da:	6939      	ldr	r1, [r7, #16]
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80086e2:	461a      	mov	r2, r3
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f001 fdbe 	bl	800a266 <USBD_CtlPrepareRx>
      break;
 80086ea:	e076      	b.n	80087da <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	33b0      	adds	r3, #176	@ 0xb0
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	4413      	add	r3, r2
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	683a      	ldr	r2, [r7, #0]
 8008700:	7850      	ldrb	r0, [r2, #1]
 8008702:	2200      	movs	r2, #0
 8008704:	6839      	ldr	r1, [r7, #0]
 8008706:	4798      	blx	r3
      break;
 8008708:	e067      	b.n	80087da <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	785b      	ldrb	r3, [r3, #1]
 800870e:	2b0b      	cmp	r3, #11
 8008710:	d851      	bhi.n	80087b6 <USBD_CDC_Setup+0x18a>
 8008712:	a201      	add	r2, pc, #4	@ (adr r2, 8008718 <USBD_CDC_Setup+0xec>)
 8008714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008718:	08008749 	.word	0x08008749
 800871c:	080087c5 	.word	0x080087c5
 8008720:	080087b7 	.word	0x080087b7
 8008724:	080087b7 	.word	0x080087b7
 8008728:	080087b7 	.word	0x080087b7
 800872c:	080087b7 	.word	0x080087b7
 8008730:	080087b7 	.word	0x080087b7
 8008734:	080087b7 	.word	0x080087b7
 8008738:	080087b7 	.word	0x080087b7
 800873c:	080087b7 	.word	0x080087b7
 8008740:	08008773 	.word	0x08008773
 8008744:	0800879d 	.word	0x0800879d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800874e:	b2db      	uxtb	r3, r3
 8008750:	2b03      	cmp	r3, #3
 8008752:	d107      	bne.n	8008764 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008754:	f107 030a 	add.w	r3, r7, #10
 8008758:	2202      	movs	r2, #2
 800875a:	4619      	mov	r1, r3
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f001 fd53 	bl	800a208 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008762:	e032      	b.n	80087ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008764:	6839      	ldr	r1, [r7, #0]
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f001 fcd1 	bl	800a10e <USBD_CtlError>
            ret = USBD_FAIL;
 800876c:	2303      	movs	r3, #3
 800876e:	75fb      	strb	r3, [r7, #23]
          break;
 8008770:	e02b      	b.n	80087ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008778:	b2db      	uxtb	r3, r3
 800877a:	2b03      	cmp	r3, #3
 800877c:	d107      	bne.n	800878e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800877e:	f107 030d 	add.w	r3, r7, #13
 8008782:	2201      	movs	r2, #1
 8008784:	4619      	mov	r1, r3
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f001 fd3e 	bl	800a208 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800878c:	e01d      	b.n	80087ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800878e:	6839      	ldr	r1, [r7, #0]
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f001 fcbc 	bl	800a10e <USBD_CtlError>
            ret = USBD_FAIL;
 8008796:	2303      	movs	r3, #3
 8008798:	75fb      	strb	r3, [r7, #23]
          break;
 800879a:	e016      	b.n	80087ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	2b03      	cmp	r3, #3
 80087a6:	d00f      	beq.n	80087c8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80087a8:	6839      	ldr	r1, [r7, #0]
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f001 fcaf 	bl	800a10e <USBD_CtlError>
            ret = USBD_FAIL;
 80087b0:	2303      	movs	r3, #3
 80087b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80087b4:	e008      	b.n	80087c8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80087b6:	6839      	ldr	r1, [r7, #0]
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f001 fca8 	bl	800a10e <USBD_CtlError>
          ret = USBD_FAIL;
 80087be:	2303      	movs	r3, #3
 80087c0:	75fb      	strb	r3, [r7, #23]
          break;
 80087c2:	e002      	b.n	80087ca <USBD_CDC_Setup+0x19e>
          break;
 80087c4:	bf00      	nop
 80087c6:	e008      	b.n	80087da <USBD_CDC_Setup+0x1ae>
          break;
 80087c8:	bf00      	nop
      }
      break;
 80087ca:	e006      	b.n	80087da <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80087cc:	6839      	ldr	r1, [r7, #0]
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f001 fc9d 	bl	800a10e <USBD_CtlError>
      ret = USBD_FAIL;
 80087d4:	2303      	movs	r3, #3
 80087d6:	75fb      	strb	r3, [r7, #23]
      break;
 80087d8:	bf00      	nop
  }

  return (uint8_t)ret;
 80087da:	7dfb      	ldrb	r3, [r7, #23]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3718      	adds	r7, #24
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	460b      	mov	r3, r1
 80087ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80087f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	32b0      	adds	r2, #176	@ 0xb0
 8008802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d101      	bne.n	800880e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800880a:	2303      	movs	r3, #3
 800880c:	e065      	b.n	80088da <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	32b0      	adds	r2, #176	@ 0xb0
 8008818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800881c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800881e:	78fb      	ldrb	r3, [r7, #3]
 8008820:	f003 020f 	and.w	r2, r3, #15
 8008824:	6879      	ldr	r1, [r7, #4]
 8008826:	4613      	mov	r3, r2
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	4413      	add	r3, r2
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	440b      	add	r3, r1
 8008830:	3314      	adds	r3, #20
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d02f      	beq.n	8008898 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008838:	78fb      	ldrb	r3, [r7, #3]
 800883a:	f003 020f 	and.w	r2, r3, #15
 800883e:	6879      	ldr	r1, [r7, #4]
 8008840:	4613      	mov	r3, r2
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	4413      	add	r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	440b      	add	r3, r1
 800884a:	3314      	adds	r3, #20
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	78fb      	ldrb	r3, [r7, #3]
 8008850:	f003 010f 	and.w	r1, r3, #15
 8008854:	68f8      	ldr	r0, [r7, #12]
 8008856:	460b      	mov	r3, r1
 8008858:	00db      	lsls	r3, r3, #3
 800885a:	440b      	add	r3, r1
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	4403      	add	r3, r0
 8008860:	331c      	adds	r3, #28
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	fbb2 f1f3 	udiv	r1, r2, r3
 8008868:	fb01 f303 	mul.w	r3, r1, r3
 800886c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800886e:	2b00      	cmp	r3, #0
 8008870:	d112      	bne.n	8008898 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008872:	78fb      	ldrb	r3, [r7, #3]
 8008874:	f003 020f 	and.w	r2, r3, #15
 8008878:	6879      	ldr	r1, [r7, #4]
 800887a:	4613      	mov	r3, r2
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	4413      	add	r3, r2
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	440b      	add	r3, r1
 8008884:	3314      	adds	r3, #20
 8008886:	2200      	movs	r2, #0
 8008888:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800888a:	78f9      	ldrb	r1, [r7, #3]
 800888c:	2300      	movs	r3, #0
 800888e:	2200      	movs	r2, #0
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f002 fa26 	bl	800ace2 <USBD_LL_Transmit>
 8008896:	e01f      	b.n	80088d8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	2200      	movs	r2, #0
 800889c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	33b0      	adds	r3, #176	@ 0xb0
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4413      	add	r3, r2
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	691b      	ldr	r3, [r3, #16]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d010      	beq.n	80088d8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	33b0      	adds	r3, #176	@ 0xb0
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4413      	add	r3, r2
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	68ba      	ldr	r2, [r7, #8]
 80088ca:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80088d4:	78fa      	ldrb	r2, [r7, #3]
 80088d6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b084      	sub	sp, #16
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
 80088ea:	460b      	mov	r3, r1
 80088ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	32b0      	adds	r2, #176	@ 0xb0
 80088f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	32b0      	adds	r2, #176	@ 0xb0
 8008908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d101      	bne.n	8008914 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008910:	2303      	movs	r3, #3
 8008912:	e01a      	b.n	800894a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008914:	78fb      	ldrb	r3, [r7, #3]
 8008916:	4619      	mov	r1, r3
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f002 fa24 	bl	800ad66 <USBD_LL_GetRxDataSize>
 800891e:	4602      	mov	r2, r0
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	33b0      	adds	r3, #176	@ 0xb0
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4413      	add	r3, r2
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008944:	4611      	mov	r1, r2
 8008946:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008948:	2300      	movs	r3, #0
}
 800894a:	4618      	mov	r0, r3
 800894c:	3710      	adds	r7, #16
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008952:	b580      	push	{r7, lr}
 8008954:	b084      	sub	sp, #16
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	32b0      	adds	r2, #176	@ 0xb0
 8008964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008968:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d101      	bne.n	8008974 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008970:	2303      	movs	r3, #3
 8008972:	e024      	b.n	80089be <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	33b0      	adds	r3, #176	@ 0xb0
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	4413      	add	r3, r2
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d019      	beq.n	80089bc <USBD_CDC_EP0_RxReady+0x6a>
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800898e:	2bff      	cmp	r3, #255	@ 0xff
 8008990:	d014      	beq.n	80089bc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	33b0      	adds	r3, #176	@ 0xb0
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	4413      	add	r3, r2
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80089aa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80089b2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	22ff      	movs	r2, #255	@ 0xff
 80089b8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
	...

080089c8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b086      	sub	sp, #24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80089d0:	2182      	movs	r1, #130	@ 0x82
 80089d2:	4818      	ldr	r0, [pc, #96]	@ (8008a34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80089d4:	f000 fd62 	bl	800949c <USBD_GetEpDesc>
 80089d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80089da:	2101      	movs	r1, #1
 80089dc:	4815      	ldr	r0, [pc, #84]	@ (8008a34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80089de:	f000 fd5d 	bl	800949c <USBD_GetEpDesc>
 80089e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80089e4:	2181      	movs	r1, #129	@ 0x81
 80089e6:	4813      	ldr	r0, [pc, #76]	@ (8008a34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80089e8:	f000 fd58 	bl	800949c <USBD_GetEpDesc>
 80089ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d002      	beq.n	80089fa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	2210      	movs	r2, #16
 80089f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d006      	beq.n	8008a0e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a08:	711a      	strb	r2, [r3, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d006      	beq.n	8008a22 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a1c:	711a      	strb	r2, [r3, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2243      	movs	r2, #67	@ 0x43
 8008a26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008a28:	4b02      	ldr	r3, [pc, #8]	@ (8008a34 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3718      	adds	r7, #24
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop
 8008a34:	20000054 	.word	0x20000054

08008a38 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b086      	sub	sp, #24
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008a40:	2182      	movs	r1, #130	@ 0x82
 8008a42:	4818      	ldr	r0, [pc, #96]	@ (8008aa4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008a44:	f000 fd2a 	bl	800949c <USBD_GetEpDesc>
 8008a48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008a4a:	2101      	movs	r1, #1
 8008a4c:	4815      	ldr	r0, [pc, #84]	@ (8008aa4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008a4e:	f000 fd25 	bl	800949c <USBD_GetEpDesc>
 8008a52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008a54:	2181      	movs	r1, #129	@ 0x81
 8008a56:	4813      	ldr	r0, [pc, #76]	@ (8008aa4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008a58:	f000 fd20 	bl	800949c <USBD_GetEpDesc>
 8008a5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d002      	beq.n	8008a6a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	2210      	movs	r2, #16
 8008a68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d006      	beq.n	8008a7e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	2200      	movs	r2, #0
 8008a74:	711a      	strb	r2, [r3, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	f042 0202 	orr.w	r2, r2, #2
 8008a7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d006      	beq.n	8008a92 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2200      	movs	r2, #0
 8008a88:	711a      	strb	r2, [r3, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f042 0202 	orr.w	r2, r2, #2
 8008a90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2243      	movs	r2, #67	@ 0x43
 8008a96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008a98:	4b02      	ldr	r3, [pc, #8]	@ (8008aa4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3718      	adds	r7, #24
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	20000054 	.word	0x20000054

08008aa8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b086      	sub	sp, #24
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008ab0:	2182      	movs	r1, #130	@ 0x82
 8008ab2:	4818      	ldr	r0, [pc, #96]	@ (8008b14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008ab4:	f000 fcf2 	bl	800949c <USBD_GetEpDesc>
 8008ab8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008aba:	2101      	movs	r1, #1
 8008abc:	4815      	ldr	r0, [pc, #84]	@ (8008b14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008abe:	f000 fced 	bl	800949c <USBD_GetEpDesc>
 8008ac2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008ac4:	2181      	movs	r1, #129	@ 0x81
 8008ac6:	4813      	ldr	r0, [pc, #76]	@ (8008b14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008ac8:	f000 fce8 	bl	800949c <USBD_GetEpDesc>
 8008acc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d002      	beq.n	8008ada <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	2210      	movs	r2, #16
 8008ad8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d006      	beq.n	8008aee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008ae8:	711a      	strb	r2, [r3, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d006      	beq.n	8008b02 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008afc:	711a      	strb	r2, [r3, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2243      	movs	r2, #67	@ 0x43
 8008b06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008b08:	4b02      	ldr	r3, [pc, #8]	@ (8008b14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3718      	adds	r7, #24
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	20000054 	.word	0x20000054

08008b18 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	220a      	movs	r2, #10
 8008b24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008b26:	4b03      	ldr	r3, [pc, #12]	@ (8008b34 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr
 8008b34:	20000010 	.word	0x20000010

08008b38 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d101      	bne.n	8008b4c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008b48:	2303      	movs	r3, #3
 8008b4a:	e009      	b.n	8008b60 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	33b0      	adds	r3, #176	@ 0xb0
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	4413      	add	r3, r2
 8008b5a:	683a      	ldr	r2, [r7, #0]
 8008b5c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b087      	sub	sp, #28
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	32b0      	adds	r2, #176	@ 0xb0
 8008b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b86:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d101      	bne.n	8008b92 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008b8e:	2303      	movs	r3, #3
 8008b90:	e008      	b.n	8008ba4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	68ba      	ldr	r2, [r7, #8]
 8008b96:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	371c      	adds	r7, #28
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	32b0      	adds	r2, #176	@ 0xb0
 8008bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bc8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d101      	bne.n	8008bd4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	e004      	b.n	8008bde <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	683a      	ldr	r2, [r7, #0]
 8008bd8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3714      	adds	r7, #20
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
	...

08008bec <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	32b0      	adds	r2, #176	@ 0xb0
 8008bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c02:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008c04:	2301      	movs	r3, #1
 8008c06:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d101      	bne.n	8008c12 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008c0e:	2303      	movs	r3, #3
 8008c10:	e025      	b.n	8008c5e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d11f      	bne.n	8008c5c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008c24:	4b10      	ldr	r3, [pc, #64]	@ (8008c68 <USBD_CDC_TransmitPacket+0x7c>)
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	f003 020f 	and.w	r2, r3, #15
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	4613      	mov	r3, r2
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	4413      	add	r3, r2
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	4403      	add	r3, r0
 8008c3e:	3314      	adds	r3, #20
 8008c40:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008c42:	4b09      	ldr	r3, [pc, #36]	@ (8008c68 <USBD_CDC_TransmitPacket+0x7c>)
 8008c44:	7819      	ldrb	r1, [r3, #0]
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f002 f845 	bl	800ace2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	20000097 	.word	0x20000097

08008c6c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	32b0      	adds	r2, #176	@ 0xb0
 8008c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c82:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	32b0      	adds	r2, #176	@ 0xb0
 8008c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d101      	bne.n	8008c9a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008c96:	2303      	movs	r3, #3
 8008c98:	e018      	b.n	8008ccc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	7c1b      	ldrb	r3, [r3, #16]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d10a      	bne.n	8008cb8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8008cd4 <USBD_CDC_ReceivePacket+0x68>)
 8008ca4:	7819      	ldrb	r1, [r3, #0]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008cac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f002 f837 	bl	800ad24 <USBD_LL_PrepareReceive>
 8008cb6:	e008      	b.n	8008cca <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008cb8:	4b06      	ldr	r3, [pc, #24]	@ (8008cd4 <USBD_CDC_ReceivePacket+0x68>)
 8008cba:	7819      	ldrb	r1, [r3, #0]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008cc2:	2340      	movs	r3, #64	@ 0x40
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f002 f82d 	bl	800ad24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3710      	adds	r7, #16
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	20000098 	.word	0x20000098

08008cd8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b086      	sub	sp, #24
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d101      	bne.n	8008cf0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008cec:	2303      	movs	r3, #3
 8008cee:	e01f      	b.n	8008d30 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2200      	movs	r2, #0
 8008d04:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d003      	beq.n	8008d16 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	68ba      	ldr	r2, [r7, #8]
 8008d12:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	79fa      	ldrb	r2, [r7, #7]
 8008d22:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f001 fea7 	bl	800aa78 <USBD_LL_Init>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3718      	adds	r7, #24
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d42:	2300      	movs	r3, #0
 8008d44:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d101      	bne.n	8008d50 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	e025      	b.n	8008d9c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	683a      	ldr	r2, [r7, #0]
 8008d54:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	32ae      	adds	r2, #174	@ 0xae
 8008d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d00f      	beq.n	8008d8c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	32ae      	adds	r2, #174	@ 0xae
 8008d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d7c:	f107 020e 	add.w	r2, r7, #14
 8008d80:	4610      	mov	r0, r2
 8008d82:	4798      	blx	r3
 8008d84:	4602      	mov	r2, r0
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008d92:	1c5a      	adds	r2, r3, #1
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008d9a:	2300      	movs	r3, #0
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3710      	adds	r7, #16
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f001 feaf 	bl	800ab10 <USBD_LL_Start>
 8008db2:	4603      	mov	r3, r0
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3708      	adds	r7, #8
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008dc4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	370c      	adds	r7, #12
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b084      	sub	sp, #16
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
 8008dda:	460b      	mov	r3, r1
 8008ddc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dde:	2300      	movs	r3, #0
 8008de0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d009      	beq.n	8008e00 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	78fa      	ldrb	r2, [r7, #3]
 8008df6:	4611      	mov	r1, r2
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	4798      	blx	r3
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b084      	sub	sp, #16
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
 8008e12:	460b      	mov	r3, r1
 8008e14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e16:	2300      	movs	r3, #0
 8008e18:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	78fa      	ldrb	r2, [r7, #3]
 8008e24:	4611      	mov	r1, r2
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	4798      	blx	r3
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d001      	beq.n	8008e34 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008e30:	2303      	movs	r3, #3
 8008e32:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b084      	sub	sp, #16
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
 8008e46:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008e4e:	6839      	ldr	r1, [r7, #0]
 8008e50:	4618      	mov	r0, r3
 8008e52:	f001 f922 	bl	800a09a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2201      	movs	r2, #1
 8008e5a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008e64:	461a      	mov	r2, r3
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008e72:	f003 031f 	and.w	r3, r3, #31
 8008e76:	2b02      	cmp	r3, #2
 8008e78:	d01a      	beq.n	8008eb0 <USBD_LL_SetupStage+0x72>
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	d822      	bhi.n	8008ec4 <USBD_LL_SetupStage+0x86>
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d002      	beq.n	8008e88 <USBD_LL_SetupStage+0x4a>
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d00a      	beq.n	8008e9c <USBD_LL_SetupStage+0x5e>
 8008e86:	e01d      	b.n	8008ec4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008e8e:	4619      	mov	r1, r3
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 fb77 	bl	8009584 <USBD_StdDevReq>
 8008e96:	4603      	mov	r3, r0
 8008e98:	73fb      	strb	r3, [r7, #15]
      break;
 8008e9a:	e020      	b.n	8008ede <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 fbdf 	bl	8009668 <USBD_StdItfReq>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	73fb      	strb	r3, [r7, #15]
      break;
 8008eae:	e016      	b.n	8008ede <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 fc41 	bl	8009740 <USBD_StdEPReq>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ec2:	e00c      	b.n	8008ede <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008eca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f001 fe7c 	bl	800abd0 <USBD_LL_StallEP>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	73fb      	strb	r3, [r7, #15]
      break;
 8008edc:	bf00      	nop
  }

  return ret;
 8008ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3710      	adds	r7, #16
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b086      	sub	sp, #24
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	607a      	str	r2, [r7, #4]
 8008ef4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8008efa:	7afb      	ldrb	r3, [r7, #11]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d177      	bne.n	8008ff0 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008f06:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008f0e:	2b03      	cmp	r3, #3
 8008f10:	f040 80a1 	bne.w	8009056 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	693a      	ldr	r2, [r7, #16]
 8008f1a:	8992      	ldrh	r2, [r2, #12]
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d91c      	bls.n	8008f5a <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	693a      	ldr	r2, [r7, #16]
 8008f26:	8992      	ldrh	r2, [r2, #12]
 8008f28:	1a9a      	subs	r2, r3, r2
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	691b      	ldr	r3, [r3, #16]
 8008f32:	693a      	ldr	r2, [r7, #16]
 8008f34:	8992      	ldrh	r2, [r2, #12]
 8008f36:	441a      	add	r2, r3
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	6919      	ldr	r1, [r3, #16]
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	899b      	ldrh	r3, [r3, #12]
 8008f44:	461a      	mov	r2, r3
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	bf38      	it	cc
 8008f4e:	4613      	movcc	r3, r2
 8008f50:	461a      	mov	r2, r3
 8008f52:	68f8      	ldr	r0, [r7, #12]
 8008f54:	f001 f9a8 	bl	800a2a8 <USBD_CtlContinueRx>
 8008f58:	e07d      	b.n	8009056 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008f60:	f003 031f 	and.w	r3, r3, #31
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d014      	beq.n	8008f92 <USBD_LL_DataOutStage+0xaa>
 8008f68:	2b02      	cmp	r3, #2
 8008f6a:	d81d      	bhi.n	8008fa8 <USBD_LL_DataOutStage+0xc0>
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d002      	beq.n	8008f76 <USBD_LL_DataOutStage+0x8e>
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d003      	beq.n	8008f7c <USBD_LL_DataOutStage+0x94>
 8008f74:	e018      	b.n	8008fa8 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008f76:	2300      	movs	r3, #0
 8008f78:	75bb      	strb	r3, [r7, #22]
            break;
 8008f7a:	e018      	b.n	8008fae <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	4619      	mov	r1, r3
 8008f86:	68f8      	ldr	r0, [r7, #12]
 8008f88:	f000 fa6e 	bl	8009468 <USBD_CoreFindIF>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	75bb      	strb	r3, [r7, #22]
            break;
 8008f90:	e00d      	b.n	8008fae <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f000 fa70 	bl	8009482 <USBD_CoreFindEP>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	75bb      	strb	r3, [r7, #22]
            break;
 8008fa6:	e002      	b.n	8008fae <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	75bb      	strb	r3, [r7, #22]
            break;
 8008fac:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008fae:	7dbb      	ldrb	r3, [r7, #22]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d119      	bne.n	8008fe8 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	2b03      	cmp	r3, #3
 8008fbe:	d113      	bne.n	8008fe8 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008fc0:	7dba      	ldrb	r2, [r7, #22]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	32ae      	adds	r2, #174	@ 0xae
 8008fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fca:	691b      	ldr	r3, [r3, #16]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00b      	beq.n	8008fe8 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8008fd0:	7dba      	ldrb	r2, [r7, #22]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008fd8:	7dba      	ldrb	r2, [r7, #22]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	32ae      	adds	r2, #174	@ 0xae
 8008fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	68f8      	ldr	r0, [r7, #12]
 8008fe6:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	f001 f96e 	bl	800a2ca <USBD_CtlSendStatus>
 8008fee:	e032      	b.n	8009056 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008ff0:	7afb      	ldrb	r3, [r7, #11]
 8008ff2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	68f8      	ldr	r0, [r7, #12]
 8008ffc:	f000 fa41 	bl	8009482 <USBD_CoreFindEP>
 8009000:	4603      	mov	r3, r0
 8009002:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009004:	7dbb      	ldrb	r3, [r7, #22]
 8009006:	2bff      	cmp	r3, #255	@ 0xff
 8009008:	d025      	beq.n	8009056 <USBD_LL_DataOutStage+0x16e>
 800900a:	7dbb      	ldrb	r3, [r7, #22]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d122      	bne.n	8009056 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009016:	b2db      	uxtb	r3, r3
 8009018:	2b03      	cmp	r3, #3
 800901a:	d117      	bne.n	800904c <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800901c:	7dba      	ldrb	r2, [r7, #22]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	32ae      	adds	r2, #174	@ 0xae
 8009022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009026:	699b      	ldr	r3, [r3, #24]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d00f      	beq.n	800904c <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800902c:	7dba      	ldrb	r2, [r7, #22]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009034:	7dba      	ldrb	r2, [r7, #22]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	32ae      	adds	r2, #174	@ 0xae
 800903a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800903e:	699b      	ldr	r3, [r3, #24]
 8009040:	7afa      	ldrb	r2, [r7, #11]
 8009042:	4611      	mov	r1, r2
 8009044:	68f8      	ldr	r0, [r7, #12]
 8009046:	4798      	blx	r3
 8009048:	4603      	mov	r3, r0
 800904a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800904c:	7dfb      	ldrb	r3, [r7, #23]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d001      	beq.n	8009056 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8009052:	7dfb      	ldrb	r3, [r7, #23]
 8009054:	e000      	b.n	8009058 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3718      	adds	r7, #24
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b086      	sub	sp, #24
 8009064:	af00      	add	r7, sp, #0
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	460b      	mov	r3, r1
 800906a:	607a      	str	r2, [r7, #4]
 800906c:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800906e:	7afb      	ldrb	r3, [r7, #11]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d178      	bne.n	8009166 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	3314      	adds	r3, #20
 8009078:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009080:	2b02      	cmp	r3, #2
 8009082:	d163      	bne.n	800914c <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	693a      	ldr	r2, [r7, #16]
 800908a:	8992      	ldrh	r2, [r2, #12]
 800908c:	4293      	cmp	r3, r2
 800908e:	d91c      	bls.n	80090ca <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	693a      	ldr	r2, [r7, #16]
 8009096:	8992      	ldrh	r2, [r2, #12]
 8009098:	1a9a      	subs	r2, r3, r2
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	693a      	ldr	r2, [r7, #16]
 80090a4:	8992      	ldrh	r2, [r2, #12]
 80090a6:	441a      	add	r2, r3
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	6919      	ldr	r1, [r3, #16]
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	461a      	mov	r2, r3
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	f001 f8c4 	bl	800a244 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090bc:	2300      	movs	r3, #0
 80090be:	2200      	movs	r2, #0
 80090c0:	2100      	movs	r1, #0
 80090c2:	68f8      	ldr	r0, [r7, #12]
 80090c4:	f001 fe2e 	bl	800ad24 <USBD_LL_PrepareReceive>
 80090c8:	e040      	b.n	800914c <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	899b      	ldrh	r3, [r3, #12]
 80090ce:	461a      	mov	r2, r3
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d11c      	bne.n	8009112 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	693a      	ldr	r2, [r7, #16]
 80090de:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d316      	bcc.n	8009112 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d20f      	bcs.n	8009112 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80090f2:	2200      	movs	r2, #0
 80090f4:	2100      	movs	r1, #0
 80090f6:	68f8      	ldr	r0, [r7, #12]
 80090f8:	f001 f8a4 	bl	800a244 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2200      	movs	r2, #0
 8009100:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009104:	2300      	movs	r3, #0
 8009106:	2200      	movs	r2, #0
 8009108:	2100      	movs	r1, #0
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	f001 fe0a 	bl	800ad24 <USBD_LL_PrepareReceive>
 8009110:	e01c      	b.n	800914c <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009118:	b2db      	uxtb	r3, r3
 800911a:	2b03      	cmp	r3, #3
 800911c:	d10f      	bne.n	800913e <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d009      	beq.n	800913e <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2200      	movs	r2, #0
 800912e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	68f8      	ldr	r0, [r7, #12]
 800913c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800913e:	2180      	movs	r1, #128	@ 0x80
 8009140:	68f8      	ldr	r0, [r7, #12]
 8009142:	f001 fd45 	bl	800abd0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009146:	68f8      	ldr	r0, [r7, #12]
 8009148:	f001 f8d2 	bl	800a2f0 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009152:	2b00      	cmp	r3, #0
 8009154:	d03a      	beq.n	80091cc <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f7ff fe30 	bl	8008dbc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2200      	movs	r2, #0
 8009160:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009164:	e032      	b.n	80091cc <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009166:	7afb      	ldrb	r3, [r7, #11]
 8009168:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800916c:	b2db      	uxtb	r3, r3
 800916e:	4619      	mov	r1, r3
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	f000 f986 	bl	8009482 <USBD_CoreFindEP>
 8009176:	4603      	mov	r3, r0
 8009178:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800917a:	7dfb      	ldrb	r3, [r7, #23]
 800917c:	2bff      	cmp	r3, #255	@ 0xff
 800917e:	d025      	beq.n	80091cc <USBD_LL_DataInStage+0x16c>
 8009180:	7dfb      	ldrb	r3, [r7, #23]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d122      	bne.n	80091cc <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800918c:	b2db      	uxtb	r3, r3
 800918e:	2b03      	cmp	r3, #3
 8009190:	d11c      	bne.n	80091cc <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009192:	7dfa      	ldrb	r2, [r7, #23]
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	32ae      	adds	r2, #174	@ 0xae
 8009198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800919c:	695b      	ldr	r3, [r3, #20]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d014      	beq.n	80091cc <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 80091a2:	7dfa      	ldrb	r2, [r7, #23]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80091aa:	7dfa      	ldrb	r2, [r7, #23]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	32ae      	adds	r2, #174	@ 0xae
 80091b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091b4:	695b      	ldr	r3, [r3, #20]
 80091b6:	7afa      	ldrb	r2, [r7, #11]
 80091b8:	4611      	mov	r1, r2
 80091ba:	68f8      	ldr	r0, [r7, #12]
 80091bc:	4798      	blx	r3
 80091be:	4603      	mov	r3, r0
 80091c0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80091c2:	7dbb      	ldrb	r3, [r7, #22]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d001      	beq.n	80091cc <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 80091c8:	7dbb      	ldrb	r3, [r7, #22]
 80091ca:	e000      	b.n	80091ce <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 80091cc:	2300      	movs	r3, #0
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3718      	adds	r7, #24
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}

080091d6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80091d6:	b580      	push	{r7, lr}
 80091d8:	b084      	sub	sp, #16
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80091de:	2300      	movs	r3, #0
 80091e0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2201      	movs	r2, #1
 80091e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2200      	movs	r2, #0
 8009204:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800920e:	2b00      	cmp	r3, #0
 8009210:	d014      	beq.n	800923c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00e      	beq.n	800923c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	6852      	ldr	r2, [r2, #4]
 800922a:	b2d2      	uxtb	r2, r2
 800922c:	4611      	mov	r1, r2
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	4798      	blx	r3
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d001      	beq.n	800923c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009238:	2303      	movs	r3, #3
 800923a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800923c:	2340      	movs	r3, #64	@ 0x40
 800923e:	2200      	movs	r2, #0
 8009240:	2100      	movs	r1, #0
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f001 fc7f 	bl	800ab46 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2240      	movs	r2, #64	@ 0x40
 8009254:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009258:	2340      	movs	r3, #64	@ 0x40
 800925a:	2200      	movs	r2, #0
 800925c:	2180      	movs	r1, #128	@ 0x80
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f001 fc71 	bl	800ab46 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2240      	movs	r2, #64	@ 0x40
 8009270:	841a      	strh	r2, [r3, #32]

  return ret;
 8009272:	7bfb      	ldrb	r3, [r7, #15]
}
 8009274:	4618      	mov	r0, r3
 8009276:	3710      	adds	r7, #16
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	460b      	mov	r3, r1
 8009286:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	78fa      	ldrb	r2, [r7, #3]
 800928c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	2b04      	cmp	r3, #4
 80092ae:	d006      	beq.n	80092be <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092b6:	b2da      	uxtb	r2, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2204      	movs	r2, #4
 80092c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	2b04      	cmp	r3, #4
 80092e6:	d106      	bne.n	80092f6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80092ee:	b2da      	uxtb	r2, r3
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009312:	b2db      	uxtb	r3, r3
 8009314:	2b03      	cmp	r3, #3
 8009316:	d110      	bne.n	800933a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800931e:	2b00      	cmp	r3, #0
 8009320:	d00b      	beq.n	800933a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009328:	69db      	ldr	r3, [r3, #28]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d005      	beq.n	800933a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009334:	69db      	ldr	r3, [r3, #28]
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800933a:	2300      	movs	r3, #0
}
 800933c:	4618      	mov	r0, r3
 800933e:	3708      	adds	r7, #8
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	460b      	mov	r3, r1
 800934e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	32ae      	adds	r2, #174	@ 0xae
 800935a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d101      	bne.n	8009366 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009362:	2303      	movs	r3, #3
 8009364:	e01c      	b.n	80093a0 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800936c:	b2db      	uxtb	r3, r3
 800936e:	2b03      	cmp	r3, #3
 8009370:	d115      	bne.n	800939e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	32ae      	adds	r2, #174	@ 0xae
 800937c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009380:	6a1b      	ldr	r3, [r3, #32]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00b      	beq.n	800939e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	32ae      	adds	r2, #174	@ 0xae
 8009390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009394:	6a1b      	ldr	r3, [r3, #32]
 8009396:	78fa      	ldrb	r2, [r7, #3]
 8009398:	4611      	mov	r1, r2
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800939e:	2300      	movs	r3, #0
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3708      	adds	r7, #8
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	460b      	mov	r3, r1
 80093b2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	32ae      	adds	r2, #174	@ 0xae
 80093be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d101      	bne.n	80093ca <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80093c6:	2303      	movs	r3, #3
 80093c8:	e01c      	b.n	8009404 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	2b03      	cmp	r3, #3
 80093d4:	d115      	bne.n	8009402 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	32ae      	adds	r2, #174	@ 0xae
 80093e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00b      	beq.n	8009402 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	32ae      	adds	r2, #174	@ 0xae
 80093f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093fa:	78fa      	ldrb	r2, [r7, #3]
 80093fc:	4611      	mov	r1, r2
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009402:	2300      	movs	r3, #0
}
 8009404:	4618      	mov	r0, r3
 8009406:	3708      	adds	r7, #8
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009414:	2300      	movs	r3, #0
}
 8009416:	4618      	mov	r0, r3
 8009418:	370c      	adds	r7, #12
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr

08009422 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b084      	sub	sp, #16
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800942a:	2300      	movs	r3, #0
 800942c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2201      	movs	r2, #1
 8009432:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800943c:	2b00      	cmp	r3, #0
 800943e:	d00e      	beq.n	800945e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	6852      	ldr	r2, [r2, #4]
 800944c:	b2d2      	uxtb	r2, r2
 800944e:	4611      	mov	r1, r2
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	4798      	blx	r3
 8009454:	4603      	mov	r3, r0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d001      	beq.n	800945e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800945a:	2303      	movs	r3, #3
 800945c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800945e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009460:	4618      	mov	r0, r3
 8009462:	3710      	adds	r7, #16
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	460b      	mov	r3, r1
 8009472:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009474:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009476:	4618      	mov	r0, r3
 8009478:	370c      	adds	r7, #12
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr

08009482 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009482:	b480      	push	{r7}
 8009484:	b083      	sub	sp, #12
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
 800948a:	460b      	mov	r3, r1
 800948c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800948e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009490:	4618      	mov	r0, r3
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b086      	sub	sp, #24
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	460b      	mov	r3, r1
 80094a6:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80094b0:	2300      	movs	r3, #0
 80094b2:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	885b      	ldrh	r3, [r3, #2]
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	7812      	ldrb	r2, [r2, #0]
 80094be:	4293      	cmp	r3, r2
 80094c0:	d91f      	bls.n	8009502 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80094c8:	e013      	b.n	80094f2 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80094ca:	f107 030a 	add.w	r3, r7, #10
 80094ce:	4619      	mov	r1, r3
 80094d0:	6978      	ldr	r0, [r7, #20]
 80094d2:	f000 f81b 	bl	800950c <USBD_GetNextDesc>
 80094d6:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	785b      	ldrb	r3, [r3, #1]
 80094dc:	2b05      	cmp	r3, #5
 80094de:	d108      	bne.n	80094f2 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	789b      	ldrb	r3, [r3, #2]
 80094e8:	78fa      	ldrb	r2, [r7, #3]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d008      	beq.n	8009500 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80094ee:	2300      	movs	r3, #0
 80094f0:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	885b      	ldrh	r3, [r3, #2]
 80094f6:	b29a      	uxth	r2, r3
 80094f8:	897b      	ldrh	r3, [r7, #10]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d8e5      	bhi.n	80094ca <USBD_GetEpDesc+0x2e>
 80094fe:	e000      	b.n	8009502 <USBD_GetEpDesc+0x66>
          break;
 8009500:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009502:	693b      	ldr	r3, [r7, #16]
}
 8009504:	4618      	mov	r0, r3
 8009506:	3718      	adds	r7, #24
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	881b      	ldrh	r3, [r3, #0]
 800951e:	68fa      	ldr	r2, [r7, #12]
 8009520:	7812      	ldrb	r2, [r2, #0]
 8009522:	4413      	add	r3, r2
 8009524:	b29a      	uxth	r2, r3
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	461a      	mov	r2, r3
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4413      	add	r3, r2
 8009534:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009536:	68fb      	ldr	r3, [r7, #12]
}
 8009538:	4618      	mov	r0, r3
 800953a:	3714      	adds	r7, #20
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009544:	b480      	push	{r7}
 8009546:	b087      	sub	sp, #28
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	3301      	adds	r3, #1
 800955a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009562:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009566:	021b      	lsls	r3, r3, #8
 8009568:	b21a      	sxth	r2, r3
 800956a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800956e:	4313      	orrs	r3, r2
 8009570:	b21b      	sxth	r3, r3
 8009572:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009574:	89fb      	ldrh	r3, [r7, #14]
}
 8009576:	4618      	mov	r0, r3
 8009578:	371c      	adds	r7, #28
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr
	...

08009584 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800958e:	2300      	movs	r3, #0
 8009590:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800959a:	2b40      	cmp	r3, #64	@ 0x40
 800959c:	d005      	beq.n	80095aa <USBD_StdDevReq+0x26>
 800959e:	2b40      	cmp	r3, #64	@ 0x40
 80095a0:	d857      	bhi.n	8009652 <USBD_StdDevReq+0xce>
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d00f      	beq.n	80095c6 <USBD_StdDevReq+0x42>
 80095a6:	2b20      	cmp	r3, #32
 80095a8:	d153      	bne.n	8009652 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	32ae      	adds	r2, #174	@ 0xae
 80095b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	6839      	ldr	r1, [r7, #0]
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	4798      	blx	r3
 80095c0:	4603      	mov	r3, r0
 80095c2:	73fb      	strb	r3, [r7, #15]
      break;
 80095c4:	e04a      	b.n	800965c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	785b      	ldrb	r3, [r3, #1]
 80095ca:	2b09      	cmp	r3, #9
 80095cc:	d83b      	bhi.n	8009646 <USBD_StdDevReq+0xc2>
 80095ce:	a201      	add	r2, pc, #4	@ (adr r2, 80095d4 <USBD_StdDevReq+0x50>)
 80095d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d4:	08009629 	.word	0x08009629
 80095d8:	0800963d 	.word	0x0800963d
 80095dc:	08009647 	.word	0x08009647
 80095e0:	08009633 	.word	0x08009633
 80095e4:	08009647 	.word	0x08009647
 80095e8:	08009607 	.word	0x08009607
 80095ec:	080095fd 	.word	0x080095fd
 80095f0:	08009647 	.word	0x08009647
 80095f4:	0800961f 	.word	0x0800961f
 80095f8:	08009611 	.word	0x08009611
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80095fc:	6839      	ldr	r1, [r7, #0]
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 fa3e 	bl	8009a80 <USBD_GetDescriptor>
          break;
 8009604:	e024      	b.n	8009650 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009606:	6839      	ldr	r1, [r7, #0]
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 fba3 	bl	8009d54 <USBD_SetAddress>
          break;
 800960e:	e01f      	b.n	8009650 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009610:	6839      	ldr	r1, [r7, #0]
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 fbe2 	bl	8009ddc <USBD_SetConfig>
 8009618:	4603      	mov	r3, r0
 800961a:	73fb      	strb	r3, [r7, #15]
          break;
 800961c:	e018      	b.n	8009650 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800961e:	6839      	ldr	r1, [r7, #0]
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 fc85 	bl	8009f30 <USBD_GetConfig>
          break;
 8009626:	e013      	b.n	8009650 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009628:	6839      	ldr	r1, [r7, #0]
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 fcb6 	bl	8009f9c <USBD_GetStatus>
          break;
 8009630:	e00e      	b.n	8009650 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009632:	6839      	ldr	r1, [r7, #0]
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 fce5 	bl	800a004 <USBD_SetFeature>
          break;
 800963a:	e009      	b.n	8009650 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800963c:	6839      	ldr	r1, [r7, #0]
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 fd09 	bl	800a056 <USBD_ClrFeature>
          break;
 8009644:	e004      	b.n	8009650 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009646:	6839      	ldr	r1, [r7, #0]
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 fd60 	bl	800a10e <USBD_CtlError>
          break;
 800964e:	bf00      	nop
      }
      break;
 8009650:	e004      	b.n	800965c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009652:	6839      	ldr	r1, [r7, #0]
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 fd5a 	bl	800a10e <USBD_CtlError>
      break;
 800965a:	bf00      	nop
  }

  return ret;
 800965c:	7bfb      	ldrb	r3, [r7, #15]
}
 800965e:	4618      	mov	r0, r3
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop

08009668 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009672:	2300      	movs	r3, #0
 8009674:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800967e:	2b40      	cmp	r3, #64	@ 0x40
 8009680:	d005      	beq.n	800968e <USBD_StdItfReq+0x26>
 8009682:	2b40      	cmp	r3, #64	@ 0x40
 8009684:	d852      	bhi.n	800972c <USBD_StdItfReq+0xc4>
 8009686:	2b00      	cmp	r3, #0
 8009688:	d001      	beq.n	800968e <USBD_StdItfReq+0x26>
 800968a:	2b20      	cmp	r3, #32
 800968c:	d14e      	bne.n	800972c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009694:	b2db      	uxtb	r3, r3
 8009696:	3b01      	subs	r3, #1
 8009698:	2b02      	cmp	r3, #2
 800969a:	d840      	bhi.n	800971e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	889b      	ldrh	r3, [r3, #4]
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d836      	bhi.n	8009714 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	889b      	ldrh	r3, [r3, #4]
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	4619      	mov	r1, r3
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f7ff feda 	bl	8009468 <USBD_CoreFindIF>
 80096b4:	4603      	mov	r3, r0
 80096b6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80096b8:	7bbb      	ldrb	r3, [r7, #14]
 80096ba:	2bff      	cmp	r3, #255	@ 0xff
 80096bc:	d01d      	beq.n	80096fa <USBD_StdItfReq+0x92>
 80096be:	7bbb      	ldrb	r3, [r7, #14]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d11a      	bne.n	80096fa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80096c4:	7bba      	ldrb	r2, [r7, #14]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	32ae      	adds	r2, #174	@ 0xae
 80096ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d00f      	beq.n	80096f4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80096d4:	7bba      	ldrb	r2, [r7, #14]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80096dc:	7bba      	ldrb	r2, [r7, #14]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	32ae      	adds	r2, #174	@ 0xae
 80096e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	6839      	ldr	r1, [r7, #0]
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	4798      	blx	r3
 80096ee:	4603      	mov	r3, r0
 80096f0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80096f2:	e004      	b.n	80096fe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80096f4:	2303      	movs	r3, #3
 80096f6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80096f8:	e001      	b.n	80096fe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80096fa:	2303      	movs	r3, #3
 80096fc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	88db      	ldrh	r3, [r3, #6]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d110      	bne.n	8009728 <USBD_StdItfReq+0xc0>
 8009706:	7bfb      	ldrb	r3, [r7, #15]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d10d      	bne.n	8009728 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 fddc 	bl	800a2ca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009712:	e009      	b.n	8009728 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009714:	6839      	ldr	r1, [r7, #0]
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 fcf9 	bl	800a10e <USBD_CtlError>
          break;
 800971c:	e004      	b.n	8009728 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800971e:	6839      	ldr	r1, [r7, #0]
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 fcf4 	bl	800a10e <USBD_CtlError>
          break;
 8009726:	e000      	b.n	800972a <USBD_StdItfReq+0xc2>
          break;
 8009728:	bf00      	nop
      }
      break;
 800972a:	e004      	b.n	8009736 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800972c:	6839      	ldr	r1, [r7, #0]
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 fced 	bl	800a10e <USBD_CtlError>
      break;
 8009734:	bf00      	nop
  }

  return ret;
 8009736:	7bfb      	ldrb	r3, [r7, #15]
}
 8009738:	4618      	mov	r0, r3
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800974a:	2300      	movs	r3, #0
 800974c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	889b      	ldrh	r3, [r3, #4]
 8009752:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800975c:	2b40      	cmp	r3, #64	@ 0x40
 800975e:	d007      	beq.n	8009770 <USBD_StdEPReq+0x30>
 8009760:	2b40      	cmp	r3, #64	@ 0x40
 8009762:	f200 8181 	bhi.w	8009a68 <USBD_StdEPReq+0x328>
 8009766:	2b00      	cmp	r3, #0
 8009768:	d02a      	beq.n	80097c0 <USBD_StdEPReq+0x80>
 800976a:	2b20      	cmp	r3, #32
 800976c:	f040 817c 	bne.w	8009a68 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009770:	7bbb      	ldrb	r3, [r7, #14]
 8009772:	4619      	mov	r1, r3
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f7ff fe84 	bl	8009482 <USBD_CoreFindEP>
 800977a:	4603      	mov	r3, r0
 800977c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800977e:	7b7b      	ldrb	r3, [r7, #13]
 8009780:	2bff      	cmp	r3, #255	@ 0xff
 8009782:	f000 8176 	beq.w	8009a72 <USBD_StdEPReq+0x332>
 8009786:	7b7b      	ldrb	r3, [r7, #13]
 8009788:	2b00      	cmp	r3, #0
 800978a:	f040 8172 	bne.w	8009a72 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800978e:	7b7a      	ldrb	r2, [r7, #13]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009796:	7b7a      	ldrb	r2, [r7, #13]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	32ae      	adds	r2, #174	@ 0xae
 800979c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	f000 8165 	beq.w	8009a72 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80097a8:	7b7a      	ldrb	r2, [r7, #13]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	32ae      	adds	r2, #174	@ 0xae
 80097ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	6839      	ldr	r1, [r7, #0]
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	4798      	blx	r3
 80097ba:	4603      	mov	r3, r0
 80097bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80097be:	e158      	b.n	8009a72 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	785b      	ldrb	r3, [r3, #1]
 80097c4:	2b03      	cmp	r3, #3
 80097c6:	d008      	beq.n	80097da <USBD_StdEPReq+0x9a>
 80097c8:	2b03      	cmp	r3, #3
 80097ca:	f300 8147 	bgt.w	8009a5c <USBD_StdEPReq+0x31c>
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	f000 809b 	beq.w	800990a <USBD_StdEPReq+0x1ca>
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d03c      	beq.n	8009852 <USBD_StdEPReq+0x112>
 80097d8:	e140      	b.n	8009a5c <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	d002      	beq.n	80097ec <USBD_StdEPReq+0xac>
 80097e6:	2b03      	cmp	r3, #3
 80097e8:	d016      	beq.n	8009818 <USBD_StdEPReq+0xd8>
 80097ea:	e02c      	b.n	8009846 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097ec:	7bbb      	ldrb	r3, [r7, #14]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00d      	beq.n	800980e <USBD_StdEPReq+0xce>
 80097f2:	7bbb      	ldrb	r3, [r7, #14]
 80097f4:	2b80      	cmp	r3, #128	@ 0x80
 80097f6:	d00a      	beq.n	800980e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80097f8:	7bbb      	ldrb	r3, [r7, #14]
 80097fa:	4619      	mov	r1, r3
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f001 f9e7 	bl	800abd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009802:	2180      	movs	r1, #128	@ 0x80
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f001 f9e3 	bl	800abd0 <USBD_LL_StallEP>
 800980a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800980c:	e020      	b.n	8009850 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800980e:	6839      	ldr	r1, [r7, #0]
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 fc7c 	bl	800a10e <USBD_CtlError>
              break;
 8009816:	e01b      	b.n	8009850 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	885b      	ldrh	r3, [r3, #2]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d10e      	bne.n	800983e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009820:	7bbb      	ldrb	r3, [r7, #14]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d00b      	beq.n	800983e <USBD_StdEPReq+0xfe>
 8009826:	7bbb      	ldrb	r3, [r7, #14]
 8009828:	2b80      	cmp	r3, #128	@ 0x80
 800982a:	d008      	beq.n	800983e <USBD_StdEPReq+0xfe>
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	88db      	ldrh	r3, [r3, #6]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d104      	bne.n	800983e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009834:	7bbb      	ldrb	r3, [r7, #14]
 8009836:	4619      	mov	r1, r3
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f001 f9c9 	bl	800abd0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fd43 	bl	800a2ca <USBD_CtlSendStatus>

              break;
 8009844:	e004      	b.n	8009850 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009846:	6839      	ldr	r1, [r7, #0]
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 fc60 	bl	800a10e <USBD_CtlError>
              break;
 800984e:	bf00      	nop
          }
          break;
 8009850:	e109      	b.n	8009a66 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009858:	b2db      	uxtb	r3, r3
 800985a:	2b02      	cmp	r3, #2
 800985c:	d002      	beq.n	8009864 <USBD_StdEPReq+0x124>
 800985e:	2b03      	cmp	r3, #3
 8009860:	d016      	beq.n	8009890 <USBD_StdEPReq+0x150>
 8009862:	e04b      	b.n	80098fc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009864:	7bbb      	ldrb	r3, [r7, #14]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00d      	beq.n	8009886 <USBD_StdEPReq+0x146>
 800986a:	7bbb      	ldrb	r3, [r7, #14]
 800986c:	2b80      	cmp	r3, #128	@ 0x80
 800986e:	d00a      	beq.n	8009886 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009870:	7bbb      	ldrb	r3, [r7, #14]
 8009872:	4619      	mov	r1, r3
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f001 f9ab 	bl	800abd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800987a:	2180      	movs	r1, #128	@ 0x80
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f001 f9a7 	bl	800abd0 <USBD_LL_StallEP>
 8009882:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009884:	e040      	b.n	8009908 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009886:	6839      	ldr	r1, [r7, #0]
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 fc40 	bl	800a10e <USBD_CtlError>
              break;
 800988e:	e03b      	b.n	8009908 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	885b      	ldrh	r3, [r3, #2]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d136      	bne.n	8009906 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009898:	7bbb      	ldrb	r3, [r7, #14]
 800989a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d004      	beq.n	80098ac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80098a2:	7bbb      	ldrb	r3, [r7, #14]
 80098a4:	4619      	mov	r1, r3
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f001 f9b1 	bl	800ac0e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 fd0c 	bl	800a2ca <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80098b2:	7bbb      	ldrb	r3, [r7, #14]
 80098b4:	4619      	mov	r1, r3
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f7ff fde3 	bl	8009482 <USBD_CoreFindEP>
 80098bc:	4603      	mov	r3, r0
 80098be:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80098c0:	7b7b      	ldrb	r3, [r7, #13]
 80098c2:	2bff      	cmp	r3, #255	@ 0xff
 80098c4:	d01f      	beq.n	8009906 <USBD_StdEPReq+0x1c6>
 80098c6:	7b7b      	ldrb	r3, [r7, #13]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d11c      	bne.n	8009906 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80098cc:	7b7a      	ldrb	r2, [r7, #13]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80098d4:	7b7a      	ldrb	r2, [r7, #13]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	32ae      	adds	r2, #174	@ 0xae
 80098da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d010      	beq.n	8009906 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80098e4:	7b7a      	ldrb	r2, [r7, #13]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	32ae      	adds	r2, #174	@ 0xae
 80098ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098ee:	689b      	ldr	r3, [r3, #8]
 80098f0:	6839      	ldr	r1, [r7, #0]
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	4798      	blx	r3
 80098f6:	4603      	mov	r3, r0
 80098f8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80098fa:	e004      	b.n	8009906 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80098fc:	6839      	ldr	r1, [r7, #0]
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 fc05 	bl	800a10e <USBD_CtlError>
              break;
 8009904:	e000      	b.n	8009908 <USBD_StdEPReq+0x1c8>
              break;
 8009906:	bf00      	nop
          }
          break;
 8009908:	e0ad      	b.n	8009a66 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009910:	b2db      	uxtb	r3, r3
 8009912:	2b02      	cmp	r3, #2
 8009914:	d002      	beq.n	800991c <USBD_StdEPReq+0x1dc>
 8009916:	2b03      	cmp	r3, #3
 8009918:	d033      	beq.n	8009982 <USBD_StdEPReq+0x242>
 800991a:	e099      	b.n	8009a50 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800991c:	7bbb      	ldrb	r3, [r7, #14]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d007      	beq.n	8009932 <USBD_StdEPReq+0x1f2>
 8009922:	7bbb      	ldrb	r3, [r7, #14]
 8009924:	2b80      	cmp	r3, #128	@ 0x80
 8009926:	d004      	beq.n	8009932 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009928:	6839      	ldr	r1, [r7, #0]
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 fbef 	bl	800a10e <USBD_CtlError>
                break;
 8009930:	e093      	b.n	8009a5a <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009932:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009936:	2b00      	cmp	r3, #0
 8009938:	da0b      	bge.n	8009952 <USBD_StdEPReq+0x212>
 800993a:	7bbb      	ldrb	r3, [r7, #14]
 800993c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009940:	4613      	mov	r3, r2
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	4413      	add	r3, r2
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	3310      	adds	r3, #16
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	4413      	add	r3, r2
 800994e:	3304      	adds	r3, #4
 8009950:	e00b      	b.n	800996a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009952:	7bbb      	ldrb	r3, [r7, #14]
 8009954:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009958:	4613      	mov	r3, r2
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	4413      	add	r3, r2
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	4413      	add	r3, r2
 8009968:	3304      	adds	r3, #4
 800996a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	2200      	movs	r2, #0
 8009970:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	330e      	adds	r3, #14
 8009976:	2202      	movs	r2, #2
 8009978:	4619      	mov	r1, r3
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 fc44 	bl	800a208 <USBD_CtlSendData>
              break;
 8009980:	e06b      	b.n	8009a5a <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009982:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009986:	2b00      	cmp	r3, #0
 8009988:	da11      	bge.n	80099ae <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800998a:	7bbb      	ldrb	r3, [r7, #14]
 800998c:	f003 020f 	and.w	r2, r3, #15
 8009990:	6879      	ldr	r1, [r7, #4]
 8009992:	4613      	mov	r3, r2
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	4413      	add	r3, r2
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	440b      	add	r3, r1
 800999c:	3323      	adds	r3, #35	@ 0x23
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d117      	bne.n	80099d4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80099a4:	6839      	ldr	r1, [r7, #0]
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 fbb1 	bl	800a10e <USBD_CtlError>
                  break;
 80099ac:	e055      	b.n	8009a5a <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80099ae:	7bbb      	ldrb	r3, [r7, #14]
 80099b0:	f003 020f 	and.w	r2, r3, #15
 80099b4:	6879      	ldr	r1, [r7, #4]
 80099b6:	4613      	mov	r3, r2
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	4413      	add	r3, r2
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	440b      	add	r3, r1
 80099c0:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d104      	bne.n	80099d4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80099ca:	6839      	ldr	r1, [r7, #0]
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 fb9e 	bl	800a10e <USBD_CtlError>
                  break;
 80099d2:	e042      	b.n	8009a5a <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	da0b      	bge.n	80099f4 <USBD_StdEPReq+0x2b4>
 80099dc:	7bbb      	ldrb	r3, [r7, #14]
 80099de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80099e2:	4613      	mov	r3, r2
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	4413      	add	r3, r2
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	3310      	adds	r3, #16
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	4413      	add	r3, r2
 80099f0:	3304      	adds	r3, #4
 80099f2:	e00b      	b.n	8009a0c <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80099f4:	7bbb      	ldrb	r3, [r7, #14]
 80099f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099fa:	4613      	mov	r3, r2
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4413      	add	r3, r2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	4413      	add	r3, r2
 8009a0a:	3304      	adds	r3, #4
 8009a0c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009a0e:	7bbb      	ldrb	r3, [r7, #14]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d002      	beq.n	8009a1a <USBD_StdEPReq+0x2da>
 8009a14:	7bbb      	ldrb	r3, [r7, #14]
 8009a16:	2b80      	cmp	r3, #128	@ 0x80
 8009a18:	d103      	bne.n	8009a22 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	739a      	strb	r2, [r3, #14]
 8009a20:	e00e      	b.n	8009a40 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009a22:	7bbb      	ldrb	r3, [r7, #14]
 8009a24:	4619      	mov	r1, r3
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f001 f910 	bl	800ac4c <USBD_LL_IsStallEP>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d003      	beq.n	8009a3a <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	2201      	movs	r2, #1
 8009a36:	739a      	strb	r2, [r3, #14]
 8009a38:	e002      	b.n	8009a40 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	330e      	adds	r3, #14
 8009a44:	2202      	movs	r2, #2
 8009a46:	4619      	mov	r1, r3
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 fbdd 	bl	800a208 <USBD_CtlSendData>
              break;
 8009a4e:	e004      	b.n	8009a5a <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8009a50:	6839      	ldr	r1, [r7, #0]
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 fb5b 	bl	800a10e <USBD_CtlError>
              break;
 8009a58:	bf00      	nop
          }
          break;
 8009a5a:	e004      	b.n	8009a66 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8009a5c:	6839      	ldr	r1, [r7, #0]
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fb55 	bl	800a10e <USBD_CtlError>
          break;
 8009a64:	bf00      	nop
      }
      break;
 8009a66:	e005      	b.n	8009a74 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8009a68:	6839      	ldr	r1, [r7, #0]
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 fb4f 	bl	800a10e <USBD_CtlError>
      break;
 8009a70:	e000      	b.n	8009a74 <USBD_StdEPReq+0x334>
      break;
 8009a72:	bf00      	nop
  }

  return ret;
 8009a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
	...

08009a80 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009a92:	2300      	movs	r3, #0
 8009a94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	885b      	ldrh	r3, [r3, #2]
 8009a9a:	0a1b      	lsrs	r3, r3, #8
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	3b01      	subs	r3, #1
 8009aa0:	2b06      	cmp	r3, #6
 8009aa2:	f200 8128 	bhi.w	8009cf6 <USBD_GetDescriptor+0x276>
 8009aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8009aac <USBD_GetDescriptor+0x2c>)
 8009aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aac:	08009ac9 	.word	0x08009ac9
 8009ab0:	08009ae1 	.word	0x08009ae1
 8009ab4:	08009b21 	.word	0x08009b21
 8009ab8:	08009cf7 	.word	0x08009cf7
 8009abc:	08009cf7 	.word	0x08009cf7
 8009ac0:	08009c97 	.word	0x08009c97
 8009ac4:	08009cc3 	.word	0x08009cc3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	7c12      	ldrb	r2, [r2, #16]
 8009ad4:	f107 0108 	add.w	r1, r7, #8
 8009ad8:	4610      	mov	r0, r2
 8009ada:	4798      	blx	r3
 8009adc:	60f8      	str	r0, [r7, #12]
      break;
 8009ade:	e112      	b.n	8009d06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	7c1b      	ldrb	r3, [r3, #16]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d10d      	bne.n	8009b04 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009af0:	f107 0208 	add.w	r2, r7, #8
 8009af4:	4610      	mov	r0, r2
 8009af6:	4798      	blx	r3
 8009af8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	3301      	adds	r3, #1
 8009afe:	2202      	movs	r2, #2
 8009b00:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009b02:	e100      	b.n	8009d06 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b0c:	f107 0208 	add.w	r2, r7, #8
 8009b10:	4610      	mov	r0, r2
 8009b12:	4798      	blx	r3
 8009b14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	3301      	adds	r3, #1
 8009b1a:	2202      	movs	r2, #2
 8009b1c:	701a      	strb	r2, [r3, #0]
      break;
 8009b1e:	e0f2      	b.n	8009d06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	885b      	ldrh	r3, [r3, #2]
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	2b05      	cmp	r3, #5
 8009b28:	f200 80ac 	bhi.w	8009c84 <USBD_GetDescriptor+0x204>
 8009b2c:	a201      	add	r2, pc, #4	@ (adr r2, 8009b34 <USBD_GetDescriptor+0xb4>)
 8009b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b32:	bf00      	nop
 8009b34:	08009b4d 	.word	0x08009b4d
 8009b38:	08009b81 	.word	0x08009b81
 8009b3c:	08009bb5 	.word	0x08009bb5
 8009b40:	08009be9 	.word	0x08009be9
 8009b44:	08009c1d 	.word	0x08009c1d
 8009b48:	08009c51 	.word	0x08009c51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d00b      	beq.n	8009b70 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	7c12      	ldrb	r2, [r2, #16]
 8009b64:	f107 0108 	add.w	r1, r7, #8
 8009b68:	4610      	mov	r0, r2
 8009b6a:	4798      	blx	r3
 8009b6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b6e:	e091      	b.n	8009c94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b70:	6839      	ldr	r1, [r7, #0]
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 facb 	bl	800a10e <USBD_CtlError>
            err++;
 8009b78:	7afb      	ldrb	r3, [r7, #11]
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b7e:	e089      	b.n	8009c94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d00b      	beq.n	8009ba4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	7c12      	ldrb	r2, [r2, #16]
 8009b98:	f107 0108 	add.w	r1, r7, #8
 8009b9c:	4610      	mov	r0, r2
 8009b9e:	4798      	blx	r3
 8009ba0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ba2:	e077      	b.n	8009c94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ba4:	6839      	ldr	r1, [r7, #0]
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 fab1 	bl	800a10e <USBD_CtlError>
            err++;
 8009bac:	7afb      	ldrb	r3, [r7, #11]
 8009bae:	3301      	adds	r3, #1
 8009bb0:	72fb      	strb	r3, [r7, #11]
          break;
 8009bb2:	e06f      	b.n	8009c94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bba:	68db      	ldr	r3, [r3, #12]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d00b      	beq.n	8009bd8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	7c12      	ldrb	r2, [r2, #16]
 8009bcc:	f107 0108 	add.w	r1, r7, #8
 8009bd0:	4610      	mov	r0, r2
 8009bd2:	4798      	blx	r3
 8009bd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bd6:	e05d      	b.n	8009c94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bd8:	6839      	ldr	r1, [r7, #0]
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 fa97 	bl	800a10e <USBD_CtlError>
            err++;
 8009be0:	7afb      	ldrb	r3, [r7, #11]
 8009be2:	3301      	adds	r3, #1
 8009be4:	72fb      	strb	r3, [r7, #11]
          break;
 8009be6:	e055      	b.n	8009c94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bee:	691b      	ldr	r3, [r3, #16]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d00b      	beq.n	8009c0c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bfa:	691b      	ldr	r3, [r3, #16]
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	7c12      	ldrb	r2, [r2, #16]
 8009c00:	f107 0108 	add.w	r1, r7, #8
 8009c04:	4610      	mov	r0, r2
 8009c06:	4798      	blx	r3
 8009c08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c0a:	e043      	b.n	8009c94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c0c:	6839      	ldr	r1, [r7, #0]
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 fa7d 	bl	800a10e <USBD_CtlError>
            err++;
 8009c14:	7afb      	ldrb	r3, [r7, #11]
 8009c16:	3301      	adds	r3, #1
 8009c18:	72fb      	strb	r3, [r7, #11]
          break;
 8009c1a:	e03b      	b.n	8009c94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c22:	695b      	ldr	r3, [r3, #20]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d00b      	beq.n	8009c40 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c2e:	695b      	ldr	r3, [r3, #20]
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	7c12      	ldrb	r2, [r2, #16]
 8009c34:	f107 0108 	add.w	r1, r7, #8
 8009c38:	4610      	mov	r0, r2
 8009c3a:	4798      	blx	r3
 8009c3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c3e:	e029      	b.n	8009c94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c40:	6839      	ldr	r1, [r7, #0]
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 fa63 	bl	800a10e <USBD_CtlError>
            err++;
 8009c48:	7afb      	ldrb	r3, [r7, #11]
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	72fb      	strb	r3, [r7, #11]
          break;
 8009c4e:	e021      	b.n	8009c94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c56:	699b      	ldr	r3, [r3, #24]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d00b      	beq.n	8009c74 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c62:	699b      	ldr	r3, [r3, #24]
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	7c12      	ldrb	r2, [r2, #16]
 8009c68:	f107 0108 	add.w	r1, r7, #8
 8009c6c:	4610      	mov	r0, r2
 8009c6e:	4798      	blx	r3
 8009c70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c72:	e00f      	b.n	8009c94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c74:	6839      	ldr	r1, [r7, #0]
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 fa49 	bl	800a10e <USBD_CtlError>
            err++;
 8009c7c:	7afb      	ldrb	r3, [r7, #11]
 8009c7e:	3301      	adds	r3, #1
 8009c80:	72fb      	strb	r3, [r7, #11]
          break;
 8009c82:	e007      	b.n	8009c94 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009c84:	6839      	ldr	r1, [r7, #0]
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 fa41 	bl	800a10e <USBD_CtlError>
          err++;
 8009c8c:	7afb      	ldrb	r3, [r7, #11]
 8009c8e:	3301      	adds	r3, #1
 8009c90:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009c92:	bf00      	nop
      }
      break;
 8009c94:	e037      	b.n	8009d06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	7c1b      	ldrb	r3, [r3, #16]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d109      	bne.n	8009cb2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ca6:	f107 0208 	add.w	r2, r7, #8
 8009caa:	4610      	mov	r0, r2
 8009cac:	4798      	blx	r3
 8009cae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009cb0:	e029      	b.n	8009d06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009cb2:	6839      	ldr	r1, [r7, #0]
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 fa2a 	bl	800a10e <USBD_CtlError>
        err++;
 8009cba:	7afb      	ldrb	r3, [r7, #11]
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	72fb      	strb	r3, [r7, #11]
      break;
 8009cc0:	e021      	b.n	8009d06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	7c1b      	ldrb	r3, [r3, #16]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d10d      	bne.n	8009ce6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cd2:	f107 0208 	add.w	r2, r7, #8
 8009cd6:	4610      	mov	r0, r2
 8009cd8:	4798      	blx	r3
 8009cda:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	3301      	adds	r3, #1
 8009ce0:	2207      	movs	r2, #7
 8009ce2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ce4:	e00f      	b.n	8009d06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009ce6:	6839      	ldr	r1, [r7, #0]
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 fa10 	bl	800a10e <USBD_CtlError>
        err++;
 8009cee:	7afb      	ldrb	r3, [r7, #11]
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	72fb      	strb	r3, [r7, #11]
      break;
 8009cf4:	e007      	b.n	8009d06 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009cf6:	6839      	ldr	r1, [r7, #0]
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 fa08 	bl	800a10e <USBD_CtlError>
      err++;
 8009cfe:	7afb      	ldrb	r3, [r7, #11]
 8009d00:	3301      	adds	r3, #1
 8009d02:	72fb      	strb	r3, [r7, #11]
      break;
 8009d04:	bf00      	nop
  }

  if (err != 0U)
 8009d06:	7afb      	ldrb	r3, [r7, #11]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d11e      	bne.n	8009d4a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	88db      	ldrh	r3, [r3, #6]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d016      	beq.n	8009d42 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009d14:	893b      	ldrh	r3, [r7, #8]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00e      	beq.n	8009d38 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	88da      	ldrh	r2, [r3, #6]
 8009d1e:	893b      	ldrh	r3, [r7, #8]
 8009d20:	4293      	cmp	r3, r2
 8009d22:	bf28      	it	cs
 8009d24:	4613      	movcs	r3, r2
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009d2a:	893b      	ldrh	r3, [r7, #8]
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	68f9      	ldr	r1, [r7, #12]
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 fa69 	bl	800a208 <USBD_CtlSendData>
 8009d36:	e009      	b.n	8009d4c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009d38:	6839      	ldr	r1, [r7, #0]
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 f9e7 	bl	800a10e <USBD_CtlError>
 8009d40:	e004      	b.n	8009d4c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 fac1 	bl	800a2ca <USBD_CtlSendStatus>
 8009d48:	e000      	b.n	8009d4c <USBD_GetDescriptor+0x2cc>
    return;
 8009d4a:	bf00      	nop
  }
}
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop

08009d54 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	889b      	ldrh	r3, [r3, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d131      	bne.n	8009dca <USBD_SetAddress+0x76>
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	88db      	ldrh	r3, [r3, #6]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d12d      	bne.n	8009dca <USBD_SetAddress+0x76>
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	885b      	ldrh	r3, [r3, #2]
 8009d72:	2b7f      	cmp	r3, #127	@ 0x7f
 8009d74:	d829      	bhi.n	8009dca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	885b      	ldrh	r3, [r3, #2]
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	2b03      	cmp	r3, #3
 8009d8c:	d104      	bne.n	8009d98 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009d8e:	6839      	ldr	r1, [r7, #0]
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 f9bc 	bl	800a10e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d96:	e01d      	b.n	8009dd4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	7bfa      	ldrb	r2, [r7, #15]
 8009d9c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009da0:	7bfb      	ldrb	r3, [r7, #15]
 8009da2:	4619      	mov	r1, r3
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 ff7d 	bl	800aca4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 fa8d 	bl	800a2ca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009db0:	7bfb      	ldrb	r3, [r7, #15]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d004      	beq.n	8009dc0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2202      	movs	r2, #2
 8009dba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dbe:	e009      	b.n	8009dd4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dc8:	e004      	b.n	8009dd4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009dca:	6839      	ldr	r1, [r7, #0]
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 f99e 	bl	800a10e <USBD_CtlError>
  }
}
 8009dd2:	bf00      	nop
 8009dd4:	bf00      	nop
 8009dd6:	3710      	adds	r7, #16
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009de6:	2300      	movs	r3, #0
 8009de8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	885b      	ldrh	r3, [r3, #2]
 8009dee:	b2da      	uxtb	r2, r3
 8009df0:	4b4e      	ldr	r3, [pc, #312]	@ (8009f2c <USBD_SetConfig+0x150>)
 8009df2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009df4:	4b4d      	ldr	r3, [pc, #308]	@ (8009f2c <USBD_SetConfig+0x150>)
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d905      	bls.n	8009e08 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009dfc:	6839      	ldr	r1, [r7, #0]
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 f985 	bl	800a10e <USBD_CtlError>
    return USBD_FAIL;
 8009e04:	2303      	movs	r3, #3
 8009e06:	e08c      	b.n	8009f22 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	d002      	beq.n	8009e1a <USBD_SetConfig+0x3e>
 8009e14:	2b03      	cmp	r3, #3
 8009e16:	d029      	beq.n	8009e6c <USBD_SetConfig+0x90>
 8009e18:	e075      	b.n	8009f06 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009e1a:	4b44      	ldr	r3, [pc, #272]	@ (8009f2c <USBD_SetConfig+0x150>)
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d020      	beq.n	8009e64 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009e22:	4b42      	ldr	r3, [pc, #264]	@ (8009f2c <USBD_SetConfig+0x150>)
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	461a      	mov	r2, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009e2c:	4b3f      	ldr	r3, [pc, #252]	@ (8009f2c <USBD_SetConfig+0x150>)
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	4619      	mov	r1, r3
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f7fe ffcd 	bl	8008dd2 <USBD_SetClassConfig>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009e3c:	7bfb      	ldrb	r3, [r7, #15]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d008      	beq.n	8009e54 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009e42:	6839      	ldr	r1, [r7, #0]
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 f962 	bl	800a10e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2202      	movs	r2, #2
 8009e4e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009e52:	e065      	b.n	8009f20 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 fa38 	bl	800a2ca <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2203      	movs	r2, #3
 8009e5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009e62:	e05d      	b.n	8009f20 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 fa30 	bl	800a2ca <USBD_CtlSendStatus>
      break;
 8009e6a:	e059      	b.n	8009f20 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009e6c:	4b2f      	ldr	r3, [pc, #188]	@ (8009f2c <USBD_SetConfig+0x150>)
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d112      	bne.n	8009e9a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2202      	movs	r2, #2
 8009e78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009e7c:	4b2b      	ldr	r3, [pc, #172]	@ (8009f2c <USBD_SetConfig+0x150>)
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	461a      	mov	r2, r3
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e86:	4b29      	ldr	r3, [pc, #164]	@ (8009f2c <USBD_SetConfig+0x150>)
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f7fe ffbc 	bl	8008e0a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 fa19 	bl	800a2ca <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009e98:	e042      	b.n	8009f20 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009e9a:	4b24      	ldr	r3, [pc, #144]	@ (8009f2c <USBD_SetConfig+0x150>)
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d02a      	beq.n	8009efe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	b2db      	uxtb	r3, r3
 8009eae:	4619      	mov	r1, r3
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f7fe ffaa 	bl	8008e0a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8009f2c <USBD_SetConfig+0x150>)
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	461a      	mov	r2, r3
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8009f2c <USBD_SetConfig+0x150>)
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f7fe ff83 	bl	8008dd2 <USBD_SetClassConfig>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009ed0:	7bfb      	ldrb	r3, [r7, #15]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d00f      	beq.n	8009ef6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009ed6:	6839      	ldr	r1, [r7, #0]
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f000 f918 	bl	800a10e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f7fe ff8f 	bl	8008e0a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2202      	movs	r2, #2
 8009ef0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009ef4:	e014      	b.n	8009f20 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 f9e7 	bl	800a2ca <USBD_CtlSendStatus>
      break;
 8009efc:	e010      	b.n	8009f20 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 f9e3 	bl	800a2ca <USBD_CtlSendStatus>
      break;
 8009f04:	e00c      	b.n	8009f20 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009f06:	6839      	ldr	r1, [r7, #0]
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 f900 	bl	800a10e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009f0e:	4b07      	ldr	r3, [pc, #28]	@ (8009f2c <USBD_SetConfig+0x150>)
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	4619      	mov	r1, r3
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f7fe ff78 	bl	8008e0a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009f1a:	2303      	movs	r3, #3
 8009f1c:	73fb      	strb	r3, [r7, #15]
      break;
 8009f1e:	bf00      	nop
  }

  return ret;
 8009f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	200007c0 	.word	0x200007c0

08009f30 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	88db      	ldrh	r3, [r3, #6]
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d004      	beq.n	8009f4c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009f42:	6839      	ldr	r1, [r7, #0]
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 f8e2 	bl	800a10e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009f4a:	e023      	b.n	8009f94 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	2b02      	cmp	r3, #2
 8009f56:	dc02      	bgt.n	8009f5e <USBD_GetConfig+0x2e>
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	dc03      	bgt.n	8009f64 <USBD_GetConfig+0x34>
 8009f5c:	e015      	b.n	8009f8a <USBD_GetConfig+0x5a>
 8009f5e:	2b03      	cmp	r3, #3
 8009f60:	d00b      	beq.n	8009f7a <USBD_GetConfig+0x4a>
 8009f62:	e012      	b.n	8009f8a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	3308      	adds	r3, #8
 8009f6e:	2201      	movs	r2, #1
 8009f70:	4619      	mov	r1, r3
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 f948 	bl	800a208 <USBD_CtlSendData>
        break;
 8009f78:	e00c      	b.n	8009f94 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	3304      	adds	r3, #4
 8009f7e:	2201      	movs	r2, #1
 8009f80:	4619      	mov	r1, r3
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 f940 	bl	800a208 <USBD_CtlSendData>
        break;
 8009f88:	e004      	b.n	8009f94 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009f8a:	6839      	ldr	r1, [r7, #0]
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 f8be 	bl	800a10e <USBD_CtlError>
        break;
 8009f92:	bf00      	nop
}
 8009f94:	bf00      	nop
 8009f96:	3708      	adds	r7, #8
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	3b01      	subs	r3, #1
 8009fb0:	2b02      	cmp	r3, #2
 8009fb2:	d81e      	bhi.n	8009ff2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	88db      	ldrh	r3, [r3, #6]
 8009fb8:	2b02      	cmp	r3, #2
 8009fba:	d004      	beq.n	8009fc6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009fbc:	6839      	ldr	r1, [r7, #0]
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 f8a5 	bl	800a10e <USBD_CtlError>
        break;
 8009fc4:	e01a      	b.n	8009ffc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2201      	movs	r2, #1
 8009fca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d005      	beq.n	8009fe2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	68db      	ldr	r3, [r3, #12]
 8009fda:	f043 0202 	orr.w	r2, r3, #2
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	330c      	adds	r3, #12
 8009fe6:	2202      	movs	r2, #2
 8009fe8:	4619      	mov	r1, r3
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 f90c 	bl	800a208 <USBD_CtlSendData>
      break;
 8009ff0:	e004      	b.n	8009ffc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009ff2:	6839      	ldr	r1, [r7, #0]
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 f88a 	bl	800a10e <USBD_CtlError>
      break;
 8009ffa:	bf00      	nop
  }
}
 8009ffc:	bf00      	nop
 8009ffe:	3708      	adds	r7, #8
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b082      	sub	sp, #8
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	885b      	ldrh	r3, [r3, #2]
 800a012:	2b01      	cmp	r3, #1
 800a014:	d107      	bne.n	800a026 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2201      	movs	r2, #1
 800a01a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 f953 	bl	800a2ca <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a024:	e013      	b.n	800a04e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	885b      	ldrh	r3, [r3, #2]
 800a02a:	2b02      	cmp	r3, #2
 800a02c:	d10b      	bne.n	800a046 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	889b      	ldrh	r3, [r3, #4]
 800a032:	0a1b      	lsrs	r3, r3, #8
 800a034:	b29b      	uxth	r3, r3
 800a036:	b2da      	uxtb	r2, r3
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 f943 	bl	800a2ca <USBD_CtlSendStatus>
}
 800a044:	e003      	b.n	800a04e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a046:	6839      	ldr	r1, [r7, #0]
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 f860 	bl	800a10e <USBD_CtlError>
}
 800a04e:	bf00      	nop
 800a050:	3708      	adds	r7, #8
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}

0800a056 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a056:	b580      	push	{r7, lr}
 800a058:	b082      	sub	sp, #8
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
 800a05e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a066:	b2db      	uxtb	r3, r3
 800a068:	3b01      	subs	r3, #1
 800a06a:	2b02      	cmp	r3, #2
 800a06c:	d80b      	bhi.n	800a086 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	885b      	ldrh	r3, [r3, #2]
 800a072:	2b01      	cmp	r3, #1
 800a074:	d10c      	bne.n	800a090 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2200      	movs	r2, #0
 800a07a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 f923 	bl	800a2ca <USBD_CtlSendStatus>
      }
      break;
 800a084:	e004      	b.n	800a090 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a086:	6839      	ldr	r1, [r7, #0]
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 f840 	bl	800a10e <USBD_CtlError>
      break;
 800a08e:	e000      	b.n	800a092 <USBD_ClrFeature+0x3c>
      break;
 800a090:	bf00      	nop
  }
}
 800a092:	bf00      	nop
 800a094:	3708      	adds	r7, #8
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b084      	sub	sp, #16
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
 800a0a2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	781a      	ldrb	r2, [r3, #0]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	781a      	ldrb	r2, [r3, #0]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f7ff fa3d 	bl	8009544 <SWAPBYTE>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a0de:	68f8      	ldr	r0, [r7, #12]
 800a0e0:	f7ff fa30 	bl	8009544 <SWAPBYTE>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a0f8:	68f8      	ldr	r0, [r7, #12]
 800a0fa:	f7ff fa23 	bl	8009544 <SWAPBYTE>
 800a0fe:	4603      	mov	r3, r0
 800a100:	461a      	mov	r2, r3
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	80da      	strh	r2, [r3, #6]
}
 800a106:	bf00      	nop
 800a108:	3710      	adds	r7, #16
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b082      	sub	sp, #8
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
 800a116:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a118:	2180      	movs	r1, #128	@ 0x80
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 fd58 	bl	800abd0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a120:	2100      	movs	r1, #0
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 fd54 	bl	800abd0 <USBD_LL_StallEP>
}
 800a128:	bf00      	nop
 800a12a:	3708      	adds	r7, #8
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b086      	sub	sp, #24
 800a134:	af00      	add	r7, sp, #0
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	60b9      	str	r1, [r7, #8]
 800a13a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a13c:	2300      	movs	r3, #0
 800a13e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d042      	beq.n	800a1cc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a14a:	6938      	ldr	r0, [r7, #16]
 800a14c:	f000 f842 	bl	800a1d4 <USBD_GetLen>
 800a150:	4603      	mov	r3, r0
 800a152:	3301      	adds	r3, #1
 800a154:	005b      	lsls	r3, r3, #1
 800a156:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a15a:	d808      	bhi.n	800a16e <USBD_GetString+0x3e>
 800a15c:	6938      	ldr	r0, [r7, #16]
 800a15e:	f000 f839 	bl	800a1d4 <USBD_GetLen>
 800a162:	4603      	mov	r3, r0
 800a164:	3301      	adds	r3, #1
 800a166:	b29b      	uxth	r3, r3
 800a168:	005b      	lsls	r3, r3, #1
 800a16a:	b29a      	uxth	r2, r3
 800a16c:	e001      	b.n	800a172 <USBD_GetString+0x42>
 800a16e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a176:	7dfb      	ldrb	r3, [r7, #23]
 800a178:	68ba      	ldr	r2, [r7, #8]
 800a17a:	4413      	add	r3, r2
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	7812      	ldrb	r2, [r2, #0]
 800a180:	701a      	strb	r2, [r3, #0]
  idx++;
 800a182:	7dfb      	ldrb	r3, [r7, #23]
 800a184:	3301      	adds	r3, #1
 800a186:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a188:	7dfb      	ldrb	r3, [r7, #23]
 800a18a:	68ba      	ldr	r2, [r7, #8]
 800a18c:	4413      	add	r3, r2
 800a18e:	2203      	movs	r2, #3
 800a190:	701a      	strb	r2, [r3, #0]
  idx++;
 800a192:	7dfb      	ldrb	r3, [r7, #23]
 800a194:	3301      	adds	r3, #1
 800a196:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a198:	e013      	b.n	800a1c2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a19a:	7dfb      	ldrb	r3, [r7, #23]
 800a19c:	68ba      	ldr	r2, [r7, #8]
 800a19e:	4413      	add	r3, r2
 800a1a0:	693a      	ldr	r2, [r7, #16]
 800a1a2:	7812      	ldrb	r2, [r2, #0]
 800a1a4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	613b      	str	r3, [r7, #16]
    idx++;
 800a1ac:	7dfb      	ldrb	r3, [r7, #23]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a1b2:	7dfb      	ldrb	r3, [r7, #23]
 800a1b4:	68ba      	ldr	r2, [r7, #8]
 800a1b6:	4413      	add	r3, r2
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	701a      	strb	r2, [r3, #0]
    idx++;
 800a1bc:	7dfb      	ldrb	r3, [r7, #23]
 800a1be:	3301      	adds	r3, #1
 800a1c0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d1e7      	bne.n	800a19a <USBD_GetString+0x6a>
 800a1ca:	e000      	b.n	800a1ce <USBD_GetString+0x9e>
    return;
 800a1cc:	bf00      	nop
  }
}
 800a1ce:	3718      	adds	r7, #24
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b085      	sub	sp, #20
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a1e4:	e005      	b.n	800a1f2 <USBD_GetLen+0x1e>
  {
    len++;
 800a1e6:	7bfb      	ldrb	r3, [r7, #15]
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	3301      	adds	r3, #1
 800a1f0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	781b      	ldrb	r3, [r3, #0]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d1f5      	bne.n	800a1e6 <USBD_GetLen+0x12>
  }

  return len;
 800a1fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3714      	adds	r7, #20
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2202      	movs	r2, #2
 800a218:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	68ba      	ldr	r2, [r7, #8]
 800a226:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	68ba      	ldr	r2, [r7, #8]
 800a232:	2100      	movs	r1, #0
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f000 fd54 	bl	800ace2 <USBD_LL_Transmit>

  return USBD_OK;
 800a23a:	2300      	movs	r3, #0
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3710      	adds	r7, #16
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	60b9      	str	r1, [r7, #8]
 800a24e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	68ba      	ldr	r2, [r7, #8]
 800a254:	2100      	movs	r1, #0
 800a256:	68f8      	ldr	r0, [r7, #12]
 800a258:	f000 fd43 	bl	800ace2 <USBD_LL_Transmit>

  return USBD_OK;
 800a25c:	2300      	movs	r3, #0
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3710      	adds	r7, #16
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}

0800a266 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a266:	b580      	push	{r7, lr}
 800a268:	b084      	sub	sp, #16
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	60f8      	str	r0, [r7, #12]
 800a26e:	60b9      	str	r1, [r7, #8]
 800a270:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2203      	movs	r2, #3
 800a276:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	68ba      	ldr	r2, [r7, #8]
 800a286:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	68ba      	ldr	r2, [r7, #8]
 800a296:	2100      	movs	r1, #0
 800a298:	68f8      	ldr	r0, [r7, #12]
 800a29a:	f000 fd43 	bl	800ad24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a29e:	2300      	movs	r3, #0
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3710      	adds	r7, #16
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	60f8      	str	r0, [r7, #12]
 800a2b0:	60b9      	str	r1, [r7, #8]
 800a2b2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	68ba      	ldr	r2, [r7, #8]
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	68f8      	ldr	r0, [r7, #12]
 800a2bc:	f000 fd32 	bl	800ad24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a2c0:	2300      	movs	r3, #0
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b082      	sub	sp, #8
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2204      	movs	r2, #4
 800a2d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a2da:	2300      	movs	r3, #0
 800a2dc:	2200      	movs	r2, #0
 800a2de:	2100      	movs	r1, #0
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 fcfe 	bl	800ace2 <USBD_LL_Transmit>

  return USBD_OK;
 800a2e6:	2300      	movs	r3, #0
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3708      	adds	r7, #8
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2205      	movs	r2, #5
 800a2fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a300:	2300      	movs	r3, #0
 800a302:	2200      	movs	r2, #0
 800a304:	2100      	movs	r1, #0
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 fd0c 	bl	800ad24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a30c:	2300      	movs	r3, #0
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3708      	adds	r7, #8
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
	...

0800a318 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a31c:	2200      	movs	r2, #0
 800a31e:	4912      	ldr	r1, [pc, #72]	@ (800a368 <MX_USB_DEVICE_Init+0x50>)
 800a320:	4812      	ldr	r0, [pc, #72]	@ (800a36c <MX_USB_DEVICE_Init+0x54>)
 800a322:	f7fe fcd9 	bl	8008cd8 <USBD_Init>
 800a326:	4603      	mov	r3, r0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d001      	beq.n	800a330 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a32c:	f7f6 ff66 	bl	80011fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a330:	490f      	ldr	r1, [pc, #60]	@ (800a370 <MX_USB_DEVICE_Init+0x58>)
 800a332:	480e      	ldr	r0, [pc, #56]	@ (800a36c <MX_USB_DEVICE_Init+0x54>)
 800a334:	f7fe fd00 	bl	8008d38 <USBD_RegisterClass>
 800a338:	4603      	mov	r3, r0
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d001      	beq.n	800a342 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a33e:	f7f6 ff5d 	bl	80011fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a342:	490c      	ldr	r1, [pc, #48]	@ (800a374 <MX_USB_DEVICE_Init+0x5c>)
 800a344:	4809      	ldr	r0, [pc, #36]	@ (800a36c <MX_USB_DEVICE_Init+0x54>)
 800a346:	f7fe fbf7 	bl	8008b38 <USBD_CDC_RegisterInterface>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d001      	beq.n	800a354 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a350:	f7f6 ff54 	bl	80011fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a354:	4805      	ldr	r0, [pc, #20]	@ (800a36c <MX_USB_DEVICE_Init+0x54>)
 800a356:	f7fe fd25 	bl	8008da4 <USBD_Start>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d001      	beq.n	800a364 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a360:	f7f6 ff4c 	bl	80011fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a364:	bf00      	nop
 800a366:	bd80      	pop	{r7, pc}
 800a368:	200000b8 	.word	0x200000b8
 800a36c:	200007c4 	.word	0x200007c4
 800a370:	2000001c 	.word	0x2000001c
 800a374:	200000a4 	.word	0x200000a4

0800a378 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a37c:	2200      	movs	r2, #0
 800a37e:	4905      	ldr	r1, [pc, #20]	@ (800a394 <CDC_Init_FS+0x1c>)
 800a380:	4805      	ldr	r0, [pc, #20]	@ (800a398 <CDC_Init_FS+0x20>)
 800a382:	f7fe fbf3 	bl	8008b6c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a386:	4905      	ldr	r1, [pc, #20]	@ (800a39c <CDC_Init_FS+0x24>)
 800a388:	4803      	ldr	r0, [pc, #12]	@ (800a398 <CDC_Init_FS+0x20>)
 800a38a:	f7fe fc11 	bl	8008bb0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a38e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a390:	4618      	mov	r0, r3
 800a392:	bd80      	pop	{r7, pc}
 800a394:	20000ca0 	.word	0x20000ca0
 800a398:	200007c4 	.word	0x200007c4
 800a39c:	20000aa0 	.word	0x20000aa0

0800a3a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a3a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b083      	sub	sp, #12
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	6039      	str	r1, [r7, #0]
 800a3ba:	71fb      	strb	r3, [r7, #7]
 800a3bc:	4613      	mov	r3, r2
 800a3be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a3c0:	79fb      	ldrb	r3, [r7, #7]
 800a3c2:	2b23      	cmp	r3, #35	@ 0x23
 800a3c4:	f200 8098 	bhi.w	800a4f8 <CDC_Control_FS+0x148>
 800a3c8:	a201      	add	r2, pc, #4	@ (adr r2, 800a3d0 <CDC_Control_FS+0x20>)
 800a3ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ce:	bf00      	nop
 800a3d0:	0800a4f9 	.word	0x0800a4f9
 800a3d4:	0800a4f9 	.word	0x0800a4f9
 800a3d8:	0800a4f9 	.word	0x0800a4f9
 800a3dc:	0800a4f9 	.word	0x0800a4f9
 800a3e0:	0800a4f9 	.word	0x0800a4f9
 800a3e4:	0800a4f9 	.word	0x0800a4f9
 800a3e8:	0800a4f9 	.word	0x0800a4f9
 800a3ec:	0800a4f9 	.word	0x0800a4f9
 800a3f0:	0800a4f9 	.word	0x0800a4f9
 800a3f4:	0800a4f9 	.word	0x0800a4f9
 800a3f8:	0800a4f9 	.word	0x0800a4f9
 800a3fc:	0800a4f9 	.word	0x0800a4f9
 800a400:	0800a4f9 	.word	0x0800a4f9
 800a404:	0800a4f9 	.word	0x0800a4f9
 800a408:	0800a4f9 	.word	0x0800a4f9
 800a40c:	0800a4f9 	.word	0x0800a4f9
 800a410:	0800a4f9 	.word	0x0800a4f9
 800a414:	0800a4f9 	.word	0x0800a4f9
 800a418:	0800a4f9 	.word	0x0800a4f9
 800a41c:	0800a4f9 	.word	0x0800a4f9
 800a420:	0800a4f9 	.word	0x0800a4f9
 800a424:	0800a4f9 	.word	0x0800a4f9
 800a428:	0800a4f9 	.word	0x0800a4f9
 800a42c:	0800a4f9 	.word	0x0800a4f9
 800a430:	0800a4f9 	.word	0x0800a4f9
 800a434:	0800a4f9 	.word	0x0800a4f9
 800a438:	0800a4f9 	.word	0x0800a4f9
 800a43c:	0800a4f9 	.word	0x0800a4f9
 800a440:	0800a4f9 	.word	0x0800a4f9
 800a444:	0800a4f9 	.word	0x0800a4f9
 800a448:	0800a4f9 	.word	0x0800a4f9
 800a44c:	0800a4f9 	.word	0x0800a4f9
 800a450:	0800a461 	.word	0x0800a461
 800a454:	0800a4a5 	.word	0x0800a4a5
 800a458:	0800a4f9 	.word	0x0800a4f9
 800a45c:	0800a4f9 	.word	0x0800a4f9
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
     	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2]<<16) | (pbuf[3]<<24));
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	461a      	mov	r2, r3
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	3301      	adds	r3, #1
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	021b      	lsls	r3, r3, #8
 800a46e:	431a      	orrs	r2, r3
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	3302      	adds	r3, #2
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	041b      	lsls	r3, r3, #16
 800a478:	431a      	orrs	r2, r3
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	3303      	adds	r3, #3
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	061b      	lsls	r3, r3, #24
 800a482:	4313      	orrs	r3, r2
 800a484:	461a      	mov	r2, r3
 800a486:	4b20      	ldr	r3, [pc, #128]	@ (800a508 <CDC_Control_FS+0x158>)
 800a488:	601a      	str	r2, [r3, #0]
     	LineCoding.format = pbuf[4];
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	791a      	ldrb	r2, [r3, #4]
 800a48e:	4b1e      	ldr	r3, [pc, #120]	@ (800a508 <CDC_Control_FS+0x158>)
 800a490:	711a      	strb	r2, [r3, #4]
     	LineCoding.paritytype = pbuf[5];
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	795a      	ldrb	r2, [r3, #5]
 800a496:	4b1c      	ldr	r3, [pc, #112]	@ (800a508 <CDC_Control_FS+0x158>)
 800a498:	715a      	strb	r2, [r3, #5]
     	LineCoding.datatype = pbuf[6];
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	799a      	ldrb	r2, [r3, #6]
 800a49e:	4b1a      	ldr	r3, [pc, #104]	@ (800a508 <CDC_Control_FS+0x158>)
 800a4a0:	719a      	strb	r2, [r3, #6]
     break;
 800a4a2:	e02a      	b.n	800a4fa <CDC_Control_FS+0x14a>

     case CDC_GET_LINE_CODING:
     	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800a4a4:	4b18      	ldr	r3, [pc, #96]	@ (800a508 <CDC_Control_FS+0x158>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	b2da      	uxtb	r2, r3
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	701a      	strb	r2, [r3, #0]
     	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800a4ae:	4b16      	ldr	r3, [pc, #88]	@ (800a508 <CDC_Control_FS+0x158>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	0a1a      	lsrs	r2, r3, #8
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	b2d2      	uxtb	r2, r2
 800a4ba:	701a      	strb	r2, [r3, #0]
     	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800a4bc:	4b12      	ldr	r3, [pc, #72]	@ (800a508 <CDC_Control_FS+0x158>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	0c1a      	lsrs	r2, r3, #16
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	3302      	adds	r3, #2
 800a4c6:	b2d2      	uxtb	r2, r2
 800a4c8:	701a      	strb	r2, [r3, #0]
     	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800a4ca:	4b0f      	ldr	r3, [pc, #60]	@ (800a508 <CDC_Control_FS+0x158>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	0e1a      	lsrs	r2, r3, #24
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	3303      	adds	r3, #3
 800a4d4:	b2d2      	uxtb	r2, r2
 800a4d6:	701a      	strb	r2, [r3, #0]
     	pbuf[4] = LineCoding.format;
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	3304      	adds	r3, #4
 800a4dc:	4a0a      	ldr	r2, [pc, #40]	@ (800a508 <CDC_Control_FS+0x158>)
 800a4de:	7912      	ldrb	r2, [r2, #4]
 800a4e0:	701a      	strb	r2, [r3, #0]
     	pbuf[5] = LineCoding.paritytype;
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	3305      	adds	r3, #5
 800a4e6:	4a08      	ldr	r2, [pc, #32]	@ (800a508 <CDC_Control_FS+0x158>)
 800a4e8:	7952      	ldrb	r2, [r2, #5]
 800a4ea:	701a      	strb	r2, [r3, #0]
     	pbuf[6] = LineCoding.datatype;
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	3306      	adds	r3, #6
 800a4f0:	4a05      	ldr	r2, [pc, #20]	@ (800a508 <CDC_Control_FS+0x158>)
 800a4f2:	7992      	ldrb	r2, [r2, #6]
 800a4f4:	701a      	strb	r2, [r3, #0]
     break;
 800a4f6:	e000      	b.n	800a4fa <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a4f8:	bf00      	nop
  }

  return (USBD_OK);
 800a4fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr
 800a508:	2000009c 	.word	0x2000009c

0800a50c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 if(aPtrFunRx != NULL)
 800a516:	4b0c      	ldr	r3, [pc, #48]	@ (800a548 <CDC_Receive_FS+0x3c>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d007      	beq.n	800a52e <CDC_Receive_FS+0x22>
			aPtrFunRx(Buf, *Len);
 800a51e:	4b0a      	ldr	r3, [pc, #40]	@ (800a548 <CDC_Receive_FS+0x3c>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	683a      	ldr	r2, [r7, #0]
 800a524:	6812      	ldr	r2, [r2, #0]
 800a526:	b292      	uxth	r2, r2
 800a528:	4611      	mov	r1, r2
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	4798      	blx	r3
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a52e:	6879      	ldr	r1, [r7, #4]
 800a530:	4806      	ldr	r0, [pc, #24]	@ (800a54c <CDC_Receive_FS+0x40>)
 800a532:	f7fe fb3d 	bl	8008bb0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a536:	4805      	ldr	r0, [pc, #20]	@ (800a54c <CDC_Receive_FS+0x40>)
 800a538:	f7fe fb98 	bl	8008c6c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a53c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3708      	adds	r7, #8
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	20000ea0 	.word	0x20000ea0
 800a54c:	200007c4 	.word	0x200007c4

0800a550 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	460b      	mov	r3, r1
 800a55a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a55c:	2300      	movs	r3, #0
 800a55e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a560:	4b0d      	ldr	r3, [pc, #52]	@ (800a598 <CDC_Transmit_FS+0x48>)
 800a562:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a566:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d001      	beq.n	800a576 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a572:	2301      	movs	r3, #1
 800a574:	e00b      	b.n	800a58e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a576:	887b      	ldrh	r3, [r7, #2]
 800a578:	461a      	mov	r2, r3
 800a57a:	6879      	ldr	r1, [r7, #4]
 800a57c:	4806      	ldr	r0, [pc, #24]	@ (800a598 <CDC_Transmit_FS+0x48>)
 800a57e:	f7fe faf5 	bl	8008b6c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a582:	4805      	ldr	r0, [pc, #20]	@ (800a598 <CDC_Transmit_FS+0x48>)
 800a584:	f7fe fb32 	bl	8008bec <USBD_CDC_TransmitPacket>
 800a588:	4603      	mov	r3, r0
 800a58a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a58c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	200007c4 	.word	0x200007c4

0800a59c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b087      	sub	sp, #28
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a5ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	371c      	adds	r7, #28
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr
	...

0800a5c0 <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 800a5c8:	4a04      	ldr	r2, [pc, #16]	@ (800a5dc <CDC_AttachRxData+0x1c>)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6013      	str	r3, [r2, #0]
}
 800a5ce:	bf00      	nop
 800a5d0:	370c      	adds	r7, #12
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr
 800a5da:	bf00      	nop
 800a5dc:	20000ea0 	.word	0x20000ea0

0800a5e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b083      	sub	sp, #12
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	6039      	str	r1, [r7, #0]
 800a5ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	2212      	movs	r2, #18
 800a5f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a5f2:	4b03      	ldr	r3, [pc, #12]	@ (800a600 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr
 800a600:	200000d4 	.word	0x200000d4

0800a604 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
 800a60a:	4603      	mov	r3, r0
 800a60c:	6039      	str	r1, [r7, #0]
 800a60e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	2204      	movs	r2, #4
 800a614:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a616:	4b03      	ldr	r3, [pc, #12]	@ (800a624 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a618:	4618      	mov	r0, r3
 800a61a:	370c      	adds	r7, #12
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr
 800a624:	200000e8 	.word	0x200000e8

0800a628 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	4603      	mov	r3, r0
 800a630:	6039      	str	r1, [r7, #0]
 800a632:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a634:	79fb      	ldrb	r3, [r7, #7]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d105      	bne.n	800a646 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a63a:	683a      	ldr	r2, [r7, #0]
 800a63c:	4907      	ldr	r1, [pc, #28]	@ (800a65c <USBD_FS_ProductStrDescriptor+0x34>)
 800a63e:	4808      	ldr	r0, [pc, #32]	@ (800a660 <USBD_FS_ProductStrDescriptor+0x38>)
 800a640:	f7ff fd76 	bl	800a130 <USBD_GetString>
 800a644:	e004      	b.n	800a650 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a646:	683a      	ldr	r2, [r7, #0]
 800a648:	4904      	ldr	r1, [pc, #16]	@ (800a65c <USBD_FS_ProductStrDescriptor+0x34>)
 800a64a:	4805      	ldr	r0, [pc, #20]	@ (800a660 <USBD_FS_ProductStrDescriptor+0x38>)
 800a64c:	f7ff fd70 	bl	800a130 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a650:	4b02      	ldr	r3, [pc, #8]	@ (800a65c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a652:	4618      	mov	r0, r3
 800a654:	3708      	adds	r7, #8
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop
 800a65c:	20000ea4 	.word	0x20000ea4
 800a660:	0800b78c 	.word	0x0800b78c

0800a664 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b082      	sub	sp, #8
 800a668:	af00      	add	r7, sp, #0
 800a66a:	4603      	mov	r3, r0
 800a66c:	6039      	str	r1, [r7, #0]
 800a66e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a670:	683a      	ldr	r2, [r7, #0]
 800a672:	4904      	ldr	r1, [pc, #16]	@ (800a684 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a674:	4804      	ldr	r0, [pc, #16]	@ (800a688 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a676:	f7ff fd5b 	bl	800a130 <USBD_GetString>
  return USBD_StrDesc;
 800a67a:	4b02      	ldr	r3, [pc, #8]	@ (800a684 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3708      	adds	r7, #8
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}
 800a684:	20000ea4 	.word	0x20000ea4
 800a688:	0800b7a4 	.word	0x0800b7a4

0800a68c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
 800a692:	4603      	mov	r3, r0
 800a694:	6039      	str	r1, [r7, #0]
 800a696:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	221a      	movs	r2, #26
 800a69c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a69e:	f000 f843 	bl	800a728 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a6a2:	4b02      	ldr	r3, [pc, #8]	@ (800a6ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3708      	adds	r7, #8
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}
 800a6ac:	200000ec 	.word	0x200000ec

0800a6b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	6039      	str	r1, [r7, #0]
 800a6ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a6bc:	79fb      	ldrb	r3, [r7, #7]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d105      	bne.n	800a6ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a6c2:	683a      	ldr	r2, [r7, #0]
 800a6c4:	4907      	ldr	r1, [pc, #28]	@ (800a6e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a6c6:	4808      	ldr	r0, [pc, #32]	@ (800a6e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a6c8:	f7ff fd32 	bl	800a130 <USBD_GetString>
 800a6cc:	e004      	b.n	800a6d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a6ce:	683a      	ldr	r2, [r7, #0]
 800a6d0:	4904      	ldr	r1, [pc, #16]	@ (800a6e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a6d2:	4805      	ldr	r0, [pc, #20]	@ (800a6e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a6d4:	f7ff fd2c 	bl	800a130 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a6d8:	4b02      	ldr	r3, [pc, #8]	@ (800a6e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3708      	adds	r7, #8
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	20000ea4 	.word	0x20000ea4
 800a6e8:	0800b7b8 	.word	0x0800b7b8

0800a6ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	6039      	str	r1, [r7, #0]
 800a6f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a6f8:	79fb      	ldrb	r3, [r7, #7]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d105      	bne.n	800a70a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a6fe:	683a      	ldr	r2, [r7, #0]
 800a700:	4907      	ldr	r1, [pc, #28]	@ (800a720 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a702:	4808      	ldr	r0, [pc, #32]	@ (800a724 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a704:	f7ff fd14 	bl	800a130 <USBD_GetString>
 800a708:	e004      	b.n	800a714 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a70a:	683a      	ldr	r2, [r7, #0]
 800a70c:	4904      	ldr	r1, [pc, #16]	@ (800a720 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a70e:	4805      	ldr	r0, [pc, #20]	@ (800a724 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a710:	f7ff fd0e 	bl	800a130 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a714:	4b02      	ldr	r3, [pc, #8]	@ (800a720 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a716:	4618      	mov	r0, r3
 800a718:	3708      	adds	r7, #8
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	bf00      	nop
 800a720:	20000ea4 	.word	0x20000ea4
 800a724:	0800b7c4 	.word	0x0800b7c4

0800a728 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a72e:	4b0f      	ldr	r3, [pc, #60]	@ (800a76c <Get_SerialNum+0x44>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a734:	4b0e      	ldr	r3, [pc, #56]	@ (800a770 <Get_SerialNum+0x48>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a73a:	4b0e      	ldr	r3, [pc, #56]	@ (800a774 <Get_SerialNum+0x4c>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a740:	68fa      	ldr	r2, [r7, #12]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	4413      	add	r3, r2
 800a746:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d009      	beq.n	800a762 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a74e:	2208      	movs	r2, #8
 800a750:	4909      	ldr	r1, [pc, #36]	@ (800a778 <Get_SerialNum+0x50>)
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	f000 f814 	bl	800a780 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a758:	2204      	movs	r2, #4
 800a75a:	4908      	ldr	r1, [pc, #32]	@ (800a77c <Get_SerialNum+0x54>)
 800a75c:	68b8      	ldr	r0, [r7, #8]
 800a75e:	f000 f80f 	bl	800a780 <IntToUnicode>
  }
}
 800a762:	bf00      	nop
 800a764:	3710      	adds	r7, #16
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
 800a76a:	bf00      	nop
 800a76c:	1fff7a10 	.word	0x1fff7a10
 800a770:	1fff7a14 	.word	0x1fff7a14
 800a774:	1fff7a18 	.word	0x1fff7a18
 800a778:	200000ee 	.word	0x200000ee
 800a77c:	200000fe 	.word	0x200000fe

0800a780 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a780:	b480      	push	{r7}
 800a782:	b087      	sub	sp, #28
 800a784:	af00      	add	r7, sp, #0
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	60b9      	str	r1, [r7, #8]
 800a78a:	4613      	mov	r3, r2
 800a78c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a78e:	2300      	movs	r3, #0
 800a790:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a792:	2300      	movs	r3, #0
 800a794:	75fb      	strb	r3, [r7, #23]
 800a796:	e027      	b.n	800a7e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	0f1b      	lsrs	r3, r3, #28
 800a79c:	2b09      	cmp	r3, #9
 800a79e:	d80b      	bhi.n	800a7b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	0f1b      	lsrs	r3, r3, #28
 800a7a4:	b2da      	uxtb	r2, r3
 800a7a6:	7dfb      	ldrb	r3, [r7, #23]
 800a7a8:	005b      	lsls	r3, r3, #1
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	440b      	add	r3, r1
 800a7b0:	3230      	adds	r2, #48	@ 0x30
 800a7b2:	b2d2      	uxtb	r2, r2
 800a7b4:	701a      	strb	r2, [r3, #0]
 800a7b6:	e00a      	b.n	800a7ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	0f1b      	lsrs	r3, r3, #28
 800a7bc:	b2da      	uxtb	r2, r3
 800a7be:	7dfb      	ldrb	r3, [r7, #23]
 800a7c0:	005b      	lsls	r3, r3, #1
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	440b      	add	r3, r1
 800a7c8:	3237      	adds	r2, #55	@ 0x37
 800a7ca:	b2d2      	uxtb	r2, r2
 800a7cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	011b      	lsls	r3, r3, #4
 800a7d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a7d4:	7dfb      	ldrb	r3, [r7, #23]
 800a7d6:	005b      	lsls	r3, r3, #1
 800a7d8:	3301      	adds	r3, #1
 800a7da:	68ba      	ldr	r2, [r7, #8]
 800a7dc:	4413      	add	r3, r2
 800a7de:	2200      	movs	r2, #0
 800a7e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a7e2:	7dfb      	ldrb	r3, [r7, #23]
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	75fb      	strb	r3, [r7, #23]
 800a7e8:	7dfa      	ldrb	r2, [r7, #23]
 800a7ea:	79fb      	ldrb	r3, [r7, #7]
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d3d3      	bcc.n	800a798 <IntToUnicode+0x18>
  }
}
 800a7f0:	bf00      	nop
 800a7f2:	bf00      	nop
 800a7f4:	371c      	adds	r7, #28
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr
	...

0800a800 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b08a      	sub	sp, #40	@ 0x28
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a808:	f107 0314 	add.w	r3, r7, #20
 800a80c:	2200      	movs	r2, #0
 800a80e:	601a      	str	r2, [r3, #0]
 800a810:	605a      	str	r2, [r3, #4]
 800a812:	609a      	str	r2, [r3, #8]
 800a814:	60da      	str	r2, [r3, #12]
 800a816:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a820:	d13a      	bne.n	800a898 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a822:	2300      	movs	r3, #0
 800a824:	613b      	str	r3, [r7, #16]
 800a826:	4b1e      	ldr	r3, [pc, #120]	@ (800a8a0 <HAL_PCD_MspInit+0xa0>)
 800a828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a82a:	4a1d      	ldr	r2, [pc, #116]	@ (800a8a0 <HAL_PCD_MspInit+0xa0>)
 800a82c:	f043 0301 	orr.w	r3, r3, #1
 800a830:	6313      	str	r3, [r2, #48]	@ 0x30
 800a832:	4b1b      	ldr	r3, [pc, #108]	@ (800a8a0 <HAL_PCD_MspInit+0xa0>)
 800a834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a836:	f003 0301 	and.w	r3, r3, #1
 800a83a:	613b      	str	r3, [r7, #16]
 800a83c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a83e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a844:	2302      	movs	r3, #2
 800a846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a848:	2300      	movs	r3, #0
 800a84a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a84c:	2303      	movs	r3, #3
 800a84e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a850:	230a      	movs	r3, #10
 800a852:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a854:	f107 0314 	add.w	r3, r7, #20
 800a858:	4619      	mov	r1, r3
 800a85a:	4812      	ldr	r0, [pc, #72]	@ (800a8a4 <HAL_PCD_MspInit+0xa4>)
 800a85c:	f7f8 f9e2 	bl	8002c24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a860:	4b0f      	ldr	r3, [pc, #60]	@ (800a8a0 <HAL_PCD_MspInit+0xa0>)
 800a862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a864:	4a0e      	ldr	r2, [pc, #56]	@ (800a8a0 <HAL_PCD_MspInit+0xa0>)
 800a866:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a86a:	6353      	str	r3, [r2, #52]	@ 0x34
 800a86c:	2300      	movs	r3, #0
 800a86e:	60fb      	str	r3, [r7, #12]
 800a870:	4b0b      	ldr	r3, [pc, #44]	@ (800a8a0 <HAL_PCD_MspInit+0xa0>)
 800a872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a874:	4a0a      	ldr	r2, [pc, #40]	@ (800a8a0 <HAL_PCD_MspInit+0xa0>)
 800a876:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a87a:	6453      	str	r3, [r2, #68]	@ 0x44
 800a87c:	4b08      	ldr	r3, [pc, #32]	@ (800a8a0 <HAL_PCD_MspInit+0xa0>)
 800a87e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a880:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a884:	60fb      	str	r3, [r7, #12]
 800a886:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a888:	2200      	movs	r2, #0
 800a88a:	2100      	movs	r1, #0
 800a88c:	2043      	movs	r0, #67	@ 0x43
 800a88e:	f7f7 fe16 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a892:	2043      	movs	r0, #67	@ 0x43
 800a894:	f7f7 fe2f 	bl	80024f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a898:	bf00      	nop
 800a89a:	3728      	adds	r7, #40	@ 0x28
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	40023800 	.word	0x40023800
 800a8a4:	40020000 	.word	0x40020000

0800a8a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a8bc:	4619      	mov	r1, r3
 800a8be:	4610      	mov	r0, r2
 800a8c0:	f7fe fabd 	bl	8008e3e <USBD_LL_SetupStage>
}
 800a8c4:	bf00      	nop
 800a8c6:	3708      	adds	r7, #8
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b082      	sub	sp, #8
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	460b      	mov	r3, r1
 800a8d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a8de:	78fa      	ldrb	r2, [r7, #3]
 800a8e0:	6879      	ldr	r1, [r7, #4]
 800a8e2:	4613      	mov	r3, r2
 800a8e4:	00db      	lsls	r3, r3, #3
 800a8e6:	4413      	add	r3, r2
 800a8e8:	009b      	lsls	r3, r3, #2
 800a8ea:	440b      	add	r3, r1
 800a8ec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	78fb      	ldrb	r3, [r7, #3]
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	f7fe faf7 	bl	8008ee8 <USBD_LL_DataOutStage>
}
 800a8fa:	bf00      	nop
 800a8fc:	3708      	adds	r7, #8
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a902:	b580      	push	{r7, lr}
 800a904:	b082      	sub	sp, #8
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
 800a90a:	460b      	mov	r3, r1
 800a90c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a914:	78fa      	ldrb	r2, [r7, #3]
 800a916:	6879      	ldr	r1, [r7, #4]
 800a918:	4613      	mov	r3, r2
 800a91a:	00db      	lsls	r3, r3, #3
 800a91c:	4413      	add	r3, r2
 800a91e:	009b      	lsls	r3, r3, #2
 800a920:	440b      	add	r3, r1
 800a922:	3320      	adds	r3, #32
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	78fb      	ldrb	r3, [r7, #3]
 800a928:	4619      	mov	r1, r3
 800a92a:	f7fe fb99 	bl	8009060 <USBD_LL_DataInStage>
}
 800a92e:	bf00      	nop
 800a930:	3708      	adds	r7, #8
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}

0800a936 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a936:	b580      	push	{r7, lr}
 800a938:	b082      	sub	sp, #8
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a944:	4618      	mov	r0, r3
 800a946:	f7fe fcdd 	bl	8009304 <USBD_LL_SOF>
}
 800a94a:	bf00      	nop
 800a94c:	3708      	adds	r7, #8
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}

0800a952 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a952:	b580      	push	{r7, lr}
 800a954:	b084      	sub	sp, #16
 800a956:	af00      	add	r7, sp, #0
 800a958:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a95a:	2301      	movs	r3, #1
 800a95c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	79db      	ldrb	r3, [r3, #7]
 800a962:	2b02      	cmp	r3, #2
 800a964:	d001      	beq.n	800a96a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a966:	f7f6 fc49 	bl	80011fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a970:	7bfa      	ldrb	r2, [r7, #15]
 800a972:	4611      	mov	r1, r2
 800a974:	4618      	mov	r0, r3
 800a976:	f7fe fc81 	bl	800927c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a980:	4618      	mov	r0, r3
 800a982:	f7fe fc28 	bl	80091d6 <USBD_LL_Reset>
}
 800a986:	bf00      	nop
 800a988:	3710      	adds	r7, #16
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
	...

0800a990 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b082      	sub	sp, #8
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7fe fc7c 	bl	800929c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	6812      	ldr	r2, [r2, #0]
 800a9b2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a9b6:	f043 0301 	orr.w	r3, r3, #1
 800a9ba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	7adb      	ldrb	r3, [r3, #11]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d005      	beq.n	800a9d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a9c4:	4b04      	ldr	r3, [pc, #16]	@ (800a9d8 <HAL_PCD_SuspendCallback+0x48>)
 800a9c6:	691b      	ldr	r3, [r3, #16]
 800a9c8:	4a03      	ldr	r2, [pc, #12]	@ (800a9d8 <HAL_PCD_SuspendCallback+0x48>)
 800a9ca:	f043 0306 	orr.w	r3, r3, #6
 800a9ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a9d0:	bf00      	nop
 800a9d2:	3708      	adds	r7, #8
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}
 800a9d8:	e000ed00 	.word	0xe000ed00

0800a9dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b082      	sub	sp, #8
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7fe fc72 	bl	80092d4 <USBD_LL_Resume>
}
 800a9f0:	bf00      	nop
 800a9f2:	3708      	adds	r7, #8
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	460b      	mov	r3, r1
 800aa02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aa0a:	78fa      	ldrb	r2, [r7, #3]
 800aa0c:	4611      	mov	r1, r2
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7fe fcca 	bl	80093a8 <USBD_LL_IsoOUTIncomplete>
}
 800aa14:	bf00      	nop
 800aa16:	3708      	adds	r7, #8
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	460b      	mov	r3, r1
 800aa26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aa2e:	78fa      	ldrb	r2, [r7, #3]
 800aa30:	4611      	mov	r1, r2
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7fe fc86 	bl	8009344 <USBD_LL_IsoINIncomplete>
}
 800aa38:	bf00      	nop
 800aa3a:	3708      	adds	r7, #8
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b082      	sub	sp, #8
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f7fe fcdc 	bl	800940c <USBD_LL_DevConnected>
}
 800aa54:	bf00      	nop
 800aa56:	3708      	adds	r7, #8
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b082      	sub	sp, #8
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7fe fcd9 	bl	8009422 <USBD_LL_DevDisconnected>
}
 800aa70:	bf00      	nop
 800aa72:	3708      	adds	r7, #8
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d13c      	bne.n	800ab02 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800aa88:	4a20      	ldr	r2, [pc, #128]	@ (800ab0c <USBD_LL_Init+0x94>)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	4a1e      	ldr	r2, [pc, #120]	@ (800ab0c <USBD_LL_Init+0x94>)
 800aa94:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800aa98:	4b1c      	ldr	r3, [pc, #112]	@ (800ab0c <USBD_LL_Init+0x94>)
 800aa9a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800aa9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800aaa0:	4b1a      	ldr	r3, [pc, #104]	@ (800ab0c <USBD_LL_Init+0x94>)
 800aaa2:	2204      	movs	r2, #4
 800aaa4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800aaa6:	4b19      	ldr	r3, [pc, #100]	@ (800ab0c <USBD_LL_Init+0x94>)
 800aaa8:	2202      	movs	r2, #2
 800aaaa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800aaac:	4b17      	ldr	r3, [pc, #92]	@ (800ab0c <USBD_LL_Init+0x94>)
 800aaae:	2200      	movs	r2, #0
 800aab0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800aab2:	4b16      	ldr	r3, [pc, #88]	@ (800ab0c <USBD_LL_Init+0x94>)
 800aab4:	2202      	movs	r2, #2
 800aab6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800aab8:	4b14      	ldr	r3, [pc, #80]	@ (800ab0c <USBD_LL_Init+0x94>)
 800aaba:	2200      	movs	r2, #0
 800aabc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800aabe:	4b13      	ldr	r3, [pc, #76]	@ (800ab0c <USBD_LL_Init+0x94>)
 800aac0:	2200      	movs	r2, #0
 800aac2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800aac4:	4b11      	ldr	r3, [pc, #68]	@ (800ab0c <USBD_LL_Init+0x94>)
 800aac6:	2200      	movs	r2, #0
 800aac8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800aaca:	4b10      	ldr	r3, [pc, #64]	@ (800ab0c <USBD_LL_Init+0x94>)
 800aacc:	2200      	movs	r2, #0
 800aace:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800aad0:	4b0e      	ldr	r3, [pc, #56]	@ (800ab0c <USBD_LL_Init+0x94>)
 800aad2:	2200      	movs	r2, #0
 800aad4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800aad6:	480d      	ldr	r0, [pc, #52]	@ (800ab0c <USBD_LL_Init+0x94>)
 800aad8:	f7f9 fa97 	bl	800400a <HAL_PCD_Init>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d001      	beq.n	800aae6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800aae2:	f7f6 fb8b 	bl	80011fc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800aae6:	2180      	movs	r1, #128	@ 0x80
 800aae8:	4808      	ldr	r0, [pc, #32]	@ (800ab0c <USBD_LL_Init+0x94>)
 800aaea:	f7fa fcc4 	bl	8005476 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800aaee:	2240      	movs	r2, #64	@ 0x40
 800aaf0:	2100      	movs	r1, #0
 800aaf2:	4806      	ldr	r0, [pc, #24]	@ (800ab0c <USBD_LL_Init+0x94>)
 800aaf4:	f7fa fc78 	bl	80053e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800aaf8:	2280      	movs	r2, #128	@ 0x80
 800aafa:	2101      	movs	r1, #1
 800aafc:	4803      	ldr	r0, [pc, #12]	@ (800ab0c <USBD_LL_Init+0x94>)
 800aafe:	f7fa fc73 	bl	80053e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ab02:	2300      	movs	r3, #0
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3708      	adds	r7, #8
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}
 800ab0c:	200010a4 	.word	0x200010a4

0800ab10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b084      	sub	sp, #16
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7f9 fb7e 	bl	8004228 <HAL_PCD_Start>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab30:	7bfb      	ldrb	r3, [r7, #15]
 800ab32:	4618      	mov	r0, r3
 800ab34:	f000 f942 	bl	800adbc <USBD_Get_USB_Status>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3710      	adds	r7, #16
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}

0800ab46 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ab46:	b580      	push	{r7, lr}
 800ab48:	b084      	sub	sp, #16
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
 800ab4e:	4608      	mov	r0, r1
 800ab50:	4611      	mov	r1, r2
 800ab52:	461a      	mov	r2, r3
 800ab54:	4603      	mov	r3, r0
 800ab56:	70fb      	strb	r3, [r7, #3]
 800ab58:	460b      	mov	r3, r1
 800ab5a:	70bb      	strb	r3, [r7, #2]
 800ab5c:	4613      	mov	r3, r2
 800ab5e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab60:	2300      	movs	r3, #0
 800ab62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab64:	2300      	movs	r3, #0
 800ab66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ab6e:	78bb      	ldrb	r3, [r7, #2]
 800ab70:	883a      	ldrh	r2, [r7, #0]
 800ab72:	78f9      	ldrb	r1, [r7, #3]
 800ab74:	f7fa f852 	bl	8004c1c <HAL_PCD_EP_Open>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab7c:	7bfb      	ldrb	r3, [r7, #15]
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f000 f91c 	bl	800adbc <USBD_Get_USB_Status>
 800ab84:	4603      	mov	r3, r0
 800ab86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab88:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3710      	adds	r7, #16
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}

0800ab92 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab92:	b580      	push	{r7, lr}
 800ab94:	b084      	sub	sp, #16
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
 800ab9a:	460b      	mov	r3, r1
 800ab9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aba2:	2300      	movs	r3, #0
 800aba4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800abac:	78fa      	ldrb	r2, [r7, #3]
 800abae:	4611      	mov	r1, r2
 800abb0:	4618      	mov	r0, r3
 800abb2:	f7fa f89d 	bl	8004cf0 <HAL_PCD_EP_Close>
 800abb6:	4603      	mov	r3, r0
 800abb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abba:	7bfb      	ldrb	r3, [r7, #15]
 800abbc:	4618      	mov	r0, r3
 800abbe:	f000 f8fd 	bl	800adbc <USBD_Get_USB_Status>
 800abc2:	4603      	mov	r3, r0
 800abc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abc6:	7bbb      	ldrb	r3, [r7, #14]
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3710      	adds	r7, #16
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	460b      	mov	r3, r1
 800abda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abdc:	2300      	movs	r3, #0
 800abde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abe0:	2300      	movs	r3, #0
 800abe2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800abea:	78fa      	ldrb	r2, [r7, #3]
 800abec:	4611      	mov	r1, r2
 800abee:	4618      	mov	r0, r3
 800abf0:	f7fa f955 	bl	8004e9e <HAL_PCD_EP_SetStall>
 800abf4:	4603      	mov	r3, r0
 800abf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abf8:	7bfb      	ldrb	r3, [r7, #15]
 800abfa:	4618      	mov	r0, r3
 800abfc:	f000 f8de 	bl	800adbc <USBD_Get_USB_Status>
 800ac00:	4603      	mov	r3, r0
 800ac02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac04:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3710      	adds	r7, #16
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}

0800ac0e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac0e:	b580      	push	{r7, lr}
 800ac10:	b084      	sub	sp, #16
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
 800ac16:	460b      	mov	r3, r1
 800ac18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ac28:	78fa      	ldrb	r2, [r7, #3]
 800ac2a:	4611      	mov	r1, r2
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7fa f999 	bl	8004f64 <HAL_PCD_EP_ClrStall>
 800ac32:	4603      	mov	r3, r0
 800ac34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac36:	7bfb      	ldrb	r3, [r7, #15]
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f000 f8bf 	bl	800adbc <USBD_Get_USB_Status>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac42:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3710      	adds	r7, #16
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b085      	sub	sp, #20
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	460b      	mov	r3, r1
 800ac56:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ac5e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ac60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	da0b      	bge.n	800ac80 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ac68:	78fb      	ldrb	r3, [r7, #3]
 800ac6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ac6e:	68f9      	ldr	r1, [r7, #12]
 800ac70:	4613      	mov	r3, r2
 800ac72:	00db      	lsls	r3, r3, #3
 800ac74:	4413      	add	r3, r2
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	440b      	add	r3, r1
 800ac7a:	3316      	adds	r3, #22
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	e00b      	b.n	800ac98 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ac80:	78fb      	ldrb	r3, [r7, #3]
 800ac82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ac86:	68f9      	ldr	r1, [r7, #12]
 800ac88:	4613      	mov	r3, r2
 800ac8a:	00db      	lsls	r3, r3, #3
 800ac8c:	4413      	add	r3, r2
 800ac8e:	009b      	lsls	r3, r3, #2
 800ac90:	440b      	add	r3, r1
 800ac92:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ac96:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3714      	adds	r7, #20
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr

0800aca4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	460b      	mov	r3, r1
 800acae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acb0:	2300      	movs	r3, #0
 800acb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acb4:	2300      	movs	r3, #0
 800acb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800acbe:	78fa      	ldrb	r2, [r7, #3]
 800acc0:	4611      	mov	r1, r2
 800acc2:	4618      	mov	r0, r3
 800acc4:	f7f9 ff86 	bl	8004bd4 <HAL_PCD_SetAddress>
 800acc8:	4603      	mov	r3, r0
 800acca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800accc:	7bfb      	ldrb	r3, [r7, #15]
 800acce:	4618      	mov	r0, r3
 800acd0:	f000 f874 	bl	800adbc <USBD_Get_USB_Status>
 800acd4:	4603      	mov	r3, r0
 800acd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acd8:	7bbb      	ldrb	r3, [r7, #14]
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3710      	adds	r7, #16
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}

0800ace2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b086      	sub	sp, #24
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	60f8      	str	r0, [r7, #12]
 800acea:	607a      	str	r2, [r7, #4]
 800acec:	603b      	str	r3, [r7, #0]
 800acee:	460b      	mov	r3, r1
 800acf0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acf2:	2300      	movs	r3, #0
 800acf4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acf6:	2300      	movs	r3, #0
 800acf8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ad00:	7af9      	ldrb	r1, [r7, #11]
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	687a      	ldr	r2, [r7, #4]
 800ad06:	f7fa f890 	bl	8004e2a <HAL_PCD_EP_Transmit>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad0e:	7dfb      	ldrb	r3, [r7, #23]
 800ad10:	4618      	mov	r0, r3
 800ad12:	f000 f853 	bl	800adbc <USBD_Get_USB_Status>
 800ad16:	4603      	mov	r3, r0
 800ad18:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ad1a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3718      	adds	r7, #24
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b086      	sub	sp, #24
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	60f8      	str	r0, [r7, #12]
 800ad2c:	607a      	str	r2, [r7, #4]
 800ad2e:	603b      	str	r3, [r7, #0]
 800ad30:	460b      	mov	r3, r1
 800ad32:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad34:	2300      	movs	r3, #0
 800ad36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ad42:	7af9      	ldrb	r1, [r7, #11]
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	f7fa f81c 	bl	8004d84 <HAL_PCD_EP_Receive>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad50:	7dfb      	ldrb	r3, [r7, #23]
 800ad52:	4618      	mov	r0, r3
 800ad54:	f000 f832 	bl	800adbc <USBD_Get_USB_Status>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ad5c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3718      	adds	r7, #24
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}

0800ad66 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad66:	b580      	push	{r7, lr}
 800ad68:	b082      	sub	sp, #8
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
 800ad6e:	460b      	mov	r3, r1
 800ad70:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad78:	78fa      	ldrb	r2, [r7, #3]
 800ad7a:	4611      	mov	r1, r2
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7fa f83c 	bl	8004dfa <HAL_PCD_EP_GetRxCount>
 800ad82:	4603      	mov	r3, r0
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3708      	adds	r7, #8
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b083      	sub	sp, #12
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ad94:	4b03      	ldr	r3, [pc, #12]	@ (800ada4 <USBD_static_malloc+0x18>)
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	370c      	adds	r7, #12
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr
 800ada2:	bf00      	nop
 800ada4:	20001588 	.word	0x20001588

0800ada8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b083      	sub	sp, #12
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]

}
 800adb0:	bf00      	nop
 800adb2:	370c      	adds	r7, #12
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr

0800adbc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b085      	sub	sp, #20
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	4603      	mov	r3, r0
 800adc4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adc6:	2300      	movs	r3, #0
 800adc8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800adca:	79fb      	ldrb	r3, [r7, #7]
 800adcc:	2b03      	cmp	r3, #3
 800adce:	d817      	bhi.n	800ae00 <USBD_Get_USB_Status+0x44>
 800add0:	a201      	add	r2, pc, #4	@ (adr r2, 800add8 <USBD_Get_USB_Status+0x1c>)
 800add2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add6:	bf00      	nop
 800add8:	0800ade9 	.word	0x0800ade9
 800addc:	0800adef 	.word	0x0800adef
 800ade0:	0800adf5 	.word	0x0800adf5
 800ade4:	0800adfb 	.word	0x0800adfb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ade8:	2300      	movs	r3, #0
 800adea:	73fb      	strb	r3, [r7, #15]
    break;
 800adec:	e00b      	b.n	800ae06 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800adee:	2303      	movs	r3, #3
 800adf0:	73fb      	strb	r3, [r7, #15]
    break;
 800adf2:	e008      	b.n	800ae06 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800adf4:	2301      	movs	r3, #1
 800adf6:	73fb      	strb	r3, [r7, #15]
    break;
 800adf8:	e005      	b.n	800ae06 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800adfa:	2303      	movs	r3, #3
 800adfc:	73fb      	strb	r3, [r7, #15]
    break;
 800adfe:	e002      	b.n	800ae06 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ae00:	2303      	movs	r3, #3
 800ae02:	73fb      	strb	r3, [r7, #15]
    break;
 800ae04:	bf00      	nop
  }
  return usb_status;
 800ae06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3714      	adds	r7, #20
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <malloc>:
 800ae14:	4b02      	ldr	r3, [pc, #8]	@ (800ae20 <malloc+0xc>)
 800ae16:	4601      	mov	r1, r0
 800ae18:	6818      	ldr	r0, [r3, #0]
 800ae1a:	f000 b825 	b.w	800ae68 <_malloc_r>
 800ae1e:	bf00      	nop
 800ae20:	20000108 	.word	0x20000108

0800ae24 <sbrk_aligned>:
 800ae24:	b570      	push	{r4, r5, r6, lr}
 800ae26:	4e0f      	ldr	r6, [pc, #60]	@ (800ae64 <sbrk_aligned+0x40>)
 800ae28:	460c      	mov	r4, r1
 800ae2a:	6831      	ldr	r1, [r6, #0]
 800ae2c:	4605      	mov	r5, r0
 800ae2e:	b911      	cbnz	r1, 800ae36 <sbrk_aligned+0x12>
 800ae30:	f000 f8d0 	bl	800afd4 <_sbrk_r>
 800ae34:	6030      	str	r0, [r6, #0]
 800ae36:	4621      	mov	r1, r4
 800ae38:	4628      	mov	r0, r5
 800ae3a:	f000 f8cb 	bl	800afd4 <_sbrk_r>
 800ae3e:	1c43      	adds	r3, r0, #1
 800ae40:	d103      	bne.n	800ae4a <sbrk_aligned+0x26>
 800ae42:	f04f 34ff 	mov.w	r4, #4294967295
 800ae46:	4620      	mov	r0, r4
 800ae48:	bd70      	pop	{r4, r5, r6, pc}
 800ae4a:	1cc4      	adds	r4, r0, #3
 800ae4c:	f024 0403 	bic.w	r4, r4, #3
 800ae50:	42a0      	cmp	r0, r4
 800ae52:	d0f8      	beq.n	800ae46 <sbrk_aligned+0x22>
 800ae54:	1a21      	subs	r1, r4, r0
 800ae56:	4628      	mov	r0, r5
 800ae58:	f000 f8bc 	bl	800afd4 <_sbrk_r>
 800ae5c:	3001      	adds	r0, #1
 800ae5e:	d1f2      	bne.n	800ae46 <sbrk_aligned+0x22>
 800ae60:	e7ef      	b.n	800ae42 <sbrk_aligned+0x1e>
 800ae62:	bf00      	nop
 800ae64:	200017a8 	.word	0x200017a8

0800ae68 <_malloc_r>:
 800ae68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae6c:	1ccd      	adds	r5, r1, #3
 800ae6e:	f025 0503 	bic.w	r5, r5, #3
 800ae72:	3508      	adds	r5, #8
 800ae74:	2d0c      	cmp	r5, #12
 800ae76:	bf38      	it	cc
 800ae78:	250c      	movcc	r5, #12
 800ae7a:	2d00      	cmp	r5, #0
 800ae7c:	4606      	mov	r6, r0
 800ae7e:	db01      	blt.n	800ae84 <_malloc_r+0x1c>
 800ae80:	42a9      	cmp	r1, r5
 800ae82:	d904      	bls.n	800ae8e <_malloc_r+0x26>
 800ae84:	230c      	movs	r3, #12
 800ae86:	6033      	str	r3, [r6, #0]
 800ae88:	2000      	movs	r0, #0
 800ae8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800af64 <_malloc_r+0xfc>
 800ae92:	f000 f869 	bl	800af68 <__malloc_lock>
 800ae96:	f8d8 3000 	ldr.w	r3, [r8]
 800ae9a:	461c      	mov	r4, r3
 800ae9c:	bb44      	cbnz	r4, 800aef0 <_malloc_r+0x88>
 800ae9e:	4629      	mov	r1, r5
 800aea0:	4630      	mov	r0, r6
 800aea2:	f7ff ffbf 	bl	800ae24 <sbrk_aligned>
 800aea6:	1c43      	adds	r3, r0, #1
 800aea8:	4604      	mov	r4, r0
 800aeaa:	d158      	bne.n	800af5e <_malloc_r+0xf6>
 800aeac:	f8d8 4000 	ldr.w	r4, [r8]
 800aeb0:	4627      	mov	r7, r4
 800aeb2:	2f00      	cmp	r7, #0
 800aeb4:	d143      	bne.n	800af3e <_malloc_r+0xd6>
 800aeb6:	2c00      	cmp	r4, #0
 800aeb8:	d04b      	beq.n	800af52 <_malloc_r+0xea>
 800aeba:	6823      	ldr	r3, [r4, #0]
 800aebc:	4639      	mov	r1, r7
 800aebe:	4630      	mov	r0, r6
 800aec0:	eb04 0903 	add.w	r9, r4, r3
 800aec4:	f000 f886 	bl	800afd4 <_sbrk_r>
 800aec8:	4581      	cmp	r9, r0
 800aeca:	d142      	bne.n	800af52 <_malloc_r+0xea>
 800aecc:	6821      	ldr	r1, [r4, #0]
 800aece:	1a6d      	subs	r5, r5, r1
 800aed0:	4629      	mov	r1, r5
 800aed2:	4630      	mov	r0, r6
 800aed4:	f7ff ffa6 	bl	800ae24 <sbrk_aligned>
 800aed8:	3001      	adds	r0, #1
 800aeda:	d03a      	beq.n	800af52 <_malloc_r+0xea>
 800aedc:	6823      	ldr	r3, [r4, #0]
 800aede:	442b      	add	r3, r5
 800aee0:	6023      	str	r3, [r4, #0]
 800aee2:	f8d8 3000 	ldr.w	r3, [r8]
 800aee6:	685a      	ldr	r2, [r3, #4]
 800aee8:	bb62      	cbnz	r2, 800af44 <_malloc_r+0xdc>
 800aeea:	f8c8 7000 	str.w	r7, [r8]
 800aeee:	e00f      	b.n	800af10 <_malloc_r+0xa8>
 800aef0:	6822      	ldr	r2, [r4, #0]
 800aef2:	1b52      	subs	r2, r2, r5
 800aef4:	d420      	bmi.n	800af38 <_malloc_r+0xd0>
 800aef6:	2a0b      	cmp	r2, #11
 800aef8:	d917      	bls.n	800af2a <_malloc_r+0xc2>
 800aefa:	1961      	adds	r1, r4, r5
 800aefc:	42a3      	cmp	r3, r4
 800aefe:	6025      	str	r5, [r4, #0]
 800af00:	bf18      	it	ne
 800af02:	6059      	strne	r1, [r3, #4]
 800af04:	6863      	ldr	r3, [r4, #4]
 800af06:	bf08      	it	eq
 800af08:	f8c8 1000 	streq.w	r1, [r8]
 800af0c:	5162      	str	r2, [r4, r5]
 800af0e:	604b      	str	r3, [r1, #4]
 800af10:	4630      	mov	r0, r6
 800af12:	f000 f82f 	bl	800af74 <__malloc_unlock>
 800af16:	f104 000b 	add.w	r0, r4, #11
 800af1a:	1d23      	adds	r3, r4, #4
 800af1c:	f020 0007 	bic.w	r0, r0, #7
 800af20:	1ac2      	subs	r2, r0, r3
 800af22:	bf1c      	itt	ne
 800af24:	1a1b      	subne	r3, r3, r0
 800af26:	50a3      	strne	r3, [r4, r2]
 800af28:	e7af      	b.n	800ae8a <_malloc_r+0x22>
 800af2a:	6862      	ldr	r2, [r4, #4]
 800af2c:	42a3      	cmp	r3, r4
 800af2e:	bf0c      	ite	eq
 800af30:	f8c8 2000 	streq.w	r2, [r8]
 800af34:	605a      	strne	r2, [r3, #4]
 800af36:	e7eb      	b.n	800af10 <_malloc_r+0xa8>
 800af38:	4623      	mov	r3, r4
 800af3a:	6864      	ldr	r4, [r4, #4]
 800af3c:	e7ae      	b.n	800ae9c <_malloc_r+0x34>
 800af3e:	463c      	mov	r4, r7
 800af40:	687f      	ldr	r7, [r7, #4]
 800af42:	e7b6      	b.n	800aeb2 <_malloc_r+0x4a>
 800af44:	461a      	mov	r2, r3
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	42a3      	cmp	r3, r4
 800af4a:	d1fb      	bne.n	800af44 <_malloc_r+0xdc>
 800af4c:	2300      	movs	r3, #0
 800af4e:	6053      	str	r3, [r2, #4]
 800af50:	e7de      	b.n	800af10 <_malloc_r+0xa8>
 800af52:	230c      	movs	r3, #12
 800af54:	6033      	str	r3, [r6, #0]
 800af56:	4630      	mov	r0, r6
 800af58:	f000 f80c 	bl	800af74 <__malloc_unlock>
 800af5c:	e794      	b.n	800ae88 <_malloc_r+0x20>
 800af5e:	6005      	str	r5, [r0, #0]
 800af60:	e7d6      	b.n	800af10 <_malloc_r+0xa8>
 800af62:	bf00      	nop
 800af64:	200017ac 	.word	0x200017ac

0800af68 <__malloc_lock>:
 800af68:	4801      	ldr	r0, [pc, #4]	@ (800af70 <__malloc_lock+0x8>)
 800af6a:	f000 b86d 	b.w	800b048 <__retarget_lock_acquire_recursive>
 800af6e:	bf00      	nop
 800af70:	200018ec 	.word	0x200018ec

0800af74 <__malloc_unlock>:
 800af74:	4801      	ldr	r0, [pc, #4]	@ (800af7c <__malloc_unlock+0x8>)
 800af76:	f000 b868 	b.w	800b04a <__retarget_lock_release_recursive>
 800af7a:	bf00      	nop
 800af7c:	200018ec 	.word	0x200018ec

0800af80 <siprintf>:
 800af80:	b40e      	push	{r1, r2, r3}
 800af82:	b510      	push	{r4, lr}
 800af84:	b09d      	sub	sp, #116	@ 0x74
 800af86:	ab1f      	add	r3, sp, #124	@ 0x7c
 800af88:	9002      	str	r0, [sp, #8]
 800af8a:	9006      	str	r0, [sp, #24]
 800af8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800af90:	480a      	ldr	r0, [pc, #40]	@ (800afbc <siprintf+0x3c>)
 800af92:	9107      	str	r1, [sp, #28]
 800af94:	9104      	str	r1, [sp, #16]
 800af96:	490a      	ldr	r1, [pc, #40]	@ (800afc0 <siprintf+0x40>)
 800af98:	f853 2b04 	ldr.w	r2, [r3], #4
 800af9c:	9105      	str	r1, [sp, #20]
 800af9e:	2400      	movs	r4, #0
 800afa0:	a902      	add	r1, sp, #8
 800afa2:	6800      	ldr	r0, [r0, #0]
 800afa4:	9301      	str	r3, [sp, #4]
 800afa6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800afa8:	f000 f8f6 	bl	800b198 <_svfiprintf_r>
 800afac:	9b02      	ldr	r3, [sp, #8]
 800afae:	701c      	strb	r4, [r3, #0]
 800afb0:	b01d      	add	sp, #116	@ 0x74
 800afb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afb6:	b003      	add	sp, #12
 800afb8:	4770      	bx	lr
 800afba:	bf00      	nop
 800afbc:	20000108 	.word	0x20000108
 800afc0:	ffff0208 	.word	0xffff0208

0800afc4 <memset>:
 800afc4:	4402      	add	r2, r0
 800afc6:	4603      	mov	r3, r0
 800afc8:	4293      	cmp	r3, r2
 800afca:	d100      	bne.n	800afce <memset+0xa>
 800afcc:	4770      	bx	lr
 800afce:	f803 1b01 	strb.w	r1, [r3], #1
 800afd2:	e7f9      	b.n	800afc8 <memset+0x4>

0800afd4 <_sbrk_r>:
 800afd4:	b538      	push	{r3, r4, r5, lr}
 800afd6:	4d06      	ldr	r5, [pc, #24]	@ (800aff0 <_sbrk_r+0x1c>)
 800afd8:	2300      	movs	r3, #0
 800afda:	4604      	mov	r4, r0
 800afdc:	4608      	mov	r0, r1
 800afde:	602b      	str	r3, [r5, #0]
 800afe0:	f7f6 fcea 	bl	80019b8 <_sbrk>
 800afe4:	1c43      	adds	r3, r0, #1
 800afe6:	d102      	bne.n	800afee <_sbrk_r+0x1a>
 800afe8:	682b      	ldr	r3, [r5, #0]
 800afea:	b103      	cbz	r3, 800afee <_sbrk_r+0x1a>
 800afec:	6023      	str	r3, [r4, #0]
 800afee:	bd38      	pop	{r3, r4, r5, pc}
 800aff0:	200018e8 	.word	0x200018e8

0800aff4 <__errno>:
 800aff4:	4b01      	ldr	r3, [pc, #4]	@ (800affc <__errno+0x8>)
 800aff6:	6818      	ldr	r0, [r3, #0]
 800aff8:	4770      	bx	lr
 800affa:	bf00      	nop
 800affc:	20000108 	.word	0x20000108

0800b000 <__libc_init_array>:
 800b000:	b570      	push	{r4, r5, r6, lr}
 800b002:	4d0d      	ldr	r5, [pc, #52]	@ (800b038 <__libc_init_array+0x38>)
 800b004:	4c0d      	ldr	r4, [pc, #52]	@ (800b03c <__libc_init_array+0x3c>)
 800b006:	1b64      	subs	r4, r4, r5
 800b008:	10a4      	asrs	r4, r4, #2
 800b00a:	2600      	movs	r6, #0
 800b00c:	42a6      	cmp	r6, r4
 800b00e:	d109      	bne.n	800b024 <__libc_init_array+0x24>
 800b010:	4d0b      	ldr	r5, [pc, #44]	@ (800b040 <__libc_init_array+0x40>)
 800b012:	4c0c      	ldr	r4, [pc, #48]	@ (800b044 <__libc_init_array+0x44>)
 800b014:	f000 fba6 	bl	800b764 <_init>
 800b018:	1b64      	subs	r4, r4, r5
 800b01a:	10a4      	asrs	r4, r4, #2
 800b01c:	2600      	movs	r6, #0
 800b01e:	42a6      	cmp	r6, r4
 800b020:	d105      	bne.n	800b02e <__libc_init_array+0x2e>
 800b022:	bd70      	pop	{r4, r5, r6, pc}
 800b024:	f855 3b04 	ldr.w	r3, [r5], #4
 800b028:	4798      	blx	r3
 800b02a:	3601      	adds	r6, #1
 800b02c:	e7ee      	b.n	800b00c <__libc_init_array+0xc>
 800b02e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b032:	4798      	blx	r3
 800b034:	3601      	adds	r6, #1
 800b036:	e7f2      	b.n	800b01e <__libc_init_array+0x1e>
 800b038:	0800b830 	.word	0x0800b830
 800b03c:	0800b830 	.word	0x0800b830
 800b040:	0800b830 	.word	0x0800b830
 800b044:	0800b834 	.word	0x0800b834

0800b048 <__retarget_lock_acquire_recursive>:
 800b048:	4770      	bx	lr

0800b04a <__retarget_lock_release_recursive>:
 800b04a:	4770      	bx	lr

0800b04c <_free_r>:
 800b04c:	b538      	push	{r3, r4, r5, lr}
 800b04e:	4605      	mov	r5, r0
 800b050:	2900      	cmp	r1, #0
 800b052:	d041      	beq.n	800b0d8 <_free_r+0x8c>
 800b054:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b058:	1f0c      	subs	r4, r1, #4
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	bfb8      	it	lt
 800b05e:	18e4      	addlt	r4, r4, r3
 800b060:	f7ff ff82 	bl	800af68 <__malloc_lock>
 800b064:	4a1d      	ldr	r2, [pc, #116]	@ (800b0dc <_free_r+0x90>)
 800b066:	6813      	ldr	r3, [r2, #0]
 800b068:	b933      	cbnz	r3, 800b078 <_free_r+0x2c>
 800b06a:	6063      	str	r3, [r4, #4]
 800b06c:	6014      	str	r4, [r2, #0]
 800b06e:	4628      	mov	r0, r5
 800b070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b074:	f7ff bf7e 	b.w	800af74 <__malloc_unlock>
 800b078:	42a3      	cmp	r3, r4
 800b07a:	d908      	bls.n	800b08e <_free_r+0x42>
 800b07c:	6820      	ldr	r0, [r4, #0]
 800b07e:	1821      	adds	r1, r4, r0
 800b080:	428b      	cmp	r3, r1
 800b082:	bf01      	itttt	eq
 800b084:	6819      	ldreq	r1, [r3, #0]
 800b086:	685b      	ldreq	r3, [r3, #4]
 800b088:	1809      	addeq	r1, r1, r0
 800b08a:	6021      	streq	r1, [r4, #0]
 800b08c:	e7ed      	b.n	800b06a <_free_r+0x1e>
 800b08e:	461a      	mov	r2, r3
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	b10b      	cbz	r3, 800b098 <_free_r+0x4c>
 800b094:	42a3      	cmp	r3, r4
 800b096:	d9fa      	bls.n	800b08e <_free_r+0x42>
 800b098:	6811      	ldr	r1, [r2, #0]
 800b09a:	1850      	adds	r0, r2, r1
 800b09c:	42a0      	cmp	r0, r4
 800b09e:	d10b      	bne.n	800b0b8 <_free_r+0x6c>
 800b0a0:	6820      	ldr	r0, [r4, #0]
 800b0a2:	4401      	add	r1, r0
 800b0a4:	1850      	adds	r0, r2, r1
 800b0a6:	4283      	cmp	r3, r0
 800b0a8:	6011      	str	r1, [r2, #0]
 800b0aa:	d1e0      	bne.n	800b06e <_free_r+0x22>
 800b0ac:	6818      	ldr	r0, [r3, #0]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	6053      	str	r3, [r2, #4]
 800b0b2:	4408      	add	r0, r1
 800b0b4:	6010      	str	r0, [r2, #0]
 800b0b6:	e7da      	b.n	800b06e <_free_r+0x22>
 800b0b8:	d902      	bls.n	800b0c0 <_free_r+0x74>
 800b0ba:	230c      	movs	r3, #12
 800b0bc:	602b      	str	r3, [r5, #0]
 800b0be:	e7d6      	b.n	800b06e <_free_r+0x22>
 800b0c0:	6820      	ldr	r0, [r4, #0]
 800b0c2:	1821      	adds	r1, r4, r0
 800b0c4:	428b      	cmp	r3, r1
 800b0c6:	bf04      	itt	eq
 800b0c8:	6819      	ldreq	r1, [r3, #0]
 800b0ca:	685b      	ldreq	r3, [r3, #4]
 800b0cc:	6063      	str	r3, [r4, #4]
 800b0ce:	bf04      	itt	eq
 800b0d0:	1809      	addeq	r1, r1, r0
 800b0d2:	6021      	streq	r1, [r4, #0]
 800b0d4:	6054      	str	r4, [r2, #4]
 800b0d6:	e7ca      	b.n	800b06e <_free_r+0x22>
 800b0d8:	bd38      	pop	{r3, r4, r5, pc}
 800b0da:	bf00      	nop
 800b0dc:	200017ac 	.word	0x200017ac

0800b0e0 <__ssputs_r>:
 800b0e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0e4:	688e      	ldr	r6, [r1, #8]
 800b0e6:	461f      	mov	r7, r3
 800b0e8:	42be      	cmp	r6, r7
 800b0ea:	680b      	ldr	r3, [r1, #0]
 800b0ec:	4682      	mov	sl, r0
 800b0ee:	460c      	mov	r4, r1
 800b0f0:	4690      	mov	r8, r2
 800b0f2:	d82d      	bhi.n	800b150 <__ssputs_r+0x70>
 800b0f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b0f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b0fc:	d026      	beq.n	800b14c <__ssputs_r+0x6c>
 800b0fe:	6965      	ldr	r5, [r4, #20]
 800b100:	6909      	ldr	r1, [r1, #16]
 800b102:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b106:	eba3 0901 	sub.w	r9, r3, r1
 800b10a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b10e:	1c7b      	adds	r3, r7, #1
 800b110:	444b      	add	r3, r9
 800b112:	106d      	asrs	r5, r5, #1
 800b114:	429d      	cmp	r5, r3
 800b116:	bf38      	it	cc
 800b118:	461d      	movcc	r5, r3
 800b11a:	0553      	lsls	r3, r2, #21
 800b11c:	d527      	bpl.n	800b16e <__ssputs_r+0x8e>
 800b11e:	4629      	mov	r1, r5
 800b120:	f7ff fea2 	bl	800ae68 <_malloc_r>
 800b124:	4606      	mov	r6, r0
 800b126:	b360      	cbz	r0, 800b182 <__ssputs_r+0xa2>
 800b128:	6921      	ldr	r1, [r4, #16]
 800b12a:	464a      	mov	r2, r9
 800b12c:	f000 fad6 	bl	800b6dc <memcpy>
 800b130:	89a3      	ldrh	r3, [r4, #12]
 800b132:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b136:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b13a:	81a3      	strh	r3, [r4, #12]
 800b13c:	6126      	str	r6, [r4, #16]
 800b13e:	6165      	str	r5, [r4, #20]
 800b140:	444e      	add	r6, r9
 800b142:	eba5 0509 	sub.w	r5, r5, r9
 800b146:	6026      	str	r6, [r4, #0]
 800b148:	60a5      	str	r5, [r4, #8]
 800b14a:	463e      	mov	r6, r7
 800b14c:	42be      	cmp	r6, r7
 800b14e:	d900      	bls.n	800b152 <__ssputs_r+0x72>
 800b150:	463e      	mov	r6, r7
 800b152:	6820      	ldr	r0, [r4, #0]
 800b154:	4632      	mov	r2, r6
 800b156:	4641      	mov	r1, r8
 800b158:	f000 faa6 	bl	800b6a8 <memmove>
 800b15c:	68a3      	ldr	r3, [r4, #8]
 800b15e:	1b9b      	subs	r3, r3, r6
 800b160:	60a3      	str	r3, [r4, #8]
 800b162:	6823      	ldr	r3, [r4, #0]
 800b164:	4433      	add	r3, r6
 800b166:	6023      	str	r3, [r4, #0]
 800b168:	2000      	movs	r0, #0
 800b16a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b16e:	462a      	mov	r2, r5
 800b170:	f000 fac2 	bl	800b6f8 <_realloc_r>
 800b174:	4606      	mov	r6, r0
 800b176:	2800      	cmp	r0, #0
 800b178:	d1e0      	bne.n	800b13c <__ssputs_r+0x5c>
 800b17a:	6921      	ldr	r1, [r4, #16]
 800b17c:	4650      	mov	r0, sl
 800b17e:	f7ff ff65 	bl	800b04c <_free_r>
 800b182:	230c      	movs	r3, #12
 800b184:	f8ca 3000 	str.w	r3, [sl]
 800b188:	89a3      	ldrh	r3, [r4, #12]
 800b18a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b18e:	81a3      	strh	r3, [r4, #12]
 800b190:	f04f 30ff 	mov.w	r0, #4294967295
 800b194:	e7e9      	b.n	800b16a <__ssputs_r+0x8a>
	...

0800b198 <_svfiprintf_r>:
 800b198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b19c:	4698      	mov	r8, r3
 800b19e:	898b      	ldrh	r3, [r1, #12]
 800b1a0:	061b      	lsls	r3, r3, #24
 800b1a2:	b09d      	sub	sp, #116	@ 0x74
 800b1a4:	4607      	mov	r7, r0
 800b1a6:	460d      	mov	r5, r1
 800b1a8:	4614      	mov	r4, r2
 800b1aa:	d510      	bpl.n	800b1ce <_svfiprintf_r+0x36>
 800b1ac:	690b      	ldr	r3, [r1, #16]
 800b1ae:	b973      	cbnz	r3, 800b1ce <_svfiprintf_r+0x36>
 800b1b0:	2140      	movs	r1, #64	@ 0x40
 800b1b2:	f7ff fe59 	bl	800ae68 <_malloc_r>
 800b1b6:	6028      	str	r0, [r5, #0]
 800b1b8:	6128      	str	r0, [r5, #16]
 800b1ba:	b930      	cbnz	r0, 800b1ca <_svfiprintf_r+0x32>
 800b1bc:	230c      	movs	r3, #12
 800b1be:	603b      	str	r3, [r7, #0]
 800b1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1c4:	b01d      	add	sp, #116	@ 0x74
 800b1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ca:	2340      	movs	r3, #64	@ 0x40
 800b1cc:	616b      	str	r3, [r5, #20]
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1d2:	2320      	movs	r3, #32
 800b1d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b1d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1dc:	2330      	movs	r3, #48	@ 0x30
 800b1de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b37c <_svfiprintf_r+0x1e4>
 800b1e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b1e6:	f04f 0901 	mov.w	r9, #1
 800b1ea:	4623      	mov	r3, r4
 800b1ec:	469a      	mov	sl, r3
 800b1ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1f2:	b10a      	cbz	r2, 800b1f8 <_svfiprintf_r+0x60>
 800b1f4:	2a25      	cmp	r2, #37	@ 0x25
 800b1f6:	d1f9      	bne.n	800b1ec <_svfiprintf_r+0x54>
 800b1f8:	ebba 0b04 	subs.w	fp, sl, r4
 800b1fc:	d00b      	beq.n	800b216 <_svfiprintf_r+0x7e>
 800b1fe:	465b      	mov	r3, fp
 800b200:	4622      	mov	r2, r4
 800b202:	4629      	mov	r1, r5
 800b204:	4638      	mov	r0, r7
 800b206:	f7ff ff6b 	bl	800b0e0 <__ssputs_r>
 800b20a:	3001      	adds	r0, #1
 800b20c:	f000 80a7 	beq.w	800b35e <_svfiprintf_r+0x1c6>
 800b210:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b212:	445a      	add	r2, fp
 800b214:	9209      	str	r2, [sp, #36]	@ 0x24
 800b216:	f89a 3000 	ldrb.w	r3, [sl]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	f000 809f 	beq.w	800b35e <_svfiprintf_r+0x1c6>
 800b220:	2300      	movs	r3, #0
 800b222:	f04f 32ff 	mov.w	r2, #4294967295
 800b226:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b22a:	f10a 0a01 	add.w	sl, sl, #1
 800b22e:	9304      	str	r3, [sp, #16]
 800b230:	9307      	str	r3, [sp, #28]
 800b232:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b236:	931a      	str	r3, [sp, #104]	@ 0x68
 800b238:	4654      	mov	r4, sl
 800b23a:	2205      	movs	r2, #5
 800b23c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b240:	484e      	ldr	r0, [pc, #312]	@ (800b37c <_svfiprintf_r+0x1e4>)
 800b242:	f7f4 ffcd 	bl	80001e0 <memchr>
 800b246:	9a04      	ldr	r2, [sp, #16]
 800b248:	b9d8      	cbnz	r0, 800b282 <_svfiprintf_r+0xea>
 800b24a:	06d0      	lsls	r0, r2, #27
 800b24c:	bf44      	itt	mi
 800b24e:	2320      	movmi	r3, #32
 800b250:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b254:	0711      	lsls	r1, r2, #28
 800b256:	bf44      	itt	mi
 800b258:	232b      	movmi	r3, #43	@ 0x2b
 800b25a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b25e:	f89a 3000 	ldrb.w	r3, [sl]
 800b262:	2b2a      	cmp	r3, #42	@ 0x2a
 800b264:	d015      	beq.n	800b292 <_svfiprintf_r+0xfa>
 800b266:	9a07      	ldr	r2, [sp, #28]
 800b268:	4654      	mov	r4, sl
 800b26a:	2000      	movs	r0, #0
 800b26c:	f04f 0c0a 	mov.w	ip, #10
 800b270:	4621      	mov	r1, r4
 800b272:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b276:	3b30      	subs	r3, #48	@ 0x30
 800b278:	2b09      	cmp	r3, #9
 800b27a:	d94b      	bls.n	800b314 <_svfiprintf_r+0x17c>
 800b27c:	b1b0      	cbz	r0, 800b2ac <_svfiprintf_r+0x114>
 800b27e:	9207      	str	r2, [sp, #28]
 800b280:	e014      	b.n	800b2ac <_svfiprintf_r+0x114>
 800b282:	eba0 0308 	sub.w	r3, r0, r8
 800b286:	fa09 f303 	lsl.w	r3, r9, r3
 800b28a:	4313      	orrs	r3, r2
 800b28c:	9304      	str	r3, [sp, #16]
 800b28e:	46a2      	mov	sl, r4
 800b290:	e7d2      	b.n	800b238 <_svfiprintf_r+0xa0>
 800b292:	9b03      	ldr	r3, [sp, #12]
 800b294:	1d19      	adds	r1, r3, #4
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	9103      	str	r1, [sp, #12]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	bfbb      	ittet	lt
 800b29e:	425b      	neglt	r3, r3
 800b2a0:	f042 0202 	orrlt.w	r2, r2, #2
 800b2a4:	9307      	strge	r3, [sp, #28]
 800b2a6:	9307      	strlt	r3, [sp, #28]
 800b2a8:	bfb8      	it	lt
 800b2aa:	9204      	strlt	r2, [sp, #16]
 800b2ac:	7823      	ldrb	r3, [r4, #0]
 800b2ae:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2b0:	d10a      	bne.n	800b2c8 <_svfiprintf_r+0x130>
 800b2b2:	7863      	ldrb	r3, [r4, #1]
 800b2b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2b6:	d132      	bne.n	800b31e <_svfiprintf_r+0x186>
 800b2b8:	9b03      	ldr	r3, [sp, #12]
 800b2ba:	1d1a      	adds	r2, r3, #4
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	9203      	str	r2, [sp, #12]
 800b2c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b2c4:	3402      	adds	r4, #2
 800b2c6:	9305      	str	r3, [sp, #20]
 800b2c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b38c <_svfiprintf_r+0x1f4>
 800b2cc:	7821      	ldrb	r1, [r4, #0]
 800b2ce:	2203      	movs	r2, #3
 800b2d0:	4650      	mov	r0, sl
 800b2d2:	f7f4 ff85 	bl	80001e0 <memchr>
 800b2d6:	b138      	cbz	r0, 800b2e8 <_svfiprintf_r+0x150>
 800b2d8:	9b04      	ldr	r3, [sp, #16]
 800b2da:	eba0 000a 	sub.w	r0, r0, sl
 800b2de:	2240      	movs	r2, #64	@ 0x40
 800b2e0:	4082      	lsls	r2, r0
 800b2e2:	4313      	orrs	r3, r2
 800b2e4:	3401      	adds	r4, #1
 800b2e6:	9304      	str	r3, [sp, #16]
 800b2e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2ec:	4824      	ldr	r0, [pc, #144]	@ (800b380 <_svfiprintf_r+0x1e8>)
 800b2ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b2f2:	2206      	movs	r2, #6
 800b2f4:	f7f4 ff74 	bl	80001e0 <memchr>
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	d036      	beq.n	800b36a <_svfiprintf_r+0x1d2>
 800b2fc:	4b21      	ldr	r3, [pc, #132]	@ (800b384 <_svfiprintf_r+0x1ec>)
 800b2fe:	bb1b      	cbnz	r3, 800b348 <_svfiprintf_r+0x1b0>
 800b300:	9b03      	ldr	r3, [sp, #12]
 800b302:	3307      	adds	r3, #7
 800b304:	f023 0307 	bic.w	r3, r3, #7
 800b308:	3308      	adds	r3, #8
 800b30a:	9303      	str	r3, [sp, #12]
 800b30c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b30e:	4433      	add	r3, r6
 800b310:	9309      	str	r3, [sp, #36]	@ 0x24
 800b312:	e76a      	b.n	800b1ea <_svfiprintf_r+0x52>
 800b314:	fb0c 3202 	mla	r2, ip, r2, r3
 800b318:	460c      	mov	r4, r1
 800b31a:	2001      	movs	r0, #1
 800b31c:	e7a8      	b.n	800b270 <_svfiprintf_r+0xd8>
 800b31e:	2300      	movs	r3, #0
 800b320:	3401      	adds	r4, #1
 800b322:	9305      	str	r3, [sp, #20]
 800b324:	4619      	mov	r1, r3
 800b326:	f04f 0c0a 	mov.w	ip, #10
 800b32a:	4620      	mov	r0, r4
 800b32c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b330:	3a30      	subs	r2, #48	@ 0x30
 800b332:	2a09      	cmp	r2, #9
 800b334:	d903      	bls.n	800b33e <_svfiprintf_r+0x1a6>
 800b336:	2b00      	cmp	r3, #0
 800b338:	d0c6      	beq.n	800b2c8 <_svfiprintf_r+0x130>
 800b33a:	9105      	str	r1, [sp, #20]
 800b33c:	e7c4      	b.n	800b2c8 <_svfiprintf_r+0x130>
 800b33e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b342:	4604      	mov	r4, r0
 800b344:	2301      	movs	r3, #1
 800b346:	e7f0      	b.n	800b32a <_svfiprintf_r+0x192>
 800b348:	ab03      	add	r3, sp, #12
 800b34a:	9300      	str	r3, [sp, #0]
 800b34c:	462a      	mov	r2, r5
 800b34e:	4b0e      	ldr	r3, [pc, #56]	@ (800b388 <_svfiprintf_r+0x1f0>)
 800b350:	a904      	add	r1, sp, #16
 800b352:	4638      	mov	r0, r7
 800b354:	f3af 8000 	nop.w
 800b358:	1c42      	adds	r2, r0, #1
 800b35a:	4606      	mov	r6, r0
 800b35c:	d1d6      	bne.n	800b30c <_svfiprintf_r+0x174>
 800b35e:	89ab      	ldrh	r3, [r5, #12]
 800b360:	065b      	lsls	r3, r3, #25
 800b362:	f53f af2d 	bmi.w	800b1c0 <_svfiprintf_r+0x28>
 800b366:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b368:	e72c      	b.n	800b1c4 <_svfiprintf_r+0x2c>
 800b36a:	ab03      	add	r3, sp, #12
 800b36c:	9300      	str	r3, [sp, #0]
 800b36e:	462a      	mov	r2, r5
 800b370:	4b05      	ldr	r3, [pc, #20]	@ (800b388 <_svfiprintf_r+0x1f0>)
 800b372:	a904      	add	r1, sp, #16
 800b374:	4638      	mov	r0, r7
 800b376:	f000 f879 	bl	800b46c <_printf_i>
 800b37a:	e7ed      	b.n	800b358 <_svfiprintf_r+0x1c0>
 800b37c:	0800b7f4 	.word	0x0800b7f4
 800b380:	0800b7fe 	.word	0x0800b7fe
 800b384:	00000000 	.word	0x00000000
 800b388:	0800b0e1 	.word	0x0800b0e1
 800b38c:	0800b7fa 	.word	0x0800b7fa

0800b390 <_printf_common>:
 800b390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b394:	4616      	mov	r6, r2
 800b396:	4698      	mov	r8, r3
 800b398:	688a      	ldr	r2, [r1, #8]
 800b39a:	690b      	ldr	r3, [r1, #16]
 800b39c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	bfb8      	it	lt
 800b3a4:	4613      	movlt	r3, r2
 800b3a6:	6033      	str	r3, [r6, #0]
 800b3a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b3ac:	4607      	mov	r7, r0
 800b3ae:	460c      	mov	r4, r1
 800b3b0:	b10a      	cbz	r2, 800b3b6 <_printf_common+0x26>
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	6033      	str	r3, [r6, #0]
 800b3b6:	6823      	ldr	r3, [r4, #0]
 800b3b8:	0699      	lsls	r1, r3, #26
 800b3ba:	bf42      	ittt	mi
 800b3bc:	6833      	ldrmi	r3, [r6, #0]
 800b3be:	3302      	addmi	r3, #2
 800b3c0:	6033      	strmi	r3, [r6, #0]
 800b3c2:	6825      	ldr	r5, [r4, #0]
 800b3c4:	f015 0506 	ands.w	r5, r5, #6
 800b3c8:	d106      	bne.n	800b3d8 <_printf_common+0x48>
 800b3ca:	f104 0a19 	add.w	sl, r4, #25
 800b3ce:	68e3      	ldr	r3, [r4, #12]
 800b3d0:	6832      	ldr	r2, [r6, #0]
 800b3d2:	1a9b      	subs	r3, r3, r2
 800b3d4:	42ab      	cmp	r3, r5
 800b3d6:	dc26      	bgt.n	800b426 <_printf_common+0x96>
 800b3d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b3dc:	6822      	ldr	r2, [r4, #0]
 800b3de:	3b00      	subs	r3, #0
 800b3e0:	bf18      	it	ne
 800b3e2:	2301      	movne	r3, #1
 800b3e4:	0692      	lsls	r2, r2, #26
 800b3e6:	d42b      	bmi.n	800b440 <_printf_common+0xb0>
 800b3e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b3ec:	4641      	mov	r1, r8
 800b3ee:	4638      	mov	r0, r7
 800b3f0:	47c8      	blx	r9
 800b3f2:	3001      	adds	r0, #1
 800b3f4:	d01e      	beq.n	800b434 <_printf_common+0xa4>
 800b3f6:	6823      	ldr	r3, [r4, #0]
 800b3f8:	6922      	ldr	r2, [r4, #16]
 800b3fa:	f003 0306 	and.w	r3, r3, #6
 800b3fe:	2b04      	cmp	r3, #4
 800b400:	bf02      	ittt	eq
 800b402:	68e5      	ldreq	r5, [r4, #12]
 800b404:	6833      	ldreq	r3, [r6, #0]
 800b406:	1aed      	subeq	r5, r5, r3
 800b408:	68a3      	ldr	r3, [r4, #8]
 800b40a:	bf0c      	ite	eq
 800b40c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b410:	2500      	movne	r5, #0
 800b412:	4293      	cmp	r3, r2
 800b414:	bfc4      	itt	gt
 800b416:	1a9b      	subgt	r3, r3, r2
 800b418:	18ed      	addgt	r5, r5, r3
 800b41a:	2600      	movs	r6, #0
 800b41c:	341a      	adds	r4, #26
 800b41e:	42b5      	cmp	r5, r6
 800b420:	d11a      	bne.n	800b458 <_printf_common+0xc8>
 800b422:	2000      	movs	r0, #0
 800b424:	e008      	b.n	800b438 <_printf_common+0xa8>
 800b426:	2301      	movs	r3, #1
 800b428:	4652      	mov	r2, sl
 800b42a:	4641      	mov	r1, r8
 800b42c:	4638      	mov	r0, r7
 800b42e:	47c8      	blx	r9
 800b430:	3001      	adds	r0, #1
 800b432:	d103      	bne.n	800b43c <_printf_common+0xac>
 800b434:	f04f 30ff 	mov.w	r0, #4294967295
 800b438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b43c:	3501      	adds	r5, #1
 800b43e:	e7c6      	b.n	800b3ce <_printf_common+0x3e>
 800b440:	18e1      	adds	r1, r4, r3
 800b442:	1c5a      	adds	r2, r3, #1
 800b444:	2030      	movs	r0, #48	@ 0x30
 800b446:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b44a:	4422      	add	r2, r4
 800b44c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b450:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b454:	3302      	adds	r3, #2
 800b456:	e7c7      	b.n	800b3e8 <_printf_common+0x58>
 800b458:	2301      	movs	r3, #1
 800b45a:	4622      	mov	r2, r4
 800b45c:	4641      	mov	r1, r8
 800b45e:	4638      	mov	r0, r7
 800b460:	47c8      	blx	r9
 800b462:	3001      	adds	r0, #1
 800b464:	d0e6      	beq.n	800b434 <_printf_common+0xa4>
 800b466:	3601      	adds	r6, #1
 800b468:	e7d9      	b.n	800b41e <_printf_common+0x8e>
	...

0800b46c <_printf_i>:
 800b46c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b470:	7e0f      	ldrb	r7, [r1, #24]
 800b472:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b474:	2f78      	cmp	r7, #120	@ 0x78
 800b476:	4691      	mov	r9, r2
 800b478:	4680      	mov	r8, r0
 800b47a:	460c      	mov	r4, r1
 800b47c:	469a      	mov	sl, r3
 800b47e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b482:	d807      	bhi.n	800b494 <_printf_i+0x28>
 800b484:	2f62      	cmp	r7, #98	@ 0x62
 800b486:	d80a      	bhi.n	800b49e <_printf_i+0x32>
 800b488:	2f00      	cmp	r7, #0
 800b48a:	f000 80d1 	beq.w	800b630 <_printf_i+0x1c4>
 800b48e:	2f58      	cmp	r7, #88	@ 0x58
 800b490:	f000 80b8 	beq.w	800b604 <_printf_i+0x198>
 800b494:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b498:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b49c:	e03a      	b.n	800b514 <_printf_i+0xa8>
 800b49e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b4a2:	2b15      	cmp	r3, #21
 800b4a4:	d8f6      	bhi.n	800b494 <_printf_i+0x28>
 800b4a6:	a101      	add	r1, pc, #4	@ (adr r1, 800b4ac <_printf_i+0x40>)
 800b4a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b4ac:	0800b505 	.word	0x0800b505
 800b4b0:	0800b519 	.word	0x0800b519
 800b4b4:	0800b495 	.word	0x0800b495
 800b4b8:	0800b495 	.word	0x0800b495
 800b4bc:	0800b495 	.word	0x0800b495
 800b4c0:	0800b495 	.word	0x0800b495
 800b4c4:	0800b519 	.word	0x0800b519
 800b4c8:	0800b495 	.word	0x0800b495
 800b4cc:	0800b495 	.word	0x0800b495
 800b4d0:	0800b495 	.word	0x0800b495
 800b4d4:	0800b495 	.word	0x0800b495
 800b4d8:	0800b617 	.word	0x0800b617
 800b4dc:	0800b543 	.word	0x0800b543
 800b4e0:	0800b5d1 	.word	0x0800b5d1
 800b4e4:	0800b495 	.word	0x0800b495
 800b4e8:	0800b495 	.word	0x0800b495
 800b4ec:	0800b639 	.word	0x0800b639
 800b4f0:	0800b495 	.word	0x0800b495
 800b4f4:	0800b543 	.word	0x0800b543
 800b4f8:	0800b495 	.word	0x0800b495
 800b4fc:	0800b495 	.word	0x0800b495
 800b500:	0800b5d9 	.word	0x0800b5d9
 800b504:	6833      	ldr	r3, [r6, #0]
 800b506:	1d1a      	adds	r2, r3, #4
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	6032      	str	r2, [r6, #0]
 800b50c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b510:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b514:	2301      	movs	r3, #1
 800b516:	e09c      	b.n	800b652 <_printf_i+0x1e6>
 800b518:	6833      	ldr	r3, [r6, #0]
 800b51a:	6820      	ldr	r0, [r4, #0]
 800b51c:	1d19      	adds	r1, r3, #4
 800b51e:	6031      	str	r1, [r6, #0]
 800b520:	0606      	lsls	r6, r0, #24
 800b522:	d501      	bpl.n	800b528 <_printf_i+0xbc>
 800b524:	681d      	ldr	r5, [r3, #0]
 800b526:	e003      	b.n	800b530 <_printf_i+0xc4>
 800b528:	0645      	lsls	r5, r0, #25
 800b52a:	d5fb      	bpl.n	800b524 <_printf_i+0xb8>
 800b52c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b530:	2d00      	cmp	r5, #0
 800b532:	da03      	bge.n	800b53c <_printf_i+0xd0>
 800b534:	232d      	movs	r3, #45	@ 0x2d
 800b536:	426d      	negs	r5, r5
 800b538:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b53c:	4858      	ldr	r0, [pc, #352]	@ (800b6a0 <_printf_i+0x234>)
 800b53e:	230a      	movs	r3, #10
 800b540:	e011      	b.n	800b566 <_printf_i+0xfa>
 800b542:	6821      	ldr	r1, [r4, #0]
 800b544:	6833      	ldr	r3, [r6, #0]
 800b546:	0608      	lsls	r0, r1, #24
 800b548:	f853 5b04 	ldr.w	r5, [r3], #4
 800b54c:	d402      	bmi.n	800b554 <_printf_i+0xe8>
 800b54e:	0649      	lsls	r1, r1, #25
 800b550:	bf48      	it	mi
 800b552:	b2ad      	uxthmi	r5, r5
 800b554:	2f6f      	cmp	r7, #111	@ 0x6f
 800b556:	4852      	ldr	r0, [pc, #328]	@ (800b6a0 <_printf_i+0x234>)
 800b558:	6033      	str	r3, [r6, #0]
 800b55a:	bf14      	ite	ne
 800b55c:	230a      	movne	r3, #10
 800b55e:	2308      	moveq	r3, #8
 800b560:	2100      	movs	r1, #0
 800b562:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b566:	6866      	ldr	r6, [r4, #4]
 800b568:	60a6      	str	r6, [r4, #8]
 800b56a:	2e00      	cmp	r6, #0
 800b56c:	db05      	blt.n	800b57a <_printf_i+0x10e>
 800b56e:	6821      	ldr	r1, [r4, #0]
 800b570:	432e      	orrs	r6, r5
 800b572:	f021 0104 	bic.w	r1, r1, #4
 800b576:	6021      	str	r1, [r4, #0]
 800b578:	d04b      	beq.n	800b612 <_printf_i+0x1a6>
 800b57a:	4616      	mov	r6, r2
 800b57c:	fbb5 f1f3 	udiv	r1, r5, r3
 800b580:	fb03 5711 	mls	r7, r3, r1, r5
 800b584:	5dc7      	ldrb	r7, [r0, r7]
 800b586:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b58a:	462f      	mov	r7, r5
 800b58c:	42bb      	cmp	r3, r7
 800b58e:	460d      	mov	r5, r1
 800b590:	d9f4      	bls.n	800b57c <_printf_i+0x110>
 800b592:	2b08      	cmp	r3, #8
 800b594:	d10b      	bne.n	800b5ae <_printf_i+0x142>
 800b596:	6823      	ldr	r3, [r4, #0]
 800b598:	07df      	lsls	r7, r3, #31
 800b59a:	d508      	bpl.n	800b5ae <_printf_i+0x142>
 800b59c:	6923      	ldr	r3, [r4, #16]
 800b59e:	6861      	ldr	r1, [r4, #4]
 800b5a0:	4299      	cmp	r1, r3
 800b5a2:	bfde      	ittt	le
 800b5a4:	2330      	movle	r3, #48	@ 0x30
 800b5a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b5aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b5ae:	1b92      	subs	r2, r2, r6
 800b5b0:	6122      	str	r2, [r4, #16]
 800b5b2:	f8cd a000 	str.w	sl, [sp]
 800b5b6:	464b      	mov	r3, r9
 800b5b8:	aa03      	add	r2, sp, #12
 800b5ba:	4621      	mov	r1, r4
 800b5bc:	4640      	mov	r0, r8
 800b5be:	f7ff fee7 	bl	800b390 <_printf_common>
 800b5c2:	3001      	adds	r0, #1
 800b5c4:	d14a      	bne.n	800b65c <_printf_i+0x1f0>
 800b5c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b5ca:	b004      	add	sp, #16
 800b5cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5d0:	6823      	ldr	r3, [r4, #0]
 800b5d2:	f043 0320 	orr.w	r3, r3, #32
 800b5d6:	6023      	str	r3, [r4, #0]
 800b5d8:	4832      	ldr	r0, [pc, #200]	@ (800b6a4 <_printf_i+0x238>)
 800b5da:	2778      	movs	r7, #120	@ 0x78
 800b5dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b5e0:	6823      	ldr	r3, [r4, #0]
 800b5e2:	6831      	ldr	r1, [r6, #0]
 800b5e4:	061f      	lsls	r7, r3, #24
 800b5e6:	f851 5b04 	ldr.w	r5, [r1], #4
 800b5ea:	d402      	bmi.n	800b5f2 <_printf_i+0x186>
 800b5ec:	065f      	lsls	r7, r3, #25
 800b5ee:	bf48      	it	mi
 800b5f0:	b2ad      	uxthmi	r5, r5
 800b5f2:	6031      	str	r1, [r6, #0]
 800b5f4:	07d9      	lsls	r1, r3, #31
 800b5f6:	bf44      	itt	mi
 800b5f8:	f043 0320 	orrmi.w	r3, r3, #32
 800b5fc:	6023      	strmi	r3, [r4, #0]
 800b5fe:	b11d      	cbz	r5, 800b608 <_printf_i+0x19c>
 800b600:	2310      	movs	r3, #16
 800b602:	e7ad      	b.n	800b560 <_printf_i+0xf4>
 800b604:	4826      	ldr	r0, [pc, #152]	@ (800b6a0 <_printf_i+0x234>)
 800b606:	e7e9      	b.n	800b5dc <_printf_i+0x170>
 800b608:	6823      	ldr	r3, [r4, #0]
 800b60a:	f023 0320 	bic.w	r3, r3, #32
 800b60e:	6023      	str	r3, [r4, #0]
 800b610:	e7f6      	b.n	800b600 <_printf_i+0x194>
 800b612:	4616      	mov	r6, r2
 800b614:	e7bd      	b.n	800b592 <_printf_i+0x126>
 800b616:	6833      	ldr	r3, [r6, #0]
 800b618:	6825      	ldr	r5, [r4, #0]
 800b61a:	6961      	ldr	r1, [r4, #20]
 800b61c:	1d18      	adds	r0, r3, #4
 800b61e:	6030      	str	r0, [r6, #0]
 800b620:	062e      	lsls	r6, r5, #24
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	d501      	bpl.n	800b62a <_printf_i+0x1be>
 800b626:	6019      	str	r1, [r3, #0]
 800b628:	e002      	b.n	800b630 <_printf_i+0x1c4>
 800b62a:	0668      	lsls	r0, r5, #25
 800b62c:	d5fb      	bpl.n	800b626 <_printf_i+0x1ba>
 800b62e:	8019      	strh	r1, [r3, #0]
 800b630:	2300      	movs	r3, #0
 800b632:	6123      	str	r3, [r4, #16]
 800b634:	4616      	mov	r6, r2
 800b636:	e7bc      	b.n	800b5b2 <_printf_i+0x146>
 800b638:	6833      	ldr	r3, [r6, #0]
 800b63a:	1d1a      	adds	r2, r3, #4
 800b63c:	6032      	str	r2, [r6, #0]
 800b63e:	681e      	ldr	r6, [r3, #0]
 800b640:	6862      	ldr	r2, [r4, #4]
 800b642:	2100      	movs	r1, #0
 800b644:	4630      	mov	r0, r6
 800b646:	f7f4 fdcb 	bl	80001e0 <memchr>
 800b64a:	b108      	cbz	r0, 800b650 <_printf_i+0x1e4>
 800b64c:	1b80      	subs	r0, r0, r6
 800b64e:	6060      	str	r0, [r4, #4]
 800b650:	6863      	ldr	r3, [r4, #4]
 800b652:	6123      	str	r3, [r4, #16]
 800b654:	2300      	movs	r3, #0
 800b656:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b65a:	e7aa      	b.n	800b5b2 <_printf_i+0x146>
 800b65c:	6923      	ldr	r3, [r4, #16]
 800b65e:	4632      	mov	r2, r6
 800b660:	4649      	mov	r1, r9
 800b662:	4640      	mov	r0, r8
 800b664:	47d0      	blx	sl
 800b666:	3001      	adds	r0, #1
 800b668:	d0ad      	beq.n	800b5c6 <_printf_i+0x15a>
 800b66a:	6823      	ldr	r3, [r4, #0]
 800b66c:	079b      	lsls	r3, r3, #30
 800b66e:	d413      	bmi.n	800b698 <_printf_i+0x22c>
 800b670:	68e0      	ldr	r0, [r4, #12]
 800b672:	9b03      	ldr	r3, [sp, #12]
 800b674:	4298      	cmp	r0, r3
 800b676:	bfb8      	it	lt
 800b678:	4618      	movlt	r0, r3
 800b67a:	e7a6      	b.n	800b5ca <_printf_i+0x15e>
 800b67c:	2301      	movs	r3, #1
 800b67e:	4632      	mov	r2, r6
 800b680:	4649      	mov	r1, r9
 800b682:	4640      	mov	r0, r8
 800b684:	47d0      	blx	sl
 800b686:	3001      	adds	r0, #1
 800b688:	d09d      	beq.n	800b5c6 <_printf_i+0x15a>
 800b68a:	3501      	adds	r5, #1
 800b68c:	68e3      	ldr	r3, [r4, #12]
 800b68e:	9903      	ldr	r1, [sp, #12]
 800b690:	1a5b      	subs	r3, r3, r1
 800b692:	42ab      	cmp	r3, r5
 800b694:	dcf2      	bgt.n	800b67c <_printf_i+0x210>
 800b696:	e7eb      	b.n	800b670 <_printf_i+0x204>
 800b698:	2500      	movs	r5, #0
 800b69a:	f104 0619 	add.w	r6, r4, #25
 800b69e:	e7f5      	b.n	800b68c <_printf_i+0x220>
 800b6a0:	0800b805 	.word	0x0800b805
 800b6a4:	0800b816 	.word	0x0800b816

0800b6a8 <memmove>:
 800b6a8:	4288      	cmp	r0, r1
 800b6aa:	b510      	push	{r4, lr}
 800b6ac:	eb01 0402 	add.w	r4, r1, r2
 800b6b0:	d902      	bls.n	800b6b8 <memmove+0x10>
 800b6b2:	4284      	cmp	r4, r0
 800b6b4:	4623      	mov	r3, r4
 800b6b6:	d807      	bhi.n	800b6c8 <memmove+0x20>
 800b6b8:	1e43      	subs	r3, r0, #1
 800b6ba:	42a1      	cmp	r1, r4
 800b6bc:	d008      	beq.n	800b6d0 <memmove+0x28>
 800b6be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b6c6:	e7f8      	b.n	800b6ba <memmove+0x12>
 800b6c8:	4402      	add	r2, r0
 800b6ca:	4601      	mov	r1, r0
 800b6cc:	428a      	cmp	r2, r1
 800b6ce:	d100      	bne.n	800b6d2 <memmove+0x2a>
 800b6d0:	bd10      	pop	{r4, pc}
 800b6d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b6d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b6da:	e7f7      	b.n	800b6cc <memmove+0x24>

0800b6dc <memcpy>:
 800b6dc:	440a      	add	r2, r1
 800b6de:	4291      	cmp	r1, r2
 800b6e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b6e4:	d100      	bne.n	800b6e8 <memcpy+0xc>
 800b6e6:	4770      	bx	lr
 800b6e8:	b510      	push	{r4, lr}
 800b6ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6f2:	4291      	cmp	r1, r2
 800b6f4:	d1f9      	bne.n	800b6ea <memcpy+0xe>
 800b6f6:	bd10      	pop	{r4, pc}

0800b6f8 <_realloc_r>:
 800b6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6fc:	4607      	mov	r7, r0
 800b6fe:	4614      	mov	r4, r2
 800b700:	460d      	mov	r5, r1
 800b702:	b921      	cbnz	r1, 800b70e <_realloc_r+0x16>
 800b704:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b708:	4611      	mov	r1, r2
 800b70a:	f7ff bbad 	b.w	800ae68 <_malloc_r>
 800b70e:	b92a      	cbnz	r2, 800b71c <_realloc_r+0x24>
 800b710:	f7ff fc9c 	bl	800b04c <_free_r>
 800b714:	4625      	mov	r5, r4
 800b716:	4628      	mov	r0, r5
 800b718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b71c:	f000 f81a 	bl	800b754 <_malloc_usable_size_r>
 800b720:	4284      	cmp	r4, r0
 800b722:	4606      	mov	r6, r0
 800b724:	d802      	bhi.n	800b72c <_realloc_r+0x34>
 800b726:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b72a:	d8f4      	bhi.n	800b716 <_realloc_r+0x1e>
 800b72c:	4621      	mov	r1, r4
 800b72e:	4638      	mov	r0, r7
 800b730:	f7ff fb9a 	bl	800ae68 <_malloc_r>
 800b734:	4680      	mov	r8, r0
 800b736:	b908      	cbnz	r0, 800b73c <_realloc_r+0x44>
 800b738:	4645      	mov	r5, r8
 800b73a:	e7ec      	b.n	800b716 <_realloc_r+0x1e>
 800b73c:	42b4      	cmp	r4, r6
 800b73e:	4622      	mov	r2, r4
 800b740:	4629      	mov	r1, r5
 800b742:	bf28      	it	cs
 800b744:	4632      	movcs	r2, r6
 800b746:	f7ff ffc9 	bl	800b6dc <memcpy>
 800b74a:	4629      	mov	r1, r5
 800b74c:	4638      	mov	r0, r7
 800b74e:	f7ff fc7d 	bl	800b04c <_free_r>
 800b752:	e7f1      	b.n	800b738 <_realloc_r+0x40>

0800b754 <_malloc_usable_size_r>:
 800b754:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b758:	1f18      	subs	r0, r3, #4
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	bfbc      	itt	lt
 800b75e:	580b      	ldrlt	r3, [r1, r0]
 800b760:	18c0      	addlt	r0, r0, r3
 800b762:	4770      	bx	lr

0800b764 <_init>:
 800b764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b766:	bf00      	nop
 800b768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b76a:	bc08      	pop	{r3}
 800b76c:	469e      	mov	lr, r3
 800b76e:	4770      	bx	lr

0800b770 <_fini>:
 800b770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b772:	bf00      	nop
 800b774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b776:	bc08      	pop	{r3}
 800b778:	469e      	mov	lr, r3
 800b77a:	4770      	bx	lr
