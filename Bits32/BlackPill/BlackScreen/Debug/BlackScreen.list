
BlackScreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b490  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800b630  0800b630  0000c630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6dc  0800b6dc  0000d158  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b6dc  0800b6dc  0000c6dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6e4  0800b6e4  0000d158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6e4  0800b6e4  0000c6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b6e8  0800b6e8  0000c6e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  0800b6ec  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017a0  20000158  0800b844  0000d158  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200018f8  0800b844  0000d8f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d158  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019bfa  00000000  00000000  0000d188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004180  00000000  00000000  00026d82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a0  00000000  00000000  0002af08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001238  00000000  00000000  0002c6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000071ce  00000000  00000000  0002d8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e7d4  00000000  00000000  00034aae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f51e  00000000  00000000  00053282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f27a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000687c  00000000  00000000  000f27e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000f9060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000158 	.word	0x20000158
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b618 	.word	0x0800b618

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000015c 	.word	0x2000015c
 80001dc:	0800b618 	.word	0x0800b618

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <UP_initprotocol>:
_work casts;
int16_t value=9999;
_eProtocolo estadoProtocolo;
_sDato *datosComLib;

void UP_initprotocol(_sDato *datosCom,uint8_t ringbuff){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	70fb      	strb	r3, [r7, #3]

		datosCom->bufferRx = malloc(ringbuff);
 80005b8:	78fb      	ldrb	r3, [r7, #3]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f00a fb84 	bl	800acc8 <malloc>
 80005c0:	4603      	mov	r3, r0
 80005c2:	461a      	mov	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	609a      	str	r2, [r3, #8]
	    datosCom->bufferTx = malloc(ringbuff);
 80005c8:	78fb      	ldrb	r3, [r7, #3]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f00a fb7c 	bl	800acc8 <malloc>
 80005d0:	4603      	mov	r3, r0
 80005d2:	461a      	mov	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	60da      	str	r2, [r3, #12]
	    datosComLib=datosCom;
 80005d8:	4a03      	ldr	r2, [pc, #12]	@ (80005e8 <UP_initprotocol+0x3c>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6013      	str	r3, [r2, #0]

}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	2000017c 	.word	0x2000017c

080005ec <UP_sendInfo>:

void UP_sendInfo(uint8_t bufferAux[],uint8_t bytes){
 80005ec:	b490      	push	{r4, r7}
 80005ee:	b08c      	sub	sp, #48	@ 0x30
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	460b      	mov	r3, r1
 80005f6:	70fb      	strb	r3, [r7, #3]

    uint8_t bufAux[30], indiceAux=0,cks=0,i=0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80005fe:	2300      	movs	r3, #0
 8000600:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000604:	2300      	movs	r3, #0
 8000606:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    bufAux[indiceAux++]='U';
 800060a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800060e:	1c5a      	adds	r2, r3, #1
 8000610:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000614:	3330      	adds	r3, #48	@ 0x30
 8000616:	443b      	add	r3, r7
 8000618:	2255      	movs	r2, #85	@ 0x55
 800061a:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='N';
 800061e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000622:	1c5a      	adds	r2, r3, #1
 8000624:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000628:	3330      	adds	r3, #48	@ 0x30
 800062a:	443b      	add	r3, r7
 800062c:	224e      	movs	r2, #78	@ 0x4e
 800062e:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='E';
 8000632:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000636:	1c5a      	adds	r2, r3, #1
 8000638:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 800063c:	3330      	adds	r3, #48	@ 0x30
 800063e:	443b      	add	r3, r7
 8000640:	2245      	movs	r2, #69	@ 0x45
 8000642:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='R';
 8000646:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800064a:	1c5a      	adds	r2, r3, #1
 800064c:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000650:	3330      	adds	r3, #48	@ 0x30
 8000652:	443b      	add	r3, r7
 8000654:	2252      	movs	r2, #82	@ 0x52
 8000656:	f803 2c24 	strb.w	r2, [r3, #-36]

    bufAux[indiceAux++]=bytes;
 800065a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800065e:	1c5a      	adds	r2, r3, #1
 8000660:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000664:	3330      	adds	r3, #48	@ 0x30
 8000666:	443b      	add	r3, r7
 8000668:	78fa      	ldrb	r2, [r7, #3]
 800066a:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]=':';
 800066e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000672:	1c5a      	adds	r2, r3, #1
 8000674:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000678:	3330      	adds	r3, #48	@ 0x30
 800067a:	443b      	add	r3, r7
 800067c:	223a      	movs	r2, #58	@ 0x3a
 800067e:	f803 2c24 	strb.w	r2, [r3, #-36]

    for(i=0; i<bytes-1; i++)
 8000682:	2300      	movs	r3, #0
 8000684:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000688:	e012      	b.n	80006b0 <UP_sendInfo+0xc4>
        bufAux[indiceAux++] = bufferAux[i];
 800068a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	441a      	add	r2, r3
 8000692:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000696:	1c59      	adds	r1, r3, #1
 8000698:	f887 102f 	strb.w	r1, [r7, #47]	@ 0x2f
 800069c:	7812      	ldrb	r2, [r2, #0]
 800069e:	3330      	adds	r3, #48	@ 0x30
 80006a0:	443b      	add	r3, r7
 80006a2:	f803 2c24 	strb.w	r2, [r3, #-36]
    for(i=0; i<bytes-1; i++)
 80006a6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80006aa:	3301      	adds	r3, #1
 80006ac:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80006b0:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80006b4:	78fb      	ldrb	r3, [r7, #3]
 80006b6:	3b01      	subs	r3, #1
 80006b8:	429a      	cmp	r2, r3
 80006ba:	dbe6      	blt.n	800068a <UP_sendInfo+0x9e>

    cks=0;
 80006bc:	2300      	movs	r3, #0
 80006be:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    for(i=0 ;i<indiceAux;i++){
 80006c2:	2300      	movs	r3, #0
 80006c4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80006c8:	e022      	b.n	8000710 <UP_sendInfo+0x124>
        cks^= bufAux[i];
 80006ca:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80006ce:	3330      	adds	r3, #48	@ 0x30
 80006d0:	443b      	add	r3, r7
 80006d2:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 80006d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80006da:	4053      	eors	r3, r2
 80006dc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        datosComLib->bufferTx[datosComLib->indexWriteTx++]=bufAux[i];
 80006e0:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 80006e4:	4b19      	ldr	r3, [pc, #100]	@ (800074c <UP_sendInfo+0x160>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	68d8      	ldr	r0, [r3, #12]
 80006ea:	4b18      	ldr	r3, [pc, #96]	@ (800074c <UP_sendInfo+0x160>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	795a      	ldrb	r2, [r3, #5]
 80006f0:	1c54      	adds	r4, r2, #1
 80006f2:	b2e4      	uxtb	r4, r4
 80006f4:	715c      	strb	r4, [r3, #5]
 80006f6:	4613      	mov	r3, r2
 80006f8:	4403      	add	r3, r0
 80006fa:	f101 0230 	add.w	r2, r1, #48	@ 0x30
 80006fe:	443a      	add	r2, r7
 8000700:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 8000704:	701a      	strb	r2, [r3, #0]
    for(i=0 ;i<indiceAux;i++){
 8000706:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800070a:	3301      	adds	r3, #1
 800070c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000710:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000714:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000718:	429a      	cmp	r2, r3
 800071a:	d3d6      	bcc.n	80006ca <UP_sendInfo+0xde>
    }
     datosComLib->bufferTx[datosComLib->indexWriteTx++]=cks;
 800071c:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <UP_sendInfo+0x160>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	68d9      	ldr	r1, [r3, #12]
 8000722:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <UP_sendInfo+0x160>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	795a      	ldrb	r2, [r3, #5]
 8000728:	1c50      	adds	r0, r2, #1
 800072a:	b2c0      	uxtb	r0, r0
 800072c:	7158      	strb	r0, [r3, #5]
 800072e:	4613      	mov	r3, r2
 8000730:	440b      	add	r3, r1
 8000732:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000736:	701a      	strb	r2, [r3, #0]

     datosComLib->bytesTosend=indiceAux;
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <UP_sendInfo+0x160>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000740:	741a      	strb	r2, [r3, #16]

}
 8000742:	bf00      	nop
 8000744:	3730      	adds	r7, #48	@ 0x30
 8000746:	46bd      	mov	sp, r7
 8000748:	bc90      	pop	{r4, r7}
 800074a:	4770      	bx	lr
 800074c:	2000017c 	.word	0x2000017c

08000750 <UP_decodeHeader>:

void UP_decodeHeader(_sDato *datosComLib){
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]

    static uint8_t nBytes=0;

    uint8_t indexWriteRxCopy=datosComLib->indexWriteRx;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	78db      	ldrb	r3, [r3, #3]
 800075c:	73fb      	strb	r3, [r7, #15]

    while (datosComLib->indexReadRx!=indexWriteRxCopy)
 800075e:	e0e2      	b.n	8000926 <UP_decodeHeader+0x1d6>
    {
        switch (estadoProtocolo) {
 8000760:	4b76      	ldr	r3, [pc, #472]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b06      	cmp	r3, #6
 8000766:	f200 80d7 	bhi.w	8000918 <UP_decodeHeader+0x1c8>
 800076a:	a201      	add	r2, pc, #4	@ (adr r2, 8000770 <UP_decodeHeader+0x20>)
 800076c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000770:	0800078d 	.word	0x0800078d
 8000774:	080007b5 	.word	0x080007b5
 8000778:	080007e9 	.word	0x080007e9
 800077c:	0800081d 	.word	0x0800081d
 8000780:	08000851 	.word	0x08000851
 8000784:	08000879 	.word	0x08000879
 8000788:	080008bb 	.word	0x080008bb
            case START:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='U'){
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	689a      	ldr	r2, [r3, #8]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	791b      	ldrb	r3, [r3, #4]
 8000794:	1c59      	adds	r1, r3, #1
 8000796:	b2c8      	uxtb	r0, r1
 8000798:	6879      	ldr	r1, [r7, #4]
 800079a:	7108      	strb	r0, [r1, #4]
 800079c:	4413      	add	r3, r2
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b55      	cmp	r3, #85	@ 0x55
 80007a2:	f040 80bd 	bne.w	8000920 <UP_decodeHeader+0x1d0>
                    estadoProtocolo=HEADER_1;
 80007a6:	4b65      	ldr	r3, [pc, #404]	@ (800093c <UP_decodeHeader+0x1ec>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	701a      	strb	r2, [r3, #0]
                    datosComLib->cheksumRx=0;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2200      	movs	r2, #0
 80007b0:	709a      	strb	r2, [r3, #2]
                }
                break;
 80007b2:	e0b5      	b.n	8000920 <UP_decodeHeader+0x1d0>
            case HEADER_1:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='N')
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	689a      	ldr	r2, [r3, #8]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	791b      	ldrb	r3, [r3, #4]
 80007bc:	1c59      	adds	r1, r3, #1
 80007be:	b2c8      	uxtb	r0, r1
 80007c0:	6879      	ldr	r1, [r7, #4]
 80007c2:	7108      	strb	r0, [r1, #4]
 80007c4:	4413      	add	r3, r2
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b4e      	cmp	r3, #78	@ 0x4e
 80007ca:	d103      	bne.n	80007d4 <UP_decodeHeader+0x84>
                   estadoProtocolo=HEADER_2;
 80007cc:	4b5b      	ldr	r3, [pc, #364]	@ (800093c <UP_decodeHeader+0x1ec>)
 80007ce:	2202      	movs	r2, #2
 80007d0:	701a      	strb	r2, [r3, #0]
                else{
                    datosComLib->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 80007d2:	e0a8      	b.n	8000926 <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	791b      	ldrb	r3, [r3, #4]
 80007d8:	3b01      	subs	r3, #1
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 80007e0:	4b56      	ldr	r3, [pc, #344]	@ (800093c <UP_decodeHeader+0x1ec>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
                break;
 80007e6:	e09e      	b.n	8000926 <UP_decodeHeader+0x1d6>
            case HEADER_2:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='E')
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	689a      	ldr	r2, [r3, #8]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	791b      	ldrb	r3, [r3, #4]
 80007f0:	1c59      	adds	r1, r3, #1
 80007f2:	b2c8      	uxtb	r0, r1
 80007f4:	6879      	ldr	r1, [r7, #4]
 80007f6:	7108      	strb	r0, [r1, #4]
 80007f8:	4413      	add	r3, r2
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b45      	cmp	r3, #69	@ 0x45
 80007fe:	d103      	bne.n	8000808 <UP_decodeHeader+0xb8>
                    estadoProtocolo=HEADER_3;
 8000800:	4b4e      	ldr	r3, [pc, #312]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000802:	2203      	movs	r2, #3
 8000804:	701a      	strb	r2, [r3, #0]
                else{
                    datosComLib->indexReadRx--;
                   estadoProtocolo=START;
                }
                break;
 8000806:	e08e      	b.n	8000926 <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	791b      	ldrb	r3, [r3, #4]
 800080c:	3b01      	subs	r3, #1
 800080e:	b2da      	uxtb	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	711a      	strb	r2, [r3, #4]
                   estadoProtocolo=START;
 8000814:	4b49      	ldr	r3, [pc, #292]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
                break;
 800081a:	e084      	b.n	8000926 <UP_decodeHeader+0x1d6>
			case HEADER_3:
				if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='R')
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	689a      	ldr	r2, [r3, #8]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	791b      	ldrb	r3, [r3, #4]
 8000824:	1c59      	adds	r1, r3, #1
 8000826:	b2c8      	uxtb	r0, r1
 8000828:	6879      	ldr	r1, [r7, #4]
 800082a:	7108      	strb	r0, [r1, #4]
 800082c:	4413      	add	r3, r2
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b52      	cmp	r3, #82	@ 0x52
 8000832:	d103      	bne.n	800083c <UP_decodeHeader+0xec>
					estadoProtocolo=NBYTES;
 8000834:	4b41      	ldr	r3, [pc, #260]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000836:	2204      	movs	r2, #4
 8000838:	701a      	strb	r2, [r3, #0]
				else{
					datosComLib->indexReadRx--;
				    estadoProtocolo=START;
				}
            break;
 800083a:	e074      	b.n	8000926 <UP_decodeHeader+0x1d6>
					datosComLib->indexReadRx--;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	791b      	ldrb	r3, [r3, #4]
 8000840:	3b01      	subs	r3, #1
 8000842:	b2da      	uxtb	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	711a      	strb	r2, [r3, #4]
				    estadoProtocolo=START;
 8000848:	4b3c      	ldr	r3, [pc, #240]	@ (800093c <UP_decodeHeader+0x1ec>)
 800084a:	2200      	movs	r2, #0
 800084c:	701a      	strb	r2, [r3, #0]
            break;
 800084e:	e06a      	b.n	8000926 <UP_decodeHeader+0x1d6>
            case NBYTES:
                datosComLib->indexStart=datosComLib->indexReadRx;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	791a      	ldrb	r2, [r3, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	705a      	strb	r2, [r3, #1]
                nBytes=datosComLib->bufferRx[datosComLib->indexReadRx++];
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	689a      	ldr	r2, [r3, #8]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	791b      	ldrb	r3, [r3, #4]
 8000860:	1c59      	adds	r1, r3, #1
 8000862:	b2c8      	uxtb	r0, r1
 8000864:	6879      	ldr	r1, [r7, #4]
 8000866:	7108      	strb	r0, [r1, #4]
 8000868:	4413      	add	r3, r2
 800086a:	781a      	ldrb	r2, [r3, #0]
 800086c:	4b34      	ldr	r3, [pc, #208]	@ (8000940 <UP_decodeHeader+0x1f0>)
 800086e:	701a      	strb	r2, [r3, #0]
                estadoProtocolo=TOKEN;
 8000870:	4b32      	ldr	r3, [pc, #200]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000872:	2205      	movs	r2, #5
 8000874:	701a      	strb	r2, [r3, #0]
                break;
 8000876:	e056      	b.n	8000926 <UP_decodeHeader+0x1d6>
            case TOKEN:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]==':'){
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	689a      	ldr	r2, [r3, #8]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	791b      	ldrb	r3, [r3, #4]
 8000880:	1c59      	adds	r1, r3, #1
 8000882:	b2c8      	uxtb	r0, r1
 8000884:	6879      	ldr	r1, [r7, #4]
 8000886:	7108      	strb	r0, [r1, #4]
 8000888:	4413      	add	r3, r2
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b3a      	cmp	r3, #58	@ 0x3a
 800088e:	d10a      	bne.n	80008a6 <UP_decodeHeader+0x156>
                   estadoProtocolo=PAYLOAD;
 8000890:	4b2a      	ldr	r3, [pc, #168]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000892:	2206      	movs	r2, #6
 8000894:	701a      	strb	r2, [r3, #0]
                    datosComLib->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 8000896:	4b2a      	ldr	r3, [pc, #168]	@ (8000940 <UP_decodeHeader+0x1f0>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	709a      	strb	r2, [r3, #2]
                }
                else{
                    datosComLib->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 80008a4:	e03f      	b.n	8000926 <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	791b      	ldrb	r3, [r3, #4]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 80008b2:	4b22      	ldr	r3, [pc, #136]	@ (800093c <UP_decodeHeader+0x1ec>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
                break;
 80008b8:	e035      	b.n	8000926 <UP_decodeHeader+0x1d6>
            case PAYLOAD:
                if (nBytes>1){
 80008ba:	4b21      	ldr	r3, [pc, #132]	@ (8000940 <UP_decodeHeader+0x1f0>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d90f      	bls.n	80008e2 <UP_decodeHeader+0x192>
                    datosComLib->cheksumRx ^= datosComLib->bufferRx[datosComLib->indexReadRx++];
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	689a      	ldr	r2, [r3, #8]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	791b      	ldrb	r3, [r3, #4]
 80008ca:	1c59      	adds	r1, r3, #1
 80008cc:	b2c8      	uxtb	r0, r1
 80008ce:	6879      	ldr	r1, [r7, #4]
 80008d0:	7108      	strb	r0, [r1, #4]
 80008d2:	4413      	add	r3, r2
 80008d4:	781a      	ldrb	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	789b      	ldrb	r3, [r3, #2]
 80008da:	4053      	eors	r3, r2
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	709a      	strb	r2, [r3, #2]
                }
                nBytes--;
 80008e2:	4b17      	ldr	r3, [pc, #92]	@ (8000940 <UP_decodeHeader+0x1f0>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4b15      	ldr	r3, [pc, #84]	@ (8000940 <UP_decodeHeader+0x1f0>)
 80008ec:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){
 80008ee:	4b14      	ldr	r3, [pc, #80]	@ (8000940 <UP_decodeHeader+0x1f0>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d116      	bne.n	8000924 <UP_decodeHeader+0x1d4>
                    estadoProtocolo=START;
 80008f6:	4b11      	ldr	r3, [pc, #68]	@ (800093c <UP_decodeHeader+0x1ec>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
                    if(datosComLib->cheksumRx == datosComLib->bufferRx[datosComLib->indexReadRx]){
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	789a      	ldrb	r2, [r3, #2]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	6879      	ldr	r1, [r7, #4]
 8000906:	7909      	ldrb	r1, [r1, #4]
 8000908:	440b      	add	r3, r1
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	429a      	cmp	r2, r3
 800090e:	d109      	bne.n	8000924 <UP_decodeHeader+0x1d4>
                    	UP_decodeData(datosComLib);
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f000 f817 	bl	8000944 <UP_decodeData>
                    }
                }

                break;
 8000916:	e005      	b.n	8000924 <UP_decodeHeader+0x1d4>
            default:
                estadoProtocolo=START;
 8000918:	4b08      	ldr	r3, [pc, #32]	@ (800093c <UP_decodeHeader+0x1ec>)
 800091a:	2200      	movs	r2, #0
 800091c:	701a      	strb	r2, [r3, #0]
                break;
 800091e:	e002      	b.n	8000926 <UP_decodeHeader+0x1d6>
                break;
 8000920:	bf00      	nop
 8000922:	e000      	b.n	8000926 <UP_decodeHeader+0x1d6>
                break;
 8000924:	bf00      	nop
    while (datosComLib->indexReadRx!=indexWriteRxCopy)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	791b      	ldrb	r3, [r3, #4]
 800092a:	7bfa      	ldrb	r2, [r7, #15]
 800092c:	429a      	cmp	r2, r3
 800092e:	f47f af17 	bne.w	8000760 <UP_decodeHeader+0x10>
        }
    }
}
 8000932:	bf00      	nop
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000178 	.word	0x20000178
 8000940:	20000180 	.word	0x20000180

08000944 <UP_decodeData>:

void UP_decodeData(_sDato *datosComLib){
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]

    uint8_t bufAux[20], indiceAux=0,bytes=0;
 800094c:	2300      	movs	r3, #0
 800094e:	77bb      	strb	r3, [r7, #30]
 8000950:	2300      	movs	r3, #0
 8000952:	77fb      	strb	r3, [r7, #31]

    switch (datosComLib->bufferRx[datosComLib->indexStart+2])//CMD EN LA POSICION 2
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	689a      	ldr	r2, [r3, #8]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	785b      	ldrb	r3, [r3, #1]
 800095c:	3302      	adds	r3, #2
 800095e:	4413      	add	r3, r2
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2bf2      	cmp	r3, #242	@ 0xf2
 8000964:	d01f      	beq.n	80009a6 <UP_decodeData+0x62>
 8000966:	2bf2      	cmp	r3, #242	@ 0xf2
 8000968:	dc46      	bgt.n	80009f8 <UP_decodeData+0xb4>
 800096a:	2bf1      	cmp	r3, #241	@ 0xf1
 800096c:	d010      	beq.n	8000990 <UP_decodeData+0x4c>
 800096e:	2bf1      	cmp	r3, #241	@ 0xf1
 8000970:	dc42      	bgt.n	80009f8 <UP_decodeData+0xb4>
 8000972:	2b00      	cmp	r3, #0
 8000974:	d020      	beq.n	80009b8 <UP_decodeData+0x74>
 8000976:	2bf0      	cmp	r3, #240	@ 0xf0
 8000978:	d13e      	bne.n	80009f8 <UP_decodeData+0xb4>
    {
    case ALIVE:

        bufAux[indiceAux++]=ALIVE;
 800097a:	7fbb      	ldrb	r3, [r7, #30]
 800097c:	1c5a      	adds	r2, r3, #1
 800097e:	77ba      	strb	r2, [r7, #30]
 8000980:	3320      	adds	r3, #32
 8000982:	443b      	add	r3, r7
 8000984:	22f0      	movs	r2, #240	@ 0xf0
 8000986:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;//aca debo darle CMD+CKS+PAYLOAD
 800098a:	2302      	movs	r3, #2
 800098c:	77fb      	strb	r3, [r7, #31]

    break;
 800098e:	e03e      	b.n	8000a0e <UP_decodeData+0xca>
    case FIRMWARE:

		bufAux[indiceAux++]=FIRMWARE;
 8000990:	7fbb      	ldrb	r3, [r7, #30]
 8000992:	1c5a      	adds	r2, r3, #1
 8000994:	77ba      	strb	r2, [r7, #30]
 8000996:	3320      	adds	r3, #32
 8000998:	443b      	add	r3, r7
 800099a:	22f1      	movs	r2, #241	@ 0xf1
 800099c:	f803 2c18 	strb.w	r2, [r3, #-24]
		bytes=0x02;
 80009a0:	2302      	movs	r3, #2
 80009a2:	77fb      	strb	r3, [r7, #31]

    break;
 80009a4:	e033      	b.n	8000a0e <UP_decodeData+0xca>

    case TEXT:

		bufAux[indiceAux++]=TEXT;
 80009a6:	7fbb      	ldrb	r3, [r7, #30]
 80009a8:	1c5a      	adds	r2, r3, #1
 80009aa:	77ba      	strb	r2, [r7, #30]
 80009ac:	3320      	adds	r3, #32
 80009ae:	443b      	add	r3, r7
 80009b0:	22f2      	movs	r2, #242	@ 0xf2
 80009b2:	f803 2c18 	strb.w	r2, [r3, #-24]
//		bytes=;

    break;
 80009b6:	e02a      	b.n	8000a0e <UP_decodeData+0xca>

    case ENGINES:
    	bufAux[indiceAux++]=ENGINES;
 80009b8:	7fbb      	ldrb	r3, [r7, #30]
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	77ba      	strb	r2, [r7, #30]
 80009be:	3320      	adds	r3, #32
 80009c0:	443b      	add	r3, r7
 80009c2:	2200      	movs	r2, #0
 80009c4:	f803 2c18 	strb.w	r2, [r3, #-24]

    	casts.u8[0]=datosComLib->bufferRx[datosComLib->indexStart+3];
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	689a      	ldr	r2, [r3, #8]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	785b      	ldrb	r3, [r3, #1]
 80009d0:	3303      	adds	r3, #3
 80009d2:	4413      	add	r3, r2
 80009d4:	781a      	ldrb	r2, [r3, #0]
 80009d6:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <UP_decodeData+0xe0>)
 80009d8:	701a      	strb	r2, [r3, #0]
    	casts.u8[1]=datosComLib->bufferRx[datosComLib->indexStart+4];
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	689a      	ldr	r2, [r3, #8]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	785b      	ldrb	r3, [r3, #1]
 80009e2:	3304      	adds	r3, #4
 80009e4:	4413      	add	r3, r2
 80009e6:	781a      	ldrb	r2, [r3, #0]
 80009e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <UP_decodeData+0xe0>)
 80009ea:	705a      	strb	r2, [r3, #1]

    	value = casts.i16[0]; //ver aca que pasa para recuperar el valor de la velocidad
 80009ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000a24 <UP_decodeData+0xe0>)
 80009ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 80009f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a28 <UP_decodeData+0xe4>)
 80009f4:	801a      	strh	r2, [r3, #0]

    break;
 80009f6:	e00a      	b.n	8000a0e <UP_decodeData+0xca>
    default:

        bufAux[indiceAux++]=0xFF;
 80009f8:	7fbb      	ldrb	r3, [r7, #30]
 80009fa:	1c5a      	adds	r2, r3, #1
 80009fc:	77ba      	strb	r2, [r7, #30]
 80009fe:	3320      	adds	r3, #32
 8000a00:	443b      	add	r3, r7
 8000a02:	22ff      	movs	r2, #255	@ 0xff
 8000a04:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	77fb      	strb	r3, [r7, #31]

    break;
 8000a0c:	bf00      	nop
    }

    UP_sendInfo(bufAux,bytes);
 8000a0e:	7ffa      	ldrb	r2, [r7, #31]
 8000a10:	f107 0308 	add.w	r3, r7, #8
 8000a14:	4611      	mov	r1, r2
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff fde8 	bl	80005ec <UP_sendInfo>
}
 8000a1c:	bf00      	nop
 8000a1e:	3720      	adds	r7, #32
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000174 	.word	0x20000174
 8000a28:	20000000 	.word	0x20000000

08000a2c <UP_datafromUSB>:

void UP_datafromUSB(uint8_t *buf, uint16_t length) {
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	460b      	mov	r3, r1
 8000a36:	807b      	strh	r3, [r7, #2]

  uint16_t i;

  for (i = 0; i < length; i++) {
 8000a38:	2300      	movs	r3, #0
 8000a3a:	81fb      	strh	r3, [r7, #14]
 8000a3c:	e016      	b.n	8000a6c <UP_datafromUSB+0x40>
	datosComLib->bufferRx[datosComLib->indexWriteRx] = buf[i];
 8000a3e:	89fb      	ldrh	r3, [r7, #14]
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	441a      	add	r2, r3
 8000a44:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <UP_datafromUSB+0x58>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	490e      	ldr	r1, [pc, #56]	@ (8000a84 <UP_datafromUSB+0x58>)
 8000a4c:	6809      	ldr	r1, [r1, #0]
 8000a4e:	78c9      	ldrb	r1, [r1, #3]
 8000a50:	b2c9      	uxtb	r1, r1
 8000a52:	440b      	add	r3, r1
 8000a54:	7812      	ldrb	r2, [r2, #0]
 8000a56:	701a      	strb	r2, [r3, #0]
	datosComLib->indexWriteRx++;
 8000a58:	4b0a      	ldr	r3, [pc, #40]	@ (8000a84 <UP_datafromUSB+0x58>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	78da      	ldrb	r2, [r3, #3]
 8000a5e:	b2d2      	uxtb	r2, r2
 8000a60:	3201      	adds	r2, #1
 8000a62:	b2d2      	uxtb	r2, r2
 8000a64:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < length; i++) {
 8000a66:	89fb      	ldrh	r3, [r7, #14]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	81fb      	strh	r3, [r7, #14]
 8000a6c:	89fa      	ldrh	r2, [r7, #14]
 8000a6e:	887b      	ldrh	r3, [r7, #2]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d3e4      	bcc.n	8000a3e <UP_datafromUSB+0x12>
  }
}
 8000a74:	bf00      	nop
 8000a76:	bf00      	nop
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	2000017c 	.word	0x2000017c

08000a88 <en_InitENG>:
 *      Author: Baccon
 */
#include "engines.h"
#include "stdlib.h"

void en_InitENG(_sEng *engines,uint16_t maxSpeed){
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	807b      	strh	r3, [r7, #2]

	engines->estado=FREE;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2202      	movs	r2, #2
 8000a98:	709a      	strb	r2, [r3, #2]
	engines->speed=0;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	801a      	strh	r2, [r3, #0]
	engines->maxSpeed=maxSpeed;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	887a      	ldrh	r2, [r7, #2]
 8000aa4:	809a      	strh	r2, [r3, #4]

}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
	...

08000ab4 <HAL_ADC_ConvCpltCallback>:
//void I2C_1_Abstract_Mem_Read_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b088      	sub	sp, #32
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]

	uint8_t u=0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	77fb      	strb	r3, [r7, #31]
	char palabra[18];

	for(u=0;u<NUM_CHANNELS;u++){
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	77fb      	strb	r3, [r7, #31]
 8000ac4:	e00c      	b.n	8000ae0 <HAL_ADC_ConvCpltCallback+0x2c>

//		casts.u16[0]=adcBuffer[u];
		sprintf(&palabra[0],"Channel %d:%i\n",u,adcBuffer[u]);
 8000ac6:	7ffa      	ldrb	r2, [r7, #31]
 8000ac8:	7ffb      	ldrb	r3, [r7, #31]
 8000aca:	490b      	ldr	r1, [pc, #44]	@ (8000af8 <HAL_ADC_ConvCpltCallback+0x44>)
 8000acc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ad0:	f107 000c 	add.w	r0, r7, #12
 8000ad4:	4909      	ldr	r1, [pc, #36]	@ (8000afc <HAL_ADC_ConvCpltCallback+0x48>)
 8000ad6:	f00a f9ad 	bl	800ae34 <siprintf>
	for(u=0;u<NUM_CHANNELS;u++){
 8000ada:	7ffb      	ldrb	r3, [r7, #31]
 8000adc:	3301      	adds	r3, #1
 8000ade:	77fb      	strb	r3, [r7, #31]
 8000ae0:	7ffb      	ldrb	r3, [r7, #31]
 8000ae2:	2b07      	cmp	r3, #7
 8000ae4:	d9ef      	bls.n	8000ac6 <HAL_ADC_ConvCpltCallback+0x12>
//		memcpy(datosComSerie.bufferTx,palabra,sizeof(palabra));
//		datosComSerie.indexWriteTx  += sizeof(palabra);
	}
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000ae6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aea:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000aec:	f002 f9f7 	bl	8002ede <HAL_GPIO_TogglePin>
}
 8000af0:	bf00      	nop
 8000af2:	3720      	adds	r7, #32
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000384 	.word	0x20000384
 8000afc:	0800b630 	.word	0x0800b630
 8000b00:	40020800 	.word	0x40020800

08000b04 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM11) {
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a04      	ldr	r2, [pc, #16]	@ (8000b24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d101      	bne.n	8000b1a <HAL_TIM_PeriodElapsedCallback+0x16>
		task10ms();//cambiar esto por una bandera
 8000b16:	f000 f815 	bl	8000b44 <task10ms>
	}
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40014800 	.word	0x40014800

08000b28 <HAL_I2C_MemRxCpltCallback>:
	if(hi2c->Devaddress==SSD1306_I2C_ADDR){
		SSD1306_DMAREADY();
	}
}

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress==SSD1306_I2C_ADDR){
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b34:	2b78      	cmp	r3, #120	@ 0x78
 8000b36:	d101      	bne.n	8000b3c <HAL_I2C_MemRxCpltCallback+0x14>
		SSD1306_DMAREADY();
 8000b38:	f000 fca8 	bl	800148c <SSD1306_DMAREADY>
	}
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <task10ms>:

void task10ms(){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
//		if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 5000) == HAL_OK){
//
//			SISINIT=TRUE;
//		}
//	}
	if(ticker%10==0){
 8000b48:	4b10      	ldr	r3, [pc, #64]	@ (8000b8c <task10ms+0x48>)
 8000b4a:	781a      	ldrb	r2, [r3, #0]
 8000b4c:	4b10      	ldr	r3, [pc, #64]	@ (8000b90 <task10ms+0x4c>)
 8000b4e:	fba3 1302 	umull	r1, r3, r3, r2
 8000b52:	08d9      	lsrs	r1, r3, #3
 8000b54:	460b      	mov	r3, r1
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	440b      	add	r3, r1
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d10a      	bne.n	8000b7a <task10ms+0x36>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000b64:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b68:	480a      	ldr	r0, [pc, #40]	@ (8000b94 <task10ms+0x50>)
 8000b6a:	f002 f9b8 	bl	8002ede <HAL_GPIO_TogglePin>
		SSD1306_Fill(WHITE);
 8000b6e:	2001      	movs	r0, #1
 8000b70:	f000 fc42 	bl	80013f8 <SSD1306_Fill>
		ticker=0;
 8000b74:	4b05      	ldr	r3, [pc, #20]	@ (8000b8c <task10ms+0x48>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	701a      	strb	r2, [r3, #0]
	}
	ticker++;
 8000b7a:	4b04      	ldr	r3, [pc, #16]	@ (8000b8c <task10ms+0x48>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4b02      	ldr	r3, [pc, #8]	@ (8000b8c <task10ms+0x48>)
 8000b84:	701a      	strb	r2, [r3, #0]
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200003a6 	.word	0x200003a6
 8000b90:	cccccccd 	.word	0xcccccccd
 8000b94:	40020800 	.word	0x40020800

08000b98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b9c:	f000 ff1c 	bl	80019d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ba0:	f000 f856 	bl	8000c50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba4:	f000 fa0a 	bl	8000fbc <MX_GPIO_Init>
  MX_DMA_Init();
 8000ba8:	f000 f9e0 	bl	8000f6c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000bac:	f009 fb0e 	bl	800a1cc <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8000bb0:	f000 f936 	bl	8000e20 <MX_TIM3_Init>
  MX_TIM11_Init();
 8000bb4:	f000 f9b6 	bl	8000f24 <MX_TIM11_Init>
  MX_ADC1_Init();
 8000bb8:	f000 f8b2 	bl	8000d20 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000bbc:	f000 f902 	bl	8000dc4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000bc0:	481a      	ldr	r0, [pc, #104]	@ (8000c2c <main+0x94>)
 8000bc2:	f005 f863 	bl	8005c8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8000bc6:	481a      	ldr	r0, [pc, #104]	@ (8000c30 <main+0x98>)
 8000bc8:	f005 f860 	bl	8005c8c <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000bcc:	2104      	movs	r1, #4
 8000bce:	4817      	ldr	r0, [pc, #92]	@ (8000c2c <main+0x94>)
 8000bd0:	f005 f918 	bl	8005e04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4815      	ldr	r0, [pc, #84]	@ (8000c2c <main+0x94>)
 8000bd8:	f005 f914 	bl	8005e04 <HAL_TIM_PWM_Start>

  Display_Set_I2C_Master_Transmit(&I2C_DMA_Transmit, &I2C_1_Abstract_Master_Transmit_Blocking);
 8000bdc:	4915      	ldr	r1, [pc, #84]	@ (8000c34 <main+0x9c>)
 8000bde:	4816      	ldr	r0, [pc, #88]	@ (8000c38 <main+0xa0>)
 8000be0:	f000 fc3e 	bl	8001460 <Display_Set_I2C_Master_Transmit>

  SSD1306_Init();
 8000be4:	f000 fafc 	bl	80011e0 <SSD1306_Init>

  CDC_AttachRxData(&UP_datafromUSB);
 8000be8:	4814      	ldr	r0, [pc, #80]	@ (8000c3c <main+0xa4>)
 8000bea:	f009 fc43 	bl	800a474 <CDC_AttachRxData>
  myFlags.allFlags=0;
 8000bee:	4b14      	ldr	r3, [pc, #80]	@ (8000c40 <main+0xa8>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]
  UP_initprotocol(&datosComSerie,(uint8_t)RINGBUFFER);
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4813      	ldr	r0, [pc, #76]	@ (8000c44 <main+0xac>)
 8000bf8:	f7ff fcd8 	bl	80005ac <UP_initprotocol>
  en_InitENG(&motorL, (uint16_t)htim3.Instance->ARR);
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <main+0x94>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	4619      	mov	r1, r3
 8000c06:	4810      	ldr	r0, [pc, #64]	@ (8000c48 <main+0xb0>)
 8000c08:	f7ff ff3e 	bl	8000a88 <en_InitENG>
  en_InitENG(&motorR, (uint16_t)htim3.Instance->ARR);
 8000c0c:	4b07      	ldr	r3, [pc, #28]	@ (8000c2c <main+0x94>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	4619      	mov	r1, r3
 8000c16:	480d      	ldr	r0, [pc, #52]	@ (8000c4c <main+0xb4>)
 8000c18:	f7ff ff36 	bl	8000a88 <en_InitENG>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	UP_comunicationsTask(&datosComSerie);
 8000c1c:	4809      	ldr	r0, [pc, #36]	@ (8000c44 <main+0xac>)
 8000c1e:	f000 fa59 	bl	80010d4 <UP_comunicationsTask>
	SSD1306_UpdateScreen();
 8000c22:	f000 fb8d 	bl	8001340 <SSD1306_UpdateScreen>
	UP_comunicationsTask(&datosComSerie);
 8000c26:	bf00      	nop
 8000c28:	e7f8      	b.n	8000c1c <main+0x84>
 8000c2a:	bf00      	nop
 8000c2c:	200002e0 	.word	0x200002e0
 8000c30:	20000328 	.word	0x20000328
 8000c34:	080011a1 	.word	0x080011a1
 8000c38:	08001169 	.word	0x08001169
 8000c3c:	08000a2d 	.word	0x08000a2d
 8000c40:	20000394 	.word	0x20000394
 8000c44:	20000370 	.word	0x20000370
 8000c48:	20000398 	.word	0x20000398
 8000c4c:	200003a0 	.word	0x200003a0

08000c50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b094      	sub	sp, #80	@ 0x50
 8000c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c56:	f107 0320 	add.w	r3, r7, #32
 8000c5a:	2230      	movs	r2, #48	@ 0x30
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f00a f90a 	bl	800ae78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c74:	2300      	movs	r3, #0
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	4b27      	ldr	r3, [pc, #156]	@ (8000d18 <SystemClock_Config+0xc8>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7c:	4a26      	ldr	r2, [pc, #152]	@ (8000d18 <SystemClock_Config+0xc8>)
 8000c7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c84:	4b24      	ldr	r3, [pc, #144]	@ (8000d18 <SystemClock_Config+0xc8>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c90:	2300      	movs	r3, #0
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	4b21      	ldr	r3, [pc, #132]	@ (8000d1c <SystemClock_Config+0xcc>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a20      	ldr	r2, [pc, #128]	@ (8000d1c <SystemClock_Config+0xcc>)
 8000c9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c9e:	6013      	str	r3, [r2, #0]
 8000ca0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d1c <SystemClock_Config+0xcc>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cac:	2301      	movs	r3, #1
 8000cae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cb0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000cc0:	2319      	movs	r3, #25
 8000cc2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000cc4:	23c0      	movs	r3, #192	@ 0xc0
 8000cc6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ccc:	2304      	movs	r3, #4
 8000cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd0:	f107 0320 	add.w	r3, r7, #32
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f004 fb45 	bl	8005364 <HAL_RCC_OscConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ce0:	f000 fa78 	bl	80011d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cf0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cf4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000cfa:	f107 030c 	add.w	r3, r7, #12
 8000cfe:	2103      	movs	r1, #3
 8000d00:	4618      	mov	r0, r3
 8000d02:	f004 fda7 	bl	8005854 <HAL_RCC_ClockConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d0c:	f000 fa62 	bl	80011d4 <Error_Handler>
  }
}
 8000d10:	bf00      	nop
 8000d12:	3750      	adds	r7, #80	@ 0x50
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40007000 	.word	0x40007000

08000d20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d26:	463b      	mov	r3, r7
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d32:	4b21      	ldr	r3, [pc, #132]	@ (8000db8 <MX_ADC1_Init+0x98>)
 8000d34:	4a21      	ldr	r2, [pc, #132]	@ (8000dbc <MX_ADC1_Init+0x9c>)
 8000d36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d38:	4b1f      	ldr	r3, [pc, #124]	@ (8000db8 <MX_ADC1_Init+0x98>)
 8000d3a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d3e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d40:	4b1d      	ldr	r3, [pc, #116]	@ (8000db8 <MX_ADC1_Init+0x98>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d46:	4b1c      	ldr	r3, [pc, #112]	@ (8000db8 <MX_ADC1_Init+0x98>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000db8 <MX_ADC1_Init+0x98>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d52:	4b19      	ldr	r3, [pc, #100]	@ (8000db8 <MX_ADC1_Init+0x98>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d5a:	4b17      	ldr	r3, [pc, #92]	@ (8000db8 <MX_ADC1_Init+0x98>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d60:	4b15      	ldr	r3, [pc, #84]	@ (8000db8 <MX_ADC1_Init+0x98>)
 8000d62:	4a17      	ldr	r2, [pc, #92]	@ (8000dc0 <MX_ADC1_Init+0xa0>)
 8000d64:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d66:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <MX_ADC1_Init+0x98>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d6c:	4b12      	ldr	r3, [pc, #72]	@ (8000db8 <MX_ADC1_Init+0x98>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d72:	4b11      	ldr	r3, [pc, #68]	@ (8000db8 <MX_ADC1_Init+0x98>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000db8 <MX_ADC1_Init+0x98>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d80:	480d      	ldr	r0, [pc, #52]	@ (8000db8 <MX_ADC1_Init+0x98>)
 8000d82:	f000 febf 	bl	8001b04 <HAL_ADC_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d8c:	f000 fa22 	bl	80011d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d90:	2301      	movs	r3, #1
 8000d92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d94:	2301      	movs	r3, #1
 8000d96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d9c:	463b      	mov	r3, r7
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4805      	ldr	r0, [pc, #20]	@ (8000db8 <MX_ADC1_Init+0x98>)
 8000da2:	f001 f817 	bl	8001dd4 <HAL_ADC_ConfigChannel>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000dac:	f000 fa12 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000db0:	bf00      	nop
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000184 	.word	0x20000184
 8000dbc:	40012000 	.word	0x40012000
 8000dc0:	0f000001 	.word	0x0f000001

08000dc4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dc8:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <MX_I2C1_Init+0x50>)
 8000dca:	4a13      	ldr	r2, [pc, #76]	@ (8000e18 <MX_I2C1_Init+0x54>)
 8000dcc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000dce:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <MX_I2C1_Init+0x50>)
 8000dd0:	4a12      	ldr	r2, [pc, #72]	@ (8000e1c <MX_I2C1_Init+0x58>)
 8000dd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <MX_I2C1_Init+0x50>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dda:	4b0e      	ldr	r3, [pc, #56]	@ (8000e14 <MX_I2C1_Init+0x50>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000de0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <MX_I2C1_Init+0x50>)
 8000de2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000de6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000de8:	4b0a      	ldr	r3, [pc, #40]	@ (8000e14 <MX_I2C1_Init+0x50>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dee:	4b09      	ldr	r3, [pc, #36]	@ (8000e14 <MX_I2C1_Init+0x50>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000df4:	4b07      	ldr	r3, [pc, #28]	@ (8000e14 <MX_I2C1_Init+0x50>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dfa:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <MX_I2C1_Init+0x50>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e00:	4804      	ldr	r0, [pc, #16]	@ (8000e14 <MX_I2C1_Init+0x50>)
 8000e02:	f002 f887 	bl	8002f14 <HAL_I2C_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e0c:	f000 f9e2 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200001cc 	.word	0x200001cc
 8000e18:	40005400 	.word	0x40005400
 8000e1c:	00061a80 	.word	0x00061a80

08000e20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08e      	sub	sp, #56	@ 0x38
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e34:	f107 0320 	add.w	r3, r7, #32
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
 8000e4c:	615a      	str	r2, [r3, #20]
 8000e4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e50:	4b32      	ldr	r3, [pc, #200]	@ (8000f1c <MX_TIM3_Init+0xfc>)
 8000e52:	4a33      	ldr	r2, [pc, #204]	@ (8000f20 <MX_TIM3_Init+0x100>)
 8000e54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8000e56:	4b31      	ldr	r3, [pc, #196]	@ (8000f1c <MX_TIM3_Init+0xfc>)
 8000e58:	220f      	movs	r2, #15
 8000e5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5c:	4b2f      	ldr	r3, [pc, #188]	@ (8000f1c <MX_TIM3_Init+0xfc>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8000e62:	4b2e      	ldr	r3, [pc, #184]	@ (8000f1c <MX_TIM3_Init+0xfc>)
 8000e64:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000e68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e6a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f1c <MX_TIM3_Init+0xfc>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e70:	4b2a      	ldr	r3, [pc, #168]	@ (8000f1c <MX_TIM3_Init+0xfc>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e76:	4829      	ldr	r0, [pc, #164]	@ (8000f1c <MX_TIM3_Init+0xfc>)
 8000e78:	f004 feb8 	bl	8005bec <HAL_TIM_Base_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000e82:	f000 f9a7 	bl	80011d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e90:	4619      	mov	r1, r3
 8000e92:	4822      	ldr	r0, [pc, #136]	@ (8000f1c <MX_TIM3_Init+0xfc>)
 8000e94:	f005 fa18 	bl	80062c8 <HAL_TIM_ConfigClockSource>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000e9e:	f000 f999 	bl	80011d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ea2:	481e      	ldr	r0, [pc, #120]	@ (8000f1c <MX_TIM3_Init+0xfc>)
 8000ea4:	f004 ff54 	bl	8005d50 <HAL_TIM_PWM_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000eae:	f000 f991 	bl	80011d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000eba:	f107 0320 	add.w	r3, r7, #32
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4816      	ldr	r0, [pc, #88]	@ (8000f1c <MX_TIM3_Init+0xfc>)
 8000ec2:	f005 fdc3 	bl	8006a4c <HAL_TIMEx_MasterConfigSynchronization>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000ecc:	f000 f982 	bl	80011d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ed0:	2360      	movs	r3, #96	@ 0x60
 8000ed2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	480d      	ldr	r0, [pc, #52]	@ (8000f1c <MX_TIM3_Init+0xfc>)
 8000ee8:	f005 f92c 	bl	8006144 <HAL_TIM_PWM_ConfigChannel>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000ef2:	f000 f96f 	bl	80011d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	2204      	movs	r2, #4
 8000efa:	4619      	mov	r1, r3
 8000efc:	4807      	ldr	r0, [pc, #28]	@ (8000f1c <MX_TIM3_Init+0xfc>)
 8000efe:	f005 f921 	bl	8006144 <HAL_TIM_PWM_ConfigChannel>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000f08:	f000 f964 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f0c:	4803      	ldr	r0, [pc, #12]	@ (8000f1c <MX_TIM3_Init+0xfc>)
 8000f0e:	f000 fc4b 	bl	80017a8 <HAL_TIM_MspPostInit>

}
 8000f12:	bf00      	nop
 8000f14:	3738      	adds	r7, #56	@ 0x38
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200002e0 	.word	0x200002e0
 8000f20:	40000400 	.word	0x40000400

08000f24 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000f28:	4b0e      	ldr	r3, [pc, #56]	@ (8000f64 <MX_TIM11_Init+0x40>)
 8000f2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000f68 <MX_TIM11_Init+0x44>)
 8000f2c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 95;
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f64 <MX_TIM11_Init+0x40>)
 8000f30:	225f      	movs	r2, #95	@ 0x5f
 8000f32:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f34:	4b0b      	ldr	r3, [pc, #44]	@ (8000f64 <MX_TIM11_Init+0x40>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 9999;
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f64 <MX_TIM11_Init+0x40>)
 8000f3c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000f40:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f42:	4b08      	ldr	r3, [pc, #32]	@ (8000f64 <MX_TIM11_Init+0x40>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f48:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <MX_TIM11_Init+0x40>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000f4e:	4805      	ldr	r0, [pc, #20]	@ (8000f64 <MX_TIM11_Init+0x40>)
 8000f50:	f004 fe4c 	bl	8005bec <HAL_TIM_Base_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000f5a:	f000 f93b 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000328 	.word	0x20000328
 8000f68:	40014800 	.word	0x40014800

08000f6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	4b10      	ldr	r3, [pc, #64]	@ (8000fb8 <MX_DMA_Init+0x4c>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000fb8 <MX_DMA_Init+0x4c>)
 8000f7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f82:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb8 <MX_DMA_Init+0x4c>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2100      	movs	r1, #0
 8000f92:	200b      	movs	r0, #11
 8000f94:	f001 fa31 	bl	80023fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f98:	200b      	movs	r0, #11
 8000f9a:	f001 fa4a 	bl	8002432 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	200c      	movs	r0, #12
 8000fa4:	f001 fa29 	bl	80023fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000fa8:	200c      	movs	r0, #12
 8000faa:	f001 fa42 	bl	8002432 <HAL_NVIC_EnableIRQ>

}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800

08000fbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	@ 0x28
 8000fc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
 8000fd0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	4b3b      	ldr	r3, [pc, #236]	@ (80010c4 <MX_GPIO_Init+0x108>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	4a3a      	ldr	r2, [pc, #232]	@ (80010c4 <MX_GPIO_Init+0x108>)
 8000fdc:	f043 0304 	orr.w	r3, r3, #4
 8000fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe2:	4b38      	ldr	r3, [pc, #224]	@ (80010c4 <MX_GPIO_Init+0x108>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	f003 0304 	and.w	r3, r3, #4
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b34      	ldr	r3, [pc, #208]	@ (80010c4 <MX_GPIO_Init+0x108>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	4a33      	ldr	r2, [pc, #204]	@ (80010c4 <MX_GPIO_Init+0x108>)
 8000ff8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffe:	4b31      	ldr	r3, [pc, #196]	@ (80010c4 <MX_GPIO_Init+0x108>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	4b2d      	ldr	r3, [pc, #180]	@ (80010c4 <MX_GPIO_Init+0x108>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	4a2c      	ldr	r2, [pc, #176]	@ (80010c4 <MX_GPIO_Init+0x108>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6313      	str	r3, [r2, #48]	@ 0x30
 800101a:	4b2a      	ldr	r3, [pc, #168]	@ (80010c4 <MX_GPIO_Init+0x108>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	4b26      	ldr	r3, [pc, #152]	@ (80010c4 <MX_GPIO_Init+0x108>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4a25      	ldr	r2, [pc, #148]	@ (80010c4 <MX_GPIO_Init+0x108>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4b23      	ldr	r3, [pc, #140]	@ (80010c4 <MX_GPIO_Init+0x108>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001048:	481f      	ldr	r0, [pc, #124]	@ (80010c8 <MX_GPIO_Init+0x10c>)
 800104a:	f001 ff2f 	bl	8002eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Out2_2_Pin|Out2_1_Pin|Out1_2_Pin, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	f44f 4106 	mov.w	r1, #34304	@ 0x8600
 8001054:	481d      	ldr	r0, [pc, #116]	@ (80010cc <MX_GPIO_Init+0x110>)
 8001056:	f001 ff29 	bl	8002eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Out1_1_GPIO_Port, Out1_1_Pin, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	2108      	movs	r1, #8
 800105e:	481c      	ldr	r0, [pc, #112]	@ (80010d0 <MX_GPIO_Init+0x114>)
 8001060:	f001 ff24 	bl	8002eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001064:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001068:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106a:	2301      	movs	r3, #1
 800106c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4619      	mov	r1, r3
 800107c:	4812      	ldr	r0, [pc, #72]	@ (80010c8 <MX_GPIO_Init+0x10c>)
 800107e:	f001 fd91 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Out2_2_Pin Out2_1_Pin Out1_2_Pin */
  GPIO_InitStruct.Pin = Out2_2_Pin|Out2_1_Pin|Out1_2_Pin;
 8001082:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 8001086:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001088:	2301      	movs	r3, #1
 800108a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2300      	movs	r3, #0
 8001092:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	4619      	mov	r1, r3
 800109a:	480c      	ldr	r0, [pc, #48]	@ (80010cc <MX_GPIO_Init+0x110>)
 800109c:	f001 fd82 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Out1_1_Pin */
  GPIO_InitStruct.Pin = Out1_1_Pin;
 80010a0:	2308      	movs	r3, #8
 80010a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Out1_1_GPIO_Port, &GPIO_InitStruct);
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	4619      	mov	r1, r3
 80010b6:	4806      	ldr	r0, [pc, #24]	@ (80010d0 <MX_GPIO_Init+0x114>)
 80010b8:	f001 fd74 	bl	8002ba4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80010bc:	bf00      	nop
 80010be:	3728      	adds	r7, #40	@ 0x28
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40020800 	.word	0x40020800
 80010cc:	40020000 	.word	0x40020000
 80010d0:	40020400 	.word	0x40020400

080010d4 <UP_comunicationsTask>:

/* USER CODE BEGIN 4 */
void UP_comunicationsTask(_sDato *datosCom){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

	if(datosCom->indexReadRx!=datosCom->indexWriteRx ){
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	791a      	ldrb	r2, [r3, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	78db      	ldrb	r3, [r3, #3]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d007      	beq.n	80010fa <UP_comunicationsTask+0x26>
		UP_decodeHeader(datosCom);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff fb30 	bl	8000750 <UP_decodeHeader>
		datosCom->indexReadRx=datosCom->indexWriteRx;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	78db      	ldrb	r3, [r3, #3]
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	711a      	strb	r2, [r3, #4]
	}

	if(datosCom->indexReadTx!=datosCom->indexWriteTx ){
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	799a      	ldrb	r2, [r3, #6]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	795b      	ldrb	r3, [r3, #5]
 8001102:	429a      	cmp	r2, r3
 8001104:	d02b      	beq.n	800115e <UP_comunicationsTask+0x8a>

		if(datosCom->indexWriteTx > datosCom->indexReadTx){
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	795a      	ldrb	r2, [r3, #5]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	799b      	ldrb	r3, [r3, #6]
 800110e:	429a      	cmp	r2, r3
 8001110:	d908      	bls.n	8001124 <UP_comunicationsTask+0x50>
				datosCom->bytesTosend = datosCom->indexWriteTx - datosCom->indexReadTx;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	795a      	ldrb	r2, [r3, #5]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	799b      	ldrb	r3, [r3, #6]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	b2da      	uxtb	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	741a      	strb	r2, [r3, #16]
 8001122:	e006      	b.n	8001132 <UP_comunicationsTask+0x5e>
		    }else{
		    	datosCom->bytesTosend =  sizeof(datosCom->bufferRx) - datosCom->indexReadTx;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	799b      	ldrb	r3, [r3, #6]
 8001128:	f1c3 0304 	rsb	r3, r3, #4
 800112c:	b2da      	uxtb	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	741a      	strb	r2, [r3, #16]
		    }
		    if(CDC_Transmit_FS(&datosCom->bufferTx[datosCom->indexReadTx], datosCom->bytesTosend) == USBD_OK){
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	7992      	ldrb	r2, [r2, #6]
 800113a:	441a      	add	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	7c1b      	ldrb	r3, [r3, #16]
 8001140:	4619      	mov	r1, r3
 8001142:	4610      	mov	r0, r2
 8001144:	f009 f95e 	bl	800a404 <CDC_Transmit_FS>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d107      	bne.n	800115e <UP_comunicationsTask+0x8a>
		    	datosCom->indexReadTx += datosCom->bytesTosend;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	799a      	ldrb	r2, [r3, #6]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	7c1b      	ldrb	r3, [r3, #16]
 8001156:	4413      	add	r3, r2
 8001158:	b2da      	uxtb	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	719a      	strb	r2, [r3, #6]
		    }
	}
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <I2C_DMA_Transmit>:

uint8_t I2C_DMA_Transmit(uint16_t Dev_Address,uint16_t reg,uint8_t *p_Data, uint16_t _Size){
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af02      	add	r7, sp, #8
 800116e:	60ba      	str	r2, [r7, #8]
 8001170:	461a      	mov	r2, r3
 8001172:	4603      	mov	r3, r0
 8001174:	81fb      	strh	r3, [r7, #14]
 8001176:	460b      	mov	r3, r1
 8001178:	81bb      	strh	r3, [r7, #12]
 800117a:	4613      	mov	r3, r2
 800117c:	80fb      	strh	r3, [r7, #6]

//	if(HAL_I2C_Master_Transmit_DMA(&hi2c1, Dev_Address, p_Data, _Size)==HAL_OK)
//		return 1;
//	HAL_I2C_Master_Transmit_DMA(&hi2c1, Dev_Address, p_Data, _Size);
	HAL_I2C_Mem_Write_DMA(&hi2c1, Dev_Address, reg, 1, p_Data, _Size);
 800117e:	89ba      	ldrh	r2, [r7, #12]
 8001180:	89f9      	ldrh	r1, [r7, #14]
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2301      	movs	r3, #1
 800118c:	4803      	ldr	r0, [pc, #12]	@ (800119c <I2C_DMA_Transmit+0x34>)
 800118e:	f002 f903 	bl	8003398 <HAL_I2C_Mem_Write_DMA>
//		return 1;

//	 if(HAL_I2C_Master_Transmit_DMA(&hi2c1, Dev_Address, p_Data, _Size)==HAL_OK){
//		 return 1;
//	 }
	 return 1;
 8001192:	2301      	movs	r3, #1
//		return 1;
//	HAL_I2C_Mem_Write(&hi2c1, Dev_Address, 0x40, 1, p_Data, _Size, 10);
}
 8001194:	4618      	mov	r0, r3
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200001cc 	.word	0x200001cc

080011a0 <I2C_1_Abstract_Master_Transmit_Blocking>:

uint8_t I2C_1_Abstract_Master_Transmit_Blocking(uint16_t Dev_Address, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af02      	add	r7, sp, #8
 80011a6:	60b9      	str	r1, [r7, #8]
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	4603      	mov	r3, r0
 80011ac:	81fb      	strh	r3, [r7, #14]
 80011ae:	4613      	mov	r3, r2
 80011b0:	81bb      	strh	r3, [r7, #12]
	return (uint8_t)HAL_I2C_Master_Transmit(&hi2c1, Dev_Address, p_Data, _Size, _Timeout);
 80011b2:	89ba      	ldrh	r2, [r7, #12]
 80011b4:	89f9      	ldrh	r1, [r7, #14]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	4613      	mov	r3, r2
 80011bc:	68ba      	ldr	r2, [r7, #8]
 80011be:	4804      	ldr	r0, [pc, #16]	@ (80011d0 <I2C_1_Abstract_Master_Transmit_Blocking+0x30>)
 80011c0:	f001 ffec 	bl	800319c <HAL_I2C_Master_Transmit>
 80011c4:	4603      	mov	r3, r0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200001cc 	.word	0x200001cc

080011d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d8:	b672      	cpsid	i
}
 80011da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <Error_Handler+0x8>

080011e0 <SSD1306_Init>:
        }
    }
}

void SSD1306_Init()
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0

	SSD1306_WRITECOMMAND(0xAE);
 80011e4:	22ae      	movs	r2, #174	@ 0xae
 80011e6:	2100      	movs	r1, #0
 80011e8:	2078      	movs	r0, #120	@ 0x78
 80011ea:	f000 f91d 	bl	8001428 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 80011ee:	2220      	movs	r2, #32
 80011f0:	2100      	movs	r1, #0
 80011f2:	2078      	movs	r0, #120	@ 0x78
 80011f4:	f000 f918 	bl	8001428 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 80011f8:	2210      	movs	r2, #16
 80011fa:	2100      	movs	r1, #0
 80011fc:	2078      	movs	r0, #120	@ 0x78
 80011fe:	f000 f913 	bl	8001428 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0);
 8001202:	22b0      	movs	r2, #176	@ 0xb0
 8001204:	2100      	movs	r1, #0
 8001206:	2078      	movs	r0, #120	@ 0x78
 8001208:	f000 f90e 	bl	8001428 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8);
 800120c:	22c8      	movs	r2, #200	@ 0xc8
 800120e:	2100      	movs	r1, #0
 8001210:	2078      	movs	r0, #120	@ 0x78
 8001212:	f000 f909 	bl	8001428 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	2078      	movs	r0, #120	@ 0x78
 800121c:	f000 f904 	bl	8001428 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 8001220:	2210      	movs	r2, #16
 8001222:	2100      	movs	r1, #0
 8001224:	2078      	movs	r0, #120	@ 0x78
 8001226:	f000 f8ff 	bl	8001428 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40);
 800122a:	2240      	movs	r2, #64	@ 0x40
 800122c:	2100      	movs	r1, #0
 800122e:	2078      	movs	r0, #120	@ 0x78
 8001230:	f000 f8fa 	bl	8001428 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81);
 8001234:	2281      	movs	r2, #129	@ 0x81
 8001236:	2100      	movs	r1, #0
 8001238:	2078      	movs	r0, #120	@ 0x78
 800123a:	f000 f8f5 	bl	8001428 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800123e:	22ff      	movs	r2, #255	@ 0xff
 8001240:	2100      	movs	r1, #0
 8001242:	2078      	movs	r0, #120	@ 0x78
 8001244:	f000 f8f0 	bl	8001428 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1);
 8001248:	22a1      	movs	r2, #161	@ 0xa1
 800124a:	2100      	movs	r1, #0
 800124c:	2078      	movs	r0, #120	@ 0x78
 800124e:	f000 f8eb 	bl	8001428 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6);
 8001252:	22a6      	movs	r2, #166	@ 0xa6
 8001254:	2100      	movs	r1, #0
 8001256:	2078      	movs	r0, #120	@ 0x78
 8001258:	f000 f8e6 	bl	8001428 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8);
 800125c:	22a8      	movs	r2, #168	@ 0xa8
 800125e:	2100      	movs	r1, #0
 8001260:	2078      	movs	r0, #120	@ 0x78
 8001262:	f000 f8e1 	bl	8001428 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F);
 8001266:	223f      	movs	r2, #63	@ 0x3f
 8001268:	2100      	movs	r1, #0
 800126a:	2078      	movs	r0, #120	@ 0x78
 800126c:	f000 f8dc 	bl	8001428 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4);
 8001270:	22a4      	movs	r2, #164	@ 0xa4
 8001272:	2100      	movs	r1, #0
 8001274:	2078      	movs	r0, #120	@ 0x78
 8001276:	f000 f8d7 	bl	8001428 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3);
 800127a:	22d3      	movs	r2, #211	@ 0xd3
 800127c:	2100      	movs	r1, #0
 800127e:	2078      	movs	r0, #120	@ 0x78
 8001280:	f000 f8d2 	bl	8001428 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 8001284:	2200      	movs	r2, #0
 8001286:	2100      	movs	r1, #0
 8001288:	2078      	movs	r0, #120	@ 0x78
 800128a:	f000 f8cd 	bl	8001428 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5);
 800128e:	22d5      	movs	r2, #213	@ 0xd5
 8001290:	2100      	movs	r1, #0
 8001292:	2078      	movs	r0, #120	@ 0x78
 8001294:	f000 f8c8 	bl	8001428 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0);
 8001298:	22f0      	movs	r2, #240	@ 0xf0
 800129a:	2100      	movs	r1, #0
 800129c:	2078      	movs	r0, #120	@ 0x78
 800129e:	f000 f8c3 	bl	8001428 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9);
 80012a2:	22d9      	movs	r2, #217	@ 0xd9
 80012a4:	2100      	movs	r1, #0
 80012a6:	2078      	movs	r0, #120	@ 0x78
 80012a8:	f000 f8be 	bl	8001428 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22);
 80012ac:	2222      	movs	r2, #34	@ 0x22
 80012ae:	2100      	movs	r1, #0
 80012b0:	2078      	movs	r0, #120	@ 0x78
 80012b2:	f000 f8b9 	bl	8001428 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA);
 80012b6:	22da      	movs	r2, #218	@ 0xda
 80012b8:	2100      	movs	r1, #0
 80012ba:	2078      	movs	r0, #120	@ 0x78
 80012bc:	f000 f8b4 	bl	8001428 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80012c0:	2212      	movs	r2, #18
 80012c2:	2100      	movs	r1, #0
 80012c4:	2078      	movs	r0, #120	@ 0x78
 80012c6:	f000 f8af 	bl	8001428 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB);
 80012ca:	22db      	movs	r2, #219	@ 0xdb
 80012cc:	2100      	movs	r1, #0
 80012ce:	2078      	movs	r0, #120	@ 0x78
 80012d0:	f000 f8aa 	bl	8001428 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 80012d4:	2220      	movs	r2, #32
 80012d6:	2100      	movs	r1, #0
 80012d8:	2078      	movs	r0, #120	@ 0x78
 80012da:	f000 f8a5 	bl	8001428 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D);
 80012de:	228d      	movs	r2, #141	@ 0x8d
 80012e0:	2100      	movs	r1, #0
 80012e2:	2078      	movs	r0, #120	@ 0x78
 80012e4:	f000 f8a0 	bl	8001428 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14);
 80012e8:	2214      	movs	r2, #20
 80012ea:	2100      	movs	r1, #0
 80012ec:	2078      	movs	r0, #120	@ 0x78
 80012ee:	f000 f89b 	bl	8001428 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF);
 80012f2:	22af      	movs	r2, #175	@ 0xaf
 80012f4:	2100      	movs	r1, #0
 80012f6:	2078      	movs	r0, #120	@ 0x78
 80012f8:	f000 f896 	bl	8001428 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80012fc:	222e      	movs	r2, #46	@ 0x2e
 80012fe:	2100      	movs	r1, #0
 8001300:	2078      	movs	r0, #120	@ 0x78
 8001302:	f000 f891 	bl	8001428 <SSD1306_I2C_Write>

	SSD1306.CurrentX = 0;
 8001306:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <SSD1306_Init+0x158>)
 8001308:	2200      	movs	r2, #0
 800130a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800130c:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <SSD1306_Init+0x158>)
 800130e:	2200      	movs	r2, #0
 8001310:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8001312:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <SSD1306_Init+0x158>)
 8001314:	2201      	movs	r2, #1
 8001316:	715a      	strb	r2, [r3, #5]
	SSD1306.Page=0;
 8001318:	4b07      	ldr	r3, [pc, #28]	@ (8001338 <SSD1306_Init+0x158>)
 800131a:	2200      	movs	r2, #0
 800131c:	719a      	strb	r2, [r3, #6]
	SSD1306.DMA = CMD;
 800131e:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <SSD1306_Init+0x158>)
 8001320:	2200      	movs	r2, #0
 8001322:	71da      	strb	r2, [r3, #7]
	DMAREADY=1;
 8001324:	4b05      	ldr	r3, [pc, #20]	@ (800133c <SSD1306_Init+0x15c>)
 8001326:	2201      	movs	r2, #1
 8001328:	701a      	strb	r2, [r3, #0]
	SSD1306_Fill(WHITE);
 800132a:	2001      	movs	r0, #1
 800132c:	f000 f864 	bl	80013f8 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8001330:	f000 f806 	bl	8001340 <SSD1306_UpdateScreen>

}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	200007b0 	.word	0x200007b0
 800133c:	200007bc 	.word	0x200007bc

08001340 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void)
{
 8001340:	b598      	push	{r3, r4, r7, lr}
 8001342:	af00      	add	r7, sp, #0
//			SSD1306_WRITECOMMAND(0xB0 + m);
//			SSD1306_WRITECOMMAND(0x00);
//			SSD1306_WRITECOMMAND(0x10);
//			SSD1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
//		}
	if(DMAREADY==1){
 8001344:	4b27      	ldr	r3, [pc, #156]	@ (80013e4 <SSD1306_UpdateScreen+0xa4>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d148      	bne.n	80013de <SSD1306_UpdateScreen+0x9e>
		switch(SSD1306.DMA){
 800134c:	4b26      	ldr	r3, [pc, #152]	@ (80013e8 <SSD1306_UpdateScreen+0xa8>)
 800134e:	79db      	ldrb	r3, [r3, #7]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d019      	beq.n	8001388 <SSD1306_UpdateScreen+0x48>
 8001354:	2b01      	cmp	r3, #1
 8001356:	d134      	bne.n	80013c2 <SSD1306_UpdateScreen+0x82>
			case Data:
				if(I2C_DMA_Master_Transmit(SSD1306_I2C_ADDR,0x40, &SSD1306_Buffer[0], sizeof(SSD1306_Buffer))==1){
 8001358:	4b24      	ldr	r3, [pc, #144]	@ (80013ec <SSD1306_UpdateScreen+0xac>)
 800135a:	681c      	ldr	r4, [r3, #0]
 800135c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001360:	4a23      	ldr	r2, [pc, #140]	@ (80013f0 <SSD1306_UpdateScreen+0xb0>)
 8001362:	2140      	movs	r1, #64	@ 0x40
 8001364:	2078      	movs	r0, #120	@ 0x78
 8001366:	47a0      	blx	r4
 8001368:	4603      	mov	r3, r0
 800136a:	2b01      	cmp	r3, #1
 800136c:	d12d      	bne.n	80013ca <SSD1306_UpdateScreen+0x8a>
					SSD1306.Page++;
 800136e:	4b1e      	ldr	r3, [pc, #120]	@ (80013e8 <SSD1306_UpdateScreen+0xa8>)
 8001370:	799b      	ldrb	r3, [r3, #6]
 8001372:	3301      	adds	r3, #1
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4b1c      	ldr	r3, [pc, #112]	@ (80013e8 <SSD1306_UpdateScreen+0xa8>)
 8001378:	719a      	strb	r2, [r3, #6]
					SSD1306.DMA=CMD;
 800137a:	4b1b      	ldr	r3, [pc, #108]	@ (80013e8 <SSD1306_UpdateScreen+0xa8>)
 800137c:	2200      	movs	r2, #0
 800137e:	71da      	strb	r2, [r3, #7]
					DMAREADY=0;
 8001380:	4b18      	ldr	r3, [pc, #96]	@ (80013e4 <SSD1306_UpdateScreen+0xa4>)
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001386:	e020      	b.n	80013ca <SSD1306_UpdateScreen+0x8a>
			case CMD:
	//			SSD1306_WRITECOMMAND(0xB0 + SSD1306.Page);
	//			SSD1306_WRITECOMMAND(0x00);
	//			SSD1306_WRITECOMMAND(0x10);

				SSD1306.Commands[0]=0xB0 + SSD1306.Page;
 8001388:	4b17      	ldr	r3, [pc, #92]	@ (80013e8 <SSD1306_UpdateScreen+0xa8>)
 800138a:	799b      	ldrb	r3, [r3, #6]
 800138c:	3b50      	subs	r3, #80	@ 0x50
 800138e:	b2da      	uxtb	r2, r3
 8001390:	4b15      	ldr	r3, [pc, #84]	@ (80013e8 <SSD1306_UpdateScreen+0xa8>)
 8001392:	721a      	strb	r2, [r3, #8]
				SSD1306.Commands[1]=0x00;
 8001394:	4b14      	ldr	r3, [pc, #80]	@ (80013e8 <SSD1306_UpdateScreen+0xa8>)
 8001396:	2200      	movs	r2, #0
 8001398:	725a      	strb	r2, [r3, #9]
				SSD1306.Commands[2]=0x10;
 800139a:	4b13      	ldr	r3, [pc, #76]	@ (80013e8 <SSD1306_UpdateScreen+0xa8>)
 800139c:	2210      	movs	r2, #16
 800139e:	729a      	strb	r2, [r3, #10]

				if(I2C_DMA_Master_Transmit(SSD1306_I2C_ADDR,0x00, &SSD1306.Commands[0],3)==1){
 80013a0:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <SSD1306_UpdateScreen+0xac>)
 80013a2:	681c      	ldr	r4, [r3, #0]
 80013a4:	2303      	movs	r3, #3
 80013a6:	4a13      	ldr	r2, [pc, #76]	@ (80013f4 <SSD1306_UpdateScreen+0xb4>)
 80013a8:	2100      	movs	r1, #0
 80013aa:	2078      	movs	r0, #120	@ 0x78
 80013ac:	47a0      	blx	r4
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d10c      	bne.n	80013ce <SSD1306_UpdateScreen+0x8e>
					SSD1306.DMA=Data;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	@ (80013e8 <SSD1306_UpdateScreen+0xa8>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	71da      	strb	r2, [r3, #7]
					DMAREADY=0;
 80013ba:	4b0a      	ldr	r3, [pc, #40]	@ (80013e4 <SSD1306_UpdateScreen+0xa4>)
 80013bc:	2200      	movs	r2, #0
 80013be:	701a      	strb	r2, [r3, #0]
				}
				break;
 80013c0:	e005      	b.n	80013ce <SSD1306_UpdateScreen+0x8e>

			default:
				SSD1306.Page=8;
 80013c2:	4b09      	ldr	r3, [pc, #36]	@ (80013e8 <SSD1306_UpdateScreen+0xa8>)
 80013c4:	2208      	movs	r2, #8
 80013c6:	719a      	strb	r2, [r3, #6]
				break;
 80013c8:	e002      	b.n	80013d0 <SSD1306_UpdateScreen+0x90>
				break;
 80013ca:	bf00      	nop
 80013cc:	e000      	b.n	80013d0 <SSD1306_UpdateScreen+0x90>
				break;
 80013ce:	bf00      	nop
			}
		if(SSD1306.Page>7){
 80013d0:	4b05      	ldr	r3, [pc, #20]	@ (80013e8 <SSD1306_UpdateScreen+0xa8>)
 80013d2:	799b      	ldrb	r3, [r3, #6]
 80013d4:	2b07      	cmp	r3, #7
 80013d6:	d902      	bls.n	80013de <SSD1306_UpdateScreen+0x9e>
			SSD1306.Page=0;
 80013d8:	4b03      	ldr	r3, [pc, #12]	@ (80013e8 <SSD1306_UpdateScreen+0xa8>)
 80013da:	2200      	movs	r2, #0
 80013dc:	719a      	strb	r2, [r3, #6]
		}
	}
}
 80013de:	bf00      	nop
 80013e0:	bd98      	pop	{r3, r4, r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200007bc 	.word	0x200007bc
 80013e8:	200007b0 	.word	0x200007b0
 80013ec:	200007a8 	.word	0x200007a8
 80013f0:	200003a8 	.word	0x200003a8
 80013f4:	200007b8 	.word	0x200007b8

080013f8 <SSD1306_Fill>:
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
	memset(SSD1306_Buffer, (color == BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <SSD1306_Fill+0x14>
 8001408:	2300      	movs	r3, #0
 800140a:	e000      	b.n	800140e <SSD1306_Fill+0x16>
 800140c:	23ff      	movs	r3, #255	@ 0xff
 800140e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001412:	4619      	mov	r1, r3
 8001414:	4803      	ldr	r0, [pc, #12]	@ (8001424 <SSD1306_Fill+0x2c>)
 8001416:	f009 fd2f 	bl	800ae78 <memset>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200003a8 	.word	0x200003a8

08001428 <SSD1306_I2C_Write>:
//uint8_t SSD1306_I2C_WriteMulti(uint8_t address, uint16_t reg, uint8_t* data, uint16_t count) {
//
//	return (uint8_t)I2C_DMA_Master_Transmit(address, reg, data, count);
//}

void SSD1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data){
 8001428:	b590      	push	{r4, r7, lr}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
 8001432:	460b      	mov	r3, r1
 8001434:	71bb      	strb	r3, [r7, #6]
 8001436:	4613      	mov	r3, r2
 8001438:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800143a:	79bb      	ldrb	r3, [r7, #6]
 800143c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800143e:	797b      	ldrb	r3, [r7, #5]
 8001440:	737b      	strb	r3, [r7, #13]
	I2C_Master_Transmit_Blocking(address, dt, 2, 10);
 8001442:	4b06      	ldr	r3, [pc, #24]	@ (800145c <SSD1306_I2C_Write+0x34>)
 8001444:	681c      	ldr	r4, [r3, #0]
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	b298      	uxth	r0, r3
 800144a:	f107 010c 	add.w	r1, r7, #12
 800144e:	230a      	movs	r3, #10
 8001450:	2202      	movs	r2, #2
 8001452:	47a0      	blx	r4
}
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	bd90      	pop	{r4, r7, pc}
 800145c:	200007ac 	.word	0x200007ac

08001460 <Display_Set_I2C_Master_Transmit>:

void Display_Set_I2C_Master_Transmit(uint8_t (*Master_Transmit)(uint16_t DevAddress,uint16_t reg, uint8_t *pData, uint16_t Size),uint8_t (*Master_Transmit_Blocking)(uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)){
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
	I2C_DMA_Master_Transmit = Master_Transmit;
 800146a:	4a06      	ldr	r2, [pc, #24]	@ (8001484 <Display_Set_I2C_Master_Transmit+0x24>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6013      	str	r3, [r2, #0]
	I2C_Master_Transmit_Blocking = Master_Transmit_Blocking;
 8001470:	4a05      	ldr	r2, [pc, #20]	@ (8001488 <Display_Set_I2C_Master_Transmit+0x28>)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	6013      	str	r3, [r2, #0]
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	200007a8 	.word	0x200007a8
 8001488:	200007ac 	.word	0x200007ac

0800148c <SSD1306_DMAREADY>:

void SSD1306_DMAREADY(){
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
	DMAREADY=1;
 8001490:	4b03      	ldr	r3, [pc, #12]	@ (80014a0 <SSD1306_DMAREADY+0x14>)
 8001492:	2201      	movs	r2, #1
 8001494:	701a      	strb	r2, [r3, #0]
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	200007bc 	.word	0x200007bc

080014a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	4b10      	ldr	r3, [pc, #64]	@ (80014f0 <HAL_MspInit+0x4c>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b2:	4a0f      	ldr	r2, [pc, #60]	@ (80014f0 <HAL_MspInit+0x4c>)
 80014b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ba:	4b0d      	ldr	r3, [pc, #52]	@ (80014f0 <HAL_MspInit+0x4c>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <HAL_MspInit+0x4c>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ce:	4a08      	ldr	r2, [pc, #32]	@ (80014f0 <HAL_MspInit+0x4c>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d6:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <HAL_MspInit+0x4c>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40023800 	.word	0x40023800

080014f4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	@ 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a28      	ldr	r2, [pc, #160]	@ (80015b4 <HAL_ADC_MspInit+0xc0>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d149      	bne.n	80015aa <HAL_ADC_MspInit+0xb6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	4b27      	ldr	r3, [pc, #156]	@ (80015b8 <HAL_ADC_MspInit+0xc4>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151e:	4a26      	ldr	r2, [pc, #152]	@ (80015b8 <HAL_ADC_MspInit+0xc4>)
 8001520:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001524:	6453      	str	r3, [r2, #68]	@ 0x44
 8001526:	4b24      	ldr	r3, [pc, #144]	@ (80015b8 <HAL_ADC_MspInit+0xc4>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	4b20      	ldr	r3, [pc, #128]	@ (80015b8 <HAL_ADC_MspInit+0xc4>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	4a1f      	ldr	r2, [pc, #124]	@ (80015b8 <HAL_ADC_MspInit+0xc4>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6313      	str	r3, [r2, #48]	@ 0x30
 8001542:	4b1d      	ldr	r3, [pc, #116]	@ (80015b8 <HAL_ADC_MspInit+0xc4>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	4b19      	ldr	r3, [pc, #100]	@ (80015b8 <HAL_ADC_MspInit+0xc4>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	4a18      	ldr	r2, [pc, #96]	@ (80015b8 <HAL_ADC_MspInit+0xc4>)
 8001558:	f043 0302 	orr.w	r3, r3, #2
 800155c:	6313      	str	r3, [r2, #48]	@ 0x30
 800155e:	4b16      	ldr	r3, [pc, #88]	@ (80015b8 <HAL_ADC_MspInit+0xc4>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800156a:	23fe      	movs	r3, #254	@ 0xfe
 800156c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800156e:	2303      	movs	r3, #3
 8001570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	4619      	mov	r1, r3
 800157c:	480f      	ldr	r0, [pc, #60]	@ (80015bc <HAL_ADC_MspInit+0xc8>)
 800157e:	f001 fb11 	bl	8002ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001582:	2301      	movs	r3, #1
 8001584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001586:	2303      	movs	r3, #3
 8001588:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4619      	mov	r1, r3
 8001594:	480a      	ldr	r0, [pc, #40]	@ (80015c0 <HAL_ADC_MspInit+0xcc>)
 8001596:	f001 fb05 	bl	8002ba4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	2100      	movs	r1, #0
 800159e:	2012      	movs	r0, #18
 80015a0:	f000 ff2b 	bl	80023fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80015a4:	2012      	movs	r0, #18
 80015a6:	f000 ff44 	bl	8002432 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80015aa:	bf00      	nop
 80015ac:	3728      	adds	r7, #40	@ 0x28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40012000 	.word	0x40012000
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020000 	.word	0x40020000
 80015c0:	40020400 	.word	0x40020400

080015c4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	@ 0x28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a47      	ldr	r2, [pc, #284]	@ (8001700 <HAL_I2C_MspInit+0x13c>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	f040 8087 	bne.w	80016f6 <HAL_I2C_MspInit+0x132>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e8:	2300      	movs	r3, #0
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	4b45      	ldr	r3, [pc, #276]	@ (8001704 <HAL_I2C_MspInit+0x140>)
 80015ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f0:	4a44      	ldr	r2, [pc, #272]	@ (8001704 <HAL_I2C_MspInit+0x140>)
 80015f2:	f043 0302 	orr.w	r3, r3, #2
 80015f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f8:	4b42      	ldr	r3, [pc, #264]	@ (8001704 <HAL_I2C_MspInit+0x140>)
 80015fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001604:	23c0      	movs	r3, #192	@ 0xc0
 8001606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001608:	2312      	movs	r3, #18
 800160a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001610:	2303      	movs	r3, #3
 8001612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001614:	2304      	movs	r3, #4
 8001616:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4619      	mov	r1, r3
 800161e:	483a      	ldr	r0, [pc, #232]	@ (8001708 <HAL_I2C_MspInit+0x144>)
 8001620:	f001 fac0 	bl	8002ba4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	4b36      	ldr	r3, [pc, #216]	@ (8001704 <HAL_I2C_MspInit+0x140>)
 800162a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162c:	4a35      	ldr	r2, [pc, #212]	@ (8001704 <HAL_I2C_MspInit+0x140>)
 800162e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001632:	6413      	str	r3, [r2, #64]	@ 0x40
 8001634:	4b33      	ldr	r3, [pc, #204]	@ (8001704 <HAL_I2C_MspInit+0x140>)
 8001636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001638:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8001640:	4b32      	ldr	r3, [pc, #200]	@ (800170c <HAL_I2C_MspInit+0x148>)
 8001642:	4a33      	ldr	r2, [pc, #204]	@ (8001710 <HAL_I2C_MspInit+0x14c>)
 8001644:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8001646:	4b31      	ldr	r3, [pc, #196]	@ (800170c <HAL_I2C_MspInit+0x148>)
 8001648:	2200      	movs	r2, #0
 800164a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800164c:	4b2f      	ldr	r3, [pc, #188]	@ (800170c <HAL_I2C_MspInit+0x148>)
 800164e:	2240      	movs	r2, #64	@ 0x40
 8001650:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001652:	4b2e      	ldr	r3, [pc, #184]	@ (800170c <HAL_I2C_MspInit+0x148>)
 8001654:	2200      	movs	r2, #0
 8001656:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001658:	4b2c      	ldr	r3, [pc, #176]	@ (800170c <HAL_I2C_MspInit+0x148>)
 800165a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800165e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001660:	4b2a      	ldr	r3, [pc, #168]	@ (800170c <HAL_I2C_MspInit+0x148>)
 8001662:	2200      	movs	r2, #0
 8001664:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001666:	4b29      	ldr	r3, [pc, #164]	@ (800170c <HAL_I2C_MspInit+0x148>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800166c:	4b27      	ldr	r3, [pc, #156]	@ (800170c <HAL_I2C_MspInit+0x148>)
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001672:	4b26      	ldr	r3, [pc, #152]	@ (800170c <HAL_I2C_MspInit+0x148>)
 8001674:	2200      	movs	r2, #0
 8001676:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001678:	4b24      	ldr	r3, [pc, #144]	@ (800170c <HAL_I2C_MspInit+0x148>)
 800167a:	2200      	movs	r2, #0
 800167c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800167e:	4823      	ldr	r0, [pc, #140]	@ (800170c <HAL_I2C_MspInit+0x148>)
 8001680:	f000 fef2 	bl	8002468 <HAL_DMA_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 800168a:	f7ff fda3 	bl	80011d4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a1e      	ldr	r2, [pc, #120]	@ (800170c <HAL_I2C_MspInit+0x148>)
 8001692:	635a      	str	r2, [r3, #52]	@ 0x34
 8001694:	4a1d      	ldr	r2, [pc, #116]	@ (800170c <HAL_I2C_MspInit+0x148>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800169a:	4b1e      	ldr	r3, [pc, #120]	@ (8001714 <HAL_I2C_MspInit+0x150>)
 800169c:	4a1e      	ldr	r2, [pc, #120]	@ (8001718 <HAL_I2C_MspInit+0x154>)
 800169e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80016a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001714 <HAL_I2C_MspInit+0x150>)
 80016a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016a6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001714 <HAL_I2C_MspInit+0x150>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ae:	4b19      	ldr	r3, [pc, #100]	@ (8001714 <HAL_I2C_MspInit+0x150>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016b4:	4b17      	ldr	r3, [pc, #92]	@ (8001714 <HAL_I2C_MspInit+0x150>)
 80016b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016ba:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016bc:	4b15      	ldr	r3, [pc, #84]	@ (8001714 <HAL_I2C_MspInit+0x150>)
 80016be:	2200      	movs	r2, #0
 80016c0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016c2:	4b14      	ldr	r3, [pc, #80]	@ (8001714 <HAL_I2C_MspInit+0x150>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80016c8:	4b12      	ldr	r3, [pc, #72]	@ (8001714 <HAL_I2C_MspInit+0x150>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016ce:	4b11      	ldr	r3, [pc, #68]	@ (8001714 <HAL_I2C_MspInit+0x150>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001714 <HAL_I2C_MspInit+0x150>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80016da:	480e      	ldr	r0, [pc, #56]	@ (8001714 <HAL_I2C_MspInit+0x150>)
 80016dc:	f000 fec4 	bl	8002468 <HAL_DMA_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 80016e6:	f7ff fd75 	bl	80011d4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a09      	ldr	r2, [pc, #36]	@ (8001714 <HAL_I2C_MspInit+0x150>)
 80016ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80016f0:	4a08      	ldr	r2, [pc, #32]	@ (8001714 <HAL_I2C_MspInit+0x150>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80016f6:	bf00      	nop
 80016f8:	3728      	adds	r7, #40	@ 0x28
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40005400 	.word	0x40005400
 8001704:	40023800 	.word	0x40023800
 8001708:	40020400 	.word	0x40020400
 800170c:	20000220 	.word	0x20000220
 8001710:	40026028 	.word	0x40026028
 8001714:	20000280 	.word	0x20000280
 8001718:	40026010 	.word	0x40026010

0800171c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a1c      	ldr	r2, [pc, #112]	@ (800179c <HAL_TIM_Base_MspInit+0x80>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d116      	bne.n	800175c <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	4b1b      	ldr	r3, [pc, #108]	@ (80017a0 <HAL_TIM_Base_MspInit+0x84>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001736:	4a1a      	ldr	r2, [pc, #104]	@ (80017a0 <HAL_TIM_Base_MspInit+0x84>)
 8001738:	f043 0302 	orr.w	r3, r3, #2
 800173c:	6413      	str	r3, [r2, #64]	@ 0x40
 800173e:	4b18      	ldr	r3, [pc, #96]	@ (80017a0 <HAL_TIM_Base_MspInit+0x84>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800174a:	2200      	movs	r2, #0
 800174c:	2100      	movs	r1, #0
 800174e:	201d      	movs	r0, #29
 8001750:	f000 fe53 	bl	80023fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001754:	201d      	movs	r0, #29
 8001756:	f000 fe6c 	bl	8002432 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM11_MspInit 1 */

    /* USER CODE END TIM11_MspInit 1 */
  }

}
 800175a:	e01a      	b.n	8001792 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a10      	ldr	r2, [pc, #64]	@ (80017a4 <HAL_TIM_Base_MspInit+0x88>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d115      	bne.n	8001792 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	4b0d      	ldr	r3, [pc, #52]	@ (80017a0 <HAL_TIM_Base_MspInit+0x84>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176e:	4a0c      	ldr	r2, [pc, #48]	@ (80017a0 <HAL_TIM_Base_MspInit+0x84>)
 8001770:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001774:	6453      	str	r3, [r2, #68]	@ 0x44
 8001776:	4b0a      	ldr	r3, [pc, #40]	@ (80017a0 <HAL_TIM_Base_MspInit+0x84>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	2100      	movs	r1, #0
 8001786:	201a      	movs	r0, #26
 8001788:	f000 fe37 	bl	80023fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800178c:	201a      	movs	r0, #26
 800178e:	f000 fe50 	bl	8002432 <HAL_NVIC_EnableIRQ>
}
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40000400 	.word	0x40000400
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40014800 	.word	0x40014800

080017a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a12      	ldr	r2, [pc, #72]	@ (8001810 <HAL_TIM_MspPostInit+0x68>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d11d      	bne.n	8001806 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <HAL_TIM_MspPostInit+0x6c>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	4a10      	ldr	r2, [pc, #64]	@ (8001814 <HAL_TIM_MspPostInit+0x6c>)
 80017d4:	f043 0302 	orr.w	r3, r3, #2
 80017d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017da:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <HAL_TIM_MspPostInit+0x6c>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Eng2PWM_Pin|Eng1PWM_Pin;
 80017e6:	2330      	movs	r3, #48	@ 0x30
 80017e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	2302      	movs	r3, #2
 80017ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017f6:	2302      	movs	r3, #2
 80017f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fa:	f107 030c 	add.w	r3, r7, #12
 80017fe:	4619      	mov	r1, r3
 8001800:	4805      	ldr	r0, [pc, #20]	@ (8001818 <HAL_TIM_MspPostInit+0x70>)
 8001802:	f001 f9cf 	bl	8002ba4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001806:	bf00      	nop
 8001808:	3720      	adds	r7, #32
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40000400 	.word	0x40000400
 8001814:	40023800 	.word	0x40023800
 8001818:	40020400 	.word	0x40020400

0800181c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001820:	bf00      	nop
 8001822:	e7fd      	b.n	8001820 <NMI_Handler+0x4>

08001824 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001828:	bf00      	nop
 800182a:	e7fd      	b.n	8001828 <HardFault_Handler+0x4>

0800182c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <MemManage_Handler+0x4>

08001834 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <BusFault_Handler+0x4>

0800183c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <UsageFault_Handler+0x4>

08001844 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001872:	f000 f903 	bl	8001a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001880:	4802      	ldr	r0, [pc, #8]	@ (800188c <DMA1_Stream0_IRQHandler+0x10>)
 8001882:	f000 ff19 	bl	80026b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000280 	.word	0x20000280

08001890 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001894:	4802      	ldr	r0, [pc, #8]	@ (80018a0 <DMA1_Stream1_IRQHandler+0x10>)
 8001896:	f000 ff0f 	bl	80026b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000220 	.word	0x20000220

080018a4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80018a8:	4802      	ldr	r0, [pc, #8]	@ (80018b4 <ADC_IRQHandler+0x10>)
 80018aa:	f000 f96e 	bl	8001b8a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000184 	.word	0x20000184

080018b8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80018bc:	4802      	ldr	r0, [pc, #8]	@ (80018c8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80018be:	f004 fb51 	bl	8005f64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000328 	.word	0x20000328

080018cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018d0:	4802      	ldr	r0, [pc, #8]	@ (80018dc <TIM3_IRQHandler+0x10>)
 80018d2:	f004 fb47 	bl	8005f64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200002e0 	.word	0x200002e0

080018e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80018e4:	4802      	ldr	r0, [pc, #8]	@ (80018f0 <OTG_FS_IRQHandler+0x10>)
 80018e6:	f002 fc2e 	bl	8004146 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200010ac 	.word	0x200010ac

080018f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018fc:	4a14      	ldr	r2, [pc, #80]	@ (8001950 <_sbrk+0x5c>)
 80018fe:	4b15      	ldr	r3, [pc, #84]	@ (8001954 <_sbrk+0x60>)
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001908:	4b13      	ldr	r3, [pc, #76]	@ (8001958 <_sbrk+0x64>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d102      	bne.n	8001916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001910:	4b11      	ldr	r3, [pc, #68]	@ (8001958 <_sbrk+0x64>)
 8001912:	4a12      	ldr	r2, [pc, #72]	@ (800195c <_sbrk+0x68>)
 8001914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001916:	4b10      	ldr	r3, [pc, #64]	@ (8001958 <_sbrk+0x64>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4413      	add	r3, r2
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	429a      	cmp	r2, r3
 8001922:	d207      	bcs.n	8001934 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001924:	f009 fac0 	bl	800aea8 <__errno>
 8001928:	4603      	mov	r3, r0
 800192a:	220c      	movs	r2, #12
 800192c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800192e:	f04f 33ff 	mov.w	r3, #4294967295
 8001932:	e009      	b.n	8001948 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001934:	4b08      	ldr	r3, [pc, #32]	@ (8001958 <_sbrk+0x64>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800193a:	4b07      	ldr	r3, [pc, #28]	@ (8001958 <_sbrk+0x64>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	4a05      	ldr	r2, [pc, #20]	@ (8001958 <_sbrk+0x64>)
 8001944:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001946:	68fb      	ldr	r3, [r7, #12]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20020000 	.word	0x20020000
 8001954:	00000400 	.word	0x00000400
 8001958:	200007c0 	.word	0x200007c0
 800195c:	200018f8 	.word	0x200018f8

08001960 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001964:	4b06      	ldr	r3, [pc, #24]	@ (8001980 <SystemInit+0x20>)
 8001966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800196a:	4a05      	ldr	r2, [pc, #20]	@ (8001980 <SystemInit+0x20>)
 800196c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001970:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001984:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001988:	f7ff ffea 	bl	8001960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800198c:	480c      	ldr	r0, [pc, #48]	@ (80019c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800198e:	490d      	ldr	r1, [pc, #52]	@ (80019c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001990:	4a0d      	ldr	r2, [pc, #52]	@ (80019c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001994:	e002      	b.n	800199c <LoopCopyDataInit>

08001996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800199a:	3304      	adds	r3, #4

0800199c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800199c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800199e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a0:	d3f9      	bcc.n	8001996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019a2:	4a0a      	ldr	r2, [pc, #40]	@ (80019cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019a4:	4c0a      	ldr	r4, [pc, #40]	@ (80019d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a8:	e001      	b.n	80019ae <LoopFillZerobss>

080019aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019ac:	3204      	adds	r2, #4

080019ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b0:	d3fb      	bcc.n	80019aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019b2:	f009 fa7f 	bl	800aeb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019b6:	f7ff f8ef 	bl	8000b98 <main>
  bx  lr    
 80019ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c4:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 80019c8:	0800b6ec 	.word	0x0800b6ec
  ldr r2, =_sbss
 80019cc:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 80019d0:	200018f8 	.word	0x200018f8

080019d4 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d4:	e7fe      	b.n	80019d4 <DMA1_Stream2_IRQHandler>
	...

080019d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001a18 <HAL_Init+0x40>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001a18 <HAL_Init+0x40>)
 80019e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a18 <HAL_Init+0x40>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001a18 <HAL_Init+0x40>)
 80019ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f4:	4b08      	ldr	r3, [pc, #32]	@ (8001a18 <HAL_Init+0x40>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a07      	ldr	r2, [pc, #28]	@ (8001a18 <HAL_Init+0x40>)
 80019fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a00:	2003      	movs	r0, #3
 8001a02:	f000 fcef 	bl	80023e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a06:	200f      	movs	r0, #15
 8001a08:	f000 f808 	bl	8001a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a0c:	f7ff fd4a 	bl	80014a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40023c00 	.word	0x40023c00

08001a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a24:	4b12      	ldr	r3, [pc, #72]	@ (8001a70 <HAL_InitTick+0x54>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b12      	ldr	r3, [pc, #72]	@ (8001a74 <HAL_InitTick+0x58>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 fd07 	bl	800244e <HAL_SYSTICK_Config>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e00e      	b.n	8001a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b0f      	cmp	r3, #15
 8001a4e:	d80a      	bhi.n	8001a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a50:	2200      	movs	r2, #0
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	f04f 30ff 	mov.w	r0, #4294967295
 8001a58:	f000 fccf 	bl	80023fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a5c:	4a06      	ldr	r2, [pc, #24]	@ (8001a78 <HAL_InitTick+0x5c>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	e000      	b.n	8001a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000004 	.word	0x20000004
 8001a74:	2000000c 	.word	0x2000000c
 8001a78:	20000008 	.word	0x20000008

08001a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a80:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <HAL_IncTick+0x20>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <HAL_IncTick+0x24>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4a04      	ldr	r2, [pc, #16]	@ (8001aa0 <HAL_IncTick+0x24>)
 8001a8e:	6013      	str	r3, [r2, #0]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	2000000c 	.word	0x2000000c
 8001aa0:	200007c4 	.word	0x200007c4

08001aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa8:	4b03      	ldr	r3, [pc, #12]	@ (8001ab8 <HAL_GetTick+0x14>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	200007c4 	.word	0x200007c4

08001abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac4:	f7ff ffee 	bl	8001aa4 <HAL_GetTick>
 8001ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad4:	d005      	beq.n	8001ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b00 <HAL_Delay+0x44>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4413      	add	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ae2:	bf00      	nop
 8001ae4:	f7ff ffde 	bl	8001aa4 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d8f7      	bhi.n	8001ae4 <HAL_Delay+0x28>
  {
  }
}
 8001af4:	bf00      	nop
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	2000000c 	.word	0x2000000c

08001b04 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e033      	b.n	8001b82 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d109      	bne.n	8001b36 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff fce6 	bl	80014f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3a:	f003 0310 	and.w	r3, r3, #16
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d118      	bne.n	8001b74 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b46:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b4a:	f023 0302 	bic.w	r3, r3, #2
 8001b4e:	f043 0202 	orr.w	r2, r3, #2
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 fa6e 	bl	8002038 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b66:	f023 0303 	bic.w	r3, r3, #3
 8001b6a:	f043 0201 	orr.w	r2, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b72:	e001      	b.n	8001b78 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b086      	sub	sp, #24
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	2300      	movs	r3, #0
 8001b98:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	f003 0320 	and.w	r3, r3, #32
 8001bb8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d049      	beq.n	8001c54 <HAL_ADC_IRQHandler+0xca>
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d046      	beq.n	8001c54 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bca:	f003 0310 	and.w	r3, r3, #16
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d105      	bne.n	8001bde <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d12b      	bne.n	8001c44 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d127      	bne.n	8001c44 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bfa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d006      	beq.n	8001c10 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d119      	bne.n	8001c44 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0220 	bic.w	r2, r2, #32
 8001c1e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d105      	bne.n	8001c44 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3c:	f043 0201 	orr.w	r2, r3, #1
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7fe ff35 	bl	8000ab4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f06f 0212 	mvn.w	r2, #18
 8001c52:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c62:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d057      	beq.n	8001d1a <HAL_ADC_IRQHandler+0x190>
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d054      	beq.n	8001d1a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c74:	f003 0310 	and.w	r3, r3, #16
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d105      	bne.n	8001c88 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c80:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d139      	bne.n	8001d0a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c9c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d006      	beq.n	8001cb2 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d12b      	bne.n	8001d0a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d124      	bne.n	8001d0a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d11d      	bne.n	8001d0a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d119      	bne.n	8001d0a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ce4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d105      	bne.n	8001d0a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d02:	f043 0201 	orr.w	r2, r3, #1
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 fa90 	bl	8002230 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f06f 020c 	mvn.w	r2, #12
 8001d18:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d28:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d017      	beq.n	8001d60 <HAL_ADC_IRQHandler+0x1d6>
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d014      	beq.n	8001d60 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d10d      	bne.n	8001d60 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d48:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f82a 	bl	8001daa <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f06f 0201 	mvn.w	r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f003 0320 	and.w	r3, r3, #32
 8001d66:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d6e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d015      	beq.n	8001da2 <HAL_ADC_IRQHandler+0x218>
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d012      	beq.n	8001da2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d80:	f043 0202 	orr.w	r2, r3, #2
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f06f 0220 	mvn.w	r2, #32
 8001d90:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f813 	bl	8001dbe <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f06f 0220 	mvn.w	r2, #32
 8001da0:	601a      	str	r2, [r3, #0]
  }
}
 8001da2:	bf00      	nop
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d101      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x1c>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e113      	b.n	8002018 <HAL_ADC_ConfigChannel+0x244>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b09      	cmp	r3, #9
 8001dfe:	d925      	bls.n	8001e4c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68d9      	ldr	r1, [r3, #12]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4613      	mov	r3, r2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	4413      	add	r3, r2
 8001e14:	3b1e      	subs	r3, #30
 8001e16:	2207      	movs	r2, #7
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43da      	mvns	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	400a      	ands	r2, r1
 8001e24:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68d9      	ldr	r1, [r3, #12]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	4618      	mov	r0, r3
 8001e38:	4603      	mov	r3, r0
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	4403      	add	r3, r0
 8001e3e:	3b1e      	subs	r3, #30
 8001e40:	409a      	lsls	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	e022      	b.n	8001e92 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6919      	ldr	r1, [r3, #16]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	4413      	add	r3, r2
 8001e60:	2207      	movs	r2, #7
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43da      	mvns	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	400a      	ands	r2, r1
 8001e6e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6919      	ldr	r1, [r3, #16]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	4618      	mov	r0, r3
 8001e82:	4603      	mov	r3, r0
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4403      	add	r3, r0
 8001e88:	409a      	lsls	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b06      	cmp	r3, #6
 8001e98:	d824      	bhi.n	8001ee4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3b05      	subs	r3, #5
 8001eac:	221f      	movs	r2, #31
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43da      	mvns	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	400a      	ands	r2, r1
 8001eba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	4618      	mov	r0, r3
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	3b05      	subs	r3, #5
 8001ed6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ee2:	e04c      	b.n	8001f7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b0c      	cmp	r3, #12
 8001eea:	d824      	bhi.n	8001f36 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	3b23      	subs	r3, #35	@ 0x23
 8001efe:	221f      	movs	r2, #31
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43da      	mvns	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	400a      	ands	r2, r1
 8001f0c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	3b23      	subs	r3, #35	@ 0x23
 8001f28:	fa00 f203 	lsl.w	r2, r0, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f34:	e023      	b.n	8001f7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	4613      	mov	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	3b41      	subs	r3, #65	@ 0x41
 8001f48:	221f      	movs	r2, #31
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43da      	mvns	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	400a      	ands	r2, r1
 8001f56:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	4618      	mov	r0, r3
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	3b41      	subs	r3, #65	@ 0x41
 8001f72:	fa00 f203 	lsl.w	r2, r0, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f7e:	4b29      	ldr	r3, [pc, #164]	@ (8002024 <HAL_ADC_ConfigChannel+0x250>)
 8001f80:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a28      	ldr	r2, [pc, #160]	@ (8002028 <HAL_ADC_ConfigChannel+0x254>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d10f      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x1d8>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b12      	cmp	r3, #18
 8001f92:	d10b      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a1d      	ldr	r2, [pc, #116]	@ (8002028 <HAL_ADC_ConfigChannel+0x254>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d12b      	bne.n	800200e <HAL_ADC_ConfigChannel+0x23a>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a1c      	ldr	r2, [pc, #112]	@ (800202c <HAL_ADC_ConfigChannel+0x258>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d003      	beq.n	8001fc8 <HAL_ADC_ConfigChannel+0x1f4>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b11      	cmp	r3, #17
 8001fc6:	d122      	bne.n	800200e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a11      	ldr	r2, [pc, #68]	@ (800202c <HAL_ADC_ConfigChannel+0x258>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d111      	bne.n	800200e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fea:	4b11      	ldr	r3, [pc, #68]	@ (8002030 <HAL_ADC_ConfigChannel+0x25c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a11      	ldr	r2, [pc, #68]	@ (8002034 <HAL_ADC_ConfigChannel+0x260>)
 8001ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff4:	0c9a      	lsrs	r2, r3, #18
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002000:	e002      	b.n	8002008 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	3b01      	subs	r3, #1
 8002006:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f9      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	40012300 	.word	0x40012300
 8002028:	40012000 	.word	0x40012000
 800202c:	10000012 	.word	0x10000012
 8002030:	20000004 	.word	0x20000004
 8002034:	431bde83 	.word	0x431bde83

08002038 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002040:	4b79      	ldr	r3, [pc, #484]	@ (8002228 <ADC_Init+0x1f0>)
 8002042:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	431a      	orrs	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800206c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6859      	ldr	r1, [r3, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	021a      	lsls	r2, r3, #8
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002090:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6859      	ldr	r1, [r3, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6899      	ldr	r1, [r3, #8]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ca:	4a58      	ldr	r2, [pc, #352]	@ (800222c <ADC_Init+0x1f4>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d022      	beq.n	8002116 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6899      	ldr	r1, [r3, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002100:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6899      	ldr	r1, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	e00f      	b.n	8002136 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002124:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002134:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0202 	bic.w	r2, r2, #2
 8002144:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6899      	ldr	r1, [r3, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	7e1b      	ldrb	r3, [r3, #24]
 8002150:	005a      	lsls	r2, r3, #1
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d01b      	beq.n	800219c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002172:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002182:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6859      	ldr	r1, [r3, #4]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218e:	3b01      	subs	r3, #1
 8002190:	035a      	lsls	r2, r3, #13
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	e007      	b.n	80021ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021aa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80021ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	051a      	lsls	r2, r3, #20
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80021e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6899      	ldr	r1, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80021ee:	025a      	lsls	r2, r3, #9
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002206:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6899      	ldr	r1, [r3, #8]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	029a      	lsls	r2, r3, #10
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	609a      	str	r2, [r3, #8]
}
 800221c:	bf00      	nop
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	40012300 	.word	0x40012300
 800222c:	0f000001 	.word	0x0f000001

08002230 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002254:	4b0c      	ldr	r3, [pc, #48]	@ (8002288 <__NVIC_SetPriorityGrouping+0x44>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002260:	4013      	ands	r3, r2
 8002262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800226c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002270:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002276:	4a04      	ldr	r2, [pc, #16]	@ (8002288 <__NVIC_SetPriorityGrouping+0x44>)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	60d3      	str	r3, [r2, #12]
}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002290:	4b04      	ldr	r3, [pc, #16]	@ (80022a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	0a1b      	lsrs	r3, r3, #8
 8002296:	f003 0307 	and.w	r3, r3, #7
}
 800229a:	4618      	mov	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	db0b      	blt.n	80022d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	f003 021f 	and.w	r2, r3, #31
 80022c0:	4907      	ldr	r1, [pc, #28]	@ (80022e0 <__NVIC_EnableIRQ+0x38>)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	095b      	lsrs	r3, r3, #5
 80022c8:	2001      	movs	r0, #1
 80022ca:	fa00 f202 	lsl.w	r2, r0, r2
 80022ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000e100 	.word	0xe000e100

080022e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	6039      	str	r1, [r7, #0]
 80022ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	db0a      	blt.n	800230e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	490c      	ldr	r1, [pc, #48]	@ (8002330 <__NVIC_SetPriority+0x4c>)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	0112      	lsls	r2, r2, #4
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	440b      	add	r3, r1
 8002308:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800230c:	e00a      	b.n	8002324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	b2da      	uxtb	r2, r3
 8002312:	4908      	ldr	r1, [pc, #32]	@ (8002334 <__NVIC_SetPriority+0x50>)
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	3b04      	subs	r3, #4
 800231c:	0112      	lsls	r2, r2, #4
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	440b      	add	r3, r1
 8002322:	761a      	strb	r2, [r3, #24]
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000e100 	.word	0xe000e100
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002338:	b480      	push	{r7}
 800233a:	b089      	sub	sp, #36	@ 0x24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f1c3 0307 	rsb	r3, r3, #7
 8002352:	2b04      	cmp	r3, #4
 8002354:	bf28      	it	cs
 8002356:	2304      	movcs	r3, #4
 8002358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3304      	adds	r3, #4
 800235e:	2b06      	cmp	r3, #6
 8002360:	d902      	bls.n	8002368 <NVIC_EncodePriority+0x30>
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3b03      	subs	r3, #3
 8002366:	e000      	b.n	800236a <NVIC_EncodePriority+0x32>
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800236c:	f04f 32ff 	mov.w	r2, #4294967295
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43da      	mvns	r2, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	401a      	ands	r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002380:	f04f 31ff 	mov.w	r1, #4294967295
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	fa01 f303 	lsl.w	r3, r1, r3
 800238a:	43d9      	mvns	r1, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002390:	4313      	orrs	r3, r2
         );
}
 8002392:	4618      	mov	r0, r3
 8002394:	3724      	adds	r7, #36	@ 0x24
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
	...

080023a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023b0:	d301      	bcc.n	80023b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023b2:	2301      	movs	r3, #1
 80023b4:	e00f      	b.n	80023d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023b6:	4a0a      	ldr	r2, [pc, #40]	@ (80023e0 <SysTick_Config+0x40>)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023be:	210f      	movs	r1, #15
 80023c0:	f04f 30ff 	mov.w	r0, #4294967295
 80023c4:	f7ff ff8e 	bl	80022e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c8:	4b05      	ldr	r3, [pc, #20]	@ (80023e0 <SysTick_Config+0x40>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ce:	4b04      	ldr	r3, [pc, #16]	@ (80023e0 <SysTick_Config+0x40>)
 80023d0:	2207      	movs	r2, #7
 80023d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	e000e010 	.word	0xe000e010

080023e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7ff ff29 	bl	8002244 <__NVIC_SetPriorityGrouping>
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b086      	sub	sp, #24
 80023fe:	af00      	add	r7, sp, #0
 8002400:	4603      	mov	r3, r0
 8002402:	60b9      	str	r1, [r7, #8]
 8002404:	607a      	str	r2, [r7, #4]
 8002406:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800240c:	f7ff ff3e 	bl	800228c <__NVIC_GetPriorityGrouping>
 8002410:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	68b9      	ldr	r1, [r7, #8]
 8002416:	6978      	ldr	r0, [r7, #20]
 8002418:	f7ff ff8e 	bl	8002338 <NVIC_EncodePriority>
 800241c:	4602      	mov	r2, r0
 800241e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002422:	4611      	mov	r1, r2
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff ff5d 	bl	80022e4 <__NVIC_SetPriority>
}
 800242a:	bf00      	nop
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
 8002438:	4603      	mov	r3, r0
 800243a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800243c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ff31 	bl	80022a8 <__NVIC_EnableIRQ>
}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff ffa2 	bl	80023a0 <SysTick_Config>
 800245c:	4603      	mov	r3, r0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002474:	f7ff fb16 	bl	8001aa4 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e099      	b.n	80025b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2202      	movs	r2, #2
 8002488:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0201 	bic.w	r2, r2, #1
 80024a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024a4:	e00f      	b.n	80024c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024a6:	f7ff fafd 	bl	8001aa4 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b05      	cmp	r3, #5
 80024b2:	d908      	bls.n	80024c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2220      	movs	r2, #32
 80024b8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2203      	movs	r2, #3
 80024be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e078      	b.n	80025b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1e8      	bne.n	80024a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	4b38      	ldr	r3, [pc, #224]	@ (80025c0 <HAL_DMA_Init+0x158>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800250a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	4313      	orrs	r3, r2
 8002516:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251c:	2b04      	cmp	r3, #4
 800251e:	d107      	bne.n	8002530 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002528:	4313      	orrs	r3, r2
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	4313      	orrs	r3, r2
 800252e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f023 0307 	bic.w	r3, r3, #7
 8002546:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	4313      	orrs	r3, r2
 8002550:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002556:	2b04      	cmp	r3, #4
 8002558:	d117      	bne.n	800258a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	4313      	orrs	r3, r2
 8002562:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00e      	beq.n	800258a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 fa9d 	bl	8002aac <DMA_CheckFifoParam>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d008      	beq.n	800258a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2240      	movs	r2, #64	@ 0x40
 800257c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002586:	2301      	movs	r3, #1
 8002588:	e016      	b.n	80025b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 fa54 	bl	8002a40 <DMA_CalcBaseAndBitshift>
 8002598:	4603      	mov	r3, r0
 800259a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a0:	223f      	movs	r2, #63	@ 0x3f
 80025a2:	409a      	lsls	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	f010803f 	.word	0xf010803f

080025c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
 80025d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <HAL_DMA_Start_IT+0x26>
 80025e6:	2302      	movs	r3, #2
 80025e8:	e040      	b.n	800266c <HAL_DMA_Start_IT+0xa8>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d12f      	bne.n	800265e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2202      	movs	r2, #2
 8002602:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68b9      	ldr	r1, [r7, #8]
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 f9e6 	bl	80029e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800261c:	223f      	movs	r2, #63	@ 0x3f
 800261e:	409a      	lsls	r2, r3
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0216 	orr.w	r2, r2, #22
 8002632:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002638:	2b00      	cmp	r3, #0
 800263a:	d007      	beq.n	800264c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0208 	orr.w	r2, r2, #8
 800264a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 0201 	orr.w	r2, r2, #1
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	e005      	b.n	800266a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002666:	2302      	movs	r3, #2
 8002668:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800266a:	7dfb      	ldrb	r3, [r7, #23]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d004      	beq.n	8002692 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2280      	movs	r2, #128	@ 0x80
 800268c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e00c      	b.n	80026ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2205      	movs	r2, #5
 8002696:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0201 	bic.w	r2, r2, #1
 80026a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026c4:	4b8e      	ldr	r3, [pc, #568]	@ (8002900 <HAL_DMA_IRQHandler+0x248>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a8e      	ldr	r2, [pc, #568]	@ (8002904 <HAL_DMA_IRQHandler+0x24c>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	0a9b      	lsrs	r3, r3, #10
 80026d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e2:	2208      	movs	r2, #8
 80026e4:	409a      	lsls	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4013      	ands	r3, r2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d01a      	beq.n	8002724 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d013      	beq.n	8002724 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0204 	bic.w	r2, r2, #4
 800270a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002710:	2208      	movs	r2, #8
 8002712:	409a      	lsls	r2, r3
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800271c:	f043 0201 	orr.w	r2, r3, #1
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002728:	2201      	movs	r2, #1
 800272a:	409a      	lsls	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4013      	ands	r3, r2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d012      	beq.n	800275a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00b      	beq.n	800275a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002746:	2201      	movs	r2, #1
 8002748:	409a      	lsls	r2, r3
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002752:	f043 0202 	orr.w	r2, r3, #2
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800275e:	2204      	movs	r2, #4
 8002760:	409a      	lsls	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	4013      	ands	r3, r2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d012      	beq.n	8002790 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00b      	beq.n	8002790 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800277c:	2204      	movs	r2, #4
 800277e:	409a      	lsls	r2, r3
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002788:	f043 0204 	orr.w	r2, r3, #4
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002794:	2210      	movs	r2, #16
 8002796:	409a      	lsls	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4013      	ands	r3, r2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d043      	beq.n	8002828 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d03c      	beq.n	8002828 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b2:	2210      	movs	r2, #16
 80027b4:	409a      	lsls	r2, r3
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d018      	beq.n	80027fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d108      	bne.n	80027e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d024      	beq.n	8002828 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	4798      	blx	r3
 80027e6:	e01f      	b.n	8002828 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d01b      	beq.n	8002828 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	4798      	blx	r3
 80027f8:	e016      	b.n	8002828 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002804:	2b00      	cmp	r3, #0
 8002806:	d107      	bne.n	8002818 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0208 	bic.w	r2, r2, #8
 8002816:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282c:	2220      	movs	r2, #32
 800282e:	409a      	lsls	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4013      	ands	r3, r2
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 808f 	beq.w	8002958 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0310 	and.w	r3, r3, #16
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 8087 	beq.w	8002958 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800284e:	2220      	movs	r2, #32
 8002850:	409a      	lsls	r2, r3
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b05      	cmp	r3, #5
 8002860:	d136      	bne.n	80028d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0216 	bic.w	r2, r2, #22
 8002870:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	695a      	ldr	r2, [r3, #20]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002880:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002886:	2b00      	cmp	r3, #0
 8002888:	d103      	bne.n	8002892 <HAL_DMA_IRQHandler+0x1da>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800288e:	2b00      	cmp	r3, #0
 8002890:	d007      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0208 	bic.w	r2, r2, #8
 80028a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a6:	223f      	movs	r2, #63	@ 0x3f
 80028a8:	409a      	lsls	r2, r3
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d07e      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	4798      	blx	r3
        }
        return;
 80028ce:	e079      	b.n	80029c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d01d      	beq.n	800291a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10d      	bne.n	8002908 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d031      	beq.n	8002958 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	4798      	blx	r3
 80028fc:	e02c      	b.n	8002958 <HAL_DMA_IRQHandler+0x2a0>
 80028fe:	bf00      	nop
 8002900:	20000004 	.word	0x20000004
 8002904:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800290c:	2b00      	cmp	r3, #0
 800290e:	d023      	beq.n	8002958 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	4798      	blx	r3
 8002918:	e01e      	b.n	8002958 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10f      	bne.n	8002948 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0210 	bic.w	r2, r2, #16
 8002936:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800295c:	2b00      	cmp	r3, #0
 800295e:	d032      	beq.n	80029c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b00      	cmp	r3, #0
 800296a:	d022      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2205      	movs	r2, #5
 8002970:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0201 	bic.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	3301      	adds	r3, #1
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	429a      	cmp	r2, r3
 800298e:	d307      	bcc.n	80029a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f2      	bne.n	8002984 <HAL_DMA_IRQHandler+0x2cc>
 800299e:	e000      	b.n	80029a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80029a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d005      	beq.n	80029c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	4798      	blx	r3
 80029c2:	e000      	b.n	80029c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80029c4:	bf00      	nop
    }
  }
}
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80029d8:	4618      	mov	r0, r3
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
 80029f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002a00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2b40      	cmp	r3, #64	@ 0x40
 8002a10:	d108      	bne.n	8002a24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a22:	e007      	b.n	8002a34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	60da      	str	r2, [r3, #12]
}
 8002a34:	bf00      	nop
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	3b10      	subs	r3, #16
 8002a50:	4a14      	ldr	r2, [pc, #80]	@ (8002aa4 <DMA_CalcBaseAndBitshift+0x64>)
 8002a52:	fba2 2303 	umull	r2, r3, r2, r3
 8002a56:	091b      	lsrs	r3, r3, #4
 8002a58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a5a:	4a13      	ldr	r2, [pc, #76]	@ (8002aa8 <DMA_CalcBaseAndBitshift+0x68>)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4413      	add	r3, r2
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	461a      	mov	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	d909      	bls.n	8002a82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a76:	f023 0303 	bic.w	r3, r3, #3
 8002a7a:	1d1a      	adds	r2, r3, #4
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a80:	e007      	b.n	8002a92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a8a:	f023 0303 	bic.w	r3, r3, #3
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	aaaaaaab 	.word	0xaaaaaaab
 8002aa8:	0800b6a0 	.word	0x0800b6a0

08002aac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002abc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d11f      	bne.n	8002b06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d856      	bhi.n	8002b7a <DMA_CheckFifoParam+0xce>
 8002acc:	a201      	add	r2, pc, #4	@ (adr r2, 8002ad4 <DMA_CheckFifoParam+0x28>)
 8002ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad2:	bf00      	nop
 8002ad4:	08002ae5 	.word	0x08002ae5
 8002ad8:	08002af7 	.word	0x08002af7
 8002adc:	08002ae5 	.word	0x08002ae5
 8002ae0:	08002b7b 	.word	0x08002b7b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d046      	beq.n	8002b7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002af4:	e043      	b.n	8002b7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002afe:	d140      	bne.n	8002b82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b04:	e03d      	b.n	8002b82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b0e:	d121      	bne.n	8002b54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2b03      	cmp	r3, #3
 8002b14:	d837      	bhi.n	8002b86 <DMA_CheckFifoParam+0xda>
 8002b16:	a201      	add	r2, pc, #4	@ (adr r2, 8002b1c <DMA_CheckFifoParam+0x70>)
 8002b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b1c:	08002b2d 	.word	0x08002b2d
 8002b20:	08002b33 	.word	0x08002b33
 8002b24:	08002b2d 	.word	0x08002b2d
 8002b28:	08002b45 	.word	0x08002b45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b30:	e030      	b.n	8002b94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b36:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d025      	beq.n	8002b8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b42:	e022      	b.n	8002b8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b48:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b4c:	d11f      	bne.n	8002b8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b52:	e01c      	b.n	8002b8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d903      	bls.n	8002b62 <DMA_CheckFifoParam+0xb6>
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2b03      	cmp	r3, #3
 8002b5e:	d003      	beq.n	8002b68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b60:	e018      	b.n	8002b94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	73fb      	strb	r3, [r7, #15]
      break;
 8002b66:	e015      	b.n	8002b94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00e      	beq.n	8002b92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	73fb      	strb	r3, [r7, #15]
      break;
 8002b78:	e00b      	b.n	8002b92 <DMA_CheckFifoParam+0xe6>
      break;
 8002b7a:	bf00      	nop
 8002b7c:	e00a      	b.n	8002b94 <DMA_CheckFifoParam+0xe8>
      break;
 8002b7e:	bf00      	nop
 8002b80:	e008      	b.n	8002b94 <DMA_CheckFifoParam+0xe8>
      break;
 8002b82:	bf00      	nop
 8002b84:	e006      	b.n	8002b94 <DMA_CheckFifoParam+0xe8>
      break;
 8002b86:	bf00      	nop
 8002b88:	e004      	b.n	8002b94 <DMA_CheckFifoParam+0xe8>
      break;
 8002b8a:	bf00      	nop
 8002b8c:	e002      	b.n	8002b94 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b8e:	bf00      	nop
 8002b90:	e000      	b.n	8002b94 <DMA_CheckFifoParam+0xe8>
      break;
 8002b92:	bf00      	nop
    }
  } 
  
  return status; 
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop

08002ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b089      	sub	sp, #36	@ 0x24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61fb      	str	r3, [r7, #28]
 8002bbe:	e159      	b.n	8002e74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	f040 8148 	bne.w	8002e6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d005      	beq.n	8002bf6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d130      	bne.n	8002c58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	2203      	movs	r2, #3
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43db      	mvns	r3, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	43db      	mvns	r3, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	091b      	lsrs	r3, r3, #4
 8002c42:	f003 0201 	and.w	r2, r3, #1
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f003 0303 	and.w	r3, r3, #3
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d017      	beq.n	8002c94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	2203      	movs	r2, #3
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d123      	bne.n	8002ce8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	08da      	lsrs	r2, r3, #3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3208      	adds	r2, #8
 8002ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	220f      	movs	r2, #15
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	08da      	lsrs	r2, r3, #3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3208      	adds	r2, #8
 8002ce2:	69b9      	ldr	r1, [r7, #24]
 8002ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	2203      	movs	r2, #3
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 0203 	and.w	r2, r3, #3
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 80a2 	beq.w	8002e6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	4b57      	ldr	r3, [pc, #348]	@ (8002e8c <HAL_GPIO_Init+0x2e8>)
 8002d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d32:	4a56      	ldr	r2, [pc, #344]	@ (8002e8c <HAL_GPIO_Init+0x2e8>)
 8002d34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d38:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d3a:	4b54      	ldr	r3, [pc, #336]	@ (8002e8c <HAL_GPIO_Init+0x2e8>)
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d46:	4a52      	ldr	r2, [pc, #328]	@ (8002e90 <HAL_GPIO_Init+0x2ec>)
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	089b      	lsrs	r3, r3, #2
 8002d4c:	3302      	adds	r3, #2
 8002d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	220f      	movs	r2, #15
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	43db      	mvns	r3, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4013      	ands	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a49      	ldr	r2, [pc, #292]	@ (8002e94 <HAL_GPIO_Init+0x2f0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d019      	beq.n	8002da6 <HAL_GPIO_Init+0x202>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a48      	ldr	r2, [pc, #288]	@ (8002e98 <HAL_GPIO_Init+0x2f4>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d013      	beq.n	8002da2 <HAL_GPIO_Init+0x1fe>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a47      	ldr	r2, [pc, #284]	@ (8002e9c <HAL_GPIO_Init+0x2f8>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d00d      	beq.n	8002d9e <HAL_GPIO_Init+0x1fa>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a46      	ldr	r2, [pc, #280]	@ (8002ea0 <HAL_GPIO_Init+0x2fc>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d007      	beq.n	8002d9a <HAL_GPIO_Init+0x1f6>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a45      	ldr	r2, [pc, #276]	@ (8002ea4 <HAL_GPIO_Init+0x300>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d101      	bne.n	8002d96 <HAL_GPIO_Init+0x1f2>
 8002d92:	2304      	movs	r3, #4
 8002d94:	e008      	b.n	8002da8 <HAL_GPIO_Init+0x204>
 8002d96:	2307      	movs	r3, #7
 8002d98:	e006      	b.n	8002da8 <HAL_GPIO_Init+0x204>
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e004      	b.n	8002da8 <HAL_GPIO_Init+0x204>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e002      	b.n	8002da8 <HAL_GPIO_Init+0x204>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <HAL_GPIO_Init+0x204>
 8002da6:	2300      	movs	r3, #0
 8002da8:	69fa      	ldr	r2, [r7, #28]
 8002daa:	f002 0203 	and.w	r2, r2, #3
 8002dae:	0092      	lsls	r2, r2, #2
 8002db0:	4093      	lsls	r3, r2
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002db8:	4935      	ldr	r1, [pc, #212]	@ (8002e90 <HAL_GPIO_Init+0x2ec>)
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	089b      	lsrs	r3, r3, #2
 8002dbe:	3302      	adds	r3, #2
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dc6:	4b38      	ldr	r3, [pc, #224]	@ (8002ea8 <HAL_GPIO_Init+0x304>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dea:	4a2f      	ldr	r2, [pc, #188]	@ (8002ea8 <HAL_GPIO_Init+0x304>)
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002df0:	4b2d      	ldr	r3, [pc, #180]	@ (8002ea8 <HAL_GPIO_Init+0x304>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e14:	4a24      	ldr	r2, [pc, #144]	@ (8002ea8 <HAL_GPIO_Init+0x304>)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e1a:	4b23      	ldr	r3, [pc, #140]	@ (8002ea8 <HAL_GPIO_Init+0x304>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	43db      	mvns	r3, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4013      	ands	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e3e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ea8 <HAL_GPIO_Init+0x304>)
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e44:	4b18      	ldr	r3, [pc, #96]	@ (8002ea8 <HAL_GPIO_Init+0x304>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4013      	ands	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e68:	4a0f      	ldr	r2, [pc, #60]	@ (8002ea8 <HAL_GPIO_Init+0x304>)
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	3301      	adds	r3, #1
 8002e72:	61fb      	str	r3, [r7, #28]
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	2b0f      	cmp	r3, #15
 8002e78:	f67f aea2 	bls.w	8002bc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e7c:	bf00      	nop
 8002e7e:	bf00      	nop
 8002e80:	3724      	adds	r7, #36	@ 0x24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	40013800 	.word	0x40013800
 8002e94:	40020000 	.word	0x40020000
 8002e98:	40020400 	.word	0x40020400
 8002e9c:	40020800 	.word	0x40020800
 8002ea0:	40020c00 	.word	0x40020c00
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40013c00 	.word	0x40013c00

08002eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	807b      	strh	r3, [r7, #2]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ebc:	787b      	ldrb	r3, [r7, #1]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ec2:	887a      	ldrh	r2, [r7, #2]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ec8:	e003      	b.n	8002ed2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eca:	887b      	ldrh	r3, [r7, #2]
 8002ecc:	041a      	lsls	r2, r3, #16
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	619a      	str	r2, [r3, #24]
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b085      	sub	sp, #20
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ef0:	887a      	ldrh	r2, [r7, #2]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	041a      	lsls	r2, r3, #16
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	43d9      	mvns	r1, r3
 8002efc:	887b      	ldrh	r3, [r7, #2]
 8002efe:	400b      	ands	r3, r1
 8002f00:	431a      	orrs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	619a      	str	r2, [r3, #24]
}
 8002f06:	bf00      	nop
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
	...

08002f14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e12b      	b.n	800317e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d106      	bne.n	8002f40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7fe fb42 	bl	80015c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2224      	movs	r2, #36	@ 0x24
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0201 	bic.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f78:	f002 fe24 	bl	8005bc4 <HAL_RCC_GetPCLK1Freq>
 8002f7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	4a81      	ldr	r2, [pc, #516]	@ (8003188 <HAL_I2C_Init+0x274>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d807      	bhi.n	8002f98 <HAL_I2C_Init+0x84>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4a80      	ldr	r2, [pc, #512]	@ (800318c <HAL_I2C_Init+0x278>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	bf94      	ite	ls
 8002f90:	2301      	movls	r3, #1
 8002f92:	2300      	movhi	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	e006      	b.n	8002fa6 <HAL_I2C_Init+0x92>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4a7d      	ldr	r2, [pc, #500]	@ (8003190 <HAL_I2C_Init+0x27c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	bf94      	ite	ls
 8002fa0:	2301      	movls	r3, #1
 8002fa2:	2300      	movhi	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e0e7      	b.n	800317e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	4a78      	ldr	r2, [pc, #480]	@ (8003194 <HAL_I2C_Init+0x280>)
 8002fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb6:	0c9b      	lsrs	r3, r3, #18
 8002fb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	4a6a      	ldr	r2, [pc, #424]	@ (8003188 <HAL_I2C_Init+0x274>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d802      	bhi.n	8002fe8 <HAL_I2C_Init+0xd4>
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	e009      	b.n	8002ffc <HAL_I2C_Init+0xe8>
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002fee:	fb02 f303 	mul.w	r3, r2, r3
 8002ff2:	4a69      	ldr	r2, [pc, #420]	@ (8003198 <HAL_I2C_Init+0x284>)
 8002ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff8:	099b      	lsrs	r3, r3, #6
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6812      	ldr	r2, [r2, #0]
 8003000:	430b      	orrs	r3, r1
 8003002:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800300e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	495c      	ldr	r1, [pc, #368]	@ (8003188 <HAL_I2C_Init+0x274>)
 8003018:	428b      	cmp	r3, r1
 800301a:	d819      	bhi.n	8003050 <HAL_I2C_Init+0x13c>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	1e59      	subs	r1, r3, #1
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	fbb1 f3f3 	udiv	r3, r1, r3
 800302a:	1c59      	adds	r1, r3, #1
 800302c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003030:	400b      	ands	r3, r1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00a      	beq.n	800304c <HAL_I2C_Init+0x138>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1e59      	subs	r1, r3, #1
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	fbb1 f3f3 	udiv	r3, r1, r3
 8003044:	3301      	adds	r3, #1
 8003046:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800304a:	e051      	b.n	80030f0 <HAL_I2C_Init+0x1dc>
 800304c:	2304      	movs	r3, #4
 800304e:	e04f      	b.n	80030f0 <HAL_I2C_Init+0x1dc>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d111      	bne.n	800307c <HAL_I2C_Init+0x168>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	1e58      	subs	r0, r3, #1
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6859      	ldr	r1, [r3, #4]
 8003060:	460b      	mov	r3, r1
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	440b      	add	r3, r1
 8003066:	fbb0 f3f3 	udiv	r3, r0, r3
 800306a:	3301      	adds	r3, #1
 800306c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003070:	2b00      	cmp	r3, #0
 8003072:	bf0c      	ite	eq
 8003074:	2301      	moveq	r3, #1
 8003076:	2300      	movne	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	e012      	b.n	80030a2 <HAL_I2C_Init+0x18e>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	1e58      	subs	r0, r3, #1
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6859      	ldr	r1, [r3, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	0099      	lsls	r1, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003092:	3301      	adds	r3, #1
 8003094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003098:	2b00      	cmp	r3, #0
 800309a:	bf0c      	ite	eq
 800309c:	2301      	moveq	r3, #1
 800309e:	2300      	movne	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_I2C_Init+0x196>
 80030a6:	2301      	movs	r3, #1
 80030a8:	e022      	b.n	80030f0 <HAL_I2C_Init+0x1dc>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10e      	bne.n	80030d0 <HAL_I2C_Init+0x1bc>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	1e58      	subs	r0, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6859      	ldr	r1, [r3, #4]
 80030ba:	460b      	mov	r3, r1
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	440b      	add	r3, r1
 80030c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80030c4:	3301      	adds	r3, #1
 80030c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030ce:	e00f      	b.n	80030f0 <HAL_I2C_Init+0x1dc>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	1e58      	subs	r0, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6859      	ldr	r1, [r3, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	0099      	lsls	r1, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030e6:	3301      	adds	r3, #1
 80030e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	6809      	ldr	r1, [r1, #0]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69da      	ldr	r2, [r3, #28]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800311e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6911      	ldr	r1, [r2, #16]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	68d2      	ldr	r2, [r2, #12]
 800312a:	4311      	orrs	r1, r2
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6812      	ldr	r2, [r2, #0]
 8003130:	430b      	orrs	r3, r1
 8003132:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	695a      	ldr	r2, [r3, #20]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0201 	orr.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2220      	movs	r2, #32
 800316a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	000186a0 	.word	0x000186a0
 800318c:	001e847f 	.word	0x001e847f
 8003190:	003d08ff 	.word	0x003d08ff
 8003194:	431bde83 	.word	0x431bde83
 8003198:	10624dd3 	.word	0x10624dd3

0800319c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b088      	sub	sp, #32
 80031a0:	af02      	add	r7, sp, #8
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	607a      	str	r2, [r7, #4]
 80031a6:	461a      	mov	r2, r3
 80031a8:	460b      	mov	r3, r1
 80031aa:	817b      	strh	r3, [r7, #10]
 80031ac:	4613      	mov	r3, r2
 80031ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031b0:	f7fe fc78 	bl	8001aa4 <HAL_GetTick>
 80031b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b20      	cmp	r3, #32
 80031c0:	f040 80e0 	bne.w	8003384 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	2319      	movs	r3, #25
 80031ca:	2201      	movs	r2, #1
 80031cc:	4970      	ldr	r1, [pc, #448]	@ (8003390 <HAL_I2C_Master_Transmit+0x1f4>)
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 fc9c 	bl	8003b0c <I2C_WaitOnFlagUntilTimeout>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80031da:	2302      	movs	r3, #2
 80031dc:	e0d3      	b.n	8003386 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <HAL_I2C_Master_Transmit+0x50>
 80031e8:	2302      	movs	r3, #2
 80031ea:	e0cc      	b.n	8003386 <HAL_I2C_Master_Transmit+0x1ea>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d007      	beq.n	8003212 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f042 0201 	orr.w	r2, r2, #1
 8003210:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003220:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2221      	movs	r2, #33	@ 0x21
 8003226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2210      	movs	r2, #16
 800322e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	893a      	ldrh	r2, [r7, #8]
 8003242:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003248:	b29a      	uxth	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	4a50      	ldr	r2, [pc, #320]	@ (8003394 <HAL_I2C_Master_Transmit+0x1f8>)
 8003252:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003254:	8979      	ldrh	r1, [r7, #10]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	6a3a      	ldr	r2, [r7, #32]
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 fa22 	bl	80036a4 <I2C_MasterRequestWrite>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e08d      	b.n	8003386 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800326a:	2300      	movs	r3, #0
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	613b      	str	r3, [r7, #16]
 800327e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003280:	e066      	b.n	8003350 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	6a39      	ldr	r1, [r7, #32]
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 fd5a 	bl	8003d40 <I2C_WaitOnTXEFlagUntilTimeout>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00d      	beq.n	80032ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003296:	2b04      	cmp	r3, #4
 8003298:	d107      	bne.n	80032aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e06b      	b.n	8003386 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b2:	781a      	ldrb	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032be:	1c5a      	adds	r2, r3, #1
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	d11b      	bne.n	8003324 <HAL_I2C_Master_Transmit+0x188>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d017      	beq.n	8003324 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f8:	781a      	ldrb	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003304:	1c5a      	adds	r2, r3, #1
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800330e:	b29b      	uxth	r3, r3
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	6a39      	ldr	r1, [r7, #32]
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 fd51 	bl	8003dd0 <I2C_WaitOnBTFFlagUntilTimeout>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00d      	beq.n	8003350 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003338:	2b04      	cmp	r3, #4
 800333a:	d107      	bne.n	800334c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800334a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e01a      	b.n	8003386 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003354:	2b00      	cmp	r3, #0
 8003356:	d194      	bne.n	8003282 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003366:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2220      	movs	r2, #32
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	e000      	b.n	8003386 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003384:	2302      	movs	r3, #2
  }
}
 8003386:	4618      	mov	r0, r3
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	00100002 	.word	0x00100002
 8003394:	ffff0000 	.word	0xffff0000

08003398 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08a      	sub	sp, #40	@ 0x28
 800339c:	af02      	add	r7, sp, #8
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	4608      	mov	r0, r1
 80033a2:	4611      	mov	r1, r2
 80033a4:	461a      	mov	r2, r3
 80033a6:	4603      	mov	r3, r0
 80033a8:	817b      	strh	r3, [r7, #10]
 80033aa:	460b      	mov	r3, r1
 80033ac:	813b      	strh	r3, [r7, #8]
 80033ae:	4613      	mov	r3, r2
 80033b0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033b6:	f7fe fb75 	bl	8001aa4 <HAL_GetTick>
 80033ba:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b20      	cmp	r3, #32
 80033c6:	f040 8136 	bne.w	8003636 <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80033ca:	4b9d      	ldr	r3, [pc, #628]	@ (8003640 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	08db      	lsrs	r3, r3, #3
 80033d0:	4a9c      	ldr	r2, [pc, #624]	@ (8003644 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 80033d2:	fba2 2303 	umull	r2, r3, r2, r3
 80033d6:	0a1a      	lsrs	r2, r3, #8
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	009a      	lsls	r2, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d112      	bne.n	8003416 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2220      	movs	r2, #32
 80033fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340a:	f043 0220 	orr.w	r2, r3, #32
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8003412:	2302      	movs	r3, #2
 8003414:	e110      	b.n	8003638 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b02      	cmp	r3, #2
 8003422:	d0df      	beq.n	80033e4 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <HAL_I2C_Mem_Write_DMA+0x9a>
 800342e:	2302      	movs	r3, #2
 8003430:	e102      	b.n	8003638 <HAL_I2C_Mem_Write_DMA+0x2a0>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b01      	cmp	r3, #1
 8003446:	d007      	beq.n	8003458 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0201 	orr.w	r2, r2, #1
 8003456:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003466:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2221      	movs	r2, #33	@ 0x21
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2240      	movs	r2, #64	@ 0x40
 8003474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003482:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003488:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4a6c      	ldr	r2, [pc, #432]	@ (8003648 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8003498:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800349a:	897a      	ldrh	r2, [r7, #10]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80034a0:	893a      	ldrh	r2, [r7, #8]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80034a6:	88fa      	ldrh	r2, [r7, #6]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 80a9 	beq.w	800360e <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d02a      	beq.n	800351a <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034c8:	4a60      	ldr	r2, [pc, #384]	@ (800364c <HAL_I2C_Mem_Write_DMA+0x2b4>)
 80034ca:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034d0:	4a5f      	ldr	r2, [pc, #380]	@ (8003650 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 80034d2:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034d8:	2200      	movs	r2, #0
 80034da:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034e0:	2200      	movs	r2, #0
 80034e2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034e8:	2200      	movs	r2, #0
 80034ea:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034f0:	2200      	movs	r2, #0
 80034f2:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fc:	4619      	mov	r1, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	3310      	adds	r3, #16
 8003504:	461a      	mov	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800350a:	f7ff f85b 	bl	80025c4 <HAL_DMA_Start_IT>
 800350e:	4603      	mov	r3, r0
 8003510:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003512:	7efb      	ldrb	r3, [r7, #27]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d166      	bne.n	80035e6 <HAL_I2C_Mem_Write_DMA+0x24e>
 8003518:	e013      	b.n	8003542 <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2220      	movs	r2, #32
 800351e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e07a      	b.n	8003638 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003542:	88f8      	ldrh	r0, [r7, #6]
 8003544:	893a      	ldrh	r2, [r7, #8]
 8003546:	8979      	ldrh	r1, [r7, #10]
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	9301      	str	r3, [sp, #4]
 800354c:	2323      	movs	r3, #35	@ 0x23
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	4603      	mov	r3, r0
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 f928 	bl	80037a8 <I2C_RequestMemoryWrite>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d022      	beq.n	80035a4 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff f886 	bl	8002674 <HAL_DMA_Abort_IT>
 8003568:	4603      	mov	r3, r0
 800356a:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003570:	2200      	movs	r2, #0
 8003572:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003582:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0201 	bic.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e049      	b.n	8003638 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a4:	2300      	movs	r3, #0
 80035a6:	613b      	str	r3, [r7, #16]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	613b      	str	r3, [r7, #16]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035d0:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035e0:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 80035e2:	2300      	movs	r3, #0
 80035e4:	e028      	b.n	8003638 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fa:	f043 0210 	orr.w	r2, r3, #16
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e014      	b.n	8003638 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2220      	movs	r2, #32
 8003612:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003622:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e000      	b.n	8003638 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 8003636:	2302      	movs	r3, #2
  }
}
 8003638:	4618      	mov	r0, r3
 800363a:	3720      	adds	r7, #32
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	20000004 	.word	0x20000004
 8003644:	14f8b589 	.word	0x14f8b589
 8003648:	ffff0000 	.word	0xffff0000
 800364c:	080038d5 	.word	0x080038d5
 8003650:	08003a93 	.word	0x08003a93

08003654 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b088      	sub	sp, #32
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	607a      	str	r2, [r7, #4]
 80036ae:	603b      	str	r3, [r7, #0]
 80036b0:	460b      	mov	r3, r1
 80036b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d006      	beq.n	80036ce <I2C_MasterRequestWrite+0x2a>
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d003      	beq.n	80036ce <I2C_MasterRequestWrite+0x2a>
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80036cc:	d108      	bne.n	80036e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	e00b      	b.n	80036f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e4:	2b12      	cmp	r3, #18
 80036e6:	d107      	bne.n	80036f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 fa01 	bl	8003b0c <I2C_WaitOnFlagUntilTimeout>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00d      	beq.n	800372c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800371a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800371e:	d103      	bne.n	8003728 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003726:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e035      	b.n	8003798 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003734:	d108      	bne.n	8003748 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003736:	897b      	ldrh	r3, [r7, #10]
 8003738:	b2db      	uxtb	r3, r3
 800373a:	461a      	mov	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003744:	611a      	str	r2, [r3, #16]
 8003746:	e01b      	b.n	8003780 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003748:	897b      	ldrh	r3, [r7, #10]
 800374a:	11db      	asrs	r3, r3, #7
 800374c:	b2db      	uxtb	r3, r3
 800374e:	f003 0306 	and.w	r3, r3, #6
 8003752:	b2db      	uxtb	r3, r3
 8003754:	f063 030f 	orn	r3, r3, #15
 8003758:	b2da      	uxtb	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	490e      	ldr	r1, [pc, #56]	@ (80037a0 <I2C_MasterRequestWrite+0xfc>)
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 fa4a 	bl	8003c00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e010      	b.n	8003798 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003776:	897b      	ldrh	r3, [r7, #10]
 8003778:	b2da      	uxtb	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	4907      	ldr	r1, [pc, #28]	@ (80037a4 <I2C_MasterRequestWrite+0x100>)
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 fa3a 	bl	8003c00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e000      	b.n	8003798 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	00010008 	.word	0x00010008
 80037a4:	00010002 	.word	0x00010002

080037a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b088      	sub	sp, #32
 80037ac:	af02      	add	r7, sp, #8
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	4608      	mov	r0, r1
 80037b2:	4611      	mov	r1, r2
 80037b4:	461a      	mov	r2, r3
 80037b6:	4603      	mov	r3, r0
 80037b8:	817b      	strh	r3, [r7, #10]
 80037ba:	460b      	mov	r3, r1
 80037bc:	813b      	strh	r3, [r7, #8]
 80037be:	4613      	mov	r3, r2
 80037c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	2200      	movs	r2, #0
 80037da:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 f994 	bl	8003b0c <I2C_WaitOnFlagUntilTimeout>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00d      	beq.n	8003806 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037f8:	d103      	bne.n	8003802 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003800:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e05f      	b.n	80038c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003806:	897b      	ldrh	r3, [r7, #10]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	461a      	mov	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003814:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003818:	6a3a      	ldr	r2, [r7, #32]
 800381a:	492d      	ldr	r1, [pc, #180]	@ (80038d0 <I2C_RequestMemoryWrite+0x128>)
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 f9ef 	bl	8003c00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e04c      	b.n	80038c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	617b      	str	r3, [r7, #20]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003844:	6a39      	ldr	r1, [r7, #32]
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 fa7a 	bl	8003d40 <I2C_WaitOnTXEFlagUntilTimeout>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00d      	beq.n	800386e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003856:	2b04      	cmp	r3, #4
 8003858:	d107      	bne.n	800386a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003868:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e02b      	b.n	80038c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800386e:	88fb      	ldrh	r3, [r7, #6]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d105      	bne.n	8003880 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003874:	893b      	ldrh	r3, [r7, #8]
 8003876:	b2da      	uxtb	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	611a      	str	r2, [r3, #16]
 800387e:	e021      	b.n	80038c4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003880:	893b      	ldrh	r3, [r7, #8]
 8003882:	0a1b      	lsrs	r3, r3, #8
 8003884:	b29b      	uxth	r3, r3
 8003886:	b2da      	uxtb	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800388e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003890:	6a39      	ldr	r1, [r7, #32]
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 fa54 	bl	8003d40 <I2C_WaitOnTXEFlagUntilTimeout>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00d      	beq.n	80038ba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d107      	bne.n	80038b6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e005      	b.n	80038c6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038ba:	893b      	ldrh	r3, [r7, #8]
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3718      	adds	r7, #24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	00010002 	.word	0x00010002

080038d4 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038e8:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038f0:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003906:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003914:	2200      	movs	r2, #0
 8003916:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003924:	2200      	movs	r2, #0
 8003926:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8003928:	7cfb      	ldrb	r3, [r7, #19]
 800392a:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800392e:	2b21      	cmp	r3, #33	@ 0x21
 8003930:	d007      	beq.n	8003942 <I2C_DMAXferCplt+0x6e>
 8003932:	7cfb      	ldrb	r3, [r7, #19]
 8003934:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8003938:	2b22      	cmp	r3, #34	@ 0x22
 800393a:	d131      	bne.n	80039a0 <I2C_DMAXferCplt+0xcc>
 800393c:	7cbb      	ldrb	r3, [r7, #18]
 800393e:	2b20      	cmp	r3, #32
 8003940:	d12e      	bne.n	80039a0 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003950:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2200      	movs	r2, #0
 8003956:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003958:	7cfb      	ldrb	r3, [r7, #19]
 800395a:	2b29      	cmp	r3, #41	@ 0x29
 800395c:	d10a      	bne.n	8003974 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	2221      	movs	r2, #33	@ 0x21
 8003962:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	2228      	movs	r2, #40	@ 0x28
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800396c:	6978      	ldr	r0, [r7, #20]
 800396e:	f7ff fe7b 	bl	8003668 <HAL_I2C_SlaveTxCpltCallback>
 8003972:	e00c      	b.n	800398e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003974:	7cfb      	ldrb	r3, [r7, #19]
 8003976:	2b2a      	cmp	r3, #42	@ 0x2a
 8003978:	d109      	bne.n	800398e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2222      	movs	r2, #34	@ 0x22
 800397e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	2228      	movs	r2, #40	@ 0x28
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003988:	6978      	ldr	r0, [r7, #20]
 800398a:	f7ff fe77 	bl	800367c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800399c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800399e:	e074      	b.n	8003a8a <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d06e      	beq.n	8003a8a <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d107      	bne.n	80039c6 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039c4:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80039d4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80039dc:	d009      	beq.n	80039f2 <I2C_DMAXferCplt+0x11e>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d006      	beq.n	80039f2 <I2C_DMAXferCplt+0x11e>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80039ea:	d002      	beq.n	80039f2 <I2C_DMAXferCplt+0x11e>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2b20      	cmp	r3, #32
 80039f0:	d107      	bne.n	8003a02 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a00:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a10:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a20:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2200      	movs	r2, #0
 8003a26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8003a30:	6978      	ldr	r0, [r7, #20]
 8003a32:	f7ff fe2d 	bl	8003690 <HAL_I2C_ErrorCallback>
}
 8003a36:	e028      	b.n	8003a8a <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b40      	cmp	r3, #64	@ 0x40
 8003a4a:	d10a      	bne.n	8003a62 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	2200      	movs	r2, #0
 8003a58:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003a5a:	6978      	ldr	r0, [r7, #20]
 8003a5c:	f7fd f864 	bl	8000b28 <HAL_I2C_MemRxCpltCallback>
}
 8003a60:	e013      	b.n	8003a8a <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d002      	beq.n	8003a76 <I2C_DMAXferCplt+0x1a2>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b20      	cmp	r3, #32
 8003a74:	d103      	bne.n	8003a7e <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a7c:	e002      	b.n	8003a84 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	2212      	movs	r2, #18
 8003a82:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003a84:	6978      	ldr	r0, [r7, #20]
 8003a86:	f7ff fde5 	bl	8003654 <HAL_I2C_MasterRxCpltCallback>
}
 8003a8a:	bf00      	nop
 8003a8c:	3718      	adds	r7, #24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b084      	sub	sp, #16
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aac:	2200      	movs	r2, #0
 8003aae:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003abc:	2200      	movs	r2, #0
 8003abe:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f7fe ff83 	bl	80029cc <HAL_DMA_GetError>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d01b      	beq.n	8003b04 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ada:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af6:	f043 0210 	orr.w	r2, r3, #16
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f7ff fdc6 	bl	8003690 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b04:	bf00      	nop
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	603b      	str	r3, [r7, #0]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b1c:	e048      	b.n	8003bb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b24:	d044      	beq.n	8003bb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b26:	f7fd ffbd 	bl	8001aa4 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d302      	bcc.n	8003b3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d139      	bne.n	8003bb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	0c1b      	lsrs	r3, r3, #16
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d10d      	bne.n	8003b62 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	43da      	mvns	r2, r3
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	4013      	ands	r3, r2
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	bf0c      	ite	eq
 8003b58:	2301      	moveq	r3, #1
 8003b5a:	2300      	movne	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	461a      	mov	r2, r3
 8003b60:	e00c      	b.n	8003b7c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	43da      	mvns	r2, r3
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	bf0c      	ite	eq
 8003b74:	2301      	moveq	r3, #1
 8003b76:	2300      	movne	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	79fb      	ldrb	r3, [r7, #7]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d116      	bne.n	8003bb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9c:	f043 0220 	orr.w	r2, r3, #32
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e023      	b.n	8003bf8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	0c1b      	lsrs	r3, r3, #16
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d10d      	bne.n	8003bd6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	43da      	mvns	r2, r3
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	bf0c      	ite	eq
 8003bcc:	2301      	moveq	r3, #1
 8003bce:	2300      	movne	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	e00c      	b.n	8003bf0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	43da      	mvns	r2, r3
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	4013      	ands	r3, r2
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	bf0c      	ite	eq
 8003be8:	2301      	moveq	r3, #1
 8003bea:	2300      	movne	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	461a      	mov	r2, r3
 8003bf0:	79fb      	ldrb	r3, [r7, #7]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d093      	beq.n	8003b1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
 8003c0c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c0e:	e071      	b.n	8003cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c1e:	d123      	bne.n	8003c68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c2e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2220      	movs	r2, #32
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c54:	f043 0204 	orr.w	r2, r3, #4
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e067      	b.n	8003d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6e:	d041      	beq.n	8003cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c70:	f7fd ff18 	bl	8001aa4 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d302      	bcc.n	8003c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d136      	bne.n	8003cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	0c1b      	lsrs	r3, r3, #16
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d10c      	bne.n	8003caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	43da      	mvns	r2, r3
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	bf14      	ite	ne
 8003ca2:	2301      	movne	r3, #1
 8003ca4:	2300      	moveq	r3, #0
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	e00b      	b.n	8003cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	43da      	mvns	r2, r3
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	bf14      	ite	ne
 8003cbc:	2301      	movne	r3, #1
 8003cbe:	2300      	moveq	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d016      	beq.n	8003cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce0:	f043 0220 	orr.w	r2, r3, #32
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e021      	b.n	8003d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	0c1b      	lsrs	r3, r3, #16
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d10c      	bne.n	8003d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	43da      	mvns	r2, r3
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	bf14      	ite	ne
 8003d10:	2301      	movne	r3, #1
 8003d12:	2300      	moveq	r3, #0
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	e00b      	b.n	8003d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	43da      	mvns	r2, r3
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	4013      	ands	r3, r2
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	bf14      	ite	ne
 8003d2a:	2301      	movne	r3, #1
 8003d2c:	2300      	moveq	r3, #0
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f47f af6d 	bne.w	8003c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d4c:	e034      	b.n	8003db8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 f886 	bl	8003e60 <I2C_IsAcknowledgeFailed>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e034      	b.n	8003dc8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d64:	d028      	beq.n	8003db8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d66:	f7fd fe9d 	bl	8001aa4 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d302      	bcc.n	8003d7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d11d      	bne.n	8003db8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d86:	2b80      	cmp	r3, #128	@ 0x80
 8003d88:	d016      	beq.n	8003db8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da4:	f043 0220 	orr.w	r2, r3, #32
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e007      	b.n	8003dc8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dc2:	2b80      	cmp	r3, #128	@ 0x80
 8003dc4:	d1c3      	bne.n	8003d4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ddc:	e034      	b.n	8003e48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f000 f83e 	bl	8003e60 <I2C_IsAcknowledgeFailed>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e034      	b.n	8003e58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df4:	d028      	beq.n	8003e48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003df6:	f7fd fe55 	bl	8001aa4 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d302      	bcc.n	8003e0c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d11d      	bne.n	8003e48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	f003 0304 	and.w	r3, r3, #4
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d016      	beq.n	8003e48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e34:	f043 0220 	orr.w	r2, r3, #32
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e007      	b.n	8003e58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	f003 0304 	and.w	r3, r3, #4
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d1c3      	bne.n	8003dde <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e76:	d11b      	bne.n	8003eb0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9c:	f043 0204 	orr.w	r2, r3, #4
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e000      	b.n	8003eb2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b086      	sub	sp, #24
 8003ec2:	af02      	add	r7, sp, #8
 8003ec4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e101      	b.n	80040d4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d106      	bne.n	8003ef0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f006 fbe2 	bl	800a6b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2203      	movs	r2, #3
 8003ef4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003efe:	d102      	bne.n	8003f06 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f002 ff37 	bl	8006d7e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6818      	ldr	r0, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	7c1a      	ldrb	r2, [r3, #16]
 8003f18:	f88d 2000 	strb.w	r2, [sp]
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f20:	f002 fe16 	bl	8006b50 <USB_CoreInit>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d005      	beq.n	8003f36 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2202      	movs	r2, #2
 8003f2e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e0ce      	b.n	80040d4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f002 ff2f 	bl	8006da0 <USB_SetCurrentMode>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d005      	beq.n	8003f54 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e0bf      	b.n	80040d4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f54:	2300      	movs	r3, #0
 8003f56:	73fb      	strb	r3, [r7, #15]
 8003f58:	e04a      	b.n	8003ff0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f5a:	7bfa      	ldrb	r2, [r7, #15]
 8003f5c:	6879      	ldr	r1, [r7, #4]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	4413      	add	r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	440b      	add	r3, r1
 8003f68:	3315      	adds	r3, #21
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f6e:	7bfa      	ldrb	r2, [r7, #15]
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	4613      	mov	r3, r2
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	4413      	add	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	3314      	adds	r3, #20
 8003f7e:	7bfa      	ldrb	r2, [r7, #15]
 8003f80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f82:	7bfa      	ldrb	r2, [r7, #15]
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	b298      	uxth	r0, r3
 8003f88:	6879      	ldr	r1, [r7, #4]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	4413      	add	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	440b      	add	r3, r1
 8003f94:	332e      	adds	r3, #46	@ 0x2e
 8003f96:	4602      	mov	r2, r0
 8003f98:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f9a:	7bfa      	ldrb	r2, [r7, #15]
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	4413      	add	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	440b      	add	r3, r1
 8003fa8:	3318      	adds	r3, #24
 8003faa:	2200      	movs	r2, #0
 8003fac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003fae:	7bfa      	ldrb	r2, [r7, #15]
 8003fb0:	6879      	ldr	r1, [r7, #4]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	4413      	add	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	440b      	add	r3, r1
 8003fbc:	331c      	adds	r3, #28
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003fc2:	7bfa      	ldrb	r2, [r7, #15]
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	4413      	add	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	440b      	add	r3, r1
 8003fd0:	3320      	adds	r3, #32
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003fd6:	7bfa      	ldrb	r2, [r7, #15]
 8003fd8:	6879      	ldr	r1, [r7, #4]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	4413      	add	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	440b      	add	r3, r1
 8003fe4:	3324      	adds	r3, #36	@ 0x24
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
 8003fec:	3301      	adds	r3, #1
 8003fee:	73fb      	strb	r3, [r7, #15]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	791b      	ldrb	r3, [r3, #4]
 8003ff4:	7bfa      	ldrb	r2, [r7, #15]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d3af      	bcc.n	8003f5a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	73fb      	strb	r3, [r7, #15]
 8003ffe:	e044      	b.n	800408a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004000:	7bfa      	ldrb	r2, [r7, #15]
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	4613      	mov	r3, r2
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	4413      	add	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004012:	2200      	movs	r2, #0
 8004014:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004016:	7bfa      	ldrb	r2, [r7, #15]
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	4613      	mov	r3, r2
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	4413      	add	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	440b      	add	r3, r1
 8004024:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004028:	7bfa      	ldrb	r2, [r7, #15]
 800402a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800402c:	7bfa      	ldrb	r2, [r7, #15]
 800402e:	6879      	ldr	r1, [r7, #4]
 8004030:	4613      	mov	r3, r2
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	4413      	add	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	440b      	add	r3, r1
 800403a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800403e:	2200      	movs	r2, #0
 8004040:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004042:	7bfa      	ldrb	r2, [r7, #15]
 8004044:	6879      	ldr	r1, [r7, #4]
 8004046:	4613      	mov	r3, r2
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	4413      	add	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	440b      	add	r3, r1
 8004050:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004058:	7bfa      	ldrb	r2, [r7, #15]
 800405a:	6879      	ldr	r1, [r7, #4]
 800405c:	4613      	mov	r3, r2
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	4413      	add	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	440b      	add	r3, r1
 8004066:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800406a:	2200      	movs	r2, #0
 800406c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800406e:	7bfa      	ldrb	r2, [r7, #15]
 8004070:	6879      	ldr	r1, [r7, #4]
 8004072:	4613      	mov	r3, r2
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	4413      	add	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	440b      	add	r3, r1
 800407c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004084:	7bfb      	ldrb	r3, [r7, #15]
 8004086:	3301      	adds	r3, #1
 8004088:	73fb      	strb	r3, [r7, #15]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	791b      	ldrb	r3, [r3, #4]
 800408e:	7bfa      	ldrb	r2, [r7, #15]
 8004090:	429a      	cmp	r2, r3
 8004092:	d3b5      	bcc.n	8004000 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6818      	ldr	r0, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	7c1a      	ldrb	r2, [r3, #16]
 800409c:	f88d 2000 	strb.w	r2, [sp]
 80040a0:	3304      	adds	r3, #4
 80040a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040a4:	f002 fec8 	bl	8006e38 <USB_DevInit>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d005      	beq.n	80040ba <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2202      	movs	r2, #2
 80040b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e00c      	b.n	80040d4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f003 ff12 	bl	8007ef6 <USB_DevDisconnect>

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d101      	bne.n	80040f8 <HAL_PCD_Start+0x1c>
 80040f4:	2302      	movs	r3, #2
 80040f6:	e022      	b.n	800413e <HAL_PCD_Start+0x62>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004108:	2b00      	cmp	r3, #0
 800410a:	d009      	beq.n	8004120 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004110:	2b01      	cmp	r3, #1
 8004112:	d105      	bne.n	8004120 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004118:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f002 fe19 	bl	8006d5c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f003 fec0 	bl	8007eb4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004146:	b590      	push	{r4, r7, lr}
 8004148:	b08d      	sub	sp, #52	@ 0x34
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004154:	6a3b      	ldr	r3, [r7, #32]
 8004156:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4618      	mov	r0, r3
 800415e:	f003 ff7e 	bl	800805e <USB_GetMode>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	f040 848c 	bne.w	8004a82 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4618      	mov	r0, r3
 8004170:	f003 fee2 	bl	8007f38 <USB_ReadInterrupts>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	f000 8482 	beq.w	8004a80 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	0a1b      	lsrs	r3, r3, #8
 8004186:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4618      	mov	r0, r3
 8004196:	f003 fecf 	bl	8007f38 <USB_ReadInterrupts>
 800419a:	4603      	mov	r3, r0
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d107      	bne.n	80041b4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695a      	ldr	r2, [r3, #20]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f002 0202 	and.w	r2, r2, #2
 80041b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f003 febd 	bl	8007f38 <USB_ReadInterrupts>
 80041be:	4603      	mov	r3, r0
 80041c0:	f003 0310 	and.w	r3, r3, #16
 80041c4:	2b10      	cmp	r3, #16
 80041c6:	d161      	bne.n	800428c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	699a      	ldr	r2, [r3, #24]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 0210 	bic.w	r2, r2, #16
 80041d6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	f003 020f 	and.w	r2, r3, #15
 80041e4:	4613      	mov	r3, r2
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	4413      	add	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	4413      	add	r3, r2
 80041f4:	3304      	adds	r3, #4
 80041f6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80041fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004202:	d124      	bne.n	800424e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800420a:	4013      	ands	r3, r2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d035      	beq.n	800427c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	091b      	lsrs	r3, r3, #4
 8004218:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800421a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800421e:	b29b      	uxth	r3, r3
 8004220:	461a      	mov	r2, r3
 8004222:	6a38      	ldr	r0, [r7, #32]
 8004224:	f003 fcf4 	bl	8007c10 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	68da      	ldr	r2, [r3, #12]
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	091b      	lsrs	r3, r3, #4
 8004230:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004234:	441a      	add	r2, r3
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	695a      	ldr	r2, [r3, #20]
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	091b      	lsrs	r3, r3, #4
 8004242:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004246:	441a      	add	r2, r3
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	615a      	str	r2, [r3, #20]
 800424c:	e016      	b.n	800427c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004254:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004258:	d110      	bne.n	800427c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004260:	2208      	movs	r2, #8
 8004262:	4619      	mov	r1, r3
 8004264:	6a38      	ldr	r0, [r7, #32]
 8004266:	f003 fcd3 	bl	8007c10 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	695a      	ldr	r2, [r3, #20]
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	091b      	lsrs	r3, r3, #4
 8004272:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004276:	441a      	add	r2, r3
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699a      	ldr	r2, [r3, #24]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0210 	orr.w	r2, r2, #16
 800428a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4618      	mov	r0, r3
 8004292:	f003 fe51 	bl	8007f38 <USB_ReadInterrupts>
 8004296:	4603      	mov	r3, r0
 8004298:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800429c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80042a0:	f040 80a7 	bne.w	80043f2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f003 fe56 	bl	8007f5e <USB_ReadDevAllOutEpInterrupt>
 80042b2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80042b4:	e099      	b.n	80043ea <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80042b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 808e 	beq.w	80043de <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042c8:	b2d2      	uxtb	r2, r2
 80042ca:	4611      	mov	r1, r2
 80042cc:	4618      	mov	r0, r3
 80042ce:	f003 fe7a 	bl	8007fc6 <USB_ReadDevOutEPInterrupt>
 80042d2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00c      	beq.n	80042f8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80042de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042ea:	461a      	mov	r2, r3
 80042ec:	2301      	movs	r3, #1
 80042ee:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80042f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fea4 	bl	8005040 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00c      	beq.n	800431c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	4413      	add	r3, r2
 800430a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800430e:	461a      	mov	r2, r3
 8004310:	2308      	movs	r3, #8
 8004312:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004314:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 ff7a 	bl	8005210 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	f003 0310 	and.w	r3, r3, #16
 8004322:	2b00      	cmp	r3, #0
 8004324:	d008      	beq.n	8004338 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004332:	461a      	mov	r2, r3
 8004334:	2310      	movs	r3, #16
 8004336:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d030      	beq.n	80043a4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800434a:	2b80      	cmp	r3, #128	@ 0x80
 800434c:	d109      	bne.n	8004362 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	69fa      	ldr	r2, [r7, #28]
 8004358:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800435c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004360:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004362:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004364:	4613      	mov	r3, r2
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	4413      	add	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	4413      	add	r3, r2
 8004374:	3304      	adds	r3, #4
 8004376:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	78db      	ldrb	r3, [r3, #3]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d108      	bne.n	8004392 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	2200      	movs	r2, #0
 8004384:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004388:	b2db      	uxtb	r3, r3
 800438a:	4619      	mov	r1, r3
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f006 fa8d 	bl	800a8ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	4413      	add	r3, r2
 800439a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800439e:	461a      	mov	r2, r3
 80043a0:	2302      	movs	r3, #2
 80043a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	f003 0320 	and.w	r3, r3, #32
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d008      	beq.n	80043c0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b0:	015a      	lsls	r2, r3, #5
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	4413      	add	r3, r2
 80043b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ba:	461a      	mov	r2, r3
 80043bc:	2320      	movs	r3, #32
 80043be:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d009      	beq.n	80043de <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80043ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043cc:	015a      	lsls	r2, r3, #5
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	4413      	add	r3, r2
 80043d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043d6:	461a      	mov	r2, r3
 80043d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80043dc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80043de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e0:	3301      	adds	r3, #1
 80043e2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80043e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e6:	085b      	lsrs	r3, r3, #1
 80043e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80043ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f47f af62 	bne.w	80042b6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f003 fd9e 	bl	8007f38 <USB_ReadInterrupts>
 80043fc:	4603      	mov	r3, r0
 80043fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004402:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004406:	f040 80db 	bne.w	80045c0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f003 fdbf 	bl	8007f92 <USB_ReadDevAllInEpInterrupt>
 8004414:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004416:	2300      	movs	r3, #0
 8004418:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800441a:	e0cd      	b.n	80045b8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800441c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 80c2 	beq.w	80045ac <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	4611      	mov	r1, r2
 8004432:	4618      	mov	r0, r3
 8004434:	f003 fde5 	bl	8008002 <USB_ReadDevInEPInterrupt>
 8004438:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	d057      	beq.n	80044f4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004446:	f003 030f 	and.w	r3, r3, #15
 800444a:	2201      	movs	r2, #1
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004458:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	43db      	mvns	r3, r3
 800445e:	69f9      	ldr	r1, [r7, #28]
 8004460:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004464:	4013      	ands	r3, r2
 8004466:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	4413      	add	r3, r2
 8004470:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004474:	461a      	mov	r2, r3
 8004476:	2301      	movs	r3, #1
 8004478:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	799b      	ldrb	r3, [r3, #6]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d132      	bne.n	80044e8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004482:	6879      	ldr	r1, [r7, #4]
 8004484:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004486:	4613      	mov	r3, r2
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	4413      	add	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	440b      	add	r3, r1
 8004490:	3320      	adds	r3, #32
 8004492:	6819      	ldr	r1, [r3, #0]
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004498:	4613      	mov	r3, r2
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	4413      	add	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4403      	add	r3, r0
 80044a2:	331c      	adds	r3, #28
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4419      	add	r1, r3
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044ac:	4613      	mov	r3, r2
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	4413      	add	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4403      	add	r3, r0
 80044b6:	3320      	adds	r3, #32
 80044b8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80044ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d113      	bne.n	80044e8 <HAL_PCD_IRQHandler+0x3a2>
 80044c0:	6879      	ldr	r1, [r7, #4]
 80044c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044c4:	4613      	mov	r3, r2
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	4413      	add	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	440b      	add	r3, r1
 80044ce:	3324      	adds	r3, #36	@ 0x24
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d108      	bne.n	80044e8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6818      	ldr	r0, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80044e0:	461a      	mov	r2, r3
 80044e2:	2101      	movs	r1, #1
 80044e4:	f003 fdec 	bl	80080c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80044e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	4619      	mov	r1, r3
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f006 f961 	bl	800a7b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d008      	beq.n	8004510 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80044fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004500:	015a      	lsls	r2, r3, #5
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	4413      	add	r3, r2
 8004506:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800450a:	461a      	mov	r2, r3
 800450c:	2308      	movs	r3, #8
 800450e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f003 0310 	and.w	r3, r3, #16
 8004516:	2b00      	cmp	r3, #0
 8004518:	d008      	beq.n	800452c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800451a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451c:	015a      	lsls	r2, r3, #5
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	4413      	add	r3, r2
 8004522:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004526:	461a      	mov	r2, r3
 8004528:	2310      	movs	r3, #16
 800452a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004532:	2b00      	cmp	r3, #0
 8004534:	d008      	beq.n	8004548 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004542:	461a      	mov	r2, r3
 8004544:	2340      	movs	r3, #64	@ 0x40
 8004546:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d023      	beq.n	800459a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004552:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004554:	6a38      	ldr	r0, [r7, #32]
 8004556:	f002 fdd3 	bl	8007100 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800455a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800455c:	4613      	mov	r3, r2
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	4413      	add	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	3310      	adds	r3, #16
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	4413      	add	r3, r2
 800456a:	3304      	adds	r3, #4
 800456c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	78db      	ldrb	r3, [r3, #3]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d108      	bne.n	8004588 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2200      	movs	r2, #0
 800457a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800457c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457e:	b2db      	uxtb	r3, r3
 8004580:	4619      	mov	r1, r3
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f006 f9a4 	bl	800a8d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458a:	015a      	lsls	r2, r3, #5
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	4413      	add	r3, r2
 8004590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004594:	461a      	mov	r2, r3
 8004596:	2302      	movs	r3, #2
 8004598:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d003      	beq.n	80045ac <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80045a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 fcbd 	bl	8004f26 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80045ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ae:	3301      	adds	r3, #1
 80045b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80045b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b4:	085b      	lsrs	r3, r3, #1
 80045b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80045b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f47f af2e 	bne.w	800441c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f003 fcb7 	bl	8007f38 <USB_ReadInterrupts>
 80045ca:	4603      	mov	r3, r0
 80045cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045d4:	d122      	bne.n	800461c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	69fa      	ldr	r2, [r7, #28]
 80045e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045e4:	f023 0301 	bic.w	r3, r3, #1
 80045e8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d108      	bne.n	8004606 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80045fc:	2100      	movs	r1, #0
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 fea4 	bl	800534c <HAL_PCDEx_LPM_Callback>
 8004604:	e002      	b.n	800460c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f006 f942 	bl	800a890 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695a      	ldr	r2, [r3, #20]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800461a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f003 fc89 	bl	8007f38 <USB_ReadInterrupts>
 8004626:	4603      	mov	r3, r0
 8004628:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800462c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004630:	d112      	bne.n	8004658 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b01      	cmp	r3, #1
 8004640:	d102      	bne.n	8004648 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f006 f8fe 	bl	800a844 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695a      	ldr	r2, [r3, #20]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004656:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4618      	mov	r0, r3
 800465e:	f003 fc6b 	bl	8007f38 <USB_ReadInterrupts>
 8004662:	4603      	mov	r3, r0
 8004664:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004668:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800466c:	f040 80b7 	bne.w	80047de <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	69fa      	ldr	r2, [r7, #28]
 800467a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800467e:	f023 0301 	bic.w	r3, r3, #1
 8004682:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2110      	movs	r1, #16
 800468a:	4618      	mov	r0, r3
 800468c:	f002 fd38 	bl	8007100 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004690:	2300      	movs	r3, #0
 8004692:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004694:	e046      	b.n	8004724 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	4413      	add	r3, r2
 800469e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046a2:	461a      	mov	r2, r3
 80046a4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80046a8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80046aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ac:	015a      	lsls	r2, r3, #5
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046ba:	0151      	lsls	r1, r2, #5
 80046bc:	69fa      	ldr	r2, [r7, #28]
 80046be:	440a      	add	r2, r1
 80046c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046c4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80046c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80046ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046cc:	015a      	lsls	r2, r3, #5
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	4413      	add	r3, r2
 80046d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046d6:	461a      	mov	r2, r3
 80046d8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80046dc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80046de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046ee:	0151      	lsls	r1, r2, #5
 80046f0:	69fa      	ldr	r2, [r7, #28]
 80046f2:	440a      	add	r2, r1
 80046f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046f8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80046fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80046fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	4413      	add	r3, r2
 8004706:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800470e:	0151      	lsls	r1, r2, #5
 8004710:	69fa      	ldr	r2, [r7, #28]
 8004712:	440a      	add	r2, r1
 8004714:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004718:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800471c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800471e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004720:	3301      	adds	r3, #1
 8004722:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	791b      	ldrb	r3, [r3, #4]
 8004728:	461a      	mov	r2, r3
 800472a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800472c:	4293      	cmp	r3, r2
 800472e:	d3b2      	bcc.n	8004696 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	69fa      	ldr	r2, [r7, #28]
 800473a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800473e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004742:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	7bdb      	ldrb	r3, [r3, #15]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d016      	beq.n	800477a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004752:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004756:	69fa      	ldr	r2, [r7, #28]
 8004758:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800475c:	f043 030b 	orr.w	r3, r3, #11
 8004760:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800476a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800476c:	69fa      	ldr	r2, [r7, #28]
 800476e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004772:	f043 030b 	orr.w	r3, r3, #11
 8004776:	6453      	str	r3, [r2, #68]	@ 0x44
 8004778:	e015      	b.n	80047a6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	69fa      	ldr	r2, [r7, #28]
 8004784:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004788:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800478c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004790:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	69fa      	ldr	r2, [r7, #28]
 800479c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047a0:	f043 030b 	orr.w	r3, r3, #11
 80047a4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	69fa      	ldr	r2, [r7, #28]
 80047b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047b4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80047b8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6818      	ldr	r0, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80047c8:	461a      	mov	r2, r3
 80047ca:	f003 fc79 	bl	80080c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	695a      	ldr	r2, [r3, #20]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80047dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f003 fba8 	bl	8007f38 <USB_ReadInterrupts>
 80047e8:	4603      	mov	r3, r0
 80047ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047f2:	d123      	bne.n	800483c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f003 fc3e 	bl	800807a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f002 fcf5 	bl	80071f2 <USB_GetDevSpeed>
 8004808:	4603      	mov	r3, r0
 800480a:	461a      	mov	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681c      	ldr	r4, [r3, #0]
 8004814:	f001 f9ca 	bl	8005bac <HAL_RCC_GetHCLKFreq>
 8004818:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800481e:	461a      	mov	r2, r3
 8004820:	4620      	mov	r0, r4
 8004822:	f002 f9f9 	bl	8006c18 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f005 ffed 	bl	800a806 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	695a      	ldr	r2, [r3, #20]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800483a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4618      	mov	r0, r3
 8004842:	f003 fb79 	bl	8007f38 <USB_ReadInterrupts>
 8004846:	4603      	mov	r3, r0
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b08      	cmp	r3, #8
 800484e:	d10a      	bne.n	8004866 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f005 ffca 	bl	800a7ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	695a      	ldr	r2, [r3, #20]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f002 0208 	and.w	r2, r2, #8
 8004864:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4618      	mov	r0, r3
 800486c:	f003 fb64 	bl	8007f38 <USB_ReadInterrupts>
 8004870:	4603      	mov	r3, r0
 8004872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004876:	2b80      	cmp	r3, #128	@ 0x80
 8004878:	d123      	bne.n	80048c2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004886:	2301      	movs	r3, #1
 8004888:	627b      	str	r3, [r7, #36]	@ 0x24
 800488a:	e014      	b.n	80048b6 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800488c:	6879      	ldr	r1, [r7, #4]
 800488e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004890:	4613      	mov	r3, r2
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	4413      	add	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	440b      	add	r3, r1
 800489a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d105      	bne.n	80048b0 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80048a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	4619      	mov	r1, r3
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fb0a 	bl	8004ec4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b2:	3301      	adds	r3, #1
 80048b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	791b      	ldrb	r3, [r3, #4]
 80048ba:	461a      	mov	r2, r3
 80048bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048be:	4293      	cmp	r3, r2
 80048c0:	d3e4      	bcc.n	800488c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f003 fb36 	bl	8007f38 <USB_ReadInterrupts>
 80048cc:	4603      	mov	r3, r0
 80048ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048d6:	d13c      	bne.n	8004952 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048d8:	2301      	movs	r3, #1
 80048da:	627b      	str	r3, [r7, #36]	@ 0x24
 80048dc:	e02b      	b.n	8004936 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80048de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80048ee:	6879      	ldr	r1, [r7, #4]
 80048f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048f2:	4613      	mov	r3, r2
 80048f4:	00db      	lsls	r3, r3, #3
 80048f6:	4413      	add	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	440b      	add	r3, r1
 80048fc:	3318      	adds	r3, #24
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d115      	bne.n	8004930 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004904:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004906:	2b00      	cmp	r3, #0
 8004908:	da12      	bge.n	8004930 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800490a:	6879      	ldr	r1, [r7, #4]
 800490c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800490e:	4613      	mov	r3, r2
 8004910:	00db      	lsls	r3, r3, #3
 8004912:	4413      	add	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	440b      	add	r3, r1
 8004918:	3317      	adds	r3, #23
 800491a:	2201      	movs	r2, #1
 800491c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800491e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004920:	b2db      	uxtb	r3, r3
 8004922:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004926:	b2db      	uxtb	r3, r3
 8004928:	4619      	mov	r1, r3
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 faca 	bl	8004ec4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004932:	3301      	adds	r3, #1
 8004934:	627b      	str	r3, [r7, #36]	@ 0x24
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	791b      	ldrb	r3, [r3, #4]
 800493a:	461a      	mov	r2, r3
 800493c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493e:	4293      	cmp	r3, r2
 8004940:	d3cd      	bcc.n	80048de <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	695a      	ldr	r2, [r3, #20]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004950:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4618      	mov	r0, r3
 8004958:	f003 faee 	bl	8007f38 <USB_ReadInterrupts>
 800495c:	4603      	mov	r3, r0
 800495e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004962:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004966:	d156      	bne.n	8004a16 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004968:	2301      	movs	r3, #1
 800496a:	627b      	str	r3, [r7, #36]	@ 0x24
 800496c:	e045      	b.n	80049fa <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800496e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004970:	015a      	lsls	r2, r3, #5
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	4413      	add	r3, r2
 8004976:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800497e:	6879      	ldr	r1, [r7, #4]
 8004980:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004982:	4613      	mov	r3, r2
 8004984:	00db      	lsls	r3, r3, #3
 8004986:	4413      	add	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	440b      	add	r3, r1
 800498c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d12e      	bne.n	80049f4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004996:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004998:	2b00      	cmp	r3, #0
 800499a:	da2b      	bge.n	80049f4 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	0c1a      	lsrs	r2, r3, #16
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80049a6:	4053      	eors	r3, r2
 80049a8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d121      	bne.n	80049f4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80049b0:	6879      	ldr	r1, [r7, #4]
 80049b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049b4:	4613      	mov	r3, r2
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	4413      	add	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	440b      	add	r3, r1
 80049be:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80049c2:	2201      	movs	r2, #1
 80049c4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80049c6:	6a3b      	ldr	r3, [r7, #32]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80049d2:	6a3b      	ldr	r3, [r7, #32]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10a      	bne.n	80049f4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	69fa      	ldr	r2, [r7, #28]
 80049e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80049f0:	6053      	str	r3, [r2, #4]
            break;
 80049f2:	e008      	b.n	8004a06 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f6:	3301      	adds	r3, #1
 80049f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	791b      	ldrb	r3, [r3, #4]
 80049fe:	461a      	mov	r2, r3
 8004a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d3b3      	bcc.n	800496e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	695a      	ldr	r2, [r3, #20]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004a14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f003 fa8c 	bl	8007f38 <USB_ReadInterrupts>
 8004a20:	4603      	mov	r3, r0
 8004a22:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a2a:	d10a      	bne.n	8004a42 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f005 ff61 	bl	800a8f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	695a      	ldr	r2, [r3, #20]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004a40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f003 fa76 	bl	8007f38 <USB_ReadInterrupts>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	f003 0304 	and.w	r3, r3, #4
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d115      	bne.n	8004a82 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d002      	beq.n	8004a6e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f005 ff51 	bl	800a910 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6859      	ldr	r1, [r3, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	605a      	str	r2, [r3, #4]
 8004a7e:	e000      	b.n	8004a82 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004a80:	bf00      	nop
    }
  }
}
 8004a82:	3734      	adds	r7, #52	@ 0x34
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd90      	pop	{r4, r7, pc}

08004a88 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	460b      	mov	r3, r1
 8004a92:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d101      	bne.n	8004aa2 <HAL_PCD_SetAddress+0x1a>
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	e012      	b.n	8004ac8 <HAL_PCD_SetAddress+0x40>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	78fa      	ldrb	r2, [r7, #3]
 8004aae:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	78fa      	ldrb	r2, [r7, #3]
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f003 f9d5 	bl	8007e68 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	4608      	mov	r0, r1
 8004ada:	4611      	mov	r1, r2
 8004adc:	461a      	mov	r2, r3
 8004ade:	4603      	mov	r3, r0
 8004ae0:	70fb      	strb	r3, [r7, #3]
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	803b      	strh	r3, [r7, #0]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004aea:	2300      	movs	r3, #0
 8004aec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004aee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	da0f      	bge.n	8004b16 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004af6:	78fb      	ldrb	r3, [r7, #3]
 8004af8:	f003 020f 	and.w	r2, r3, #15
 8004afc:	4613      	mov	r3, r2
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	4413      	add	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	3310      	adds	r3, #16
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	4413      	add	r3, r2
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2201      	movs	r2, #1
 8004b12:	705a      	strb	r2, [r3, #1]
 8004b14:	e00f      	b.n	8004b36 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b16:	78fb      	ldrb	r3, [r7, #3]
 8004b18:	f003 020f 	and.w	r2, r3, #15
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	4413      	add	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	3304      	adds	r3, #4
 8004b2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b36:	78fb      	ldrb	r3, [r7, #3]
 8004b38:	f003 030f 	and.w	r3, r3, #15
 8004b3c:	b2da      	uxtb	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004b42:	883b      	ldrh	r3, [r7, #0]
 8004b44:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	78ba      	ldrb	r2, [r7, #2]
 8004b50:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	785b      	ldrb	r3, [r3, #1]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d004      	beq.n	8004b64 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004b64:	78bb      	ldrb	r3, [r7, #2]
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d102      	bne.n	8004b70 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d101      	bne.n	8004b7e <HAL_PCD_EP_Open+0xae>
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	e00e      	b.n	8004b9c <HAL_PCD_EP_Open+0xcc>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68f9      	ldr	r1, [r7, #12]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f002 fb55 	bl	800723c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004b9a:	7afb      	ldrb	r3, [r7, #11]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	460b      	mov	r3, r1
 8004bae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004bb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	da0f      	bge.n	8004bd8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bb8:	78fb      	ldrb	r3, [r7, #3]
 8004bba:	f003 020f 	and.w	r2, r3, #15
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	3310      	adds	r3, #16
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	4413      	add	r3, r2
 8004bcc:	3304      	adds	r3, #4
 8004bce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	705a      	strb	r2, [r3, #1]
 8004bd6:	e00f      	b.n	8004bf8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bd8:	78fb      	ldrb	r3, [r7, #3]
 8004bda:	f003 020f 	and.w	r2, r3, #15
 8004bde:	4613      	mov	r3, r2
 8004be0:	00db      	lsls	r3, r3, #3
 8004be2:	4413      	add	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	4413      	add	r3, r2
 8004bee:	3304      	adds	r3, #4
 8004bf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bf8:	78fb      	ldrb	r3, [r7, #3]
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	b2da      	uxtb	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d101      	bne.n	8004c12 <HAL_PCD_EP_Close+0x6e>
 8004c0e:	2302      	movs	r3, #2
 8004c10:	e00e      	b.n	8004c30 <HAL_PCD_EP_Close+0x8c>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68f9      	ldr	r1, [r7, #12]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f002 fb93 	bl	800734c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	607a      	str	r2, [r7, #4]
 8004c42:	603b      	str	r3, [r7, #0]
 8004c44:	460b      	mov	r3, r1
 8004c46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c48:	7afb      	ldrb	r3, [r7, #11]
 8004c4a:	f003 020f 	and.w	r2, r3, #15
 8004c4e:	4613      	mov	r3, r2
 8004c50:	00db      	lsls	r3, r3, #3
 8004c52:	4413      	add	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	3304      	adds	r3, #4
 8004c60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	2200      	movs	r2, #0
 8004c72:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	2200      	movs	r2, #0
 8004c78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c7a:	7afb      	ldrb	r3, [r7, #11]
 8004c7c:	f003 030f 	and.w	r3, r3, #15
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	799b      	ldrb	r3, [r3, #6]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d102      	bne.n	8004c94 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6818      	ldr	r0, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	799b      	ldrb	r3, [r3, #6]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	6979      	ldr	r1, [r7, #20]
 8004ca0:	f002 fc30 	bl	8007504 <USB_EPStartXfer>

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3718      	adds	r7, #24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004cba:	78fb      	ldrb	r3, [r7, #3]
 8004cbc:	f003 020f 	and.w	r2, r3, #15
 8004cc0:	6879      	ldr	r1, [r7, #4]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	00db      	lsls	r3, r3, #3
 8004cc6:	4413      	add	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	440b      	add	r3, r1
 8004ccc:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004cd0:	681b      	ldr	r3, [r3, #0]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b086      	sub	sp, #24
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	60f8      	str	r0, [r7, #12]
 8004ce6:	607a      	str	r2, [r7, #4]
 8004ce8:	603b      	str	r3, [r7, #0]
 8004cea:	460b      	mov	r3, r1
 8004cec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cee:	7afb      	ldrb	r3, [r7, #11]
 8004cf0:	f003 020f 	and.w	r2, r3, #15
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	4413      	add	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	3310      	adds	r3, #16
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	4413      	add	r3, r2
 8004d02:	3304      	adds	r3, #4
 8004d04:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	2200      	movs	r2, #0
 8004d16:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d1e:	7afb      	ldrb	r3, [r7, #11]
 8004d20:	f003 030f 	and.w	r3, r3, #15
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	799b      	ldrb	r3, [r3, #6]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d102      	bne.n	8004d38 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6818      	ldr	r0, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	799b      	ldrb	r3, [r3, #6]
 8004d40:	461a      	mov	r2, r3
 8004d42:	6979      	ldr	r1, [r7, #20]
 8004d44:	f002 fbde 	bl	8007504 <USB_EPStartXfer>

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b084      	sub	sp, #16
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004d5e:	78fb      	ldrb	r3, [r7, #3]
 8004d60:	f003 030f 	and.w	r3, r3, #15
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	7912      	ldrb	r2, [r2, #4]
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d901      	bls.n	8004d70 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e04f      	b.n	8004e10 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	da0f      	bge.n	8004d98 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d78:	78fb      	ldrb	r3, [r7, #3]
 8004d7a:	f003 020f 	and.w	r2, r3, #15
 8004d7e:	4613      	mov	r3, r2
 8004d80:	00db      	lsls	r3, r3, #3
 8004d82:	4413      	add	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	3310      	adds	r3, #16
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2201      	movs	r2, #1
 8004d94:	705a      	strb	r2, [r3, #1]
 8004d96:	e00d      	b.n	8004db4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d98:	78fa      	ldrb	r2, [r7, #3]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	4413      	add	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	4413      	add	r3, r2
 8004daa:	3304      	adds	r3, #4
 8004dac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2201      	movs	r2, #1
 8004db8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dba:	78fb      	ldrb	r3, [r7, #3]
 8004dbc:	f003 030f 	and.w	r3, r3, #15
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d101      	bne.n	8004dd4 <HAL_PCD_EP_SetStall+0x82>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e01d      	b.n	8004e10 <HAL_PCD_EP_SetStall+0xbe>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68f9      	ldr	r1, [r7, #12]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f002 ff6c 	bl	8007cc0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004de8:	78fb      	ldrb	r3, [r7, #3]
 8004dea:	f003 030f 	and.w	r3, r3, #15
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d109      	bne.n	8004e06 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6818      	ldr	r0, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	7999      	ldrb	r1, [r3, #6]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004e00:	461a      	mov	r2, r3
 8004e02:	f003 f95d 	bl	80080c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	460b      	mov	r3, r1
 8004e22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004e24:	78fb      	ldrb	r3, [r7, #3]
 8004e26:	f003 030f 	and.w	r3, r3, #15
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	7912      	ldrb	r2, [r2, #4]
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d901      	bls.n	8004e36 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e042      	b.n	8004ebc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	da0f      	bge.n	8004e5e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e3e:	78fb      	ldrb	r3, [r7, #3]
 8004e40:	f003 020f 	and.w	r2, r3, #15
 8004e44:	4613      	mov	r3, r2
 8004e46:	00db      	lsls	r3, r3, #3
 8004e48:	4413      	add	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	3310      	adds	r3, #16
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	4413      	add	r3, r2
 8004e52:	3304      	adds	r3, #4
 8004e54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	705a      	strb	r2, [r3, #1]
 8004e5c:	e00f      	b.n	8004e7e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e5e:	78fb      	ldrb	r3, [r7, #3]
 8004e60:	f003 020f 	and.w	r2, r3, #15
 8004e64:	4613      	mov	r3, r2
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	4413      	add	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	4413      	add	r3, r2
 8004e74:	3304      	adds	r3, #4
 8004e76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e84:	78fb      	ldrb	r3, [r7, #3]
 8004e86:	f003 030f 	and.w	r3, r3, #15
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d101      	bne.n	8004e9e <HAL_PCD_EP_ClrStall+0x86>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	e00e      	b.n	8004ebc <HAL_PCD_EP_ClrStall+0xa4>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68f9      	ldr	r1, [r7, #12]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f002 ff75 	bl	8007d9c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004ed0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	da0c      	bge.n	8004ef2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ed8:	78fb      	ldrb	r3, [r7, #3]
 8004eda:	f003 020f 	and.w	r2, r3, #15
 8004ede:	4613      	mov	r3, r2
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	4413      	add	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	3310      	adds	r3, #16
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	4413      	add	r3, r2
 8004eec:	3304      	adds	r3, #4
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	e00c      	b.n	8004f0c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ef2:	78fb      	ldrb	r3, [r7, #3]
 8004ef4:	f003 020f 	and.w	r2, r3, #15
 8004ef8:	4613      	mov	r3, r2
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	4413      	add	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	4413      	add	r3, r2
 8004f08:	3304      	adds	r3, #4
 8004f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68f9      	ldr	r1, [r7, #12]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f002 fd94 	bl	8007a40 <USB_EPStopXfer>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004f1c:	7afb      	ldrb	r3, [r7, #11]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b08a      	sub	sp, #40	@ 0x28
 8004f2a:	af02      	add	r7, sp, #8
 8004f2c:	6078      	str	r0, [r7, #4]
 8004f2e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	4413      	add	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	3310      	adds	r3, #16
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	4413      	add	r3, r2
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	695a      	ldr	r2, [r3, #20]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d901      	bls.n	8004f5e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e06b      	b.n	8005036 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	691a      	ldr	r2, [r3, #16]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	69fa      	ldr	r2, [r7, #28]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d902      	bls.n	8004f7a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	3303      	adds	r3, #3
 8004f7e:	089b      	lsrs	r3, r3, #2
 8004f80:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f82:	e02a      	b.n	8004fda <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	691a      	ldr	r2, [r3, #16]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	69fa      	ldr	r2, [r7, #28]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d902      	bls.n	8004fa0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	3303      	adds	r3, #3
 8004fa4:	089b      	lsrs	r3, r3, #2
 8004fa6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	68d9      	ldr	r1, [r3, #12]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	4603      	mov	r3, r0
 8004fbc:	6978      	ldr	r0, [r7, #20]
 8004fbe:	f002 fde9 	bl	8007b94 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	441a      	add	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	695a      	ldr	r2, [r3, #20]
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	441a      	add	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	015a      	lsls	r2, r3, #5
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d809      	bhi.n	8005004 <PCD_WriteEmptyTxFifo+0xde>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	695a      	ldr	r2, [r3, #20]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d203      	bcs.n	8005004 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1bf      	bne.n	8004f84 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	691a      	ldr	r2, [r3, #16]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	429a      	cmp	r2, r3
 800500e:	d811      	bhi.n	8005034 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	f003 030f 	and.w	r3, r3, #15
 8005016:	2201      	movs	r2, #1
 8005018:	fa02 f303 	lsl.w	r3, r2, r3
 800501c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005024:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	43db      	mvns	r3, r3
 800502a:	6939      	ldr	r1, [r7, #16]
 800502c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005030:	4013      	ands	r3, r2
 8005032:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3720      	adds	r7, #32
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b088      	sub	sp, #32
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	333c      	adds	r3, #60	@ 0x3c
 8005058:	3304      	adds	r3, #4
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	4413      	add	r3, r2
 8005066:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	799b      	ldrb	r3, [r3, #6]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d17b      	bne.n	800516e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	f003 0308 	and.w	r3, r3, #8
 800507c:	2b00      	cmp	r3, #0
 800507e:	d015      	beq.n	80050ac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	4a61      	ldr	r2, [pc, #388]	@ (8005208 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005084:	4293      	cmp	r3, r2
 8005086:	f240 80b9 	bls.w	80051fc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 80b3 	beq.w	80051fc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	4413      	add	r3, r2
 800509e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050a2:	461a      	mov	r2, r3
 80050a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050a8:	6093      	str	r3, [r2, #8]
 80050aa:	e0a7      	b.n	80051fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f003 0320 	and.w	r3, r3, #32
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d009      	beq.n	80050ca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050c2:	461a      	mov	r2, r3
 80050c4:	2320      	movs	r3, #32
 80050c6:	6093      	str	r3, [r2, #8]
 80050c8:	e098      	b.n	80051fc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f040 8093 	bne.w	80051fc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	4a4b      	ldr	r2, [pc, #300]	@ (8005208 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d90f      	bls.n	80050fe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00a      	beq.n	80050fe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050f4:	461a      	mov	r2, r3
 80050f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050fa:	6093      	str	r3, [r2, #8]
 80050fc:	e07e      	b.n	80051fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	4613      	mov	r3, r2
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	4413      	add	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	4413      	add	r3, r2
 8005110:	3304      	adds	r3, #4
 8005112:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6a1a      	ldr	r2, [r3, #32]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	0159      	lsls	r1, r3, #5
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	440b      	add	r3, r1
 8005120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800512a:	1ad2      	subs	r2, r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d114      	bne.n	8005160 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d109      	bne.n	8005152 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6818      	ldr	r0, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005148:	461a      	mov	r2, r3
 800514a:	2101      	movs	r1, #1
 800514c:	f002 ffb8 	bl	80080c0 <USB_EP0_OutStart>
 8005150:	e006      	b.n	8005160 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	68da      	ldr	r2, [r3, #12]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	441a      	add	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	b2db      	uxtb	r3, r3
 8005164:	4619      	mov	r1, r3
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f005 fb0a 	bl	800a780 <HAL_PCD_DataOutStageCallback>
 800516c:	e046      	b.n	80051fc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	4a26      	ldr	r2, [pc, #152]	@ (800520c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d124      	bne.n	80051c0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00a      	beq.n	8005196 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800518c:	461a      	mov	r2, r3
 800518e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005192:	6093      	str	r3, [r2, #8]
 8005194:	e032      	b.n	80051fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f003 0320 	and.w	r3, r3, #32
 800519c:	2b00      	cmp	r3, #0
 800519e:	d008      	beq.n	80051b2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051ac:	461a      	mov	r2, r3
 80051ae:	2320      	movs	r3, #32
 80051b0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	4619      	mov	r1, r3
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f005 fae1 	bl	800a780 <HAL_PCD_DataOutStageCallback>
 80051be:	e01d      	b.n	80051fc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d114      	bne.n	80051f0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80051c6:	6879      	ldr	r1, [r7, #4]
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	4613      	mov	r3, r2
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	4413      	add	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	440b      	add	r3, r1
 80051d4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d108      	bne.n	80051f0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6818      	ldr	r0, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80051e8:	461a      	mov	r2, r3
 80051ea:	2100      	movs	r1, #0
 80051ec:	f002 ff68 	bl	80080c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	4619      	mov	r1, r3
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f005 fac2 	bl	800a780 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3720      	adds	r7, #32
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	4f54300a 	.word	0x4f54300a
 800520c:	4f54310a 	.word	0x4f54310a

08005210 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	333c      	adds	r3, #60	@ 0x3c
 8005228:	3304      	adds	r3, #4
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	4413      	add	r3, r2
 8005236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4a15      	ldr	r2, [pc, #84]	@ (8005298 <PCD_EP_OutSetupPacket_int+0x88>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d90e      	bls.n	8005264 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800524c:	2b00      	cmp	r3, #0
 800524e:	d009      	beq.n	8005264 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	015a      	lsls	r2, r3, #5
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	4413      	add	r3, r2
 8005258:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800525c:	461a      	mov	r2, r3
 800525e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005262:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f005 fa79 	bl	800a75c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4a0a      	ldr	r2, [pc, #40]	@ (8005298 <PCD_EP_OutSetupPacket_int+0x88>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d90c      	bls.n	800528c <PCD_EP_OutSetupPacket_int+0x7c>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	799b      	ldrb	r3, [r3, #6]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d108      	bne.n	800528c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6818      	ldr	r0, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005284:	461a      	mov	r2, r3
 8005286:	2101      	movs	r1, #1
 8005288:	f002 ff1a 	bl	80080c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3718      	adds	r7, #24
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	4f54300a 	.word	0x4f54300a

0800529c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	460b      	mov	r3, r1
 80052a6:	70fb      	strb	r3, [r7, #3]
 80052a8:	4613      	mov	r3, r2
 80052aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80052b4:	78fb      	ldrb	r3, [r7, #3]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d107      	bne.n	80052ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80052ba:	883b      	ldrh	r3, [r7, #0]
 80052bc:	0419      	lsls	r1, r3, #16
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80052c8:	e028      	b.n	800531c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d0:	0c1b      	lsrs	r3, r3, #16
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	4413      	add	r3, r2
 80052d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80052d8:	2300      	movs	r3, #0
 80052da:	73fb      	strb	r3, [r7, #15]
 80052dc:	e00d      	b.n	80052fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	7bfb      	ldrb	r3, [r7, #15]
 80052e4:	3340      	adds	r3, #64	@ 0x40
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	0c1b      	lsrs	r3, r3, #16
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	4413      	add	r3, r2
 80052f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80052f4:	7bfb      	ldrb	r3, [r7, #15]
 80052f6:	3301      	adds	r3, #1
 80052f8:	73fb      	strb	r3, [r7, #15]
 80052fa:	7bfa      	ldrb	r2, [r7, #15]
 80052fc:	78fb      	ldrb	r3, [r7, #3]
 80052fe:	3b01      	subs	r3, #1
 8005300:	429a      	cmp	r2, r3
 8005302:	d3ec      	bcc.n	80052de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005304:	883b      	ldrh	r3, [r7, #0]
 8005306:	0418      	lsls	r0, r3, #16
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6819      	ldr	r1, [r3, #0]
 800530c:	78fb      	ldrb	r3, [r7, #3]
 800530e:	3b01      	subs	r3, #1
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	4302      	orrs	r2, r0
 8005314:	3340      	adds	r3, #64	@ 0x40
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	440b      	add	r3, r1
 800531a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800532a:	b480      	push	{r7}
 800532c:	b083      	sub	sp, #12
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
 8005332:	460b      	mov	r3, r1
 8005334:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	887a      	ldrh	r2, [r7, #2]
 800533c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	460b      	mov	r3, r1
 8005356:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e267      	b.n	8005846 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b00      	cmp	r3, #0
 8005380:	d075      	beq.n	800546e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005382:	4b88      	ldr	r3, [pc, #544]	@ (80055a4 <HAL_RCC_OscConfig+0x240>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f003 030c 	and.w	r3, r3, #12
 800538a:	2b04      	cmp	r3, #4
 800538c:	d00c      	beq.n	80053a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800538e:	4b85      	ldr	r3, [pc, #532]	@ (80055a4 <HAL_RCC_OscConfig+0x240>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005396:	2b08      	cmp	r3, #8
 8005398:	d112      	bne.n	80053c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800539a:	4b82      	ldr	r3, [pc, #520]	@ (80055a4 <HAL_RCC_OscConfig+0x240>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053a6:	d10b      	bne.n	80053c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053a8:	4b7e      	ldr	r3, [pc, #504]	@ (80055a4 <HAL_RCC_OscConfig+0x240>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d05b      	beq.n	800546c <HAL_RCC_OscConfig+0x108>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d157      	bne.n	800546c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e242      	b.n	8005846 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053c8:	d106      	bne.n	80053d8 <HAL_RCC_OscConfig+0x74>
 80053ca:	4b76      	ldr	r3, [pc, #472]	@ (80055a4 <HAL_RCC_OscConfig+0x240>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a75      	ldr	r2, [pc, #468]	@ (80055a4 <HAL_RCC_OscConfig+0x240>)
 80053d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053d4:	6013      	str	r3, [r2, #0]
 80053d6:	e01d      	b.n	8005414 <HAL_RCC_OscConfig+0xb0>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80053e0:	d10c      	bne.n	80053fc <HAL_RCC_OscConfig+0x98>
 80053e2:	4b70      	ldr	r3, [pc, #448]	@ (80055a4 <HAL_RCC_OscConfig+0x240>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a6f      	ldr	r2, [pc, #444]	@ (80055a4 <HAL_RCC_OscConfig+0x240>)
 80053e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053ec:	6013      	str	r3, [r2, #0]
 80053ee:	4b6d      	ldr	r3, [pc, #436]	@ (80055a4 <HAL_RCC_OscConfig+0x240>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a6c      	ldr	r2, [pc, #432]	@ (80055a4 <HAL_RCC_OscConfig+0x240>)
 80053f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053f8:	6013      	str	r3, [r2, #0]
 80053fa:	e00b      	b.n	8005414 <HAL_RCC_OscConfig+0xb0>
 80053fc:	4b69      	ldr	r3, [pc, #420]	@ (80055a4 <HAL_RCC_OscConfig+0x240>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a68      	ldr	r2, [pc, #416]	@ (80055a4 <HAL_RCC_OscConfig+0x240>)
 8005402:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005406:	6013      	str	r3, [r2, #0]
 8005408:	4b66      	ldr	r3, [pc, #408]	@ (80055a4 <HAL_RCC_OscConfig+0x240>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a65      	ldr	r2, [pc, #404]	@ (80055a4 <HAL_RCC_OscConfig+0x240>)
 800540e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d013      	beq.n	8005444 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800541c:	f7fc fb42 	bl	8001aa4 <HAL_GetTick>
 8005420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005422:	e008      	b.n	8005436 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005424:	f7fc fb3e 	bl	8001aa4 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b64      	cmp	r3, #100	@ 0x64
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e207      	b.n	8005846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005436:	4b5b      	ldr	r3, [pc, #364]	@ (80055a4 <HAL_RCC_OscConfig+0x240>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d0f0      	beq.n	8005424 <HAL_RCC_OscConfig+0xc0>
 8005442:	e014      	b.n	800546e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005444:	f7fc fb2e 	bl	8001aa4 <HAL_GetTick>
 8005448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800544a:	e008      	b.n	800545e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800544c:	f7fc fb2a 	bl	8001aa4 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b64      	cmp	r3, #100	@ 0x64
 8005458:	d901      	bls.n	800545e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e1f3      	b.n	8005846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800545e:	4b51      	ldr	r3, [pc, #324]	@ (80055a4 <HAL_RCC_OscConfig+0x240>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1f0      	bne.n	800544c <HAL_RCC_OscConfig+0xe8>
 800546a:	e000      	b.n	800546e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800546c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d063      	beq.n	8005542 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800547a:	4b4a      	ldr	r3, [pc, #296]	@ (80055a4 <HAL_RCC_OscConfig+0x240>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f003 030c 	and.w	r3, r3, #12
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00b      	beq.n	800549e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005486:	4b47      	ldr	r3, [pc, #284]	@ (80055a4 <HAL_RCC_OscConfig+0x240>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800548e:	2b08      	cmp	r3, #8
 8005490:	d11c      	bne.n	80054cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005492:	4b44      	ldr	r3, [pc, #272]	@ (80055a4 <HAL_RCC_OscConfig+0x240>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d116      	bne.n	80054cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800549e:	4b41      	ldr	r3, [pc, #260]	@ (80055a4 <HAL_RCC_OscConfig+0x240>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d005      	beq.n	80054b6 <HAL_RCC_OscConfig+0x152>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d001      	beq.n	80054b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e1c7      	b.n	8005846 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054b6:	4b3b      	ldr	r3, [pc, #236]	@ (80055a4 <HAL_RCC_OscConfig+0x240>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	00db      	lsls	r3, r3, #3
 80054c4:	4937      	ldr	r1, [pc, #220]	@ (80055a4 <HAL_RCC_OscConfig+0x240>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ca:	e03a      	b.n	8005542 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d020      	beq.n	8005516 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054d4:	4b34      	ldr	r3, [pc, #208]	@ (80055a8 <HAL_RCC_OscConfig+0x244>)
 80054d6:	2201      	movs	r2, #1
 80054d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054da:	f7fc fae3 	bl	8001aa4 <HAL_GetTick>
 80054de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054e0:	e008      	b.n	80054f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054e2:	f7fc fadf 	bl	8001aa4 <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d901      	bls.n	80054f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e1a8      	b.n	8005846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054f4:	4b2b      	ldr	r3, [pc, #172]	@ (80055a4 <HAL_RCC_OscConfig+0x240>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d0f0      	beq.n	80054e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005500:	4b28      	ldr	r3, [pc, #160]	@ (80055a4 <HAL_RCC_OscConfig+0x240>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	00db      	lsls	r3, r3, #3
 800550e:	4925      	ldr	r1, [pc, #148]	@ (80055a4 <HAL_RCC_OscConfig+0x240>)
 8005510:	4313      	orrs	r3, r2
 8005512:	600b      	str	r3, [r1, #0]
 8005514:	e015      	b.n	8005542 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005516:	4b24      	ldr	r3, [pc, #144]	@ (80055a8 <HAL_RCC_OscConfig+0x244>)
 8005518:	2200      	movs	r2, #0
 800551a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800551c:	f7fc fac2 	bl	8001aa4 <HAL_GetTick>
 8005520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005522:	e008      	b.n	8005536 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005524:	f7fc fabe 	bl	8001aa4 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b02      	cmp	r3, #2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e187      	b.n	8005846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005536:	4b1b      	ldr	r3, [pc, #108]	@ (80055a4 <HAL_RCC_OscConfig+0x240>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1f0      	bne.n	8005524 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0308 	and.w	r3, r3, #8
 800554a:	2b00      	cmp	r3, #0
 800554c:	d036      	beq.n	80055bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d016      	beq.n	8005584 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005556:	4b15      	ldr	r3, [pc, #84]	@ (80055ac <HAL_RCC_OscConfig+0x248>)
 8005558:	2201      	movs	r2, #1
 800555a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800555c:	f7fc faa2 	bl	8001aa4 <HAL_GetTick>
 8005560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005562:	e008      	b.n	8005576 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005564:	f7fc fa9e 	bl	8001aa4 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e167      	b.n	8005846 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005576:	4b0b      	ldr	r3, [pc, #44]	@ (80055a4 <HAL_RCC_OscConfig+0x240>)
 8005578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d0f0      	beq.n	8005564 <HAL_RCC_OscConfig+0x200>
 8005582:	e01b      	b.n	80055bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005584:	4b09      	ldr	r3, [pc, #36]	@ (80055ac <HAL_RCC_OscConfig+0x248>)
 8005586:	2200      	movs	r2, #0
 8005588:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800558a:	f7fc fa8b 	bl	8001aa4 <HAL_GetTick>
 800558e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005590:	e00e      	b.n	80055b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005592:	f7fc fa87 	bl	8001aa4 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	2b02      	cmp	r3, #2
 800559e:	d907      	bls.n	80055b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e150      	b.n	8005846 <HAL_RCC_OscConfig+0x4e2>
 80055a4:	40023800 	.word	0x40023800
 80055a8:	42470000 	.word	0x42470000
 80055ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055b0:	4b88      	ldr	r3, [pc, #544]	@ (80057d4 <HAL_RCC_OscConfig+0x470>)
 80055b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1ea      	bne.n	8005592 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0304 	and.w	r3, r3, #4
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f000 8097 	beq.w	80056f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055ca:	2300      	movs	r3, #0
 80055cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055ce:	4b81      	ldr	r3, [pc, #516]	@ (80057d4 <HAL_RCC_OscConfig+0x470>)
 80055d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10f      	bne.n	80055fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055da:	2300      	movs	r3, #0
 80055dc:	60bb      	str	r3, [r7, #8]
 80055de:	4b7d      	ldr	r3, [pc, #500]	@ (80057d4 <HAL_RCC_OscConfig+0x470>)
 80055e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e2:	4a7c      	ldr	r2, [pc, #496]	@ (80057d4 <HAL_RCC_OscConfig+0x470>)
 80055e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80055ea:	4b7a      	ldr	r3, [pc, #488]	@ (80057d4 <HAL_RCC_OscConfig+0x470>)
 80055ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055f2:	60bb      	str	r3, [r7, #8]
 80055f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055f6:	2301      	movs	r3, #1
 80055f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055fa:	4b77      	ldr	r3, [pc, #476]	@ (80057d8 <HAL_RCC_OscConfig+0x474>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005602:	2b00      	cmp	r3, #0
 8005604:	d118      	bne.n	8005638 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005606:	4b74      	ldr	r3, [pc, #464]	@ (80057d8 <HAL_RCC_OscConfig+0x474>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a73      	ldr	r2, [pc, #460]	@ (80057d8 <HAL_RCC_OscConfig+0x474>)
 800560c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005612:	f7fc fa47 	bl	8001aa4 <HAL_GetTick>
 8005616:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005618:	e008      	b.n	800562c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800561a:	f7fc fa43 	bl	8001aa4 <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	2b02      	cmp	r3, #2
 8005626:	d901      	bls.n	800562c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e10c      	b.n	8005846 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800562c:	4b6a      	ldr	r3, [pc, #424]	@ (80057d8 <HAL_RCC_OscConfig+0x474>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005634:	2b00      	cmp	r3, #0
 8005636:	d0f0      	beq.n	800561a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d106      	bne.n	800564e <HAL_RCC_OscConfig+0x2ea>
 8005640:	4b64      	ldr	r3, [pc, #400]	@ (80057d4 <HAL_RCC_OscConfig+0x470>)
 8005642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005644:	4a63      	ldr	r2, [pc, #396]	@ (80057d4 <HAL_RCC_OscConfig+0x470>)
 8005646:	f043 0301 	orr.w	r3, r3, #1
 800564a:	6713      	str	r3, [r2, #112]	@ 0x70
 800564c:	e01c      	b.n	8005688 <HAL_RCC_OscConfig+0x324>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	2b05      	cmp	r3, #5
 8005654:	d10c      	bne.n	8005670 <HAL_RCC_OscConfig+0x30c>
 8005656:	4b5f      	ldr	r3, [pc, #380]	@ (80057d4 <HAL_RCC_OscConfig+0x470>)
 8005658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800565a:	4a5e      	ldr	r2, [pc, #376]	@ (80057d4 <HAL_RCC_OscConfig+0x470>)
 800565c:	f043 0304 	orr.w	r3, r3, #4
 8005660:	6713      	str	r3, [r2, #112]	@ 0x70
 8005662:	4b5c      	ldr	r3, [pc, #368]	@ (80057d4 <HAL_RCC_OscConfig+0x470>)
 8005664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005666:	4a5b      	ldr	r2, [pc, #364]	@ (80057d4 <HAL_RCC_OscConfig+0x470>)
 8005668:	f043 0301 	orr.w	r3, r3, #1
 800566c:	6713      	str	r3, [r2, #112]	@ 0x70
 800566e:	e00b      	b.n	8005688 <HAL_RCC_OscConfig+0x324>
 8005670:	4b58      	ldr	r3, [pc, #352]	@ (80057d4 <HAL_RCC_OscConfig+0x470>)
 8005672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005674:	4a57      	ldr	r2, [pc, #348]	@ (80057d4 <HAL_RCC_OscConfig+0x470>)
 8005676:	f023 0301 	bic.w	r3, r3, #1
 800567a:	6713      	str	r3, [r2, #112]	@ 0x70
 800567c:	4b55      	ldr	r3, [pc, #340]	@ (80057d4 <HAL_RCC_OscConfig+0x470>)
 800567e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005680:	4a54      	ldr	r2, [pc, #336]	@ (80057d4 <HAL_RCC_OscConfig+0x470>)
 8005682:	f023 0304 	bic.w	r3, r3, #4
 8005686:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d015      	beq.n	80056bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005690:	f7fc fa08 	bl	8001aa4 <HAL_GetTick>
 8005694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005696:	e00a      	b.n	80056ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005698:	f7fc fa04 	bl	8001aa4 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d901      	bls.n	80056ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e0cb      	b.n	8005846 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ae:	4b49      	ldr	r3, [pc, #292]	@ (80057d4 <HAL_RCC_OscConfig+0x470>)
 80056b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d0ee      	beq.n	8005698 <HAL_RCC_OscConfig+0x334>
 80056ba:	e014      	b.n	80056e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056bc:	f7fc f9f2 	bl	8001aa4 <HAL_GetTick>
 80056c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056c2:	e00a      	b.n	80056da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056c4:	f7fc f9ee 	bl	8001aa4 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d901      	bls.n	80056da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e0b5      	b.n	8005846 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056da:	4b3e      	ldr	r3, [pc, #248]	@ (80057d4 <HAL_RCC_OscConfig+0x470>)
 80056dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1ee      	bne.n	80056c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80056e6:	7dfb      	ldrb	r3, [r7, #23]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d105      	bne.n	80056f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056ec:	4b39      	ldr	r3, [pc, #228]	@ (80057d4 <HAL_RCC_OscConfig+0x470>)
 80056ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f0:	4a38      	ldr	r2, [pc, #224]	@ (80057d4 <HAL_RCC_OscConfig+0x470>)
 80056f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 80a1 	beq.w	8005844 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005702:	4b34      	ldr	r3, [pc, #208]	@ (80057d4 <HAL_RCC_OscConfig+0x470>)
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f003 030c 	and.w	r3, r3, #12
 800570a:	2b08      	cmp	r3, #8
 800570c:	d05c      	beq.n	80057c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	2b02      	cmp	r3, #2
 8005714:	d141      	bne.n	800579a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005716:	4b31      	ldr	r3, [pc, #196]	@ (80057dc <HAL_RCC_OscConfig+0x478>)
 8005718:	2200      	movs	r2, #0
 800571a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800571c:	f7fc f9c2 	bl	8001aa4 <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005722:	e008      	b.n	8005736 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005724:	f7fc f9be 	bl	8001aa4 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e087      	b.n	8005846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005736:	4b27      	ldr	r3, [pc, #156]	@ (80057d4 <HAL_RCC_OscConfig+0x470>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1f0      	bne.n	8005724 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	69da      	ldr	r2, [r3, #28]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	431a      	orrs	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005750:	019b      	lsls	r3, r3, #6
 8005752:	431a      	orrs	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005758:	085b      	lsrs	r3, r3, #1
 800575a:	3b01      	subs	r3, #1
 800575c:	041b      	lsls	r3, r3, #16
 800575e:	431a      	orrs	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005764:	061b      	lsls	r3, r3, #24
 8005766:	491b      	ldr	r1, [pc, #108]	@ (80057d4 <HAL_RCC_OscConfig+0x470>)
 8005768:	4313      	orrs	r3, r2
 800576a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800576c:	4b1b      	ldr	r3, [pc, #108]	@ (80057dc <HAL_RCC_OscConfig+0x478>)
 800576e:	2201      	movs	r2, #1
 8005770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005772:	f7fc f997 	bl	8001aa4 <HAL_GetTick>
 8005776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005778:	e008      	b.n	800578c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800577a:	f7fc f993 	bl	8001aa4 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d901      	bls.n	800578c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e05c      	b.n	8005846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800578c:	4b11      	ldr	r3, [pc, #68]	@ (80057d4 <HAL_RCC_OscConfig+0x470>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d0f0      	beq.n	800577a <HAL_RCC_OscConfig+0x416>
 8005798:	e054      	b.n	8005844 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800579a:	4b10      	ldr	r3, [pc, #64]	@ (80057dc <HAL_RCC_OscConfig+0x478>)
 800579c:	2200      	movs	r2, #0
 800579e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a0:	f7fc f980 	bl	8001aa4 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057a8:	f7fc f97c 	bl	8001aa4 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e045      	b.n	8005846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ba:	4b06      	ldr	r3, [pc, #24]	@ (80057d4 <HAL_RCC_OscConfig+0x470>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1f0      	bne.n	80057a8 <HAL_RCC_OscConfig+0x444>
 80057c6:	e03d      	b.n	8005844 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d107      	bne.n	80057e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e038      	b.n	8005846 <HAL_RCC_OscConfig+0x4e2>
 80057d4:	40023800 	.word	0x40023800
 80057d8:	40007000 	.word	0x40007000
 80057dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005850 <HAL_RCC_OscConfig+0x4ec>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d028      	beq.n	8005840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d121      	bne.n	8005840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005806:	429a      	cmp	r2, r3
 8005808:	d11a      	bne.n	8005840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005810:	4013      	ands	r3, r2
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005816:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005818:	4293      	cmp	r3, r2
 800581a:	d111      	bne.n	8005840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005826:	085b      	lsrs	r3, r3, #1
 8005828:	3b01      	subs	r3, #1
 800582a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800582c:	429a      	cmp	r2, r3
 800582e:	d107      	bne.n	8005840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800583a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800583c:	429a      	cmp	r2, r3
 800583e:	d001      	beq.n	8005844 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e000      	b.n	8005846 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3718      	adds	r7, #24
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	40023800 	.word	0x40023800

08005854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e0cc      	b.n	8005a02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005868:	4b68      	ldr	r3, [pc, #416]	@ (8005a0c <HAL_RCC_ClockConfig+0x1b8>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0307 	and.w	r3, r3, #7
 8005870:	683a      	ldr	r2, [r7, #0]
 8005872:	429a      	cmp	r2, r3
 8005874:	d90c      	bls.n	8005890 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005876:	4b65      	ldr	r3, [pc, #404]	@ (8005a0c <HAL_RCC_ClockConfig+0x1b8>)
 8005878:	683a      	ldr	r2, [r7, #0]
 800587a:	b2d2      	uxtb	r2, r2
 800587c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800587e:	4b63      	ldr	r3, [pc, #396]	@ (8005a0c <HAL_RCC_ClockConfig+0x1b8>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0307 	and.w	r3, r3, #7
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	429a      	cmp	r2, r3
 800588a:	d001      	beq.n	8005890 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e0b8      	b.n	8005a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	2b00      	cmp	r3, #0
 800589a:	d020      	beq.n	80058de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0304 	and.w	r3, r3, #4
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d005      	beq.n	80058b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058a8:	4b59      	ldr	r3, [pc, #356]	@ (8005a10 <HAL_RCC_ClockConfig+0x1bc>)
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	4a58      	ldr	r2, [pc, #352]	@ (8005a10 <HAL_RCC_ClockConfig+0x1bc>)
 80058ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80058b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0308 	and.w	r3, r3, #8
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d005      	beq.n	80058cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058c0:	4b53      	ldr	r3, [pc, #332]	@ (8005a10 <HAL_RCC_ClockConfig+0x1bc>)
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	4a52      	ldr	r2, [pc, #328]	@ (8005a10 <HAL_RCC_ClockConfig+0x1bc>)
 80058c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80058ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058cc:	4b50      	ldr	r3, [pc, #320]	@ (8005a10 <HAL_RCC_ClockConfig+0x1bc>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	494d      	ldr	r1, [pc, #308]	@ (8005a10 <HAL_RCC_ClockConfig+0x1bc>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d044      	beq.n	8005974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d107      	bne.n	8005902 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058f2:	4b47      	ldr	r3, [pc, #284]	@ (8005a10 <HAL_RCC_ClockConfig+0x1bc>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d119      	bne.n	8005932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e07f      	b.n	8005a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	2b02      	cmp	r3, #2
 8005908:	d003      	beq.n	8005912 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800590e:	2b03      	cmp	r3, #3
 8005910:	d107      	bne.n	8005922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005912:	4b3f      	ldr	r3, [pc, #252]	@ (8005a10 <HAL_RCC_ClockConfig+0x1bc>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d109      	bne.n	8005932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e06f      	b.n	8005a02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005922:	4b3b      	ldr	r3, [pc, #236]	@ (8005a10 <HAL_RCC_ClockConfig+0x1bc>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e067      	b.n	8005a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005932:	4b37      	ldr	r3, [pc, #220]	@ (8005a10 <HAL_RCC_ClockConfig+0x1bc>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f023 0203 	bic.w	r2, r3, #3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	4934      	ldr	r1, [pc, #208]	@ (8005a10 <HAL_RCC_ClockConfig+0x1bc>)
 8005940:	4313      	orrs	r3, r2
 8005942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005944:	f7fc f8ae 	bl	8001aa4 <HAL_GetTick>
 8005948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800594a:	e00a      	b.n	8005962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800594c:	f7fc f8aa 	bl	8001aa4 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800595a:	4293      	cmp	r3, r2
 800595c:	d901      	bls.n	8005962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e04f      	b.n	8005a02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005962:	4b2b      	ldr	r3, [pc, #172]	@ (8005a10 <HAL_RCC_ClockConfig+0x1bc>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 020c 	and.w	r2, r3, #12
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	429a      	cmp	r2, r3
 8005972:	d1eb      	bne.n	800594c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005974:	4b25      	ldr	r3, [pc, #148]	@ (8005a0c <HAL_RCC_ClockConfig+0x1b8>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0307 	and.w	r3, r3, #7
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	429a      	cmp	r2, r3
 8005980:	d20c      	bcs.n	800599c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005982:	4b22      	ldr	r3, [pc, #136]	@ (8005a0c <HAL_RCC_ClockConfig+0x1b8>)
 8005984:	683a      	ldr	r2, [r7, #0]
 8005986:	b2d2      	uxtb	r2, r2
 8005988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800598a:	4b20      	ldr	r3, [pc, #128]	@ (8005a0c <HAL_RCC_ClockConfig+0x1b8>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0307 	and.w	r3, r3, #7
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	429a      	cmp	r2, r3
 8005996:	d001      	beq.n	800599c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e032      	b.n	8005a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0304 	and.w	r3, r3, #4
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d008      	beq.n	80059ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059a8:	4b19      	ldr	r3, [pc, #100]	@ (8005a10 <HAL_RCC_ClockConfig+0x1bc>)
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	4916      	ldr	r1, [pc, #88]	@ (8005a10 <HAL_RCC_ClockConfig+0x1bc>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0308 	and.w	r3, r3, #8
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d009      	beq.n	80059da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059c6:	4b12      	ldr	r3, [pc, #72]	@ (8005a10 <HAL_RCC_ClockConfig+0x1bc>)
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	00db      	lsls	r3, r3, #3
 80059d4:	490e      	ldr	r1, [pc, #56]	@ (8005a10 <HAL_RCC_ClockConfig+0x1bc>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80059da:	f000 f821 	bl	8005a20 <HAL_RCC_GetSysClockFreq>
 80059de:	4602      	mov	r2, r0
 80059e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005a10 <HAL_RCC_ClockConfig+0x1bc>)
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	091b      	lsrs	r3, r3, #4
 80059e6:	f003 030f 	and.w	r3, r3, #15
 80059ea:	490a      	ldr	r1, [pc, #40]	@ (8005a14 <HAL_RCC_ClockConfig+0x1c0>)
 80059ec:	5ccb      	ldrb	r3, [r1, r3]
 80059ee:	fa22 f303 	lsr.w	r3, r2, r3
 80059f2:	4a09      	ldr	r2, [pc, #36]	@ (8005a18 <HAL_RCC_ClockConfig+0x1c4>)
 80059f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80059f6:	4b09      	ldr	r3, [pc, #36]	@ (8005a1c <HAL_RCC_ClockConfig+0x1c8>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7fc f80e 	bl	8001a1c <HAL_InitTick>

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	40023c00 	.word	0x40023c00
 8005a10:	40023800 	.word	0x40023800
 8005a14:	0800b688 	.word	0x0800b688
 8005a18:	20000004 	.word	0x20000004
 8005a1c:	20000008 	.word	0x20000008

08005a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a24:	b090      	sub	sp, #64	@ 0x40
 8005a26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005a30:	2300      	movs	r3, #0
 8005a32:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a38:	4b59      	ldr	r3, [pc, #356]	@ (8005ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f003 030c 	and.w	r3, r3, #12
 8005a40:	2b08      	cmp	r3, #8
 8005a42:	d00d      	beq.n	8005a60 <HAL_RCC_GetSysClockFreq+0x40>
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	f200 80a1 	bhi.w	8005b8c <HAL_RCC_GetSysClockFreq+0x16c>
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <HAL_RCC_GetSysClockFreq+0x34>
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	d003      	beq.n	8005a5a <HAL_RCC_GetSysClockFreq+0x3a>
 8005a52:	e09b      	b.n	8005b8c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a54:	4b53      	ldr	r3, [pc, #332]	@ (8005ba4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005a56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005a58:	e09b      	b.n	8005b92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a5a:	4b53      	ldr	r3, [pc, #332]	@ (8005ba8 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005a5e:	e098      	b.n	8005b92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a60:	4b4f      	ldr	r3, [pc, #316]	@ (8005ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a68:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a6a:	4b4d      	ldr	r3, [pc, #308]	@ (8005ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d028      	beq.n	8005ac8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a76:	4b4a      	ldr	r3, [pc, #296]	@ (8005ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	099b      	lsrs	r3, r3, #6
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	623b      	str	r3, [r7, #32]
 8005a80:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a82:	6a3b      	ldr	r3, [r7, #32]
 8005a84:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005a88:	2100      	movs	r1, #0
 8005a8a:	4b47      	ldr	r3, [pc, #284]	@ (8005ba8 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a8c:	fb03 f201 	mul.w	r2, r3, r1
 8005a90:	2300      	movs	r3, #0
 8005a92:	fb00 f303 	mul.w	r3, r0, r3
 8005a96:	4413      	add	r3, r2
 8005a98:	4a43      	ldr	r2, [pc, #268]	@ (8005ba8 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a9a:	fba0 1202 	umull	r1, r2, r0, r2
 8005a9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005aa0:	460a      	mov	r2, r1
 8005aa2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005aa4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005aa6:	4413      	add	r3, r2
 8005aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aac:	2200      	movs	r2, #0
 8005aae:	61bb      	str	r3, [r7, #24]
 8005ab0:	61fa      	str	r2, [r7, #28]
 8005ab2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ab6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005aba:	f7fa fbe1 	bl	8000280 <__aeabi_uldivmod>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ac6:	e053      	b.n	8005b70 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ac8:	4b35      	ldr	r3, [pc, #212]	@ (8005ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	099b      	lsrs	r3, r3, #6
 8005ace:	2200      	movs	r2, #0
 8005ad0:	613b      	str	r3, [r7, #16]
 8005ad2:	617a      	str	r2, [r7, #20]
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005ada:	f04f 0b00 	mov.w	fp, #0
 8005ade:	4652      	mov	r2, sl
 8005ae0:	465b      	mov	r3, fp
 8005ae2:	f04f 0000 	mov.w	r0, #0
 8005ae6:	f04f 0100 	mov.w	r1, #0
 8005aea:	0159      	lsls	r1, r3, #5
 8005aec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005af0:	0150      	lsls	r0, r2, #5
 8005af2:	4602      	mov	r2, r0
 8005af4:	460b      	mov	r3, r1
 8005af6:	ebb2 080a 	subs.w	r8, r2, sl
 8005afa:	eb63 090b 	sbc.w	r9, r3, fp
 8005afe:	f04f 0200 	mov.w	r2, #0
 8005b02:	f04f 0300 	mov.w	r3, #0
 8005b06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005b0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005b0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005b12:	ebb2 0408 	subs.w	r4, r2, r8
 8005b16:	eb63 0509 	sbc.w	r5, r3, r9
 8005b1a:	f04f 0200 	mov.w	r2, #0
 8005b1e:	f04f 0300 	mov.w	r3, #0
 8005b22:	00eb      	lsls	r3, r5, #3
 8005b24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b28:	00e2      	lsls	r2, r4, #3
 8005b2a:	4614      	mov	r4, r2
 8005b2c:	461d      	mov	r5, r3
 8005b2e:	eb14 030a 	adds.w	r3, r4, sl
 8005b32:	603b      	str	r3, [r7, #0]
 8005b34:	eb45 030b 	adc.w	r3, r5, fp
 8005b38:	607b      	str	r3, [r7, #4]
 8005b3a:	f04f 0200 	mov.w	r2, #0
 8005b3e:	f04f 0300 	mov.w	r3, #0
 8005b42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b46:	4629      	mov	r1, r5
 8005b48:	028b      	lsls	r3, r1, #10
 8005b4a:	4621      	mov	r1, r4
 8005b4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b50:	4621      	mov	r1, r4
 8005b52:	028a      	lsls	r2, r1, #10
 8005b54:	4610      	mov	r0, r2
 8005b56:	4619      	mov	r1, r3
 8005b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	60bb      	str	r3, [r7, #8]
 8005b5e:	60fa      	str	r2, [r7, #12]
 8005b60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b64:	f7fa fb8c 	bl	8000280 <__aeabi_uldivmod>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005b70:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	0c1b      	lsrs	r3, r3, #16
 8005b76:	f003 0303 	and.w	r3, r3, #3
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	005b      	lsls	r3, r3, #1
 8005b7e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005b80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b88:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005b8a:	e002      	b.n	8005b92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b8c:	4b05      	ldr	r3, [pc, #20]	@ (8005ba4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005b90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3740      	adds	r7, #64	@ 0x40
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b9e:	bf00      	nop
 8005ba0:	40023800 	.word	0x40023800
 8005ba4:	00f42400 	.word	0x00f42400
 8005ba8:	017d7840 	.word	0x017d7840

08005bac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bac:	b480      	push	{r7}
 8005bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bb0:	4b03      	ldr	r3, [pc, #12]	@ (8005bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	20000004 	.word	0x20000004

08005bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005bc8:	f7ff fff0 	bl	8005bac <HAL_RCC_GetHCLKFreq>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	4b05      	ldr	r3, [pc, #20]	@ (8005be4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	0a9b      	lsrs	r3, r3, #10
 8005bd4:	f003 0307 	and.w	r3, r3, #7
 8005bd8:	4903      	ldr	r1, [pc, #12]	@ (8005be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bda:	5ccb      	ldrb	r3, [r1, r3]
 8005bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	40023800 	.word	0x40023800
 8005be8:	0800b698 	.word	0x0800b698

08005bec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e041      	b.n	8005c82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d106      	bne.n	8005c18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7fb fd82 	bl	800171c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2202      	movs	r2, #2
 8005c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3304      	adds	r3, #4
 8005c28:	4619      	mov	r1, r3
 8005c2a:	4610      	mov	r0, r2
 8005c2c:	f000 fc3c 	bl	80064a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
	...

08005c8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d001      	beq.n	8005ca4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e044      	b.n	8005d2e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68da      	ldr	r2, [r3, #12]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f042 0201 	orr.w	r2, r2, #1
 8005cba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a1e      	ldr	r2, [pc, #120]	@ (8005d3c <HAL_TIM_Base_Start_IT+0xb0>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d018      	beq.n	8005cf8 <HAL_TIM_Base_Start_IT+0x6c>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cce:	d013      	beq.n	8005cf8 <HAL_TIM_Base_Start_IT+0x6c>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a1a      	ldr	r2, [pc, #104]	@ (8005d40 <HAL_TIM_Base_Start_IT+0xb4>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d00e      	beq.n	8005cf8 <HAL_TIM_Base_Start_IT+0x6c>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a19      	ldr	r2, [pc, #100]	@ (8005d44 <HAL_TIM_Base_Start_IT+0xb8>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d009      	beq.n	8005cf8 <HAL_TIM_Base_Start_IT+0x6c>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a17      	ldr	r2, [pc, #92]	@ (8005d48 <HAL_TIM_Base_Start_IT+0xbc>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d004      	beq.n	8005cf8 <HAL_TIM_Base_Start_IT+0x6c>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a16      	ldr	r2, [pc, #88]	@ (8005d4c <HAL_TIM_Base_Start_IT+0xc0>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d111      	bne.n	8005d1c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f003 0307 	and.w	r3, r3, #7
 8005d02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2b06      	cmp	r3, #6
 8005d08:	d010      	beq.n	8005d2c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f042 0201 	orr.w	r2, r2, #1
 8005d18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d1a:	e007      	b.n	8005d2c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f042 0201 	orr.w	r2, r2, #1
 8005d2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3714      	adds	r7, #20
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	40010000 	.word	0x40010000
 8005d40:	40000400 	.word	0x40000400
 8005d44:	40000800 	.word	0x40000800
 8005d48:	40000c00 	.word	0x40000c00
 8005d4c:	40014000 	.word	0x40014000

08005d50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e041      	b.n	8005de6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d106      	bne.n	8005d7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f839 	bl	8005dee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	4610      	mov	r0, r2
 8005d90:	f000 fb8a 	bl	80064a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b083      	sub	sp, #12
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005df6:	bf00      	nop
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
	...

08005e04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d109      	bne.n	8005e28 <HAL_TIM_PWM_Start+0x24>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	bf14      	ite	ne
 8005e20:	2301      	movne	r3, #1
 8005e22:	2300      	moveq	r3, #0
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	e022      	b.n	8005e6e <HAL_TIM_PWM_Start+0x6a>
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	2b04      	cmp	r3, #4
 8005e2c:	d109      	bne.n	8005e42 <HAL_TIM_PWM_Start+0x3e>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	bf14      	ite	ne
 8005e3a:	2301      	movne	r3, #1
 8005e3c:	2300      	moveq	r3, #0
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	e015      	b.n	8005e6e <HAL_TIM_PWM_Start+0x6a>
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b08      	cmp	r3, #8
 8005e46:	d109      	bne.n	8005e5c <HAL_TIM_PWM_Start+0x58>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	bf14      	ite	ne
 8005e54:	2301      	movne	r3, #1
 8005e56:	2300      	moveq	r3, #0
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	e008      	b.n	8005e6e <HAL_TIM_PWM_Start+0x6a>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	bf14      	ite	ne
 8005e68:	2301      	movne	r3, #1
 8005e6a:	2300      	moveq	r3, #0
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e068      	b.n	8005f48 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d104      	bne.n	8005e86 <HAL_TIM_PWM_Start+0x82>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2202      	movs	r2, #2
 8005e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e84:	e013      	b.n	8005eae <HAL_TIM_PWM_Start+0xaa>
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b04      	cmp	r3, #4
 8005e8a:	d104      	bne.n	8005e96 <HAL_TIM_PWM_Start+0x92>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e94:	e00b      	b.n	8005eae <HAL_TIM_PWM_Start+0xaa>
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2b08      	cmp	r3, #8
 8005e9a:	d104      	bne.n	8005ea6 <HAL_TIM_PWM_Start+0xa2>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ea4:	e003      	b.n	8005eae <HAL_TIM_PWM_Start+0xaa>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2202      	movs	r2, #2
 8005eaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	6839      	ldr	r1, [r7, #0]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f000 fda2 	bl	8006a00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a23      	ldr	r2, [pc, #140]	@ (8005f50 <HAL_TIM_PWM_Start+0x14c>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d107      	bne.n	8005ed6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ed4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a1d      	ldr	r2, [pc, #116]	@ (8005f50 <HAL_TIM_PWM_Start+0x14c>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d018      	beq.n	8005f12 <HAL_TIM_PWM_Start+0x10e>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ee8:	d013      	beq.n	8005f12 <HAL_TIM_PWM_Start+0x10e>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a19      	ldr	r2, [pc, #100]	@ (8005f54 <HAL_TIM_PWM_Start+0x150>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d00e      	beq.n	8005f12 <HAL_TIM_PWM_Start+0x10e>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a17      	ldr	r2, [pc, #92]	@ (8005f58 <HAL_TIM_PWM_Start+0x154>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d009      	beq.n	8005f12 <HAL_TIM_PWM_Start+0x10e>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a16      	ldr	r2, [pc, #88]	@ (8005f5c <HAL_TIM_PWM_Start+0x158>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d004      	beq.n	8005f12 <HAL_TIM_PWM_Start+0x10e>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a14      	ldr	r2, [pc, #80]	@ (8005f60 <HAL_TIM_PWM_Start+0x15c>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d111      	bne.n	8005f36 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f003 0307 	and.w	r3, r3, #7
 8005f1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2b06      	cmp	r3, #6
 8005f22:	d010      	beq.n	8005f46 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f042 0201 	orr.w	r2, r2, #1
 8005f32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f34:	e007      	b.n	8005f46 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f042 0201 	orr.w	r2, r2, #1
 8005f44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	40010000 	.word	0x40010000
 8005f54:	40000400 	.word	0x40000400
 8005f58:	40000800 	.word	0x40000800
 8005f5c:	40000c00 	.word	0x40000c00
 8005f60:	40014000 	.word	0x40014000

08005f64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d020      	beq.n	8005fc8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f003 0302 	and.w	r3, r3, #2
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d01b      	beq.n	8005fc8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f06f 0202 	mvn.w	r2, #2
 8005f98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	f003 0303 	and.w	r3, r3, #3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d003      	beq.n	8005fb6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 fa5b 	bl	800646a <HAL_TIM_IC_CaptureCallback>
 8005fb4:	e005      	b.n	8005fc2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 fa4d 	bl	8006456 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 fa5e 	bl	800647e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	f003 0304 	and.w	r3, r3, #4
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d020      	beq.n	8006014 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f003 0304 	and.w	r3, r3, #4
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d01b      	beq.n	8006014 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f06f 0204 	mvn.w	r2, #4
 8005fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2202      	movs	r2, #2
 8005fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fa35 	bl	800646a <HAL_TIM_IC_CaptureCallback>
 8006000:	e005      	b.n	800600e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 fa27 	bl	8006456 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 fa38 	bl	800647e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	f003 0308 	and.w	r3, r3, #8
 800601a:	2b00      	cmp	r3, #0
 800601c:	d020      	beq.n	8006060 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f003 0308 	and.w	r3, r3, #8
 8006024:	2b00      	cmp	r3, #0
 8006026:	d01b      	beq.n	8006060 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f06f 0208 	mvn.w	r2, #8
 8006030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2204      	movs	r2, #4
 8006036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	f003 0303 	and.w	r3, r3, #3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d003      	beq.n	800604e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 fa0f 	bl	800646a <HAL_TIM_IC_CaptureCallback>
 800604c:	e005      	b.n	800605a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fa01 	bl	8006456 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 fa12 	bl	800647e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	f003 0310 	and.w	r3, r3, #16
 8006066:	2b00      	cmp	r3, #0
 8006068:	d020      	beq.n	80060ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f003 0310 	and.w	r3, r3, #16
 8006070:	2b00      	cmp	r3, #0
 8006072:	d01b      	beq.n	80060ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f06f 0210 	mvn.w	r2, #16
 800607c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2208      	movs	r2, #8
 8006082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	69db      	ldr	r3, [r3, #28]
 800608a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800608e:	2b00      	cmp	r3, #0
 8006090:	d003      	beq.n	800609a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f9e9 	bl	800646a <HAL_TIM_IC_CaptureCallback>
 8006098:	e005      	b.n	80060a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f9db 	bl	8006456 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f9ec 	bl	800647e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00c      	beq.n	80060d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d007      	beq.n	80060d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f06f 0201 	mvn.w	r2, #1
 80060c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7fa fd1a 	bl	8000b04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00c      	beq.n	80060f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d007      	beq.n	80060f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80060ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 fd24 	bl	8006b3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00c      	beq.n	8006118 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006104:	2b00      	cmp	r3, #0
 8006106:	d007      	beq.n	8006118 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f9bd 	bl	8006492 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	f003 0320 	and.w	r3, r3, #32
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00c      	beq.n	800613c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f003 0320 	and.w	r3, r3, #32
 8006128:	2b00      	cmp	r3, #0
 800612a:	d007      	beq.n	800613c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f06f 0220 	mvn.w	r2, #32
 8006134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 fcf6 	bl	8006b28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800613c:	bf00      	nop
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006150:	2300      	movs	r3, #0
 8006152:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800615a:	2b01      	cmp	r3, #1
 800615c:	d101      	bne.n	8006162 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800615e:	2302      	movs	r3, #2
 8006160:	e0ae      	b.n	80062c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2b0c      	cmp	r3, #12
 800616e:	f200 809f 	bhi.w	80062b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006172:	a201      	add	r2, pc, #4	@ (adr r2, 8006178 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006178:	080061ad 	.word	0x080061ad
 800617c:	080062b1 	.word	0x080062b1
 8006180:	080062b1 	.word	0x080062b1
 8006184:	080062b1 	.word	0x080062b1
 8006188:	080061ed 	.word	0x080061ed
 800618c:	080062b1 	.word	0x080062b1
 8006190:	080062b1 	.word	0x080062b1
 8006194:	080062b1 	.word	0x080062b1
 8006198:	0800622f 	.word	0x0800622f
 800619c:	080062b1 	.word	0x080062b1
 80061a0:	080062b1 	.word	0x080062b1
 80061a4:	080062b1 	.word	0x080062b1
 80061a8:	0800626f 	.word	0x0800626f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68b9      	ldr	r1, [r7, #8]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f000 f9fe 	bl	80065b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	699a      	ldr	r2, [r3, #24]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 0208 	orr.w	r2, r2, #8
 80061c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	699a      	ldr	r2, [r3, #24]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f022 0204 	bic.w	r2, r2, #4
 80061d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6999      	ldr	r1, [r3, #24]
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	691a      	ldr	r2, [r3, #16]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	430a      	orrs	r2, r1
 80061e8:	619a      	str	r2, [r3, #24]
      break;
 80061ea:	e064      	b.n	80062b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68b9      	ldr	r1, [r7, #8]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 fa44 	bl	8006680 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	699a      	ldr	r2, [r3, #24]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006206:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	699a      	ldr	r2, [r3, #24]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006216:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6999      	ldr	r1, [r3, #24]
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	021a      	lsls	r2, r3, #8
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	430a      	orrs	r2, r1
 800622a:	619a      	str	r2, [r3, #24]
      break;
 800622c:	e043      	b.n	80062b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68b9      	ldr	r1, [r7, #8]
 8006234:	4618      	mov	r0, r3
 8006236:	f000 fa8f 	bl	8006758 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	69da      	ldr	r2, [r3, #28]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f042 0208 	orr.w	r2, r2, #8
 8006248:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	69da      	ldr	r2, [r3, #28]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f022 0204 	bic.w	r2, r2, #4
 8006258:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	69d9      	ldr	r1, [r3, #28]
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	691a      	ldr	r2, [r3, #16]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	61da      	str	r2, [r3, #28]
      break;
 800626c:	e023      	b.n	80062b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68b9      	ldr	r1, [r7, #8]
 8006274:	4618      	mov	r0, r3
 8006276:	f000 fad9 	bl	800682c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	69da      	ldr	r2, [r3, #28]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006288:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	69da      	ldr	r2, [r3, #28]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006298:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	69d9      	ldr	r1, [r3, #28]
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	021a      	lsls	r2, r3, #8
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	430a      	orrs	r2, r1
 80062ac:	61da      	str	r2, [r3, #28]
      break;
 80062ae:	e002      	b.n	80062b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	75fb      	strb	r3, [r7, #23]
      break;
 80062b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80062be:	7dfb      	ldrb	r3, [r7, #23]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3718      	adds	r7, #24
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d101      	bne.n	80062e4 <HAL_TIM_ConfigClockSource+0x1c>
 80062e0:	2302      	movs	r3, #2
 80062e2:	e0b4      	b.n	800644e <HAL_TIM_ConfigClockSource+0x186>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2202      	movs	r2, #2
 80062f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006302:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800630a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800631c:	d03e      	beq.n	800639c <HAL_TIM_ConfigClockSource+0xd4>
 800631e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006322:	f200 8087 	bhi.w	8006434 <HAL_TIM_ConfigClockSource+0x16c>
 8006326:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800632a:	f000 8086 	beq.w	800643a <HAL_TIM_ConfigClockSource+0x172>
 800632e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006332:	d87f      	bhi.n	8006434 <HAL_TIM_ConfigClockSource+0x16c>
 8006334:	2b70      	cmp	r3, #112	@ 0x70
 8006336:	d01a      	beq.n	800636e <HAL_TIM_ConfigClockSource+0xa6>
 8006338:	2b70      	cmp	r3, #112	@ 0x70
 800633a:	d87b      	bhi.n	8006434 <HAL_TIM_ConfigClockSource+0x16c>
 800633c:	2b60      	cmp	r3, #96	@ 0x60
 800633e:	d050      	beq.n	80063e2 <HAL_TIM_ConfigClockSource+0x11a>
 8006340:	2b60      	cmp	r3, #96	@ 0x60
 8006342:	d877      	bhi.n	8006434 <HAL_TIM_ConfigClockSource+0x16c>
 8006344:	2b50      	cmp	r3, #80	@ 0x50
 8006346:	d03c      	beq.n	80063c2 <HAL_TIM_ConfigClockSource+0xfa>
 8006348:	2b50      	cmp	r3, #80	@ 0x50
 800634a:	d873      	bhi.n	8006434 <HAL_TIM_ConfigClockSource+0x16c>
 800634c:	2b40      	cmp	r3, #64	@ 0x40
 800634e:	d058      	beq.n	8006402 <HAL_TIM_ConfigClockSource+0x13a>
 8006350:	2b40      	cmp	r3, #64	@ 0x40
 8006352:	d86f      	bhi.n	8006434 <HAL_TIM_ConfigClockSource+0x16c>
 8006354:	2b30      	cmp	r3, #48	@ 0x30
 8006356:	d064      	beq.n	8006422 <HAL_TIM_ConfigClockSource+0x15a>
 8006358:	2b30      	cmp	r3, #48	@ 0x30
 800635a:	d86b      	bhi.n	8006434 <HAL_TIM_ConfigClockSource+0x16c>
 800635c:	2b20      	cmp	r3, #32
 800635e:	d060      	beq.n	8006422 <HAL_TIM_ConfigClockSource+0x15a>
 8006360:	2b20      	cmp	r3, #32
 8006362:	d867      	bhi.n	8006434 <HAL_TIM_ConfigClockSource+0x16c>
 8006364:	2b00      	cmp	r3, #0
 8006366:	d05c      	beq.n	8006422 <HAL_TIM_ConfigClockSource+0x15a>
 8006368:	2b10      	cmp	r3, #16
 800636a:	d05a      	beq.n	8006422 <HAL_TIM_ConfigClockSource+0x15a>
 800636c:	e062      	b.n	8006434 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800637e:	f000 fb1f 	bl	80069c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006390:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68ba      	ldr	r2, [r7, #8]
 8006398:	609a      	str	r2, [r3, #8]
      break;
 800639a:	e04f      	b.n	800643c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063ac:	f000 fb08 	bl	80069c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	689a      	ldr	r2, [r3, #8]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063be:	609a      	str	r2, [r3, #8]
      break;
 80063c0:	e03c      	b.n	800643c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ce:	461a      	mov	r2, r3
 80063d0:	f000 fa7c 	bl	80068cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2150      	movs	r1, #80	@ 0x50
 80063da:	4618      	mov	r0, r3
 80063dc:	f000 fad5 	bl	800698a <TIM_ITRx_SetConfig>
      break;
 80063e0:	e02c      	b.n	800643c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063ee:	461a      	mov	r2, r3
 80063f0:	f000 fa9b 	bl	800692a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2160      	movs	r1, #96	@ 0x60
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 fac5 	bl	800698a <TIM_ITRx_SetConfig>
      break;
 8006400:	e01c      	b.n	800643c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800640e:	461a      	mov	r2, r3
 8006410:	f000 fa5c 	bl	80068cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2140      	movs	r1, #64	@ 0x40
 800641a:	4618      	mov	r0, r3
 800641c:	f000 fab5 	bl	800698a <TIM_ITRx_SetConfig>
      break;
 8006420:	e00c      	b.n	800643c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4619      	mov	r1, r3
 800642c:	4610      	mov	r0, r2
 800642e:	f000 faac 	bl	800698a <TIM_ITRx_SetConfig>
      break;
 8006432:	e003      	b.n	800643c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	73fb      	strb	r3, [r7, #15]
      break;
 8006438:	e000      	b.n	800643c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800643a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800644c:	7bfb      	ldrb	r3, [r7, #15]
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006456:	b480      	push	{r7}
 8006458:	b083      	sub	sp, #12
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800645e:	bf00      	nop
 8006460:	370c      	adds	r7, #12
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800646a:	b480      	push	{r7}
 800646c:	b083      	sub	sp, #12
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006472:	bf00      	nop
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800647e:	b480      	push	{r7}
 8006480:	b083      	sub	sp, #12
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006486:	bf00      	nop
 8006488:	370c      	adds	r7, #12
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006492:	b480      	push	{r7}
 8006494:	b083      	sub	sp, #12
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800649a:	bf00      	nop
 800649c:	370c      	adds	r7, #12
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
	...

080064a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a37      	ldr	r2, [pc, #220]	@ (8006598 <TIM_Base_SetConfig+0xf0>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d00f      	beq.n	80064e0 <TIM_Base_SetConfig+0x38>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064c6:	d00b      	beq.n	80064e0 <TIM_Base_SetConfig+0x38>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a34      	ldr	r2, [pc, #208]	@ (800659c <TIM_Base_SetConfig+0xf4>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d007      	beq.n	80064e0 <TIM_Base_SetConfig+0x38>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a33      	ldr	r2, [pc, #204]	@ (80065a0 <TIM_Base_SetConfig+0xf8>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d003      	beq.n	80064e0 <TIM_Base_SetConfig+0x38>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a32      	ldr	r2, [pc, #200]	@ (80065a4 <TIM_Base_SetConfig+0xfc>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d108      	bne.n	80064f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a28      	ldr	r2, [pc, #160]	@ (8006598 <TIM_Base_SetConfig+0xf0>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d01b      	beq.n	8006532 <TIM_Base_SetConfig+0x8a>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006500:	d017      	beq.n	8006532 <TIM_Base_SetConfig+0x8a>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a25      	ldr	r2, [pc, #148]	@ (800659c <TIM_Base_SetConfig+0xf4>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d013      	beq.n	8006532 <TIM_Base_SetConfig+0x8a>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a24      	ldr	r2, [pc, #144]	@ (80065a0 <TIM_Base_SetConfig+0xf8>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d00f      	beq.n	8006532 <TIM_Base_SetConfig+0x8a>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a23      	ldr	r2, [pc, #140]	@ (80065a4 <TIM_Base_SetConfig+0xfc>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d00b      	beq.n	8006532 <TIM_Base_SetConfig+0x8a>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a22      	ldr	r2, [pc, #136]	@ (80065a8 <TIM_Base_SetConfig+0x100>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d007      	beq.n	8006532 <TIM_Base_SetConfig+0x8a>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a21      	ldr	r2, [pc, #132]	@ (80065ac <TIM_Base_SetConfig+0x104>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d003      	beq.n	8006532 <TIM_Base_SetConfig+0x8a>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a20      	ldr	r2, [pc, #128]	@ (80065b0 <TIM_Base_SetConfig+0x108>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d108      	bne.n	8006544 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	4313      	orrs	r3, r2
 8006542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	4313      	orrs	r3, r2
 8006550:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	689a      	ldr	r2, [r3, #8]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a0c      	ldr	r2, [pc, #48]	@ (8006598 <TIM_Base_SetConfig+0xf0>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d103      	bne.n	8006572 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	691a      	ldr	r2, [r3, #16]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f043 0204 	orr.w	r2, r3, #4
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	601a      	str	r2, [r3, #0]
}
 800658a:	bf00      	nop
 800658c:	3714      	adds	r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	40010000 	.word	0x40010000
 800659c:	40000400 	.word	0x40000400
 80065a0:	40000800 	.word	0x40000800
 80065a4:	40000c00 	.word	0x40000c00
 80065a8:	40014000 	.word	0x40014000
 80065ac:	40014400 	.word	0x40014400
 80065b0:	40014800 	.word	0x40014800

080065b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b087      	sub	sp, #28
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a1b      	ldr	r3, [r3, #32]
 80065c8:	f023 0201 	bic.w	r2, r3, #1
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f023 0303 	bic.w	r3, r3, #3
 80065ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	f023 0302 	bic.w	r3, r3, #2
 80065fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	4313      	orrs	r3, r2
 8006606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a1c      	ldr	r2, [pc, #112]	@ (800667c <TIM_OC1_SetConfig+0xc8>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d10c      	bne.n	800662a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	f023 0308 	bic.w	r3, r3, #8
 8006616:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	4313      	orrs	r3, r2
 8006620:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f023 0304 	bic.w	r3, r3, #4
 8006628:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a13      	ldr	r2, [pc, #76]	@ (800667c <TIM_OC1_SetConfig+0xc8>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d111      	bne.n	8006656 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006638:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006640:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	4313      	orrs	r3, r2
 800664a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	4313      	orrs	r3, r2
 8006654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	685a      	ldr	r2, [r3, #4]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	621a      	str	r2, [r3, #32]
}
 8006670:	bf00      	nop
 8006672:	371c      	adds	r7, #28
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr
 800667c:	40010000 	.word	0x40010000

08006680 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006680:	b480      	push	{r7}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	f023 0210 	bic.w	r2, r3, #16
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	021b      	lsls	r3, r3, #8
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	f023 0320 	bic.w	r3, r3, #32
 80066ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	011b      	lsls	r3, r3, #4
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a1e      	ldr	r2, [pc, #120]	@ (8006754 <TIM_OC2_SetConfig+0xd4>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d10d      	bne.n	80066fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	011b      	lsls	r3, r3, #4
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a15      	ldr	r2, [pc, #84]	@ (8006754 <TIM_OC2_SetConfig+0xd4>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d113      	bne.n	800672c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800670a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006712:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	4313      	orrs	r3, r2
 800671e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	4313      	orrs	r3, r2
 800672a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	621a      	str	r2, [r3, #32]
}
 8006746:	bf00      	nop
 8006748:	371c      	adds	r7, #28
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	40010000 	.word	0x40010000

08006758 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006758:	b480      	push	{r7}
 800675a:	b087      	sub	sp, #28
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a1b      	ldr	r3, [r3, #32]
 800676c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	69db      	ldr	r3, [r3, #28]
 800677e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f023 0303 	bic.w	r3, r3, #3
 800678e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	4313      	orrs	r3, r2
 8006798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80067a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	021b      	lsls	r3, r3, #8
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a1d      	ldr	r2, [pc, #116]	@ (8006828 <TIM_OC3_SetConfig+0xd0>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d10d      	bne.n	80067d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	021b      	lsls	r3, r3, #8
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a14      	ldr	r2, [pc, #80]	@ (8006828 <TIM_OC3_SetConfig+0xd0>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d113      	bne.n	8006802 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	011b      	lsls	r3, r3, #4
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	011b      	lsls	r3, r3, #4
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	4313      	orrs	r3, r2
 8006800:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	685a      	ldr	r2, [r3, #4]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	621a      	str	r2, [r3, #32]
}
 800681c:	bf00      	nop
 800681e:	371c      	adds	r7, #28
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr
 8006828:	40010000 	.word	0x40010000

0800682c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800682c:	b480      	push	{r7}
 800682e:	b087      	sub	sp, #28
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a1b      	ldr	r3, [r3, #32]
 8006840:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	69db      	ldr	r3, [r3, #28]
 8006852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800685a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006862:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	021b      	lsls	r3, r3, #8
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	4313      	orrs	r3, r2
 800686e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006876:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	031b      	lsls	r3, r3, #12
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	4313      	orrs	r3, r2
 8006882:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a10      	ldr	r2, [pc, #64]	@ (80068c8 <TIM_OC4_SetConfig+0x9c>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d109      	bne.n	80068a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006892:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	695b      	ldr	r3, [r3, #20]
 8006898:	019b      	lsls	r3, r3, #6
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	4313      	orrs	r3, r2
 800689e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	685a      	ldr	r2, [r3, #4]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	621a      	str	r2, [r3, #32]
}
 80068ba:	bf00      	nop
 80068bc:	371c      	adds	r7, #28
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	40010000 	.word	0x40010000

080068cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b087      	sub	sp, #28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6a1b      	ldr	r3, [r3, #32]
 80068dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	f023 0201 	bic.w	r2, r3, #1
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80068f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	011b      	lsls	r3, r3, #4
 80068fc:	693a      	ldr	r2, [r7, #16]
 80068fe:	4313      	orrs	r3, r2
 8006900:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f023 030a 	bic.w	r3, r3, #10
 8006908:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800690a:	697a      	ldr	r2, [r7, #20]
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	4313      	orrs	r3, r2
 8006910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	621a      	str	r2, [r3, #32]
}
 800691e:	bf00      	nop
 8006920:	371c      	adds	r7, #28
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800692a:	b480      	push	{r7}
 800692c:	b087      	sub	sp, #28
 800692e:	af00      	add	r7, sp, #0
 8006930:	60f8      	str	r0, [r7, #12]
 8006932:	60b9      	str	r1, [r7, #8]
 8006934:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	f023 0210 	bic.w	r2, r3, #16
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006954:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	031b      	lsls	r3, r3, #12
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	4313      	orrs	r3, r2
 800695e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006966:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	011b      	lsls	r3, r3, #4
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	4313      	orrs	r3, r2
 8006970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	621a      	str	r2, [r3, #32]
}
 800697e:	bf00      	nop
 8006980:	371c      	adds	r7, #28
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr

0800698a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800698a:	b480      	push	{r7}
 800698c:	b085      	sub	sp, #20
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	f043 0307 	orr.w	r3, r3, #7
 80069ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	609a      	str	r2, [r3, #8]
}
 80069b4:	bf00      	nop
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b087      	sub	sp, #28
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
 80069cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80069da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	021a      	lsls	r2, r3, #8
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	431a      	orrs	r2, r3
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	609a      	str	r2, [r3, #8]
}
 80069f4:	bf00      	nop
 80069f6:	371c      	adds	r7, #28
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	f003 031f 	and.w	r3, r3, #31
 8006a12:	2201      	movs	r2, #1
 8006a14:	fa02 f303 	lsl.w	r3, r2, r3
 8006a18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6a1a      	ldr	r2, [r3, #32]
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	43db      	mvns	r3, r3
 8006a22:	401a      	ands	r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6a1a      	ldr	r2, [r3, #32]
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	f003 031f 	and.w	r3, r3, #31
 8006a32:	6879      	ldr	r1, [r7, #4]
 8006a34:	fa01 f303 	lsl.w	r3, r1, r3
 8006a38:	431a      	orrs	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	621a      	str	r2, [r3, #32]
}
 8006a3e:	bf00      	nop
 8006a40:	371c      	adds	r7, #28
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
	...

08006a4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d101      	bne.n	8006a64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a60:	2302      	movs	r3, #2
 8006a62:	e050      	b.n	8006b06 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2202      	movs	r2, #2
 8006a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a1c      	ldr	r2, [pc, #112]	@ (8006b14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d018      	beq.n	8006ada <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ab0:	d013      	beq.n	8006ada <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a18      	ldr	r2, [pc, #96]	@ (8006b18 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d00e      	beq.n	8006ada <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a16      	ldr	r2, [pc, #88]	@ (8006b1c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d009      	beq.n	8006ada <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a15      	ldr	r2, [pc, #84]	@ (8006b20 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d004      	beq.n	8006ada <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a13      	ldr	r2, [pc, #76]	@ (8006b24 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d10c      	bne.n	8006af4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ae0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3714      	adds	r7, #20
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	40010000 	.word	0x40010000
 8006b18:	40000400 	.word	0x40000400
 8006b1c:	40000800 	.word	0x40000800
 8006b20:	40000c00 	.word	0x40000c00
 8006b24:	40014000 	.word	0x40014000

08006b28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b50:	b084      	sub	sp, #16
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b084      	sub	sp, #16
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
 8006b5a:	f107 001c 	add.w	r0, r7, #28
 8006b5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b62:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d123      	bne.n	8006bb2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b6e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006b7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b92:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d105      	bne.n	8006ba6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f001 fae8 	bl	800817c <USB_CoreReset>
 8006bac:	4603      	mov	r3, r0
 8006bae:	73fb      	strb	r3, [r7, #15]
 8006bb0:	e01b      	b.n	8006bea <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f001 fadc 	bl	800817c <USB_CoreReset>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006bc8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d106      	bne.n	8006bde <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bd4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	639a      	str	r2, [r3, #56]	@ 0x38
 8006bdc:	e005      	b.n	8006bea <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006bea:	7fbb      	ldrb	r3, [r7, #30]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d10b      	bne.n	8006c08 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f043 0206 	orr.w	r2, r3, #6
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	f043 0220 	orr.w	r2, r3, #32
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c14:	b004      	add	sp, #16
 8006c16:	4770      	bx	lr

08006c18 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b087      	sub	sp, #28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	4613      	mov	r3, r2
 8006c24:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006c26:	79fb      	ldrb	r3, [r7, #7]
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d165      	bne.n	8006cf8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	4a41      	ldr	r2, [pc, #260]	@ (8006d34 <USB_SetTurnaroundTime+0x11c>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d906      	bls.n	8006c42 <USB_SetTurnaroundTime+0x2a>
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	4a40      	ldr	r2, [pc, #256]	@ (8006d38 <USB_SetTurnaroundTime+0x120>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d202      	bcs.n	8006c42 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006c3c:	230f      	movs	r3, #15
 8006c3e:	617b      	str	r3, [r7, #20]
 8006c40:	e062      	b.n	8006d08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	4a3c      	ldr	r2, [pc, #240]	@ (8006d38 <USB_SetTurnaroundTime+0x120>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d306      	bcc.n	8006c58 <USB_SetTurnaroundTime+0x40>
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	4a3b      	ldr	r2, [pc, #236]	@ (8006d3c <USB_SetTurnaroundTime+0x124>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d202      	bcs.n	8006c58 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006c52:	230e      	movs	r3, #14
 8006c54:	617b      	str	r3, [r7, #20]
 8006c56:	e057      	b.n	8006d08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	4a38      	ldr	r2, [pc, #224]	@ (8006d3c <USB_SetTurnaroundTime+0x124>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d306      	bcc.n	8006c6e <USB_SetTurnaroundTime+0x56>
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	4a37      	ldr	r2, [pc, #220]	@ (8006d40 <USB_SetTurnaroundTime+0x128>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d202      	bcs.n	8006c6e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006c68:	230d      	movs	r3, #13
 8006c6a:	617b      	str	r3, [r7, #20]
 8006c6c:	e04c      	b.n	8006d08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	4a33      	ldr	r2, [pc, #204]	@ (8006d40 <USB_SetTurnaroundTime+0x128>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d306      	bcc.n	8006c84 <USB_SetTurnaroundTime+0x6c>
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	4a32      	ldr	r2, [pc, #200]	@ (8006d44 <USB_SetTurnaroundTime+0x12c>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d802      	bhi.n	8006c84 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006c7e:	230c      	movs	r3, #12
 8006c80:	617b      	str	r3, [r7, #20]
 8006c82:	e041      	b.n	8006d08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	4a2f      	ldr	r2, [pc, #188]	@ (8006d44 <USB_SetTurnaroundTime+0x12c>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d906      	bls.n	8006c9a <USB_SetTurnaroundTime+0x82>
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	4a2e      	ldr	r2, [pc, #184]	@ (8006d48 <USB_SetTurnaroundTime+0x130>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d802      	bhi.n	8006c9a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006c94:	230b      	movs	r3, #11
 8006c96:	617b      	str	r3, [r7, #20]
 8006c98:	e036      	b.n	8006d08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	4a2a      	ldr	r2, [pc, #168]	@ (8006d48 <USB_SetTurnaroundTime+0x130>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d906      	bls.n	8006cb0 <USB_SetTurnaroundTime+0x98>
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	4a29      	ldr	r2, [pc, #164]	@ (8006d4c <USB_SetTurnaroundTime+0x134>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d802      	bhi.n	8006cb0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006caa:	230a      	movs	r3, #10
 8006cac:	617b      	str	r3, [r7, #20]
 8006cae:	e02b      	b.n	8006d08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	4a26      	ldr	r2, [pc, #152]	@ (8006d4c <USB_SetTurnaroundTime+0x134>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d906      	bls.n	8006cc6 <USB_SetTurnaroundTime+0xae>
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	4a25      	ldr	r2, [pc, #148]	@ (8006d50 <USB_SetTurnaroundTime+0x138>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d202      	bcs.n	8006cc6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006cc0:	2309      	movs	r3, #9
 8006cc2:	617b      	str	r3, [r7, #20]
 8006cc4:	e020      	b.n	8006d08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	4a21      	ldr	r2, [pc, #132]	@ (8006d50 <USB_SetTurnaroundTime+0x138>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d306      	bcc.n	8006cdc <USB_SetTurnaroundTime+0xc4>
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	4a20      	ldr	r2, [pc, #128]	@ (8006d54 <USB_SetTurnaroundTime+0x13c>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d802      	bhi.n	8006cdc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006cd6:	2308      	movs	r3, #8
 8006cd8:	617b      	str	r3, [r7, #20]
 8006cda:	e015      	b.n	8006d08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	4a1d      	ldr	r2, [pc, #116]	@ (8006d54 <USB_SetTurnaroundTime+0x13c>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d906      	bls.n	8006cf2 <USB_SetTurnaroundTime+0xda>
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	4a1c      	ldr	r2, [pc, #112]	@ (8006d58 <USB_SetTurnaroundTime+0x140>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d202      	bcs.n	8006cf2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006cec:	2307      	movs	r3, #7
 8006cee:	617b      	str	r3, [r7, #20]
 8006cf0:	e00a      	b.n	8006d08 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006cf2:	2306      	movs	r3, #6
 8006cf4:	617b      	str	r3, [r7, #20]
 8006cf6:	e007      	b.n	8006d08 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006cf8:	79fb      	ldrb	r3, [r7, #7]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d102      	bne.n	8006d04 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006cfe:	2309      	movs	r3, #9
 8006d00:	617b      	str	r3, [r7, #20]
 8006d02:	e001      	b.n	8006d08 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006d04:	2309      	movs	r3, #9
 8006d06:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	68da      	ldr	r2, [r3, #12]
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	029b      	lsls	r3, r3, #10
 8006d1c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006d20:	431a      	orrs	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	371c      	adds	r7, #28
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	00d8acbf 	.word	0x00d8acbf
 8006d38:	00e4e1c0 	.word	0x00e4e1c0
 8006d3c:	00f42400 	.word	0x00f42400
 8006d40:	01067380 	.word	0x01067380
 8006d44:	011a499f 	.word	0x011a499f
 8006d48:	01312cff 	.word	0x01312cff
 8006d4c:	014ca43f 	.word	0x014ca43f
 8006d50:	016e3600 	.word	0x016e3600
 8006d54:	01a6ab1f 	.word	0x01a6ab1f
 8006d58:	01e84800 	.word	0x01e84800

08006d5c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f043 0201 	orr.w	r2, r3, #1
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	370c      	adds	r7, #12
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr

08006d7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d7e:	b480      	push	{r7}
 8006d80:	b083      	sub	sp, #12
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f023 0201 	bic.w	r2, r3, #1
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	460b      	mov	r3, r1
 8006daa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006dac:	2300      	movs	r3, #0
 8006dae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006dbc:	78fb      	ldrb	r3, [r7, #3]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d115      	bne.n	8006dee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006dce:	200a      	movs	r0, #10
 8006dd0:	f7fa fe74 	bl	8001abc <HAL_Delay>
      ms += 10U;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	330a      	adds	r3, #10
 8006dd8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f001 f93f 	bl	800805e <USB_GetMode>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d01e      	beq.n	8006e24 <USB_SetCurrentMode+0x84>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2bc7      	cmp	r3, #199	@ 0xc7
 8006dea:	d9f0      	bls.n	8006dce <USB_SetCurrentMode+0x2e>
 8006dec:	e01a      	b.n	8006e24 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006dee:	78fb      	ldrb	r3, [r7, #3]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d115      	bne.n	8006e20 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006e00:	200a      	movs	r0, #10
 8006e02:	f7fa fe5b 	bl	8001abc <HAL_Delay>
      ms += 10U;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	330a      	adds	r3, #10
 8006e0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f001 f926 	bl	800805e <USB_GetMode>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d005      	beq.n	8006e24 <USB_SetCurrentMode+0x84>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2bc7      	cmp	r3, #199	@ 0xc7
 8006e1c:	d9f0      	bls.n	8006e00 <USB_SetCurrentMode+0x60>
 8006e1e:	e001      	b.n	8006e24 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e005      	b.n	8006e30 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2bc8      	cmp	r3, #200	@ 0xc8
 8006e28:	d101      	bne.n	8006e2e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e000      	b.n	8006e30 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e38:	b084      	sub	sp, #16
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b086      	sub	sp, #24
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
 8006e42:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006e46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006e52:	2300      	movs	r3, #0
 8006e54:	613b      	str	r3, [r7, #16]
 8006e56:	e009      	b.n	8006e6c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	3340      	adds	r3, #64	@ 0x40
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	4413      	add	r3, r2
 8006e62:	2200      	movs	r2, #0
 8006e64:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	613b      	str	r3, [r7, #16]
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	2b0e      	cmp	r3, #14
 8006e70:	d9f2      	bls.n	8006e58 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006e72:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d11c      	bne.n	8006eb4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e88:	f043 0302 	orr.w	r3, r3, #2
 8006e8c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e92:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e9e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eaa:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	639a      	str	r2, [r3, #56]	@ 0x38
 8006eb2:	e00b      	b.n	8006ecc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ed8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d10d      	bne.n	8006efc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d104      	bne.n	8006ef2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006ee8:	2100      	movs	r1, #0
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f968 	bl	80071c0 <USB_SetDevSpeed>
 8006ef0:	e008      	b.n	8006f04 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006ef2:	2101      	movs	r1, #1
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 f963 	bl	80071c0 <USB_SetDevSpeed>
 8006efa:	e003      	b.n	8006f04 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006efc:	2103      	movs	r1, #3
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f95e 	bl	80071c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f04:	2110      	movs	r1, #16
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f8fa 	bl	8007100 <USB_FlushTxFifo>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f924 	bl	8007164 <USB_FlushRxFifo>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d001      	beq.n	8006f26 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	2300      	movs	r3, #0
 8006f30:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f38:	461a      	mov	r2, r3
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f44:	461a      	mov	r2, r3
 8006f46:	2300      	movs	r3, #0
 8006f48:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	613b      	str	r3, [r7, #16]
 8006f4e:	e043      	b.n	8006fd8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	015a      	lsls	r2, r3, #5
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	4413      	add	r3, r2
 8006f58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f66:	d118      	bne.n	8006f9a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d10a      	bne.n	8006f84 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	015a      	lsls	r2, r3, #5
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	4413      	add	r3, r2
 8006f76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006f80:	6013      	str	r3, [r2, #0]
 8006f82:	e013      	b.n	8006fac <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	015a      	lsls	r2, r3, #5
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f90:	461a      	mov	r2, r3
 8006f92:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006f96:	6013      	str	r3, [r2, #0]
 8006f98:	e008      	b.n	8006fac <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	015a      	lsls	r2, r3, #5
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	2300      	movs	r3, #0
 8006faa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fb8:	461a      	mov	r2, r3
 8006fba:	2300      	movs	r3, #0
 8006fbc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	015a      	lsls	r2, r3, #5
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fca:	461a      	mov	r2, r3
 8006fcc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006fd0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	613b      	str	r3, [r7, #16]
 8006fd8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006fdc:	461a      	mov	r2, r3
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d3b5      	bcc.n	8006f50 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	613b      	str	r3, [r7, #16]
 8006fe8:	e043      	b.n	8007072 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	015a      	lsls	r2, r3, #5
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ffc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007000:	d118      	bne.n	8007034 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10a      	bne.n	800701e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	015a      	lsls	r2, r3, #5
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	4413      	add	r3, r2
 8007010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007014:	461a      	mov	r2, r3
 8007016:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800701a:	6013      	str	r3, [r2, #0]
 800701c:	e013      	b.n	8007046 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	015a      	lsls	r2, r3, #5
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	4413      	add	r3, r2
 8007026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800702a:	461a      	mov	r2, r3
 800702c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007030:	6013      	str	r3, [r2, #0]
 8007032:	e008      	b.n	8007046 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	015a      	lsls	r2, r3, #5
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	4413      	add	r3, r2
 800703c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007040:	461a      	mov	r2, r3
 8007042:	2300      	movs	r3, #0
 8007044:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	015a      	lsls	r2, r3, #5
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	4413      	add	r3, r2
 800704e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007052:	461a      	mov	r2, r3
 8007054:	2300      	movs	r3, #0
 8007056:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	015a      	lsls	r2, r3, #5
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	4413      	add	r3, r2
 8007060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007064:	461a      	mov	r2, r3
 8007066:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800706a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	3301      	adds	r3, #1
 8007070:	613b      	str	r3, [r7, #16]
 8007072:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007076:	461a      	mov	r2, r3
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	4293      	cmp	r3, r2
 800707c:	d3b5      	bcc.n	8006fea <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800708c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007090:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800709e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80070a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d105      	bne.n	80070b4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	f043 0210 	orr.w	r2, r3, #16
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	699a      	ldr	r2, [r3, #24]
 80070b8:	4b10      	ldr	r3, [pc, #64]	@ (80070fc <USB_DevInit+0x2c4>)
 80070ba:	4313      	orrs	r3, r2
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80070c0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d005      	beq.n	80070d4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	f043 0208 	orr.w	r2, r3, #8
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80070d4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d107      	bne.n	80070ec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070e4:	f043 0304 	orr.w	r3, r3, #4
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80070ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3718      	adds	r7, #24
 80070f2:	46bd      	mov	sp, r7
 80070f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070f8:	b004      	add	sp, #16
 80070fa:	4770      	bx	lr
 80070fc:	803c3800 	.word	0x803c3800

08007100 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800710a:	2300      	movs	r3, #0
 800710c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	3301      	adds	r3, #1
 8007112:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800711a:	d901      	bls.n	8007120 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800711c:	2303      	movs	r3, #3
 800711e:	e01b      	b.n	8007158 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	2b00      	cmp	r3, #0
 8007126:	daf2      	bge.n	800710e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007128:	2300      	movs	r3, #0
 800712a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	019b      	lsls	r3, r3, #6
 8007130:	f043 0220 	orr.w	r2, r3, #32
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	3301      	adds	r3, #1
 800713c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007144:	d901      	bls.n	800714a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e006      	b.n	8007158 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	f003 0320 	and.w	r3, r3, #32
 8007152:	2b20      	cmp	r3, #32
 8007154:	d0f0      	beq.n	8007138 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3714      	adds	r7, #20
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800716c:	2300      	movs	r3, #0
 800716e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	3301      	adds	r3, #1
 8007174:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800717c:	d901      	bls.n	8007182 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e018      	b.n	80071b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	2b00      	cmp	r3, #0
 8007188:	daf2      	bge.n	8007170 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800718a:	2300      	movs	r3, #0
 800718c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2210      	movs	r2, #16
 8007192:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	3301      	adds	r3, #1
 8007198:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071a0:	d901      	bls.n	80071a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e006      	b.n	80071b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	f003 0310 	and.w	r3, r3, #16
 80071ae:	2b10      	cmp	r3, #16
 80071b0:	d0f0      	beq.n	8007194 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	460b      	mov	r3, r1
 80071ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	78fb      	ldrb	r3, [r7, #3]
 80071da:	68f9      	ldr	r1, [r7, #12]
 80071dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80071e0:	4313      	orrs	r3, r2
 80071e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3714      	adds	r7, #20
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr

080071f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80071f2:	b480      	push	{r7}
 80071f4:	b087      	sub	sp, #28
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f003 0306 	and.w	r3, r3, #6
 800720a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d102      	bne.n	8007218 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007212:	2300      	movs	r3, #0
 8007214:	75fb      	strb	r3, [r7, #23]
 8007216:	e00a      	b.n	800722e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2b02      	cmp	r3, #2
 800721c:	d002      	beq.n	8007224 <USB_GetDevSpeed+0x32>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2b06      	cmp	r3, #6
 8007222:	d102      	bne.n	800722a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007224:	2302      	movs	r3, #2
 8007226:	75fb      	strb	r3, [r7, #23]
 8007228:	e001      	b.n	800722e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800722a:	230f      	movs	r3, #15
 800722c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800722e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007230:	4618      	mov	r0, r3
 8007232:	371c      	adds	r7, #28
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	785b      	ldrb	r3, [r3, #1]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d13a      	bne.n	80072ce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800725e:	69da      	ldr	r2, [r3, #28]
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	f003 030f 	and.w	r3, r3, #15
 8007268:	2101      	movs	r1, #1
 800726a:	fa01 f303 	lsl.w	r3, r1, r3
 800726e:	b29b      	uxth	r3, r3
 8007270:	68f9      	ldr	r1, [r7, #12]
 8007272:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007276:	4313      	orrs	r3, r2
 8007278:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	4413      	add	r3, r2
 8007282:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800728c:	2b00      	cmp	r3, #0
 800728e:	d155      	bne.n	800733c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	015a      	lsls	r2, r3, #5
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	4413      	add	r3, r2
 8007298:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	791b      	ldrb	r3, [r3, #4]
 80072aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80072ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	059b      	lsls	r3, r3, #22
 80072b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80072b4:	4313      	orrs	r3, r2
 80072b6:	68ba      	ldr	r2, [r7, #8]
 80072b8:	0151      	lsls	r1, r2, #5
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	440a      	add	r2, r1
 80072be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072ca:	6013      	str	r3, [r2, #0]
 80072cc:	e036      	b.n	800733c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072d4:	69da      	ldr	r2, [r3, #28]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	f003 030f 	and.w	r3, r3, #15
 80072de:	2101      	movs	r1, #1
 80072e0:	fa01 f303 	lsl.w	r3, r1, r3
 80072e4:	041b      	lsls	r3, r3, #16
 80072e6:	68f9      	ldr	r1, [r7, #12]
 80072e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80072ec:	4313      	orrs	r3, r2
 80072ee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	015a      	lsls	r2, r3, #5
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d11a      	bne.n	800733c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	015a      	lsls	r2, r3, #5
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	4413      	add	r3, r2
 800730e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	791b      	ldrb	r3, [r3, #4]
 8007320:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007322:	430b      	orrs	r3, r1
 8007324:	4313      	orrs	r3, r2
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	0151      	lsls	r1, r2, #5
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	440a      	add	r2, r1
 800732e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007332:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007336:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800733a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3714      	adds	r7, #20
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
	...

0800734c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800734c:	b480      	push	{r7}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	785b      	ldrb	r3, [r3, #1]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d161      	bne.n	800742c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	015a      	lsls	r2, r3, #5
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	4413      	add	r3, r2
 8007370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800737a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800737e:	d11f      	bne.n	80073c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	015a      	lsls	r2, r3, #5
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	4413      	add	r3, r2
 8007388:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	0151      	lsls	r1, r2, #5
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	440a      	add	r2, r1
 8007396:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800739a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800739e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	015a      	lsls	r2, r3, #5
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	4413      	add	r3, r2
 80073a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	0151      	lsls	r1, r2, #5
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	440a      	add	r2, r1
 80073b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80073be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	f003 030f 	and.w	r3, r3, #15
 80073d0:	2101      	movs	r1, #1
 80073d2:	fa01 f303 	lsl.w	r3, r1, r3
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	43db      	mvns	r3, r3
 80073da:	68f9      	ldr	r1, [r7, #12]
 80073dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073e0:	4013      	ands	r3, r2
 80073e2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073ea:	69da      	ldr	r2, [r3, #28]
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	f003 030f 	and.w	r3, r3, #15
 80073f4:	2101      	movs	r1, #1
 80073f6:	fa01 f303 	lsl.w	r3, r1, r3
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	43db      	mvns	r3, r3
 80073fe:	68f9      	ldr	r1, [r7, #12]
 8007400:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007404:	4013      	ands	r3, r2
 8007406:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	015a      	lsls	r2, r3, #5
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	4413      	add	r3, r2
 8007410:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	0159      	lsls	r1, r3, #5
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	440b      	add	r3, r1
 800741e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007422:	4619      	mov	r1, r3
 8007424:	4b35      	ldr	r3, [pc, #212]	@ (80074fc <USB_DeactivateEndpoint+0x1b0>)
 8007426:	4013      	ands	r3, r2
 8007428:	600b      	str	r3, [r1, #0]
 800742a:	e060      	b.n	80074ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	015a      	lsls	r2, r3, #5
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	4413      	add	r3, r2
 8007434:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800743e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007442:	d11f      	bne.n	8007484 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	015a      	lsls	r2, r3, #5
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	4413      	add	r3, r2
 800744c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	0151      	lsls	r1, r2, #5
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	440a      	add	r2, r1
 800745a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800745e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007462:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	015a      	lsls	r2, r3, #5
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	4413      	add	r3, r2
 800746c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68ba      	ldr	r2, [r7, #8]
 8007474:	0151      	lsls	r1, r2, #5
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	440a      	add	r2, r1
 800747a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800747e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007482:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800748a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	f003 030f 	and.w	r3, r3, #15
 8007494:	2101      	movs	r1, #1
 8007496:	fa01 f303 	lsl.w	r3, r1, r3
 800749a:	041b      	lsls	r3, r3, #16
 800749c:	43db      	mvns	r3, r3
 800749e:	68f9      	ldr	r1, [r7, #12]
 80074a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80074a4:	4013      	ands	r3, r2
 80074a6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074ae:	69da      	ldr	r2, [r3, #28]
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	f003 030f 	and.w	r3, r3, #15
 80074b8:	2101      	movs	r1, #1
 80074ba:	fa01 f303 	lsl.w	r3, r1, r3
 80074be:	041b      	lsls	r3, r3, #16
 80074c0:	43db      	mvns	r3, r3
 80074c2:	68f9      	ldr	r1, [r7, #12]
 80074c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80074c8:	4013      	ands	r3, r2
 80074ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	015a      	lsls	r2, r3, #5
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	0159      	lsls	r1, r3, #5
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	440b      	add	r3, r1
 80074e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074e6:	4619      	mov	r1, r3
 80074e8:	4b05      	ldr	r3, [pc, #20]	@ (8007500 <USB_DeactivateEndpoint+0x1b4>)
 80074ea:	4013      	ands	r3, r2
 80074ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3714      	adds	r7, #20
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr
 80074fc:	ec337800 	.word	0xec337800
 8007500:	eff37800 	.word	0xeff37800

08007504 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b08a      	sub	sp, #40	@ 0x28
 8007508:	af02      	add	r7, sp, #8
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	4613      	mov	r3, r2
 8007510:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	785b      	ldrb	r3, [r3, #1]
 8007520:	2b01      	cmp	r3, #1
 8007522:	f040 817f 	bne.w	8007824 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d132      	bne.n	8007594 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	015a      	lsls	r2, r3, #5
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	4413      	add	r3, r2
 8007536:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	69ba      	ldr	r2, [r7, #24]
 800753e:	0151      	lsls	r1, r2, #5
 8007540:	69fa      	ldr	r2, [r7, #28]
 8007542:	440a      	add	r2, r1
 8007544:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007548:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800754c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007550:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	015a      	lsls	r2, r3, #5
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	4413      	add	r3, r2
 800755a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	69ba      	ldr	r2, [r7, #24]
 8007562:	0151      	lsls	r1, r2, #5
 8007564:	69fa      	ldr	r2, [r7, #28]
 8007566:	440a      	add	r2, r1
 8007568:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800756c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007570:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	015a      	lsls	r2, r3, #5
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	4413      	add	r3, r2
 800757a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	69ba      	ldr	r2, [r7, #24]
 8007582:	0151      	lsls	r1, r2, #5
 8007584:	69fa      	ldr	r2, [r7, #28]
 8007586:	440a      	add	r2, r1
 8007588:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800758c:	0cdb      	lsrs	r3, r3, #19
 800758e:	04db      	lsls	r3, r3, #19
 8007590:	6113      	str	r3, [r2, #16]
 8007592:	e097      	b.n	80076c4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	015a      	lsls	r2, r3, #5
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	4413      	add	r3, r2
 800759c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	69ba      	ldr	r2, [r7, #24]
 80075a4:	0151      	lsls	r1, r2, #5
 80075a6:	69fa      	ldr	r2, [r7, #28]
 80075a8:	440a      	add	r2, r1
 80075aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075ae:	0cdb      	lsrs	r3, r3, #19
 80075b0:	04db      	lsls	r3, r3, #19
 80075b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	015a      	lsls	r2, r3, #5
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	4413      	add	r3, r2
 80075bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	69ba      	ldr	r2, [r7, #24]
 80075c4:	0151      	lsls	r1, r2, #5
 80075c6:	69fa      	ldr	r2, [r7, #28]
 80075c8:	440a      	add	r2, r1
 80075ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075ce:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80075d2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80075d6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d11a      	bne.n	8007614 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	691a      	ldr	r2, [r3, #16]
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d903      	bls.n	80075f2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	689a      	ldr	r2, [r3, #8]
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	015a      	lsls	r2, r3, #5
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	4413      	add	r3, r2
 80075fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	69ba      	ldr	r2, [r7, #24]
 8007602:	0151      	lsls	r1, r2, #5
 8007604:	69fa      	ldr	r2, [r7, #28]
 8007606:	440a      	add	r2, r1
 8007608:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800760c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007610:	6113      	str	r3, [r2, #16]
 8007612:	e044      	b.n	800769e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	691a      	ldr	r2, [r3, #16]
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	4413      	add	r3, r2
 800761e:	1e5a      	subs	r2, r3, #1
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	fbb2 f3f3 	udiv	r3, r2, r3
 8007628:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	015a      	lsls	r2, r3, #5
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	4413      	add	r3, r2
 8007632:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007636:	691a      	ldr	r2, [r3, #16]
 8007638:	8afb      	ldrh	r3, [r7, #22]
 800763a:	04d9      	lsls	r1, r3, #19
 800763c:	4ba4      	ldr	r3, [pc, #656]	@ (80078d0 <USB_EPStartXfer+0x3cc>)
 800763e:	400b      	ands	r3, r1
 8007640:	69b9      	ldr	r1, [r7, #24]
 8007642:	0148      	lsls	r0, r1, #5
 8007644:	69f9      	ldr	r1, [r7, #28]
 8007646:	4401      	add	r1, r0
 8007648:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800764c:	4313      	orrs	r3, r2
 800764e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	791b      	ldrb	r3, [r3, #4]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d122      	bne.n	800769e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	015a      	lsls	r2, r3, #5
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	4413      	add	r3, r2
 8007660:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	69ba      	ldr	r2, [r7, #24]
 8007668:	0151      	lsls	r1, r2, #5
 800766a:	69fa      	ldr	r2, [r7, #28]
 800766c:	440a      	add	r2, r1
 800766e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007672:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007676:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	015a      	lsls	r2, r3, #5
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	4413      	add	r3, r2
 8007680:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007684:	691a      	ldr	r2, [r3, #16]
 8007686:	8afb      	ldrh	r3, [r7, #22]
 8007688:	075b      	lsls	r3, r3, #29
 800768a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800768e:	69b9      	ldr	r1, [r7, #24]
 8007690:	0148      	lsls	r0, r1, #5
 8007692:	69f9      	ldr	r1, [r7, #28]
 8007694:	4401      	add	r1, r0
 8007696:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800769a:	4313      	orrs	r3, r2
 800769c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	015a      	lsls	r2, r3, #5
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	4413      	add	r3, r2
 80076a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076aa:	691a      	ldr	r2, [r3, #16]
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076b4:	69b9      	ldr	r1, [r7, #24]
 80076b6:	0148      	lsls	r0, r1, #5
 80076b8:	69f9      	ldr	r1, [r7, #28]
 80076ba:	4401      	add	r1, r0
 80076bc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80076c0:	4313      	orrs	r3, r2
 80076c2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80076c4:	79fb      	ldrb	r3, [r7, #7]
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d14b      	bne.n	8007762 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	69db      	ldr	r3, [r3, #28]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d009      	beq.n	80076e6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	015a      	lsls	r2, r3, #5
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	4413      	add	r3, r2
 80076da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076de:	461a      	mov	r2, r3
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	69db      	ldr	r3, [r3, #28]
 80076e4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	791b      	ldrb	r3, [r3, #4]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d128      	bne.n	8007740 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d110      	bne.n	8007720 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	015a      	lsls	r2, r3, #5
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	4413      	add	r3, r2
 8007706:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	69ba      	ldr	r2, [r7, #24]
 800770e:	0151      	lsls	r1, r2, #5
 8007710:	69fa      	ldr	r2, [r7, #28]
 8007712:	440a      	add	r2, r1
 8007714:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007718:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800771c:	6013      	str	r3, [r2, #0]
 800771e:	e00f      	b.n	8007740 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	015a      	lsls	r2, r3, #5
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	4413      	add	r3, r2
 8007728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	69ba      	ldr	r2, [r7, #24]
 8007730:	0151      	lsls	r1, r2, #5
 8007732:	69fa      	ldr	r2, [r7, #28]
 8007734:	440a      	add	r2, r1
 8007736:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800773a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800773e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	015a      	lsls	r2, r3, #5
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	4413      	add	r3, r2
 8007748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	69ba      	ldr	r2, [r7, #24]
 8007750:	0151      	lsls	r1, r2, #5
 8007752:	69fa      	ldr	r2, [r7, #28]
 8007754:	440a      	add	r2, r1
 8007756:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800775a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800775e:	6013      	str	r3, [r2, #0]
 8007760:	e166      	b.n	8007a30 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	015a      	lsls	r2, r3, #5
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	4413      	add	r3, r2
 800776a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	69ba      	ldr	r2, [r7, #24]
 8007772:	0151      	lsls	r1, r2, #5
 8007774:	69fa      	ldr	r2, [r7, #28]
 8007776:	440a      	add	r2, r1
 8007778:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800777c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007780:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	791b      	ldrb	r3, [r3, #4]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d015      	beq.n	80077b6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	2b00      	cmp	r3, #0
 8007790:	f000 814e 	beq.w	8007a30 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800779a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	f003 030f 	and.w	r3, r3, #15
 80077a4:	2101      	movs	r1, #1
 80077a6:	fa01 f303 	lsl.w	r3, r1, r3
 80077aa:	69f9      	ldr	r1, [r7, #28]
 80077ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80077b0:	4313      	orrs	r3, r2
 80077b2:	634b      	str	r3, [r1, #52]	@ 0x34
 80077b4:	e13c      	b.n	8007a30 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d110      	bne.n	80077e8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	015a      	lsls	r2, r3, #5
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	4413      	add	r3, r2
 80077ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	69ba      	ldr	r2, [r7, #24]
 80077d6:	0151      	lsls	r1, r2, #5
 80077d8:	69fa      	ldr	r2, [r7, #28]
 80077da:	440a      	add	r2, r1
 80077dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80077e4:	6013      	str	r3, [r2, #0]
 80077e6:	e00f      	b.n	8007808 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	015a      	lsls	r2, r3, #5
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	4413      	add	r3, r2
 80077f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	69ba      	ldr	r2, [r7, #24]
 80077f8:	0151      	lsls	r1, r2, #5
 80077fa:	69fa      	ldr	r2, [r7, #28]
 80077fc:	440a      	add	r2, r1
 80077fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007802:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007806:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	68d9      	ldr	r1, [r3, #12]
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	781a      	ldrb	r2, [r3, #0]
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	b298      	uxth	r0, r3
 8007816:	79fb      	ldrb	r3, [r7, #7]
 8007818:	9300      	str	r3, [sp, #0]
 800781a:	4603      	mov	r3, r0
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f000 f9b9 	bl	8007b94 <USB_WritePacket>
 8007822:	e105      	b.n	8007a30 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	015a      	lsls	r2, r3, #5
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	4413      	add	r3, r2
 800782c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	69ba      	ldr	r2, [r7, #24]
 8007834:	0151      	lsls	r1, r2, #5
 8007836:	69fa      	ldr	r2, [r7, #28]
 8007838:	440a      	add	r2, r1
 800783a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800783e:	0cdb      	lsrs	r3, r3, #19
 8007840:	04db      	lsls	r3, r3, #19
 8007842:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	015a      	lsls	r2, r3, #5
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	4413      	add	r3, r2
 800784c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	69ba      	ldr	r2, [r7, #24]
 8007854:	0151      	lsls	r1, r2, #5
 8007856:	69fa      	ldr	r2, [r7, #28]
 8007858:	440a      	add	r2, r1
 800785a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800785e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007862:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007866:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d132      	bne.n	80078d4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d003      	beq.n	800787e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	689a      	ldr	r2, [r3, #8]
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	689a      	ldr	r2, [r3, #8]
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	015a      	lsls	r2, r3, #5
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	4413      	add	r3, r2
 800788e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007892:	691a      	ldr	r2, [r3, #16]
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	6a1b      	ldr	r3, [r3, #32]
 8007898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800789c:	69b9      	ldr	r1, [r7, #24]
 800789e:	0148      	lsls	r0, r1, #5
 80078a0:	69f9      	ldr	r1, [r7, #28]
 80078a2:	4401      	add	r1, r0
 80078a4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80078a8:	4313      	orrs	r3, r2
 80078aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	015a      	lsls	r2, r3, #5
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	4413      	add	r3, r2
 80078b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	69ba      	ldr	r2, [r7, #24]
 80078bc:	0151      	lsls	r1, r2, #5
 80078be:	69fa      	ldr	r2, [r7, #28]
 80078c0:	440a      	add	r2, r1
 80078c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80078ca:	6113      	str	r3, [r2, #16]
 80078cc:	e062      	b.n	8007994 <USB_EPStartXfer+0x490>
 80078ce:	bf00      	nop
 80078d0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d123      	bne.n	8007924 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	015a      	lsls	r2, r3, #5
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	4413      	add	r3, r2
 80078e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078e8:	691a      	ldr	r2, [r3, #16]
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078f2:	69b9      	ldr	r1, [r7, #24]
 80078f4:	0148      	lsls	r0, r1, #5
 80078f6:	69f9      	ldr	r1, [r7, #28]
 80078f8:	4401      	add	r1, r0
 80078fa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80078fe:	4313      	orrs	r3, r2
 8007900:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	015a      	lsls	r2, r3, #5
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	4413      	add	r3, r2
 800790a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	69ba      	ldr	r2, [r7, #24]
 8007912:	0151      	lsls	r1, r2, #5
 8007914:	69fa      	ldr	r2, [r7, #28]
 8007916:	440a      	add	r2, r1
 8007918:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800791c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007920:	6113      	str	r3, [r2, #16]
 8007922:	e037      	b.n	8007994 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	691a      	ldr	r2, [r3, #16]
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	4413      	add	r3, r2
 800792e:	1e5a      	subs	r2, r3, #1
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	fbb2 f3f3 	udiv	r3, r2, r3
 8007938:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	8afa      	ldrh	r2, [r7, #22]
 8007940:	fb03 f202 	mul.w	r2, r3, r2
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	015a      	lsls	r2, r3, #5
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	4413      	add	r3, r2
 8007950:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007954:	691a      	ldr	r2, [r3, #16]
 8007956:	8afb      	ldrh	r3, [r7, #22]
 8007958:	04d9      	lsls	r1, r3, #19
 800795a:	4b38      	ldr	r3, [pc, #224]	@ (8007a3c <USB_EPStartXfer+0x538>)
 800795c:	400b      	ands	r3, r1
 800795e:	69b9      	ldr	r1, [r7, #24]
 8007960:	0148      	lsls	r0, r1, #5
 8007962:	69f9      	ldr	r1, [r7, #28]
 8007964:	4401      	add	r1, r0
 8007966:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800796a:	4313      	orrs	r3, r2
 800796c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	015a      	lsls	r2, r3, #5
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	4413      	add	r3, r2
 8007976:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800797a:	691a      	ldr	r2, [r3, #16]
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	6a1b      	ldr	r3, [r3, #32]
 8007980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007984:	69b9      	ldr	r1, [r7, #24]
 8007986:	0148      	lsls	r0, r1, #5
 8007988:	69f9      	ldr	r1, [r7, #28]
 800798a:	4401      	add	r1, r0
 800798c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007990:	4313      	orrs	r3, r2
 8007992:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007994:	79fb      	ldrb	r3, [r7, #7]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d10d      	bne.n	80079b6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d009      	beq.n	80079b6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	68d9      	ldr	r1, [r3, #12]
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	015a      	lsls	r2, r3, #5
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	4413      	add	r3, r2
 80079ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079b2:	460a      	mov	r2, r1
 80079b4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	791b      	ldrb	r3, [r3, #4]
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d128      	bne.n	8007a10 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d110      	bne.n	80079f0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	015a      	lsls	r2, r3, #5
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	4413      	add	r3, r2
 80079d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	69ba      	ldr	r2, [r7, #24]
 80079de:	0151      	lsls	r1, r2, #5
 80079e0:	69fa      	ldr	r2, [r7, #28]
 80079e2:	440a      	add	r2, r1
 80079e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079e8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80079ec:	6013      	str	r3, [r2, #0]
 80079ee:	e00f      	b.n	8007a10 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	015a      	lsls	r2, r3, #5
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	4413      	add	r3, r2
 80079f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	69ba      	ldr	r2, [r7, #24]
 8007a00:	0151      	lsls	r1, r2, #5
 8007a02:	69fa      	ldr	r2, [r7, #28]
 8007a04:	440a      	add	r2, r1
 8007a06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a0e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	015a      	lsls	r2, r3, #5
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	4413      	add	r3, r2
 8007a18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	69ba      	ldr	r2, [r7, #24]
 8007a20:	0151      	lsls	r1, r2, #5
 8007a22:	69fa      	ldr	r2, [r7, #28]
 8007a24:	440a      	add	r2, r1
 8007a26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a2a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007a2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3720      	adds	r7, #32
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	1ff80000 	.word	0x1ff80000

08007a40 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b087      	sub	sp, #28
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	785b      	ldrb	r3, [r3, #1]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d14a      	bne.n	8007af4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	015a      	lsls	r2, r3, #5
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	4413      	add	r3, r2
 8007a68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a76:	f040 8086 	bne.w	8007b86 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	015a      	lsls	r2, r3, #5
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	4413      	add	r3, r2
 8007a84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	683a      	ldr	r2, [r7, #0]
 8007a8c:	7812      	ldrb	r2, [r2, #0]
 8007a8e:	0151      	lsls	r1, r2, #5
 8007a90:	693a      	ldr	r2, [r7, #16]
 8007a92:	440a      	add	r2, r1
 8007a94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a98:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007a9c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	015a      	lsls	r2, r3, #5
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	683a      	ldr	r2, [r7, #0]
 8007ab0:	7812      	ldrb	r2, [r2, #0]
 8007ab2:	0151      	lsls	r1, r2, #5
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	440a      	add	r2, r1
 8007ab8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007abc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ac0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d902      	bls.n	8007ad8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	75fb      	strb	r3, [r7, #23]
          break;
 8007ad6:	e056      	b.n	8007b86 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	015a      	lsls	r2, r3, #5
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007aec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007af0:	d0e7      	beq.n	8007ac2 <USB_EPStopXfer+0x82>
 8007af2:	e048      	b.n	8007b86 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	015a      	lsls	r2, r3, #5
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	4413      	add	r3, r2
 8007afe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b0c:	d13b      	bne.n	8007b86 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	015a      	lsls	r2, r3, #5
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	4413      	add	r3, r2
 8007b18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	683a      	ldr	r2, [r7, #0]
 8007b20:	7812      	ldrb	r2, [r2, #0]
 8007b22:	0151      	lsls	r1, r2, #5
 8007b24:	693a      	ldr	r2, [r7, #16]
 8007b26:	440a      	add	r2, r1
 8007b28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b2c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007b30:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	015a      	lsls	r2, r3, #5
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	683a      	ldr	r2, [r7, #0]
 8007b44:	7812      	ldrb	r2, [r2, #0]
 8007b46:	0151      	lsls	r1, r2, #5
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	440a      	add	r2, r1
 8007b4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b54:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	3301      	adds	r3, #1
 8007b5a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d902      	bls.n	8007b6c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	75fb      	strb	r3, [r7, #23]
          break;
 8007b6a:	e00c      	b.n	8007b86 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	015a      	lsls	r2, r3, #5
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	4413      	add	r3, r2
 8007b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b84:	d0e7      	beq.n	8007b56 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	371c      	adds	r7, #28
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b089      	sub	sp, #36	@ 0x24
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	4611      	mov	r1, r2
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	71fb      	strb	r3, [r7, #7]
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007bb2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d123      	bne.n	8007c02 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007bba:	88bb      	ldrh	r3, [r7, #4]
 8007bbc:	3303      	adds	r3, #3
 8007bbe:	089b      	lsrs	r3, r3, #2
 8007bc0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	61bb      	str	r3, [r7, #24]
 8007bc6:	e018      	b.n	8007bfa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007bc8:	79fb      	ldrb	r3, [r7, #7]
 8007bca:	031a      	lsls	r2, r3, #12
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	4413      	add	r3, r2
 8007bd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	3301      	adds	r3, #1
 8007be0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	3301      	adds	r3, #1
 8007be6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	3301      	adds	r3, #1
 8007bec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	61bb      	str	r3, [r7, #24]
 8007bfa:	69ba      	ldr	r2, [r7, #24]
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d3e2      	bcc.n	8007bc8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3724      	adds	r7, #36	@ 0x24
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b08b      	sub	sp, #44	@ 0x2c
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007c26:	88fb      	ldrh	r3, [r7, #6]
 8007c28:	089b      	lsrs	r3, r3, #2
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007c2e:	88fb      	ldrh	r3, [r7, #6]
 8007c30:	f003 0303 	and.w	r3, r3, #3
 8007c34:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007c36:	2300      	movs	r3, #0
 8007c38:	623b      	str	r3, [r7, #32]
 8007c3a:	e014      	b.n	8007c66 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c46:	601a      	str	r2, [r3, #0]
    pDest++;
 8007c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c50:	3301      	adds	r3, #1
 8007c52:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c56:	3301      	adds	r3, #1
 8007c58:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007c60:	6a3b      	ldr	r3, [r7, #32]
 8007c62:	3301      	adds	r3, #1
 8007c64:	623b      	str	r3, [r7, #32]
 8007c66:	6a3a      	ldr	r2, [r7, #32]
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d3e6      	bcc.n	8007c3c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007c6e:	8bfb      	ldrh	r3, [r7, #30]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d01e      	beq.n	8007cb2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007c74:	2300      	movs	r3, #0
 8007c76:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c7e:	461a      	mov	r2, r3
 8007c80:	f107 0310 	add.w	r3, r7, #16
 8007c84:	6812      	ldr	r2, [r2, #0]
 8007c86:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007c88:	693a      	ldr	r2, [r7, #16]
 8007c8a:	6a3b      	ldr	r3, [r7, #32]
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	00db      	lsls	r3, r3, #3
 8007c90:	fa22 f303 	lsr.w	r3, r2, r3
 8007c94:	b2da      	uxtb	r2, r3
 8007c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c98:	701a      	strb	r2, [r3, #0]
      i++;
 8007c9a:	6a3b      	ldr	r3, [r7, #32]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007ca6:	8bfb      	ldrh	r3, [r7, #30]
 8007ca8:	3b01      	subs	r3, #1
 8007caa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007cac:	8bfb      	ldrh	r3, [r7, #30]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d1ea      	bne.n	8007c88 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	372c      	adds	r7, #44	@ 0x2c
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	785b      	ldrb	r3, [r3, #1]
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d12c      	bne.n	8007d36 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	015a      	lsls	r2, r3, #5
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	db12      	blt.n	8007d14 <USB_EPSetStall+0x54>
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00f      	beq.n	8007d14 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	015a      	lsls	r2, r3, #5
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	68ba      	ldr	r2, [r7, #8]
 8007d04:	0151      	lsls	r1, r2, #5
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	440a      	add	r2, r1
 8007d0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d0e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007d12:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	015a      	lsls	r2, r3, #5
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	68ba      	ldr	r2, [r7, #8]
 8007d24:	0151      	lsls	r1, r2, #5
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	440a      	add	r2, r1
 8007d2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007d32:	6013      	str	r3, [r2, #0]
 8007d34:	e02b      	b.n	8007d8e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	015a      	lsls	r2, r3, #5
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	db12      	blt.n	8007d6e <USB_EPSetStall+0xae>
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00f      	beq.n	8007d6e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	015a      	lsls	r2, r3, #5
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	4413      	add	r3, r2
 8007d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	0151      	lsls	r1, r2, #5
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	440a      	add	r2, r1
 8007d64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d68:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007d6c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	015a      	lsls	r2, r3, #5
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	4413      	add	r3, r2
 8007d76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	0151      	lsls	r1, r2, #5
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	440a      	add	r2, r1
 8007d84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007d8c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3714      	adds	r7, #20
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b085      	sub	sp, #20
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	785b      	ldrb	r3, [r3, #1]
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d128      	bne.n	8007e0a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	015a      	lsls	r2, r3, #5
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68ba      	ldr	r2, [r7, #8]
 8007dc8:	0151      	lsls	r1, r2, #5
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	440a      	add	r2, r1
 8007dce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007dd2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007dd6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	791b      	ldrb	r3, [r3, #4]
 8007ddc:	2b03      	cmp	r3, #3
 8007dde:	d003      	beq.n	8007de8 <USB_EPClearStall+0x4c>
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	791b      	ldrb	r3, [r3, #4]
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	d138      	bne.n	8007e5a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	015a      	lsls	r2, r3, #5
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	4413      	add	r3, r2
 8007df0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	0151      	lsls	r1, r2, #5
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	440a      	add	r2, r1
 8007dfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e06:	6013      	str	r3, [r2, #0]
 8007e08:	e027      	b.n	8007e5a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	015a      	lsls	r2, r3, #5
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	4413      	add	r3, r2
 8007e12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68ba      	ldr	r2, [r7, #8]
 8007e1a:	0151      	lsls	r1, r2, #5
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	440a      	add	r2, r1
 8007e20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e24:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007e28:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	791b      	ldrb	r3, [r3, #4]
 8007e2e:	2b03      	cmp	r3, #3
 8007e30:	d003      	beq.n	8007e3a <USB_EPClearStall+0x9e>
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	791b      	ldrb	r3, [r3, #4]
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d10f      	bne.n	8007e5a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	015a      	lsls	r2, r3, #5
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	4413      	add	r3, r2
 8007e42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	68ba      	ldr	r2, [r7, #8]
 8007e4a:	0151      	lsls	r1, r2, #5
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	440a      	add	r2, r1
 8007e50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e58:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3714      	adds	r7, #20
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	460b      	mov	r3, r1
 8007e72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e86:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007e8a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	78fb      	ldrb	r3, [r7, #3]
 8007e96:	011b      	lsls	r3, r3, #4
 8007e98:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007e9c:	68f9      	ldr	r1, [r7, #12]
 8007e9e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3714      	adds	r7, #20
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007ece:	f023 0303 	bic.w	r3, r3, #3
 8007ed2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ee2:	f023 0302 	bic.w	r3, r3, #2
 8007ee6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3714      	adds	r7, #20
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b085      	sub	sp, #20
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	68fa      	ldr	r2, [r7, #12]
 8007f0c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007f10:	f023 0303 	bic.w	r3, r3, #3
 8007f14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	68fa      	ldr	r2, [r7, #12]
 8007f20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f24:	f043 0302 	orr.w	r3, r3, #2
 8007f28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3714      	adds	r7, #20
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b085      	sub	sp, #20
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	695b      	ldr	r3, [r3, #20]
 8007f44:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007f50:	68fb      	ldr	r3, [r7, #12]
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3714      	adds	r7, #20
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr

08007f5e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f5e:	b480      	push	{r7}
 8007f60:	b085      	sub	sp, #20
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f70:	699b      	ldr	r3, [r3, #24]
 8007f72:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f7a:	69db      	ldr	r3, [r3, #28]
 8007f7c:	68ba      	ldr	r2, [r7, #8]
 8007f7e:	4013      	ands	r3, r2
 8007f80:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	0c1b      	lsrs	r3, r3, #16
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3714      	adds	r7, #20
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr

08007f92 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f92:	b480      	push	{r7}
 8007f94:	b085      	sub	sp, #20
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fa4:	699b      	ldr	r3, [r3, #24]
 8007fa6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fae:	69db      	ldr	r3, [r3, #28]
 8007fb0:	68ba      	ldr	r2, [r7, #8]
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	b29b      	uxth	r3, r3
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3714      	adds	r7, #20
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr

08007fc6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b085      	sub	sp, #20
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
 8007fce:	460b      	mov	r3, r1
 8007fd0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007fd6:	78fb      	ldrb	r3, [r7, #3]
 8007fd8:	015a      	lsls	r2, r3, #5
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	4413      	add	r3, r2
 8007fde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fec:	695b      	ldr	r3, [r3, #20]
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007ff4:	68bb      	ldr	r3, [r7, #8]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3714      	adds	r7, #20
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr

08008002 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008002:	b480      	push	{r7}
 8008004:	b087      	sub	sp, #28
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 800800a:	460b      	mov	r3, r1
 800800c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008024:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008026:	78fb      	ldrb	r3, [r7, #3]
 8008028:	f003 030f 	and.w	r3, r3, #15
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	fa22 f303 	lsr.w	r3, r2, r3
 8008032:	01db      	lsls	r3, r3, #7
 8008034:	b2db      	uxtb	r3, r3
 8008036:	693a      	ldr	r2, [r7, #16]
 8008038:	4313      	orrs	r3, r2
 800803a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800803c:	78fb      	ldrb	r3, [r7, #3]
 800803e:	015a      	lsls	r2, r3, #5
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	4413      	add	r3, r2
 8008044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	693a      	ldr	r2, [r7, #16]
 800804c:	4013      	ands	r3, r2
 800804e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008050:	68bb      	ldr	r3, [r7, #8]
}
 8008052:	4618      	mov	r0, r3
 8008054:	371c      	adds	r7, #28
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800805e:	b480      	push	{r7}
 8008060:	b083      	sub	sp, #12
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	f003 0301 	and.w	r3, r3, #1
}
 800806e:	4618      	mov	r0, r3
 8008070:	370c      	adds	r7, #12
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr

0800807a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800807a:	b480      	push	{r7}
 800807c:	b085      	sub	sp, #20
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008094:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008098:	f023 0307 	bic.w	r3, r3, #7
 800809c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80080ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3714      	adds	r7, #20
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b087      	sub	sp, #28
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	460b      	mov	r3, r1
 80080ca:	607a      	str	r2, [r7, #4]
 80080cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	333c      	adds	r3, #60	@ 0x3c
 80080d6:	3304      	adds	r3, #4
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	4a26      	ldr	r2, [pc, #152]	@ (8008178 <USB_EP0_OutStart+0xb8>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d90a      	bls.n	80080fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080f4:	d101      	bne.n	80080fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	e037      	b.n	800816a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008100:	461a      	mov	r2, r3
 8008102:	2300      	movs	r3, #0
 8008104:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	697a      	ldr	r2, [r7, #20]
 8008110:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008114:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008118:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	697a      	ldr	r2, [r7, #20]
 8008124:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008128:	f043 0318 	orr.w	r3, r3, #24
 800812c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	697a      	ldr	r2, [r7, #20]
 8008138:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800813c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008140:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008142:	7afb      	ldrb	r3, [r7, #11]
 8008144:	2b01      	cmp	r3, #1
 8008146:	d10f      	bne.n	8008168 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800814e:	461a      	mov	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	697a      	ldr	r2, [r7, #20]
 800815e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008162:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008166:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	371c      	adds	r7, #28
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop
 8008178:	4f54300a 	.word	0x4f54300a

0800817c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008184:	2300      	movs	r3, #0
 8008186:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	3301      	adds	r3, #1
 800818c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008194:	d901      	bls.n	800819a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008196:	2303      	movs	r3, #3
 8008198:	e022      	b.n	80081e0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	daf2      	bge.n	8008188 <USB_CoreReset+0xc>

  count = 10U;
 80081a2:	230a      	movs	r3, #10
 80081a4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80081a6:	e002      	b.n	80081ae <USB_CoreReset+0x32>
  {
    count--;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	3b01      	subs	r3, #1
 80081ac:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1f9      	bne.n	80081a8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	f043 0201 	orr.w	r2, r3, #1
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	3301      	adds	r3, #1
 80081c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081cc:	d901      	bls.n	80081d2 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80081ce:	2303      	movs	r3, #3
 80081d0:	e006      	b.n	80081e0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	f003 0301 	and.w	r3, r3, #1
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d0f0      	beq.n	80081c0 <USB_CoreReset+0x44>

  return HAL_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3714      	adds	r7, #20
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	460b      	mov	r3, r1
 80081f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80081f8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80081fc:	f002 fd20 	bl	800ac40 <USBD_static_malloc>
 8008200:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d109      	bne.n	800821c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	32b0      	adds	r2, #176	@ 0xb0
 8008212:	2100      	movs	r1, #0
 8008214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008218:	2302      	movs	r3, #2
 800821a:	e0d4      	b.n	80083c6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800821c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008220:	2100      	movs	r1, #0
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f002 fe28 	bl	800ae78 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	32b0      	adds	r2, #176	@ 0xb0
 8008232:	68f9      	ldr	r1, [r7, #12]
 8008234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	32b0      	adds	r2, #176	@ 0xb0
 8008242:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	7c1b      	ldrb	r3, [r3, #16]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d138      	bne.n	80082c6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008254:	4b5e      	ldr	r3, [pc, #376]	@ (80083d0 <USBD_CDC_Init+0x1e4>)
 8008256:	7819      	ldrb	r1, [r3, #0]
 8008258:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800825c:	2202      	movs	r2, #2
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f002 fbcb 	bl	800a9fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008264:	4b5a      	ldr	r3, [pc, #360]	@ (80083d0 <USBD_CDC_Init+0x1e4>)
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	f003 020f 	and.w	r2, r3, #15
 800826c:	6879      	ldr	r1, [r7, #4]
 800826e:	4613      	mov	r3, r2
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	4413      	add	r3, r2
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	440b      	add	r3, r1
 8008278:	3323      	adds	r3, #35	@ 0x23
 800827a:	2201      	movs	r2, #1
 800827c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800827e:	4b55      	ldr	r3, [pc, #340]	@ (80083d4 <USBD_CDC_Init+0x1e8>)
 8008280:	7819      	ldrb	r1, [r3, #0]
 8008282:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008286:	2202      	movs	r2, #2
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f002 fbb6 	bl	800a9fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800828e:	4b51      	ldr	r3, [pc, #324]	@ (80083d4 <USBD_CDC_Init+0x1e8>)
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	f003 020f 	and.w	r2, r3, #15
 8008296:	6879      	ldr	r1, [r7, #4]
 8008298:	4613      	mov	r3, r2
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	4413      	add	r3, r2
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	440b      	add	r3, r1
 80082a2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80082a6:	2201      	movs	r2, #1
 80082a8:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80082aa:	4b4b      	ldr	r3, [pc, #300]	@ (80083d8 <USBD_CDC_Init+0x1ec>)
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	f003 020f 	and.w	r2, r3, #15
 80082b2:	6879      	ldr	r1, [r7, #4]
 80082b4:	4613      	mov	r3, r2
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	4413      	add	r3, r2
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	440b      	add	r3, r1
 80082be:	331c      	adds	r3, #28
 80082c0:	2210      	movs	r2, #16
 80082c2:	601a      	str	r2, [r3, #0]
 80082c4:	e035      	b.n	8008332 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80082c6:	4b42      	ldr	r3, [pc, #264]	@ (80083d0 <USBD_CDC_Init+0x1e4>)
 80082c8:	7819      	ldrb	r1, [r3, #0]
 80082ca:	2340      	movs	r3, #64	@ 0x40
 80082cc:	2202      	movs	r2, #2
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f002 fb93 	bl	800a9fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80082d4:	4b3e      	ldr	r3, [pc, #248]	@ (80083d0 <USBD_CDC_Init+0x1e4>)
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	f003 020f 	and.w	r2, r3, #15
 80082dc:	6879      	ldr	r1, [r7, #4]
 80082de:	4613      	mov	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4413      	add	r3, r2
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	440b      	add	r3, r1
 80082e8:	3323      	adds	r3, #35	@ 0x23
 80082ea:	2201      	movs	r2, #1
 80082ec:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80082ee:	4b39      	ldr	r3, [pc, #228]	@ (80083d4 <USBD_CDC_Init+0x1e8>)
 80082f0:	7819      	ldrb	r1, [r3, #0]
 80082f2:	2340      	movs	r3, #64	@ 0x40
 80082f4:	2202      	movs	r2, #2
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f002 fb7f 	bl	800a9fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80082fc:	4b35      	ldr	r3, [pc, #212]	@ (80083d4 <USBD_CDC_Init+0x1e8>)
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	f003 020f 	and.w	r2, r3, #15
 8008304:	6879      	ldr	r1, [r7, #4]
 8008306:	4613      	mov	r3, r2
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	4413      	add	r3, r2
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	440b      	add	r3, r1
 8008310:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008314:	2201      	movs	r2, #1
 8008316:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008318:	4b2f      	ldr	r3, [pc, #188]	@ (80083d8 <USBD_CDC_Init+0x1ec>)
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	f003 020f 	and.w	r2, r3, #15
 8008320:	6879      	ldr	r1, [r7, #4]
 8008322:	4613      	mov	r3, r2
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	4413      	add	r3, r2
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	440b      	add	r3, r1
 800832c:	331c      	adds	r3, #28
 800832e:	2210      	movs	r2, #16
 8008330:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008332:	4b29      	ldr	r3, [pc, #164]	@ (80083d8 <USBD_CDC_Init+0x1ec>)
 8008334:	7819      	ldrb	r1, [r3, #0]
 8008336:	2308      	movs	r3, #8
 8008338:	2203      	movs	r2, #3
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f002 fb5d 	bl	800a9fa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008340:	4b25      	ldr	r3, [pc, #148]	@ (80083d8 <USBD_CDC_Init+0x1ec>)
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	f003 020f 	and.w	r2, r3, #15
 8008348:	6879      	ldr	r1, [r7, #4]
 800834a:	4613      	mov	r3, r2
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	4413      	add	r3, r2
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	440b      	add	r3, r1
 8008354:	3323      	adds	r3, #35	@ 0x23
 8008356:	2201      	movs	r2, #1
 8008358:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2200      	movs	r2, #0
 800835e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	33b0      	adds	r3, #176	@ 0xb0
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	4413      	add	r3, r2
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2200      	movs	r2, #0
 800837a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2200      	movs	r2, #0
 8008382:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800838c:	2b00      	cmp	r3, #0
 800838e:	d101      	bne.n	8008394 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008390:	2302      	movs	r3, #2
 8008392:	e018      	b.n	80083c6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	7c1b      	ldrb	r3, [r3, #16]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d10a      	bne.n	80083b2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800839c:	4b0d      	ldr	r3, [pc, #52]	@ (80083d4 <USBD_CDC_Init+0x1e8>)
 800839e:	7819      	ldrb	r1, [r3, #0]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80083a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f002 fc14 	bl	800abd8 <USBD_LL_PrepareReceive>
 80083b0:	e008      	b.n	80083c4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80083b2:	4b08      	ldr	r3, [pc, #32]	@ (80083d4 <USBD_CDC_Init+0x1e8>)
 80083b4:	7819      	ldrb	r1, [r3, #0]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80083bc:	2340      	movs	r3, #64	@ 0x40
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f002 fc0a 	bl	800abd8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	20000097 	.word	0x20000097
 80083d4:	20000098 	.word	0x20000098
 80083d8:	20000099 	.word	0x20000099

080083dc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	460b      	mov	r3, r1
 80083e6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80083e8:	4b3a      	ldr	r3, [pc, #232]	@ (80084d4 <USBD_CDC_DeInit+0xf8>)
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	4619      	mov	r1, r3
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f002 fb29 	bl	800aa46 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80083f4:	4b37      	ldr	r3, [pc, #220]	@ (80084d4 <USBD_CDC_DeInit+0xf8>)
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	f003 020f 	and.w	r2, r3, #15
 80083fc:	6879      	ldr	r1, [r7, #4]
 80083fe:	4613      	mov	r3, r2
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4413      	add	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	440b      	add	r3, r1
 8008408:	3323      	adds	r3, #35	@ 0x23
 800840a:	2200      	movs	r2, #0
 800840c:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800840e:	4b32      	ldr	r3, [pc, #200]	@ (80084d8 <USBD_CDC_DeInit+0xfc>)
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	4619      	mov	r1, r3
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f002 fb16 	bl	800aa46 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800841a:	4b2f      	ldr	r3, [pc, #188]	@ (80084d8 <USBD_CDC_DeInit+0xfc>)
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	f003 020f 	and.w	r2, r3, #15
 8008422:	6879      	ldr	r1, [r7, #4]
 8008424:	4613      	mov	r3, r2
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4413      	add	r3, r2
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	440b      	add	r3, r1
 800842e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008432:	2200      	movs	r2, #0
 8008434:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008436:	4b29      	ldr	r3, [pc, #164]	@ (80084dc <USBD_CDC_DeInit+0x100>)
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	4619      	mov	r1, r3
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f002 fb02 	bl	800aa46 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008442:	4b26      	ldr	r3, [pc, #152]	@ (80084dc <USBD_CDC_DeInit+0x100>)
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	f003 020f 	and.w	r2, r3, #15
 800844a:	6879      	ldr	r1, [r7, #4]
 800844c:	4613      	mov	r3, r2
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	4413      	add	r3, r2
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	440b      	add	r3, r1
 8008456:	3323      	adds	r3, #35	@ 0x23
 8008458:	2200      	movs	r2, #0
 800845a:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800845c:	4b1f      	ldr	r3, [pc, #124]	@ (80084dc <USBD_CDC_DeInit+0x100>)
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	f003 020f 	and.w	r2, r3, #15
 8008464:	6879      	ldr	r1, [r7, #4]
 8008466:	4613      	mov	r3, r2
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	4413      	add	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	440b      	add	r3, r1
 8008470:	331c      	adds	r3, #28
 8008472:	2200      	movs	r2, #0
 8008474:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	32b0      	adds	r2, #176	@ 0xb0
 8008480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d01f      	beq.n	80084c8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	33b0      	adds	r3, #176	@ 0xb0
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	4413      	add	r3, r2
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	32b0      	adds	r2, #176	@ 0xb0
 80084a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084aa:	4618      	mov	r0, r3
 80084ac:	f002 fbd6 	bl	800ac5c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	32b0      	adds	r2, #176	@ 0xb0
 80084ba:	2100      	movs	r1, #0
 80084bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3708      	adds	r7, #8
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	20000097 	.word	0x20000097
 80084d8:	20000098 	.word	0x20000098
 80084dc:	20000099 	.word	0x20000099

080084e0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b086      	sub	sp, #24
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	32b0      	adds	r2, #176	@ 0xb0
 80084f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80084fa:	2300      	movs	r3, #0
 80084fc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80084fe:	2300      	movs	r3, #0
 8008500:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008502:	2300      	movs	r3, #0
 8008504:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d101      	bne.n	8008510 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800850c:	2303      	movs	r3, #3
 800850e:	e0bf      	b.n	8008690 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008518:	2b00      	cmp	r3, #0
 800851a:	d050      	beq.n	80085be <USBD_CDC_Setup+0xde>
 800851c:	2b20      	cmp	r3, #32
 800851e:	f040 80af 	bne.w	8008680 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	88db      	ldrh	r3, [r3, #6]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d03a      	beq.n	80085a0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	b25b      	sxtb	r3, r3
 8008530:	2b00      	cmp	r3, #0
 8008532:	da1b      	bge.n	800856c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	33b0      	adds	r3, #176	@ 0xb0
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	4413      	add	r3, r2
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	683a      	ldr	r2, [r7, #0]
 8008548:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800854a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800854c:	683a      	ldr	r2, [r7, #0]
 800854e:	88d2      	ldrh	r2, [r2, #6]
 8008550:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	88db      	ldrh	r3, [r3, #6]
 8008556:	2b07      	cmp	r3, #7
 8008558:	bf28      	it	cs
 800855a:	2307      	movcs	r3, #7
 800855c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	89fa      	ldrh	r2, [r7, #14]
 8008562:	4619      	mov	r1, r3
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f001 fda9 	bl	800a0bc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800856a:	e090      	b.n	800868e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	785a      	ldrb	r2, [r3, #1]
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	88db      	ldrh	r3, [r3, #6]
 800857a:	2b3f      	cmp	r3, #63	@ 0x3f
 800857c:	d803      	bhi.n	8008586 <USBD_CDC_Setup+0xa6>
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	88db      	ldrh	r3, [r3, #6]
 8008582:	b2da      	uxtb	r2, r3
 8008584:	e000      	b.n	8008588 <USBD_CDC_Setup+0xa8>
 8008586:	2240      	movs	r2, #64	@ 0x40
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800858e:	6939      	ldr	r1, [r7, #16]
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008596:	461a      	mov	r2, r3
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f001 fdbe 	bl	800a11a <USBD_CtlPrepareRx>
      break;
 800859e:	e076      	b.n	800868e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	33b0      	adds	r3, #176	@ 0xb0
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4413      	add	r3, r2
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	7850      	ldrb	r0, [r2, #1]
 80085b6:	2200      	movs	r2, #0
 80085b8:	6839      	ldr	r1, [r7, #0]
 80085ba:	4798      	blx	r3
      break;
 80085bc:	e067      	b.n	800868e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	785b      	ldrb	r3, [r3, #1]
 80085c2:	2b0b      	cmp	r3, #11
 80085c4:	d851      	bhi.n	800866a <USBD_CDC_Setup+0x18a>
 80085c6:	a201      	add	r2, pc, #4	@ (adr r2, 80085cc <USBD_CDC_Setup+0xec>)
 80085c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085cc:	080085fd 	.word	0x080085fd
 80085d0:	08008679 	.word	0x08008679
 80085d4:	0800866b 	.word	0x0800866b
 80085d8:	0800866b 	.word	0x0800866b
 80085dc:	0800866b 	.word	0x0800866b
 80085e0:	0800866b 	.word	0x0800866b
 80085e4:	0800866b 	.word	0x0800866b
 80085e8:	0800866b 	.word	0x0800866b
 80085ec:	0800866b 	.word	0x0800866b
 80085f0:	0800866b 	.word	0x0800866b
 80085f4:	08008627 	.word	0x08008627
 80085f8:	08008651 	.word	0x08008651
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008602:	b2db      	uxtb	r3, r3
 8008604:	2b03      	cmp	r3, #3
 8008606:	d107      	bne.n	8008618 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008608:	f107 030a 	add.w	r3, r7, #10
 800860c:	2202      	movs	r2, #2
 800860e:	4619      	mov	r1, r3
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f001 fd53 	bl	800a0bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008616:	e032      	b.n	800867e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008618:	6839      	ldr	r1, [r7, #0]
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f001 fcd1 	bl	8009fc2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008620:	2303      	movs	r3, #3
 8008622:	75fb      	strb	r3, [r7, #23]
          break;
 8008624:	e02b      	b.n	800867e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800862c:	b2db      	uxtb	r3, r3
 800862e:	2b03      	cmp	r3, #3
 8008630:	d107      	bne.n	8008642 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008632:	f107 030d 	add.w	r3, r7, #13
 8008636:	2201      	movs	r2, #1
 8008638:	4619      	mov	r1, r3
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f001 fd3e 	bl	800a0bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008640:	e01d      	b.n	800867e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008642:	6839      	ldr	r1, [r7, #0]
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f001 fcbc 	bl	8009fc2 <USBD_CtlError>
            ret = USBD_FAIL;
 800864a:	2303      	movs	r3, #3
 800864c:	75fb      	strb	r3, [r7, #23]
          break;
 800864e:	e016      	b.n	800867e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008656:	b2db      	uxtb	r3, r3
 8008658:	2b03      	cmp	r3, #3
 800865a:	d00f      	beq.n	800867c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800865c:	6839      	ldr	r1, [r7, #0]
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f001 fcaf 	bl	8009fc2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008664:	2303      	movs	r3, #3
 8008666:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008668:	e008      	b.n	800867c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800866a:	6839      	ldr	r1, [r7, #0]
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f001 fca8 	bl	8009fc2 <USBD_CtlError>
          ret = USBD_FAIL;
 8008672:	2303      	movs	r3, #3
 8008674:	75fb      	strb	r3, [r7, #23]
          break;
 8008676:	e002      	b.n	800867e <USBD_CDC_Setup+0x19e>
          break;
 8008678:	bf00      	nop
 800867a:	e008      	b.n	800868e <USBD_CDC_Setup+0x1ae>
          break;
 800867c:	bf00      	nop
      }
      break;
 800867e:	e006      	b.n	800868e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008680:	6839      	ldr	r1, [r7, #0]
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f001 fc9d 	bl	8009fc2 <USBD_CtlError>
      ret = USBD_FAIL;
 8008688:	2303      	movs	r3, #3
 800868a:	75fb      	strb	r3, [r7, #23]
      break;
 800868c:	bf00      	nop
  }

  return (uint8_t)ret;
 800868e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008690:	4618      	mov	r0, r3
 8008692:	3718      	adds	r7, #24
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	460b      	mov	r3, r1
 80086a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80086aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	32b0      	adds	r2, #176	@ 0xb0
 80086b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d101      	bne.n	80086c2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80086be:	2303      	movs	r3, #3
 80086c0:	e065      	b.n	800878e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	32b0      	adds	r2, #176	@ 0xb0
 80086cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086d0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80086d2:	78fb      	ldrb	r3, [r7, #3]
 80086d4:	f003 020f 	and.w	r2, r3, #15
 80086d8:	6879      	ldr	r1, [r7, #4]
 80086da:	4613      	mov	r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	4413      	add	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	440b      	add	r3, r1
 80086e4:	3314      	adds	r3, #20
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d02f      	beq.n	800874c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80086ec:	78fb      	ldrb	r3, [r7, #3]
 80086ee:	f003 020f 	and.w	r2, r3, #15
 80086f2:	6879      	ldr	r1, [r7, #4]
 80086f4:	4613      	mov	r3, r2
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	4413      	add	r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	440b      	add	r3, r1
 80086fe:	3314      	adds	r3, #20
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	78fb      	ldrb	r3, [r7, #3]
 8008704:	f003 010f 	and.w	r1, r3, #15
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	460b      	mov	r3, r1
 800870c:	00db      	lsls	r3, r3, #3
 800870e:	440b      	add	r3, r1
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4403      	add	r3, r0
 8008714:	331c      	adds	r3, #28
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	fbb2 f1f3 	udiv	r1, r2, r3
 800871c:	fb01 f303 	mul.w	r3, r1, r3
 8008720:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008722:	2b00      	cmp	r3, #0
 8008724:	d112      	bne.n	800874c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008726:	78fb      	ldrb	r3, [r7, #3]
 8008728:	f003 020f 	and.w	r2, r3, #15
 800872c:	6879      	ldr	r1, [r7, #4]
 800872e:	4613      	mov	r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	4413      	add	r3, r2
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	440b      	add	r3, r1
 8008738:	3314      	adds	r3, #20
 800873a:	2200      	movs	r2, #0
 800873c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800873e:	78f9      	ldrb	r1, [r7, #3]
 8008740:	2300      	movs	r3, #0
 8008742:	2200      	movs	r2, #0
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f002 fa26 	bl	800ab96 <USBD_LL_Transmit>
 800874a:	e01f      	b.n	800878c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	2200      	movs	r2, #0
 8008750:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	33b0      	adds	r3, #176	@ 0xb0
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	4413      	add	r3, r2
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d010      	beq.n	800878c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	33b0      	adds	r3, #176	@ 0xb0
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	4413      	add	r3, r2
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	68ba      	ldr	r2, [r7, #8]
 800877e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008782:	68ba      	ldr	r2, [r7, #8]
 8008784:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008788:	78fa      	ldrb	r2, [r7, #3]
 800878a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008796:	b580      	push	{r7, lr}
 8008798:	b084      	sub	sp, #16
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
 800879e:	460b      	mov	r3, r1
 80087a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	32b0      	adds	r2, #176	@ 0xb0
 80087ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087b0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	32b0      	adds	r2, #176	@ 0xb0
 80087bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d101      	bne.n	80087c8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e01a      	b.n	80087fe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80087c8:	78fb      	ldrb	r3, [r7, #3]
 80087ca:	4619      	mov	r1, r3
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f002 fa24 	bl	800ac1a <USBD_LL_GetRxDataSize>
 80087d2:	4602      	mov	r2, r0
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	33b0      	adds	r3, #176	@ 0xb0
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	4413      	add	r3, r2
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80087f8:	4611      	mov	r1, r2
 80087fa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b084      	sub	sp, #16
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	32b0      	adds	r2, #176	@ 0xb0
 8008818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800881c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d101      	bne.n	8008828 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008824:	2303      	movs	r3, #3
 8008826:	e024      	b.n	8008872 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	33b0      	adds	r3, #176	@ 0xb0
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	4413      	add	r3, r2
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d019      	beq.n	8008870 <USBD_CDC_EP0_RxReady+0x6a>
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008842:	2bff      	cmp	r3, #255	@ 0xff
 8008844:	d014      	beq.n	8008870 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	33b0      	adds	r3, #176	@ 0xb0
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	4413      	add	r3, r2
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	68fa      	ldr	r2, [r7, #12]
 800885a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800885e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008866:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	22ff      	movs	r2, #255	@ 0xff
 800886c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
	...

0800887c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b086      	sub	sp, #24
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008884:	2182      	movs	r1, #130	@ 0x82
 8008886:	4818      	ldr	r0, [pc, #96]	@ (80088e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008888:	f000 fd62 	bl	8009350 <USBD_GetEpDesc>
 800888c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800888e:	2101      	movs	r1, #1
 8008890:	4815      	ldr	r0, [pc, #84]	@ (80088e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008892:	f000 fd5d 	bl	8009350 <USBD_GetEpDesc>
 8008896:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008898:	2181      	movs	r1, #129	@ 0x81
 800889a:	4813      	ldr	r0, [pc, #76]	@ (80088e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800889c:	f000 fd58 	bl	8009350 <USBD_GetEpDesc>
 80088a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d002      	beq.n	80088ae <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	2210      	movs	r2, #16
 80088ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d006      	beq.n	80088c2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80088bc:	711a      	strb	r2, [r3, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d006      	beq.n	80088d6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80088d0:	711a      	strb	r2, [r3, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2243      	movs	r2, #67	@ 0x43
 80088da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80088dc:	4b02      	ldr	r3, [pc, #8]	@ (80088e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3718      	adds	r7, #24
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	20000054 	.word	0x20000054

080088ec <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b086      	sub	sp, #24
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80088f4:	2182      	movs	r1, #130	@ 0x82
 80088f6:	4818      	ldr	r0, [pc, #96]	@ (8008958 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80088f8:	f000 fd2a 	bl	8009350 <USBD_GetEpDesc>
 80088fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80088fe:	2101      	movs	r1, #1
 8008900:	4815      	ldr	r0, [pc, #84]	@ (8008958 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008902:	f000 fd25 	bl	8009350 <USBD_GetEpDesc>
 8008906:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008908:	2181      	movs	r1, #129	@ 0x81
 800890a:	4813      	ldr	r0, [pc, #76]	@ (8008958 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800890c:	f000 fd20 	bl	8009350 <USBD_GetEpDesc>
 8008910:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d002      	beq.n	800891e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	2210      	movs	r2, #16
 800891c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d006      	beq.n	8008932 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	2200      	movs	r2, #0
 8008928:	711a      	strb	r2, [r3, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	f042 0202 	orr.w	r2, r2, #2
 8008930:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d006      	beq.n	8008946 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	711a      	strb	r2, [r3, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	f042 0202 	orr.w	r2, r2, #2
 8008944:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2243      	movs	r2, #67	@ 0x43
 800894a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800894c:	4b02      	ldr	r3, [pc, #8]	@ (8008958 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800894e:	4618      	mov	r0, r3
 8008950:	3718      	adds	r7, #24
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	20000054 	.word	0x20000054

0800895c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b086      	sub	sp, #24
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008964:	2182      	movs	r1, #130	@ 0x82
 8008966:	4818      	ldr	r0, [pc, #96]	@ (80089c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008968:	f000 fcf2 	bl	8009350 <USBD_GetEpDesc>
 800896c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800896e:	2101      	movs	r1, #1
 8008970:	4815      	ldr	r0, [pc, #84]	@ (80089c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008972:	f000 fced 	bl	8009350 <USBD_GetEpDesc>
 8008976:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008978:	2181      	movs	r1, #129	@ 0x81
 800897a:	4813      	ldr	r0, [pc, #76]	@ (80089c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800897c:	f000 fce8 	bl	8009350 <USBD_GetEpDesc>
 8008980:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d002      	beq.n	800898e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	2210      	movs	r2, #16
 800898c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d006      	beq.n	80089a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	2200      	movs	r2, #0
 8008998:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800899c:	711a      	strb	r2, [r3, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d006      	beq.n	80089b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80089b0:	711a      	strb	r2, [r3, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2243      	movs	r2, #67	@ 0x43
 80089ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80089bc:	4b02      	ldr	r3, [pc, #8]	@ (80089c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3718      	adds	r7, #24
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	20000054 	.word	0x20000054

080089cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	220a      	movs	r2, #10
 80089d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80089da:	4b03      	ldr	r3, [pc, #12]	@ (80089e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80089dc:	4618      	mov	r0, r3
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr
 80089e8:	20000010 	.word	0x20000010

080089ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d101      	bne.n	8008a00 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80089fc:	2303      	movs	r3, #3
 80089fe:	e009      	b.n	8008a14 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	33b0      	adds	r3, #176	@ 0xb0
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	4413      	add	r3, r2
 8008a0e:	683a      	ldr	r2, [r7, #0]
 8008a10:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b087      	sub	sp, #28
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	32b0      	adds	r2, #176	@ 0xb0
 8008a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a3a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e008      	b.n	8008a58 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	68ba      	ldr	r2, [r7, #8]
 8008a4a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	371c      	adds	r7, #28
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	32b0      	adds	r2, #176	@ 0xb0
 8008a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a7c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d101      	bne.n	8008a88 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008a84:	2303      	movs	r3, #3
 8008a86:	e004      	b.n	8008a92 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	683a      	ldr	r2, [r7, #0]
 8008a8c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3714      	adds	r7, #20
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
	...

08008aa0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	32b0      	adds	r2, #176	@ 0xb0
 8008ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ab6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d101      	bne.n	8008ac6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	e025      	b.n	8008b12 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d11f      	bne.n	8008b10 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008ad8:	4b10      	ldr	r3, [pc, #64]	@ (8008b1c <USBD_CDC_TransmitPacket+0x7c>)
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	f003 020f 	and.w	r2, r3, #15
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	4613      	mov	r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	4413      	add	r3, r2
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	4403      	add	r3, r0
 8008af2:	3314      	adds	r3, #20
 8008af4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008af6:	4b09      	ldr	r3, [pc, #36]	@ (8008b1c <USBD_CDC_TransmitPacket+0x7c>)
 8008af8:	7819      	ldrb	r1, [r3, #0]
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f002 f845 	bl	800ab96 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3710      	adds	r7, #16
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	20000097 	.word	0x20000097

08008b20 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	32b0      	adds	r2, #176	@ 0xb0
 8008b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b36:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	32b0      	adds	r2, #176	@ 0xb0
 8008b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d101      	bne.n	8008b4e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008b4a:	2303      	movs	r3, #3
 8008b4c:	e018      	b.n	8008b80 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	7c1b      	ldrb	r3, [r3, #16]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10a      	bne.n	8008b6c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008b56:	4b0c      	ldr	r3, [pc, #48]	@ (8008b88 <USBD_CDC_ReceivePacket+0x68>)
 8008b58:	7819      	ldrb	r1, [r3, #0]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008b60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f002 f837 	bl	800abd8 <USBD_LL_PrepareReceive>
 8008b6a:	e008      	b.n	8008b7e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008b6c:	4b06      	ldr	r3, [pc, #24]	@ (8008b88 <USBD_CDC_ReceivePacket+0x68>)
 8008b6e:	7819      	ldrb	r1, [r3, #0]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008b76:	2340      	movs	r3, #64	@ 0x40
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f002 f82d 	bl	800abd8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008b7e:	2300      	movs	r3, #0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	20000098 	.word	0x20000098

08008b8c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b086      	sub	sp, #24
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	4613      	mov	r3, r2
 8008b98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d101      	bne.n	8008ba4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	e01f      	b.n	8008be4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d003      	beq.n	8008bca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	68ba      	ldr	r2, [r7, #8]
 8008bc6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	79fa      	ldrb	r2, [r7, #7]
 8008bd6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f001 fea7 	bl	800a92c <USBD_LL_Init>
 8008bde:	4603      	mov	r3, r0
 8008be0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3718      	adds	r7, #24
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d101      	bne.n	8008c04 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008c00:	2303      	movs	r3, #3
 8008c02:	e025      	b.n	8008c50 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	683a      	ldr	r2, [r7, #0]
 8008c08:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	32ae      	adds	r2, #174	@ 0xae
 8008c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00f      	beq.n	8008c40 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	32ae      	adds	r2, #174	@ 0xae
 8008c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c30:	f107 020e 	add.w	r2, r7, #14
 8008c34:	4610      	mov	r0, r2
 8008c36:	4798      	blx	r3
 8008c38:	4602      	mov	r2, r0
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008c46:	1c5a      	adds	r2, r3, #1
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f001 feaf 	bl	800a9c4 <USBD_LL_Start>
 8008c66:	4603      	mov	r3, r0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3708      	adds	r7, #8
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c78:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	370c      	adds	r7, #12
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr

08008c86 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c86:	b580      	push	{r7, lr}
 8008c88:	b084      	sub	sp, #16
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
 8008c8e:	460b      	mov	r3, r1
 8008c90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c92:	2300      	movs	r3, #0
 8008c94:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d009      	beq.n	8008cb4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	78fa      	ldrb	r2, [r7, #3]
 8008caa:	4611      	mov	r1, r2
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	4798      	blx	r3
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b084      	sub	sp, #16
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	78fa      	ldrb	r2, [r7, #3]
 8008cd8:	4611      	mov	r1, r2
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	4798      	blx	r3
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d001      	beq.n	8008ce8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b084      	sub	sp, #16
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
 8008cfa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d02:	6839      	ldr	r1, [r7, #0]
 8008d04:	4618      	mov	r0, r3
 8008d06:	f001 f922 	bl	8009f4e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008d18:	461a      	mov	r2, r3
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008d26:	f003 031f 	and.w	r3, r3, #31
 8008d2a:	2b02      	cmp	r3, #2
 8008d2c:	d01a      	beq.n	8008d64 <USBD_LL_SetupStage+0x72>
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	d822      	bhi.n	8008d78 <USBD_LL_SetupStage+0x86>
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d002      	beq.n	8008d3c <USBD_LL_SetupStage+0x4a>
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d00a      	beq.n	8008d50 <USBD_LL_SetupStage+0x5e>
 8008d3a:	e01d      	b.n	8008d78 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d42:	4619      	mov	r1, r3
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 fb77 	bl	8009438 <USBD_StdDevReq>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d4e:	e020      	b.n	8008d92 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d56:	4619      	mov	r1, r3
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 fbdf 	bl	800951c <USBD_StdItfReq>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	73fb      	strb	r3, [r7, #15]
      break;
 8008d62:	e016      	b.n	8008d92 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 fc41 	bl	80095f4 <USBD_StdEPReq>
 8008d72:	4603      	mov	r3, r0
 8008d74:	73fb      	strb	r3, [r7, #15]
      break;
 8008d76:	e00c      	b.n	8008d92 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008d7e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	4619      	mov	r1, r3
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f001 fe7c 	bl	800aa84 <USBD_LL_StallEP>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d90:	bf00      	nop
  }

  return ret;
 8008d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b086      	sub	sp, #24
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	460b      	mov	r3, r1
 8008da6:	607a      	str	r2, [r7, #4]
 8008da8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008daa:	2300      	movs	r3, #0
 8008dac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8008dae:	7afb      	ldrb	r3, [r7, #11]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d177      	bne.n	8008ea4 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008dba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008dc2:	2b03      	cmp	r3, #3
 8008dc4:	f040 80a1 	bne.w	8008f0a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	693a      	ldr	r2, [r7, #16]
 8008dce:	8992      	ldrh	r2, [r2, #12]
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d91c      	bls.n	8008e0e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	693a      	ldr	r2, [r7, #16]
 8008dda:	8992      	ldrh	r2, [r2, #12]
 8008ddc:	1a9a      	subs	r2, r3, r2
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	691b      	ldr	r3, [r3, #16]
 8008de6:	693a      	ldr	r2, [r7, #16]
 8008de8:	8992      	ldrh	r2, [r2, #12]
 8008dea:	441a      	add	r2, r3
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	6919      	ldr	r1, [r3, #16]
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	899b      	ldrh	r3, [r3, #12]
 8008df8:	461a      	mov	r2, r3
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	bf38      	it	cc
 8008e02:	4613      	movcc	r3, r2
 8008e04:	461a      	mov	r2, r3
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	f001 f9a8 	bl	800a15c <USBD_CtlContinueRx>
 8008e0c:	e07d      	b.n	8008f0a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008e14:	f003 031f 	and.w	r3, r3, #31
 8008e18:	2b02      	cmp	r3, #2
 8008e1a:	d014      	beq.n	8008e46 <USBD_LL_DataOutStage+0xaa>
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	d81d      	bhi.n	8008e5c <USBD_LL_DataOutStage+0xc0>
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d002      	beq.n	8008e2a <USBD_LL_DataOutStage+0x8e>
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d003      	beq.n	8008e30 <USBD_LL_DataOutStage+0x94>
 8008e28:	e018      	b.n	8008e5c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	75bb      	strb	r3, [r7, #22]
            break;
 8008e2e:	e018      	b.n	8008e62 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	4619      	mov	r1, r3
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f000 fa6e 	bl	800931c <USBD_CoreFindIF>
 8008e40:	4603      	mov	r3, r0
 8008e42:	75bb      	strb	r3, [r7, #22]
            break;
 8008e44:	e00d      	b.n	8008e62 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	4619      	mov	r1, r3
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f000 fa70 	bl	8009336 <USBD_CoreFindEP>
 8008e56:	4603      	mov	r3, r0
 8008e58:	75bb      	strb	r3, [r7, #22]
            break;
 8008e5a:	e002      	b.n	8008e62 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	75bb      	strb	r3, [r7, #22]
            break;
 8008e60:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008e62:	7dbb      	ldrb	r3, [r7, #22]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d119      	bne.n	8008e9c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	2b03      	cmp	r3, #3
 8008e72:	d113      	bne.n	8008e9c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008e74:	7dba      	ldrb	r2, [r7, #22]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	32ae      	adds	r2, #174	@ 0xae
 8008e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e7e:	691b      	ldr	r3, [r3, #16]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00b      	beq.n	8008e9c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8008e84:	7dba      	ldrb	r2, [r7, #22]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008e8c:	7dba      	ldrb	r2, [r7, #22]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	32ae      	adds	r2, #174	@ 0xae
 8008e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	68f8      	ldr	r0, [r7, #12]
 8008e9a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008e9c:	68f8      	ldr	r0, [r7, #12]
 8008e9e:	f001 f96e 	bl	800a17e <USBD_CtlSendStatus>
 8008ea2:	e032      	b.n	8008f0a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008ea4:	7afb      	ldrb	r3, [r7, #11]
 8008ea6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	4619      	mov	r1, r3
 8008eae:	68f8      	ldr	r0, [r7, #12]
 8008eb0:	f000 fa41 	bl	8009336 <USBD_CoreFindEP>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008eb8:	7dbb      	ldrb	r3, [r7, #22]
 8008eba:	2bff      	cmp	r3, #255	@ 0xff
 8008ebc:	d025      	beq.n	8008f0a <USBD_LL_DataOutStage+0x16e>
 8008ebe:	7dbb      	ldrb	r3, [r7, #22]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d122      	bne.n	8008f0a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	2b03      	cmp	r3, #3
 8008ece:	d117      	bne.n	8008f00 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008ed0:	7dba      	ldrb	r2, [r7, #22]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	32ae      	adds	r2, #174	@ 0xae
 8008ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eda:	699b      	ldr	r3, [r3, #24]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00f      	beq.n	8008f00 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8008ee0:	7dba      	ldrb	r2, [r7, #22]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008ee8:	7dba      	ldrb	r2, [r7, #22]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	32ae      	adds	r2, #174	@ 0xae
 8008eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef2:	699b      	ldr	r3, [r3, #24]
 8008ef4:	7afa      	ldrb	r2, [r7, #11]
 8008ef6:	4611      	mov	r1, r2
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	4798      	blx	r3
 8008efc:	4603      	mov	r3, r0
 8008efe:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008f00:	7dfb      	ldrb	r3, [r7, #23]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d001      	beq.n	8008f0a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8008f06:	7dfb      	ldrb	r3, [r7, #23]
 8008f08:	e000      	b.n	8008f0c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8008f0a:	2300      	movs	r3, #0
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3718      	adds	r7, #24
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b086      	sub	sp, #24
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	607a      	str	r2, [r7, #4]
 8008f20:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8008f22:	7afb      	ldrb	r3, [r7, #11]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d178      	bne.n	800901a <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	3314      	adds	r3, #20
 8008f2c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008f34:	2b02      	cmp	r3, #2
 8008f36:	d163      	bne.n	8009000 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	693a      	ldr	r2, [r7, #16]
 8008f3e:	8992      	ldrh	r2, [r2, #12]
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d91c      	bls.n	8008f7e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	693a      	ldr	r2, [r7, #16]
 8008f4a:	8992      	ldrh	r2, [r2, #12]
 8008f4c:	1a9a      	subs	r2, r3, r2
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	691b      	ldr	r3, [r3, #16]
 8008f56:	693a      	ldr	r2, [r7, #16]
 8008f58:	8992      	ldrh	r2, [r2, #12]
 8008f5a:	441a      	add	r2, r3
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	6919      	ldr	r1, [r3, #16]
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	461a      	mov	r2, r3
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f001 f8c4 	bl	800a0f8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f70:	2300      	movs	r3, #0
 8008f72:	2200      	movs	r2, #0
 8008f74:	2100      	movs	r1, #0
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f001 fe2e 	bl	800abd8 <USBD_LL_PrepareReceive>
 8008f7c:	e040      	b.n	8009000 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	899b      	ldrh	r3, [r3, #12]
 8008f82:	461a      	mov	r2, r3
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d11c      	bne.n	8008fc6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	693a      	ldr	r2, [r7, #16]
 8008f92:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d316      	bcc.n	8008fc6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d20f      	bcs.n	8008fc6 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	2100      	movs	r1, #0
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f001 f8a4 	bl	800a0f8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fb8:	2300      	movs	r3, #0
 8008fba:	2200      	movs	r2, #0
 8008fbc:	2100      	movs	r1, #0
 8008fbe:	68f8      	ldr	r0, [r7, #12]
 8008fc0:	f001 fe0a 	bl	800abd8 <USBD_LL_PrepareReceive>
 8008fc4:	e01c      	b.n	8009000 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	2b03      	cmp	r3, #3
 8008fd0:	d10f      	bne.n	8008ff2 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d009      	beq.n	8008ff2 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	68f8      	ldr	r0, [r7, #12]
 8008ff0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ff2:	2180      	movs	r1, #128	@ 0x80
 8008ff4:	68f8      	ldr	r0, [r7, #12]
 8008ff6:	f001 fd45 	bl	800aa84 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008ffa:	68f8      	ldr	r0, [r7, #12]
 8008ffc:	f001 f8d2 	bl	800a1a4 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d03a      	beq.n	8009080 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f7ff fe30 	bl	8008c70 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2200      	movs	r2, #0
 8009014:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009018:	e032      	b.n	8009080 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800901a:	7afb      	ldrb	r3, [r7, #11]
 800901c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009020:	b2db      	uxtb	r3, r3
 8009022:	4619      	mov	r1, r3
 8009024:	68f8      	ldr	r0, [r7, #12]
 8009026:	f000 f986 	bl	8009336 <USBD_CoreFindEP>
 800902a:	4603      	mov	r3, r0
 800902c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800902e:	7dfb      	ldrb	r3, [r7, #23]
 8009030:	2bff      	cmp	r3, #255	@ 0xff
 8009032:	d025      	beq.n	8009080 <USBD_LL_DataInStage+0x16c>
 8009034:	7dfb      	ldrb	r3, [r7, #23]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d122      	bne.n	8009080 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009040:	b2db      	uxtb	r3, r3
 8009042:	2b03      	cmp	r3, #3
 8009044:	d11c      	bne.n	8009080 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009046:	7dfa      	ldrb	r2, [r7, #23]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	32ae      	adds	r2, #174	@ 0xae
 800904c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009050:	695b      	ldr	r3, [r3, #20]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d014      	beq.n	8009080 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8009056:	7dfa      	ldrb	r2, [r7, #23]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800905e:	7dfa      	ldrb	r2, [r7, #23]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	32ae      	adds	r2, #174	@ 0xae
 8009064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009068:	695b      	ldr	r3, [r3, #20]
 800906a:	7afa      	ldrb	r2, [r7, #11]
 800906c:	4611      	mov	r1, r2
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	4798      	blx	r3
 8009072:	4603      	mov	r3, r0
 8009074:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009076:	7dbb      	ldrb	r3, [r7, #22]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d001      	beq.n	8009080 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800907c:	7dbb      	ldrb	r3, [r7, #22]
 800907e:	e000      	b.n	8009082 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8009080:	2300      	movs	r3, #0
}
 8009082:	4618      	mov	r0, r3
 8009084:	3718      	adds	r7, #24
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b084      	sub	sp, #16
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009092:	2300      	movs	r3, #0
 8009094:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2201      	movs	r2, #1
 800909a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d014      	beq.n	80090f0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00e      	beq.n	80090f0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	6852      	ldr	r2, [r2, #4]
 80090de:	b2d2      	uxtb	r2, r2
 80090e0:	4611      	mov	r1, r2
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	4798      	blx	r3
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d001      	beq.n	80090f0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80090ec:	2303      	movs	r3, #3
 80090ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80090f0:	2340      	movs	r3, #64	@ 0x40
 80090f2:	2200      	movs	r2, #0
 80090f4:	2100      	movs	r1, #0
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f001 fc7f 	bl	800a9fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2240      	movs	r2, #64	@ 0x40
 8009108:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800910c:	2340      	movs	r3, #64	@ 0x40
 800910e:	2200      	movs	r2, #0
 8009110:	2180      	movs	r1, #128	@ 0x80
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f001 fc71 	bl	800a9fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2240      	movs	r2, #64	@ 0x40
 8009124:	841a      	strh	r2, [r3, #32]

  return ret;
 8009126:	7bfb      	ldrb	r3, [r7, #15]
}
 8009128:	4618      	mov	r0, r3
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	460b      	mov	r3, r1
 800913a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	78fa      	ldrb	r2, [r7, #3]
 8009140:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800915e:	b2db      	uxtb	r3, r3
 8009160:	2b04      	cmp	r3, #4
 8009162:	d006      	beq.n	8009172 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800916a:	b2da      	uxtb	r2, r3
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2204      	movs	r2, #4
 8009176:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800917a:	2300      	movs	r3, #0
}
 800917c:	4618      	mov	r0, r3
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009196:	b2db      	uxtb	r3, r3
 8009198:	2b04      	cmp	r3, #4
 800919a:	d106      	bne.n	80091aa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80091a2:	b2da      	uxtb	r2, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80091aa:	2300      	movs	r3, #0
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	2b03      	cmp	r3, #3
 80091ca:	d110      	bne.n	80091ee <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00b      	beq.n	80091ee <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091dc:	69db      	ldr	r3, [r3, #28]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d005      	beq.n	80091ee <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091e8:	69db      	ldr	r3, [r3, #28]
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80091ee:	2300      	movs	r3, #0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3708      	adds	r7, #8
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	460b      	mov	r3, r1
 8009202:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	32ae      	adds	r2, #174	@ 0xae
 800920e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d101      	bne.n	800921a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009216:	2303      	movs	r3, #3
 8009218:	e01c      	b.n	8009254 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009220:	b2db      	uxtb	r3, r3
 8009222:	2b03      	cmp	r3, #3
 8009224:	d115      	bne.n	8009252 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	32ae      	adds	r2, #174	@ 0xae
 8009230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009234:	6a1b      	ldr	r3, [r3, #32]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00b      	beq.n	8009252 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	32ae      	adds	r2, #174	@ 0xae
 8009244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009248:	6a1b      	ldr	r3, [r3, #32]
 800924a:	78fa      	ldrb	r2, [r7, #3]
 800924c:	4611      	mov	r1, r2
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	3708      	adds	r7, #8
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	460b      	mov	r3, r1
 8009266:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	32ae      	adds	r2, #174	@ 0xae
 8009272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d101      	bne.n	800927e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800927a:	2303      	movs	r3, #3
 800927c:	e01c      	b.n	80092b8 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009284:	b2db      	uxtb	r3, r3
 8009286:	2b03      	cmp	r3, #3
 8009288:	d115      	bne.n	80092b6 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	32ae      	adds	r2, #174	@ 0xae
 8009294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00b      	beq.n	80092b6 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	32ae      	adds	r2, #174	@ 0xae
 80092a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ae:	78fa      	ldrb	r2, [r7, #3]
 80092b0:	4611      	mov	r1, r2
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	370c      	adds	r7, #12
 80092ce:	46bd      	mov	sp, r7
 80092d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d4:	4770      	bx	lr

080092d6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b084      	sub	sp, #16
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80092de:	2300      	movs	r3, #0
 80092e0:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2201      	movs	r2, #1
 80092e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d00e      	beq.n	8009312 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	6852      	ldr	r2, [r2, #4]
 8009300:	b2d2      	uxtb	r2, r2
 8009302:	4611      	mov	r1, r2
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	4798      	blx	r3
 8009308:	4603      	mov	r3, r0
 800930a:	2b00      	cmp	r3, #0
 800930c:	d001      	beq.n	8009312 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800930e:	2303      	movs	r3, #3
 8009310:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009312:	7bfb      	ldrb	r3, [r7, #15]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	460b      	mov	r3, r1
 8009326:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009328:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800932a:	4618      	mov	r0, r3
 800932c:	370c      	adds	r7, #12
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr

08009336 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009336:	b480      	push	{r7}
 8009338:	b083      	sub	sp, #12
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
 800933e:	460b      	mov	r3, r1
 8009340:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009342:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009344:	4618      	mov	r0, r3
 8009346:	370c      	adds	r7, #12
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b086      	sub	sp, #24
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	460b      	mov	r3, r1
 800935a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009364:	2300      	movs	r3, #0
 8009366:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	885b      	ldrh	r3, [r3, #2]
 800936c:	b29b      	uxth	r3, r3
 800936e:	68fa      	ldr	r2, [r7, #12]
 8009370:	7812      	ldrb	r2, [r2, #0]
 8009372:	4293      	cmp	r3, r2
 8009374:	d91f      	bls.n	80093b6 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800937c:	e013      	b.n	80093a6 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800937e:	f107 030a 	add.w	r3, r7, #10
 8009382:	4619      	mov	r1, r3
 8009384:	6978      	ldr	r0, [r7, #20]
 8009386:	f000 f81b 	bl	80093c0 <USBD_GetNextDesc>
 800938a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	785b      	ldrb	r3, [r3, #1]
 8009390:	2b05      	cmp	r3, #5
 8009392:	d108      	bne.n	80093a6 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	789b      	ldrb	r3, [r3, #2]
 800939c:	78fa      	ldrb	r2, [r7, #3]
 800939e:	429a      	cmp	r2, r3
 80093a0:	d008      	beq.n	80093b4 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80093a2:	2300      	movs	r3, #0
 80093a4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	885b      	ldrh	r3, [r3, #2]
 80093aa:	b29a      	uxth	r2, r3
 80093ac:	897b      	ldrh	r3, [r7, #10]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d8e5      	bhi.n	800937e <USBD_GetEpDesc+0x2e>
 80093b2:	e000      	b.n	80093b6 <USBD_GetEpDesc+0x66>
          break;
 80093b4:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80093b6:	693b      	ldr	r3, [r7, #16]
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3718      	adds	r7, #24
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b085      	sub	sp, #20
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	881b      	ldrh	r3, [r3, #0]
 80093d2:	68fa      	ldr	r2, [r7, #12]
 80093d4:	7812      	ldrb	r2, [r2, #0]
 80093d6:	4413      	add	r3, r2
 80093d8:	b29a      	uxth	r2, r3
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	461a      	mov	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4413      	add	r3, r2
 80093e8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80093ea:	68fb      	ldr	r3, [r7, #12]
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3714      	adds	r7, #20
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr

080093f8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b087      	sub	sp, #28
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	3301      	adds	r3, #1
 800940e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009416:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800941a:	021b      	lsls	r3, r3, #8
 800941c:	b21a      	sxth	r2, r3
 800941e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009422:	4313      	orrs	r3, r2
 8009424:	b21b      	sxth	r3, r3
 8009426:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009428:	89fb      	ldrh	r3, [r7, #14]
}
 800942a:	4618      	mov	r0, r3
 800942c:	371c      	adds	r7, #28
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
	...

08009438 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009442:	2300      	movs	r3, #0
 8009444:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800944e:	2b40      	cmp	r3, #64	@ 0x40
 8009450:	d005      	beq.n	800945e <USBD_StdDevReq+0x26>
 8009452:	2b40      	cmp	r3, #64	@ 0x40
 8009454:	d857      	bhi.n	8009506 <USBD_StdDevReq+0xce>
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00f      	beq.n	800947a <USBD_StdDevReq+0x42>
 800945a:	2b20      	cmp	r3, #32
 800945c:	d153      	bne.n	8009506 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	32ae      	adds	r2, #174	@ 0xae
 8009468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	6839      	ldr	r1, [r7, #0]
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	4798      	blx	r3
 8009474:	4603      	mov	r3, r0
 8009476:	73fb      	strb	r3, [r7, #15]
      break;
 8009478:	e04a      	b.n	8009510 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	785b      	ldrb	r3, [r3, #1]
 800947e:	2b09      	cmp	r3, #9
 8009480:	d83b      	bhi.n	80094fa <USBD_StdDevReq+0xc2>
 8009482:	a201      	add	r2, pc, #4	@ (adr r2, 8009488 <USBD_StdDevReq+0x50>)
 8009484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009488:	080094dd 	.word	0x080094dd
 800948c:	080094f1 	.word	0x080094f1
 8009490:	080094fb 	.word	0x080094fb
 8009494:	080094e7 	.word	0x080094e7
 8009498:	080094fb 	.word	0x080094fb
 800949c:	080094bb 	.word	0x080094bb
 80094a0:	080094b1 	.word	0x080094b1
 80094a4:	080094fb 	.word	0x080094fb
 80094a8:	080094d3 	.word	0x080094d3
 80094ac:	080094c5 	.word	0x080094c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80094b0:	6839      	ldr	r1, [r7, #0]
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 fa3e 	bl	8009934 <USBD_GetDescriptor>
          break;
 80094b8:	e024      	b.n	8009504 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80094ba:	6839      	ldr	r1, [r7, #0]
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 fba3 	bl	8009c08 <USBD_SetAddress>
          break;
 80094c2:	e01f      	b.n	8009504 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80094c4:	6839      	ldr	r1, [r7, #0]
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 fbe2 	bl	8009c90 <USBD_SetConfig>
 80094cc:	4603      	mov	r3, r0
 80094ce:	73fb      	strb	r3, [r7, #15]
          break;
 80094d0:	e018      	b.n	8009504 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80094d2:	6839      	ldr	r1, [r7, #0]
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 fc85 	bl	8009de4 <USBD_GetConfig>
          break;
 80094da:	e013      	b.n	8009504 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80094dc:	6839      	ldr	r1, [r7, #0]
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 fcb6 	bl	8009e50 <USBD_GetStatus>
          break;
 80094e4:	e00e      	b.n	8009504 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80094e6:	6839      	ldr	r1, [r7, #0]
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 fce5 	bl	8009eb8 <USBD_SetFeature>
          break;
 80094ee:	e009      	b.n	8009504 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80094f0:	6839      	ldr	r1, [r7, #0]
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 fd09 	bl	8009f0a <USBD_ClrFeature>
          break;
 80094f8:	e004      	b.n	8009504 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80094fa:	6839      	ldr	r1, [r7, #0]
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 fd60 	bl	8009fc2 <USBD_CtlError>
          break;
 8009502:	bf00      	nop
      }
      break;
 8009504:	e004      	b.n	8009510 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009506:	6839      	ldr	r1, [r7, #0]
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 fd5a 	bl	8009fc2 <USBD_CtlError>
      break;
 800950e:	bf00      	nop
  }

  return ret;
 8009510:	7bfb      	ldrb	r3, [r7, #15]
}
 8009512:	4618      	mov	r0, r3
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop

0800951c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009526:	2300      	movs	r3, #0
 8009528:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009532:	2b40      	cmp	r3, #64	@ 0x40
 8009534:	d005      	beq.n	8009542 <USBD_StdItfReq+0x26>
 8009536:	2b40      	cmp	r3, #64	@ 0x40
 8009538:	d852      	bhi.n	80095e0 <USBD_StdItfReq+0xc4>
 800953a:	2b00      	cmp	r3, #0
 800953c:	d001      	beq.n	8009542 <USBD_StdItfReq+0x26>
 800953e:	2b20      	cmp	r3, #32
 8009540:	d14e      	bne.n	80095e0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009548:	b2db      	uxtb	r3, r3
 800954a:	3b01      	subs	r3, #1
 800954c:	2b02      	cmp	r3, #2
 800954e:	d840      	bhi.n	80095d2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	889b      	ldrh	r3, [r3, #4]
 8009554:	b2db      	uxtb	r3, r3
 8009556:	2b01      	cmp	r3, #1
 8009558:	d836      	bhi.n	80095c8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	889b      	ldrh	r3, [r3, #4]
 800955e:	b2db      	uxtb	r3, r3
 8009560:	4619      	mov	r1, r3
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f7ff feda 	bl	800931c <USBD_CoreFindIF>
 8009568:	4603      	mov	r3, r0
 800956a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800956c:	7bbb      	ldrb	r3, [r7, #14]
 800956e:	2bff      	cmp	r3, #255	@ 0xff
 8009570:	d01d      	beq.n	80095ae <USBD_StdItfReq+0x92>
 8009572:	7bbb      	ldrb	r3, [r7, #14]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d11a      	bne.n	80095ae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009578:	7bba      	ldrb	r2, [r7, #14]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	32ae      	adds	r2, #174	@ 0xae
 800957e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d00f      	beq.n	80095a8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009588:	7bba      	ldrb	r2, [r7, #14]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009590:	7bba      	ldrb	r2, [r7, #14]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	32ae      	adds	r2, #174	@ 0xae
 8009596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	6839      	ldr	r1, [r7, #0]
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	4798      	blx	r3
 80095a2:	4603      	mov	r3, r0
 80095a4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80095a6:	e004      	b.n	80095b2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80095a8:	2303      	movs	r3, #3
 80095aa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80095ac:	e001      	b.n	80095b2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80095ae:	2303      	movs	r3, #3
 80095b0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	88db      	ldrh	r3, [r3, #6]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d110      	bne.n	80095dc <USBD_StdItfReq+0xc0>
 80095ba:	7bfb      	ldrb	r3, [r7, #15]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d10d      	bne.n	80095dc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 fddc 	bl	800a17e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80095c6:	e009      	b.n	80095dc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80095c8:	6839      	ldr	r1, [r7, #0]
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 fcf9 	bl	8009fc2 <USBD_CtlError>
          break;
 80095d0:	e004      	b.n	80095dc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80095d2:	6839      	ldr	r1, [r7, #0]
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 fcf4 	bl	8009fc2 <USBD_CtlError>
          break;
 80095da:	e000      	b.n	80095de <USBD_StdItfReq+0xc2>
          break;
 80095dc:	bf00      	nop
      }
      break;
 80095de:	e004      	b.n	80095ea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80095e0:	6839      	ldr	r1, [r7, #0]
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 fced 	bl	8009fc2 <USBD_CtlError>
      break;
 80095e8:	bf00      	nop
  }

  return ret;
 80095ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3710      	adds	r7, #16
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80095fe:	2300      	movs	r3, #0
 8009600:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	889b      	ldrh	r3, [r3, #4]
 8009606:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009610:	2b40      	cmp	r3, #64	@ 0x40
 8009612:	d007      	beq.n	8009624 <USBD_StdEPReq+0x30>
 8009614:	2b40      	cmp	r3, #64	@ 0x40
 8009616:	f200 8181 	bhi.w	800991c <USBD_StdEPReq+0x328>
 800961a:	2b00      	cmp	r3, #0
 800961c:	d02a      	beq.n	8009674 <USBD_StdEPReq+0x80>
 800961e:	2b20      	cmp	r3, #32
 8009620:	f040 817c 	bne.w	800991c <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009624:	7bbb      	ldrb	r3, [r7, #14]
 8009626:	4619      	mov	r1, r3
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f7ff fe84 	bl	8009336 <USBD_CoreFindEP>
 800962e:	4603      	mov	r3, r0
 8009630:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009632:	7b7b      	ldrb	r3, [r7, #13]
 8009634:	2bff      	cmp	r3, #255	@ 0xff
 8009636:	f000 8176 	beq.w	8009926 <USBD_StdEPReq+0x332>
 800963a:	7b7b      	ldrb	r3, [r7, #13]
 800963c:	2b00      	cmp	r3, #0
 800963e:	f040 8172 	bne.w	8009926 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8009642:	7b7a      	ldrb	r2, [r7, #13]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800964a:	7b7a      	ldrb	r2, [r7, #13]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	32ae      	adds	r2, #174	@ 0xae
 8009650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	2b00      	cmp	r3, #0
 8009658:	f000 8165 	beq.w	8009926 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800965c:	7b7a      	ldrb	r2, [r7, #13]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	32ae      	adds	r2, #174	@ 0xae
 8009662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	6839      	ldr	r1, [r7, #0]
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	4798      	blx	r3
 800966e:	4603      	mov	r3, r0
 8009670:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009672:	e158      	b.n	8009926 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	785b      	ldrb	r3, [r3, #1]
 8009678:	2b03      	cmp	r3, #3
 800967a:	d008      	beq.n	800968e <USBD_StdEPReq+0x9a>
 800967c:	2b03      	cmp	r3, #3
 800967e:	f300 8147 	bgt.w	8009910 <USBD_StdEPReq+0x31c>
 8009682:	2b00      	cmp	r3, #0
 8009684:	f000 809b 	beq.w	80097be <USBD_StdEPReq+0x1ca>
 8009688:	2b01      	cmp	r3, #1
 800968a:	d03c      	beq.n	8009706 <USBD_StdEPReq+0x112>
 800968c:	e140      	b.n	8009910 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009694:	b2db      	uxtb	r3, r3
 8009696:	2b02      	cmp	r3, #2
 8009698:	d002      	beq.n	80096a0 <USBD_StdEPReq+0xac>
 800969a:	2b03      	cmp	r3, #3
 800969c:	d016      	beq.n	80096cc <USBD_StdEPReq+0xd8>
 800969e:	e02c      	b.n	80096fa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096a0:	7bbb      	ldrb	r3, [r7, #14]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00d      	beq.n	80096c2 <USBD_StdEPReq+0xce>
 80096a6:	7bbb      	ldrb	r3, [r7, #14]
 80096a8:	2b80      	cmp	r3, #128	@ 0x80
 80096aa:	d00a      	beq.n	80096c2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80096ac:	7bbb      	ldrb	r3, [r7, #14]
 80096ae:	4619      	mov	r1, r3
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f001 f9e7 	bl	800aa84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80096b6:	2180      	movs	r1, #128	@ 0x80
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f001 f9e3 	bl	800aa84 <USBD_LL_StallEP>
 80096be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80096c0:	e020      	b.n	8009704 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80096c2:	6839      	ldr	r1, [r7, #0]
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 fc7c 	bl	8009fc2 <USBD_CtlError>
              break;
 80096ca:	e01b      	b.n	8009704 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	885b      	ldrh	r3, [r3, #2]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d10e      	bne.n	80096f2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80096d4:	7bbb      	ldrb	r3, [r7, #14]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d00b      	beq.n	80096f2 <USBD_StdEPReq+0xfe>
 80096da:	7bbb      	ldrb	r3, [r7, #14]
 80096dc:	2b80      	cmp	r3, #128	@ 0x80
 80096de:	d008      	beq.n	80096f2 <USBD_StdEPReq+0xfe>
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	88db      	ldrh	r3, [r3, #6]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d104      	bne.n	80096f2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80096e8:	7bbb      	ldrb	r3, [r7, #14]
 80096ea:	4619      	mov	r1, r3
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f001 f9c9 	bl	800aa84 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 fd43 	bl	800a17e <USBD_CtlSendStatus>

              break;
 80096f8:	e004      	b.n	8009704 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80096fa:	6839      	ldr	r1, [r7, #0]
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 fc60 	bl	8009fc2 <USBD_CtlError>
              break;
 8009702:	bf00      	nop
          }
          break;
 8009704:	e109      	b.n	800991a <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800970c:	b2db      	uxtb	r3, r3
 800970e:	2b02      	cmp	r3, #2
 8009710:	d002      	beq.n	8009718 <USBD_StdEPReq+0x124>
 8009712:	2b03      	cmp	r3, #3
 8009714:	d016      	beq.n	8009744 <USBD_StdEPReq+0x150>
 8009716:	e04b      	b.n	80097b0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009718:	7bbb      	ldrb	r3, [r7, #14]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d00d      	beq.n	800973a <USBD_StdEPReq+0x146>
 800971e:	7bbb      	ldrb	r3, [r7, #14]
 8009720:	2b80      	cmp	r3, #128	@ 0x80
 8009722:	d00a      	beq.n	800973a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009724:	7bbb      	ldrb	r3, [r7, #14]
 8009726:	4619      	mov	r1, r3
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f001 f9ab 	bl	800aa84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800972e:	2180      	movs	r1, #128	@ 0x80
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f001 f9a7 	bl	800aa84 <USBD_LL_StallEP>
 8009736:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009738:	e040      	b.n	80097bc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800973a:	6839      	ldr	r1, [r7, #0]
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 fc40 	bl	8009fc2 <USBD_CtlError>
              break;
 8009742:	e03b      	b.n	80097bc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	885b      	ldrh	r3, [r3, #2]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d136      	bne.n	80097ba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800974c:	7bbb      	ldrb	r3, [r7, #14]
 800974e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009752:	2b00      	cmp	r3, #0
 8009754:	d004      	beq.n	8009760 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009756:	7bbb      	ldrb	r3, [r7, #14]
 8009758:	4619      	mov	r1, r3
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f001 f9b1 	bl	800aac2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 fd0c 	bl	800a17e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009766:	7bbb      	ldrb	r3, [r7, #14]
 8009768:	4619      	mov	r1, r3
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f7ff fde3 	bl	8009336 <USBD_CoreFindEP>
 8009770:	4603      	mov	r3, r0
 8009772:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009774:	7b7b      	ldrb	r3, [r7, #13]
 8009776:	2bff      	cmp	r3, #255	@ 0xff
 8009778:	d01f      	beq.n	80097ba <USBD_StdEPReq+0x1c6>
 800977a:	7b7b      	ldrb	r3, [r7, #13]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d11c      	bne.n	80097ba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009780:	7b7a      	ldrb	r2, [r7, #13]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009788:	7b7a      	ldrb	r2, [r7, #13]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	32ae      	adds	r2, #174	@ 0xae
 800978e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d010      	beq.n	80097ba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009798:	7b7a      	ldrb	r2, [r7, #13]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	32ae      	adds	r2, #174	@ 0xae
 800979e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	6839      	ldr	r1, [r7, #0]
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	4798      	blx	r3
 80097aa:	4603      	mov	r3, r0
 80097ac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80097ae:	e004      	b.n	80097ba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80097b0:	6839      	ldr	r1, [r7, #0]
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 fc05 	bl	8009fc2 <USBD_CtlError>
              break;
 80097b8:	e000      	b.n	80097bc <USBD_StdEPReq+0x1c8>
              break;
 80097ba:	bf00      	nop
          }
          break;
 80097bc:	e0ad      	b.n	800991a <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	2b02      	cmp	r3, #2
 80097c8:	d002      	beq.n	80097d0 <USBD_StdEPReq+0x1dc>
 80097ca:	2b03      	cmp	r3, #3
 80097cc:	d033      	beq.n	8009836 <USBD_StdEPReq+0x242>
 80097ce:	e099      	b.n	8009904 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097d0:	7bbb      	ldrb	r3, [r7, #14]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d007      	beq.n	80097e6 <USBD_StdEPReq+0x1f2>
 80097d6:	7bbb      	ldrb	r3, [r7, #14]
 80097d8:	2b80      	cmp	r3, #128	@ 0x80
 80097da:	d004      	beq.n	80097e6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80097dc:	6839      	ldr	r1, [r7, #0]
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fbef 	bl	8009fc2 <USBD_CtlError>
                break;
 80097e4:	e093      	b.n	800990e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	da0b      	bge.n	8009806 <USBD_StdEPReq+0x212>
 80097ee:	7bbb      	ldrb	r3, [r7, #14]
 80097f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80097f4:	4613      	mov	r3, r2
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	4413      	add	r3, r2
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	3310      	adds	r3, #16
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	4413      	add	r3, r2
 8009802:	3304      	adds	r3, #4
 8009804:	e00b      	b.n	800981e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009806:	7bbb      	ldrb	r3, [r7, #14]
 8009808:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800980c:	4613      	mov	r3, r2
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	4413      	add	r3, r2
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	4413      	add	r3, r2
 800981c:	3304      	adds	r3, #4
 800981e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	2200      	movs	r2, #0
 8009824:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	330e      	adds	r3, #14
 800982a:	2202      	movs	r2, #2
 800982c:	4619      	mov	r1, r3
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 fc44 	bl	800a0bc <USBD_CtlSendData>
              break;
 8009834:	e06b      	b.n	800990e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009836:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800983a:	2b00      	cmp	r3, #0
 800983c:	da11      	bge.n	8009862 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800983e:	7bbb      	ldrb	r3, [r7, #14]
 8009840:	f003 020f 	and.w	r2, r3, #15
 8009844:	6879      	ldr	r1, [r7, #4]
 8009846:	4613      	mov	r3, r2
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	4413      	add	r3, r2
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	440b      	add	r3, r1
 8009850:	3323      	adds	r3, #35	@ 0x23
 8009852:	781b      	ldrb	r3, [r3, #0]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d117      	bne.n	8009888 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8009858:	6839      	ldr	r1, [r7, #0]
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 fbb1 	bl	8009fc2 <USBD_CtlError>
                  break;
 8009860:	e055      	b.n	800990e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009862:	7bbb      	ldrb	r3, [r7, #14]
 8009864:	f003 020f 	and.w	r2, r3, #15
 8009868:	6879      	ldr	r1, [r7, #4]
 800986a:	4613      	mov	r3, r2
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	4413      	add	r3, r2
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	440b      	add	r3, r1
 8009874:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009878:	781b      	ldrb	r3, [r3, #0]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d104      	bne.n	8009888 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800987e:	6839      	ldr	r1, [r7, #0]
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 fb9e 	bl	8009fc2 <USBD_CtlError>
                  break;
 8009886:	e042      	b.n	800990e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009888:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800988c:	2b00      	cmp	r3, #0
 800988e:	da0b      	bge.n	80098a8 <USBD_StdEPReq+0x2b4>
 8009890:	7bbb      	ldrb	r3, [r7, #14]
 8009892:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009896:	4613      	mov	r3, r2
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	4413      	add	r3, r2
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	3310      	adds	r3, #16
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	4413      	add	r3, r2
 80098a4:	3304      	adds	r3, #4
 80098a6:	e00b      	b.n	80098c0 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80098a8:	7bbb      	ldrb	r3, [r7, #14]
 80098aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098ae:	4613      	mov	r3, r2
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	4413      	add	r3, r2
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	4413      	add	r3, r2
 80098be:	3304      	adds	r3, #4
 80098c0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80098c2:	7bbb      	ldrb	r3, [r7, #14]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d002      	beq.n	80098ce <USBD_StdEPReq+0x2da>
 80098c8:	7bbb      	ldrb	r3, [r7, #14]
 80098ca:	2b80      	cmp	r3, #128	@ 0x80
 80098cc:	d103      	bne.n	80098d6 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	2200      	movs	r2, #0
 80098d2:	739a      	strb	r2, [r3, #14]
 80098d4:	e00e      	b.n	80098f4 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80098d6:	7bbb      	ldrb	r3, [r7, #14]
 80098d8:	4619      	mov	r1, r3
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f001 f910 	bl	800ab00 <USBD_LL_IsStallEP>
 80098e0:	4603      	mov	r3, r0
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d003      	beq.n	80098ee <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	2201      	movs	r2, #1
 80098ea:	739a      	strb	r2, [r3, #14]
 80098ec:	e002      	b.n	80098f4 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	2200      	movs	r2, #0
 80098f2:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	330e      	adds	r3, #14
 80098f8:	2202      	movs	r2, #2
 80098fa:	4619      	mov	r1, r3
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 fbdd 	bl	800a0bc <USBD_CtlSendData>
              break;
 8009902:	e004      	b.n	800990e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8009904:	6839      	ldr	r1, [r7, #0]
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 fb5b 	bl	8009fc2 <USBD_CtlError>
              break;
 800990c:	bf00      	nop
          }
          break;
 800990e:	e004      	b.n	800991a <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8009910:	6839      	ldr	r1, [r7, #0]
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 fb55 	bl	8009fc2 <USBD_CtlError>
          break;
 8009918:	bf00      	nop
      }
      break;
 800991a:	e005      	b.n	8009928 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800991c:	6839      	ldr	r1, [r7, #0]
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 fb4f 	bl	8009fc2 <USBD_CtlError>
      break;
 8009924:	e000      	b.n	8009928 <USBD_StdEPReq+0x334>
      break;
 8009926:	bf00      	nop
  }

  return ret;
 8009928:	7bfb      	ldrb	r3, [r7, #15]
}
 800992a:	4618      	mov	r0, r3
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
	...

08009934 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800993e:	2300      	movs	r3, #0
 8009940:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009942:	2300      	movs	r3, #0
 8009944:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009946:	2300      	movs	r3, #0
 8009948:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	885b      	ldrh	r3, [r3, #2]
 800994e:	0a1b      	lsrs	r3, r3, #8
 8009950:	b29b      	uxth	r3, r3
 8009952:	3b01      	subs	r3, #1
 8009954:	2b06      	cmp	r3, #6
 8009956:	f200 8128 	bhi.w	8009baa <USBD_GetDescriptor+0x276>
 800995a:	a201      	add	r2, pc, #4	@ (adr r2, 8009960 <USBD_GetDescriptor+0x2c>)
 800995c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009960:	0800997d 	.word	0x0800997d
 8009964:	08009995 	.word	0x08009995
 8009968:	080099d5 	.word	0x080099d5
 800996c:	08009bab 	.word	0x08009bab
 8009970:	08009bab 	.word	0x08009bab
 8009974:	08009b4b 	.word	0x08009b4b
 8009978:	08009b77 	.word	0x08009b77
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	7c12      	ldrb	r2, [r2, #16]
 8009988:	f107 0108 	add.w	r1, r7, #8
 800998c:	4610      	mov	r0, r2
 800998e:	4798      	blx	r3
 8009990:	60f8      	str	r0, [r7, #12]
      break;
 8009992:	e112      	b.n	8009bba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	7c1b      	ldrb	r3, [r3, #16]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d10d      	bne.n	80099b8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099a4:	f107 0208 	add.w	r2, r7, #8
 80099a8:	4610      	mov	r0, r2
 80099aa:	4798      	blx	r3
 80099ac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	3301      	adds	r3, #1
 80099b2:	2202      	movs	r2, #2
 80099b4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80099b6:	e100      	b.n	8009bba <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099c0:	f107 0208 	add.w	r2, r7, #8
 80099c4:	4610      	mov	r0, r2
 80099c6:	4798      	blx	r3
 80099c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	3301      	adds	r3, #1
 80099ce:	2202      	movs	r2, #2
 80099d0:	701a      	strb	r2, [r3, #0]
      break;
 80099d2:	e0f2      	b.n	8009bba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	885b      	ldrh	r3, [r3, #2]
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	2b05      	cmp	r3, #5
 80099dc:	f200 80ac 	bhi.w	8009b38 <USBD_GetDescriptor+0x204>
 80099e0:	a201      	add	r2, pc, #4	@ (adr r2, 80099e8 <USBD_GetDescriptor+0xb4>)
 80099e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e6:	bf00      	nop
 80099e8:	08009a01 	.word	0x08009a01
 80099ec:	08009a35 	.word	0x08009a35
 80099f0:	08009a69 	.word	0x08009a69
 80099f4:	08009a9d 	.word	0x08009a9d
 80099f8:	08009ad1 	.word	0x08009ad1
 80099fc:	08009b05 	.word	0x08009b05
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d00b      	beq.n	8009a24 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	7c12      	ldrb	r2, [r2, #16]
 8009a18:	f107 0108 	add.w	r1, r7, #8
 8009a1c:	4610      	mov	r0, r2
 8009a1e:	4798      	blx	r3
 8009a20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a22:	e091      	b.n	8009b48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a24:	6839      	ldr	r1, [r7, #0]
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 facb 	bl	8009fc2 <USBD_CtlError>
            err++;
 8009a2c:	7afb      	ldrb	r3, [r7, #11]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	72fb      	strb	r3, [r7, #11]
          break;
 8009a32:	e089      	b.n	8009b48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d00b      	beq.n	8009a58 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	7c12      	ldrb	r2, [r2, #16]
 8009a4c:	f107 0108 	add.w	r1, r7, #8
 8009a50:	4610      	mov	r0, r2
 8009a52:	4798      	blx	r3
 8009a54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a56:	e077      	b.n	8009b48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a58:	6839      	ldr	r1, [r7, #0]
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 fab1 	bl	8009fc2 <USBD_CtlError>
            err++;
 8009a60:	7afb      	ldrb	r3, [r7, #11]
 8009a62:	3301      	adds	r3, #1
 8009a64:	72fb      	strb	r3, [r7, #11]
          break;
 8009a66:	e06f      	b.n	8009b48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d00b      	beq.n	8009a8c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	7c12      	ldrb	r2, [r2, #16]
 8009a80:	f107 0108 	add.w	r1, r7, #8
 8009a84:	4610      	mov	r0, r2
 8009a86:	4798      	blx	r3
 8009a88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a8a:	e05d      	b.n	8009b48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a8c:	6839      	ldr	r1, [r7, #0]
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 fa97 	bl	8009fc2 <USBD_CtlError>
            err++;
 8009a94:	7afb      	ldrb	r3, [r7, #11]
 8009a96:	3301      	adds	r3, #1
 8009a98:	72fb      	strb	r3, [r7, #11]
          break;
 8009a9a:	e055      	b.n	8009b48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009aa2:	691b      	ldr	r3, [r3, #16]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d00b      	beq.n	8009ac0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009aae:	691b      	ldr	r3, [r3, #16]
 8009ab0:	687a      	ldr	r2, [r7, #4]
 8009ab2:	7c12      	ldrb	r2, [r2, #16]
 8009ab4:	f107 0108 	add.w	r1, r7, #8
 8009ab8:	4610      	mov	r0, r2
 8009aba:	4798      	blx	r3
 8009abc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009abe:	e043      	b.n	8009b48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ac0:	6839      	ldr	r1, [r7, #0]
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 fa7d 	bl	8009fc2 <USBD_CtlError>
            err++;
 8009ac8:	7afb      	ldrb	r3, [r7, #11]
 8009aca:	3301      	adds	r3, #1
 8009acc:	72fb      	strb	r3, [r7, #11]
          break;
 8009ace:	e03b      	b.n	8009b48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ad6:	695b      	ldr	r3, [r3, #20]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d00b      	beq.n	8009af4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ae2:	695b      	ldr	r3, [r3, #20]
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	7c12      	ldrb	r2, [r2, #16]
 8009ae8:	f107 0108 	add.w	r1, r7, #8
 8009aec:	4610      	mov	r0, r2
 8009aee:	4798      	blx	r3
 8009af0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009af2:	e029      	b.n	8009b48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009af4:	6839      	ldr	r1, [r7, #0]
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 fa63 	bl	8009fc2 <USBD_CtlError>
            err++;
 8009afc:	7afb      	ldrb	r3, [r7, #11]
 8009afe:	3301      	adds	r3, #1
 8009b00:	72fb      	strb	r3, [r7, #11]
          break;
 8009b02:	e021      	b.n	8009b48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b0a:	699b      	ldr	r3, [r3, #24]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d00b      	beq.n	8009b28 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b16:	699b      	ldr	r3, [r3, #24]
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	7c12      	ldrb	r2, [r2, #16]
 8009b1c:	f107 0108 	add.w	r1, r7, #8
 8009b20:	4610      	mov	r0, r2
 8009b22:	4798      	blx	r3
 8009b24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b26:	e00f      	b.n	8009b48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b28:	6839      	ldr	r1, [r7, #0]
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 fa49 	bl	8009fc2 <USBD_CtlError>
            err++;
 8009b30:	7afb      	ldrb	r3, [r7, #11]
 8009b32:	3301      	adds	r3, #1
 8009b34:	72fb      	strb	r3, [r7, #11]
          break;
 8009b36:	e007      	b.n	8009b48 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009b38:	6839      	ldr	r1, [r7, #0]
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 fa41 	bl	8009fc2 <USBD_CtlError>
          err++;
 8009b40:	7afb      	ldrb	r3, [r7, #11]
 8009b42:	3301      	adds	r3, #1
 8009b44:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009b46:	bf00      	nop
      }
      break;
 8009b48:	e037      	b.n	8009bba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	7c1b      	ldrb	r3, [r3, #16]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d109      	bne.n	8009b66 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b5a:	f107 0208 	add.w	r2, r7, #8
 8009b5e:	4610      	mov	r0, r2
 8009b60:	4798      	blx	r3
 8009b62:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b64:	e029      	b.n	8009bba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009b66:	6839      	ldr	r1, [r7, #0]
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 fa2a 	bl	8009fc2 <USBD_CtlError>
        err++;
 8009b6e:	7afb      	ldrb	r3, [r7, #11]
 8009b70:	3301      	adds	r3, #1
 8009b72:	72fb      	strb	r3, [r7, #11]
      break;
 8009b74:	e021      	b.n	8009bba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	7c1b      	ldrb	r3, [r3, #16]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d10d      	bne.n	8009b9a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b86:	f107 0208 	add.w	r2, r7, #8
 8009b8a:	4610      	mov	r0, r2
 8009b8c:	4798      	blx	r3
 8009b8e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	3301      	adds	r3, #1
 8009b94:	2207      	movs	r2, #7
 8009b96:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b98:	e00f      	b.n	8009bba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009b9a:	6839      	ldr	r1, [r7, #0]
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 fa10 	bl	8009fc2 <USBD_CtlError>
        err++;
 8009ba2:	7afb      	ldrb	r3, [r7, #11]
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	72fb      	strb	r3, [r7, #11]
      break;
 8009ba8:	e007      	b.n	8009bba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009baa:	6839      	ldr	r1, [r7, #0]
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 fa08 	bl	8009fc2 <USBD_CtlError>
      err++;
 8009bb2:	7afb      	ldrb	r3, [r7, #11]
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	72fb      	strb	r3, [r7, #11]
      break;
 8009bb8:	bf00      	nop
  }

  if (err != 0U)
 8009bba:	7afb      	ldrb	r3, [r7, #11]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d11e      	bne.n	8009bfe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	88db      	ldrh	r3, [r3, #6]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d016      	beq.n	8009bf6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009bc8:	893b      	ldrh	r3, [r7, #8]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d00e      	beq.n	8009bec <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	88da      	ldrh	r2, [r3, #6]
 8009bd2:	893b      	ldrh	r3, [r7, #8]
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	bf28      	it	cs
 8009bd8:	4613      	movcs	r3, r2
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009bde:	893b      	ldrh	r3, [r7, #8]
 8009be0:	461a      	mov	r2, r3
 8009be2:	68f9      	ldr	r1, [r7, #12]
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 fa69 	bl	800a0bc <USBD_CtlSendData>
 8009bea:	e009      	b.n	8009c00 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009bec:	6839      	ldr	r1, [r7, #0]
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 f9e7 	bl	8009fc2 <USBD_CtlError>
 8009bf4:	e004      	b.n	8009c00 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 fac1 	bl	800a17e <USBD_CtlSendStatus>
 8009bfc:	e000      	b.n	8009c00 <USBD_GetDescriptor+0x2cc>
    return;
 8009bfe:	bf00      	nop
  }
}
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop

08009c08 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	889b      	ldrh	r3, [r3, #4]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d131      	bne.n	8009c7e <USBD_SetAddress+0x76>
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	88db      	ldrh	r3, [r3, #6]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d12d      	bne.n	8009c7e <USBD_SetAddress+0x76>
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	885b      	ldrh	r3, [r3, #2]
 8009c26:	2b7f      	cmp	r3, #127	@ 0x7f
 8009c28:	d829      	bhi.n	8009c7e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	885b      	ldrh	r3, [r3, #2]
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	2b03      	cmp	r3, #3
 8009c40:	d104      	bne.n	8009c4c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009c42:	6839      	ldr	r1, [r7, #0]
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 f9bc 	bl	8009fc2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c4a:	e01d      	b.n	8009c88 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	7bfa      	ldrb	r2, [r7, #15]
 8009c50:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009c54:	7bfb      	ldrb	r3, [r7, #15]
 8009c56:	4619      	mov	r1, r3
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 ff7d 	bl	800ab58 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 fa8d 	bl	800a17e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009c64:	7bfb      	ldrb	r3, [r7, #15]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d004      	beq.n	8009c74 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2202      	movs	r2, #2
 8009c6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c72:	e009      	b.n	8009c88 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2201      	movs	r2, #1
 8009c78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c7c:	e004      	b.n	8009c88 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009c7e:	6839      	ldr	r1, [r7, #0]
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 f99e 	bl	8009fc2 <USBD_CtlError>
  }
}
 8009c86:	bf00      	nop
 8009c88:	bf00      	nop
 8009c8a:	3710      	adds	r7, #16
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	885b      	ldrh	r3, [r3, #2]
 8009ca2:	b2da      	uxtb	r2, r3
 8009ca4:	4b4e      	ldr	r3, [pc, #312]	@ (8009de0 <USBD_SetConfig+0x150>)
 8009ca6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ca8:	4b4d      	ldr	r3, [pc, #308]	@ (8009de0 <USBD_SetConfig+0x150>)
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d905      	bls.n	8009cbc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009cb0:	6839      	ldr	r1, [r7, #0]
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 f985 	bl	8009fc2 <USBD_CtlError>
    return USBD_FAIL;
 8009cb8:	2303      	movs	r3, #3
 8009cba:	e08c      	b.n	8009dd6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	2b02      	cmp	r3, #2
 8009cc6:	d002      	beq.n	8009cce <USBD_SetConfig+0x3e>
 8009cc8:	2b03      	cmp	r3, #3
 8009cca:	d029      	beq.n	8009d20 <USBD_SetConfig+0x90>
 8009ccc:	e075      	b.n	8009dba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009cce:	4b44      	ldr	r3, [pc, #272]	@ (8009de0 <USBD_SetConfig+0x150>)
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d020      	beq.n	8009d18 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009cd6:	4b42      	ldr	r3, [pc, #264]	@ (8009de0 <USBD_SetConfig+0x150>)
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	461a      	mov	r2, r3
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009ce0:	4b3f      	ldr	r3, [pc, #252]	@ (8009de0 <USBD_SetConfig+0x150>)
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f7fe ffcd 	bl	8008c86 <USBD_SetClassConfig>
 8009cec:	4603      	mov	r3, r0
 8009cee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009cf0:	7bfb      	ldrb	r3, [r7, #15]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d008      	beq.n	8009d08 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009cf6:	6839      	ldr	r1, [r7, #0]
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 f962 	bl	8009fc2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2202      	movs	r2, #2
 8009d02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d06:	e065      	b.n	8009dd4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 fa38 	bl	800a17e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2203      	movs	r2, #3
 8009d12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009d16:	e05d      	b.n	8009dd4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 fa30 	bl	800a17e <USBD_CtlSendStatus>
      break;
 8009d1e:	e059      	b.n	8009dd4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009d20:	4b2f      	ldr	r3, [pc, #188]	@ (8009de0 <USBD_SetConfig+0x150>)
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d112      	bne.n	8009d4e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2202      	movs	r2, #2
 8009d2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009d30:	4b2b      	ldr	r3, [pc, #172]	@ (8009de0 <USBD_SetConfig+0x150>)
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	461a      	mov	r2, r3
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d3a:	4b29      	ldr	r3, [pc, #164]	@ (8009de0 <USBD_SetConfig+0x150>)
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	4619      	mov	r1, r3
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f7fe ffbc 	bl	8008cbe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 fa19 	bl	800a17e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d4c:	e042      	b.n	8009dd4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009d4e:	4b24      	ldr	r3, [pc, #144]	@ (8009de0 <USBD_SetConfig+0x150>)
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	461a      	mov	r2, r3
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d02a      	beq.n	8009db2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	4619      	mov	r1, r3
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f7fe ffaa 	bl	8008cbe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8009de0 <USBD_SetConfig+0x150>)
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	461a      	mov	r2, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d74:	4b1a      	ldr	r3, [pc, #104]	@ (8009de0 <USBD_SetConfig+0x150>)
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	4619      	mov	r1, r3
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f7fe ff83 	bl	8008c86 <USBD_SetClassConfig>
 8009d80:	4603      	mov	r3, r0
 8009d82:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009d84:	7bfb      	ldrb	r3, [r7, #15]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d00f      	beq.n	8009daa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009d8a:	6839      	ldr	r1, [r7, #0]
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 f918 	bl	8009fc2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	4619      	mov	r1, r3
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f7fe ff8f 	bl	8008cbe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2202      	movs	r2, #2
 8009da4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009da8:	e014      	b.n	8009dd4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 f9e7 	bl	800a17e <USBD_CtlSendStatus>
      break;
 8009db0:	e010      	b.n	8009dd4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 f9e3 	bl	800a17e <USBD_CtlSendStatus>
      break;
 8009db8:	e00c      	b.n	8009dd4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009dba:	6839      	ldr	r1, [r7, #0]
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 f900 	bl	8009fc2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009dc2:	4b07      	ldr	r3, [pc, #28]	@ (8009de0 <USBD_SetConfig+0x150>)
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f7fe ff78 	bl	8008cbe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009dce:	2303      	movs	r3, #3
 8009dd0:	73fb      	strb	r3, [r7, #15]
      break;
 8009dd2:	bf00      	nop
  }

  return ret;
 8009dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	bf00      	nop
 8009de0:	200007c8 	.word	0x200007c8

08009de4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	88db      	ldrh	r3, [r3, #6]
 8009df2:	2b01      	cmp	r3, #1
 8009df4:	d004      	beq.n	8009e00 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009df6:	6839      	ldr	r1, [r7, #0]
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 f8e2 	bl	8009fc2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009dfe:	e023      	b.n	8009e48 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	2b02      	cmp	r3, #2
 8009e0a:	dc02      	bgt.n	8009e12 <USBD_GetConfig+0x2e>
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	dc03      	bgt.n	8009e18 <USBD_GetConfig+0x34>
 8009e10:	e015      	b.n	8009e3e <USBD_GetConfig+0x5a>
 8009e12:	2b03      	cmp	r3, #3
 8009e14:	d00b      	beq.n	8009e2e <USBD_GetConfig+0x4a>
 8009e16:	e012      	b.n	8009e3e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	3308      	adds	r3, #8
 8009e22:	2201      	movs	r2, #1
 8009e24:	4619      	mov	r1, r3
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 f948 	bl	800a0bc <USBD_CtlSendData>
        break;
 8009e2c:	e00c      	b.n	8009e48 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	3304      	adds	r3, #4
 8009e32:	2201      	movs	r2, #1
 8009e34:	4619      	mov	r1, r3
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 f940 	bl	800a0bc <USBD_CtlSendData>
        break;
 8009e3c:	e004      	b.n	8009e48 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009e3e:	6839      	ldr	r1, [r7, #0]
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 f8be 	bl	8009fc2 <USBD_CtlError>
        break;
 8009e46:	bf00      	nop
}
 8009e48:	bf00      	nop
 8009e4a:	3708      	adds	r7, #8
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	3b01      	subs	r3, #1
 8009e64:	2b02      	cmp	r3, #2
 8009e66:	d81e      	bhi.n	8009ea6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	88db      	ldrh	r3, [r3, #6]
 8009e6c:	2b02      	cmp	r3, #2
 8009e6e:	d004      	beq.n	8009e7a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009e70:	6839      	ldr	r1, [r7, #0]
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 f8a5 	bl	8009fc2 <USBD_CtlError>
        break;
 8009e78:	e01a      	b.n	8009eb0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d005      	beq.n	8009e96 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	68db      	ldr	r3, [r3, #12]
 8009e8e:	f043 0202 	orr.w	r2, r3, #2
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	330c      	adds	r3, #12
 8009e9a:	2202      	movs	r2, #2
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 f90c 	bl	800a0bc <USBD_CtlSendData>
      break;
 8009ea4:	e004      	b.n	8009eb0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009ea6:	6839      	ldr	r1, [r7, #0]
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 f88a 	bl	8009fc2 <USBD_CtlError>
      break;
 8009eae:	bf00      	nop
  }
}
 8009eb0:	bf00      	nop
 8009eb2:	3708      	adds	r7, #8
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	885b      	ldrh	r3, [r3, #2]
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d107      	bne.n	8009eda <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2201      	movs	r2, #1
 8009ece:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 f953 	bl	800a17e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009ed8:	e013      	b.n	8009f02 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	885b      	ldrh	r3, [r3, #2]
 8009ede:	2b02      	cmp	r3, #2
 8009ee0:	d10b      	bne.n	8009efa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	889b      	ldrh	r3, [r3, #4]
 8009ee6:	0a1b      	lsrs	r3, r3, #8
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	b2da      	uxtb	r2, r3
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 f943 	bl	800a17e <USBD_CtlSendStatus>
}
 8009ef8:	e003      	b.n	8009f02 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009efa:	6839      	ldr	r1, [r7, #0]
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 f860 	bl	8009fc2 <USBD_CtlError>
}
 8009f02:	bf00      	nop
 8009f04:	3708      	adds	r7, #8
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b082      	sub	sp, #8
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
 8009f12:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	3b01      	subs	r3, #1
 8009f1e:	2b02      	cmp	r3, #2
 8009f20:	d80b      	bhi.n	8009f3a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	885b      	ldrh	r3, [r3, #2]
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d10c      	bne.n	8009f44 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 f923 	bl	800a17e <USBD_CtlSendStatus>
      }
      break;
 8009f38:	e004      	b.n	8009f44 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009f3a:	6839      	ldr	r1, [r7, #0]
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 f840 	bl	8009fc2 <USBD_CtlError>
      break;
 8009f42:	e000      	b.n	8009f46 <USBD_ClrFeature+0x3c>
      break;
 8009f44:	bf00      	nop
  }
}
 8009f46:	bf00      	nop
 8009f48:	3708      	adds	r7, #8
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}

08009f4e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009f4e:	b580      	push	{r7, lr}
 8009f50:	b084      	sub	sp, #16
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
 8009f56:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	781a      	ldrb	r2, [r3, #0]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	3301      	adds	r3, #1
 8009f68:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	781a      	ldrb	r2, [r3, #0]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	3301      	adds	r3, #1
 8009f76:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009f78:	68f8      	ldr	r0, [r7, #12]
 8009f7a:	f7ff fa3d 	bl	80093f8 <SWAPBYTE>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	461a      	mov	r2, r3
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	3301      	adds	r3, #1
 8009f8a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	3301      	adds	r3, #1
 8009f90:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009f92:	68f8      	ldr	r0, [r7, #12]
 8009f94:	f7ff fa30 	bl	80093f8 <SWAPBYTE>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009fac:	68f8      	ldr	r0, [r7, #12]
 8009fae:	f7ff fa23 	bl	80093f8 <SWAPBYTE>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	80da      	strh	r2, [r3, #6]
}
 8009fba:	bf00      	nop
 8009fbc:	3710      	adds	r7, #16
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}

08009fc2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fc2:	b580      	push	{r7, lr}
 8009fc4:	b082      	sub	sp, #8
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
 8009fca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009fcc:	2180      	movs	r1, #128	@ 0x80
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 fd58 	bl	800aa84 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 fd54 	bl	800aa84 <USBD_LL_StallEP>
}
 8009fdc:	bf00      	nop
 8009fde:	3708      	adds	r7, #8
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b086      	sub	sp, #24
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d042      	beq.n	800a080 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009ffe:	6938      	ldr	r0, [r7, #16]
 800a000:	f000 f842 	bl	800a088 <USBD_GetLen>
 800a004:	4603      	mov	r3, r0
 800a006:	3301      	adds	r3, #1
 800a008:	005b      	lsls	r3, r3, #1
 800a00a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a00e:	d808      	bhi.n	800a022 <USBD_GetString+0x3e>
 800a010:	6938      	ldr	r0, [r7, #16]
 800a012:	f000 f839 	bl	800a088 <USBD_GetLen>
 800a016:	4603      	mov	r3, r0
 800a018:	3301      	adds	r3, #1
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	005b      	lsls	r3, r3, #1
 800a01e:	b29a      	uxth	r2, r3
 800a020:	e001      	b.n	800a026 <USBD_GetString+0x42>
 800a022:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a02a:	7dfb      	ldrb	r3, [r7, #23]
 800a02c:	68ba      	ldr	r2, [r7, #8]
 800a02e:	4413      	add	r3, r2
 800a030:	687a      	ldr	r2, [r7, #4]
 800a032:	7812      	ldrb	r2, [r2, #0]
 800a034:	701a      	strb	r2, [r3, #0]
  idx++;
 800a036:	7dfb      	ldrb	r3, [r7, #23]
 800a038:	3301      	adds	r3, #1
 800a03a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a03c:	7dfb      	ldrb	r3, [r7, #23]
 800a03e:	68ba      	ldr	r2, [r7, #8]
 800a040:	4413      	add	r3, r2
 800a042:	2203      	movs	r2, #3
 800a044:	701a      	strb	r2, [r3, #0]
  idx++;
 800a046:	7dfb      	ldrb	r3, [r7, #23]
 800a048:	3301      	adds	r3, #1
 800a04a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a04c:	e013      	b.n	800a076 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a04e:	7dfb      	ldrb	r3, [r7, #23]
 800a050:	68ba      	ldr	r2, [r7, #8]
 800a052:	4413      	add	r3, r2
 800a054:	693a      	ldr	r2, [r7, #16]
 800a056:	7812      	ldrb	r2, [r2, #0]
 800a058:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	3301      	adds	r3, #1
 800a05e:	613b      	str	r3, [r7, #16]
    idx++;
 800a060:	7dfb      	ldrb	r3, [r7, #23]
 800a062:	3301      	adds	r3, #1
 800a064:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a066:	7dfb      	ldrb	r3, [r7, #23]
 800a068:	68ba      	ldr	r2, [r7, #8]
 800a06a:	4413      	add	r3, r2
 800a06c:	2200      	movs	r2, #0
 800a06e:	701a      	strb	r2, [r3, #0]
    idx++;
 800a070:	7dfb      	ldrb	r3, [r7, #23]
 800a072:	3301      	adds	r3, #1
 800a074:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d1e7      	bne.n	800a04e <USBD_GetString+0x6a>
 800a07e:	e000      	b.n	800a082 <USBD_GetString+0x9e>
    return;
 800a080:	bf00      	nop
  }
}
 800a082:	3718      	adds	r7, #24
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a088:	b480      	push	{r7}
 800a08a:	b085      	sub	sp, #20
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a090:	2300      	movs	r3, #0
 800a092:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a098:	e005      	b.n	800a0a6 <USBD_GetLen+0x1e>
  {
    len++;
 800a09a:	7bfb      	ldrb	r3, [r7, #15]
 800a09c:	3301      	adds	r3, #1
 800a09e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d1f5      	bne.n	800a09a <USBD_GetLen+0x12>
  }

  return len;
 800a0ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3714      	adds	r7, #20
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr

0800a0bc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	60b9      	str	r1, [r7, #8]
 800a0c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2202      	movs	r2, #2
 800a0cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	68ba      	ldr	r2, [r7, #8]
 800a0da:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	68ba      	ldr	r2, [r7, #8]
 800a0e6:	2100      	movs	r1, #0
 800a0e8:	68f8      	ldr	r0, [r7, #12]
 800a0ea:	f000 fd54 	bl	800ab96 <USBD_LL_Transmit>

  return USBD_OK;
 800a0ee:	2300      	movs	r3, #0
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3710      	adds	r7, #16
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	68ba      	ldr	r2, [r7, #8]
 800a108:	2100      	movs	r1, #0
 800a10a:	68f8      	ldr	r0, [r7, #12]
 800a10c:	f000 fd43 	bl	800ab96 <USBD_LL_Transmit>

  return USBD_OK;
 800a110:	2300      	movs	r3, #0
}
 800a112:	4618      	mov	r0, r3
 800a114:	3710      	adds	r7, #16
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}

0800a11a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b084      	sub	sp, #16
 800a11e:	af00      	add	r7, sp, #0
 800a120:	60f8      	str	r0, [r7, #12]
 800a122:	60b9      	str	r1, [r7, #8]
 800a124:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2203      	movs	r2, #3
 800a12a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	68ba      	ldr	r2, [r7, #8]
 800a13a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	68ba      	ldr	r2, [r7, #8]
 800a14a:	2100      	movs	r1, #0
 800a14c:	68f8      	ldr	r0, [r7, #12]
 800a14e:	f000 fd43 	bl	800abd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a152:	2300      	movs	r3, #0
}
 800a154:	4618      	mov	r0, r3
 800a156:	3710      	adds	r7, #16
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	68ba      	ldr	r2, [r7, #8]
 800a16c:	2100      	movs	r1, #0
 800a16e:	68f8      	ldr	r0, [r7, #12]
 800a170:	f000 fd32 	bl	800abd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a174:	2300      	movs	r3, #0
}
 800a176:	4618      	mov	r0, r3
 800a178:	3710      	adds	r7, #16
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}

0800a17e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a17e:	b580      	push	{r7, lr}
 800a180:	b082      	sub	sp, #8
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2204      	movs	r2, #4
 800a18a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a18e:	2300      	movs	r3, #0
 800a190:	2200      	movs	r2, #0
 800a192:	2100      	movs	r1, #0
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f000 fcfe 	bl	800ab96 <USBD_LL_Transmit>

  return USBD_OK;
 800a19a:	2300      	movs	r3, #0
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3708      	adds	r7, #8
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2205      	movs	r2, #5
 800a1b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	2100      	movs	r1, #0
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 fd0c 	bl	800abd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1c0:	2300      	movs	r3, #0
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3708      	adds	r7, #8
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
	...

0800a1cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	4912      	ldr	r1, [pc, #72]	@ (800a21c <MX_USB_DEVICE_Init+0x50>)
 800a1d4:	4812      	ldr	r0, [pc, #72]	@ (800a220 <MX_USB_DEVICE_Init+0x54>)
 800a1d6:	f7fe fcd9 	bl	8008b8c <USBD_Init>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d001      	beq.n	800a1e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a1e0:	f7f6 fff8 	bl	80011d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a1e4:	490f      	ldr	r1, [pc, #60]	@ (800a224 <MX_USB_DEVICE_Init+0x58>)
 800a1e6:	480e      	ldr	r0, [pc, #56]	@ (800a220 <MX_USB_DEVICE_Init+0x54>)
 800a1e8:	f7fe fd00 	bl	8008bec <USBD_RegisterClass>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d001      	beq.n	800a1f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a1f2:	f7f6 ffef 	bl	80011d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a1f6:	490c      	ldr	r1, [pc, #48]	@ (800a228 <MX_USB_DEVICE_Init+0x5c>)
 800a1f8:	4809      	ldr	r0, [pc, #36]	@ (800a220 <MX_USB_DEVICE_Init+0x54>)
 800a1fa:	f7fe fbf7 	bl	80089ec <USBD_CDC_RegisterInterface>
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b00      	cmp	r3, #0
 800a202:	d001      	beq.n	800a208 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a204:	f7f6 ffe6 	bl	80011d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a208:	4805      	ldr	r0, [pc, #20]	@ (800a220 <MX_USB_DEVICE_Init+0x54>)
 800a20a:	f7fe fd25 	bl	8008c58 <USBD_Start>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d001      	beq.n	800a218 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a214:	f7f6 ffde 	bl	80011d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a218:	bf00      	nop
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	200000b8 	.word	0x200000b8
 800a220:	200007cc 	.word	0x200007cc
 800a224:	2000001c 	.word	0x2000001c
 800a228:	200000a4 	.word	0x200000a4

0800a22c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a230:	2200      	movs	r2, #0
 800a232:	4905      	ldr	r1, [pc, #20]	@ (800a248 <CDC_Init_FS+0x1c>)
 800a234:	4805      	ldr	r0, [pc, #20]	@ (800a24c <CDC_Init_FS+0x20>)
 800a236:	f7fe fbf3 	bl	8008a20 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a23a:	4905      	ldr	r1, [pc, #20]	@ (800a250 <CDC_Init_FS+0x24>)
 800a23c:	4803      	ldr	r0, [pc, #12]	@ (800a24c <CDC_Init_FS+0x20>)
 800a23e:	f7fe fc11 	bl	8008a64 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a242:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a244:	4618      	mov	r0, r3
 800a246:	bd80      	pop	{r7, pc}
 800a248:	20000ca8 	.word	0x20000ca8
 800a24c:	200007cc 	.word	0x200007cc
 800a250:	20000aa8 	.word	0x20000aa8

0800a254 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a254:	b480      	push	{r7}
 800a256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a258:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr

0800a264 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
 800a26a:	4603      	mov	r3, r0
 800a26c:	6039      	str	r1, [r7, #0]
 800a26e:	71fb      	strb	r3, [r7, #7]
 800a270:	4613      	mov	r3, r2
 800a272:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a274:	79fb      	ldrb	r3, [r7, #7]
 800a276:	2b23      	cmp	r3, #35	@ 0x23
 800a278:	f200 8098 	bhi.w	800a3ac <CDC_Control_FS+0x148>
 800a27c:	a201      	add	r2, pc, #4	@ (adr r2, 800a284 <CDC_Control_FS+0x20>)
 800a27e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a282:	bf00      	nop
 800a284:	0800a3ad 	.word	0x0800a3ad
 800a288:	0800a3ad 	.word	0x0800a3ad
 800a28c:	0800a3ad 	.word	0x0800a3ad
 800a290:	0800a3ad 	.word	0x0800a3ad
 800a294:	0800a3ad 	.word	0x0800a3ad
 800a298:	0800a3ad 	.word	0x0800a3ad
 800a29c:	0800a3ad 	.word	0x0800a3ad
 800a2a0:	0800a3ad 	.word	0x0800a3ad
 800a2a4:	0800a3ad 	.word	0x0800a3ad
 800a2a8:	0800a3ad 	.word	0x0800a3ad
 800a2ac:	0800a3ad 	.word	0x0800a3ad
 800a2b0:	0800a3ad 	.word	0x0800a3ad
 800a2b4:	0800a3ad 	.word	0x0800a3ad
 800a2b8:	0800a3ad 	.word	0x0800a3ad
 800a2bc:	0800a3ad 	.word	0x0800a3ad
 800a2c0:	0800a3ad 	.word	0x0800a3ad
 800a2c4:	0800a3ad 	.word	0x0800a3ad
 800a2c8:	0800a3ad 	.word	0x0800a3ad
 800a2cc:	0800a3ad 	.word	0x0800a3ad
 800a2d0:	0800a3ad 	.word	0x0800a3ad
 800a2d4:	0800a3ad 	.word	0x0800a3ad
 800a2d8:	0800a3ad 	.word	0x0800a3ad
 800a2dc:	0800a3ad 	.word	0x0800a3ad
 800a2e0:	0800a3ad 	.word	0x0800a3ad
 800a2e4:	0800a3ad 	.word	0x0800a3ad
 800a2e8:	0800a3ad 	.word	0x0800a3ad
 800a2ec:	0800a3ad 	.word	0x0800a3ad
 800a2f0:	0800a3ad 	.word	0x0800a3ad
 800a2f4:	0800a3ad 	.word	0x0800a3ad
 800a2f8:	0800a3ad 	.word	0x0800a3ad
 800a2fc:	0800a3ad 	.word	0x0800a3ad
 800a300:	0800a3ad 	.word	0x0800a3ad
 800a304:	0800a315 	.word	0x0800a315
 800a308:	0800a359 	.word	0x0800a359
 800a30c:	0800a3ad 	.word	0x0800a3ad
 800a310:	0800a3ad 	.word	0x0800a3ad
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
     	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2]<<16) | (pbuf[3]<<24));
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	461a      	mov	r2, r3
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	3301      	adds	r3, #1
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	021b      	lsls	r3, r3, #8
 800a322:	431a      	orrs	r2, r3
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	3302      	adds	r3, #2
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	041b      	lsls	r3, r3, #16
 800a32c:	431a      	orrs	r2, r3
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	3303      	adds	r3, #3
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	061b      	lsls	r3, r3, #24
 800a336:	4313      	orrs	r3, r2
 800a338:	461a      	mov	r2, r3
 800a33a:	4b20      	ldr	r3, [pc, #128]	@ (800a3bc <CDC_Control_FS+0x158>)
 800a33c:	601a      	str	r2, [r3, #0]
     	LineCoding.format = pbuf[4];
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	791a      	ldrb	r2, [r3, #4]
 800a342:	4b1e      	ldr	r3, [pc, #120]	@ (800a3bc <CDC_Control_FS+0x158>)
 800a344:	711a      	strb	r2, [r3, #4]
     	LineCoding.paritytype = pbuf[5];
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	795a      	ldrb	r2, [r3, #5]
 800a34a:	4b1c      	ldr	r3, [pc, #112]	@ (800a3bc <CDC_Control_FS+0x158>)
 800a34c:	715a      	strb	r2, [r3, #5]
     	LineCoding.datatype = pbuf[6];
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	799a      	ldrb	r2, [r3, #6]
 800a352:	4b1a      	ldr	r3, [pc, #104]	@ (800a3bc <CDC_Control_FS+0x158>)
 800a354:	719a      	strb	r2, [r3, #6]
     break;
 800a356:	e02a      	b.n	800a3ae <CDC_Control_FS+0x14a>

     case CDC_GET_LINE_CODING:
     	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800a358:	4b18      	ldr	r3, [pc, #96]	@ (800a3bc <CDC_Control_FS+0x158>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	b2da      	uxtb	r2, r3
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	701a      	strb	r2, [r3, #0]
     	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800a362:	4b16      	ldr	r3, [pc, #88]	@ (800a3bc <CDC_Control_FS+0x158>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	0a1a      	lsrs	r2, r3, #8
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	3301      	adds	r3, #1
 800a36c:	b2d2      	uxtb	r2, r2
 800a36e:	701a      	strb	r2, [r3, #0]
     	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800a370:	4b12      	ldr	r3, [pc, #72]	@ (800a3bc <CDC_Control_FS+0x158>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	0c1a      	lsrs	r2, r3, #16
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	3302      	adds	r3, #2
 800a37a:	b2d2      	uxtb	r2, r2
 800a37c:	701a      	strb	r2, [r3, #0]
     	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800a37e:	4b0f      	ldr	r3, [pc, #60]	@ (800a3bc <CDC_Control_FS+0x158>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	0e1a      	lsrs	r2, r3, #24
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	3303      	adds	r3, #3
 800a388:	b2d2      	uxtb	r2, r2
 800a38a:	701a      	strb	r2, [r3, #0]
     	pbuf[4] = LineCoding.format;
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	3304      	adds	r3, #4
 800a390:	4a0a      	ldr	r2, [pc, #40]	@ (800a3bc <CDC_Control_FS+0x158>)
 800a392:	7912      	ldrb	r2, [r2, #4]
 800a394:	701a      	strb	r2, [r3, #0]
     	pbuf[5] = LineCoding.paritytype;
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	3305      	adds	r3, #5
 800a39a:	4a08      	ldr	r2, [pc, #32]	@ (800a3bc <CDC_Control_FS+0x158>)
 800a39c:	7952      	ldrb	r2, [r2, #5]
 800a39e:	701a      	strb	r2, [r3, #0]
     	pbuf[6] = LineCoding.datatype;
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	3306      	adds	r3, #6
 800a3a4:	4a05      	ldr	r2, [pc, #20]	@ (800a3bc <CDC_Control_FS+0x158>)
 800a3a6:	7992      	ldrb	r2, [r2, #6]
 800a3a8:	701a      	strb	r2, [r3, #0]
     break;
 800a3aa:	e000      	b.n	800a3ae <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a3ac:	bf00      	nop
  }

  return (USBD_OK);
 800a3ae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr
 800a3bc:	2000009c 	.word	0x2000009c

0800a3c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b082      	sub	sp, #8
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 if(aPtrFunRx != NULL)
 800a3ca:	4b0c      	ldr	r3, [pc, #48]	@ (800a3fc <CDC_Receive_FS+0x3c>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d007      	beq.n	800a3e2 <CDC_Receive_FS+0x22>
			aPtrFunRx(Buf, *Len);
 800a3d2:	4b0a      	ldr	r3, [pc, #40]	@ (800a3fc <CDC_Receive_FS+0x3c>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	683a      	ldr	r2, [r7, #0]
 800a3d8:	6812      	ldr	r2, [r2, #0]
 800a3da:	b292      	uxth	r2, r2
 800a3dc:	4611      	mov	r1, r2
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	4798      	blx	r3
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a3e2:	6879      	ldr	r1, [r7, #4]
 800a3e4:	4806      	ldr	r0, [pc, #24]	@ (800a400 <CDC_Receive_FS+0x40>)
 800a3e6:	f7fe fb3d 	bl	8008a64 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a3ea:	4805      	ldr	r0, [pc, #20]	@ (800a400 <CDC_Receive_FS+0x40>)
 800a3ec:	f7fe fb98 	bl	8008b20 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a3f0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3708      	adds	r7, #8
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	20000ea8 	.word	0x20000ea8
 800a400:	200007cc 	.word	0x200007cc

0800a404 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	460b      	mov	r3, r1
 800a40e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a410:	2300      	movs	r3, #0
 800a412:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a414:	4b0d      	ldr	r3, [pc, #52]	@ (800a44c <CDC_Transmit_FS+0x48>)
 800a416:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a41a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a422:	2b00      	cmp	r3, #0
 800a424:	d001      	beq.n	800a42a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a426:	2301      	movs	r3, #1
 800a428:	e00b      	b.n	800a442 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a42a:	887b      	ldrh	r3, [r7, #2]
 800a42c:	461a      	mov	r2, r3
 800a42e:	6879      	ldr	r1, [r7, #4]
 800a430:	4806      	ldr	r0, [pc, #24]	@ (800a44c <CDC_Transmit_FS+0x48>)
 800a432:	f7fe faf5 	bl	8008a20 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a436:	4805      	ldr	r0, [pc, #20]	@ (800a44c <CDC_Transmit_FS+0x48>)
 800a438:	f7fe fb32 	bl	8008aa0 <USBD_CDC_TransmitPacket>
 800a43c:	4603      	mov	r3, r0
 800a43e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a440:	7bfb      	ldrb	r3, [r7, #15]
}
 800a442:	4618      	mov	r0, r3
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop
 800a44c:	200007cc 	.word	0x200007cc

0800a450 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a450:	b480      	push	{r7}
 800a452:	b087      	sub	sp, #28
 800a454:	af00      	add	r7, sp, #0
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	60b9      	str	r1, [r7, #8]
 800a45a:	4613      	mov	r3, r2
 800a45c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a45e:	2300      	movs	r3, #0
 800a460:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a462:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a466:	4618      	mov	r0, r3
 800a468:	371c      	adds	r7, #28
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr
	...

0800a474 <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 800a47c:	4a04      	ldr	r2, [pc, #16]	@ (800a490 <CDC_AttachRxData+0x1c>)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6013      	str	r3, [r2, #0]
}
 800a482:	bf00      	nop
 800a484:	370c      	adds	r7, #12
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr
 800a48e:	bf00      	nop
 800a490:	20000ea8 	.word	0x20000ea8

0800a494 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
 800a49a:	4603      	mov	r3, r0
 800a49c:	6039      	str	r1, [r7, #0]
 800a49e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	2212      	movs	r2, #18
 800a4a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a4a6:	4b03      	ldr	r3, [pc, #12]	@ (800a4b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr
 800a4b4:	200000d4 	.word	0x200000d4

0800a4b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	4603      	mov	r3, r0
 800a4c0:	6039      	str	r1, [r7, #0]
 800a4c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	2204      	movs	r2, #4
 800a4c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a4ca:	4b03      	ldr	r3, [pc, #12]	@ (800a4d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr
 800a4d8:	200000e8 	.word	0x200000e8

0800a4dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	6039      	str	r1, [r7, #0]
 800a4e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a4e8:	79fb      	ldrb	r3, [r7, #7]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d105      	bne.n	800a4fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a4ee:	683a      	ldr	r2, [r7, #0]
 800a4f0:	4907      	ldr	r1, [pc, #28]	@ (800a510 <USBD_FS_ProductStrDescriptor+0x34>)
 800a4f2:	4808      	ldr	r0, [pc, #32]	@ (800a514 <USBD_FS_ProductStrDescriptor+0x38>)
 800a4f4:	f7ff fd76 	bl	8009fe4 <USBD_GetString>
 800a4f8:	e004      	b.n	800a504 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a4fa:	683a      	ldr	r2, [r7, #0]
 800a4fc:	4904      	ldr	r1, [pc, #16]	@ (800a510 <USBD_FS_ProductStrDescriptor+0x34>)
 800a4fe:	4805      	ldr	r0, [pc, #20]	@ (800a514 <USBD_FS_ProductStrDescriptor+0x38>)
 800a500:	f7ff fd70 	bl	8009fe4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a504:	4b02      	ldr	r3, [pc, #8]	@ (800a510 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a506:	4618      	mov	r0, r3
 800a508:	3708      	adds	r7, #8
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	20000eac 	.word	0x20000eac
 800a514:	0800b640 	.word	0x0800b640

0800a518 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	4603      	mov	r3, r0
 800a520:	6039      	str	r1, [r7, #0]
 800a522:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a524:	683a      	ldr	r2, [r7, #0]
 800a526:	4904      	ldr	r1, [pc, #16]	@ (800a538 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a528:	4804      	ldr	r0, [pc, #16]	@ (800a53c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a52a:	f7ff fd5b 	bl	8009fe4 <USBD_GetString>
  return USBD_StrDesc;
 800a52e:	4b02      	ldr	r3, [pc, #8]	@ (800a538 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a530:	4618      	mov	r0, r3
 800a532:	3708      	adds	r7, #8
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}
 800a538:	20000eac 	.word	0x20000eac
 800a53c:	0800b658 	.word	0x0800b658

0800a540 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b082      	sub	sp, #8
 800a544:	af00      	add	r7, sp, #0
 800a546:	4603      	mov	r3, r0
 800a548:	6039      	str	r1, [r7, #0]
 800a54a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	221a      	movs	r2, #26
 800a550:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a552:	f000 f843 	bl	800a5dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a556:	4b02      	ldr	r3, [pc, #8]	@ (800a560 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3708      	adds	r7, #8
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	200000ec 	.word	0x200000ec

0800a564 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b082      	sub	sp, #8
 800a568:	af00      	add	r7, sp, #0
 800a56a:	4603      	mov	r3, r0
 800a56c:	6039      	str	r1, [r7, #0]
 800a56e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a570:	79fb      	ldrb	r3, [r7, #7]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d105      	bne.n	800a582 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a576:	683a      	ldr	r2, [r7, #0]
 800a578:	4907      	ldr	r1, [pc, #28]	@ (800a598 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a57a:	4808      	ldr	r0, [pc, #32]	@ (800a59c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a57c:	f7ff fd32 	bl	8009fe4 <USBD_GetString>
 800a580:	e004      	b.n	800a58c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a582:	683a      	ldr	r2, [r7, #0]
 800a584:	4904      	ldr	r1, [pc, #16]	@ (800a598 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a586:	4805      	ldr	r0, [pc, #20]	@ (800a59c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a588:	f7ff fd2c 	bl	8009fe4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a58c:	4b02      	ldr	r3, [pc, #8]	@ (800a598 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3708      	adds	r7, #8
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	20000eac 	.word	0x20000eac
 800a59c:	0800b66c 	.word	0x0800b66c

0800a5a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	6039      	str	r1, [r7, #0]
 800a5aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a5ac:	79fb      	ldrb	r3, [r7, #7]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d105      	bne.n	800a5be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a5b2:	683a      	ldr	r2, [r7, #0]
 800a5b4:	4907      	ldr	r1, [pc, #28]	@ (800a5d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a5b6:	4808      	ldr	r0, [pc, #32]	@ (800a5d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a5b8:	f7ff fd14 	bl	8009fe4 <USBD_GetString>
 800a5bc:	e004      	b.n	800a5c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a5be:	683a      	ldr	r2, [r7, #0]
 800a5c0:	4904      	ldr	r1, [pc, #16]	@ (800a5d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a5c2:	4805      	ldr	r0, [pc, #20]	@ (800a5d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a5c4:	f7ff fd0e 	bl	8009fe4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a5c8:	4b02      	ldr	r3, [pc, #8]	@ (800a5d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3708      	adds	r7, #8
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	20000eac 	.word	0x20000eac
 800a5d8:	0800b678 	.word	0x0800b678

0800a5dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a5e2:	4b0f      	ldr	r3, [pc, #60]	@ (800a620 <Get_SerialNum+0x44>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a5e8:	4b0e      	ldr	r3, [pc, #56]	@ (800a624 <Get_SerialNum+0x48>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a5ee:	4b0e      	ldr	r3, [pc, #56]	@ (800a628 <Get_SerialNum+0x4c>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a5f4:	68fa      	ldr	r2, [r7, #12]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d009      	beq.n	800a616 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a602:	2208      	movs	r2, #8
 800a604:	4909      	ldr	r1, [pc, #36]	@ (800a62c <Get_SerialNum+0x50>)
 800a606:	68f8      	ldr	r0, [r7, #12]
 800a608:	f000 f814 	bl	800a634 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a60c:	2204      	movs	r2, #4
 800a60e:	4908      	ldr	r1, [pc, #32]	@ (800a630 <Get_SerialNum+0x54>)
 800a610:	68b8      	ldr	r0, [r7, #8]
 800a612:	f000 f80f 	bl	800a634 <IntToUnicode>
  }
}
 800a616:	bf00      	nop
 800a618:	3710      	adds	r7, #16
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	1fff7a10 	.word	0x1fff7a10
 800a624:	1fff7a14 	.word	0x1fff7a14
 800a628:	1fff7a18 	.word	0x1fff7a18
 800a62c:	200000ee 	.word	0x200000ee
 800a630:	200000fe 	.word	0x200000fe

0800a634 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a634:	b480      	push	{r7}
 800a636:	b087      	sub	sp, #28
 800a638:	af00      	add	r7, sp, #0
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	4613      	mov	r3, r2
 800a640:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a642:	2300      	movs	r3, #0
 800a644:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a646:	2300      	movs	r3, #0
 800a648:	75fb      	strb	r3, [r7, #23]
 800a64a:	e027      	b.n	800a69c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	0f1b      	lsrs	r3, r3, #28
 800a650:	2b09      	cmp	r3, #9
 800a652:	d80b      	bhi.n	800a66c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	0f1b      	lsrs	r3, r3, #28
 800a658:	b2da      	uxtb	r2, r3
 800a65a:	7dfb      	ldrb	r3, [r7, #23]
 800a65c:	005b      	lsls	r3, r3, #1
 800a65e:	4619      	mov	r1, r3
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	440b      	add	r3, r1
 800a664:	3230      	adds	r2, #48	@ 0x30
 800a666:	b2d2      	uxtb	r2, r2
 800a668:	701a      	strb	r2, [r3, #0]
 800a66a:	e00a      	b.n	800a682 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	0f1b      	lsrs	r3, r3, #28
 800a670:	b2da      	uxtb	r2, r3
 800a672:	7dfb      	ldrb	r3, [r7, #23]
 800a674:	005b      	lsls	r3, r3, #1
 800a676:	4619      	mov	r1, r3
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	440b      	add	r3, r1
 800a67c:	3237      	adds	r2, #55	@ 0x37
 800a67e:	b2d2      	uxtb	r2, r2
 800a680:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	011b      	lsls	r3, r3, #4
 800a686:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a688:	7dfb      	ldrb	r3, [r7, #23]
 800a68a:	005b      	lsls	r3, r3, #1
 800a68c:	3301      	adds	r3, #1
 800a68e:	68ba      	ldr	r2, [r7, #8]
 800a690:	4413      	add	r3, r2
 800a692:	2200      	movs	r2, #0
 800a694:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a696:	7dfb      	ldrb	r3, [r7, #23]
 800a698:	3301      	adds	r3, #1
 800a69a:	75fb      	strb	r3, [r7, #23]
 800a69c:	7dfa      	ldrb	r2, [r7, #23]
 800a69e:	79fb      	ldrb	r3, [r7, #7]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d3d3      	bcc.n	800a64c <IntToUnicode+0x18>
  }
}
 800a6a4:	bf00      	nop
 800a6a6:	bf00      	nop
 800a6a8:	371c      	adds	r7, #28
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr
	...

0800a6b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b08a      	sub	sp, #40	@ 0x28
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6bc:	f107 0314 	add.w	r3, r7, #20
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	601a      	str	r2, [r3, #0]
 800a6c4:	605a      	str	r2, [r3, #4]
 800a6c6:	609a      	str	r2, [r3, #8]
 800a6c8:	60da      	str	r2, [r3, #12]
 800a6ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a6d4:	d13a      	bne.n	800a74c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	613b      	str	r3, [r7, #16]
 800a6da:	4b1e      	ldr	r3, [pc, #120]	@ (800a754 <HAL_PCD_MspInit+0xa0>)
 800a6dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6de:	4a1d      	ldr	r2, [pc, #116]	@ (800a754 <HAL_PCD_MspInit+0xa0>)
 800a6e0:	f043 0301 	orr.w	r3, r3, #1
 800a6e4:	6313      	str	r3, [r2, #48]	@ 0x30
 800a6e6:	4b1b      	ldr	r3, [pc, #108]	@ (800a754 <HAL_PCD_MspInit+0xa0>)
 800a6e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6ea:	f003 0301 	and.w	r3, r3, #1
 800a6ee:	613b      	str	r3, [r7, #16]
 800a6f0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a6f2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a6f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6f8:	2302      	movs	r3, #2
 800a6fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a700:	2303      	movs	r3, #3
 800a702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a704:	230a      	movs	r3, #10
 800a706:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a708:	f107 0314 	add.w	r3, r7, #20
 800a70c:	4619      	mov	r1, r3
 800a70e:	4812      	ldr	r0, [pc, #72]	@ (800a758 <HAL_PCD_MspInit+0xa4>)
 800a710:	f7f8 fa48 	bl	8002ba4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a714:	4b0f      	ldr	r3, [pc, #60]	@ (800a754 <HAL_PCD_MspInit+0xa0>)
 800a716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a718:	4a0e      	ldr	r2, [pc, #56]	@ (800a754 <HAL_PCD_MspInit+0xa0>)
 800a71a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a71e:	6353      	str	r3, [r2, #52]	@ 0x34
 800a720:	2300      	movs	r3, #0
 800a722:	60fb      	str	r3, [r7, #12]
 800a724:	4b0b      	ldr	r3, [pc, #44]	@ (800a754 <HAL_PCD_MspInit+0xa0>)
 800a726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a728:	4a0a      	ldr	r2, [pc, #40]	@ (800a754 <HAL_PCD_MspInit+0xa0>)
 800a72a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a72e:	6453      	str	r3, [r2, #68]	@ 0x44
 800a730:	4b08      	ldr	r3, [pc, #32]	@ (800a754 <HAL_PCD_MspInit+0xa0>)
 800a732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a734:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a738:	60fb      	str	r3, [r7, #12]
 800a73a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a73c:	2200      	movs	r2, #0
 800a73e:	2100      	movs	r1, #0
 800a740:	2043      	movs	r0, #67	@ 0x43
 800a742:	f7f7 fe5a 	bl	80023fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a746:	2043      	movs	r0, #67	@ 0x43
 800a748:	f7f7 fe73 	bl	8002432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a74c:	bf00      	nop
 800a74e:	3728      	adds	r7, #40	@ 0x28
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}
 800a754:	40023800 	.word	0x40023800
 800a758:	40020000 	.word	0x40020000

0800a75c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b082      	sub	sp, #8
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a770:	4619      	mov	r1, r3
 800a772:	4610      	mov	r0, r2
 800a774:	f7fe fabd 	bl	8008cf2 <USBD_LL_SetupStage>
}
 800a778:	bf00      	nop
 800a77a:	3708      	adds	r7, #8
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	460b      	mov	r3, r1
 800a78a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a792:	78fa      	ldrb	r2, [r7, #3]
 800a794:	6879      	ldr	r1, [r7, #4]
 800a796:	4613      	mov	r3, r2
 800a798:	00db      	lsls	r3, r3, #3
 800a79a:	4413      	add	r3, r2
 800a79c:	009b      	lsls	r3, r3, #2
 800a79e:	440b      	add	r3, r1
 800a7a0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	78fb      	ldrb	r3, [r7, #3]
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	f7fe faf7 	bl	8008d9c <USBD_LL_DataOutStage>
}
 800a7ae:	bf00      	nop
 800a7b0:	3708      	adds	r7, #8
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}

0800a7b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	b082      	sub	sp, #8
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
 800a7be:	460b      	mov	r3, r1
 800a7c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a7c8:	78fa      	ldrb	r2, [r7, #3]
 800a7ca:	6879      	ldr	r1, [r7, #4]
 800a7cc:	4613      	mov	r3, r2
 800a7ce:	00db      	lsls	r3, r3, #3
 800a7d0:	4413      	add	r3, r2
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	440b      	add	r3, r1
 800a7d6:	3320      	adds	r3, #32
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	78fb      	ldrb	r3, [r7, #3]
 800a7dc:	4619      	mov	r1, r3
 800a7de:	f7fe fb99 	bl	8008f14 <USBD_LL_DataInStage>
}
 800a7e2:	bf00      	nop
 800a7e4:	3708      	adds	r7, #8
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7ea:	b580      	push	{r7, lr}
 800a7ec:	b082      	sub	sp, #8
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f7fe fcdd 	bl	80091b8 <USBD_LL_SOF>
}
 800a7fe:	bf00      	nop
 800a800:	3708      	adds	r7, #8
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}

0800a806 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a806:	b580      	push	{r7, lr}
 800a808:	b084      	sub	sp, #16
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a80e:	2301      	movs	r3, #1
 800a810:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	79db      	ldrb	r3, [r3, #7]
 800a816:	2b02      	cmp	r3, #2
 800a818:	d001      	beq.n	800a81e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a81a:	f7f6 fcdb 	bl	80011d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a824:	7bfa      	ldrb	r2, [r7, #15]
 800a826:	4611      	mov	r1, r2
 800a828:	4618      	mov	r0, r3
 800a82a:	f7fe fc81 	bl	8009130 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a834:	4618      	mov	r0, r3
 800a836:	f7fe fc28 	bl	800908a <USBD_LL_Reset>
}
 800a83a:	bf00      	nop
 800a83c:	3710      	adds	r7, #16
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
	...

0800a844 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a852:	4618      	mov	r0, r3
 800a854:	f7fe fc7c 	bl	8009150 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	6812      	ldr	r2, [r2, #0]
 800a866:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a86a:	f043 0301 	orr.w	r3, r3, #1
 800a86e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	7adb      	ldrb	r3, [r3, #11]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d005      	beq.n	800a884 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a878:	4b04      	ldr	r3, [pc, #16]	@ (800a88c <HAL_PCD_SuspendCallback+0x48>)
 800a87a:	691b      	ldr	r3, [r3, #16]
 800a87c:	4a03      	ldr	r2, [pc, #12]	@ (800a88c <HAL_PCD_SuspendCallback+0x48>)
 800a87e:	f043 0306 	orr.w	r3, r3, #6
 800a882:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a884:	bf00      	nop
 800a886:	3708      	adds	r7, #8
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}
 800a88c:	e000ed00 	.word	0xe000ed00

0800a890 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b082      	sub	sp, #8
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7fe fc72 	bl	8009188 <USBD_LL_Resume>
}
 800a8a4:	bf00      	nop
 800a8a6:	3708      	adds	r7, #8
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b082      	sub	sp, #8
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a8be:	78fa      	ldrb	r2, [r7, #3]
 800a8c0:	4611      	mov	r1, r2
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7fe fcca 	bl	800925c <USBD_LL_IsoOUTIncomplete>
}
 800a8c8:	bf00      	nop
 800a8ca:	3708      	adds	r7, #8
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	460b      	mov	r3, r1
 800a8da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a8e2:	78fa      	ldrb	r2, [r7, #3]
 800a8e4:	4611      	mov	r1, r2
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f7fe fc86 	bl	80091f8 <USBD_LL_IsoINIncomplete>
}
 800a8ec:	bf00      	nop
 800a8ee:	3708      	adds	r7, #8
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b082      	sub	sp, #8
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a902:	4618      	mov	r0, r3
 800a904:	f7fe fcdc 	bl	80092c0 <USBD_LL_DevConnected>
}
 800a908:	bf00      	nop
 800a90a:	3708      	adds	r7, #8
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b082      	sub	sp, #8
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a91e:	4618      	mov	r0, r3
 800a920:	f7fe fcd9 	bl	80092d6 <USBD_LL_DevDisconnected>
}
 800a924:	bf00      	nop
 800a926:	3708      	adds	r7, #8
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d13c      	bne.n	800a9b6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a93c:	4a20      	ldr	r2, [pc, #128]	@ (800a9c0 <USBD_LL_Init+0x94>)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	4a1e      	ldr	r2, [pc, #120]	@ (800a9c0 <USBD_LL_Init+0x94>)
 800a948:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a94c:	4b1c      	ldr	r3, [pc, #112]	@ (800a9c0 <USBD_LL_Init+0x94>)
 800a94e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a952:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a954:	4b1a      	ldr	r3, [pc, #104]	@ (800a9c0 <USBD_LL_Init+0x94>)
 800a956:	2204      	movs	r2, #4
 800a958:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a95a:	4b19      	ldr	r3, [pc, #100]	@ (800a9c0 <USBD_LL_Init+0x94>)
 800a95c:	2202      	movs	r2, #2
 800a95e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a960:	4b17      	ldr	r3, [pc, #92]	@ (800a9c0 <USBD_LL_Init+0x94>)
 800a962:	2200      	movs	r2, #0
 800a964:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a966:	4b16      	ldr	r3, [pc, #88]	@ (800a9c0 <USBD_LL_Init+0x94>)
 800a968:	2202      	movs	r2, #2
 800a96a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a96c:	4b14      	ldr	r3, [pc, #80]	@ (800a9c0 <USBD_LL_Init+0x94>)
 800a96e:	2200      	movs	r2, #0
 800a970:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a972:	4b13      	ldr	r3, [pc, #76]	@ (800a9c0 <USBD_LL_Init+0x94>)
 800a974:	2200      	movs	r2, #0
 800a976:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a978:	4b11      	ldr	r3, [pc, #68]	@ (800a9c0 <USBD_LL_Init+0x94>)
 800a97a:	2200      	movs	r2, #0
 800a97c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a97e:	4b10      	ldr	r3, [pc, #64]	@ (800a9c0 <USBD_LL_Init+0x94>)
 800a980:	2200      	movs	r2, #0
 800a982:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a984:	4b0e      	ldr	r3, [pc, #56]	@ (800a9c0 <USBD_LL_Init+0x94>)
 800a986:	2200      	movs	r2, #0
 800a988:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a98a:	480d      	ldr	r0, [pc, #52]	@ (800a9c0 <USBD_LL_Init+0x94>)
 800a98c:	f7f9 fa97 	bl	8003ebe <HAL_PCD_Init>
 800a990:	4603      	mov	r3, r0
 800a992:	2b00      	cmp	r3, #0
 800a994:	d001      	beq.n	800a99a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a996:	f7f6 fc1d 	bl	80011d4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a99a:	2180      	movs	r1, #128	@ 0x80
 800a99c:	4808      	ldr	r0, [pc, #32]	@ (800a9c0 <USBD_LL_Init+0x94>)
 800a99e:	f7fa fcc4 	bl	800532a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a9a2:	2240      	movs	r2, #64	@ 0x40
 800a9a4:	2100      	movs	r1, #0
 800a9a6:	4806      	ldr	r0, [pc, #24]	@ (800a9c0 <USBD_LL_Init+0x94>)
 800a9a8:	f7fa fc78 	bl	800529c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a9ac:	2280      	movs	r2, #128	@ 0x80
 800a9ae:	2101      	movs	r1, #1
 800a9b0:	4803      	ldr	r0, [pc, #12]	@ (800a9c0 <USBD_LL_Init+0x94>)
 800a9b2:	f7fa fc73 	bl	800529c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a9b6:	2300      	movs	r3, #0
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3708      	adds	r7, #8
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}
 800a9c0:	200010ac 	.word	0x200010ac

0800a9c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7f9 fb7e 	bl	80040dc <HAL_PCD_Start>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9e4:	7bfb      	ldrb	r3, [r7, #15]
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f000 f942 	bl	800ac70 <USBD_Get_USB_Status>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3710      	adds	r7, #16
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}

0800a9fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a9fa:	b580      	push	{r7, lr}
 800a9fc:	b084      	sub	sp, #16
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
 800aa02:	4608      	mov	r0, r1
 800aa04:	4611      	mov	r1, r2
 800aa06:	461a      	mov	r2, r3
 800aa08:	4603      	mov	r3, r0
 800aa0a:	70fb      	strb	r3, [r7, #3]
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	70bb      	strb	r3, [r7, #2]
 800aa10:	4613      	mov	r3, r2
 800aa12:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa14:	2300      	movs	r3, #0
 800aa16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800aa22:	78bb      	ldrb	r3, [r7, #2]
 800aa24:	883a      	ldrh	r2, [r7, #0]
 800aa26:	78f9      	ldrb	r1, [r7, #3]
 800aa28:	f7fa f852 	bl	8004ad0 <HAL_PCD_EP_Open>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa30:	7bfb      	ldrb	r3, [r7, #15]
 800aa32:	4618      	mov	r0, r3
 800aa34:	f000 f91c 	bl	800ac70 <USBD_Get_USB_Status>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3710      	adds	r7, #16
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}

0800aa46 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa46:	b580      	push	{r7, lr}
 800aa48:	b084      	sub	sp, #16
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
 800aa4e:	460b      	mov	r3, r1
 800aa50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa52:	2300      	movs	r3, #0
 800aa54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa56:	2300      	movs	r3, #0
 800aa58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa60:	78fa      	ldrb	r2, [r7, #3]
 800aa62:	4611      	mov	r1, r2
 800aa64:	4618      	mov	r0, r3
 800aa66:	f7fa f89d 	bl	8004ba4 <HAL_PCD_EP_Close>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa6e:	7bfb      	ldrb	r3, [r7, #15]
 800aa70:	4618      	mov	r0, r3
 800aa72:	f000 f8fd 	bl	800ac70 <USBD_Get_USB_Status>
 800aa76:	4603      	mov	r3, r0
 800aa78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa7a:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3710      	adds	r7, #16
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b084      	sub	sp, #16
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	460b      	mov	r3, r1
 800aa8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa90:	2300      	movs	r3, #0
 800aa92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa94:	2300      	movs	r3, #0
 800aa96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa9e:	78fa      	ldrb	r2, [r7, #3]
 800aaa0:	4611      	mov	r1, r2
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7fa f955 	bl	8004d52 <HAL_PCD_EP_SetStall>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaac:	7bfb      	ldrb	r3, [r7, #15]
 800aaae:	4618      	mov	r0, r3
 800aab0:	f000 f8de 	bl	800ac70 <USBD_Get_USB_Status>
 800aab4:	4603      	mov	r3, r0
 800aab6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aab8:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3710      	adds	r7, #16
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}

0800aac2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aac2:	b580      	push	{r7, lr}
 800aac4:	b084      	sub	sp, #16
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
 800aaca:	460b      	mov	r3, r1
 800aacc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aace:	2300      	movs	r3, #0
 800aad0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aad2:	2300      	movs	r3, #0
 800aad4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aadc:	78fa      	ldrb	r2, [r7, #3]
 800aade:	4611      	mov	r1, r2
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7fa f999 	bl	8004e18 <HAL_PCD_EP_ClrStall>
 800aae6:	4603      	mov	r3, r0
 800aae8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaea:	7bfb      	ldrb	r3, [r7, #15]
 800aaec:	4618      	mov	r0, r3
 800aaee:	f000 f8bf 	bl	800ac70 <USBD_Get_USB_Status>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aaf6:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3710      	adds	r7, #16
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b085      	sub	sp, #20
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	460b      	mov	r3, r1
 800ab0a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ab12:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ab14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	da0b      	bge.n	800ab34 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ab1c:	78fb      	ldrb	r3, [r7, #3]
 800ab1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ab22:	68f9      	ldr	r1, [r7, #12]
 800ab24:	4613      	mov	r3, r2
 800ab26:	00db      	lsls	r3, r3, #3
 800ab28:	4413      	add	r3, r2
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	440b      	add	r3, r1
 800ab2e:	3316      	adds	r3, #22
 800ab30:	781b      	ldrb	r3, [r3, #0]
 800ab32:	e00b      	b.n	800ab4c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ab34:	78fb      	ldrb	r3, [r7, #3]
 800ab36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ab3a:	68f9      	ldr	r1, [r7, #12]
 800ab3c:	4613      	mov	r3, r2
 800ab3e:	00db      	lsls	r3, r3, #3
 800ab40:	4413      	add	r3, r2
 800ab42:	009b      	lsls	r3, r3, #2
 800ab44:	440b      	add	r3, r1
 800ab46:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ab4a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3714      	adds	r7, #20
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr

0800ab58 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	460b      	mov	r3, r1
 800ab62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab64:	2300      	movs	r3, #0
 800ab66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ab72:	78fa      	ldrb	r2, [r7, #3]
 800ab74:	4611      	mov	r1, r2
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7f9 ff86 	bl	8004a88 <HAL_PCD_SetAddress>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab80:	7bfb      	ldrb	r3, [r7, #15]
 800ab82:	4618      	mov	r0, r3
 800ab84:	f000 f874 	bl	800ac70 <USBD_Get_USB_Status>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3710      	adds	r7, #16
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b086      	sub	sp, #24
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	60f8      	str	r0, [r7, #12]
 800ab9e:	607a      	str	r2, [r7, #4]
 800aba0:	603b      	str	r3, [r7, #0]
 800aba2:	460b      	mov	r3, r1
 800aba4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aba6:	2300      	movs	r3, #0
 800aba8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abaa:	2300      	movs	r3, #0
 800abac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800abb4:	7af9      	ldrb	r1, [r7, #11]
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	687a      	ldr	r2, [r7, #4]
 800abba:	f7fa f890 	bl	8004cde <HAL_PCD_EP_Transmit>
 800abbe:	4603      	mov	r3, r0
 800abc0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abc2:	7dfb      	ldrb	r3, [r7, #23]
 800abc4:	4618      	mov	r0, r3
 800abc6:	f000 f853 	bl	800ac70 <USBD_Get_USB_Status>
 800abca:	4603      	mov	r3, r0
 800abcc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800abce:	7dbb      	ldrb	r3, [r7, #22]
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3718      	adds	r7, #24
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b086      	sub	sp, #24
 800abdc:	af00      	add	r7, sp, #0
 800abde:	60f8      	str	r0, [r7, #12]
 800abe0:	607a      	str	r2, [r7, #4]
 800abe2:	603b      	str	r3, [r7, #0]
 800abe4:	460b      	mov	r3, r1
 800abe6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abe8:	2300      	movs	r3, #0
 800abea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abec:	2300      	movs	r3, #0
 800abee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800abf6:	7af9      	ldrb	r1, [r7, #11]
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	f7fa f81c 	bl	8004c38 <HAL_PCD_EP_Receive>
 800ac00:	4603      	mov	r3, r0
 800ac02:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac04:	7dfb      	ldrb	r3, [r7, #23]
 800ac06:	4618      	mov	r0, r3
 800ac08:	f000 f832 	bl	800ac70 <USBD_Get_USB_Status>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ac10:	7dbb      	ldrb	r3, [r7, #22]
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3718      	adds	r7, #24
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}

0800ac1a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac1a:	b580      	push	{r7, lr}
 800ac1c:	b082      	sub	sp, #8
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	6078      	str	r0, [r7, #4]
 800ac22:	460b      	mov	r3, r1
 800ac24:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ac2c:	78fa      	ldrb	r2, [r7, #3]
 800ac2e:	4611      	mov	r1, r2
 800ac30:	4618      	mov	r0, r3
 800ac32:	f7fa f83c 	bl	8004cae <HAL_PCD_EP_GetRxCount>
 800ac36:	4603      	mov	r3, r0
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3708      	adds	r7, #8
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ac48:	4b03      	ldr	r3, [pc, #12]	@ (800ac58 <USBD_static_malloc+0x18>)
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	370c      	adds	r7, #12
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr
 800ac56:	bf00      	nop
 800ac58:	20001590 	.word	0x20001590

0800ac5c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b083      	sub	sp, #12
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]

}
 800ac64:	bf00      	nop
 800ac66:	370c      	adds	r7, #12
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr

0800ac70 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b085      	sub	sp, #20
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	4603      	mov	r3, r0
 800ac78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ac7e:	79fb      	ldrb	r3, [r7, #7]
 800ac80:	2b03      	cmp	r3, #3
 800ac82:	d817      	bhi.n	800acb4 <USBD_Get_USB_Status+0x44>
 800ac84:	a201      	add	r2, pc, #4	@ (adr r2, 800ac8c <USBD_Get_USB_Status+0x1c>)
 800ac86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac8a:	bf00      	nop
 800ac8c:	0800ac9d 	.word	0x0800ac9d
 800ac90:	0800aca3 	.word	0x0800aca3
 800ac94:	0800aca9 	.word	0x0800aca9
 800ac98:	0800acaf 	.word	0x0800acaf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	73fb      	strb	r3, [r7, #15]
    break;
 800aca0:	e00b      	b.n	800acba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aca2:	2303      	movs	r3, #3
 800aca4:	73fb      	strb	r3, [r7, #15]
    break;
 800aca6:	e008      	b.n	800acba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aca8:	2301      	movs	r3, #1
 800acaa:	73fb      	strb	r3, [r7, #15]
    break;
 800acac:	e005      	b.n	800acba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800acae:	2303      	movs	r3, #3
 800acb0:	73fb      	strb	r3, [r7, #15]
    break;
 800acb2:	e002      	b.n	800acba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800acb4:	2303      	movs	r3, #3
 800acb6:	73fb      	strb	r3, [r7, #15]
    break;
 800acb8:	bf00      	nop
  }
  return usb_status;
 800acba:	7bfb      	ldrb	r3, [r7, #15]
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3714      	adds	r7, #20
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <malloc>:
 800acc8:	4b02      	ldr	r3, [pc, #8]	@ (800acd4 <malloc+0xc>)
 800acca:	4601      	mov	r1, r0
 800accc:	6818      	ldr	r0, [r3, #0]
 800acce:	f000 b825 	b.w	800ad1c <_malloc_r>
 800acd2:	bf00      	nop
 800acd4:	20000108 	.word	0x20000108

0800acd8 <sbrk_aligned>:
 800acd8:	b570      	push	{r4, r5, r6, lr}
 800acda:	4e0f      	ldr	r6, [pc, #60]	@ (800ad18 <sbrk_aligned+0x40>)
 800acdc:	460c      	mov	r4, r1
 800acde:	6831      	ldr	r1, [r6, #0]
 800ace0:	4605      	mov	r5, r0
 800ace2:	b911      	cbnz	r1, 800acea <sbrk_aligned+0x12>
 800ace4:	f000 f8d0 	bl	800ae88 <_sbrk_r>
 800ace8:	6030      	str	r0, [r6, #0]
 800acea:	4621      	mov	r1, r4
 800acec:	4628      	mov	r0, r5
 800acee:	f000 f8cb 	bl	800ae88 <_sbrk_r>
 800acf2:	1c43      	adds	r3, r0, #1
 800acf4:	d103      	bne.n	800acfe <sbrk_aligned+0x26>
 800acf6:	f04f 34ff 	mov.w	r4, #4294967295
 800acfa:	4620      	mov	r0, r4
 800acfc:	bd70      	pop	{r4, r5, r6, pc}
 800acfe:	1cc4      	adds	r4, r0, #3
 800ad00:	f024 0403 	bic.w	r4, r4, #3
 800ad04:	42a0      	cmp	r0, r4
 800ad06:	d0f8      	beq.n	800acfa <sbrk_aligned+0x22>
 800ad08:	1a21      	subs	r1, r4, r0
 800ad0a:	4628      	mov	r0, r5
 800ad0c:	f000 f8bc 	bl	800ae88 <_sbrk_r>
 800ad10:	3001      	adds	r0, #1
 800ad12:	d1f2      	bne.n	800acfa <sbrk_aligned+0x22>
 800ad14:	e7ef      	b.n	800acf6 <sbrk_aligned+0x1e>
 800ad16:	bf00      	nop
 800ad18:	200017b0 	.word	0x200017b0

0800ad1c <_malloc_r>:
 800ad1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad20:	1ccd      	adds	r5, r1, #3
 800ad22:	f025 0503 	bic.w	r5, r5, #3
 800ad26:	3508      	adds	r5, #8
 800ad28:	2d0c      	cmp	r5, #12
 800ad2a:	bf38      	it	cc
 800ad2c:	250c      	movcc	r5, #12
 800ad2e:	2d00      	cmp	r5, #0
 800ad30:	4606      	mov	r6, r0
 800ad32:	db01      	blt.n	800ad38 <_malloc_r+0x1c>
 800ad34:	42a9      	cmp	r1, r5
 800ad36:	d904      	bls.n	800ad42 <_malloc_r+0x26>
 800ad38:	230c      	movs	r3, #12
 800ad3a:	6033      	str	r3, [r6, #0]
 800ad3c:	2000      	movs	r0, #0
 800ad3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ae18 <_malloc_r+0xfc>
 800ad46:	f000 f869 	bl	800ae1c <__malloc_lock>
 800ad4a:	f8d8 3000 	ldr.w	r3, [r8]
 800ad4e:	461c      	mov	r4, r3
 800ad50:	bb44      	cbnz	r4, 800ada4 <_malloc_r+0x88>
 800ad52:	4629      	mov	r1, r5
 800ad54:	4630      	mov	r0, r6
 800ad56:	f7ff ffbf 	bl	800acd8 <sbrk_aligned>
 800ad5a:	1c43      	adds	r3, r0, #1
 800ad5c:	4604      	mov	r4, r0
 800ad5e:	d158      	bne.n	800ae12 <_malloc_r+0xf6>
 800ad60:	f8d8 4000 	ldr.w	r4, [r8]
 800ad64:	4627      	mov	r7, r4
 800ad66:	2f00      	cmp	r7, #0
 800ad68:	d143      	bne.n	800adf2 <_malloc_r+0xd6>
 800ad6a:	2c00      	cmp	r4, #0
 800ad6c:	d04b      	beq.n	800ae06 <_malloc_r+0xea>
 800ad6e:	6823      	ldr	r3, [r4, #0]
 800ad70:	4639      	mov	r1, r7
 800ad72:	4630      	mov	r0, r6
 800ad74:	eb04 0903 	add.w	r9, r4, r3
 800ad78:	f000 f886 	bl	800ae88 <_sbrk_r>
 800ad7c:	4581      	cmp	r9, r0
 800ad7e:	d142      	bne.n	800ae06 <_malloc_r+0xea>
 800ad80:	6821      	ldr	r1, [r4, #0]
 800ad82:	1a6d      	subs	r5, r5, r1
 800ad84:	4629      	mov	r1, r5
 800ad86:	4630      	mov	r0, r6
 800ad88:	f7ff ffa6 	bl	800acd8 <sbrk_aligned>
 800ad8c:	3001      	adds	r0, #1
 800ad8e:	d03a      	beq.n	800ae06 <_malloc_r+0xea>
 800ad90:	6823      	ldr	r3, [r4, #0]
 800ad92:	442b      	add	r3, r5
 800ad94:	6023      	str	r3, [r4, #0]
 800ad96:	f8d8 3000 	ldr.w	r3, [r8]
 800ad9a:	685a      	ldr	r2, [r3, #4]
 800ad9c:	bb62      	cbnz	r2, 800adf8 <_malloc_r+0xdc>
 800ad9e:	f8c8 7000 	str.w	r7, [r8]
 800ada2:	e00f      	b.n	800adc4 <_malloc_r+0xa8>
 800ada4:	6822      	ldr	r2, [r4, #0]
 800ada6:	1b52      	subs	r2, r2, r5
 800ada8:	d420      	bmi.n	800adec <_malloc_r+0xd0>
 800adaa:	2a0b      	cmp	r2, #11
 800adac:	d917      	bls.n	800adde <_malloc_r+0xc2>
 800adae:	1961      	adds	r1, r4, r5
 800adb0:	42a3      	cmp	r3, r4
 800adb2:	6025      	str	r5, [r4, #0]
 800adb4:	bf18      	it	ne
 800adb6:	6059      	strne	r1, [r3, #4]
 800adb8:	6863      	ldr	r3, [r4, #4]
 800adba:	bf08      	it	eq
 800adbc:	f8c8 1000 	streq.w	r1, [r8]
 800adc0:	5162      	str	r2, [r4, r5]
 800adc2:	604b      	str	r3, [r1, #4]
 800adc4:	4630      	mov	r0, r6
 800adc6:	f000 f82f 	bl	800ae28 <__malloc_unlock>
 800adca:	f104 000b 	add.w	r0, r4, #11
 800adce:	1d23      	adds	r3, r4, #4
 800add0:	f020 0007 	bic.w	r0, r0, #7
 800add4:	1ac2      	subs	r2, r0, r3
 800add6:	bf1c      	itt	ne
 800add8:	1a1b      	subne	r3, r3, r0
 800adda:	50a3      	strne	r3, [r4, r2]
 800addc:	e7af      	b.n	800ad3e <_malloc_r+0x22>
 800adde:	6862      	ldr	r2, [r4, #4]
 800ade0:	42a3      	cmp	r3, r4
 800ade2:	bf0c      	ite	eq
 800ade4:	f8c8 2000 	streq.w	r2, [r8]
 800ade8:	605a      	strne	r2, [r3, #4]
 800adea:	e7eb      	b.n	800adc4 <_malloc_r+0xa8>
 800adec:	4623      	mov	r3, r4
 800adee:	6864      	ldr	r4, [r4, #4]
 800adf0:	e7ae      	b.n	800ad50 <_malloc_r+0x34>
 800adf2:	463c      	mov	r4, r7
 800adf4:	687f      	ldr	r7, [r7, #4]
 800adf6:	e7b6      	b.n	800ad66 <_malloc_r+0x4a>
 800adf8:	461a      	mov	r2, r3
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	42a3      	cmp	r3, r4
 800adfe:	d1fb      	bne.n	800adf8 <_malloc_r+0xdc>
 800ae00:	2300      	movs	r3, #0
 800ae02:	6053      	str	r3, [r2, #4]
 800ae04:	e7de      	b.n	800adc4 <_malloc_r+0xa8>
 800ae06:	230c      	movs	r3, #12
 800ae08:	6033      	str	r3, [r6, #0]
 800ae0a:	4630      	mov	r0, r6
 800ae0c:	f000 f80c 	bl	800ae28 <__malloc_unlock>
 800ae10:	e794      	b.n	800ad3c <_malloc_r+0x20>
 800ae12:	6005      	str	r5, [r0, #0]
 800ae14:	e7d6      	b.n	800adc4 <_malloc_r+0xa8>
 800ae16:	bf00      	nop
 800ae18:	200017b4 	.word	0x200017b4

0800ae1c <__malloc_lock>:
 800ae1c:	4801      	ldr	r0, [pc, #4]	@ (800ae24 <__malloc_lock+0x8>)
 800ae1e:	f000 b86d 	b.w	800aefc <__retarget_lock_acquire_recursive>
 800ae22:	bf00      	nop
 800ae24:	200018f4 	.word	0x200018f4

0800ae28 <__malloc_unlock>:
 800ae28:	4801      	ldr	r0, [pc, #4]	@ (800ae30 <__malloc_unlock+0x8>)
 800ae2a:	f000 b868 	b.w	800aefe <__retarget_lock_release_recursive>
 800ae2e:	bf00      	nop
 800ae30:	200018f4 	.word	0x200018f4

0800ae34 <siprintf>:
 800ae34:	b40e      	push	{r1, r2, r3}
 800ae36:	b510      	push	{r4, lr}
 800ae38:	b09d      	sub	sp, #116	@ 0x74
 800ae3a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ae3c:	9002      	str	r0, [sp, #8]
 800ae3e:	9006      	str	r0, [sp, #24]
 800ae40:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ae44:	480a      	ldr	r0, [pc, #40]	@ (800ae70 <siprintf+0x3c>)
 800ae46:	9107      	str	r1, [sp, #28]
 800ae48:	9104      	str	r1, [sp, #16]
 800ae4a:	490a      	ldr	r1, [pc, #40]	@ (800ae74 <siprintf+0x40>)
 800ae4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae50:	9105      	str	r1, [sp, #20]
 800ae52:	2400      	movs	r4, #0
 800ae54:	a902      	add	r1, sp, #8
 800ae56:	6800      	ldr	r0, [r0, #0]
 800ae58:	9301      	str	r3, [sp, #4]
 800ae5a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ae5c:	f000 f8f6 	bl	800b04c <_svfiprintf_r>
 800ae60:	9b02      	ldr	r3, [sp, #8]
 800ae62:	701c      	strb	r4, [r3, #0]
 800ae64:	b01d      	add	sp, #116	@ 0x74
 800ae66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae6a:	b003      	add	sp, #12
 800ae6c:	4770      	bx	lr
 800ae6e:	bf00      	nop
 800ae70:	20000108 	.word	0x20000108
 800ae74:	ffff0208 	.word	0xffff0208

0800ae78 <memset>:
 800ae78:	4402      	add	r2, r0
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d100      	bne.n	800ae82 <memset+0xa>
 800ae80:	4770      	bx	lr
 800ae82:	f803 1b01 	strb.w	r1, [r3], #1
 800ae86:	e7f9      	b.n	800ae7c <memset+0x4>

0800ae88 <_sbrk_r>:
 800ae88:	b538      	push	{r3, r4, r5, lr}
 800ae8a:	4d06      	ldr	r5, [pc, #24]	@ (800aea4 <_sbrk_r+0x1c>)
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	4604      	mov	r4, r0
 800ae90:	4608      	mov	r0, r1
 800ae92:	602b      	str	r3, [r5, #0]
 800ae94:	f7f6 fd2e 	bl	80018f4 <_sbrk>
 800ae98:	1c43      	adds	r3, r0, #1
 800ae9a:	d102      	bne.n	800aea2 <_sbrk_r+0x1a>
 800ae9c:	682b      	ldr	r3, [r5, #0]
 800ae9e:	b103      	cbz	r3, 800aea2 <_sbrk_r+0x1a>
 800aea0:	6023      	str	r3, [r4, #0]
 800aea2:	bd38      	pop	{r3, r4, r5, pc}
 800aea4:	200018f0 	.word	0x200018f0

0800aea8 <__errno>:
 800aea8:	4b01      	ldr	r3, [pc, #4]	@ (800aeb0 <__errno+0x8>)
 800aeaa:	6818      	ldr	r0, [r3, #0]
 800aeac:	4770      	bx	lr
 800aeae:	bf00      	nop
 800aeb0:	20000108 	.word	0x20000108

0800aeb4 <__libc_init_array>:
 800aeb4:	b570      	push	{r4, r5, r6, lr}
 800aeb6:	4d0d      	ldr	r5, [pc, #52]	@ (800aeec <__libc_init_array+0x38>)
 800aeb8:	4c0d      	ldr	r4, [pc, #52]	@ (800aef0 <__libc_init_array+0x3c>)
 800aeba:	1b64      	subs	r4, r4, r5
 800aebc:	10a4      	asrs	r4, r4, #2
 800aebe:	2600      	movs	r6, #0
 800aec0:	42a6      	cmp	r6, r4
 800aec2:	d109      	bne.n	800aed8 <__libc_init_array+0x24>
 800aec4:	4d0b      	ldr	r5, [pc, #44]	@ (800aef4 <__libc_init_array+0x40>)
 800aec6:	4c0c      	ldr	r4, [pc, #48]	@ (800aef8 <__libc_init_array+0x44>)
 800aec8:	f000 fba6 	bl	800b618 <_init>
 800aecc:	1b64      	subs	r4, r4, r5
 800aece:	10a4      	asrs	r4, r4, #2
 800aed0:	2600      	movs	r6, #0
 800aed2:	42a6      	cmp	r6, r4
 800aed4:	d105      	bne.n	800aee2 <__libc_init_array+0x2e>
 800aed6:	bd70      	pop	{r4, r5, r6, pc}
 800aed8:	f855 3b04 	ldr.w	r3, [r5], #4
 800aedc:	4798      	blx	r3
 800aede:	3601      	adds	r6, #1
 800aee0:	e7ee      	b.n	800aec0 <__libc_init_array+0xc>
 800aee2:	f855 3b04 	ldr.w	r3, [r5], #4
 800aee6:	4798      	blx	r3
 800aee8:	3601      	adds	r6, #1
 800aeea:	e7f2      	b.n	800aed2 <__libc_init_array+0x1e>
 800aeec:	0800b6e4 	.word	0x0800b6e4
 800aef0:	0800b6e4 	.word	0x0800b6e4
 800aef4:	0800b6e4 	.word	0x0800b6e4
 800aef8:	0800b6e8 	.word	0x0800b6e8

0800aefc <__retarget_lock_acquire_recursive>:
 800aefc:	4770      	bx	lr

0800aefe <__retarget_lock_release_recursive>:
 800aefe:	4770      	bx	lr

0800af00 <_free_r>:
 800af00:	b538      	push	{r3, r4, r5, lr}
 800af02:	4605      	mov	r5, r0
 800af04:	2900      	cmp	r1, #0
 800af06:	d041      	beq.n	800af8c <_free_r+0x8c>
 800af08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af0c:	1f0c      	subs	r4, r1, #4
 800af0e:	2b00      	cmp	r3, #0
 800af10:	bfb8      	it	lt
 800af12:	18e4      	addlt	r4, r4, r3
 800af14:	f7ff ff82 	bl	800ae1c <__malloc_lock>
 800af18:	4a1d      	ldr	r2, [pc, #116]	@ (800af90 <_free_r+0x90>)
 800af1a:	6813      	ldr	r3, [r2, #0]
 800af1c:	b933      	cbnz	r3, 800af2c <_free_r+0x2c>
 800af1e:	6063      	str	r3, [r4, #4]
 800af20:	6014      	str	r4, [r2, #0]
 800af22:	4628      	mov	r0, r5
 800af24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af28:	f7ff bf7e 	b.w	800ae28 <__malloc_unlock>
 800af2c:	42a3      	cmp	r3, r4
 800af2e:	d908      	bls.n	800af42 <_free_r+0x42>
 800af30:	6820      	ldr	r0, [r4, #0]
 800af32:	1821      	adds	r1, r4, r0
 800af34:	428b      	cmp	r3, r1
 800af36:	bf01      	itttt	eq
 800af38:	6819      	ldreq	r1, [r3, #0]
 800af3a:	685b      	ldreq	r3, [r3, #4]
 800af3c:	1809      	addeq	r1, r1, r0
 800af3e:	6021      	streq	r1, [r4, #0]
 800af40:	e7ed      	b.n	800af1e <_free_r+0x1e>
 800af42:	461a      	mov	r2, r3
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	b10b      	cbz	r3, 800af4c <_free_r+0x4c>
 800af48:	42a3      	cmp	r3, r4
 800af4a:	d9fa      	bls.n	800af42 <_free_r+0x42>
 800af4c:	6811      	ldr	r1, [r2, #0]
 800af4e:	1850      	adds	r0, r2, r1
 800af50:	42a0      	cmp	r0, r4
 800af52:	d10b      	bne.n	800af6c <_free_r+0x6c>
 800af54:	6820      	ldr	r0, [r4, #0]
 800af56:	4401      	add	r1, r0
 800af58:	1850      	adds	r0, r2, r1
 800af5a:	4283      	cmp	r3, r0
 800af5c:	6011      	str	r1, [r2, #0]
 800af5e:	d1e0      	bne.n	800af22 <_free_r+0x22>
 800af60:	6818      	ldr	r0, [r3, #0]
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	6053      	str	r3, [r2, #4]
 800af66:	4408      	add	r0, r1
 800af68:	6010      	str	r0, [r2, #0]
 800af6a:	e7da      	b.n	800af22 <_free_r+0x22>
 800af6c:	d902      	bls.n	800af74 <_free_r+0x74>
 800af6e:	230c      	movs	r3, #12
 800af70:	602b      	str	r3, [r5, #0]
 800af72:	e7d6      	b.n	800af22 <_free_r+0x22>
 800af74:	6820      	ldr	r0, [r4, #0]
 800af76:	1821      	adds	r1, r4, r0
 800af78:	428b      	cmp	r3, r1
 800af7a:	bf04      	itt	eq
 800af7c:	6819      	ldreq	r1, [r3, #0]
 800af7e:	685b      	ldreq	r3, [r3, #4]
 800af80:	6063      	str	r3, [r4, #4]
 800af82:	bf04      	itt	eq
 800af84:	1809      	addeq	r1, r1, r0
 800af86:	6021      	streq	r1, [r4, #0]
 800af88:	6054      	str	r4, [r2, #4]
 800af8a:	e7ca      	b.n	800af22 <_free_r+0x22>
 800af8c:	bd38      	pop	{r3, r4, r5, pc}
 800af8e:	bf00      	nop
 800af90:	200017b4 	.word	0x200017b4

0800af94 <__ssputs_r>:
 800af94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af98:	688e      	ldr	r6, [r1, #8]
 800af9a:	461f      	mov	r7, r3
 800af9c:	42be      	cmp	r6, r7
 800af9e:	680b      	ldr	r3, [r1, #0]
 800afa0:	4682      	mov	sl, r0
 800afa2:	460c      	mov	r4, r1
 800afa4:	4690      	mov	r8, r2
 800afa6:	d82d      	bhi.n	800b004 <__ssputs_r+0x70>
 800afa8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800afac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800afb0:	d026      	beq.n	800b000 <__ssputs_r+0x6c>
 800afb2:	6965      	ldr	r5, [r4, #20]
 800afb4:	6909      	ldr	r1, [r1, #16]
 800afb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800afba:	eba3 0901 	sub.w	r9, r3, r1
 800afbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800afc2:	1c7b      	adds	r3, r7, #1
 800afc4:	444b      	add	r3, r9
 800afc6:	106d      	asrs	r5, r5, #1
 800afc8:	429d      	cmp	r5, r3
 800afca:	bf38      	it	cc
 800afcc:	461d      	movcc	r5, r3
 800afce:	0553      	lsls	r3, r2, #21
 800afd0:	d527      	bpl.n	800b022 <__ssputs_r+0x8e>
 800afd2:	4629      	mov	r1, r5
 800afd4:	f7ff fea2 	bl	800ad1c <_malloc_r>
 800afd8:	4606      	mov	r6, r0
 800afda:	b360      	cbz	r0, 800b036 <__ssputs_r+0xa2>
 800afdc:	6921      	ldr	r1, [r4, #16]
 800afde:	464a      	mov	r2, r9
 800afe0:	f000 fad6 	bl	800b590 <memcpy>
 800afe4:	89a3      	ldrh	r3, [r4, #12]
 800afe6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800afea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afee:	81a3      	strh	r3, [r4, #12]
 800aff0:	6126      	str	r6, [r4, #16]
 800aff2:	6165      	str	r5, [r4, #20]
 800aff4:	444e      	add	r6, r9
 800aff6:	eba5 0509 	sub.w	r5, r5, r9
 800affa:	6026      	str	r6, [r4, #0]
 800affc:	60a5      	str	r5, [r4, #8]
 800affe:	463e      	mov	r6, r7
 800b000:	42be      	cmp	r6, r7
 800b002:	d900      	bls.n	800b006 <__ssputs_r+0x72>
 800b004:	463e      	mov	r6, r7
 800b006:	6820      	ldr	r0, [r4, #0]
 800b008:	4632      	mov	r2, r6
 800b00a:	4641      	mov	r1, r8
 800b00c:	f000 faa6 	bl	800b55c <memmove>
 800b010:	68a3      	ldr	r3, [r4, #8]
 800b012:	1b9b      	subs	r3, r3, r6
 800b014:	60a3      	str	r3, [r4, #8]
 800b016:	6823      	ldr	r3, [r4, #0]
 800b018:	4433      	add	r3, r6
 800b01a:	6023      	str	r3, [r4, #0]
 800b01c:	2000      	movs	r0, #0
 800b01e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b022:	462a      	mov	r2, r5
 800b024:	f000 fac2 	bl	800b5ac <_realloc_r>
 800b028:	4606      	mov	r6, r0
 800b02a:	2800      	cmp	r0, #0
 800b02c:	d1e0      	bne.n	800aff0 <__ssputs_r+0x5c>
 800b02e:	6921      	ldr	r1, [r4, #16]
 800b030:	4650      	mov	r0, sl
 800b032:	f7ff ff65 	bl	800af00 <_free_r>
 800b036:	230c      	movs	r3, #12
 800b038:	f8ca 3000 	str.w	r3, [sl]
 800b03c:	89a3      	ldrh	r3, [r4, #12]
 800b03e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b042:	81a3      	strh	r3, [r4, #12]
 800b044:	f04f 30ff 	mov.w	r0, #4294967295
 800b048:	e7e9      	b.n	800b01e <__ssputs_r+0x8a>
	...

0800b04c <_svfiprintf_r>:
 800b04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b050:	4698      	mov	r8, r3
 800b052:	898b      	ldrh	r3, [r1, #12]
 800b054:	061b      	lsls	r3, r3, #24
 800b056:	b09d      	sub	sp, #116	@ 0x74
 800b058:	4607      	mov	r7, r0
 800b05a:	460d      	mov	r5, r1
 800b05c:	4614      	mov	r4, r2
 800b05e:	d510      	bpl.n	800b082 <_svfiprintf_r+0x36>
 800b060:	690b      	ldr	r3, [r1, #16]
 800b062:	b973      	cbnz	r3, 800b082 <_svfiprintf_r+0x36>
 800b064:	2140      	movs	r1, #64	@ 0x40
 800b066:	f7ff fe59 	bl	800ad1c <_malloc_r>
 800b06a:	6028      	str	r0, [r5, #0]
 800b06c:	6128      	str	r0, [r5, #16]
 800b06e:	b930      	cbnz	r0, 800b07e <_svfiprintf_r+0x32>
 800b070:	230c      	movs	r3, #12
 800b072:	603b      	str	r3, [r7, #0]
 800b074:	f04f 30ff 	mov.w	r0, #4294967295
 800b078:	b01d      	add	sp, #116	@ 0x74
 800b07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b07e:	2340      	movs	r3, #64	@ 0x40
 800b080:	616b      	str	r3, [r5, #20]
 800b082:	2300      	movs	r3, #0
 800b084:	9309      	str	r3, [sp, #36]	@ 0x24
 800b086:	2320      	movs	r3, #32
 800b088:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b08c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b090:	2330      	movs	r3, #48	@ 0x30
 800b092:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b230 <_svfiprintf_r+0x1e4>
 800b096:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b09a:	f04f 0901 	mov.w	r9, #1
 800b09e:	4623      	mov	r3, r4
 800b0a0:	469a      	mov	sl, r3
 800b0a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0a6:	b10a      	cbz	r2, 800b0ac <_svfiprintf_r+0x60>
 800b0a8:	2a25      	cmp	r2, #37	@ 0x25
 800b0aa:	d1f9      	bne.n	800b0a0 <_svfiprintf_r+0x54>
 800b0ac:	ebba 0b04 	subs.w	fp, sl, r4
 800b0b0:	d00b      	beq.n	800b0ca <_svfiprintf_r+0x7e>
 800b0b2:	465b      	mov	r3, fp
 800b0b4:	4622      	mov	r2, r4
 800b0b6:	4629      	mov	r1, r5
 800b0b8:	4638      	mov	r0, r7
 800b0ba:	f7ff ff6b 	bl	800af94 <__ssputs_r>
 800b0be:	3001      	adds	r0, #1
 800b0c0:	f000 80a7 	beq.w	800b212 <_svfiprintf_r+0x1c6>
 800b0c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0c6:	445a      	add	r2, fp
 800b0c8:	9209      	str	r2, [sp, #36]	@ 0x24
 800b0ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	f000 809f 	beq.w	800b212 <_svfiprintf_r+0x1c6>
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b0da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0de:	f10a 0a01 	add.w	sl, sl, #1
 800b0e2:	9304      	str	r3, [sp, #16]
 800b0e4:	9307      	str	r3, [sp, #28]
 800b0e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b0ea:	931a      	str	r3, [sp, #104]	@ 0x68
 800b0ec:	4654      	mov	r4, sl
 800b0ee:	2205      	movs	r2, #5
 800b0f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0f4:	484e      	ldr	r0, [pc, #312]	@ (800b230 <_svfiprintf_r+0x1e4>)
 800b0f6:	f7f5 f873 	bl	80001e0 <memchr>
 800b0fa:	9a04      	ldr	r2, [sp, #16]
 800b0fc:	b9d8      	cbnz	r0, 800b136 <_svfiprintf_r+0xea>
 800b0fe:	06d0      	lsls	r0, r2, #27
 800b100:	bf44      	itt	mi
 800b102:	2320      	movmi	r3, #32
 800b104:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b108:	0711      	lsls	r1, r2, #28
 800b10a:	bf44      	itt	mi
 800b10c:	232b      	movmi	r3, #43	@ 0x2b
 800b10e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b112:	f89a 3000 	ldrb.w	r3, [sl]
 800b116:	2b2a      	cmp	r3, #42	@ 0x2a
 800b118:	d015      	beq.n	800b146 <_svfiprintf_r+0xfa>
 800b11a:	9a07      	ldr	r2, [sp, #28]
 800b11c:	4654      	mov	r4, sl
 800b11e:	2000      	movs	r0, #0
 800b120:	f04f 0c0a 	mov.w	ip, #10
 800b124:	4621      	mov	r1, r4
 800b126:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b12a:	3b30      	subs	r3, #48	@ 0x30
 800b12c:	2b09      	cmp	r3, #9
 800b12e:	d94b      	bls.n	800b1c8 <_svfiprintf_r+0x17c>
 800b130:	b1b0      	cbz	r0, 800b160 <_svfiprintf_r+0x114>
 800b132:	9207      	str	r2, [sp, #28]
 800b134:	e014      	b.n	800b160 <_svfiprintf_r+0x114>
 800b136:	eba0 0308 	sub.w	r3, r0, r8
 800b13a:	fa09 f303 	lsl.w	r3, r9, r3
 800b13e:	4313      	orrs	r3, r2
 800b140:	9304      	str	r3, [sp, #16]
 800b142:	46a2      	mov	sl, r4
 800b144:	e7d2      	b.n	800b0ec <_svfiprintf_r+0xa0>
 800b146:	9b03      	ldr	r3, [sp, #12]
 800b148:	1d19      	adds	r1, r3, #4
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	9103      	str	r1, [sp, #12]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	bfbb      	ittet	lt
 800b152:	425b      	neglt	r3, r3
 800b154:	f042 0202 	orrlt.w	r2, r2, #2
 800b158:	9307      	strge	r3, [sp, #28]
 800b15a:	9307      	strlt	r3, [sp, #28]
 800b15c:	bfb8      	it	lt
 800b15e:	9204      	strlt	r2, [sp, #16]
 800b160:	7823      	ldrb	r3, [r4, #0]
 800b162:	2b2e      	cmp	r3, #46	@ 0x2e
 800b164:	d10a      	bne.n	800b17c <_svfiprintf_r+0x130>
 800b166:	7863      	ldrb	r3, [r4, #1]
 800b168:	2b2a      	cmp	r3, #42	@ 0x2a
 800b16a:	d132      	bne.n	800b1d2 <_svfiprintf_r+0x186>
 800b16c:	9b03      	ldr	r3, [sp, #12]
 800b16e:	1d1a      	adds	r2, r3, #4
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	9203      	str	r2, [sp, #12]
 800b174:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b178:	3402      	adds	r4, #2
 800b17a:	9305      	str	r3, [sp, #20]
 800b17c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b240 <_svfiprintf_r+0x1f4>
 800b180:	7821      	ldrb	r1, [r4, #0]
 800b182:	2203      	movs	r2, #3
 800b184:	4650      	mov	r0, sl
 800b186:	f7f5 f82b 	bl	80001e0 <memchr>
 800b18a:	b138      	cbz	r0, 800b19c <_svfiprintf_r+0x150>
 800b18c:	9b04      	ldr	r3, [sp, #16]
 800b18e:	eba0 000a 	sub.w	r0, r0, sl
 800b192:	2240      	movs	r2, #64	@ 0x40
 800b194:	4082      	lsls	r2, r0
 800b196:	4313      	orrs	r3, r2
 800b198:	3401      	adds	r4, #1
 800b19a:	9304      	str	r3, [sp, #16]
 800b19c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1a0:	4824      	ldr	r0, [pc, #144]	@ (800b234 <_svfiprintf_r+0x1e8>)
 800b1a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b1a6:	2206      	movs	r2, #6
 800b1a8:	f7f5 f81a 	bl	80001e0 <memchr>
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	d036      	beq.n	800b21e <_svfiprintf_r+0x1d2>
 800b1b0:	4b21      	ldr	r3, [pc, #132]	@ (800b238 <_svfiprintf_r+0x1ec>)
 800b1b2:	bb1b      	cbnz	r3, 800b1fc <_svfiprintf_r+0x1b0>
 800b1b4:	9b03      	ldr	r3, [sp, #12]
 800b1b6:	3307      	adds	r3, #7
 800b1b8:	f023 0307 	bic.w	r3, r3, #7
 800b1bc:	3308      	adds	r3, #8
 800b1be:	9303      	str	r3, [sp, #12]
 800b1c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1c2:	4433      	add	r3, r6
 800b1c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1c6:	e76a      	b.n	800b09e <_svfiprintf_r+0x52>
 800b1c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1cc:	460c      	mov	r4, r1
 800b1ce:	2001      	movs	r0, #1
 800b1d0:	e7a8      	b.n	800b124 <_svfiprintf_r+0xd8>
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	3401      	adds	r4, #1
 800b1d6:	9305      	str	r3, [sp, #20]
 800b1d8:	4619      	mov	r1, r3
 800b1da:	f04f 0c0a 	mov.w	ip, #10
 800b1de:	4620      	mov	r0, r4
 800b1e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1e4:	3a30      	subs	r2, #48	@ 0x30
 800b1e6:	2a09      	cmp	r2, #9
 800b1e8:	d903      	bls.n	800b1f2 <_svfiprintf_r+0x1a6>
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d0c6      	beq.n	800b17c <_svfiprintf_r+0x130>
 800b1ee:	9105      	str	r1, [sp, #20]
 800b1f0:	e7c4      	b.n	800b17c <_svfiprintf_r+0x130>
 800b1f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1f6:	4604      	mov	r4, r0
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	e7f0      	b.n	800b1de <_svfiprintf_r+0x192>
 800b1fc:	ab03      	add	r3, sp, #12
 800b1fe:	9300      	str	r3, [sp, #0]
 800b200:	462a      	mov	r2, r5
 800b202:	4b0e      	ldr	r3, [pc, #56]	@ (800b23c <_svfiprintf_r+0x1f0>)
 800b204:	a904      	add	r1, sp, #16
 800b206:	4638      	mov	r0, r7
 800b208:	f3af 8000 	nop.w
 800b20c:	1c42      	adds	r2, r0, #1
 800b20e:	4606      	mov	r6, r0
 800b210:	d1d6      	bne.n	800b1c0 <_svfiprintf_r+0x174>
 800b212:	89ab      	ldrh	r3, [r5, #12]
 800b214:	065b      	lsls	r3, r3, #25
 800b216:	f53f af2d 	bmi.w	800b074 <_svfiprintf_r+0x28>
 800b21a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b21c:	e72c      	b.n	800b078 <_svfiprintf_r+0x2c>
 800b21e:	ab03      	add	r3, sp, #12
 800b220:	9300      	str	r3, [sp, #0]
 800b222:	462a      	mov	r2, r5
 800b224:	4b05      	ldr	r3, [pc, #20]	@ (800b23c <_svfiprintf_r+0x1f0>)
 800b226:	a904      	add	r1, sp, #16
 800b228:	4638      	mov	r0, r7
 800b22a:	f000 f879 	bl	800b320 <_printf_i>
 800b22e:	e7ed      	b.n	800b20c <_svfiprintf_r+0x1c0>
 800b230:	0800b6a8 	.word	0x0800b6a8
 800b234:	0800b6b2 	.word	0x0800b6b2
 800b238:	00000000 	.word	0x00000000
 800b23c:	0800af95 	.word	0x0800af95
 800b240:	0800b6ae 	.word	0x0800b6ae

0800b244 <_printf_common>:
 800b244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b248:	4616      	mov	r6, r2
 800b24a:	4698      	mov	r8, r3
 800b24c:	688a      	ldr	r2, [r1, #8]
 800b24e:	690b      	ldr	r3, [r1, #16]
 800b250:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b254:	4293      	cmp	r3, r2
 800b256:	bfb8      	it	lt
 800b258:	4613      	movlt	r3, r2
 800b25a:	6033      	str	r3, [r6, #0]
 800b25c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b260:	4607      	mov	r7, r0
 800b262:	460c      	mov	r4, r1
 800b264:	b10a      	cbz	r2, 800b26a <_printf_common+0x26>
 800b266:	3301      	adds	r3, #1
 800b268:	6033      	str	r3, [r6, #0]
 800b26a:	6823      	ldr	r3, [r4, #0]
 800b26c:	0699      	lsls	r1, r3, #26
 800b26e:	bf42      	ittt	mi
 800b270:	6833      	ldrmi	r3, [r6, #0]
 800b272:	3302      	addmi	r3, #2
 800b274:	6033      	strmi	r3, [r6, #0]
 800b276:	6825      	ldr	r5, [r4, #0]
 800b278:	f015 0506 	ands.w	r5, r5, #6
 800b27c:	d106      	bne.n	800b28c <_printf_common+0x48>
 800b27e:	f104 0a19 	add.w	sl, r4, #25
 800b282:	68e3      	ldr	r3, [r4, #12]
 800b284:	6832      	ldr	r2, [r6, #0]
 800b286:	1a9b      	subs	r3, r3, r2
 800b288:	42ab      	cmp	r3, r5
 800b28a:	dc26      	bgt.n	800b2da <_printf_common+0x96>
 800b28c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b290:	6822      	ldr	r2, [r4, #0]
 800b292:	3b00      	subs	r3, #0
 800b294:	bf18      	it	ne
 800b296:	2301      	movne	r3, #1
 800b298:	0692      	lsls	r2, r2, #26
 800b29a:	d42b      	bmi.n	800b2f4 <_printf_common+0xb0>
 800b29c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b2a0:	4641      	mov	r1, r8
 800b2a2:	4638      	mov	r0, r7
 800b2a4:	47c8      	blx	r9
 800b2a6:	3001      	adds	r0, #1
 800b2a8:	d01e      	beq.n	800b2e8 <_printf_common+0xa4>
 800b2aa:	6823      	ldr	r3, [r4, #0]
 800b2ac:	6922      	ldr	r2, [r4, #16]
 800b2ae:	f003 0306 	and.w	r3, r3, #6
 800b2b2:	2b04      	cmp	r3, #4
 800b2b4:	bf02      	ittt	eq
 800b2b6:	68e5      	ldreq	r5, [r4, #12]
 800b2b8:	6833      	ldreq	r3, [r6, #0]
 800b2ba:	1aed      	subeq	r5, r5, r3
 800b2bc:	68a3      	ldr	r3, [r4, #8]
 800b2be:	bf0c      	ite	eq
 800b2c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2c4:	2500      	movne	r5, #0
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	bfc4      	itt	gt
 800b2ca:	1a9b      	subgt	r3, r3, r2
 800b2cc:	18ed      	addgt	r5, r5, r3
 800b2ce:	2600      	movs	r6, #0
 800b2d0:	341a      	adds	r4, #26
 800b2d2:	42b5      	cmp	r5, r6
 800b2d4:	d11a      	bne.n	800b30c <_printf_common+0xc8>
 800b2d6:	2000      	movs	r0, #0
 800b2d8:	e008      	b.n	800b2ec <_printf_common+0xa8>
 800b2da:	2301      	movs	r3, #1
 800b2dc:	4652      	mov	r2, sl
 800b2de:	4641      	mov	r1, r8
 800b2e0:	4638      	mov	r0, r7
 800b2e2:	47c8      	blx	r9
 800b2e4:	3001      	adds	r0, #1
 800b2e6:	d103      	bne.n	800b2f0 <_printf_common+0xac>
 800b2e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2f0:	3501      	adds	r5, #1
 800b2f2:	e7c6      	b.n	800b282 <_printf_common+0x3e>
 800b2f4:	18e1      	adds	r1, r4, r3
 800b2f6:	1c5a      	adds	r2, r3, #1
 800b2f8:	2030      	movs	r0, #48	@ 0x30
 800b2fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b2fe:	4422      	add	r2, r4
 800b300:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b304:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b308:	3302      	adds	r3, #2
 800b30a:	e7c7      	b.n	800b29c <_printf_common+0x58>
 800b30c:	2301      	movs	r3, #1
 800b30e:	4622      	mov	r2, r4
 800b310:	4641      	mov	r1, r8
 800b312:	4638      	mov	r0, r7
 800b314:	47c8      	blx	r9
 800b316:	3001      	adds	r0, #1
 800b318:	d0e6      	beq.n	800b2e8 <_printf_common+0xa4>
 800b31a:	3601      	adds	r6, #1
 800b31c:	e7d9      	b.n	800b2d2 <_printf_common+0x8e>
	...

0800b320 <_printf_i>:
 800b320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b324:	7e0f      	ldrb	r7, [r1, #24]
 800b326:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b328:	2f78      	cmp	r7, #120	@ 0x78
 800b32a:	4691      	mov	r9, r2
 800b32c:	4680      	mov	r8, r0
 800b32e:	460c      	mov	r4, r1
 800b330:	469a      	mov	sl, r3
 800b332:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b336:	d807      	bhi.n	800b348 <_printf_i+0x28>
 800b338:	2f62      	cmp	r7, #98	@ 0x62
 800b33a:	d80a      	bhi.n	800b352 <_printf_i+0x32>
 800b33c:	2f00      	cmp	r7, #0
 800b33e:	f000 80d1 	beq.w	800b4e4 <_printf_i+0x1c4>
 800b342:	2f58      	cmp	r7, #88	@ 0x58
 800b344:	f000 80b8 	beq.w	800b4b8 <_printf_i+0x198>
 800b348:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b34c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b350:	e03a      	b.n	800b3c8 <_printf_i+0xa8>
 800b352:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b356:	2b15      	cmp	r3, #21
 800b358:	d8f6      	bhi.n	800b348 <_printf_i+0x28>
 800b35a:	a101      	add	r1, pc, #4	@ (adr r1, 800b360 <_printf_i+0x40>)
 800b35c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b360:	0800b3b9 	.word	0x0800b3b9
 800b364:	0800b3cd 	.word	0x0800b3cd
 800b368:	0800b349 	.word	0x0800b349
 800b36c:	0800b349 	.word	0x0800b349
 800b370:	0800b349 	.word	0x0800b349
 800b374:	0800b349 	.word	0x0800b349
 800b378:	0800b3cd 	.word	0x0800b3cd
 800b37c:	0800b349 	.word	0x0800b349
 800b380:	0800b349 	.word	0x0800b349
 800b384:	0800b349 	.word	0x0800b349
 800b388:	0800b349 	.word	0x0800b349
 800b38c:	0800b4cb 	.word	0x0800b4cb
 800b390:	0800b3f7 	.word	0x0800b3f7
 800b394:	0800b485 	.word	0x0800b485
 800b398:	0800b349 	.word	0x0800b349
 800b39c:	0800b349 	.word	0x0800b349
 800b3a0:	0800b4ed 	.word	0x0800b4ed
 800b3a4:	0800b349 	.word	0x0800b349
 800b3a8:	0800b3f7 	.word	0x0800b3f7
 800b3ac:	0800b349 	.word	0x0800b349
 800b3b0:	0800b349 	.word	0x0800b349
 800b3b4:	0800b48d 	.word	0x0800b48d
 800b3b8:	6833      	ldr	r3, [r6, #0]
 800b3ba:	1d1a      	adds	r2, r3, #4
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	6032      	str	r2, [r6, #0]
 800b3c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	e09c      	b.n	800b506 <_printf_i+0x1e6>
 800b3cc:	6833      	ldr	r3, [r6, #0]
 800b3ce:	6820      	ldr	r0, [r4, #0]
 800b3d0:	1d19      	adds	r1, r3, #4
 800b3d2:	6031      	str	r1, [r6, #0]
 800b3d4:	0606      	lsls	r6, r0, #24
 800b3d6:	d501      	bpl.n	800b3dc <_printf_i+0xbc>
 800b3d8:	681d      	ldr	r5, [r3, #0]
 800b3da:	e003      	b.n	800b3e4 <_printf_i+0xc4>
 800b3dc:	0645      	lsls	r5, r0, #25
 800b3de:	d5fb      	bpl.n	800b3d8 <_printf_i+0xb8>
 800b3e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b3e4:	2d00      	cmp	r5, #0
 800b3e6:	da03      	bge.n	800b3f0 <_printf_i+0xd0>
 800b3e8:	232d      	movs	r3, #45	@ 0x2d
 800b3ea:	426d      	negs	r5, r5
 800b3ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3f0:	4858      	ldr	r0, [pc, #352]	@ (800b554 <_printf_i+0x234>)
 800b3f2:	230a      	movs	r3, #10
 800b3f4:	e011      	b.n	800b41a <_printf_i+0xfa>
 800b3f6:	6821      	ldr	r1, [r4, #0]
 800b3f8:	6833      	ldr	r3, [r6, #0]
 800b3fa:	0608      	lsls	r0, r1, #24
 800b3fc:	f853 5b04 	ldr.w	r5, [r3], #4
 800b400:	d402      	bmi.n	800b408 <_printf_i+0xe8>
 800b402:	0649      	lsls	r1, r1, #25
 800b404:	bf48      	it	mi
 800b406:	b2ad      	uxthmi	r5, r5
 800b408:	2f6f      	cmp	r7, #111	@ 0x6f
 800b40a:	4852      	ldr	r0, [pc, #328]	@ (800b554 <_printf_i+0x234>)
 800b40c:	6033      	str	r3, [r6, #0]
 800b40e:	bf14      	ite	ne
 800b410:	230a      	movne	r3, #10
 800b412:	2308      	moveq	r3, #8
 800b414:	2100      	movs	r1, #0
 800b416:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b41a:	6866      	ldr	r6, [r4, #4]
 800b41c:	60a6      	str	r6, [r4, #8]
 800b41e:	2e00      	cmp	r6, #0
 800b420:	db05      	blt.n	800b42e <_printf_i+0x10e>
 800b422:	6821      	ldr	r1, [r4, #0]
 800b424:	432e      	orrs	r6, r5
 800b426:	f021 0104 	bic.w	r1, r1, #4
 800b42a:	6021      	str	r1, [r4, #0]
 800b42c:	d04b      	beq.n	800b4c6 <_printf_i+0x1a6>
 800b42e:	4616      	mov	r6, r2
 800b430:	fbb5 f1f3 	udiv	r1, r5, r3
 800b434:	fb03 5711 	mls	r7, r3, r1, r5
 800b438:	5dc7      	ldrb	r7, [r0, r7]
 800b43a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b43e:	462f      	mov	r7, r5
 800b440:	42bb      	cmp	r3, r7
 800b442:	460d      	mov	r5, r1
 800b444:	d9f4      	bls.n	800b430 <_printf_i+0x110>
 800b446:	2b08      	cmp	r3, #8
 800b448:	d10b      	bne.n	800b462 <_printf_i+0x142>
 800b44a:	6823      	ldr	r3, [r4, #0]
 800b44c:	07df      	lsls	r7, r3, #31
 800b44e:	d508      	bpl.n	800b462 <_printf_i+0x142>
 800b450:	6923      	ldr	r3, [r4, #16]
 800b452:	6861      	ldr	r1, [r4, #4]
 800b454:	4299      	cmp	r1, r3
 800b456:	bfde      	ittt	le
 800b458:	2330      	movle	r3, #48	@ 0x30
 800b45a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b45e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b462:	1b92      	subs	r2, r2, r6
 800b464:	6122      	str	r2, [r4, #16]
 800b466:	f8cd a000 	str.w	sl, [sp]
 800b46a:	464b      	mov	r3, r9
 800b46c:	aa03      	add	r2, sp, #12
 800b46e:	4621      	mov	r1, r4
 800b470:	4640      	mov	r0, r8
 800b472:	f7ff fee7 	bl	800b244 <_printf_common>
 800b476:	3001      	adds	r0, #1
 800b478:	d14a      	bne.n	800b510 <_printf_i+0x1f0>
 800b47a:	f04f 30ff 	mov.w	r0, #4294967295
 800b47e:	b004      	add	sp, #16
 800b480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b484:	6823      	ldr	r3, [r4, #0]
 800b486:	f043 0320 	orr.w	r3, r3, #32
 800b48a:	6023      	str	r3, [r4, #0]
 800b48c:	4832      	ldr	r0, [pc, #200]	@ (800b558 <_printf_i+0x238>)
 800b48e:	2778      	movs	r7, #120	@ 0x78
 800b490:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b494:	6823      	ldr	r3, [r4, #0]
 800b496:	6831      	ldr	r1, [r6, #0]
 800b498:	061f      	lsls	r7, r3, #24
 800b49a:	f851 5b04 	ldr.w	r5, [r1], #4
 800b49e:	d402      	bmi.n	800b4a6 <_printf_i+0x186>
 800b4a0:	065f      	lsls	r7, r3, #25
 800b4a2:	bf48      	it	mi
 800b4a4:	b2ad      	uxthmi	r5, r5
 800b4a6:	6031      	str	r1, [r6, #0]
 800b4a8:	07d9      	lsls	r1, r3, #31
 800b4aa:	bf44      	itt	mi
 800b4ac:	f043 0320 	orrmi.w	r3, r3, #32
 800b4b0:	6023      	strmi	r3, [r4, #0]
 800b4b2:	b11d      	cbz	r5, 800b4bc <_printf_i+0x19c>
 800b4b4:	2310      	movs	r3, #16
 800b4b6:	e7ad      	b.n	800b414 <_printf_i+0xf4>
 800b4b8:	4826      	ldr	r0, [pc, #152]	@ (800b554 <_printf_i+0x234>)
 800b4ba:	e7e9      	b.n	800b490 <_printf_i+0x170>
 800b4bc:	6823      	ldr	r3, [r4, #0]
 800b4be:	f023 0320 	bic.w	r3, r3, #32
 800b4c2:	6023      	str	r3, [r4, #0]
 800b4c4:	e7f6      	b.n	800b4b4 <_printf_i+0x194>
 800b4c6:	4616      	mov	r6, r2
 800b4c8:	e7bd      	b.n	800b446 <_printf_i+0x126>
 800b4ca:	6833      	ldr	r3, [r6, #0]
 800b4cc:	6825      	ldr	r5, [r4, #0]
 800b4ce:	6961      	ldr	r1, [r4, #20]
 800b4d0:	1d18      	adds	r0, r3, #4
 800b4d2:	6030      	str	r0, [r6, #0]
 800b4d4:	062e      	lsls	r6, r5, #24
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	d501      	bpl.n	800b4de <_printf_i+0x1be>
 800b4da:	6019      	str	r1, [r3, #0]
 800b4dc:	e002      	b.n	800b4e4 <_printf_i+0x1c4>
 800b4de:	0668      	lsls	r0, r5, #25
 800b4e0:	d5fb      	bpl.n	800b4da <_printf_i+0x1ba>
 800b4e2:	8019      	strh	r1, [r3, #0]
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	6123      	str	r3, [r4, #16]
 800b4e8:	4616      	mov	r6, r2
 800b4ea:	e7bc      	b.n	800b466 <_printf_i+0x146>
 800b4ec:	6833      	ldr	r3, [r6, #0]
 800b4ee:	1d1a      	adds	r2, r3, #4
 800b4f0:	6032      	str	r2, [r6, #0]
 800b4f2:	681e      	ldr	r6, [r3, #0]
 800b4f4:	6862      	ldr	r2, [r4, #4]
 800b4f6:	2100      	movs	r1, #0
 800b4f8:	4630      	mov	r0, r6
 800b4fa:	f7f4 fe71 	bl	80001e0 <memchr>
 800b4fe:	b108      	cbz	r0, 800b504 <_printf_i+0x1e4>
 800b500:	1b80      	subs	r0, r0, r6
 800b502:	6060      	str	r0, [r4, #4]
 800b504:	6863      	ldr	r3, [r4, #4]
 800b506:	6123      	str	r3, [r4, #16]
 800b508:	2300      	movs	r3, #0
 800b50a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b50e:	e7aa      	b.n	800b466 <_printf_i+0x146>
 800b510:	6923      	ldr	r3, [r4, #16]
 800b512:	4632      	mov	r2, r6
 800b514:	4649      	mov	r1, r9
 800b516:	4640      	mov	r0, r8
 800b518:	47d0      	blx	sl
 800b51a:	3001      	adds	r0, #1
 800b51c:	d0ad      	beq.n	800b47a <_printf_i+0x15a>
 800b51e:	6823      	ldr	r3, [r4, #0]
 800b520:	079b      	lsls	r3, r3, #30
 800b522:	d413      	bmi.n	800b54c <_printf_i+0x22c>
 800b524:	68e0      	ldr	r0, [r4, #12]
 800b526:	9b03      	ldr	r3, [sp, #12]
 800b528:	4298      	cmp	r0, r3
 800b52a:	bfb8      	it	lt
 800b52c:	4618      	movlt	r0, r3
 800b52e:	e7a6      	b.n	800b47e <_printf_i+0x15e>
 800b530:	2301      	movs	r3, #1
 800b532:	4632      	mov	r2, r6
 800b534:	4649      	mov	r1, r9
 800b536:	4640      	mov	r0, r8
 800b538:	47d0      	blx	sl
 800b53a:	3001      	adds	r0, #1
 800b53c:	d09d      	beq.n	800b47a <_printf_i+0x15a>
 800b53e:	3501      	adds	r5, #1
 800b540:	68e3      	ldr	r3, [r4, #12]
 800b542:	9903      	ldr	r1, [sp, #12]
 800b544:	1a5b      	subs	r3, r3, r1
 800b546:	42ab      	cmp	r3, r5
 800b548:	dcf2      	bgt.n	800b530 <_printf_i+0x210>
 800b54a:	e7eb      	b.n	800b524 <_printf_i+0x204>
 800b54c:	2500      	movs	r5, #0
 800b54e:	f104 0619 	add.w	r6, r4, #25
 800b552:	e7f5      	b.n	800b540 <_printf_i+0x220>
 800b554:	0800b6b9 	.word	0x0800b6b9
 800b558:	0800b6ca 	.word	0x0800b6ca

0800b55c <memmove>:
 800b55c:	4288      	cmp	r0, r1
 800b55e:	b510      	push	{r4, lr}
 800b560:	eb01 0402 	add.w	r4, r1, r2
 800b564:	d902      	bls.n	800b56c <memmove+0x10>
 800b566:	4284      	cmp	r4, r0
 800b568:	4623      	mov	r3, r4
 800b56a:	d807      	bhi.n	800b57c <memmove+0x20>
 800b56c:	1e43      	subs	r3, r0, #1
 800b56e:	42a1      	cmp	r1, r4
 800b570:	d008      	beq.n	800b584 <memmove+0x28>
 800b572:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b576:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b57a:	e7f8      	b.n	800b56e <memmove+0x12>
 800b57c:	4402      	add	r2, r0
 800b57e:	4601      	mov	r1, r0
 800b580:	428a      	cmp	r2, r1
 800b582:	d100      	bne.n	800b586 <memmove+0x2a>
 800b584:	bd10      	pop	{r4, pc}
 800b586:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b58a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b58e:	e7f7      	b.n	800b580 <memmove+0x24>

0800b590 <memcpy>:
 800b590:	440a      	add	r2, r1
 800b592:	4291      	cmp	r1, r2
 800b594:	f100 33ff 	add.w	r3, r0, #4294967295
 800b598:	d100      	bne.n	800b59c <memcpy+0xc>
 800b59a:	4770      	bx	lr
 800b59c:	b510      	push	{r4, lr}
 800b59e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5a6:	4291      	cmp	r1, r2
 800b5a8:	d1f9      	bne.n	800b59e <memcpy+0xe>
 800b5aa:	bd10      	pop	{r4, pc}

0800b5ac <_realloc_r>:
 800b5ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5b0:	4607      	mov	r7, r0
 800b5b2:	4614      	mov	r4, r2
 800b5b4:	460d      	mov	r5, r1
 800b5b6:	b921      	cbnz	r1, 800b5c2 <_realloc_r+0x16>
 800b5b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5bc:	4611      	mov	r1, r2
 800b5be:	f7ff bbad 	b.w	800ad1c <_malloc_r>
 800b5c2:	b92a      	cbnz	r2, 800b5d0 <_realloc_r+0x24>
 800b5c4:	f7ff fc9c 	bl	800af00 <_free_r>
 800b5c8:	4625      	mov	r5, r4
 800b5ca:	4628      	mov	r0, r5
 800b5cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5d0:	f000 f81a 	bl	800b608 <_malloc_usable_size_r>
 800b5d4:	4284      	cmp	r4, r0
 800b5d6:	4606      	mov	r6, r0
 800b5d8:	d802      	bhi.n	800b5e0 <_realloc_r+0x34>
 800b5da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b5de:	d8f4      	bhi.n	800b5ca <_realloc_r+0x1e>
 800b5e0:	4621      	mov	r1, r4
 800b5e2:	4638      	mov	r0, r7
 800b5e4:	f7ff fb9a 	bl	800ad1c <_malloc_r>
 800b5e8:	4680      	mov	r8, r0
 800b5ea:	b908      	cbnz	r0, 800b5f0 <_realloc_r+0x44>
 800b5ec:	4645      	mov	r5, r8
 800b5ee:	e7ec      	b.n	800b5ca <_realloc_r+0x1e>
 800b5f0:	42b4      	cmp	r4, r6
 800b5f2:	4622      	mov	r2, r4
 800b5f4:	4629      	mov	r1, r5
 800b5f6:	bf28      	it	cs
 800b5f8:	4632      	movcs	r2, r6
 800b5fa:	f7ff ffc9 	bl	800b590 <memcpy>
 800b5fe:	4629      	mov	r1, r5
 800b600:	4638      	mov	r0, r7
 800b602:	f7ff fc7d 	bl	800af00 <_free_r>
 800b606:	e7f1      	b.n	800b5ec <_realloc_r+0x40>

0800b608 <_malloc_usable_size_r>:
 800b608:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b60c:	1f18      	subs	r0, r3, #4
 800b60e:	2b00      	cmp	r3, #0
 800b610:	bfbc      	itt	lt
 800b612:	580b      	ldrlt	r3, [r1, r0]
 800b614:	18c0      	addlt	r0, r0, r3
 800b616:	4770      	bx	lr

0800b618 <_init>:
 800b618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b61a:	bf00      	nop
 800b61c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b61e:	bc08      	pop	{r3}
 800b620:	469e      	mov	lr, r3
 800b622:	4770      	bx	lr

0800b624 <_fini>:
 800b624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b626:	bf00      	nop
 800b628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b62a:	bc08      	pop	{r3}
 800b62c:	469e      	mov	lr, r3
 800b62e:	4770      	bx	lr
