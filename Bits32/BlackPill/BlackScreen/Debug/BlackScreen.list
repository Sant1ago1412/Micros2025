
BlackScreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010f7c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08011120  08011120  00012120  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080115b4  080115b4  000132cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080115b4  080115b4  000125b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080115bc  080115bc  000132cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080115bc  080115bc  000125bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080115c0  080115c0  000125c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002cc  20000000  080115c4  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001534  200002cc  08011890  000132cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001800  08011890  00013800  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000132cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019fbf  00000000  00000000  000132fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040d6  00000000  00000000  0002d2bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001798  00000000  00000000  00031398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001226  00000000  00000000  00032b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000079d2  00000000  00000000  00033d56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e30f  00000000  00000000  0003b728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a17f9  00000000  00000000  00059a37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb230  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007804  00000000  00000000  000fb274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00102a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002cc 	.word	0x200002cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011104 	.word	0x08011104

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d0 	.word	0x200002d0
 80001dc:	08011104 	.word	0x08011104

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <ADC_Filter>:
 *      Author: santi
 */

#include "ADC.h"

void ADC_Filter(s_ADC *adcValues){
 8001030:	b490      	push	{r4, r7}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

	static uint8_t index=0;
	static uint16_t Buffer[8][8];

	if(adcValues->newValue==1){
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800103e:	2b01      	cmp	r3, #1
 8001040:	d158      	bne.n	80010f4 <ADC_Filter+0xc4>
		adcValues->newValue=0;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		for(uint8_t channel = 0; channel < NUM_CHANNELS; channel++){
 800104a:	2300      	movs	r3, #0
 800104c:	73fb      	strb	r3, [r7, #15]
 800104e:	e041      	b.n	80010d4 <ADC_Filter+0xa4>
			adcValues->Sumatoria[channel] -= Buffer[index][channel];
 8001050:	7bfa      	ldrb	r2, [r7, #15]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3208      	adds	r2, #8
 8001056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105a:	4a29      	ldr	r2, [pc, #164]	@ (8001100 <ADC_Filter+0xd0>)
 800105c:	7812      	ldrb	r2, [r2, #0]
 800105e:	4611      	mov	r1, r2
 8001060:	7bfa      	ldrb	r2, [r7, #15]
 8001062:	4828      	ldr	r0, [pc, #160]	@ (8001104 <ADC_Filter+0xd4>)
 8001064:	00c9      	lsls	r1, r1, #3
 8001066:	440a      	add	r2, r1
 8001068:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 800106c:	4611      	mov	r1, r2
 800106e:	7bfa      	ldrb	r2, [r7, #15]
 8001070:	1a59      	subs	r1, r3, r1
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3208      	adds	r2, #8
 8001076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			adcValues->Sumatoria[channel] += adcValues->raw_Data[channel];
 800107a:	7bfa      	ldrb	r2, [r7, #15]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3208      	adds	r2, #8
 8001080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001084:	7bf9      	ldrb	r1, [r7, #15]
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800108c:	4611      	mov	r1, r2
 800108e:	7bfa      	ldrb	r2, [r7, #15]
 8001090:	4419      	add	r1, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3208      	adds	r2, #8
 8001096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			Buffer[index][channel] = adcValues->raw_Data[channel];
 800109a:	7bf9      	ldrb	r1, [r7, #15]
 800109c:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <ADC_Filter+0xd0>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461c      	mov	r4, r3
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
 80010aa:	4916      	ldr	r1, [pc, #88]	@ (8001104 <ADC_Filter+0xd4>)
 80010ac:	00e2      	lsls	r2, r4, #3
 80010ae:	4413      	add	r3, r2
 80010b0:	4602      	mov	r2, r0
 80010b2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			adcValues->filteredData[channel] = (adcValues->Sumatoria[channel] / 8);
 80010b6:	7bfa      	ldrb	r2, [r7, #15]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3208      	adds	r2, #8
 80010bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c0:	08db      	lsrs	r3, r3, #3
 80010c2:	7bfa      	ldrb	r2, [r7, #15]
 80010c4:	b299      	uxth	r1, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3208      	adds	r2, #8
 80010ca:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(uint8_t channel = 0; channel < NUM_CHANNELS; channel++){
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	3301      	adds	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	2b07      	cmp	r3, #7
 80010d8:	d9ba      	bls.n	8001050 <ADC_Filter+0x20>
		}

		index++;
 80010da:	4b09      	ldr	r3, [pc, #36]	@ (8001100 <ADC_Filter+0xd0>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	3301      	adds	r3, #1
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <ADC_Filter+0xd0>)
 80010e4:	701a      	strb	r2, [r3, #0]
		if(index>7)
 80010e6:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <ADC_Filter+0xd0>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b07      	cmp	r3, #7
 80010ec:	d902      	bls.n	80010f4 <ADC_Filter+0xc4>
			index=0;
 80010ee:	4b04      	ldr	r3, [pc, #16]	@ (8001100 <ADC_Filter+0xd0>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
	}
}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc90      	pop	{r4, r7}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	200002e8 	.word	0x200002e8
 8001104:	200002ec 	.word	0x200002ec

08001108 <UP_initprotocol>:
int16_t valuem2;
_eProtocolo estadoProtocolo;
_sDato *datosComLib;
static void (*aPtrFunADC)(uint8_t *buf) = NULL;

void UP_initprotocol(_sDato *datosCom,uint8_t ringbuff){
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	460b      	mov	r3, r1
 8001112:	70fb      	strb	r3, [r7, #3]

		datosCom->bufferRx = malloc(ringbuff);
 8001114:	78fb      	ldrb	r3, [r7, #3]
 8001116:	4618      	mov	r0, r3
 8001118:	f00b fc8e 	bl	800ca38 <malloc>
 800111c:	4603      	mov	r3, r0
 800111e:	461a      	mov	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	609a      	str	r2, [r3, #8]
	    datosCom->bufferTx = malloc(ringbuff);
 8001124:	78fb      	ldrb	r3, [r7, #3]
 8001126:	4618      	mov	r0, r3
 8001128:	f00b fc86 	bl	800ca38 <malloc>
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	60da      	str	r2, [r3, #12]
	    datosComLib=datosCom;
 8001134:	4a03      	ldr	r2, [pc, #12]	@ (8001144 <UP_initprotocol+0x3c>)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6013      	str	r3, [r2, #0]

}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000378 	.word	0x20000378

08001148 <UP_sendInfo>:

void UP_sendInfo(_eEstadoMEFcmd CMD,uint8_t *bufferAux,uint8_t bytes){
 8001148:	b490      	push	{r4, r7}
 800114a:	b08c      	sub	sp, #48	@ 0x30
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
 8001154:	4613      	mov	r3, r2
 8001156:	71bb      	strb	r3, [r7, #6]

    uint8_t bufAux[30], indiceAux=0,cks=0,i=0;
 8001158:	2300      	movs	r3, #0
 800115a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800115e:	2300      	movs	r3, #0
 8001160:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001164:	2300      	movs	r3, #0
 8001166:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    bufAux[indiceAux++]='U';
 800116a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800116e:	1c5a      	adds	r2, r3, #1
 8001170:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8001174:	3330      	adds	r3, #48	@ 0x30
 8001176:	443b      	add	r3, r7
 8001178:	2255      	movs	r2, #85	@ 0x55
 800117a:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='N';
 800117e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001182:	1c5a      	adds	r2, r3, #1
 8001184:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8001188:	3330      	adds	r3, #48	@ 0x30
 800118a:	443b      	add	r3, r7
 800118c:	224e      	movs	r2, #78	@ 0x4e
 800118e:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='E';
 8001192:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001196:	1c5a      	adds	r2, r3, #1
 8001198:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 800119c:	3330      	adds	r3, #48	@ 0x30
 800119e:	443b      	add	r3, r7
 80011a0:	2245      	movs	r2, #69	@ 0x45
 80011a2:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='R';
 80011a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011aa:	1c5a      	adds	r2, r3, #1
 80011ac:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80011b0:	3330      	adds	r3, #48	@ 0x30
 80011b2:	443b      	add	r3, r7
 80011b4:	2252      	movs	r2, #82	@ 0x52
 80011b6:	f803 2c24 	strb.w	r2, [r3, #-36]

    bufAux[indiceAux++]=bytes+2;
 80011ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011be:	1c5a      	adds	r2, r3, #1
 80011c0:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80011c4:	4619      	mov	r1, r3
 80011c6:	79bb      	ldrb	r3, [r7, #6]
 80011c8:	3302      	adds	r3, #2
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 80011d0:	443b      	add	r3, r7
 80011d2:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]=':';
 80011d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011da:	1c5a      	adds	r2, r3, #1
 80011dc:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80011e0:	3330      	adds	r3, #48	@ 0x30
 80011e2:	443b      	add	r3, r7
 80011e4:	223a      	movs	r2, #58	@ 0x3a
 80011e6:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]=CMD;
 80011ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011ee:	1c5a      	adds	r2, r3, #1
 80011f0:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80011f4:	3330      	adds	r3, #48	@ 0x30
 80011f6:	443b      	add	r3, r7
 80011f8:	79fa      	ldrb	r2, [r7, #7]
 80011fa:	f803 2c24 	strb.w	r2, [r3, #-36]

    for(i=0; i<bytes; i++)
 80011fe:	2300      	movs	r3, #0
 8001200:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8001204:	e012      	b.n	800122c <UP_sendInfo+0xe4>
        bufAux[indiceAux++] = bufferAux[i];
 8001206:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	441a      	add	r2, r3
 800120e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001212:	1c59      	adds	r1, r3, #1
 8001214:	f887 102f 	strb.w	r1, [r7, #47]	@ 0x2f
 8001218:	7812      	ldrb	r2, [r2, #0]
 800121a:	3330      	adds	r3, #48	@ 0x30
 800121c:	443b      	add	r3, r7
 800121e:	f803 2c24 	strb.w	r2, [r3, #-36]
    for(i=0; i<bytes; i++)
 8001222:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001226:	3301      	adds	r3, #1
 8001228:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800122c:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8001230:	79bb      	ldrb	r3, [r7, #6]
 8001232:	429a      	cmp	r2, r3
 8001234:	d3e7      	bcc.n	8001206 <UP_sendInfo+0xbe>

    cks=0;
 8001236:	2300      	movs	r3, #0
 8001238:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    for(i=0 ;i<indiceAux;i++){
 800123c:	2300      	movs	r3, #0
 800123e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8001242:	e022      	b.n	800128a <UP_sendInfo+0x142>
        cks^= bufAux[i];
 8001244:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001248:	3330      	adds	r3, #48	@ 0x30
 800124a:	443b      	add	r3, r7
 800124c:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8001250:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001254:	4053      	eors	r3, r2
 8001256:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        datosComLib->bufferTx[datosComLib->indexWriteTx++]=bufAux[i];
 800125a:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800125e:	4b1a      	ldr	r3, [pc, #104]	@ (80012c8 <UP_sendInfo+0x180>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68d8      	ldr	r0, [r3, #12]
 8001264:	4b18      	ldr	r3, [pc, #96]	@ (80012c8 <UP_sendInfo+0x180>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	795a      	ldrb	r2, [r3, #5]
 800126a:	1c54      	adds	r4, r2, #1
 800126c:	b2e4      	uxtb	r4, r4
 800126e:	715c      	strb	r4, [r3, #5]
 8001270:	4613      	mov	r3, r2
 8001272:	4403      	add	r3, r0
 8001274:	f101 0230 	add.w	r2, r1, #48	@ 0x30
 8001278:	443a      	add	r2, r7
 800127a:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 800127e:	701a      	strb	r2, [r3, #0]
    for(i=0 ;i<indiceAux;i++){
 8001280:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001284:	3301      	adds	r3, #1
 8001286:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800128a:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800128e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001292:	429a      	cmp	r2, r3
 8001294:	d3d6      	bcc.n	8001244 <UP_sendInfo+0xfc>
    }
     datosComLib->bufferTx[datosComLib->indexWriteTx++]=cks;
 8001296:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <UP_sendInfo+0x180>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	68d9      	ldr	r1, [r3, #12]
 800129c:	4b0a      	ldr	r3, [pc, #40]	@ (80012c8 <UP_sendInfo+0x180>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	795a      	ldrb	r2, [r3, #5]
 80012a2:	1c50      	adds	r0, r2, #1
 80012a4:	b2c0      	uxtb	r0, r0
 80012a6:	7158      	strb	r0, [r3, #5]
 80012a8:	4613      	mov	r3, r2
 80012aa:	440b      	add	r3, r1
 80012ac:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80012b0:	701a      	strb	r2, [r3, #0]

     datosComLib->bytesTosend=indiceAux;
 80012b2:	4b05      	ldr	r3, [pc, #20]	@ (80012c8 <UP_sendInfo+0x180>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80012ba:	741a      	strb	r2, [r3, #16]

}
 80012bc:	bf00      	nop
 80012be:	3730      	adds	r7, #48	@ 0x30
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc90      	pop	{r4, r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000378 	.word	0x20000378

080012cc <UP_decodeHeader>:

void UP_decodeHeader(_sDato *datosComLib){
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]

    static uint8_t nBytes=0;

    uint8_t indexWriteRxCopy=datosComLib->indexWriteRx;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	78db      	ldrb	r3, [r3, #3]
 80012d8:	73fb      	strb	r3, [r7, #15]

    while (datosComLib->indexReadRx!=indexWriteRxCopy)
 80012da:	e0e2      	b.n	80014a2 <UP_decodeHeader+0x1d6>
    {
        switch (estadoProtocolo) {
 80012dc:	4b76      	ldr	r3, [pc, #472]	@ (80014b8 <UP_decodeHeader+0x1ec>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b06      	cmp	r3, #6
 80012e2:	f200 80d7 	bhi.w	8001494 <UP_decodeHeader+0x1c8>
 80012e6:	a201      	add	r2, pc, #4	@ (adr r2, 80012ec <UP_decodeHeader+0x20>)
 80012e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ec:	08001309 	.word	0x08001309
 80012f0:	08001331 	.word	0x08001331
 80012f4:	08001365 	.word	0x08001365
 80012f8:	08001399 	.word	0x08001399
 80012fc:	080013cd 	.word	0x080013cd
 8001300:	080013f5 	.word	0x080013f5
 8001304:	08001437 	.word	0x08001437
            case START:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='U'){
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689a      	ldr	r2, [r3, #8]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	791b      	ldrb	r3, [r3, #4]
 8001310:	1c59      	adds	r1, r3, #1
 8001312:	b2c8      	uxtb	r0, r1
 8001314:	6879      	ldr	r1, [r7, #4]
 8001316:	7108      	strb	r0, [r1, #4]
 8001318:	4413      	add	r3, r2
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b55      	cmp	r3, #85	@ 0x55
 800131e:	f040 80bd 	bne.w	800149c <UP_decodeHeader+0x1d0>
                    estadoProtocolo=HEADER_1;
 8001322:	4b65      	ldr	r3, [pc, #404]	@ (80014b8 <UP_decodeHeader+0x1ec>)
 8001324:	2201      	movs	r2, #1
 8001326:	701a      	strb	r2, [r3, #0]
                    datosComLib->cheksumRx=0;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	709a      	strb	r2, [r3, #2]
                }
                break;
 800132e:	e0b5      	b.n	800149c <UP_decodeHeader+0x1d0>
            case HEADER_1:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='N')
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	791b      	ldrb	r3, [r3, #4]
 8001338:	1c59      	adds	r1, r3, #1
 800133a:	b2c8      	uxtb	r0, r1
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	7108      	strb	r0, [r1, #4]
 8001340:	4413      	add	r3, r2
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b4e      	cmp	r3, #78	@ 0x4e
 8001346:	d103      	bne.n	8001350 <UP_decodeHeader+0x84>
                   estadoProtocolo=HEADER_2;
 8001348:	4b5b      	ldr	r3, [pc, #364]	@ (80014b8 <UP_decodeHeader+0x1ec>)
 800134a:	2202      	movs	r2, #2
 800134c:	701a      	strb	r2, [r3, #0]
                else{
                    datosComLib->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 800134e:	e0a8      	b.n	80014a2 <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	791b      	ldrb	r3, [r3, #4]
 8001354:	3b01      	subs	r3, #1
 8001356:	b2da      	uxtb	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 800135c:	4b56      	ldr	r3, [pc, #344]	@ (80014b8 <UP_decodeHeader+0x1ec>)
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]
                break;
 8001362:	e09e      	b.n	80014a2 <UP_decodeHeader+0x1d6>
            case HEADER_2:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='E')
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	791b      	ldrb	r3, [r3, #4]
 800136c:	1c59      	adds	r1, r3, #1
 800136e:	b2c8      	uxtb	r0, r1
 8001370:	6879      	ldr	r1, [r7, #4]
 8001372:	7108      	strb	r0, [r1, #4]
 8001374:	4413      	add	r3, r2
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b45      	cmp	r3, #69	@ 0x45
 800137a:	d103      	bne.n	8001384 <UP_decodeHeader+0xb8>
                    estadoProtocolo=HEADER_3;
 800137c:	4b4e      	ldr	r3, [pc, #312]	@ (80014b8 <UP_decodeHeader+0x1ec>)
 800137e:	2203      	movs	r2, #3
 8001380:	701a      	strb	r2, [r3, #0]
                else{
                    datosComLib->indexReadRx--;
                   estadoProtocolo=START;
                }
                break;
 8001382:	e08e      	b.n	80014a2 <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	791b      	ldrb	r3, [r3, #4]
 8001388:	3b01      	subs	r3, #1
 800138a:	b2da      	uxtb	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	711a      	strb	r2, [r3, #4]
                   estadoProtocolo=START;
 8001390:	4b49      	ldr	r3, [pc, #292]	@ (80014b8 <UP_decodeHeader+0x1ec>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
                break;
 8001396:	e084      	b.n	80014a2 <UP_decodeHeader+0x1d6>
			case HEADER_3:
				if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='R')
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	791b      	ldrb	r3, [r3, #4]
 80013a0:	1c59      	adds	r1, r3, #1
 80013a2:	b2c8      	uxtb	r0, r1
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	7108      	strb	r0, [r1, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b52      	cmp	r3, #82	@ 0x52
 80013ae:	d103      	bne.n	80013b8 <UP_decodeHeader+0xec>
					estadoProtocolo=NBYTES;
 80013b0:	4b41      	ldr	r3, [pc, #260]	@ (80014b8 <UP_decodeHeader+0x1ec>)
 80013b2:	2204      	movs	r2, #4
 80013b4:	701a      	strb	r2, [r3, #0]
				else{
					datosComLib->indexReadRx--;
				    estadoProtocolo=START;
				}
            break;
 80013b6:	e074      	b.n	80014a2 <UP_decodeHeader+0x1d6>
					datosComLib->indexReadRx--;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	791b      	ldrb	r3, [r3, #4]
 80013bc:	3b01      	subs	r3, #1
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	711a      	strb	r2, [r3, #4]
				    estadoProtocolo=START;
 80013c4:	4b3c      	ldr	r3, [pc, #240]	@ (80014b8 <UP_decodeHeader+0x1ec>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
            break;
 80013ca:	e06a      	b.n	80014a2 <UP_decodeHeader+0x1d6>
            case NBYTES:
                datosComLib->indexStart=datosComLib->indexReadRx;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	791a      	ldrb	r2, [r3, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	705a      	strb	r2, [r3, #1]
                nBytes=datosComLib->bufferRx[datosComLib->indexReadRx++];
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	791b      	ldrb	r3, [r3, #4]
 80013dc:	1c59      	adds	r1, r3, #1
 80013de:	b2c8      	uxtb	r0, r1
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	7108      	strb	r0, [r1, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	781a      	ldrb	r2, [r3, #0]
 80013e8:	4b34      	ldr	r3, [pc, #208]	@ (80014bc <UP_decodeHeader+0x1f0>)
 80013ea:	701a      	strb	r2, [r3, #0]
                estadoProtocolo=TOKEN;
 80013ec:	4b32      	ldr	r3, [pc, #200]	@ (80014b8 <UP_decodeHeader+0x1ec>)
 80013ee:	2205      	movs	r2, #5
 80013f0:	701a      	strb	r2, [r3, #0]
                break;
 80013f2:	e056      	b.n	80014a2 <UP_decodeHeader+0x1d6>
            case TOKEN:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]==':'){
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689a      	ldr	r2, [r3, #8]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	791b      	ldrb	r3, [r3, #4]
 80013fc:	1c59      	adds	r1, r3, #1
 80013fe:	b2c8      	uxtb	r0, r1
 8001400:	6879      	ldr	r1, [r7, #4]
 8001402:	7108      	strb	r0, [r1, #4]
 8001404:	4413      	add	r3, r2
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b3a      	cmp	r3, #58	@ 0x3a
 800140a:	d10a      	bne.n	8001422 <UP_decodeHeader+0x156>
                   estadoProtocolo=PAYLOAD;
 800140c:	4b2a      	ldr	r3, [pc, #168]	@ (80014b8 <UP_decodeHeader+0x1ec>)
 800140e:	2206      	movs	r2, #6
 8001410:	701a      	strb	r2, [r3, #0]
                    datosComLib->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 8001412:	4b2a      	ldr	r3, [pc, #168]	@ (80014bc <UP_decodeHeader+0x1f0>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 800141a:	b2da      	uxtb	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	709a      	strb	r2, [r3, #2]
                }
                else{
                    datosComLib->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 8001420:	e03f      	b.n	80014a2 <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	791b      	ldrb	r3, [r3, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	b2da      	uxtb	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 800142e:	4b22      	ldr	r3, [pc, #136]	@ (80014b8 <UP_decodeHeader+0x1ec>)
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]
                break;
 8001434:	e035      	b.n	80014a2 <UP_decodeHeader+0x1d6>
            case PAYLOAD:
                if (nBytes>1){
 8001436:	4b21      	ldr	r3, [pc, #132]	@ (80014bc <UP_decodeHeader+0x1f0>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d90f      	bls.n	800145e <UP_decodeHeader+0x192>
                    datosComLib->cheksumRx ^= datosComLib->bufferRx[datosComLib->indexReadRx++];
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	791b      	ldrb	r3, [r3, #4]
 8001446:	1c59      	adds	r1, r3, #1
 8001448:	b2c8      	uxtb	r0, r1
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	7108      	strb	r0, [r1, #4]
 800144e:	4413      	add	r3, r2
 8001450:	781a      	ldrb	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	789b      	ldrb	r3, [r3, #2]
 8001456:	4053      	eors	r3, r2
 8001458:	b2da      	uxtb	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	709a      	strb	r2, [r3, #2]
                }
                nBytes--;
 800145e:	4b17      	ldr	r3, [pc, #92]	@ (80014bc <UP_decodeHeader+0x1f0>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	3b01      	subs	r3, #1
 8001464:	b2da      	uxtb	r2, r3
 8001466:	4b15      	ldr	r3, [pc, #84]	@ (80014bc <UP_decodeHeader+0x1f0>)
 8001468:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){
 800146a:	4b14      	ldr	r3, [pc, #80]	@ (80014bc <UP_decodeHeader+0x1f0>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d116      	bne.n	80014a0 <UP_decodeHeader+0x1d4>
                    estadoProtocolo=START;
 8001472:	4b11      	ldr	r3, [pc, #68]	@ (80014b8 <UP_decodeHeader+0x1ec>)
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
                    if(datosComLib->cheksumRx == datosComLib->bufferRx[datosComLib->indexReadRx]){
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	789a      	ldrb	r2, [r3, #2]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	7909      	ldrb	r1, [r1, #4]
 8001484:	440b      	add	r3, r1
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	429a      	cmp	r2, r3
 800148a:	d109      	bne.n	80014a0 <UP_decodeHeader+0x1d4>
                    	UP_decodeData(datosComLib);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 f817 	bl	80014c0 <UP_decodeData>
                    }
                }

                break;
 8001492:	e005      	b.n	80014a0 <UP_decodeHeader+0x1d4>
            default:
                estadoProtocolo=START;
 8001494:	4b08      	ldr	r3, [pc, #32]	@ (80014b8 <UP_decodeHeader+0x1ec>)
 8001496:	2200      	movs	r2, #0
 8001498:	701a      	strb	r2, [r3, #0]
                break;
 800149a:	e002      	b.n	80014a2 <UP_decodeHeader+0x1d6>
                break;
 800149c:	bf00      	nop
 800149e:	e000      	b.n	80014a2 <UP_decodeHeader+0x1d6>
                break;
 80014a0:	bf00      	nop
    while (datosComLib->indexReadRx!=indexWriteRxCopy)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	791b      	ldrb	r3, [r3, #4]
 80014a6:	7bfa      	ldrb	r2, [r7, #15]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	f47f af17 	bne.w	80012dc <UP_decodeHeader+0x10>
        }
    }
}
 80014ae:	bf00      	nop
 80014b0:	bf00      	nop
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000374 	.word	0x20000374
 80014bc:	20000380 	.word	0x20000380

080014c0 <UP_decodeData>:

void UP_decodeData(_sDato *datosComLib){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	@ 0x28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]

    uint8_t bufAux[30], indiceAux=0,bytes=0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80014ce:	2300      	movs	r3, #0
 80014d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    switch (datosComLib->bufferRx[datosComLib->indexStart+2])//CMD EN LA POSICION 2
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	785b      	ldrb	r3, [r3, #1]
 80014dc:	3302      	adds	r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	3bf0      	subs	r3, #240	@ 0xf0
 80014e4:	2b05      	cmp	r3, #5
 80014e6:	f200 8084 	bhi.w	80015f2 <UP_decodeData+0x132>
 80014ea:	a201      	add	r2, pc, #4	@ (adr r2, 80014f0 <UP_decodeData+0x30>)
 80014ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f0:	08001509 	.word	0x08001509
 80014f4:	08001525 	.word	0x08001525
 80014f8:	08001541 	.word	0x08001541
 80014fc:	08001557 	.word	0x08001557
 8001500:	080015c9 	.word	0x080015c9
 8001504:	080015df 	.word	0x080015df
    {
    case ALIVE:

        bufAux[indiceAux++]=ALIVE;
 8001508:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8001512:	3328      	adds	r3, #40	@ 0x28
 8001514:	443b      	add	r3, r7
 8001516:	22f0      	movs	r2, #240	@ 0xf0
 8001518:	f803 2c20 	strb.w	r2, [r3, #-32]
        bytes=0x02;//aca debo darle CMD+CKS+PAYLOAD
 800151c:	2302      	movs	r3, #2
 800151e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    break;
 8001522:	e074      	b.n	800160e <UP_decodeData+0x14e>
    case FIRMWARE:

		bufAux[indiceAux++]=FIRMWARE;
 8001524:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 800152e:	3328      	adds	r3, #40	@ 0x28
 8001530:	443b      	add	r3, r7
 8001532:	22f1      	movs	r2, #241	@ 0xf1
 8001534:	f803 2c20 	strb.w	r2, [r3, #-32]
		bytes=0x02;
 8001538:	2302      	movs	r3, #2
 800153a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    break;
 800153e:	e066      	b.n	800160e <UP_decodeData+0x14e>

    case TEXT:

		bufAux[indiceAux++]=TEXT;
 8001540:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001544:	1c5a      	adds	r2, r3, #1
 8001546:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 800154a:	3328      	adds	r3, #40	@ 0x28
 800154c:	443b      	add	r3, r7
 800154e:	22f2      	movs	r2, #242	@ 0xf2
 8001550:	f803 2c20 	strb.w	r2, [r3, #-32]
//		bytes=;

    break;
 8001554:	e05b      	b.n	800160e <UP_decodeData+0x14e>

    case ENGINES:
    	bufAux[indiceAux++]=ENGINES;
 8001556:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800155a:	1c5a      	adds	r2, r3, #1
 800155c:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8001560:	3328      	adds	r3, #40	@ 0x28
 8001562:	443b      	add	r3, r7
 8001564:	22f3      	movs	r2, #243	@ 0xf3
 8001566:	f803 2c20 	strb.w	r2, [r3, #-32]

    	casts.u8[0]=datosComLib->bufferRx[datosComLib->indexStart+3];
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689a      	ldr	r2, [r3, #8]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	785b      	ldrb	r3, [r3, #1]
 8001572:	3303      	adds	r3, #3
 8001574:	4413      	add	r3, r2
 8001576:	781a      	ldrb	r2, [r3, #0]
 8001578:	4b2e      	ldr	r3, [pc, #184]	@ (8001634 <UP_decodeData+0x174>)
 800157a:	701a      	strb	r2, [r3, #0]
    	casts.u8[1]=datosComLib->bufferRx[datosComLib->indexStart+4];
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	785b      	ldrb	r3, [r3, #1]
 8001584:	3304      	adds	r3, #4
 8001586:	4413      	add	r3, r2
 8001588:	781a      	ldrb	r2, [r3, #0]
 800158a:	4b2a      	ldr	r3, [pc, #168]	@ (8001634 <UP_decodeData+0x174>)
 800158c:	705a      	strb	r2, [r3, #1]
    	casts.u8[2]=datosComLib->bufferRx[datosComLib->indexStart+5];
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	785b      	ldrb	r3, [r3, #1]
 8001596:	3305      	adds	r3, #5
 8001598:	4413      	add	r3, r2
 800159a:	781a      	ldrb	r2, [r3, #0]
 800159c:	4b25      	ldr	r3, [pc, #148]	@ (8001634 <UP_decodeData+0x174>)
 800159e:	709a      	strb	r2, [r3, #2]
        casts.u8[3]=datosComLib->bufferRx[datosComLib->indexStart+6];
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	785b      	ldrb	r3, [r3, #1]
 80015a8:	3306      	adds	r3, #6
 80015aa:	4413      	add	r3, r2
 80015ac:	781a      	ldrb	r2, [r3, #0]
 80015ae:	4b21      	ldr	r3, [pc, #132]	@ (8001634 <UP_decodeData+0x174>)
 80015b0:	70da      	strb	r2, [r3, #3]
    	valuem1 = casts.i16[0]; //ver aca que pasa para recuperar el valor de la velocidad
 80015b2:	4b20      	ldr	r3, [pc, #128]	@ (8001634 <UP_decodeData+0x174>)
 80015b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80015b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001638 <UP_decodeData+0x178>)
 80015ba:	801a      	strh	r2, [r3, #0]
    	valuem2 = casts.i16[1];
 80015bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001634 <UP_decodeData+0x174>)
 80015be:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80015c2:	4b1e      	ldr	r3, [pc, #120]	@ (800163c <UP_decodeData+0x17c>)
 80015c4:	801a      	strh	r2, [r3, #0]

    break;
 80015c6:	e022      	b.n	800160e <UP_decodeData+0x14e>

    case MPUDATA:

    	bufAux[indiceAux++]=MPUDATA;
 80015c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80015cc:	1c5a      	adds	r2, r3, #1
 80015ce:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80015d2:	3328      	adds	r3, #40	@ 0x28
 80015d4:	443b      	add	r3, r7
 80015d6:	22f4      	movs	r2, #244	@ 0xf4
 80015d8:	f803 2c20 	strb.w	r2, [r3, #-32]
    break;
 80015dc:	e017      	b.n	800160e <UP_decodeData+0x14e>
    case ADCVALUES:

    	aPtrFunADC(&bufAux[0]);
 80015de:	4b18      	ldr	r3, [pc, #96]	@ (8001640 <UP_decodeData+0x180>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f107 0208 	add.w	r2, r7, #8
 80015e6:	4610      	mov	r0, r2
 80015e8:	4798      	blx	r3

    	bytes=0x10;
 80015ea:	2310      	movs	r3, #16
 80015ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    break;
 80015f0:	e00d      	b.n	800160e <UP_decodeData+0x14e>
    default:

        bufAux[indiceAux++]=0xFF;
 80015f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80015fc:	3328      	adds	r3, #40	@ 0x28
 80015fe:	443b      	add	r3, r7
 8001600:	22ff      	movs	r2, #255	@ 0xff
 8001602:	f803 2c20 	strb.w	r2, [r3, #-32]
        bytes=0x02;
 8001606:	2302      	movs	r3, #2
 8001608:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    break;
 800160c:	bf00      	nop
    }

    UP_sendInfo(datosComLib->bufferRx[datosComLib->indexStart+2],bufAux,bytes);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	785b      	ldrb	r3, [r3, #1]
 8001616:	3302      	adds	r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001620:	f107 0108 	add.w	r1, r7, #8
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fd8f 	bl	8001148 <UP_sendInfo>
}
 800162a:	bf00      	nop
 800162c:	3728      	adds	r7, #40	@ 0x28
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	2000036c 	.word	0x2000036c
 8001638:	20000370 	.word	0x20000370
 800163c:	20000372 	.word	0x20000372
 8001640:	2000037c 	.word	0x2000037c

08001644 <UP_datafromUSB>:

void UP_datafromUSB(uint8_t *buf, uint16_t length) {
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	807b      	strh	r3, [r7, #2]

  uint16_t i;

  for (i = 0; i < length; i++) {
 8001650:	2300      	movs	r3, #0
 8001652:	81fb      	strh	r3, [r7, #14]
 8001654:	e016      	b.n	8001684 <UP_datafromUSB+0x40>
	datosComLib->bufferRx[datosComLib->indexWriteRx] = buf[i];
 8001656:	89fb      	ldrh	r3, [r7, #14]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	441a      	add	r2, r3
 800165c:	4b0f      	ldr	r3, [pc, #60]	@ (800169c <UP_datafromUSB+0x58>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	490e      	ldr	r1, [pc, #56]	@ (800169c <UP_datafromUSB+0x58>)
 8001664:	6809      	ldr	r1, [r1, #0]
 8001666:	78c9      	ldrb	r1, [r1, #3]
 8001668:	b2c9      	uxtb	r1, r1
 800166a:	440b      	add	r3, r1
 800166c:	7812      	ldrb	r2, [r2, #0]
 800166e:	701a      	strb	r2, [r3, #0]
	datosComLib->indexWriteRx++;
 8001670:	4b0a      	ldr	r3, [pc, #40]	@ (800169c <UP_datafromUSB+0x58>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	78da      	ldrb	r2, [r3, #3]
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	3201      	adds	r2, #1
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < length; i++) {
 800167e:	89fb      	ldrh	r3, [r7, #14]
 8001680:	3301      	adds	r3, #1
 8001682:	81fb      	strh	r3, [r7, #14]
 8001684:	89fa      	ldrh	r2, [r7, #14]
 8001686:	887b      	ldrh	r3, [r7, #2]
 8001688:	429a      	cmp	r2, r3
 800168a:	d3e4      	bcc.n	8001656 <UP_datafromUSB+0x12>
  }
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	20000378 	.word	0x20000378

080016a0 <UP_attachData>:
	if(eng)
		return valuem1;
	else
		return valuem2;
}
void UP_attachData(void(*ptrGetADCValues)(uint8_t *buf)){
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	aPtrFunADC=ptrGetADCValues;
 80016a8:	4a04      	ldr	r2, [pc, #16]	@ (80016bc <UP_attachData+0x1c>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6013      	str	r3, [r2, #0]
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	2000037c 	.word	0x2000037c

080016c0 <HAL_ADC_ConvCpltCallback>:
void I2C_1_Abstract_Mem_Read_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	adcValues.newValue=1;
 80016c8:	4b04      	ldr	r3, [pc, #16]	@ (80016dc <HAL_ADC_ConvCpltCallback+0x1c>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	2000067c 	.word	0x2000067c

080016e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM11) {
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001718 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d104      	bne.n	80016fc <HAL_TIM_PeriodElapsedCallback+0x1c>
		IS10MS = TRUE;
 80016f2:	4a0a      	ldr	r2, [pc, #40]	@ (800171c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80016f4:	7813      	ldrb	r3, [r2, #0]
 80016f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016fa:	7013      	strb	r3, [r2, #0]
//	if (htim->Instance == TIM10) {
//		MPU6050_Read_All(&mpuValues);
//		mpuValues.DMAREADY=1;
//		SSD1306_DMAREADY(0);
//	}
	if(htim->Instance == TIM9){
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a07      	ldr	r2, [pc, #28]	@ (8001720 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d104      	bne.n	8001710 <HAL_TIM_PeriodElapsedCallback+0x30>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcValues.raw_Data, 8);
 8001706:	2208      	movs	r2, #8
 8001708:	4906      	ldr	r1, [pc, #24]	@ (8001724 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800170a:	4807      	ldr	r0, [pc, #28]	@ (8001728 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800170c:	f001 fa08 	bl	8002b20 <HAL_ADC_Start_DMA>
	}
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40014800 	.word	0x40014800
 800171c:	20000674 	.word	0x20000674
 8001720:	40014000 	.word	0x40014000
 8001724:	2000067c 	.word	0x2000067c
 8001728:	20000384 	.word	0x20000384

0800172c <task10ms>:
//			}
//		}
//	}
//}

void task10ms(){
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0

	static uint8_t ticker=0;
//	uint16_t buffaux[8];

	if(ticker%10==0){
 8001730:	4b10      	ldr	r3, [pc, #64]	@ (8001774 <task10ms+0x48>)
 8001732:	781a      	ldrb	r2, [r3, #0]
 8001734:	4b10      	ldr	r3, [pc, #64]	@ (8001778 <task10ms+0x4c>)
 8001736:	fba3 1302 	umull	r1, r3, r3, r2
 800173a:	08d9      	lsrs	r1, r3, #3
 800173c:	460b      	mov	r3, r1
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	440b      	add	r3, r1
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	d104      	bne.n	8001756 <task10ms+0x2a>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800174c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001750:	480a      	ldr	r0, [pc, #40]	@ (800177c <task10ms+0x50>)
 8001752:	f002 fc00 	bl	8003f56 <HAL_GPIO_TogglePin>
//		UP_sendInfo(ADCVALUES,(uint8_t*)&buffaux, 17);
//
//		SSD1306_Task();
//		SSD1306_RefreshReady();
	}
	if(ticker>250){
 8001756:	4b07      	ldr	r3, [pc, #28]	@ (8001774 <task10ms+0x48>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2bfa      	cmp	r3, #250	@ 0xfa
 800175c:	d902      	bls.n	8001764 <task10ms+0x38>
//		if(!SISINIT){
//			SSD1306_Clear();
//		}
//		SISINIT=TRUE;
		ticker=0;
 800175e:	4b05      	ldr	r3, [pc, #20]	@ (8001774 <task10ms+0x48>)
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
	}
	ticker++;
 8001764:	4b03      	ldr	r3, [pc, #12]	@ (8001774 <task10ms+0x48>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	3301      	adds	r3, #1
 800176a:	b2da      	uxtb	r2, r3
 800176c:	4b01      	ldr	r3, [pc, #4]	@ (8001774 <task10ms+0x48>)
 800176e:	701a      	strb	r2, [r3, #0]
}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}
 8001774:	200006c0 	.word	0x200006c0
 8001778:	cccccccd 	.word	0xcccccccd
 800177c:	40020800 	.word	0x40020800

08001780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001784:	f000 ffe2 	bl	800274c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001788:	f000 f85a 	bl	8001840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800178c:	f000 fae4 	bl	8001d58 <MX_GPIO_Init>
  MX_DMA_Init();
 8001790:	f000 faa4 	bl	8001cdc <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8001794:	f00a fbd2 	bl	800bf3c <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8001798:	f000 f99c 	bl	8001ad4 <MX_TIM3_Init>
  MX_TIM11_Init();
 800179c:	f000 fa7a 	bl	8001c94 <MX_TIM11_Init>
  MX_ADC1_Init();
 80017a0:	f000 f8b6 	bl	8001910 <MX_ADC1_Init>
  MX_I2C1_Init();
 80017a4:	f000 f968 	bl	8001a78 <MX_I2C1_Init>
  MX_TIM10_Init();
 80017a8:	f000 fa50 	bl	8001c4c <MX_TIM10_Init>
  MX_TIM9_Init();
 80017ac:	f000 fa14 	bl	8001bd8 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80017b0:	481a      	ldr	r0, [pc, #104]	@ (800181c <main+0x9c>)
 80017b2:	f006 f923 	bl	80079fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 80017b6:	481a      	ldr	r0, [pc, #104]	@ (8001820 <main+0xa0>)
 80017b8:	f006 f920 	bl	80079fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 80017bc:	4819      	ldr	r0, [pc, #100]	@ (8001824 <main+0xa4>)
 80017be:	f006 f91d 	bl	80079fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim9);
 80017c2:	4819      	ldr	r0, [pc, #100]	@ (8001828 <main+0xa8>)
 80017c4:	f006 f91a 	bl	80079fc <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80017c8:	2104      	movs	r1, #4
 80017ca:	4814      	ldr	r0, [pc, #80]	@ (800181c <main+0x9c>)
 80017cc:	f006 f9d2 	bl	8007b74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80017d0:	2100      	movs	r1, #0
 80017d2:	4812      	ldr	r0, [pc, #72]	@ (800181c <main+0x9c>)
 80017d4:	f006 f9ce 	bl	8007b74 <HAL_TIM_PWM_Start>
//  Display_Set_I2C_Master_Transmit(&I2C_DMA_Transmit, &I2C_1_Abstract_Master_Transmit_Blocking);
//  MPU6050_I2C_Blocking(&I2C_RBlocking,&I2C_1_Abstract_Mem_Write_Blocking);
//  MPU6050_NonBlocking_DMA(&I2C_DMA_Transmit,&I2C_DMA_Recive);
//  SSD1306_Init();
//  MPU6050_Init(&mpuValues);
  CDC_AttachRxData(&UP_datafromUSB);
 80017d8:	4814      	ldr	r0, [pc, #80]	@ (800182c <main+0xac>)
 80017da:	f00a fd03 	bl	800c1e4 <CDC_AttachRxData>
  myFlags.allFlags=0;
 80017de:	4b14      	ldr	r3, [pc, #80]	@ (8001830 <main+0xb0>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
  UP_initprotocol(&datosComSerie,(uint8_t)RINGBUFFER);
 80017e4:	2100      	movs	r1, #0
 80017e6:	4813      	ldr	r0, [pc, #76]	@ (8001834 <main+0xb4>)
 80017e8:	f7ff fc8e 	bl	8001108 <UP_initprotocol>
//  en_InitENG(&motorL, (uint16_t)htim3.Instance->ARR);
//  en_InitENG(&motorR, (uint16_t)htim3.Instance->ARR);
  UP_attachData(&Get_ADCValues);
 80017ec:	4812      	ldr	r0, [pc, #72]	@ (8001838 <main+0xb8>)
 80017ee:	f7ff ff57 	bl	80016a0 <UP_attachData>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(IS10MS){
 80017f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001830 <main+0xb0>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d006      	beq.n	800180e <main+0x8e>
		 task10ms();
 8001800:	f7ff ff94 	bl	800172c <task10ms>
		 IS10MS=FALSE;
 8001804:	4a0a      	ldr	r2, [pc, #40]	@ (8001830 <main+0xb0>)
 8001806:	7813      	ldrb	r3, [r2, #0]
 8001808:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800180c:	7013      	strb	r3, [r2, #0]
//		 Engines_task();
	  }
//	MPU6050_MAF(&mpuValues);
	UP_comunicationsTask(&datosComSerie);
 800180e:	4809      	ldr	r0, [pc, #36]	@ (8001834 <main+0xb4>)
 8001810:	f000 fb2e 	bl	8001e70 <UP_comunicationsTask>
	ADC_Filter(&adcValues);
 8001814:	4809      	ldr	r0, [pc, #36]	@ (800183c <main+0xbc>)
 8001816:	f7ff fc0b 	bl	8001030 <ADC_Filter>
	  if(IS10MS){
 800181a:	e7ea      	b.n	80017f2 <main+0x72>
 800181c:	20000540 	.word	0x20000540
 8001820:	20000618 	.word	0x20000618
 8001824:	200005d0 	.word	0x200005d0
 8001828:	20000588 	.word	0x20000588
 800182c:	08001645 	.word	0x08001645
 8001830:	20000674 	.word	0x20000674
 8001834:	20000660 	.word	0x20000660
 8001838:	08001f05 	.word	0x08001f05
 800183c:	2000067c 	.word	0x2000067c

08001840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b094      	sub	sp, #80	@ 0x50
 8001844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001846:	f107 0320 	add.w	r3, r7, #32
 800184a:	2230      	movs	r2, #48	@ 0x30
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f00c f933 	bl	800daba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	4b27      	ldr	r3, [pc, #156]	@ (8001908 <SystemClock_Config+0xc8>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186c:	4a26      	ldr	r2, [pc, #152]	@ (8001908 <SystemClock_Config+0xc8>)
 800186e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001872:	6413      	str	r3, [r2, #64]	@ 0x40
 8001874:	4b24      	ldr	r3, [pc, #144]	@ (8001908 <SystemClock_Config+0xc8>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001880:	2300      	movs	r3, #0
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	4b21      	ldr	r3, [pc, #132]	@ (800190c <SystemClock_Config+0xcc>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a20      	ldr	r2, [pc, #128]	@ (800190c <SystemClock_Config+0xcc>)
 800188a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	4b1e      	ldr	r3, [pc, #120]	@ (800190c <SystemClock_Config+0xcc>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800189c:	2301      	movs	r3, #1
 800189e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a6:	2302      	movs	r3, #2
 80018a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80018b0:	2319      	movs	r3, #25
 80018b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80018b4:	23c0      	movs	r3, #192	@ 0xc0
 80018b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018b8:	2302      	movs	r3, #2
 80018ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018bc:	2304      	movs	r3, #4
 80018be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c0:	f107 0320 	add.w	r3, r7, #32
 80018c4:	4618      	mov	r0, r3
 80018c6:	f005 fc05 	bl	80070d4 <HAL_RCC_OscConfig>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018d0:	f000 fb4e 	bl	8001f70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d4:	230f      	movs	r3, #15
 80018d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d8:	2302      	movs	r3, #2
 80018da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018ea:	f107 030c 	add.w	r3, r7, #12
 80018ee:	2103      	movs	r1, #3
 80018f0:	4618      	mov	r0, r3
 80018f2:	f005 fe67 	bl	80075c4 <HAL_RCC_ClockConfig>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80018fc:	f000 fb38 	bl	8001f70 <Error_Handler>
  }
}
 8001900:	bf00      	nop
 8001902:	3750      	adds	r7, #80	@ 0x50
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40023800 	.word	0x40023800
 800190c:	40007000 	.word	0x40007000

08001910 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001916:	463b      	mov	r3, r7
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001922:	4b52      	ldr	r3, [pc, #328]	@ (8001a6c <MX_ADC1_Init+0x15c>)
 8001924:	4a52      	ldr	r2, [pc, #328]	@ (8001a70 <MX_ADC1_Init+0x160>)
 8001926:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001928:	4b50      	ldr	r3, [pc, #320]	@ (8001a6c <MX_ADC1_Init+0x15c>)
 800192a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800192e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001930:	4b4e      	ldr	r3, [pc, #312]	@ (8001a6c <MX_ADC1_Init+0x15c>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001936:	4b4d      	ldr	r3, [pc, #308]	@ (8001a6c <MX_ADC1_Init+0x15c>)
 8001938:	2201      	movs	r2, #1
 800193a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800193c:	4b4b      	ldr	r3, [pc, #300]	@ (8001a6c <MX_ADC1_Init+0x15c>)
 800193e:	2200      	movs	r2, #0
 8001940:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001942:	4b4a      	ldr	r3, [pc, #296]	@ (8001a6c <MX_ADC1_Init+0x15c>)
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800194a:	4b48      	ldr	r3, [pc, #288]	@ (8001a6c <MX_ADC1_Init+0x15c>)
 800194c:	2200      	movs	r2, #0
 800194e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001950:	4b46      	ldr	r3, [pc, #280]	@ (8001a6c <MX_ADC1_Init+0x15c>)
 8001952:	4a48      	ldr	r2, [pc, #288]	@ (8001a74 <MX_ADC1_Init+0x164>)
 8001954:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001956:	4b45      	ldr	r3, [pc, #276]	@ (8001a6c <MX_ADC1_Init+0x15c>)
 8001958:	2200      	movs	r2, #0
 800195a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 800195c:	4b43      	ldr	r3, [pc, #268]	@ (8001a6c <MX_ADC1_Init+0x15c>)
 800195e:	2208      	movs	r2, #8
 8001960:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001962:	4b42      	ldr	r3, [pc, #264]	@ (8001a6c <MX_ADC1_Init+0x15c>)
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800196a:	4b40      	ldr	r3, [pc, #256]	@ (8001a6c <MX_ADC1_Init+0x15c>)
 800196c:	2201      	movs	r2, #1
 800196e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001970:	483e      	ldr	r0, [pc, #248]	@ (8001a6c <MX_ADC1_Init+0x15c>)
 8001972:	f000 ff81 	bl	8002878 <HAL_ADC_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800197c:	f000 faf8 	bl	8001f70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001980:	2301      	movs	r3, #1
 8001982:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001984:	2301      	movs	r3, #1
 8001986:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001988:	2303      	movs	r3, #3
 800198a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800198c:	463b      	mov	r3, r7
 800198e:	4619      	mov	r1, r3
 8001990:	4836      	ldr	r0, [pc, #216]	@ (8001a6c <MX_ADC1_Init+0x15c>)
 8001992:	f001 f9d7 	bl	8002d44 <HAL_ADC_ConfigChannel>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800199c:	f000 fae8 	bl	8001f70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80019a0:	2302      	movs	r3, #2
 80019a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80019a4:	2302      	movs	r3, #2
 80019a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019a8:	463b      	mov	r3, r7
 80019aa:	4619      	mov	r1, r3
 80019ac:	482f      	ldr	r0, [pc, #188]	@ (8001a6c <MX_ADC1_Init+0x15c>)
 80019ae:	f001 f9c9 	bl	8002d44 <HAL_ADC_ConfigChannel>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80019b8:	f000 fada 	bl	8001f70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80019bc:	2303      	movs	r3, #3
 80019be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80019c0:	2303      	movs	r3, #3
 80019c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019c4:	463b      	mov	r3, r7
 80019c6:	4619      	mov	r1, r3
 80019c8:	4828      	ldr	r0, [pc, #160]	@ (8001a6c <MX_ADC1_Init+0x15c>)
 80019ca:	f001 f9bb 	bl	8002d44 <HAL_ADC_ConfigChannel>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80019d4:	f000 facc 	bl	8001f70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80019d8:	2304      	movs	r3, #4
 80019da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80019dc:	2304      	movs	r3, #4
 80019de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019e0:	463b      	mov	r3, r7
 80019e2:	4619      	mov	r1, r3
 80019e4:	4821      	ldr	r0, [pc, #132]	@ (8001a6c <MX_ADC1_Init+0x15c>)
 80019e6:	f001 f9ad 	bl	8002d44 <HAL_ADC_ConfigChannel>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80019f0:	f000 fabe 	bl	8001f70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80019f4:	2305      	movs	r3, #5
 80019f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80019f8:	2305      	movs	r3, #5
 80019fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019fc:	463b      	mov	r3, r7
 80019fe:	4619      	mov	r1, r3
 8001a00:	481a      	ldr	r0, [pc, #104]	@ (8001a6c <MX_ADC1_Init+0x15c>)
 8001a02:	f001 f99f 	bl	8002d44 <HAL_ADC_ConfigChannel>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001a0c:	f000 fab0 	bl	8001f70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001a10:	2306      	movs	r3, #6
 8001a12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001a14:	2306      	movs	r3, #6
 8001a16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a18:	463b      	mov	r3, r7
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4813      	ldr	r0, [pc, #76]	@ (8001a6c <MX_ADC1_Init+0x15c>)
 8001a1e:	f001 f991 	bl	8002d44 <HAL_ADC_ConfigChannel>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001a28:	f000 faa2 	bl	8001f70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001a2c:	2307      	movs	r3, #7
 8001a2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001a30:	2307      	movs	r3, #7
 8001a32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a34:	463b      	mov	r3, r7
 8001a36:	4619      	mov	r1, r3
 8001a38:	480c      	ldr	r0, [pc, #48]	@ (8001a6c <MX_ADC1_Init+0x15c>)
 8001a3a:	f001 f983 	bl	8002d44 <HAL_ADC_ConfigChannel>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001a44:	f000 fa94 	bl	8001f70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001a48:	2308      	movs	r3, #8
 8001a4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001a4c:	2308      	movs	r3, #8
 8001a4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a50:	463b      	mov	r3, r7
 8001a52:	4619      	mov	r1, r3
 8001a54:	4805      	ldr	r0, [pc, #20]	@ (8001a6c <MX_ADC1_Init+0x15c>)
 8001a56:	f001 f975 	bl	8002d44 <HAL_ADC_ConfigChannel>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001a60:	f000 fa86 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000384 	.word	0x20000384
 8001a70:	40012000 	.word	0x40012000
 8001a74:	0f000001 	.word	0x0f000001

08001a78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a7c:	4b12      	ldr	r3, [pc, #72]	@ (8001ac8 <MX_I2C1_Init+0x50>)
 8001a7e:	4a13      	ldr	r2, [pc, #76]	@ (8001acc <MX_I2C1_Init+0x54>)
 8001a80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001a82:	4b11      	ldr	r3, [pc, #68]	@ (8001ac8 <MX_I2C1_Init+0x50>)
 8001a84:	4a12      	ldr	r2, [pc, #72]	@ (8001ad0 <MX_I2C1_Init+0x58>)
 8001a86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a88:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac8 <MX_I2C1_Init+0x50>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac8 <MX_I2C1_Init+0x50>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a94:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac8 <MX_I2C1_Init+0x50>)
 8001a96:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac8 <MX_I2C1_Init+0x50>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001aa2:	4b09      	ldr	r3, [pc, #36]	@ (8001ac8 <MX_I2C1_Init+0x50>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aa8:	4b07      	ldr	r3, [pc, #28]	@ (8001ac8 <MX_I2C1_Init+0x50>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aae:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <MX_I2C1_Init+0x50>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ab4:	4804      	ldr	r0, [pc, #16]	@ (8001ac8 <MX_I2C1_Init+0x50>)
 8001ab6:	f002 fa69 	bl	8003f8c <HAL_I2C_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ac0:	f000 fa56 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	2000042c 	.word	0x2000042c
 8001acc:	40005400 	.word	0x40005400
 8001ad0:	00061a80 	.word	0x00061a80

08001ad4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08e      	sub	sp, #56	@ 0x38
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ada:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae8:	f107 0320 	add.w	r3, r7, #32
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
 8001b00:	615a      	str	r2, [r3, #20]
 8001b02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b04:	4b32      	ldr	r3, [pc, #200]	@ (8001bd0 <MX_TIM3_Init+0xfc>)
 8001b06:	4a33      	ldr	r2, [pc, #204]	@ (8001bd4 <MX_TIM3_Init+0x100>)
 8001b08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8001b0a:	4b31      	ldr	r3, [pc, #196]	@ (8001bd0 <MX_TIM3_Init+0xfc>)
 8001b0c:	220f      	movs	r2, #15
 8001b0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b10:	4b2f      	ldr	r3, [pc, #188]	@ (8001bd0 <MX_TIM3_Init+0xfc>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8001b16:	4b2e      	ldr	r3, [pc, #184]	@ (8001bd0 <MX_TIM3_Init+0xfc>)
 8001b18:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001b1c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b1e:	4b2c      	ldr	r3, [pc, #176]	@ (8001bd0 <MX_TIM3_Init+0xfc>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b24:	4b2a      	ldr	r3, [pc, #168]	@ (8001bd0 <MX_TIM3_Init+0xfc>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b2a:	4829      	ldr	r0, [pc, #164]	@ (8001bd0 <MX_TIM3_Init+0xfc>)
 8001b2c:	f005 ff16 	bl	800795c <HAL_TIM_Base_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001b36:	f000 fa1b 	bl	8001f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b40:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b44:	4619      	mov	r1, r3
 8001b46:	4822      	ldr	r0, [pc, #136]	@ (8001bd0 <MX_TIM3_Init+0xfc>)
 8001b48:	f006 fa76 	bl	8008038 <HAL_TIM_ConfigClockSource>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001b52:	f000 fa0d 	bl	8001f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b56:	481e      	ldr	r0, [pc, #120]	@ (8001bd0 <MX_TIM3_Init+0xfc>)
 8001b58:	f005 ffb2 	bl	8007ac0 <HAL_TIM_PWM_Init>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001b62:	f000 fa05 	bl	8001f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b66:	2300      	movs	r3, #0
 8001b68:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b6e:	f107 0320 	add.w	r3, r7, #32
 8001b72:	4619      	mov	r1, r3
 8001b74:	4816      	ldr	r0, [pc, #88]	@ (8001bd0 <MX_TIM3_Init+0xfc>)
 8001b76:	f006 fe21 	bl	80087bc <HAL_TIMEx_MasterConfigSynchronization>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001b80:	f000 f9f6 	bl	8001f70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b84:	2360      	movs	r3, #96	@ 0x60
 8001b86:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	2200      	movs	r2, #0
 8001b98:	4619      	mov	r1, r3
 8001b9a:	480d      	ldr	r0, [pc, #52]	@ (8001bd0 <MX_TIM3_Init+0xfc>)
 8001b9c:	f006 f98a 	bl	8007eb4 <HAL_TIM_PWM_ConfigChannel>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001ba6:	f000 f9e3 	bl	8001f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	2204      	movs	r2, #4
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4807      	ldr	r0, [pc, #28]	@ (8001bd0 <MX_TIM3_Init+0xfc>)
 8001bb2:	f006 f97f 	bl	8007eb4 <HAL_TIM_PWM_ConfigChannel>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001bbc:	f000 f9d8 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001bc0:	4803      	ldr	r0, [pc, #12]	@ (8001bd0 <MX_TIM3_Init+0xfc>)
 8001bc2:	f000 fbe1 	bl	8002388 <HAL_TIM_MspPostInit>

}
 8001bc6:	bf00      	nop
 8001bc8:	3738      	adds	r7, #56	@ 0x38
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000540 	.word	0x20000540
 8001bd4:	40000400 	.word	0x40000400

08001bd8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bde:	463b      	mov	r3, r7
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001bea:	4b16      	ldr	r3, [pc, #88]	@ (8001c44 <MX_TIM9_Init+0x6c>)
 8001bec:	4a16      	ldr	r2, [pc, #88]	@ (8001c48 <MX_TIM9_Init+0x70>)
 8001bee:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001bf0:	4b14      	ldr	r3, [pc, #80]	@ (8001c44 <MX_TIM9_Init+0x6c>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf6:	4b13      	ldr	r3, [pc, #76]	@ (8001c44 <MX_TIM9_Init+0x6c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 23999;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <MX_TIM9_Init+0x6c>)
 8001bfe:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001c02:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c04:	4b0f      	ldr	r3, [pc, #60]	@ (8001c44 <MX_TIM9_Init+0x6c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c44 <MX_TIM9_Init+0x6c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001c10:	480c      	ldr	r0, [pc, #48]	@ (8001c44 <MX_TIM9_Init+0x6c>)
 8001c12:	f005 fea3 	bl	800795c <HAL_TIM_Base_Init>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001c1c:	f000 f9a8 	bl	8001f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c24:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001c26:	463b      	mov	r3, r7
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4806      	ldr	r0, [pc, #24]	@ (8001c44 <MX_TIM9_Init+0x6c>)
 8001c2c:	f006 fa04 	bl	8008038 <HAL_TIM_ConfigClockSource>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001c36:	f000 f99b 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000588 	.word	0x20000588
 8001c48:	40014000 	.word	0x40014000

08001c4c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001c50:	4b0e      	ldr	r3, [pc, #56]	@ (8001c8c <MX_TIM10_Init+0x40>)
 8001c52:	4a0f      	ldr	r2, [pc, #60]	@ (8001c90 <MX_TIM10_Init+0x44>)
 8001c54:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 47;
 8001c56:	4b0d      	ldr	r3, [pc, #52]	@ (8001c8c <MX_TIM10_Init+0x40>)
 8001c58:	222f      	movs	r2, #47	@ 0x2f
 8001c5a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c8c <MX_TIM10_Init+0x40>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8001c62:	4b0a      	ldr	r3, [pc, #40]	@ (8001c8c <MX_TIM10_Init+0x40>)
 8001c64:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001c68:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c6a:	4b08      	ldr	r3, [pc, #32]	@ (8001c8c <MX_TIM10_Init+0x40>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c70:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <MX_TIM10_Init+0x40>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001c76:	4805      	ldr	r0, [pc, #20]	@ (8001c8c <MX_TIM10_Init+0x40>)
 8001c78:	f005 fe70 	bl	800795c <HAL_TIM_Base_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001c82:	f000 f975 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200005d0 	.word	0x200005d0
 8001c90:	40014400 	.word	0x40014400

08001c94 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001c98:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd4 <MX_TIM11_Init+0x40>)
 8001c9a:	4a0f      	ldr	r2, [pc, #60]	@ (8001cd8 <MX_TIM11_Init+0x44>)
 8001c9c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 95;
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd4 <MX_TIM11_Init+0x40>)
 8001ca0:	225f      	movs	r2, #95	@ 0x5f
 8001ca2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd4 <MX_TIM11_Init+0x40>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 9999;
 8001caa:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd4 <MX_TIM11_Init+0x40>)
 8001cac:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001cb0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb2:	4b08      	ldr	r3, [pc, #32]	@ (8001cd4 <MX_TIM11_Init+0x40>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb8:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <MX_TIM11_Init+0x40>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001cbe:	4805      	ldr	r0, [pc, #20]	@ (8001cd4 <MX_TIM11_Init+0x40>)
 8001cc0:	f005 fe4c 	bl	800795c <HAL_TIM_Base_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001cca:	f000 f951 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000618 	.word	0x20000618
 8001cd8:	40014800 	.word	0x40014800

08001cdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	607b      	str	r3, [r7, #4]
 8001ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d54 <MX_DMA_Init+0x78>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	4a1a      	ldr	r2, [pc, #104]	@ (8001d54 <MX_DMA_Init+0x78>)
 8001cec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf2:	4b18      	ldr	r3, [pc, #96]	@ (8001d54 <MX_DMA_Init+0x78>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cfa:	607b      	str	r3, [r7, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	603b      	str	r3, [r7, #0]
 8001d02:	4b14      	ldr	r3, [pc, #80]	@ (8001d54 <MX_DMA_Init+0x78>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d06:	4a13      	ldr	r2, [pc, #76]	@ (8001d54 <MX_DMA_Init+0x78>)
 8001d08:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0e:	4b11      	ldr	r3, [pc, #68]	@ (8001d54 <MX_DMA_Init+0x78>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d16:	603b      	str	r3, [r7, #0]
 8001d18:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	200b      	movs	r0, #11
 8001d20:	f001 fba5 	bl	800346e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001d24:	200b      	movs	r0, #11
 8001d26:	f001 fbbe 	bl	80034a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	200c      	movs	r0, #12
 8001d30:	f001 fb9d 	bl	800346e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001d34:	200c      	movs	r0, #12
 8001d36:	f001 fbb6 	bl	80034a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	2038      	movs	r0, #56	@ 0x38
 8001d40:	f001 fb95 	bl	800346e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001d44:	2038      	movs	r0, #56	@ 0x38
 8001d46:	f001 fbae 	bl	80034a6 <HAL_NVIC_EnableIRQ>

}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40023800 	.word	0x40023800

08001d58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08a      	sub	sp, #40	@ 0x28
 8001d5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5e:	f107 0314 	add.w	r3, r7, #20
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
 8001d6c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	4b3b      	ldr	r3, [pc, #236]	@ (8001e60 <MX_GPIO_Init+0x108>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	4a3a      	ldr	r2, [pc, #232]	@ (8001e60 <MX_GPIO_Init+0x108>)
 8001d78:	f043 0304 	orr.w	r3, r3, #4
 8001d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7e:	4b38      	ldr	r3, [pc, #224]	@ (8001e60 <MX_GPIO_Init+0x108>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	4b34      	ldr	r3, [pc, #208]	@ (8001e60 <MX_GPIO_Init+0x108>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d92:	4a33      	ldr	r2, [pc, #204]	@ (8001e60 <MX_GPIO_Init+0x108>)
 8001d94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d9a:	4b31      	ldr	r3, [pc, #196]	@ (8001e60 <MX_GPIO_Init+0x108>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	4b2d      	ldr	r3, [pc, #180]	@ (8001e60 <MX_GPIO_Init+0x108>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dae:	4a2c      	ldr	r2, [pc, #176]	@ (8001e60 <MX_GPIO_Init+0x108>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e60 <MX_GPIO_Init+0x108>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	607b      	str	r3, [r7, #4]
 8001dc6:	4b26      	ldr	r3, [pc, #152]	@ (8001e60 <MX_GPIO_Init+0x108>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dca:	4a25      	ldr	r2, [pc, #148]	@ (8001e60 <MX_GPIO_Init+0x108>)
 8001dcc:	f043 0302 	orr.w	r3, r3, #2
 8001dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd2:	4b23      	ldr	r3, [pc, #140]	@ (8001e60 <MX_GPIO_Init+0x108>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	607b      	str	r3, [r7, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001dde:	2200      	movs	r2, #0
 8001de0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001de4:	481f      	ldr	r0, [pc, #124]	@ (8001e64 <MX_GPIO_Init+0x10c>)
 8001de6:	f002 f89d 	bl	8003f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Out2_2_Pin|Out2_1_Pin|Out1_2_Pin, GPIO_PIN_RESET);
 8001dea:	2200      	movs	r2, #0
 8001dec:	f44f 4106 	mov.w	r1, #34304	@ 0x8600
 8001df0:	481d      	ldr	r0, [pc, #116]	@ (8001e68 <MX_GPIO_Init+0x110>)
 8001df2:	f002 f897 	bl	8003f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Out1_1_GPIO_Port, Out1_1_Pin, GPIO_PIN_RESET);
 8001df6:	2200      	movs	r2, #0
 8001df8:	2108      	movs	r1, #8
 8001dfa:	481c      	ldr	r0, [pc, #112]	@ (8001e6c <MX_GPIO_Init+0x114>)
 8001dfc:	f002 f892 	bl	8003f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001e00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e06:	2301      	movs	r3, #1
 8001e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001e12:	f107 0314 	add.w	r3, r7, #20
 8001e16:	4619      	mov	r1, r3
 8001e18:	4812      	ldr	r0, [pc, #72]	@ (8001e64 <MX_GPIO_Init+0x10c>)
 8001e1a:	f001 feff 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : Out2_2_Pin Out2_1_Pin Out1_2_Pin */
  GPIO_InitStruct.Pin = Out2_2_Pin|Out2_1_Pin|Out1_2_Pin;
 8001e1e:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 8001e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e24:	2301      	movs	r3, #1
 8001e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	4619      	mov	r1, r3
 8001e36:	480c      	ldr	r0, [pc, #48]	@ (8001e68 <MX_GPIO_Init+0x110>)
 8001e38:	f001 fef0 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : Out1_1_Pin */
  GPIO_InitStruct.Pin = Out1_1_Pin;
 8001e3c:	2308      	movs	r3, #8
 8001e3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e40:	2301      	movs	r3, #1
 8001e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Out1_1_GPIO_Port, &GPIO_InitStruct);
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	4619      	mov	r1, r3
 8001e52:	4806      	ldr	r0, [pc, #24]	@ (8001e6c <MX_GPIO_Init+0x114>)
 8001e54:	f001 fee2 	bl	8003c1c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001e58:	bf00      	nop
 8001e5a:	3728      	adds	r7, #40	@ 0x28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40020800 	.word	0x40020800
 8001e68:	40020000 	.word	0x40020000
 8001e6c:	40020400 	.word	0x40020400

08001e70 <UP_comunicationsTask>:

/* USER CODE BEGIN 4 */
void UP_comunicationsTask(_sDato *datosCom){
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]

	if(datosCom->indexReadRx!=datosCom->indexWriteRx ){
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	791a      	ldrb	r2, [r3, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	78db      	ldrb	r3, [r3, #3]
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d007      	beq.n	8001e96 <UP_comunicationsTask+0x26>
		UP_decodeHeader(datosCom);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff fa20 	bl	80012cc <UP_decodeHeader>
		datosCom->indexReadRx=datosCom->indexWriteRx;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	78db      	ldrb	r3, [r3, #3]
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	711a      	strb	r2, [r3, #4]
	}

	if(datosCom->indexReadTx!=datosCom->indexWriteTx ){
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	799a      	ldrb	r2, [r3, #6]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	795b      	ldrb	r3, [r3, #5]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d02b      	beq.n	8001efa <UP_comunicationsTask+0x8a>

		if(datosCom->indexWriteTx > datosCom->indexReadTx){
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	795a      	ldrb	r2, [r3, #5]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	799b      	ldrb	r3, [r3, #6]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d908      	bls.n	8001ec0 <UP_comunicationsTask+0x50>
				datosCom->bytesTosend = datosCom->indexWriteTx - datosCom->indexReadTx;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	795a      	ldrb	r2, [r3, #5]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	799b      	ldrb	r3, [r3, #6]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	741a      	strb	r2, [r3, #16]
 8001ebe:	e006      	b.n	8001ece <UP_comunicationsTask+0x5e>
		    }else{
		    	datosCom->bytesTosend =  sizeof(datosCom->bufferRx) - datosCom->indexReadTx;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	799b      	ldrb	r3, [r3, #6]
 8001ec4:	f1c3 0304 	rsb	r3, r3, #4
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	741a      	strb	r2, [r3, #16]
		    }
		    if(CDC_Transmit_FS(&datosCom->bufferTx[datosCom->indexReadTx], datosCom->bytesTosend) == USBD_OK){
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	7992      	ldrb	r2, [r2, #6]
 8001ed6:	441a      	add	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	7c1b      	ldrb	r3, [r3, #16]
 8001edc:	4619      	mov	r1, r3
 8001ede:	4610      	mov	r0, r2
 8001ee0:	f00a f948 	bl	800c174 <CDC_Transmit_FS>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d107      	bne.n	8001efa <UP_comunicationsTask+0x8a>
		    	datosCom->indexReadTx += datosCom->bytesTosend;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	799a      	ldrb	r2, [r3, #6]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	7c1b      	ldrb	r3, [r3, #16]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	719a      	strb	r2, [r3, #6]
		    }
	}
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <Get_ADCValues>:
	HAL_I2C_Mem_Read(&hi2c1, DevAddress, MemAddress, MemAddSize, pData, Size,1000);
	return 1;

}

void Get_ADCValues(uint8_t *buf){
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]

	uint8_t j=0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i=0;i<7;i++){
 8001f10:	2300      	movs	r3, #0
 8001f12:	73bb      	strb	r3, [r7, #14]
 8001f14:	e01e      	b.n	8001f54 <Get_ADCValues+0x50>
		casts1.i16[0]=adcValues.filteredData[i];
 8001f16:	7bbb      	ldrb	r3, [r7, #14]
 8001f18:	4a13      	ldr	r2, [pc, #76]	@ (8001f68 <Get_ADCValues+0x64>)
 8001f1a:	3308      	adds	r3, #8
 8001f1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f20:	b21a      	sxth	r2, r3
 8001f22:	4b12      	ldr	r3, [pc, #72]	@ (8001f6c <Get_ADCValues+0x68>)
 8001f24:	801a      	strh	r2, [r3, #0]
		buf[j*2]=casts1.u8[0];
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4413      	add	r3, r2
 8001f30:	4a0e      	ldr	r2, [pc, #56]	@ (8001f6c <Get_ADCValues+0x68>)
 8001f32:	7812      	ldrb	r2, [r2, #0]
 8001f34:	701a      	strb	r2, [r3, #0]
		buf[1+j*2]=casts1.u8[1];
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	4a0a      	ldr	r2, [pc, #40]	@ (8001f6c <Get_ADCValues+0x68>)
 8001f44:	7852      	ldrb	r2, [r2, #1]
 8001f46:	701a      	strb	r2, [r3, #0]
		j++;
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=0;i<7;i++){
 8001f4e:	7bbb      	ldrb	r3, [r7, #14]
 8001f50:	3301      	adds	r3, #1
 8001f52:	73bb      	strb	r3, [r7, #14]
 8001f54:	7bbb      	ldrb	r3, [r7, #14]
 8001f56:	2b06      	cmp	r3, #6
 8001f58:	d9dd      	bls.n	8001f16 <Get_ADCValues+0x12>
	}

}
 8001f5a:	bf00      	nop
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	2000067c 	.word	0x2000067c
 8001f6c:	20000678 	.word	0x20000678

08001f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f74:	b672      	cpsid	i
}
 8001f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f78:	bf00      	nop
 8001f7a:	e7fd      	b.n	8001f78 <Error_Handler+0x8>

08001f7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	607b      	str	r3, [r7, #4]
 8001f86:	4b13      	ldr	r3, [pc, #76]	@ (8001fd4 <HAL_MspInit+0x58>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8a:	4a12      	ldr	r2, [pc, #72]	@ (8001fd4 <HAL_MspInit+0x58>)
 8001f8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f92:	4b10      	ldr	r3, [pc, #64]	@ (8001fd4 <HAL_MspInit+0x58>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f9a:	607b      	str	r3, [r7, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	603b      	str	r3, [r7, #0]
 8001fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd4 <HAL_MspInit+0x58>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa6:	4a0b      	ldr	r2, [pc, #44]	@ (8001fd4 <HAL_MspInit+0x58>)
 8001fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fae:	4b09      	ldr	r3, [pc, #36]	@ (8001fd4 <HAL_MspInit+0x58>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb6:	603b      	str	r3, [r7, #0]
 8001fb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	2051      	movs	r0, #81	@ 0x51
 8001fc0:	f001 fa55 	bl	800346e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8001fc4:	2051      	movs	r0, #81	@ 0x51
 8001fc6:	f001 fa6e 	bl	80034a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023800 	.word	0x40023800

08001fd8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	@ 0x28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a3f      	ldr	r2, [pc, #252]	@ (80020f4 <HAL_ADC_MspInit+0x11c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d178      	bne.n	80020ec <HAL_ADC_MspInit+0x114>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	4b3e      	ldr	r3, [pc, #248]	@ (80020f8 <HAL_ADC_MspInit+0x120>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002002:	4a3d      	ldr	r2, [pc, #244]	@ (80020f8 <HAL_ADC_MspInit+0x120>)
 8002004:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002008:	6453      	str	r3, [r2, #68]	@ 0x44
 800200a:	4b3b      	ldr	r3, [pc, #236]	@ (80020f8 <HAL_ADC_MspInit+0x120>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002012:	613b      	str	r3, [r7, #16]
 8002014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	4b37      	ldr	r3, [pc, #220]	@ (80020f8 <HAL_ADC_MspInit+0x120>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201e:	4a36      	ldr	r2, [pc, #216]	@ (80020f8 <HAL_ADC_MspInit+0x120>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	6313      	str	r3, [r2, #48]	@ 0x30
 8002026:	4b34      	ldr	r3, [pc, #208]	@ (80020f8 <HAL_ADC_MspInit+0x120>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	4b30      	ldr	r3, [pc, #192]	@ (80020f8 <HAL_ADC_MspInit+0x120>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203a:	4a2f      	ldr	r2, [pc, #188]	@ (80020f8 <HAL_ADC_MspInit+0x120>)
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	6313      	str	r3, [r2, #48]	@ 0x30
 8002042:	4b2d      	ldr	r3, [pc, #180]	@ (80020f8 <HAL_ADC_MspInit+0x120>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800204e:	23fe      	movs	r3, #254	@ 0xfe
 8002050:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002052:	2303      	movs	r3, #3
 8002054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205a:	f107 0314 	add.w	r3, r7, #20
 800205e:	4619      	mov	r1, r3
 8002060:	4826      	ldr	r0, [pc, #152]	@ (80020fc <HAL_ADC_MspInit+0x124>)
 8002062:	f001 fddb 	bl	8003c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002066:	2301      	movs	r3, #1
 8002068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800206a:	2303      	movs	r3, #3
 800206c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002072:	f107 0314 	add.w	r3, r7, #20
 8002076:	4619      	mov	r1, r3
 8002078:	4821      	ldr	r0, [pc, #132]	@ (8002100 <HAL_ADC_MspInit+0x128>)
 800207a:	f001 fdcf 	bl	8003c1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800207e:	4b21      	ldr	r3, [pc, #132]	@ (8002104 <HAL_ADC_MspInit+0x12c>)
 8002080:	4a21      	ldr	r2, [pc, #132]	@ (8002108 <HAL_ADC_MspInit+0x130>)
 8002082:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002084:	4b1f      	ldr	r3, [pc, #124]	@ (8002104 <HAL_ADC_MspInit+0x12c>)
 8002086:	2200      	movs	r2, #0
 8002088:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800208a:	4b1e      	ldr	r3, [pc, #120]	@ (8002104 <HAL_ADC_MspInit+0x12c>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002090:	4b1c      	ldr	r3, [pc, #112]	@ (8002104 <HAL_ADC_MspInit+0x12c>)
 8002092:	2200      	movs	r2, #0
 8002094:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002096:	4b1b      	ldr	r3, [pc, #108]	@ (8002104 <HAL_ADC_MspInit+0x12c>)
 8002098:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800209c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800209e:	4b19      	ldr	r3, [pc, #100]	@ (8002104 <HAL_ADC_MspInit+0x12c>)
 80020a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80020a4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020a6:	4b17      	ldr	r3, [pc, #92]	@ (8002104 <HAL_ADC_MspInit+0x12c>)
 80020a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020ac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80020ae:	4b15      	ldr	r3, [pc, #84]	@ (8002104 <HAL_ADC_MspInit+0x12c>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80020b4:	4b13      	ldr	r3, [pc, #76]	@ (8002104 <HAL_ADC_MspInit+0x12c>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020ba:	4b12      	ldr	r3, [pc, #72]	@ (8002104 <HAL_ADC_MspInit+0x12c>)
 80020bc:	2200      	movs	r2, #0
 80020be:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020c0:	4810      	ldr	r0, [pc, #64]	@ (8002104 <HAL_ADC_MspInit+0x12c>)
 80020c2:	f001 fa0b 	bl	80034dc <HAL_DMA_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 80020cc:	f7ff ff50 	bl	8001f70 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a0c      	ldr	r2, [pc, #48]	@ (8002104 <HAL_ADC_MspInit+0x12c>)
 80020d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80020d6:	4a0b      	ldr	r2, [pc, #44]	@ (8002104 <HAL_ADC_MspInit+0x12c>)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80020dc:	2200      	movs	r2, #0
 80020de:	2100      	movs	r1, #0
 80020e0:	2012      	movs	r0, #18
 80020e2:	f001 f9c4 	bl	800346e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80020e6:	2012      	movs	r0, #18
 80020e8:	f001 f9dd 	bl	80034a6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80020ec:	bf00      	nop
 80020ee:	3728      	adds	r7, #40	@ 0x28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40012000 	.word	0x40012000
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40020000 	.word	0x40020000
 8002100:	40020400 	.word	0x40020400
 8002104:	200003cc 	.word	0x200003cc
 8002108:	40026410 	.word	0x40026410

0800210c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	@ 0x28
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a4f      	ldr	r2, [pc, #316]	@ (8002268 <HAL_I2C_MspInit+0x15c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	f040 8097 	bne.w	800225e <HAL_I2C_MspInit+0x152>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002130:	2300      	movs	r3, #0
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	4b4d      	ldr	r3, [pc, #308]	@ (800226c <HAL_I2C_MspInit+0x160>)
 8002136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002138:	4a4c      	ldr	r2, [pc, #304]	@ (800226c <HAL_I2C_MspInit+0x160>)
 800213a:	f043 0302 	orr.w	r3, r3, #2
 800213e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002140:	4b4a      	ldr	r3, [pc, #296]	@ (800226c <HAL_I2C_MspInit+0x160>)
 8002142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800214c:	23c0      	movs	r3, #192	@ 0xc0
 800214e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002150:	2312      	movs	r3, #18
 8002152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002154:	2300      	movs	r3, #0
 8002156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002158:	2303      	movs	r3, #3
 800215a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800215c:	2304      	movs	r3, #4
 800215e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002160:	f107 0314 	add.w	r3, r7, #20
 8002164:	4619      	mov	r1, r3
 8002166:	4842      	ldr	r0, [pc, #264]	@ (8002270 <HAL_I2C_MspInit+0x164>)
 8002168:	f001 fd58 	bl	8003c1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800216c:	2300      	movs	r3, #0
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	4b3e      	ldr	r3, [pc, #248]	@ (800226c <HAL_I2C_MspInit+0x160>)
 8002172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002174:	4a3d      	ldr	r2, [pc, #244]	@ (800226c <HAL_I2C_MspInit+0x160>)
 8002176:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800217a:	6413      	str	r3, [r2, #64]	@ 0x40
 800217c:	4b3b      	ldr	r3, [pc, #236]	@ (800226c <HAL_I2C_MspInit+0x160>)
 800217e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002180:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8002188:	4b3a      	ldr	r3, [pc, #232]	@ (8002274 <HAL_I2C_MspInit+0x168>)
 800218a:	4a3b      	ldr	r2, [pc, #236]	@ (8002278 <HAL_I2C_MspInit+0x16c>)
 800218c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800218e:	4b39      	ldr	r3, [pc, #228]	@ (8002274 <HAL_I2C_MspInit+0x168>)
 8002190:	2200      	movs	r2, #0
 8002192:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002194:	4b37      	ldr	r3, [pc, #220]	@ (8002274 <HAL_I2C_MspInit+0x168>)
 8002196:	2240      	movs	r2, #64	@ 0x40
 8002198:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800219a:	4b36      	ldr	r3, [pc, #216]	@ (8002274 <HAL_I2C_MspInit+0x168>)
 800219c:	2200      	movs	r2, #0
 800219e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021a0:	4b34      	ldr	r3, [pc, #208]	@ (8002274 <HAL_I2C_MspInit+0x168>)
 80021a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021a6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021a8:	4b32      	ldr	r3, [pc, #200]	@ (8002274 <HAL_I2C_MspInit+0x168>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021ae:	4b31      	ldr	r3, [pc, #196]	@ (8002274 <HAL_I2C_MspInit+0x168>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80021b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002274 <HAL_I2C_MspInit+0x168>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021ba:	4b2e      	ldr	r3, [pc, #184]	@ (8002274 <HAL_I2C_MspInit+0x168>)
 80021bc:	2200      	movs	r2, #0
 80021be:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002274 <HAL_I2C_MspInit+0x168>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80021c6:	482b      	ldr	r0, [pc, #172]	@ (8002274 <HAL_I2C_MspInit+0x168>)
 80021c8:	f001 f988 	bl	80034dc <HAL_DMA_Init>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 80021d2:	f7ff fecd 	bl	8001f70 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a26      	ldr	r2, [pc, #152]	@ (8002274 <HAL_I2C_MspInit+0x168>)
 80021da:	635a      	str	r2, [r3, #52]	@ 0x34
 80021dc:	4a25      	ldr	r2, [pc, #148]	@ (8002274 <HAL_I2C_MspInit+0x168>)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80021e2:	4b26      	ldr	r3, [pc, #152]	@ (800227c <HAL_I2C_MspInit+0x170>)
 80021e4:	4a26      	ldr	r2, [pc, #152]	@ (8002280 <HAL_I2C_MspInit+0x174>)
 80021e6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80021e8:	4b24      	ldr	r3, [pc, #144]	@ (800227c <HAL_I2C_MspInit+0x170>)
 80021ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021ee:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021f0:	4b22      	ldr	r3, [pc, #136]	@ (800227c <HAL_I2C_MspInit+0x170>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021f6:	4b21      	ldr	r3, [pc, #132]	@ (800227c <HAL_I2C_MspInit+0x170>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021fc:	4b1f      	ldr	r3, [pc, #124]	@ (800227c <HAL_I2C_MspInit+0x170>)
 80021fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002202:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002204:	4b1d      	ldr	r3, [pc, #116]	@ (800227c <HAL_I2C_MspInit+0x170>)
 8002206:	2200      	movs	r2, #0
 8002208:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800220a:	4b1c      	ldr	r3, [pc, #112]	@ (800227c <HAL_I2C_MspInit+0x170>)
 800220c:	2200      	movs	r2, #0
 800220e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002210:	4b1a      	ldr	r3, [pc, #104]	@ (800227c <HAL_I2C_MspInit+0x170>)
 8002212:	2200      	movs	r2, #0
 8002214:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002216:	4b19      	ldr	r3, [pc, #100]	@ (800227c <HAL_I2C_MspInit+0x170>)
 8002218:	2200      	movs	r2, #0
 800221a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800221c:	4b17      	ldr	r3, [pc, #92]	@ (800227c <HAL_I2C_MspInit+0x170>)
 800221e:	2200      	movs	r2, #0
 8002220:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002222:	4816      	ldr	r0, [pc, #88]	@ (800227c <HAL_I2C_MspInit+0x170>)
 8002224:	f001 f95a 	bl	80034dc <HAL_DMA_Init>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 800222e:	f7ff fe9f 	bl	8001f70 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a11      	ldr	r2, [pc, #68]	@ (800227c <HAL_I2C_MspInit+0x170>)
 8002236:	639a      	str	r2, [r3, #56]	@ 0x38
 8002238:	4a10      	ldr	r2, [pc, #64]	@ (800227c <HAL_I2C_MspInit+0x170>)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800223e:	2200      	movs	r2, #0
 8002240:	2100      	movs	r1, #0
 8002242:	201f      	movs	r0, #31
 8002244:	f001 f913 	bl	800346e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002248:	201f      	movs	r0, #31
 800224a:	f001 f92c 	bl	80034a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800224e:	2200      	movs	r2, #0
 8002250:	2100      	movs	r1, #0
 8002252:	2020      	movs	r0, #32
 8002254:	f001 f90b 	bl	800346e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002258:	2020      	movs	r0, #32
 800225a:	f001 f924 	bl	80034a6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800225e:	bf00      	nop
 8002260:	3728      	adds	r7, #40	@ 0x28
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40005400 	.word	0x40005400
 800226c:	40023800 	.word	0x40023800
 8002270:	40020400 	.word	0x40020400
 8002274:	20000480 	.word	0x20000480
 8002278:	40026028 	.word	0x40026028
 800227c:	200004e0 	.word	0x200004e0
 8002280:	40026010 	.word	0x40026010

08002284 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a38      	ldr	r2, [pc, #224]	@ (8002374 <HAL_TIM_Base_MspInit+0xf0>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d116      	bne.n	80022c4 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
 800229a:	4b37      	ldr	r3, [pc, #220]	@ (8002378 <HAL_TIM_Base_MspInit+0xf4>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	4a36      	ldr	r2, [pc, #216]	@ (8002378 <HAL_TIM_Base_MspInit+0xf4>)
 80022a0:	f043 0302 	orr.w	r3, r3, #2
 80022a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022a6:	4b34      	ldr	r3, [pc, #208]	@ (8002378 <HAL_TIM_Base_MspInit+0xf4>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	617b      	str	r3, [r7, #20]
 80022b0:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80022b2:	2200      	movs	r2, #0
 80022b4:	2100      	movs	r1, #0
 80022b6:	201d      	movs	r0, #29
 80022b8:	f001 f8d9 	bl	800346e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022bc:	201d      	movs	r0, #29
 80022be:	f001 f8f2 	bl	80034a6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM11_MspInit 1 */

    /* USER CODE END TIM11_MspInit 1 */
  }

}
 80022c2:	e052      	b.n	800236a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM9)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a2c      	ldr	r2, [pc, #176]	@ (800237c <HAL_TIM_Base_MspInit+0xf8>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d116      	bne.n	80022fc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	4b29      	ldr	r3, [pc, #164]	@ (8002378 <HAL_TIM_Base_MspInit+0xf4>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d6:	4a28      	ldr	r2, [pc, #160]	@ (8002378 <HAL_TIM_Base_MspInit+0xf4>)
 80022d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80022de:	4b26      	ldr	r3, [pc, #152]	@ (8002378 <HAL_TIM_Base_MspInit+0xf4>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80022ea:	2200      	movs	r2, #0
 80022ec:	2100      	movs	r1, #0
 80022ee:	2018      	movs	r0, #24
 80022f0:	f001 f8bd 	bl	800346e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80022f4:	2018      	movs	r0, #24
 80022f6:	f001 f8d6 	bl	80034a6 <HAL_NVIC_EnableIRQ>
}
 80022fa:	e036      	b.n	800236a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a1f      	ldr	r2, [pc, #124]	@ (8002380 <HAL_TIM_Base_MspInit+0xfc>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d116      	bne.n	8002334 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	4b1b      	ldr	r3, [pc, #108]	@ (8002378 <HAL_TIM_Base_MspInit+0xf4>)
 800230c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230e:	4a1a      	ldr	r2, [pc, #104]	@ (8002378 <HAL_TIM_Base_MspInit+0xf4>)
 8002310:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002314:	6453      	str	r3, [r2, #68]	@ 0x44
 8002316:	4b18      	ldr	r3, [pc, #96]	@ (8002378 <HAL_TIM_Base_MspInit+0xf4>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002322:	2200      	movs	r2, #0
 8002324:	2100      	movs	r1, #0
 8002326:	2019      	movs	r0, #25
 8002328:	f001 f8a1 	bl	800346e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800232c:	2019      	movs	r0, #25
 800232e:	f001 f8ba 	bl	80034a6 <HAL_NVIC_EnableIRQ>
}
 8002332:	e01a      	b.n	800236a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a12      	ldr	r2, [pc, #72]	@ (8002384 <HAL_TIM_Base_MspInit+0x100>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d115      	bne.n	800236a <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	4b0d      	ldr	r3, [pc, #52]	@ (8002378 <HAL_TIM_Base_MspInit+0xf4>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002346:	4a0c      	ldr	r2, [pc, #48]	@ (8002378 <HAL_TIM_Base_MspInit+0xf4>)
 8002348:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800234c:	6453      	str	r3, [r2, #68]	@ 0x44
 800234e:	4b0a      	ldr	r3, [pc, #40]	@ (8002378 <HAL_TIM_Base_MspInit+0xf4>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002352:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800235a:	2200      	movs	r2, #0
 800235c:	2100      	movs	r1, #0
 800235e:	201a      	movs	r0, #26
 8002360:	f001 f885 	bl	800346e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002364:	201a      	movs	r0, #26
 8002366:	f001 f89e 	bl	80034a6 <HAL_NVIC_EnableIRQ>
}
 800236a:	bf00      	nop
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40000400 	.word	0x40000400
 8002378:	40023800 	.word	0x40023800
 800237c:	40014000 	.word	0x40014000
 8002380:	40014400 	.word	0x40014400
 8002384:	40014800 	.word	0x40014800

08002388 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002390:	f107 030c 	add.w	r3, r7, #12
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a12      	ldr	r2, [pc, #72]	@ (80023f0 <HAL_TIM_MspPostInit+0x68>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d11d      	bne.n	80023e6 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	4b11      	ldr	r3, [pc, #68]	@ (80023f4 <HAL_TIM_MspPostInit+0x6c>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b2:	4a10      	ldr	r2, [pc, #64]	@ (80023f4 <HAL_TIM_MspPostInit+0x6c>)
 80023b4:	f043 0302 	orr.w	r3, r3, #2
 80023b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ba:	4b0e      	ldr	r3, [pc, #56]	@ (80023f4 <HAL_TIM_MspPostInit+0x6c>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Eng2PWM_Pin|Eng1PWM_Pin;
 80023c6:	2330      	movs	r3, #48	@ 0x30
 80023c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ca:	2302      	movs	r3, #2
 80023cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023d6:	2302      	movs	r3, #2
 80023d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023da:	f107 030c 	add.w	r3, r7, #12
 80023de:	4619      	mov	r1, r3
 80023e0:	4805      	ldr	r0, [pc, #20]	@ (80023f8 <HAL_TIM_MspPostInit+0x70>)
 80023e2:	f001 fc1b 	bl	8003c1c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80023e6:	bf00      	nop
 80023e8:	3720      	adds	r7, #32
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40000400 	.word	0x40000400
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40020400 	.word	0x40020400

080023fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002400:	bf00      	nop
 8002402:	e7fd      	b.n	8002400 <NMI_Handler+0x4>

08002404 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002408:	bf00      	nop
 800240a:	e7fd      	b.n	8002408 <HardFault_Handler+0x4>

0800240c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002410:	bf00      	nop
 8002412:	e7fd      	b.n	8002410 <MemManage_Handler+0x4>

08002414 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002418:	bf00      	nop
 800241a:	e7fd      	b.n	8002418 <BusFault_Handler+0x4>

0800241c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002420:	bf00      	nop
 8002422:	e7fd      	b.n	8002420 <UsageFault_Handler+0x4>

08002424 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002432:	b480      	push	{r7}
 8002434:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002452:	f000 f9cd 	bl	80027f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002460:	4802      	ldr	r0, [pc, #8]	@ (800246c <DMA1_Stream0_IRQHandler+0x10>)
 8002462:	f001 f963 	bl	800372c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	200004e0 	.word	0x200004e0

08002470 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002474:	4802      	ldr	r0, [pc, #8]	@ (8002480 <DMA1_Stream1_IRQHandler+0x10>)
 8002476:	f001 f959 	bl	800372c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000480 	.word	0x20000480

08002484 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002488:	4802      	ldr	r0, [pc, #8]	@ (8002494 <ADC_IRQHandler+0x10>)
 800248a:	f000 fa38 	bl	80028fe <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20000384 	.word	0x20000384

08002498 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 800249c:	4802      	ldr	r0, [pc, #8]	@ (80024a8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800249e:	f005 fc19 	bl	8007cd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000588 	.word	0x20000588

080024ac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80024b0:	4802      	ldr	r0, [pc, #8]	@ (80024bc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80024b2:	f005 fc0f 	bl	8007cd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	200005d0 	.word	0x200005d0

080024c0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80024c4:	4802      	ldr	r0, [pc, #8]	@ (80024d0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80024c6:	f005 fc05 	bl	8007cd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000618 	.word	0x20000618

080024d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024d8:	4802      	ldr	r0, [pc, #8]	@ (80024e4 <TIM3_IRQHandler+0x10>)
 80024da:	f005 fbfb 	bl	8007cd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000540 	.word	0x20000540

080024e8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80024ec:	4802      	ldr	r0, [pc, #8]	@ (80024f8 <I2C1_EV_IRQHandler+0x10>)
 80024ee:	f001 fea6 	bl	800423e <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	2000042c 	.word	0x2000042c

080024fc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002500:	4802      	ldr	r0, [pc, #8]	@ (800250c <I2C1_ER_IRQHandler+0x10>)
 8002502:	f002 f80d 	bl	8004520 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	2000042c 	.word	0x2000042c

08002510 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002514:	4802      	ldr	r0, [pc, #8]	@ (8002520 <DMA2_Stream0_IRQHandler+0x10>)
 8002516:	f001 f909 	bl	800372c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	200003cc 	.word	0x200003cc

08002524 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002528:	4802      	ldr	r0, [pc, #8]	@ (8002534 <OTG_FS_IRQHandler+0x10>)
 800252a:	f003 fcc4 	bl	8005eb6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000fb0 	.word	0x20000fb0

08002538 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002546:	b480      	push	{r7}
 8002548:	af00      	add	r7, sp, #0
  return 1;
 800254a:	2301      	movs	r3, #1
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <_kill>:

int _kill(int pid, int sig)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002560:	f00b fb0e 	bl	800db80 <__errno>
 8002564:	4603      	mov	r3, r0
 8002566:	2216      	movs	r2, #22
 8002568:	601a      	str	r2, [r3, #0]
  return -1;
 800256a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <_exit>:

void _exit (int status)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800257e:	f04f 31ff 	mov.w	r1, #4294967295
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff ffe7 	bl	8002556 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002588:	bf00      	nop
 800258a:	e7fd      	b.n	8002588 <_exit+0x12>

0800258c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	e00a      	b.n	80025b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800259e:	f3af 8000 	nop.w
 80025a2:	4601      	mov	r1, r0
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	60ba      	str	r2, [r7, #8]
 80025aa:	b2ca      	uxtb	r2, r1
 80025ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	3301      	adds	r3, #1
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	dbf0      	blt.n	800259e <_read+0x12>
  }

  return len;
 80025bc:	687b      	ldr	r3, [r7, #4]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b086      	sub	sp, #24
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	e009      	b.n	80025ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	1c5a      	adds	r2, r3, #1
 80025dc:	60ba      	str	r2, [r7, #8]
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	3301      	adds	r3, #1
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	dbf1      	blt.n	80025d8 <_write+0x12>
  }
  return len;
 80025f4:	687b      	ldr	r3, [r7, #4]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <_close>:

int _close(int file)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002606:	f04f 33ff 	mov.w	r3, #4294967295
}
 800260a:	4618      	mov	r0, r3
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002626:	605a      	str	r2, [r3, #4]
  return 0;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <_isatty>:

int _isatty(int file)
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800263e:	2301      	movs	r3, #1
}
 8002640:	4618      	mov	r0, r3
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
	...

08002668 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002670:	4a14      	ldr	r2, [pc, #80]	@ (80026c4 <_sbrk+0x5c>)
 8002672:	4b15      	ldr	r3, [pc, #84]	@ (80026c8 <_sbrk+0x60>)
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800267c:	4b13      	ldr	r3, [pc, #76]	@ (80026cc <_sbrk+0x64>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d102      	bne.n	800268a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002684:	4b11      	ldr	r3, [pc, #68]	@ (80026cc <_sbrk+0x64>)
 8002686:	4a12      	ldr	r2, [pc, #72]	@ (80026d0 <_sbrk+0x68>)
 8002688:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800268a:	4b10      	ldr	r3, [pc, #64]	@ (80026cc <_sbrk+0x64>)
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4413      	add	r3, r2
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	429a      	cmp	r2, r3
 8002696:	d207      	bcs.n	80026a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002698:	f00b fa72 	bl	800db80 <__errno>
 800269c:	4603      	mov	r3, r0
 800269e:	220c      	movs	r2, #12
 80026a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026a2:	f04f 33ff 	mov.w	r3, #4294967295
 80026a6:	e009      	b.n	80026bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026a8:	4b08      	ldr	r3, [pc, #32]	@ (80026cc <_sbrk+0x64>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ae:	4b07      	ldr	r3, [pc, #28]	@ (80026cc <_sbrk+0x64>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4413      	add	r3, r2
 80026b6:	4a05      	ldr	r2, [pc, #20]	@ (80026cc <_sbrk+0x64>)
 80026b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026ba:	68fb      	ldr	r3, [r7, #12]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20020000 	.word	0x20020000
 80026c8:	00000400 	.word	0x00000400
 80026cc:	200006c4 	.word	0x200006c4
 80026d0:	20001800 	.word	0x20001800

080026d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026d8:	4b06      	ldr	r3, [pc, #24]	@ (80026f4 <SystemInit+0x20>)
 80026da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026de:	4a05      	ldr	r2, [pc, #20]	@ (80026f4 <SystemInit+0x20>)
 80026e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80026f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002730 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026fc:	f7ff ffea 	bl	80026d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002700:	480c      	ldr	r0, [pc, #48]	@ (8002734 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002702:	490d      	ldr	r1, [pc, #52]	@ (8002738 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002704:	4a0d      	ldr	r2, [pc, #52]	@ (800273c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002708:	e002      	b.n	8002710 <LoopCopyDataInit>

0800270a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800270a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800270c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800270e:	3304      	adds	r3, #4

08002710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002714:	d3f9      	bcc.n	800270a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002716:	4a0a      	ldr	r2, [pc, #40]	@ (8002740 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002718:	4c0a      	ldr	r4, [pc, #40]	@ (8002744 <LoopFillZerobss+0x22>)
  movs r3, #0
 800271a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800271c:	e001      	b.n	8002722 <LoopFillZerobss>

0800271e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800271e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002720:	3204      	adds	r2, #4

08002722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002724:	d3fb      	bcc.n	800271e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002726:	f00b fa31 	bl	800db8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800272a:	f7ff f829 	bl	8001780 <main>
  bx  lr    
 800272e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002730:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002738:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 800273c:	080115c4 	.word	0x080115c4
  ldr r2, =_sbss
 8002740:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 8002744:	20001800 	.word	0x20001800

08002748 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002748:	e7fe      	b.n	8002748 <DMA1_Stream2_IRQHandler>
	...

0800274c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002750:	4b0e      	ldr	r3, [pc, #56]	@ (800278c <HAL_Init+0x40>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a0d      	ldr	r2, [pc, #52]	@ (800278c <HAL_Init+0x40>)
 8002756:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800275a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800275c:	4b0b      	ldr	r3, [pc, #44]	@ (800278c <HAL_Init+0x40>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a0a      	ldr	r2, [pc, #40]	@ (800278c <HAL_Init+0x40>)
 8002762:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002766:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002768:	4b08      	ldr	r3, [pc, #32]	@ (800278c <HAL_Init+0x40>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a07      	ldr	r2, [pc, #28]	@ (800278c <HAL_Init+0x40>)
 800276e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002772:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002774:	2003      	movs	r0, #3
 8002776:	f000 fe6f 	bl	8003458 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800277a:	200f      	movs	r0, #15
 800277c:	f000 f808 	bl	8002790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002780:	f7ff fbfc 	bl	8001f7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40023c00 	.word	0x40023c00

08002790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002798:	4b12      	ldr	r3, [pc, #72]	@ (80027e4 <HAL_InitTick+0x54>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4b12      	ldr	r3, [pc, #72]	@ (80027e8 <HAL_InitTick+0x58>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	4619      	mov	r1, r3
 80027a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 fe87 	bl	80034c2 <HAL_SYSTICK_Config>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e00e      	b.n	80027dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b0f      	cmp	r3, #15
 80027c2:	d80a      	bhi.n	80027da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027c4:	2200      	movs	r2, #0
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	f04f 30ff 	mov.w	r0, #4294967295
 80027cc:	f000 fe4f 	bl	800346e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027d0:	4a06      	ldr	r2, [pc, #24]	@ (80027ec <HAL_InitTick+0x5c>)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
 80027d8:	e000      	b.n	80027dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	20000000 	.word	0x20000000
 80027e8:	20000008 	.word	0x20000008
 80027ec:	20000004 	.word	0x20000004

080027f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027f4:	4b06      	ldr	r3, [pc, #24]	@ (8002810 <HAL_IncTick+0x20>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	461a      	mov	r2, r3
 80027fa:	4b06      	ldr	r3, [pc, #24]	@ (8002814 <HAL_IncTick+0x24>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4413      	add	r3, r2
 8002800:	4a04      	ldr	r2, [pc, #16]	@ (8002814 <HAL_IncTick+0x24>)
 8002802:	6013      	str	r3, [r2, #0]
}
 8002804:	bf00      	nop
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	20000008 	.word	0x20000008
 8002814:	200006c8 	.word	0x200006c8

08002818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return uwTick;
 800281c:	4b03      	ldr	r3, [pc, #12]	@ (800282c <HAL_GetTick+0x14>)
 800281e:	681b      	ldr	r3, [r3, #0]
}
 8002820:	4618      	mov	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	200006c8 	.word	0x200006c8

08002830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002838:	f7ff ffee 	bl	8002818 <HAL_GetTick>
 800283c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002848:	d005      	beq.n	8002856 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800284a:	4b0a      	ldr	r3, [pc, #40]	@ (8002874 <HAL_Delay+0x44>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4413      	add	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002856:	bf00      	nop
 8002858:	f7ff ffde 	bl	8002818 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	429a      	cmp	r2, r3
 8002866:	d8f7      	bhi.n	8002858 <HAL_Delay+0x28>
  {
  }
}
 8002868:	bf00      	nop
 800286a:	bf00      	nop
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20000008 	.word	0x20000008

08002878 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e033      	b.n	80028f6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002892:	2b00      	cmp	r3, #0
 8002894:	d109      	bne.n	80028aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7ff fb9e 	bl	8001fd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ae:	f003 0310 	and.w	r3, r3, #16
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d118      	bne.n	80028e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ba:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80028be:	f023 0302 	bic.w	r3, r3, #2
 80028c2:	f043 0202 	orr.w	r2, r3, #2
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 fb6c 	bl	8002fa8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028da:	f023 0303 	bic.w	r3, r3, #3
 80028de:	f043 0201 	orr.w	r2, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80028e6:	e001      	b.n	80028ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b086      	sub	sp, #24
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	2300      	movs	r3, #0
 800290c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d049      	beq.n	80029c8 <HAL_ADC_IRQHandler+0xca>
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d046      	beq.n	80029c8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293e:	f003 0310 	and.w	r3, r3, #16
 8002942:	2b00      	cmp	r3, #0
 8002944:	d105      	bne.n	8002952 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d12b      	bne.n	80029b8 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002964:	2b00      	cmp	r3, #0
 8002966:	d127      	bne.n	80029b8 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002972:	2b00      	cmp	r3, #0
 8002974:	d006      	beq.n	8002984 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002980:	2b00      	cmp	r3, #0
 8002982:	d119      	bne.n	80029b8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0220 	bic.w	r2, r2, #32
 8002992:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002998:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d105      	bne.n	80029b8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b0:	f043 0201 	orr.w	r2, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7fe fe81 	bl	80016c0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f06f 0212 	mvn.w	r2, #18
 80029c6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029d6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d057      	beq.n	8002a8e <HAL_ADC_IRQHandler+0x190>
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d054      	beq.n	8002a8e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e8:	f003 0310 	and.w	r3, r3, #16
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d105      	bne.n	80029fc <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d139      	bne.n	8002a7e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a10:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d006      	beq.n	8002a26 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d12b      	bne.n	8002a7e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d124      	bne.n	8002a7e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d11d      	bne.n	8002a7e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d119      	bne.n	8002a7e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a58:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d105      	bne.n	8002a7e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a76:	f043 0201 	orr.w	r2, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 fc10 	bl	80032a4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f06f 020c 	mvn.w	r2, #12
 8002a8c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a9c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d017      	beq.n	8002ad4 <HAL_ADC_IRQHandler+0x1d6>
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d014      	beq.n	8002ad4 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d10d      	bne.n	8002ad4 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f929 	bl	8002d1c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f06f 0201 	mvn.w	r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ae2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d015      	beq.n	8002b16 <HAL_ADC_IRQHandler+0x218>
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d012      	beq.n	8002b16 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af4:	f043 0202 	orr.w	r2, r3, #2
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f06f 0220 	mvn.w	r2, #32
 8002b04:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f912 	bl	8002d30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f06f 0220 	mvn.w	r2, #32
 8002b14:	601a      	str	r2, [r3, #0]
  }
}
 8002b16:	bf00      	nop
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b088      	sub	sp, #32
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d101      	bne.n	8002b42 <HAL_ADC_Start_DMA+0x22>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e0d0      	b.n	8002ce4 <HAL_ADC_Start_DMA+0x1c4>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d018      	beq.n	8002b8a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f042 0201 	orr.w	r2, r2, #1
 8002b66:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b68:	4b60      	ldr	r3, [pc, #384]	@ (8002cec <HAL_ADC_Start_DMA+0x1cc>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a60      	ldr	r2, [pc, #384]	@ (8002cf0 <HAL_ADC_Start_DMA+0x1d0>)
 8002b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b72:	0c9a      	lsrs	r2, r3, #18
 8002b74:	4613      	mov	r3, r2
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	4413      	add	r3, r2
 8002b7a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002b7c:	e002      	b.n	8002b84 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	3b01      	subs	r3, #1
 8002b82:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f9      	bne.n	8002b7e <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b98:	d107      	bne.n	8002baa <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ba8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	f040 8088 	bne.w	8002cca <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbe:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002bc2:	f023 0301 	bic.w	r3, r3, #1
 8002bc6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d007      	beq.n	8002bec <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002be4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bf4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bf8:	d106      	bne.n	8002c08 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfe:	f023 0206 	bic.w	r2, r3, #6
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	645a      	str	r2, [r3, #68]	@ 0x44
 8002c06:	e002      	b.n	8002c0e <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c16:	4b37      	ldr	r3, [pc, #220]	@ (8002cf4 <HAL_ADC_Start_DMA+0x1d4>)
 8002c18:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c1e:	4a36      	ldr	r2, [pc, #216]	@ (8002cf8 <HAL_ADC_Start_DMA+0x1d8>)
 8002c20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c26:	4a35      	ldr	r2, [pc, #212]	@ (8002cfc <HAL_ADC_Start_DMA+0x1dc>)
 8002c28:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c2e:	4a34      	ldr	r2, [pc, #208]	@ (8002d00 <HAL_ADC_Start_DMA+0x1e0>)
 8002c30:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002c3a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002c4a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c5a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	334c      	adds	r3, #76	@ 0x4c
 8002c66:	4619      	mov	r1, r3
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f000 fce4 	bl	8003638 <HAL_DMA_Start_IT>
 8002c70:	4603      	mov	r3, r0
 8002c72:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 031f 	and.w	r3, r3, #31
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10f      	bne.n	8002ca0 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d129      	bne.n	8002ce2 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c9c:	609a      	str	r2, [r3, #8]
 8002c9e:	e020      	b.n	8002ce2 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a17      	ldr	r2, [pc, #92]	@ (8002d04 <HAL_ADC_Start_DMA+0x1e4>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d11b      	bne.n	8002ce2 <HAL_ADC_Start_DMA+0x1c2>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d114      	bne.n	8002ce2 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002cc6:	609a      	str	r2, [r3, #8]
 8002cc8:	e00b      	b.n	8002ce2 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cce:	f043 0210 	orr.w	r2, r3, #16
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cda:	f043 0201 	orr.w	r2, r3, #1
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002ce2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3720      	adds	r7, #32
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	20000000 	.word	0x20000000
 8002cf0:	431bde83 	.word	0x431bde83
 8002cf4:	40012300 	.word	0x40012300
 8002cf8:	080031a1 	.word	0x080031a1
 8002cfc:	0800325b 	.word	0x0800325b
 8002d00:	08003277 	.word	0x08003277
 8002d04:	40012000 	.word	0x40012000

08002d08 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d101      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x1c>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e113      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x244>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b09      	cmp	r3, #9
 8002d6e:	d925      	bls.n	8002dbc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68d9      	ldr	r1, [r3, #12]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4613      	mov	r3, r2
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	4413      	add	r3, r2
 8002d84:	3b1e      	subs	r3, #30
 8002d86:	2207      	movs	r2, #7
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	43da      	mvns	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	400a      	ands	r2, r1
 8002d94:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68d9      	ldr	r1, [r3, #12]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	4618      	mov	r0, r3
 8002da8:	4603      	mov	r3, r0
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	4403      	add	r3, r0
 8002dae:	3b1e      	subs	r3, #30
 8002db0:	409a      	lsls	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	60da      	str	r2, [r3, #12]
 8002dba:	e022      	b.n	8002e02 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6919      	ldr	r1, [r3, #16]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4613      	mov	r3, r2
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	4413      	add	r3, r2
 8002dd0:	2207      	movs	r2, #7
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43da      	mvns	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	400a      	ands	r2, r1
 8002dde:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6919      	ldr	r1, [r3, #16]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	4618      	mov	r0, r3
 8002df2:	4603      	mov	r3, r0
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	4403      	add	r3, r0
 8002df8:	409a      	lsls	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b06      	cmp	r3, #6
 8002e08:	d824      	bhi.n	8002e54 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	4613      	mov	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	3b05      	subs	r3, #5
 8002e1c:	221f      	movs	r2, #31
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43da      	mvns	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	400a      	ands	r2, r1
 8002e2a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	4618      	mov	r0, r3
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	3b05      	subs	r3, #5
 8002e46:	fa00 f203 	lsl.w	r2, r0, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e52:	e04c      	b.n	8002eee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b0c      	cmp	r3, #12
 8002e5a:	d824      	bhi.n	8002ea6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3b23      	subs	r3, #35	@ 0x23
 8002e6e:	221f      	movs	r2, #31
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	43da      	mvns	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	400a      	ands	r2, r1
 8002e7c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	3b23      	subs	r3, #35	@ 0x23
 8002e98:	fa00 f203 	lsl.w	r2, r0, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ea4:	e023      	b.n	8002eee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3b41      	subs	r3, #65	@ 0x41
 8002eb8:	221f      	movs	r2, #31
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	43da      	mvns	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	400a      	ands	r2, r1
 8002ec6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	3b41      	subs	r3, #65	@ 0x41
 8002ee2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002eee:	4b29      	ldr	r3, [pc, #164]	@ (8002f94 <HAL_ADC_ConfigChannel+0x250>)
 8002ef0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a28      	ldr	r2, [pc, #160]	@ (8002f98 <HAL_ADC_ConfigChannel+0x254>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d10f      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x1d8>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2b12      	cmp	r3, #18
 8002f02:	d10b      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a1d      	ldr	r2, [pc, #116]	@ (8002f98 <HAL_ADC_ConfigChannel+0x254>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d12b      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x23a>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a1c      	ldr	r2, [pc, #112]	@ (8002f9c <HAL_ADC_ConfigChannel+0x258>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d003      	beq.n	8002f38 <HAL_ADC_ConfigChannel+0x1f4>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b11      	cmp	r3, #17
 8002f36:	d122      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a11      	ldr	r2, [pc, #68]	@ (8002f9c <HAL_ADC_ConfigChannel+0x258>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d111      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f5a:	4b11      	ldr	r3, [pc, #68]	@ (8002fa0 <HAL_ADC_ConfigChannel+0x25c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a11      	ldr	r2, [pc, #68]	@ (8002fa4 <HAL_ADC_ConfigChannel+0x260>)
 8002f60:	fba2 2303 	umull	r2, r3, r2, r3
 8002f64:	0c9a      	lsrs	r2, r3, #18
 8002f66:	4613      	mov	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002f70:	e002      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	3b01      	subs	r3, #1
 8002f76:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f9      	bne.n	8002f72 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	40012300 	.word	0x40012300
 8002f98:	40012000 	.word	0x40012000
 8002f9c:	10000012 	.word	0x10000012
 8002fa0:	20000000 	.word	0x20000000
 8002fa4:	431bde83 	.word	0x431bde83

08002fa8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fb0:	4b79      	ldr	r3, [pc, #484]	@ (8003198 <ADC_Init+0x1f0>)
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6859      	ldr	r1, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	021a      	lsls	r2, r3, #8
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003000:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6859      	ldr	r1, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003022:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6899      	ldr	r1, [r3, #8]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800303a:	4a58      	ldr	r2, [pc, #352]	@ (800319c <ADC_Init+0x1f4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d022      	beq.n	8003086 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800304e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6899      	ldr	r1, [r3, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003070:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6899      	ldr	r1, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	e00f      	b.n	80030a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003094:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80030a4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 0202 	bic.w	r2, r2, #2
 80030b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6899      	ldr	r1, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	7e1b      	ldrb	r3, [r3, #24]
 80030c0:	005a      	lsls	r2, r3, #1
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d01b      	beq.n	800310c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030e2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80030f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6859      	ldr	r1, [r3, #4]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fe:	3b01      	subs	r3, #1
 8003100:	035a      	lsls	r2, r3, #13
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	605a      	str	r2, [r3, #4]
 800310a:	e007      	b.n	800311c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800311a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800312a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	3b01      	subs	r3, #1
 8003138:	051a      	lsls	r2, r3, #20
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003150:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6899      	ldr	r1, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800315e:	025a      	lsls	r2, r3, #9
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003176:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6899      	ldr	r1, [r3, #8]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	029a      	lsls	r2, r3, #10
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	609a      	str	r2, [r3, #8]
}
 800318c:	bf00      	nop
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	40012300 	.word	0x40012300
 800319c:	0f000001 	.word	0x0f000001

080031a0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ac:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d13c      	bne.n	8003234 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031be:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d12b      	bne.n	800322c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d127      	bne.n	800322c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d006      	beq.n	80031f8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d119      	bne.n	800322c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0220 	bic.w	r2, r2, #32
 8003206:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003218:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d105      	bne.n	800322c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003224:	f043 0201 	orr.w	r2, r3, #1
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f7fe fa47 	bl	80016c0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003232:	e00e      	b.n	8003252 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003238:	f003 0310 	and.w	r3, r3, #16
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f7ff fd75 	bl	8002d30 <HAL_ADC_ErrorCallback>
}
 8003246:	e004      	b.n	8003252 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800324c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	4798      	blx	r3
}
 8003252:	bf00      	nop
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b084      	sub	sp, #16
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003266:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f7ff fd4d 	bl	8002d08 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800326e:	bf00      	nop
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b084      	sub	sp, #16
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003282:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2240      	movs	r2, #64	@ 0x40
 8003288:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328e:	f043 0204 	orr.w	r2, r3, #4
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f7ff fd4a 	bl	8002d30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800329c:	bf00      	nop
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032c8:	4b0c      	ldr	r3, [pc, #48]	@ (80032fc <__NVIC_SetPriorityGrouping+0x44>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032d4:	4013      	ands	r3, r2
 80032d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032ea:	4a04      	ldr	r2, [pc, #16]	@ (80032fc <__NVIC_SetPriorityGrouping+0x44>)
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	60d3      	str	r3, [r2, #12]
}
 80032f0:	bf00      	nop
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	e000ed00 	.word	0xe000ed00

08003300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003304:	4b04      	ldr	r3, [pc, #16]	@ (8003318 <__NVIC_GetPriorityGrouping+0x18>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	0a1b      	lsrs	r3, r3, #8
 800330a:	f003 0307 	and.w	r3, r3, #7
}
 800330e:	4618      	mov	r0, r3
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332a:	2b00      	cmp	r3, #0
 800332c:	db0b      	blt.n	8003346 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	f003 021f 	and.w	r2, r3, #31
 8003334:	4907      	ldr	r1, [pc, #28]	@ (8003354 <__NVIC_EnableIRQ+0x38>)
 8003336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	2001      	movs	r0, #1
 800333e:	fa00 f202 	lsl.w	r2, r0, r2
 8003342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	e000e100 	.word	0xe000e100

08003358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	6039      	str	r1, [r7, #0]
 8003362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003368:	2b00      	cmp	r3, #0
 800336a:	db0a      	blt.n	8003382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	b2da      	uxtb	r2, r3
 8003370:	490c      	ldr	r1, [pc, #48]	@ (80033a4 <__NVIC_SetPriority+0x4c>)
 8003372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003376:	0112      	lsls	r2, r2, #4
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	440b      	add	r3, r1
 800337c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003380:	e00a      	b.n	8003398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	b2da      	uxtb	r2, r3
 8003386:	4908      	ldr	r1, [pc, #32]	@ (80033a8 <__NVIC_SetPriority+0x50>)
 8003388:	79fb      	ldrb	r3, [r7, #7]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	3b04      	subs	r3, #4
 8003390:	0112      	lsls	r2, r2, #4
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	440b      	add	r3, r1
 8003396:	761a      	strb	r2, [r3, #24]
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	e000e100 	.word	0xe000e100
 80033a8:	e000ed00 	.word	0xe000ed00

080033ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b089      	sub	sp, #36	@ 0x24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f1c3 0307 	rsb	r3, r3, #7
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	bf28      	it	cs
 80033ca:	2304      	movcs	r3, #4
 80033cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	3304      	adds	r3, #4
 80033d2:	2b06      	cmp	r3, #6
 80033d4:	d902      	bls.n	80033dc <NVIC_EncodePriority+0x30>
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	3b03      	subs	r3, #3
 80033da:	e000      	b.n	80033de <NVIC_EncodePriority+0x32>
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e0:	f04f 32ff 	mov.w	r2, #4294967295
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43da      	mvns	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	401a      	ands	r2, r3
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033f4:	f04f 31ff 	mov.w	r1, #4294967295
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	fa01 f303 	lsl.w	r3, r1, r3
 80033fe:	43d9      	mvns	r1, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003404:	4313      	orrs	r3, r2
         );
}
 8003406:	4618      	mov	r0, r3
 8003408:	3724      	adds	r7, #36	@ 0x24
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
	...

08003414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3b01      	subs	r3, #1
 8003420:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003424:	d301      	bcc.n	800342a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003426:	2301      	movs	r3, #1
 8003428:	e00f      	b.n	800344a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800342a:	4a0a      	ldr	r2, [pc, #40]	@ (8003454 <SysTick_Config+0x40>)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3b01      	subs	r3, #1
 8003430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003432:	210f      	movs	r1, #15
 8003434:	f04f 30ff 	mov.w	r0, #4294967295
 8003438:	f7ff ff8e 	bl	8003358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800343c:	4b05      	ldr	r3, [pc, #20]	@ (8003454 <SysTick_Config+0x40>)
 800343e:	2200      	movs	r2, #0
 8003440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003442:	4b04      	ldr	r3, [pc, #16]	@ (8003454 <SysTick_Config+0x40>)
 8003444:	2207      	movs	r2, #7
 8003446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	e000e010 	.word	0xe000e010

08003458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7ff ff29 	bl	80032b8 <__NVIC_SetPriorityGrouping>
}
 8003466:	bf00      	nop
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800346e:	b580      	push	{r7, lr}
 8003470:	b086      	sub	sp, #24
 8003472:	af00      	add	r7, sp, #0
 8003474:	4603      	mov	r3, r0
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	607a      	str	r2, [r7, #4]
 800347a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003480:	f7ff ff3e 	bl	8003300 <__NVIC_GetPriorityGrouping>
 8003484:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	68b9      	ldr	r1, [r7, #8]
 800348a:	6978      	ldr	r0, [r7, #20]
 800348c:	f7ff ff8e 	bl	80033ac <NVIC_EncodePriority>
 8003490:	4602      	mov	r2, r0
 8003492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003496:	4611      	mov	r1, r2
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff ff5d 	bl	8003358 <__NVIC_SetPriority>
}
 800349e:	bf00      	nop
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b082      	sub	sp, #8
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	4603      	mov	r3, r0
 80034ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff ff31 	bl	800331c <__NVIC_EnableIRQ>
}
 80034ba:	bf00      	nop
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b082      	sub	sp, #8
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7ff ffa2 	bl	8003414 <SysTick_Config>
 80034d0:	4603      	mov	r3, r0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
	...

080034dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034e8:	f7ff f996 	bl	8002818 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e099      	b.n	800362c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0201 	bic.w	r2, r2, #1
 8003516:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003518:	e00f      	b.n	800353a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800351a:	f7ff f97d 	bl	8002818 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b05      	cmp	r3, #5
 8003526:	d908      	bls.n	800353a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2220      	movs	r2, #32
 800352c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2203      	movs	r2, #3
 8003532:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e078      	b.n	800362c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1e8      	bne.n	800351a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	4b38      	ldr	r3, [pc, #224]	@ (8003634 <HAL_DMA_Init+0x158>)
 8003554:	4013      	ands	r3, r2
 8003556:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003566:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003572:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800357e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	4313      	orrs	r3, r2
 800358a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003590:	2b04      	cmp	r3, #4
 8003592:	d107      	bne.n	80035a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359c:	4313      	orrs	r3, r2
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f023 0307 	bic.w	r3, r3, #7
 80035ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	d117      	bne.n	80035fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00e      	beq.n	80035fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 fa9f 	bl	8003b24 <DMA_CheckFifoParam>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d008      	beq.n	80035fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2240      	movs	r2, #64	@ 0x40
 80035f0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80035fa:	2301      	movs	r3, #1
 80035fc:	e016      	b.n	800362c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 fa56 	bl	8003ab8 <DMA_CalcBaseAndBitshift>
 800360c:	4603      	mov	r3, r0
 800360e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003614:	223f      	movs	r2, #63	@ 0x3f
 8003616:	409a      	lsls	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	f010803f 	.word	0xf010803f

08003638 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003646:	2300      	movs	r3, #0
 8003648:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <HAL_DMA_Start_IT+0x26>
 800365a:	2302      	movs	r3, #2
 800365c:	e040      	b.n	80036e0 <HAL_DMA_Start_IT+0xa8>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b01      	cmp	r3, #1
 8003670:	d12f      	bne.n	80036d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2202      	movs	r2, #2
 8003676:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	68b9      	ldr	r1, [r7, #8]
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 f9e8 	bl	8003a5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003690:	223f      	movs	r2, #63	@ 0x3f
 8003692:	409a      	lsls	r2, r3
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0216 	orr.w	r2, r2, #22
 80036a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d007      	beq.n	80036c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0208 	orr.w	r2, r2, #8
 80036be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0201 	orr.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	e005      	b.n	80036de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80036da:	2302      	movs	r3, #2
 80036dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80036de:	7dfb      	ldrb	r3, [r7, #23]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d004      	beq.n	8003706 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2280      	movs	r2, #128	@ 0x80
 8003700:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e00c      	b.n	8003720 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2205      	movs	r2, #5
 800370a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0201 	bic.w	r2, r2, #1
 800371c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003738:	4b8e      	ldr	r3, [pc, #568]	@ (8003974 <HAL_DMA_IRQHandler+0x248>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a8e      	ldr	r2, [pc, #568]	@ (8003978 <HAL_DMA_IRQHandler+0x24c>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	0a9b      	lsrs	r3, r3, #10
 8003744:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800374a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003756:	2208      	movs	r2, #8
 8003758:	409a      	lsls	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4013      	ands	r3, r2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d01a      	beq.n	8003798 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	d013      	beq.n	8003798 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0204 	bic.w	r2, r2, #4
 800377e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003784:	2208      	movs	r2, #8
 8003786:	409a      	lsls	r2, r3
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003790:	f043 0201 	orr.w	r2, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800379c:	2201      	movs	r2, #1
 800379e:	409a      	lsls	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4013      	ands	r3, r2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d012      	beq.n	80037ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00b      	beq.n	80037ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ba:	2201      	movs	r2, #1
 80037bc:	409a      	lsls	r2, r3
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c6:	f043 0202 	orr.w	r2, r3, #2
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d2:	2204      	movs	r2, #4
 80037d4:	409a      	lsls	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	4013      	ands	r3, r2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d012      	beq.n	8003804 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00b      	beq.n	8003804 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037f0:	2204      	movs	r2, #4
 80037f2:	409a      	lsls	r2, r3
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037fc:	f043 0204 	orr.w	r2, r3, #4
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003808:	2210      	movs	r2, #16
 800380a:	409a      	lsls	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4013      	ands	r3, r2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d043      	beq.n	800389c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d03c      	beq.n	800389c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003826:	2210      	movs	r2, #16
 8003828:	409a      	lsls	r2, r3
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d018      	beq.n	800386e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d108      	bne.n	800385c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384e:	2b00      	cmp	r3, #0
 8003850:	d024      	beq.n	800389c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	4798      	blx	r3
 800385a:	e01f      	b.n	800389c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003860:	2b00      	cmp	r3, #0
 8003862:	d01b      	beq.n	800389c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	4798      	blx	r3
 800386c:	e016      	b.n	800389c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003878:	2b00      	cmp	r3, #0
 800387a:	d107      	bne.n	800388c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0208 	bic.w	r2, r2, #8
 800388a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a0:	2220      	movs	r2, #32
 80038a2:	409a      	lsls	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4013      	ands	r3, r2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 808f 	beq.w	80039cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0310 	and.w	r3, r3, #16
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 8087 	beq.w	80039cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038c2:	2220      	movs	r2, #32
 80038c4:	409a      	lsls	r2, r3
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b05      	cmp	r3, #5
 80038d4:	d136      	bne.n	8003944 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0216 	bic.w	r2, r2, #22
 80038e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	695a      	ldr	r2, [r3, #20]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d103      	bne.n	8003906 <HAL_DMA_IRQHandler+0x1da>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003902:	2b00      	cmp	r3, #0
 8003904:	d007      	beq.n	8003916 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0208 	bic.w	r2, r2, #8
 8003914:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800391a:	223f      	movs	r2, #63	@ 0x3f
 800391c:	409a      	lsls	r2, r3
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003936:	2b00      	cmp	r3, #0
 8003938:	d07e      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	4798      	blx	r3
        }
        return;
 8003942:	e079      	b.n	8003a38 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d01d      	beq.n	800398e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10d      	bne.n	800397c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003964:	2b00      	cmp	r3, #0
 8003966:	d031      	beq.n	80039cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
 8003970:	e02c      	b.n	80039cc <HAL_DMA_IRQHandler+0x2a0>
 8003972:	bf00      	nop
 8003974:	20000000 	.word	0x20000000
 8003978:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003980:	2b00      	cmp	r3, #0
 8003982:	d023      	beq.n	80039cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	4798      	blx	r3
 800398c:	e01e      	b.n	80039cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10f      	bne.n	80039bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0210 	bic.w	r2, r2, #16
 80039aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d032      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d022      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2205      	movs	r2, #5
 80039e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0201 	bic.w	r2, r2, #1
 80039f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	3301      	adds	r3, #1
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d307      	bcc.n	8003a14 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f2      	bne.n	80039f8 <HAL_DMA_IRQHandler+0x2cc>
 8003a12:	e000      	b.n	8003a16 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003a14:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d005      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	4798      	blx	r3
 8003a36:	e000      	b.n	8003a3a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003a38:	bf00      	nop
    }
  }
}
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a4e:	b2db      	uxtb	r3, r3
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003a78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	2b40      	cmp	r3, #64	@ 0x40
 8003a88:	d108      	bne.n	8003a9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a9a:	e007      	b.n	8003aac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	60da      	str	r2, [r3, #12]
}
 8003aac:	bf00      	nop
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	3b10      	subs	r3, #16
 8003ac8:	4a14      	ldr	r2, [pc, #80]	@ (8003b1c <DMA_CalcBaseAndBitshift+0x64>)
 8003aca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ace:	091b      	lsrs	r3, r3, #4
 8003ad0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ad2:	4a13      	ldr	r2, [pc, #76]	@ (8003b20 <DMA_CalcBaseAndBitshift+0x68>)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2b03      	cmp	r3, #3
 8003ae4:	d909      	bls.n	8003afa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003aee:	f023 0303 	bic.w	r3, r3, #3
 8003af2:	1d1a      	adds	r2, r3, #4
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	659a      	str	r2, [r3, #88]	@ 0x58
 8003af8:	e007      	b.n	8003b0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003b02:	f023 0303 	bic.w	r3, r3, #3
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	aaaaaaab 	.word	0xaaaaaaab
 8003b20:	08011180 	.word	0x08011180

08003b24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d11f      	bne.n	8003b7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2b03      	cmp	r3, #3
 8003b42:	d856      	bhi.n	8003bf2 <DMA_CheckFifoParam+0xce>
 8003b44:	a201      	add	r2, pc, #4	@ (adr r2, 8003b4c <DMA_CheckFifoParam+0x28>)
 8003b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4a:	bf00      	nop
 8003b4c:	08003b5d 	.word	0x08003b5d
 8003b50:	08003b6f 	.word	0x08003b6f
 8003b54:	08003b5d 	.word	0x08003b5d
 8003b58:	08003bf3 	.word	0x08003bf3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d046      	beq.n	8003bf6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b6c:	e043      	b.n	8003bf6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b72:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b76:	d140      	bne.n	8003bfa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b7c:	e03d      	b.n	8003bfa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b86:	d121      	bne.n	8003bcc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	d837      	bhi.n	8003bfe <DMA_CheckFifoParam+0xda>
 8003b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b94 <DMA_CheckFifoParam+0x70>)
 8003b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b94:	08003ba5 	.word	0x08003ba5
 8003b98:	08003bab 	.word	0x08003bab
 8003b9c:	08003ba5 	.word	0x08003ba5
 8003ba0:	08003bbd 	.word	0x08003bbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba8:	e030      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d025      	beq.n	8003c02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bba:	e022      	b.n	8003c02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003bc4:	d11f      	bne.n	8003c06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003bca:	e01c      	b.n	8003c06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d903      	bls.n	8003bda <DMA_CheckFifoParam+0xb6>
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d003      	beq.n	8003be0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003bd8:	e018      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	73fb      	strb	r3, [r7, #15]
      break;
 8003bde:	e015      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00e      	beq.n	8003c0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	73fb      	strb	r3, [r7, #15]
      break;
 8003bf0:	e00b      	b.n	8003c0a <DMA_CheckFifoParam+0xe6>
      break;
 8003bf2:	bf00      	nop
 8003bf4:	e00a      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
      break;
 8003bf6:	bf00      	nop
 8003bf8:	e008      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
      break;
 8003bfa:	bf00      	nop
 8003bfc:	e006      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
      break;
 8003bfe:	bf00      	nop
 8003c00:	e004      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
      break;
 8003c02:	bf00      	nop
 8003c04:	e002      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
      break;   
 8003c06:	bf00      	nop
 8003c08:	e000      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
      break;
 8003c0a:	bf00      	nop
    }
  } 
  
  return status; 
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop

08003c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b089      	sub	sp, #36	@ 0x24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c32:	2300      	movs	r3, #0
 8003c34:	61fb      	str	r3, [r7, #28]
 8003c36:	e159      	b.n	8003eec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c38:	2201      	movs	r2, #1
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	f040 8148 	bne.w	8003ee6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d005      	beq.n	8003c6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d130      	bne.n	8003cd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	2203      	movs	r2, #3
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	43db      	mvns	r3, r3
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	4013      	ands	r3, r2
 8003c84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	43db      	mvns	r3, r3
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	091b      	lsrs	r3, r3, #4
 8003cba:	f003 0201 	and.w	r2, r3, #1
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	2b03      	cmp	r3, #3
 8003cda:	d017      	beq.n	8003d0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	2203      	movs	r2, #3
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	43db      	mvns	r3, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f003 0303 	and.w	r3, r3, #3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d123      	bne.n	8003d60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	08da      	lsrs	r2, r3, #3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3208      	adds	r2, #8
 8003d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	220f      	movs	r2, #15
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	43db      	mvns	r3, r3
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	08da      	lsrs	r2, r3, #3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	3208      	adds	r2, #8
 8003d5a:	69b9      	ldr	r1, [r7, #24]
 8003d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	2203      	movs	r2, #3
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	43db      	mvns	r3, r3
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4013      	ands	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 0203 	and.w	r2, r3, #3
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 80a2 	beq.w	8003ee6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003da2:	2300      	movs	r3, #0
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	4b57      	ldr	r3, [pc, #348]	@ (8003f04 <HAL_GPIO_Init+0x2e8>)
 8003da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003daa:	4a56      	ldr	r2, [pc, #344]	@ (8003f04 <HAL_GPIO_Init+0x2e8>)
 8003dac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003db0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003db2:	4b54      	ldr	r3, [pc, #336]	@ (8003f04 <HAL_GPIO_Init+0x2e8>)
 8003db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dbe:	4a52      	ldr	r2, [pc, #328]	@ (8003f08 <HAL_GPIO_Init+0x2ec>)
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	089b      	lsrs	r3, r3, #2
 8003dc4:	3302      	adds	r3, #2
 8003dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	220f      	movs	r2, #15
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4013      	ands	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a49      	ldr	r2, [pc, #292]	@ (8003f0c <HAL_GPIO_Init+0x2f0>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d019      	beq.n	8003e1e <HAL_GPIO_Init+0x202>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a48      	ldr	r2, [pc, #288]	@ (8003f10 <HAL_GPIO_Init+0x2f4>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d013      	beq.n	8003e1a <HAL_GPIO_Init+0x1fe>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a47      	ldr	r2, [pc, #284]	@ (8003f14 <HAL_GPIO_Init+0x2f8>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d00d      	beq.n	8003e16 <HAL_GPIO_Init+0x1fa>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a46      	ldr	r2, [pc, #280]	@ (8003f18 <HAL_GPIO_Init+0x2fc>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d007      	beq.n	8003e12 <HAL_GPIO_Init+0x1f6>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a45      	ldr	r2, [pc, #276]	@ (8003f1c <HAL_GPIO_Init+0x300>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d101      	bne.n	8003e0e <HAL_GPIO_Init+0x1f2>
 8003e0a:	2304      	movs	r3, #4
 8003e0c:	e008      	b.n	8003e20 <HAL_GPIO_Init+0x204>
 8003e0e:	2307      	movs	r3, #7
 8003e10:	e006      	b.n	8003e20 <HAL_GPIO_Init+0x204>
 8003e12:	2303      	movs	r3, #3
 8003e14:	e004      	b.n	8003e20 <HAL_GPIO_Init+0x204>
 8003e16:	2302      	movs	r3, #2
 8003e18:	e002      	b.n	8003e20 <HAL_GPIO_Init+0x204>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e000      	b.n	8003e20 <HAL_GPIO_Init+0x204>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	69fa      	ldr	r2, [r7, #28]
 8003e22:	f002 0203 	and.w	r2, r2, #3
 8003e26:	0092      	lsls	r2, r2, #2
 8003e28:	4093      	lsls	r3, r2
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e30:	4935      	ldr	r1, [pc, #212]	@ (8003f08 <HAL_GPIO_Init+0x2ec>)
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	089b      	lsrs	r3, r3, #2
 8003e36:	3302      	adds	r3, #2
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e3e:	4b38      	ldr	r3, [pc, #224]	@ (8003f20 <HAL_GPIO_Init+0x304>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	43db      	mvns	r3, r3
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e62:	4a2f      	ldr	r2, [pc, #188]	@ (8003f20 <HAL_GPIO_Init+0x304>)
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e68:	4b2d      	ldr	r3, [pc, #180]	@ (8003f20 <HAL_GPIO_Init+0x304>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	43db      	mvns	r3, r3
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	4013      	ands	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e8c:	4a24      	ldr	r2, [pc, #144]	@ (8003f20 <HAL_GPIO_Init+0x304>)
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e92:	4b23      	ldr	r3, [pc, #140]	@ (8003f20 <HAL_GPIO_Init+0x304>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	43db      	mvns	r3, r3
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003eb6:	4a1a      	ldr	r2, [pc, #104]	@ (8003f20 <HAL_GPIO_Init+0x304>)
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ebc:	4b18      	ldr	r3, [pc, #96]	@ (8003f20 <HAL_GPIO_Init+0x304>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d003      	beq.n	8003ee0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ee0:	4a0f      	ldr	r2, [pc, #60]	@ (8003f20 <HAL_GPIO_Init+0x304>)
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	61fb      	str	r3, [r7, #28]
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	2b0f      	cmp	r3, #15
 8003ef0:	f67f aea2 	bls.w	8003c38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ef4:	bf00      	nop
 8003ef6:	bf00      	nop
 8003ef8:	3724      	adds	r7, #36	@ 0x24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	40023800 	.word	0x40023800
 8003f08:	40013800 	.word	0x40013800
 8003f0c:	40020000 	.word	0x40020000
 8003f10:	40020400 	.word	0x40020400
 8003f14:	40020800 	.word	0x40020800
 8003f18:	40020c00 	.word	0x40020c00
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	40013c00 	.word	0x40013c00

08003f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	807b      	strh	r3, [r7, #2]
 8003f30:	4613      	mov	r3, r2
 8003f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f34:	787b      	ldrb	r3, [r7, #1]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f3a:	887a      	ldrh	r2, [r7, #2]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f40:	e003      	b.n	8003f4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f42:	887b      	ldrh	r3, [r7, #2]
 8003f44:	041a      	lsls	r2, r3, #16
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	619a      	str	r2, [r3, #24]
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b085      	sub	sp, #20
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
 8003f5e:	460b      	mov	r3, r1
 8003f60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f68:	887a      	ldrh	r2, [r7, #2]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	041a      	lsls	r2, r3, #16
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	43d9      	mvns	r1, r3
 8003f74:	887b      	ldrh	r3, [r7, #2]
 8003f76:	400b      	ands	r3, r1
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	619a      	str	r2, [r3, #24]
}
 8003f7e:	bf00      	nop
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
	...

08003f8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e12b      	b.n	80041f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d106      	bne.n	8003fb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7fe f8aa 	bl	800210c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2224      	movs	r2, #36	@ 0x24
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0201 	bic.w	r2, r2, #1
 8003fce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ff0:	f003 fca0 	bl	8007934 <HAL_RCC_GetPCLK1Freq>
 8003ff4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	4a81      	ldr	r2, [pc, #516]	@ (8004200 <HAL_I2C_Init+0x274>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d807      	bhi.n	8004010 <HAL_I2C_Init+0x84>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4a80      	ldr	r2, [pc, #512]	@ (8004204 <HAL_I2C_Init+0x278>)
 8004004:	4293      	cmp	r3, r2
 8004006:	bf94      	ite	ls
 8004008:	2301      	movls	r3, #1
 800400a:	2300      	movhi	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	e006      	b.n	800401e <HAL_I2C_Init+0x92>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4a7d      	ldr	r2, [pc, #500]	@ (8004208 <HAL_I2C_Init+0x27c>)
 8004014:	4293      	cmp	r3, r2
 8004016:	bf94      	ite	ls
 8004018:	2301      	movls	r3, #1
 800401a:	2300      	movhi	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e0e7      	b.n	80041f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4a78      	ldr	r2, [pc, #480]	@ (800420c <HAL_I2C_Init+0x280>)
 800402a:	fba2 2303 	umull	r2, r3, r2, r3
 800402e:	0c9b      	lsrs	r3, r3, #18
 8004030:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	430a      	orrs	r2, r1
 8004044:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	4a6a      	ldr	r2, [pc, #424]	@ (8004200 <HAL_I2C_Init+0x274>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d802      	bhi.n	8004060 <HAL_I2C_Init+0xd4>
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	3301      	adds	r3, #1
 800405e:	e009      	b.n	8004074 <HAL_I2C_Init+0xe8>
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004066:	fb02 f303 	mul.w	r3, r2, r3
 800406a:	4a69      	ldr	r2, [pc, #420]	@ (8004210 <HAL_I2C_Init+0x284>)
 800406c:	fba2 2303 	umull	r2, r3, r2, r3
 8004070:	099b      	lsrs	r3, r3, #6
 8004072:	3301      	adds	r3, #1
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6812      	ldr	r2, [r2, #0]
 8004078:	430b      	orrs	r3, r1
 800407a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004086:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	495c      	ldr	r1, [pc, #368]	@ (8004200 <HAL_I2C_Init+0x274>)
 8004090:	428b      	cmp	r3, r1
 8004092:	d819      	bhi.n	80040c8 <HAL_I2C_Init+0x13c>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	1e59      	subs	r1, r3, #1
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	fbb1 f3f3 	udiv	r3, r1, r3
 80040a2:	1c59      	adds	r1, r3, #1
 80040a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80040a8:	400b      	ands	r3, r1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <HAL_I2C_Init+0x138>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	1e59      	subs	r1, r3, #1
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80040bc:	3301      	adds	r3, #1
 80040be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040c2:	e051      	b.n	8004168 <HAL_I2C_Init+0x1dc>
 80040c4:	2304      	movs	r3, #4
 80040c6:	e04f      	b.n	8004168 <HAL_I2C_Init+0x1dc>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d111      	bne.n	80040f4 <HAL_I2C_Init+0x168>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	1e58      	subs	r0, r3, #1
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6859      	ldr	r1, [r3, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	440b      	add	r3, r1
 80040de:	fbb0 f3f3 	udiv	r3, r0, r3
 80040e2:	3301      	adds	r3, #1
 80040e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	bf0c      	ite	eq
 80040ec:	2301      	moveq	r3, #1
 80040ee:	2300      	movne	r3, #0
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	e012      	b.n	800411a <HAL_I2C_Init+0x18e>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	1e58      	subs	r0, r3, #1
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6859      	ldr	r1, [r3, #4]
 80040fc:	460b      	mov	r3, r1
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	440b      	add	r3, r1
 8004102:	0099      	lsls	r1, r3, #2
 8004104:	440b      	add	r3, r1
 8004106:	fbb0 f3f3 	udiv	r3, r0, r3
 800410a:	3301      	adds	r3, #1
 800410c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004110:	2b00      	cmp	r3, #0
 8004112:	bf0c      	ite	eq
 8004114:	2301      	moveq	r3, #1
 8004116:	2300      	movne	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <HAL_I2C_Init+0x196>
 800411e:	2301      	movs	r3, #1
 8004120:	e022      	b.n	8004168 <HAL_I2C_Init+0x1dc>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10e      	bne.n	8004148 <HAL_I2C_Init+0x1bc>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1e58      	subs	r0, r3, #1
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6859      	ldr	r1, [r3, #4]
 8004132:	460b      	mov	r3, r1
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	440b      	add	r3, r1
 8004138:	fbb0 f3f3 	udiv	r3, r0, r3
 800413c:	3301      	adds	r3, #1
 800413e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004142:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004146:	e00f      	b.n	8004168 <HAL_I2C_Init+0x1dc>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	1e58      	subs	r0, r3, #1
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6859      	ldr	r1, [r3, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	0099      	lsls	r1, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	fbb0 f3f3 	udiv	r3, r0, r3
 800415e:	3301      	adds	r3, #1
 8004160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004164:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	6809      	ldr	r1, [r1, #0]
 800416c:	4313      	orrs	r3, r2
 800416e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69da      	ldr	r2, [r3, #28]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004196:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6911      	ldr	r1, [r2, #16]
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	68d2      	ldr	r2, [r2, #12]
 80041a2:	4311      	orrs	r1, r2
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6812      	ldr	r2, [r2, #0]
 80041a8:	430b      	orrs	r3, r1
 80041aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695a      	ldr	r2, [r3, #20]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0201 	orr.w	r2, r2, #1
 80041d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2220      	movs	r2, #32
 80041e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	000186a0 	.word	0x000186a0
 8004204:	001e847f 	.word	0x001e847f
 8004208:	003d08ff 	.word	0x003d08ff
 800420c:	431bde83 	.word	0x431bde83
 8004210:	10624dd3 	.word	0x10624dd3

08004214 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004226:	2b80      	cmp	r3, #128	@ 0x80
 8004228:	d103      	bne.n	8004232 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2200      	movs	r2, #0
 8004230:	611a      	str	r2, [r3, #16]
  }
}
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b088      	sub	sp, #32
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004256:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800425e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004266:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004268:	7bfb      	ldrb	r3, [r7, #15]
 800426a:	2b10      	cmp	r3, #16
 800426c:	d003      	beq.n	8004276 <HAL_I2C_EV_IRQHandler+0x38>
 800426e:	7bfb      	ldrb	r3, [r7, #15]
 8004270:	2b40      	cmp	r3, #64	@ 0x40
 8004272:	f040 80c1 	bne.w	80043f8 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10d      	bne.n	80042ac <HAL_I2C_EV_IRQHandler+0x6e>
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004296:	d003      	beq.n	80042a0 <HAL_I2C_EV_IRQHandler+0x62>
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800429e:	d101      	bne.n	80042a4 <HAL_I2C_EV_IRQHandler+0x66>
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <HAL_I2C_EV_IRQHandler+0x68>
 80042a4:	2300      	movs	r3, #0
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	f000 8132 	beq.w	8004510 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00c      	beq.n	80042d0 <HAL_I2C_EV_IRQHandler+0x92>
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	0a5b      	lsrs	r3, r3, #9
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d006      	beq.n	80042d0 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f001 fc98 	bl	8005bf8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 fd9b 	bl	8004e04 <I2C_Master_SB>
 80042ce:	e092      	b.n	80043f6 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	08db      	lsrs	r3, r3, #3
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d009      	beq.n	80042f0 <HAL_I2C_EV_IRQHandler+0xb2>
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	0a5b      	lsrs	r3, r3, #9
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 fe11 	bl	8004f10 <I2C_Master_ADD10>
 80042ee:	e082      	b.n	80043f6 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	085b      	lsrs	r3, r3, #1
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d009      	beq.n	8004310 <HAL_I2C_EV_IRQHandler+0xd2>
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	0a5b      	lsrs	r3, r3, #9
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b00      	cmp	r3, #0
 8004306:	d003      	beq.n	8004310 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 fe2b 	bl	8004f64 <I2C_Master_ADDR>
 800430e:	e072      	b.n	80043f6 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	089b      	lsrs	r3, r3, #2
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b00      	cmp	r3, #0
 800431a:	d03b      	beq.n	8004394 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004326:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800432a:	f000 80f3 	beq.w	8004514 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	09db      	lsrs	r3, r3, #7
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00f      	beq.n	800435a <HAL_I2C_EV_IRQHandler+0x11c>
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	0a9b      	lsrs	r3, r3, #10
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d009      	beq.n	800435a <HAL_I2C_EV_IRQHandler+0x11c>
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	089b      	lsrs	r3, r3, #2
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d103      	bne.n	800435a <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f9f3 	bl	800473e <I2C_MasterTransmit_TXE>
 8004358:	e04d      	b.n	80043f6 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	089b      	lsrs	r3, r3, #2
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 80d6 	beq.w	8004514 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	0a5b      	lsrs	r3, r3, #9
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 80cf 	beq.w	8004514 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004376:	7bbb      	ldrb	r3, [r7, #14]
 8004378:	2b21      	cmp	r3, #33	@ 0x21
 800437a:	d103      	bne.n	8004384 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 fa7a 	bl	8004876 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004382:	e0c7      	b.n	8004514 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004384:	7bfb      	ldrb	r3, [r7, #15]
 8004386:	2b40      	cmp	r3, #64	@ 0x40
 8004388:	f040 80c4 	bne.w	8004514 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fae8 	bl	8004962 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004392:	e0bf      	b.n	8004514 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800439e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043a2:	f000 80b7 	beq.w	8004514 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	099b      	lsrs	r3, r3, #6
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00f      	beq.n	80043d2 <HAL_I2C_EV_IRQHandler+0x194>
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	0a9b      	lsrs	r3, r3, #10
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d009      	beq.n	80043d2 <HAL_I2C_EV_IRQHandler+0x194>
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	089b      	lsrs	r3, r3, #2
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d103      	bne.n	80043d2 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 fb61 	bl	8004a92 <I2C_MasterReceive_RXNE>
 80043d0:	e011      	b.n	80043f6 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	089b      	lsrs	r3, r3, #2
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 809a 	beq.w	8004514 <HAL_I2C_EV_IRQHandler+0x2d6>
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	0a5b      	lsrs	r3, r3, #9
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 8093 	beq.w	8004514 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fc17 	bl	8004c22 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043f4:	e08e      	b.n	8004514 <HAL_I2C_EV_IRQHandler+0x2d6>
 80043f6:	e08d      	b.n	8004514 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d004      	beq.n	800440a <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	61fb      	str	r3, [r7, #28]
 8004408:	e007      	b.n	800441a <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	085b      	lsrs	r3, r3, #1
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d012      	beq.n	800444c <HAL_I2C_EV_IRQHandler+0x20e>
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	0a5b      	lsrs	r3, r3, #9
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00c      	beq.n	800444c <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004442:	69b9      	ldr	r1, [r7, #24]
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 ffdc 	bl	8005402 <I2C_Slave_ADDR>
 800444a:	e066      	b.n	800451a <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	091b      	lsrs	r3, r3, #4
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	d009      	beq.n	800446c <HAL_I2C_EV_IRQHandler+0x22e>
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	0a5b      	lsrs	r3, r3, #9
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f001 f817 	bl	8005498 <I2C_Slave_STOPF>
 800446a:	e056      	b.n	800451a <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800446c:	7bbb      	ldrb	r3, [r7, #14]
 800446e:	2b21      	cmp	r3, #33	@ 0x21
 8004470:	d002      	beq.n	8004478 <HAL_I2C_EV_IRQHandler+0x23a>
 8004472:	7bbb      	ldrb	r3, [r7, #14]
 8004474:	2b29      	cmp	r3, #41	@ 0x29
 8004476:	d125      	bne.n	80044c4 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	09db      	lsrs	r3, r3, #7
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00f      	beq.n	80044a4 <HAL_I2C_EV_IRQHandler+0x266>
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	0a9b      	lsrs	r3, r3, #10
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b00      	cmp	r3, #0
 800448e:	d009      	beq.n	80044a4 <HAL_I2C_EV_IRQHandler+0x266>
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	089b      	lsrs	r3, r3, #2
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b00      	cmp	r3, #0
 800449a:	d103      	bne.n	80044a4 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 fef2 	bl	8005286 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044a2:	e039      	b.n	8004518 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	089b      	lsrs	r3, r3, #2
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d033      	beq.n	8004518 <HAL_I2C_EV_IRQHandler+0x2da>
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	0a5b      	lsrs	r3, r3, #9
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d02d      	beq.n	8004518 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 ff1f 	bl	8005300 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044c2:	e029      	b.n	8004518 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	099b      	lsrs	r3, r3, #6
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00f      	beq.n	80044f0 <HAL_I2C_EV_IRQHandler+0x2b2>
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	0a9b      	lsrs	r3, r3, #10
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d009      	beq.n	80044f0 <HAL_I2C_EV_IRQHandler+0x2b2>
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	089b      	lsrs	r3, r3, #2
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d103      	bne.n	80044f0 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 ff2a 	bl	8005342 <I2C_SlaveReceive_RXNE>
 80044ee:	e014      	b.n	800451a <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	089b      	lsrs	r3, r3, #2
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00e      	beq.n	800451a <HAL_I2C_EV_IRQHandler+0x2dc>
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	0a5b      	lsrs	r3, r3, #9
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b00      	cmp	r3, #0
 8004506:	d008      	beq.n	800451a <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 ff58 	bl	80053be <I2C_SlaveReceive_BTF>
 800450e:	e004      	b.n	800451a <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004510:	bf00      	nop
 8004512:	e002      	b.n	800451a <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004514:	bf00      	nop
 8004516:	e000      	b.n	800451a <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004518:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800451a:	3720      	adds	r7, #32
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b08a      	sub	sp, #40	@ 0x28
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004538:	2300      	movs	r3, #0
 800453a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004542:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	0a1b      	lsrs	r3, r3, #8
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00e      	beq.n	800456e <HAL_I2C_ER_IRQHandler+0x4e>
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	0a1b      	lsrs	r3, r3, #8
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	d008      	beq.n	800456e <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800455c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455e:	f043 0301 	orr.w	r3, r3, #1
 8004562:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800456c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	0a5b      	lsrs	r3, r3, #9
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00e      	beq.n	8004598 <HAL_I2C_ER_IRQHandler+0x78>
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	0a1b      	lsrs	r3, r3, #8
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d008      	beq.n	8004598 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004588:	f043 0302 	orr.w	r3, r3, #2
 800458c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8004596:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	0a9b      	lsrs	r3, r3, #10
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d03f      	beq.n	8004624 <HAL_I2C_ER_IRQHandler+0x104>
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	0a1b      	lsrs	r3, r3, #8
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d039      	beq.n	8004624 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80045b0:	7efb      	ldrb	r3, [r7, #27]
 80045b2:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045c2:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c8:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80045ca:	7ebb      	ldrb	r3, [r7, #26]
 80045cc:	2b20      	cmp	r3, #32
 80045ce:	d112      	bne.n	80045f6 <HAL_I2C_ER_IRQHandler+0xd6>
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10f      	bne.n	80045f6 <HAL_I2C_ER_IRQHandler+0xd6>
 80045d6:	7cfb      	ldrb	r3, [r7, #19]
 80045d8:	2b21      	cmp	r3, #33	@ 0x21
 80045da:	d008      	beq.n	80045ee <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80045dc:	7cfb      	ldrb	r3, [r7, #19]
 80045de:	2b29      	cmp	r3, #41	@ 0x29
 80045e0:	d005      	beq.n	80045ee <HAL_I2C_ER_IRQHandler+0xce>
 80045e2:	7cfb      	ldrb	r3, [r7, #19]
 80045e4:	2b28      	cmp	r3, #40	@ 0x28
 80045e6:	d106      	bne.n	80045f6 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2b21      	cmp	r3, #33	@ 0x21
 80045ec:	d103      	bne.n	80045f6 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f001 f882 	bl	80056f8 <I2C_Slave_AF>
 80045f4:	e016      	b.n	8004624 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80045fe:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004602:	f043 0304 	orr.w	r3, r3, #4
 8004606:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004608:	7efb      	ldrb	r3, [r7, #27]
 800460a:	2b10      	cmp	r3, #16
 800460c:	d002      	beq.n	8004614 <HAL_I2C_ER_IRQHandler+0xf4>
 800460e:	7efb      	ldrb	r3, [r7, #27]
 8004610:	2b40      	cmp	r3, #64	@ 0x40
 8004612:	d107      	bne.n	8004624 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004622:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	0adb      	lsrs	r3, r3, #11
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00e      	beq.n	800464e <HAL_I2C_ER_IRQHandler+0x12e>
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	0a1b      	lsrs	r3, r3, #8
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d008      	beq.n	800464e <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800463c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463e:	f043 0308 	orr.w	r3, r3, #8
 8004642:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800464c:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800464e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004650:	2b00      	cmp	r3, #0
 8004652:	d008      	beq.n	8004666 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f001 f8bd 	bl	80057e0 <I2C_ITError>
  }
}
 8004666:	bf00      	nop
 8004668:	3728      	adds	r7, #40	@ 0x28
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004682:	b480      	push	{r7}
 8004684:	b083      	sub	sp, #12
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800468a:	bf00      	nop
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800469e:	bf00      	nop
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b083      	sub	sp, #12
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80046be:	b480      	push	{r7}
 80046c0:	b083      	sub	sp, #12
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
 80046c6:	460b      	mov	r3, r1
 80046c8:	70fb      	strb	r3, [r7, #3]
 80046ca:	4613      	mov	r3, r2
 80046cc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80046ce:	bf00      	nop
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b083      	sub	sp, #12
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004702:	b480      	push	{r7}
 8004704:	b083      	sub	sp, #12
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800470a:	bf00      	nop
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004716:	b480      	push	{r7}
 8004718:	b083      	sub	sp, #12
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800471e:	bf00      	nop
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800472a:	b480      	push	{r7}
 800472c:	b083      	sub	sp, #12
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004732:	bf00      	nop
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b084      	sub	sp, #16
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800474c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004754:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004760:	2b00      	cmp	r3, #0
 8004762:	d150      	bne.n	8004806 <I2C_MasterTransmit_TXE+0xc8>
 8004764:	7bfb      	ldrb	r3, [r7, #15]
 8004766:	2b21      	cmp	r3, #33	@ 0x21
 8004768:	d14d      	bne.n	8004806 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	2b08      	cmp	r3, #8
 800476e:	d01d      	beq.n	80047ac <I2C_MasterTransmit_TXE+0x6e>
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2b20      	cmp	r3, #32
 8004774:	d01a      	beq.n	80047ac <I2C_MasterTransmit_TXE+0x6e>
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800477c:	d016      	beq.n	80047ac <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800478c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2211      	movs	r2, #17
 8004792:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2220      	movs	r2, #32
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7ff ff62 	bl	800466e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80047aa:	e060      	b.n	800486e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80047ba:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047ca:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b40      	cmp	r3, #64	@ 0x40
 80047e4:	d107      	bne.n	80047f6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7ff ff7d 	bl	80046ee <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80047f4:	e03b      	b.n	800486e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7ff ff35 	bl	800466e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004804:	e033      	b.n	800486e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004806:	7bfb      	ldrb	r3, [r7, #15]
 8004808:	2b21      	cmp	r3, #33	@ 0x21
 800480a:	d005      	beq.n	8004818 <I2C_MasterTransmit_TXE+0xda>
 800480c:	7bbb      	ldrb	r3, [r7, #14]
 800480e:	2b40      	cmp	r3, #64	@ 0x40
 8004810:	d12d      	bne.n	800486e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004812:	7bfb      	ldrb	r3, [r7, #15]
 8004814:	2b22      	cmp	r3, #34	@ 0x22
 8004816:	d12a      	bne.n	800486e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800481c:	b29b      	uxth	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d108      	bne.n	8004834 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004830:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004832:	e01c      	b.n	800486e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b40      	cmp	r3, #64	@ 0x40
 800483e:	d103      	bne.n	8004848 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f88e 	bl	8004962 <I2C_MemoryTransmit_TXE_BTF>
}
 8004846:	e012      	b.n	800486e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484c:	781a      	ldrb	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004858:	1c5a      	adds	r2, r3, #1
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004862:	b29b      	uxth	r3, r3
 8004864:	3b01      	subs	r3, #1
 8004866:	b29a      	uxth	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800486c:	e7ff      	b.n	800486e <I2C_MasterTransmit_TXE+0x130>
 800486e:	bf00      	nop
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b084      	sub	sp, #16
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004882:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b21      	cmp	r3, #33	@ 0x21
 800488e:	d164      	bne.n	800495a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004894:	b29b      	uxth	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d012      	beq.n	80048c0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489e:	781a      	ldrb	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	3b01      	subs	r3, #1
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80048be:	e04c      	b.n	800495a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2b08      	cmp	r3, #8
 80048c4:	d01d      	beq.n	8004902 <I2C_MasterTransmit_BTF+0x8c>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2b20      	cmp	r3, #32
 80048ca:	d01a      	beq.n	8004902 <I2C_MasterTransmit_BTF+0x8c>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80048d2:	d016      	beq.n	8004902 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80048e2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2211      	movs	r2, #17
 80048e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2220      	movs	r2, #32
 80048f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7ff feb7 	bl	800466e <HAL_I2C_MasterTxCpltCallback>
}
 8004900:	e02b      	b.n	800495a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004910:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004920:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2220      	movs	r2, #32
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b40      	cmp	r3, #64	@ 0x40
 800493a:	d107      	bne.n	800494c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f7ff fed2 	bl	80046ee <HAL_I2C_MemTxCpltCallback>
}
 800494a:	e006      	b.n	800495a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f7ff fe8a 	bl	800466e <HAL_I2C_MasterTxCpltCallback>
}
 800495a:	bf00      	nop
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b084      	sub	sp, #16
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004970:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004976:	2b00      	cmp	r3, #0
 8004978:	d11d      	bne.n	80049b6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800497e:	2b01      	cmp	r3, #1
 8004980:	d10b      	bne.n	800499a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004986:	b2da      	uxtb	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004992:	1c9a      	adds	r2, r3, #2
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004998:	e077      	b.n	8004a8a <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800499e:	b29b      	uxth	r3, r3
 80049a0:	121b      	asrs	r3, r3, #8
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ae:	1c5a      	adds	r2, r3, #1
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80049b4:	e069      	b.n	8004a8a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d10b      	bne.n	80049d6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ce:	1c5a      	adds	r2, r3, #1
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80049d4:	e059      	b.n	8004a8a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d152      	bne.n	8004a84 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80049de:	7bfb      	ldrb	r3, [r7, #15]
 80049e0:	2b22      	cmp	r3, #34	@ 0x22
 80049e2:	d10d      	bne.n	8004a00 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049f2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80049fe:	e044      	b.n	8004a8a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d015      	beq.n	8004a36 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
 8004a0c:	2b21      	cmp	r3, #33	@ 0x21
 8004a0e:	d112      	bne.n	8004a36 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a14:	781a      	ldrb	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a20:	1c5a      	adds	r2, r3, #1
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004a34:	e029      	b.n	8004a8a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d124      	bne.n	8004a8a <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004a40:	7bfb      	ldrb	r3, [r7, #15]
 8004a42:	2b21      	cmp	r3, #33	@ 0x21
 8004a44:	d121      	bne.n	8004a8a <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a54:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a64:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7ff fe36 	bl	80046ee <HAL_I2C_MemTxCpltCallback>
}
 8004a82:	e002      	b.n	8004a8a <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7ff fbc5 	bl	8004214 <I2C_Flush_DR>
}
 8004a8a:	bf00      	nop
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b084      	sub	sp, #16
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b22      	cmp	r3, #34	@ 0x22
 8004aa4:	f040 80b9 	bne.w	8004c1a <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aac:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2b03      	cmp	r3, #3
 8004aba:	d921      	bls.n	8004b00 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	691a      	ldr	r2, [r3, #16]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	3b01      	subs	r3, #1
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	2b03      	cmp	r3, #3
 8004aea:	f040 8096 	bne.w	8004c1a <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004afc:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004afe:	e08c      	b.n	8004c1a <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d07f      	beq.n	8004c08 <I2C_MasterReceive_RXNE+0x176>
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d002      	beq.n	8004b14 <I2C_MasterReceive_RXNE+0x82>
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d179      	bne.n	8004c08 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f001 f83d 	bl	8005b94 <I2C_WaitOnSTOPRequestThroughIT>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d14c      	bne.n	8004bba <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b2e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b3e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	691a      	ldr	r2, [r3, #16]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4a:	b2d2      	uxtb	r2, r2
 8004b4c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b52:	1c5a      	adds	r2, r3, #1
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b40      	cmp	r3, #64	@ 0x40
 8004b78:	d10a      	bne.n	8004b90 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f7ff fdba 	bl	8004702 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004b8e:	e044      	b.n	8004c1a <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2b08      	cmp	r3, #8
 8004b9c:	d002      	beq.n	8004ba4 <I2C_MasterReceive_RXNE+0x112>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2b20      	cmp	r3, #32
 8004ba2:	d103      	bne.n	8004bac <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	631a      	str	r2, [r3, #48]	@ 0x30
 8004baa:	e002      	b.n	8004bb2 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2212      	movs	r2, #18
 8004bb0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7ff fd65 	bl	8004682 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004bb8:	e02f      	b.n	8004c1a <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004bc8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	691a      	ldr	r2, [r3, #16]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd4:	b2d2      	uxtb	r2, r2
 8004bd6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bdc:	1c5a      	adds	r2, r3, #1
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	3b01      	subs	r3, #1
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f7ff fd88 	bl	8004716 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004c06:	e008      	b.n	8004c1a <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c16:	605a      	str	r2, [r3, #4]
}
 8004c18:	e7ff      	b.n	8004c1a <I2C_MasterReceive_RXNE+0x188>
 8004c1a:	bf00      	nop
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b084      	sub	sp, #16
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d11b      	bne.n	8004c72 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c48:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	691a      	ldr	r2, [r3, #16]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c54:	b2d2      	uxtb	r2, r2
 8004c56:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5c:	1c5a      	adds	r2, r3, #1
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004c70:	e0c4      	b.n	8004dfc <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	2b03      	cmp	r3, #3
 8004c7a:	d129      	bne.n	8004cd0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c8a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2b04      	cmp	r3, #4
 8004c90:	d00a      	beq.n	8004ca8 <I2C_MasterReceive_BTF+0x86>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d007      	beq.n	8004ca8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ca6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	691a      	ldr	r2, [r3, #16]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004cce:	e095      	b.n	8004dfc <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d17d      	bne.n	8004dd6 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d002      	beq.n	8004ce6 <I2C_MasterReceive_BTF+0xc4>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2b10      	cmp	r3, #16
 8004ce4:	d108      	bne.n	8004cf8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	e016      	b.n	8004d26 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2b04      	cmp	r3, #4
 8004cfc:	d002      	beq.n	8004d04 <I2C_MasterReceive_BTF+0xe2>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d108      	bne.n	8004d16 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	e007      	b.n	8004d26 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d24:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	691a      	ldr	r2, [r3, #16]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d30:	b2d2      	uxtb	r2, r2
 8004d32:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	3b01      	subs	r3, #1
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	691a      	ldr	r2, [r3, #16]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d56:	b2d2      	uxtb	r2, r2
 8004d58:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5e:	1c5a      	adds	r2, r3, #1
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004d80:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b40      	cmp	r3, #64	@ 0x40
 8004d94:	d10a      	bne.n	8004dac <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7ff fcac 	bl	8004702 <HAL_I2C_MemRxCpltCallback>
}
 8004daa:	e027      	b.n	8004dfc <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d002      	beq.n	8004dc0 <I2C_MasterReceive_BTF+0x19e>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2b20      	cmp	r3, #32
 8004dbe:	d103      	bne.n	8004dc8 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	631a      	str	r2, [r3, #48]	@ 0x30
 8004dc6:	e002      	b.n	8004dce <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2212      	movs	r2, #18
 8004dcc:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7ff fc57 	bl	8004682 <HAL_I2C_MasterRxCpltCallback>
}
 8004dd4:	e012      	b.n	8004dfc <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	691a      	ldr	r2, [r3, #16]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de0:	b2d2      	uxtb	r2, r2
 8004de2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	3b01      	subs	r3, #1
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004dfc:	bf00      	nop
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	2b40      	cmp	r3, #64	@ 0x40
 8004e16:	d117      	bne.n	8004e48 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d109      	bne.n	8004e34 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	461a      	mov	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004e30:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004e32:	e067      	b.n	8004f04 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	f043 0301 	orr.w	r3, r3, #1
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	611a      	str	r2, [r3, #16]
}
 8004e46:	e05d      	b.n	8004f04 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e50:	d133      	bne.n	8004eba <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b21      	cmp	r3, #33	@ 0x21
 8004e5c:	d109      	bne.n	8004e72 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	461a      	mov	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004e6e:	611a      	str	r2, [r3, #16]
 8004e70:	e008      	b.n	8004e84 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	f043 0301 	orr.w	r3, r3, #1
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d004      	beq.n	8004e96 <I2C_Master_SB+0x92>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d108      	bne.n	8004ea8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d032      	beq.n	8004f04 <I2C_Master_SB+0x100>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d02d      	beq.n	8004f04 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004eb6:	605a      	str	r2, [r3, #4]
}
 8004eb8:	e024      	b.n	8004f04 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10e      	bne.n	8004ee0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	11db      	asrs	r3, r3, #7
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	f003 0306 	and.w	r3, r3, #6
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	f063 030f 	orn	r3, r3, #15
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	611a      	str	r2, [r3, #16]
}
 8004ede:	e011      	b.n	8004f04 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d10d      	bne.n	8004f04 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	11db      	asrs	r3, r3, #7
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	f003 0306 	and.w	r3, r3, #6
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	f063 030e 	orn	r3, r3, #14
 8004efc:	b2da      	uxtb	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	611a      	str	r2, [r3, #16]
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f1c:	b2da      	uxtb	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d004      	beq.n	8004f36 <I2C_Master_ADD10+0x26>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d108      	bne.n	8004f48 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00c      	beq.n	8004f58 <I2C_Master_ADD10+0x48>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d007      	beq.n	8004f58 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f56:	605a      	str	r2, [r3, #4]
  }
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b091      	sub	sp, #68	@ 0x44
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f72:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f80:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b22      	cmp	r3, #34	@ 0x22
 8004f8c:	f040 8169 	bne.w	8005262 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10f      	bne.n	8004fb8 <I2C_Master_ADDR+0x54>
 8004f98:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004f9c:	2b40      	cmp	r3, #64	@ 0x40
 8004f9e:	d10b      	bne.n	8004fb8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb6:	e160      	b.n	800527a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d11d      	bne.n	8004ffc <I2C_Master_ADDR+0x98>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004fc8:	d118      	bne.n	8004ffc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fca:	2300      	movs	r3, #0
 8004fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fee:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	651a      	str	r2, [r3, #80]	@ 0x50
 8004ffa:	e13e      	b.n	800527a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005000:	b29b      	uxth	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d113      	bne.n	800502e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005006:	2300      	movs	r3, #0
 8005008:	62bb      	str	r3, [r7, #40]	@ 0x28
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	62bb      	str	r3, [r7, #40]	@ 0x28
 800501a:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	e115      	b.n	800525a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005032:	b29b      	uxth	r3, r3
 8005034:	2b01      	cmp	r3, #1
 8005036:	f040 808a 	bne.w	800514e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800503a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800503c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005040:	d137      	bne.n	80050b2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005050:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800505c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005060:	d113      	bne.n	800508a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005070:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005072:	2300      	movs	r3, #0
 8005074:	627b      	str	r3, [r7, #36]	@ 0x24
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	627b      	str	r3, [r7, #36]	@ 0x24
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	627b      	str	r3, [r7, #36]	@ 0x24
 8005086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005088:	e0e7      	b.n	800525a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800508a:	2300      	movs	r3, #0
 800508c:	623b      	str	r3, [r7, #32]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	623b      	str	r3, [r7, #32]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	623b      	str	r3, [r7, #32]
 800509e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	e0d3      	b.n	800525a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80050b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b4:	2b08      	cmp	r3, #8
 80050b6:	d02e      	beq.n	8005116 <I2C_Master_ADDR+0x1b2>
 80050b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ba:	2b20      	cmp	r3, #32
 80050bc:	d02b      	beq.n	8005116 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80050be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050c0:	2b12      	cmp	r3, #18
 80050c2:	d102      	bne.n	80050ca <I2C_Master_ADDR+0x166>
 80050c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d125      	bne.n	8005116 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80050ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050cc:	2b04      	cmp	r3, #4
 80050ce:	d00e      	beq.n	80050ee <I2C_Master_ADDR+0x18a>
 80050d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d00b      	beq.n	80050ee <I2C_Master_ADDR+0x18a>
 80050d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d8:	2b10      	cmp	r3, #16
 80050da:	d008      	beq.n	80050ee <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	e007      	b.n	80050fe <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80050fc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050fe:	2300      	movs	r3, #0
 8005100:	61fb      	str	r3, [r7, #28]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	61fb      	str	r3, [r7, #28]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	61fb      	str	r3, [r7, #28]
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	e0a1      	b.n	800525a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005124:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005126:	2300      	movs	r3, #0
 8005128:	61bb      	str	r3, [r7, #24]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	61bb      	str	r3, [r7, #24]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	61bb      	str	r3, [r7, #24]
 800513a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	e085      	b.n	800525a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005152:	b29b      	uxth	r3, r3
 8005154:	2b02      	cmp	r3, #2
 8005156:	d14d      	bne.n	80051f4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800515a:	2b04      	cmp	r3, #4
 800515c:	d016      	beq.n	800518c <I2C_Master_ADDR+0x228>
 800515e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005160:	2b02      	cmp	r3, #2
 8005162:	d013      	beq.n	800518c <I2C_Master_ADDR+0x228>
 8005164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005166:	2b10      	cmp	r3, #16
 8005168:	d010      	beq.n	800518c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005178:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005188:	601a      	str	r2, [r3, #0]
 800518a:	e007      	b.n	800519c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800519a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051aa:	d117      	bne.n	80051dc <I2C_Master_ADDR+0x278>
 80051ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80051b2:	d00b      	beq.n	80051cc <I2C_Master_ADDR+0x268>
 80051b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d008      	beq.n	80051cc <I2C_Master_ADDR+0x268>
 80051ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051bc:	2b08      	cmp	r3, #8
 80051be:	d005      	beq.n	80051cc <I2C_Master_ADDR+0x268>
 80051c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c2:	2b10      	cmp	r3, #16
 80051c4:	d002      	beq.n	80051cc <I2C_Master_ADDR+0x268>
 80051c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c8:	2b20      	cmp	r3, #32
 80051ca:	d107      	bne.n	80051dc <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80051da:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051dc:	2300      	movs	r3, #0
 80051de:	617b      	str	r3, [r7, #20]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	617b      	str	r3, [r7, #20]
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	e032      	b.n	800525a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005202:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800520e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005212:	d117      	bne.n	8005244 <I2C_Master_ADDR+0x2e0>
 8005214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005216:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800521a:	d00b      	beq.n	8005234 <I2C_Master_ADDR+0x2d0>
 800521c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800521e:	2b01      	cmp	r3, #1
 8005220:	d008      	beq.n	8005234 <I2C_Master_ADDR+0x2d0>
 8005222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005224:	2b08      	cmp	r3, #8
 8005226:	d005      	beq.n	8005234 <I2C_Master_ADDR+0x2d0>
 8005228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800522a:	2b10      	cmp	r3, #16
 800522c:	d002      	beq.n	8005234 <I2C_Master_ADDR+0x2d0>
 800522e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005230:	2b20      	cmp	r3, #32
 8005232:	d107      	bne.n	8005244 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005242:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005244:	2300      	movs	r3, #0
 8005246:	613b      	str	r3, [r7, #16]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	613b      	str	r3, [r7, #16]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	613b      	str	r3, [r7, #16]
 8005258:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005260:	e00b      	b.n	800527a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005262:	2300      	movs	r3, #0
 8005264:	60fb      	str	r3, [r7, #12]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	68fb      	ldr	r3, [r7, #12]
}
 8005278:	e7ff      	b.n	800527a <I2C_Master_ADDR+0x316>
 800527a:	bf00      	nop
 800527c:	3744      	adds	r7, #68	@ 0x44
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b084      	sub	sp, #16
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005294:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800529a:	b29b      	uxth	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d02b      	beq.n	80052f8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a4:	781a      	ldrb	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b0:	1c5a      	adds	r2, r3, #1
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	3b01      	subs	r3, #1
 80052be:	b29a      	uxth	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d114      	bne.n	80052f8 <I2C_SlaveTransmit_TXE+0x72>
 80052ce:	7bfb      	ldrb	r3, [r7, #15]
 80052d0:	2b29      	cmp	r3, #41	@ 0x29
 80052d2:	d111      	bne.n	80052f8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052e2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2221      	movs	r2, #33	@ 0x21
 80052e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2228      	movs	r2, #40	@ 0x28
 80052ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7ff f9cf 	bl	8004696 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80052f8:	bf00      	nop
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800530c:	b29b      	uxth	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d011      	beq.n	8005336 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005316:	781a      	ldrb	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005322:	1c5a      	adds	r2, r3, #1
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800532c:	b29b      	uxth	r3, r3
 800532e:	3b01      	subs	r3, #1
 8005330:	b29a      	uxth	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b084      	sub	sp, #16
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005350:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005356:	b29b      	uxth	r3, r3
 8005358:	2b00      	cmp	r3, #0
 800535a:	d02c      	beq.n	80053b6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	691a      	ldr	r2, [r3, #16]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005366:	b2d2      	uxtb	r2, r2
 8005368:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536e:	1c5a      	adds	r2, r3, #1
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005378:	b29b      	uxth	r3, r3
 800537a:	3b01      	subs	r3, #1
 800537c:	b29a      	uxth	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005386:	b29b      	uxth	r3, r3
 8005388:	2b00      	cmp	r3, #0
 800538a:	d114      	bne.n	80053b6 <I2C_SlaveReceive_RXNE+0x74>
 800538c:	7bfb      	ldrb	r3, [r7, #15]
 800538e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005390:	d111      	bne.n	80053b6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053a0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2222      	movs	r2, #34	@ 0x22
 80053a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2228      	movs	r2, #40	@ 0x28
 80053ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f7ff f97a 	bl	80046aa <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80053b6:	bf00      	nop
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80053be:	b480      	push	{r7}
 80053c0:	b083      	sub	sp, #12
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d012      	beq.n	80053f6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	691a      	ldr	r2, [r3, #16]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	3b01      	subs	r3, #1
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80053f6:	bf00      	nop
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b084      	sub	sp, #16
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
 800540a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800540c:	2300      	movs	r3, #0
 800540e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005416:	b2db      	uxtb	r3, r3
 8005418:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800541c:	2b28      	cmp	r3, #40	@ 0x28
 800541e:	d127      	bne.n	8005470 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800542e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	089b      	lsrs	r3, r3, #2
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800543c:	2301      	movs	r3, #1
 800543e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	09db      	lsrs	r3, r3, #7
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	2b00      	cmp	r3, #0
 800544a:	d103      	bne.n	8005454 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	81bb      	strh	r3, [r7, #12]
 8005452:	e002      	b.n	800545a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005462:	89ba      	ldrh	r2, [r7, #12]
 8005464:	7bfb      	ldrb	r3, [r7, #15]
 8005466:	4619      	mov	r1, r3
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f7ff f928 	bl	80046be <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800546e:	e00e      	b.n	800548e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005470:	2300      	movs	r3, #0
 8005472:	60bb      	str	r3, [r7, #8]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	60bb      	str	r3, [r7, #8]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	60bb      	str	r3, [r7, #8]
 8005484:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800548e:	bf00      	nop
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
	...

08005498 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054a6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80054b6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80054b8:	2300      	movs	r3, #0
 80054ba:	60bb      	str	r3, [r7, #8]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	60bb      	str	r3, [r7, #8]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0201 	orr.w	r2, r2, #1
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054e4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054f4:	d172      	bne.n	80055dc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80054f6:	7bfb      	ldrb	r3, [r7, #15]
 80054f8:	2b22      	cmp	r3, #34	@ 0x22
 80054fa:	d002      	beq.n	8005502 <I2C_Slave_STOPF+0x6a>
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
 80054fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8005500:	d135      	bne.n	800556e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	b29a      	uxth	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005514:	b29b      	uxth	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d005      	beq.n	8005526 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800551e:	f043 0204 	orr.w	r2, r3, #4
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005534:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800553a:	4618      	mov	r0, r3
 800553c:	f7fe fa80 	bl	8003a40 <HAL_DMA_GetState>
 8005540:	4603      	mov	r3, r0
 8005542:	2b01      	cmp	r3, #1
 8005544:	d049      	beq.n	80055da <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800554a:	4a69      	ldr	r2, [pc, #420]	@ (80056f0 <I2C_Slave_STOPF+0x258>)
 800554c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005552:	4618      	mov	r0, r3
 8005554:	f7fe f8c8 	bl	80036e8 <HAL_DMA_Abort_IT>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d03d      	beq.n	80055da <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005568:	4610      	mov	r0, r2
 800556a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800556c:	e035      	b.n	80055da <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	b29a      	uxth	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005580:	b29b      	uxth	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d005      	beq.n	8005592 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558a:	f043 0204 	orr.w	r2, r3, #4
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055a0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fe fa4a 	bl	8003a40 <HAL_DMA_GetState>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d014      	beq.n	80055dc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055b6:	4a4e      	ldr	r2, [pc, #312]	@ (80056f0 <I2C_Slave_STOPF+0x258>)
 80055b8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fe f892 	bl	80036e8 <HAL_DMA_Abort_IT>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d008      	beq.n	80055dc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80055d4:	4610      	mov	r0, r2
 80055d6:	4798      	blx	r3
 80055d8:	e000      	b.n	80055dc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80055da:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d03e      	beq.n	8005664 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	695b      	ldr	r3, [r3, #20]
 80055ec:	f003 0304 	and.w	r3, r3, #4
 80055f0:	2b04      	cmp	r3, #4
 80055f2:	d112      	bne.n	800561a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	691a      	ldr	r2, [r3, #16]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fe:	b2d2      	uxtb	r2, r2
 8005600:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005606:	1c5a      	adds	r2, r3, #1
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005610:	b29b      	uxth	r3, r3
 8005612:	3b01      	subs	r3, #1
 8005614:	b29a      	uxth	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005624:	2b40      	cmp	r3, #64	@ 0x40
 8005626:	d112      	bne.n	800564e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	691a      	ldr	r2, [r3, #16]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005632:	b2d2      	uxtb	r2, r2
 8005634:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563a:	1c5a      	adds	r2, r3, #1
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005644:	b29b      	uxth	r3, r3
 8005646:	3b01      	subs	r3, #1
 8005648:	b29a      	uxth	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005652:	b29b      	uxth	r3, r3
 8005654:	2b00      	cmp	r3, #0
 8005656:	d005      	beq.n	8005664 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565c:	f043 0204 	orr.w	r2, r3, #4
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f8b7 	bl	80057e0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005672:	e039      	b.n	80056e8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005674:	7bfb      	ldrb	r3, [r7, #15]
 8005676:	2b2a      	cmp	r3, #42	@ 0x2a
 8005678:	d109      	bne.n	800568e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2228      	movs	r2, #40	@ 0x28
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f7ff f80e 	bl	80046aa <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b28      	cmp	r3, #40	@ 0x28
 8005698:	d111      	bne.n	80056be <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a15      	ldr	r2, [pc, #84]	@ (80056f4 <I2C_Slave_STOPF+0x25c>)
 800569e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2220      	movs	r2, #32
 80056aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f7ff f80f 	bl	80046da <HAL_I2C_ListenCpltCallback>
}
 80056bc:	e014      	b.n	80056e8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c2:	2b22      	cmp	r3, #34	@ 0x22
 80056c4:	d002      	beq.n	80056cc <I2C_Slave_STOPF+0x234>
 80056c6:	7bfb      	ldrb	r3, [r7, #15]
 80056c8:	2b22      	cmp	r3, #34	@ 0x22
 80056ca:	d10d      	bne.n	80056e8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2220      	movs	r2, #32
 80056d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7fe ffe1 	bl	80046aa <HAL_I2C_SlaveRxCpltCallback>
}
 80056e8:	bf00      	nop
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	08005a45 	.word	0x08005a45
 80056f4:	ffff0000 	.word	0xffff0000

080056f8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005706:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2b08      	cmp	r3, #8
 8005712:	d002      	beq.n	800571a <I2C_Slave_AF+0x22>
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	2b20      	cmp	r3, #32
 8005718:	d129      	bne.n	800576e <I2C_Slave_AF+0x76>
 800571a:	7bfb      	ldrb	r3, [r7, #15]
 800571c:	2b28      	cmp	r3, #40	@ 0x28
 800571e:	d126      	bne.n	800576e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a2e      	ldr	r2, [pc, #184]	@ (80057dc <I2C_Slave_AF+0xe4>)
 8005724:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005734:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800573e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800574e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2220      	movs	r2, #32
 800575a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7fe ffb7 	bl	80046da <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800576c:	e031      	b.n	80057d2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800576e:	7bfb      	ldrb	r3, [r7, #15]
 8005770:	2b21      	cmp	r3, #33	@ 0x21
 8005772:	d129      	bne.n	80057c8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a19      	ldr	r2, [pc, #100]	@ (80057dc <I2C_Slave_AF+0xe4>)
 8005778:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2221      	movs	r2, #33	@ 0x21
 800577e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2220      	movs	r2, #32
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800579e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80057a8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057b8:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7fe fd2a 	bl	8004214 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f7fe ff68 	bl	8004696 <HAL_I2C_SlaveTxCpltCallback>
}
 80057c6:	e004      	b.n	80057d2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80057d0:	615a      	str	r2, [r3, #20]
}
 80057d2:	bf00      	nop
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	ffff0000 	.word	0xffff0000

080057e0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057ee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057f6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80057f8:	7bbb      	ldrb	r3, [r7, #14]
 80057fa:	2b10      	cmp	r3, #16
 80057fc:	d002      	beq.n	8005804 <I2C_ITError+0x24>
 80057fe:	7bbb      	ldrb	r3, [r7, #14]
 8005800:	2b40      	cmp	r3, #64	@ 0x40
 8005802:	d10a      	bne.n	800581a <I2C_ITError+0x3a>
 8005804:	7bfb      	ldrb	r3, [r7, #15]
 8005806:	2b22      	cmp	r3, #34	@ 0x22
 8005808:	d107      	bne.n	800581a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005818:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800581a:	7bfb      	ldrb	r3, [r7, #15]
 800581c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005820:	2b28      	cmp	r3, #40	@ 0x28
 8005822:	d107      	bne.n	8005834 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2228      	movs	r2, #40	@ 0x28
 800582e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005832:	e015      	b.n	8005860 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800583e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005842:	d00a      	beq.n	800585a <I2C_ITError+0x7a>
 8005844:	7bfb      	ldrb	r3, [r7, #15]
 8005846:	2b60      	cmp	r3, #96	@ 0x60
 8005848:	d007      	beq.n	800585a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2220      	movs	r2, #32
 800584e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800586a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800586e:	d162      	bne.n	8005936 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800587e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005884:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b01      	cmp	r3, #1
 800588c:	d020      	beq.n	80058d0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005892:	4a6a      	ldr	r2, [pc, #424]	@ (8005a3c <I2C_ITError+0x25c>)
 8005894:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800589a:	4618      	mov	r0, r3
 800589c:	f7fd ff24 	bl	80036e8 <HAL_DMA_Abort_IT>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f000 8089 	beq.w	80059ba <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 0201 	bic.w	r2, r2, #1
 80058b6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2220      	movs	r2, #32
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80058ca:	4610      	mov	r0, r2
 80058cc:	4798      	blx	r3
 80058ce:	e074      	b.n	80059ba <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d4:	4a59      	ldr	r2, [pc, #356]	@ (8005a3c <I2C_ITError+0x25c>)
 80058d6:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058dc:	4618      	mov	r0, r3
 80058de:	f7fd ff03 	bl	80036e8 <HAL_DMA_Abort_IT>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d068      	beq.n	80059ba <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f2:	2b40      	cmp	r3, #64	@ 0x40
 80058f4:	d10b      	bne.n	800590e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	691a      	ldr	r2, [r3, #16]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005900:	b2d2      	uxtb	r2, r2
 8005902:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005908:	1c5a      	adds	r2, r3, #1
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 0201 	bic.w	r2, r2, #1
 800591c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2220      	movs	r2, #32
 8005922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800592a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005930:	4610      	mov	r0, r2
 8005932:	4798      	blx	r3
 8005934:	e041      	b.n	80059ba <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b60      	cmp	r3, #96	@ 0x60
 8005940:	d125      	bne.n	800598e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2220      	movs	r2, #32
 8005946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800595a:	2b40      	cmp	r3, #64	@ 0x40
 800595c:	d10b      	bne.n	8005976 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	691a      	ldr	r2, [r3, #16]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005970:	1c5a      	adds	r2, r3, #1
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f022 0201 	bic.w	r2, r2, #1
 8005984:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7fe fecf 	bl	800472a <HAL_I2C_AbortCpltCallback>
 800598c:	e015      	b.n	80059ba <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005998:	2b40      	cmp	r3, #64	@ 0x40
 800599a:	d10b      	bne.n	80059b4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	691a      	ldr	r2, [r3, #16]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a6:	b2d2      	uxtb	r2, r2
 80059a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f7fe feae 	bl	8004716 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059be:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10e      	bne.n	80059e8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d109      	bne.n	80059e8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d104      	bne.n	80059e8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d007      	beq.n	80059f8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80059f6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059fe:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a04:	f003 0304 	and.w	r3, r3, #4
 8005a08:	2b04      	cmp	r3, #4
 8005a0a:	d113      	bne.n	8005a34 <I2C_ITError+0x254>
 8005a0c:	7bfb      	ldrb	r3, [r7, #15]
 8005a0e:	2b28      	cmp	r3, #40	@ 0x28
 8005a10:	d110      	bne.n	8005a34 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a0a      	ldr	r2, [pc, #40]	@ (8005a40 <I2C_ITError+0x260>)
 8005a16:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2220      	movs	r2, #32
 8005a22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7fe fe53 	bl	80046da <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a34:	bf00      	nop
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	08005a45 	.word	0x08005a45
 8005a40:	ffff0000 	.word	0xffff0000

08005a44 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a54:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a5c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005a5e:	4b4b      	ldr	r3, [pc, #300]	@ (8005b8c <I2C_DMAAbort+0x148>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	08db      	lsrs	r3, r3, #3
 8005a64:	4a4a      	ldr	r2, [pc, #296]	@ (8005b90 <I2C_DMAAbort+0x14c>)
 8005a66:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6a:	0a1a      	lsrs	r2, r3, #8
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	00da      	lsls	r2, r3, #3
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d106      	bne.n	8005a8c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a82:	f043 0220 	orr.w	r2, r3, #32
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005a8a:	e00a      	b.n	8005aa2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005aa0:	d0ea      	beq.n	8005a78 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aae:	2200      	movs	r2, #0
 8005ab0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d003      	beq.n	8005ac2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005abe:	2200      	movs	r2, #0
 8005ac0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ad0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d003      	beq.n	8005ae8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d003      	beq.n	8005af8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005af4:	2200      	movs	r2, #0
 8005af6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 0201 	bic.w	r2, r2, #1
 8005b06:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b60      	cmp	r3, #96	@ 0x60
 8005b12:	d10e      	bne.n	8005b32 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	2200      	movs	r2, #0
 8005b28:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005b2a:	6978      	ldr	r0, [r7, #20]
 8005b2c:	f7fe fdfd 	bl	800472a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b30:	e027      	b.n	8005b82 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b32:	7cfb      	ldrb	r3, [r7, #19]
 8005b34:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005b38:	2b28      	cmp	r3, #40	@ 0x28
 8005b3a:	d117      	bne.n	8005b6c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0201 	orr.w	r2, r2, #1
 8005b4a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005b5a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2228      	movs	r2, #40	@ 0x28
 8005b66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005b6a:	e007      	b.n	8005b7c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005b7c:	6978      	ldr	r0, [r7, #20]
 8005b7e:	f7fe fdca 	bl	8004716 <HAL_I2C_ErrorCallback>
}
 8005b82:	bf00      	nop
 8005b84:	3718      	adds	r7, #24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	20000000 	.word	0x20000000
 8005b90:	14f8b589 	.word	0x14f8b589

08005b94 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005ba0:	4b13      	ldr	r3, [pc, #76]	@ (8005bf0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	08db      	lsrs	r3, r3, #3
 8005ba6:	4a13      	ldr	r2, [pc, #76]	@ (8005bf4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bac:	0a1a      	lsrs	r2, r3, #8
 8005bae:	4613      	mov	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4413      	add	r3, r2
 8005bb4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d107      	bne.n	8005bd2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc6:	f043 0220 	orr.w	r2, r3, #32
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e008      	b.n	8005be4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005be0:	d0e9      	beq.n	8005bb6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3714      	adds	r7, #20
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	20000000 	.word	0x20000000
 8005bf4:	14f8b589 	.word	0x14f8b589

08005bf8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c04:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005c08:	d103      	bne.n	8005c12 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005c10:	e007      	b.n	8005c22 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c16:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005c1a:	d102      	bne.n	8005c22 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2208      	movs	r2, #8
 8005c20:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005c22:	bf00      	nop
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b086      	sub	sp, #24
 8005c32:	af02      	add	r7, sp, #8
 8005c34:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e101      	b.n	8005e44 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d106      	bne.n	8005c60 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f006 fbe2 	bl	800c424 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2203      	movs	r2, #3
 8005c64:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c6e:	d102      	bne.n	8005c76 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f002 ff37 	bl	8008aee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6818      	ldr	r0, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	7c1a      	ldrb	r2, [r3, #16]
 8005c88:	f88d 2000 	strb.w	r2, [sp]
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c90:	f002 fe16 	bl	80088c0 <USB_CoreInit>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d005      	beq.n	8005ca6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2202      	movs	r2, #2
 8005c9e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e0ce      	b.n	8005e44 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2100      	movs	r1, #0
 8005cac:	4618      	mov	r0, r3
 8005cae:	f002 ff2f 	bl	8008b10 <USB_SetCurrentMode>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d005      	beq.n	8005cc4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2202      	movs	r2, #2
 8005cbc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e0bf      	b.n	8005e44 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	73fb      	strb	r3, [r7, #15]
 8005cc8:	e04a      	b.n	8005d60 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005cca:	7bfa      	ldrb	r2, [r7, #15]
 8005ccc:	6879      	ldr	r1, [r7, #4]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	440b      	add	r3, r1
 8005cd8:	3315      	adds	r3, #21
 8005cda:	2201      	movs	r2, #1
 8005cdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005cde:	7bfa      	ldrb	r2, [r7, #15]
 8005ce0:	6879      	ldr	r1, [r7, #4]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	00db      	lsls	r3, r3, #3
 8005ce6:	4413      	add	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	440b      	add	r3, r1
 8005cec:	3314      	adds	r3, #20
 8005cee:	7bfa      	ldrb	r2, [r7, #15]
 8005cf0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005cf2:	7bfa      	ldrb	r2, [r7, #15]
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
 8005cf6:	b298      	uxth	r0, r3
 8005cf8:	6879      	ldr	r1, [r7, #4]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	00db      	lsls	r3, r3, #3
 8005cfe:	4413      	add	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	440b      	add	r3, r1
 8005d04:	332e      	adds	r3, #46	@ 0x2e
 8005d06:	4602      	mov	r2, r0
 8005d08:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005d0a:	7bfa      	ldrb	r2, [r7, #15]
 8005d0c:	6879      	ldr	r1, [r7, #4]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	00db      	lsls	r3, r3, #3
 8005d12:	4413      	add	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	440b      	add	r3, r1
 8005d18:	3318      	adds	r3, #24
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005d1e:	7bfa      	ldrb	r2, [r7, #15]
 8005d20:	6879      	ldr	r1, [r7, #4]
 8005d22:	4613      	mov	r3, r2
 8005d24:	00db      	lsls	r3, r3, #3
 8005d26:	4413      	add	r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	440b      	add	r3, r1
 8005d2c:	331c      	adds	r3, #28
 8005d2e:	2200      	movs	r2, #0
 8005d30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005d32:	7bfa      	ldrb	r2, [r7, #15]
 8005d34:	6879      	ldr	r1, [r7, #4]
 8005d36:	4613      	mov	r3, r2
 8005d38:	00db      	lsls	r3, r3, #3
 8005d3a:	4413      	add	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	440b      	add	r3, r1
 8005d40:	3320      	adds	r3, #32
 8005d42:	2200      	movs	r2, #0
 8005d44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005d46:	7bfa      	ldrb	r2, [r7, #15]
 8005d48:	6879      	ldr	r1, [r7, #4]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	00db      	lsls	r3, r3, #3
 8005d4e:	4413      	add	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	440b      	add	r3, r1
 8005d54:	3324      	adds	r3, #36	@ 0x24
 8005d56:	2200      	movs	r2, #0
 8005d58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d5a:	7bfb      	ldrb	r3, [r7, #15]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	73fb      	strb	r3, [r7, #15]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	791b      	ldrb	r3, [r3, #4]
 8005d64:	7bfa      	ldrb	r2, [r7, #15]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d3af      	bcc.n	8005cca <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	73fb      	strb	r3, [r7, #15]
 8005d6e:	e044      	b.n	8005dfa <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005d70:	7bfa      	ldrb	r2, [r7, #15]
 8005d72:	6879      	ldr	r1, [r7, #4]
 8005d74:	4613      	mov	r3, r2
 8005d76:	00db      	lsls	r3, r3, #3
 8005d78:	4413      	add	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	440b      	add	r3, r1
 8005d7e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005d82:	2200      	movs	r2, #0
 8005d84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005d86:	7bfa      	ldrb	r2, [r7, #15]
 8005d88:	6879      	ldr	r1, [r7, #4]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	00db      	lsls	r3, r3, #3
 8005d8e:	4413      	add	r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	440b      	add	r3, r1
 8005d94:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005d98:	7bfa      	ldrb	r2, [r7, #15]
 8005d9a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005d9c:	7bfa      	ldrb	r2, [r7, #15]
 8005d9e:	6879      	ldr	r1, [r7, #4]
 8005da0:	4613      	mov	r3, r2
 8005da2:	00db      	lsls	r3, r3, #3
 8005da4:	4413      	add	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	440b      	add	r3, r1
 8005daa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005dae:	2200      	movs	r2, #0
 8005db0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005db2:	7bfa      	ldrb	r2, [r7, #15]
 8005db4:	6879      	ldr	r1, [r7, #4]
 8005db6:	4613      	mov	r3, r2
 8005db8:	00db      	lsls	r3, r3, #3
 8005dba:	4413      	add	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	440b      	add	r3, r1
 8005dc0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005dc8:	7bfa      	ldrb	r2, [r7, #15]
 8005dca:	6879      	ldr	r1, [r7, #4]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	00db      	lsls	r3, r3, #3
 8005dd0:	4413      	add	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	440b      	add	r3, r1
 8005dd6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005dda:	2200      	movs	r2, #0
 8005ddc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005dde:	7bfa      	ldrb	r2, [r7, #15]
 8005de0:	6879      	ldr	r1, [r7, #4]
 8005de2:	4613      	mov	r3, r2
 8005de4:	00db      	lsls	r3, r3, #3
 8005de6:	4413      	add	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	440b      	add	r3, r1
 8005dec:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005df0:	2200      	movs	r2, #0
 8005df2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
 8005df6:	3301      	adds	r3, #1
 8005df8:	73fb      	strb	r3, [r7, #15]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	791b      	ldrb	r3, [r3, #4]
 8005dfe:	7bfa      	ldrb	r2, [r7, #15]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d3b5      	bcc.n	8005d70 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6818      	ldr	r0, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	7c1a      	ldrb	r2, [r3, #16]
 8005e0c:	f88d 2000 	strb.w	r2, [sp]
 8005e10:	3304      	adds	r3, #4
 8005e12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e14:	f002 fec8 	bl	8008ba8 <USB_DevInit>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d005      	beq.n	8005e2a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2202      	movs	r2, #2
 8005e22:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e00c      	b.n	8005e44 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f003 ff12 	bl	8009c66 <USB_DevDisconnect>

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d101      	bne.n	8005e68 <HAL_PCD_Start+0x1c>
 8005e64:	2302      	movs	r3, #2
 8005e66:	e022      	b.n	8005eae <HAL_PCD_Start+0x62>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d009      	beq.n	8005e90 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d105      	bne.n	8005e90 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e88:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4618      	mov	r0, r3
 8005e96:	f002 fe19 	bl	8008acc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f003 fec0 	bl	8009c24 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3710      	adds	r7, #16
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005eb6:	b590      	push	{r4, r7, lr}
 8005eb8:	b08d      	sub	sp, #52	@ 0x34
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec4:	6a3b      	ldr	r3, [r7, #32]
 8005ec6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f003 ff7e 	bl	8009dce <USB_GetMode>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f040 848c 	bne.w	80067f2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f003 fee2 	bl	8009ca8 <USB_ReadInterrupts>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f000 8482 	beq.w	80067f0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	0a1b      	lsrs	r3, r3, #8
 8005ef6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f003 fecf 	bl	8009ca8 <USB_ReadInterrupts>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d107      	bne.n	8005f24 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	695a      	ldr	r2, [r3, #20]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f002 0202 	and.w	r2, r2, #2
 8005f22:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f003 febd 	bl	8009ca8 <USB_ReadInterrupts>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	f003 0310 	and.w	r3, r3, #16
 8005f34:	2b10      	cmp	r3, #16
 8005f36:	d161      	bne.n	8005ffc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	699a      	ldr	r2, [r3, #24]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f022 0210 	bic.w	r2, r2, #16
 8005f46:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005f48:	6a3b      	ldr	r3, [r7, #32]
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	f003 020f 	and.w	r2, r3, #15
 8005f54:	4613      	mov	r3, r2
 8005f56:	00db      	lsls	r3, r3, #3
 8005f58:	4413      	add	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	4413      	add	r3, r2
 8005f64:	3304      	adds	r3, #4
 8005f66:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005f6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f72:	d124      	bne.n	8005fbe <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d035      	beq.n	8005fec <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	091b      	lsrs	r3, r3, #4
 8005f88:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005f8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	461a      	mov	r2, r3
 8005f92:	6a38      	ldr	r0, [r7, #32]
 8005f94:	f003 fcf4 	bl	8009980 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	68da      	ldr	r2, [r3, #12]
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	091b      	lsrs	r3, r3, #4
 8005fa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fa4:	441a      	add	r2, r3
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	695a      	ldr	r2, [r3, #20]
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	091b      	lsrs	r3, r3, #4
 8005fb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fb6:	441a      	add	r2, r3
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	615a      	str	r2, [r3, #20]
 8005fbc:	e016      	b.n	8005fec <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005fc4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005fc8:	d110      	bne.n	8005fec <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005fd0:	2208      	movs	r2, #8
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	6a38      	ldr	r0, [r7, #32]
 8005fd6:	f003 fcd3 	bl	8009980 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	695a      	ldr	r2, [r3, #20]
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	091b      	lsrs	r3, r3, #4
 8005fe2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fe6:	441a      	add	r2, r3
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	699a      	ldr	r2, [r3, #24]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f042 0210 	orr.w	r2, r2, #16
 8005ffa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4618      	mov	r0, r3
 8006002:	f003 fe51 	bl	8009ca8 <USB_ReadInterrupts>
 8006006:	4603      	mov	r3, r0
 8006008:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800600c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006010:	f040 80a7 	bne.w	8006162 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006014:	2300      	movs	r3, #0
 8006016:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4618      	mov	r0, r3
 800601e:	f003 fe56 	bl	8009cce <USB_ReadDevAllOutEpInterrupt>
 8006022:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006024:	e099      	b.n	800615a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006028:	f003 0301 	and.w	r3, r3, #1
 800602c:	2b00      	cmp	r3, #0
 800602e:	f000 808e 	beq.w	800614e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006038:	b2d2      	uxtb	r2, r2
 800603a:	4611      	mov	r1, r2
 800603c:	4618      	mov	r0, r3
 800603e:	f003 fe7a 	bl	8009d36 <USB_ReadDevOutEPInterrupt>
 8006042:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00c      	beq.n	8006068 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800604e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	4413      	add	r3, r2
 8006056:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800605a:	461a      	mov	r2, r3
 800605c:	2301      	movs	r3, #1
 800605e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006060:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 fea4 	bl	8006db0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	f003 0308 	and.w	r3, r3, #8
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00c      	beq.n	800608c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	4413      	add	r3, r2
 800607a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800607e:	461a      	mov	r2, r3
 8006080:	2308      	movs	r3, #8
 8006082:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006084:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 ff7a 	bl	8006f80 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	f003 0310 	and.w	r3, r3, #16
 8006092:	2b00      	cmp	r3, #0
 8006094:	d008      	beq.n	80060a8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060a2:	461a      	mov	r2, r3
 80060a4:	2310      	movs	r3, #16
 80060a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d030      	beq.n	8006114 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80060b2:	6a3b      	ldr	r3, [r7, #32]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060ba:	2b80      	cmp	r3, #128	@ 0x80
 80060bc:	d109      	bne.n	80060d2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	69fa      	ldr	r2, [r7, #28]
 80060c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80060d0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80060d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060d4:	4613      	mov	r3, r2
 80060d6:	00db      	lsls	r3, r3, #3
 80060d8:	4413      	add	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	4413      	add	r3, r2
 80060e4:	3304      	adds	r3, #4
 80060e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	78db      	ldrb	r3, [r3, #3]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d108      	bne.n	8006102 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	2200      	movs	r2, #0
 80060f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80060f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	4619      	mov	r1, r3
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f006 fa8d 	bl	800c61c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	4413      	add	r3, r2
 800610a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800610e:	461a      	mov	r2, r3
 8006110:	2302      	movs	r3, #2
 8006112:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	f003 0320 	and.w	r3, r3, #32
 800611a:	2b00      	cmp	r3, #0
 800611c:	d008      	beq.n	8006130 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800611e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006120:	015a      	lsls	r2, r3, #5
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	4413      	add	r3, r2
 8006126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800612a:	461a      	mov	r2, r3
 800612c:	2320      	movs	r3, #32
 800612e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d009      	beq.n	800614e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800613a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613c:	015a      	lsls	r2, r3, #5
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	4413      	add	r3, r2
 8006142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006146:	461a      	mov	r2, r3
 8006148:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800614c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800614e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006150:	3301      	adds	r3, #1
 8006152:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006156:	085b      	lsrs	r3, r3, #1
 8006158:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800615a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800615c:	2b00      	cmp	r3, #0
 800615e:	f47f af62 	bne.w	8006026 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4618      	mov	r0, r3
 8006168:	f003 fd9e 	bl	8009ca8 <USB_ReadInterrupts>
 800616c:	4603      	mov	r3, r0
 800616e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006172:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006176:	f040 80db 	bne.w	8006330 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4618      	mov	r0, r3
 8006180:	f003 fdbf 	bl	8009d02 <USB_ReadDevAllInEpInterrupt>
 8006184:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006186:	2300      	movs	r3, #0
 8006188:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800618a:	e0cd      	b.n	8006328 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800618c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	2b00      	cmp	r3, #0
 8006194:	f000 80c2 	beq.w	800631c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800619e:	b2d2      	uxtb	r2, r2
 80061a0:	4611      	mov	r1, r2
 80061a2:	4618      	mov	r0, r3
 80061a4:	f003 fde5 	bl	8009d72 <USB_ReadDevInEPInterrupt>
 80061a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d057      	beq.n	8006264 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80061b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b6:	f003 030f 	and.w	r3, r3, #15
 80061ba:	2201      	movs	r2, #1
 80061bc:	fa02 f303 	lsl.w	r3, r2, r3
 80061c0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	43db      	mvns	r3, r3
 80061ce:	69f9      	ldr	r1, [r7, #28]
 80061d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80061d4:	4013      	ands	r3, r2
 80061d6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80061d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061e4:	461a      	mov	r2, r3
 80061e6:	2301      	movs	r3, #1
 80061e8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	799b      	ldrb	r3, [r3, #6]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d132      	bne.n	8006258 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80061f2:	6879      	ldr	r1, [r7, #4]
 80061f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061f6:	4613      	mov	r3, r2
 80061f8:	00db      	lsls	r3, r3, #3
 80061fa:	4413      	add	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	440b      	add	r3, r1
 8006200:	3320      	adds	r3, #32
 8006202:	6819      	ldr	r1, [r3, #0]
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006208:	4613      	mov	r3, r2
 800620a:	00db      	lsls	r3, r3, #3
 800620c:	4413      	add	r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4403      	add	r3, r0
 8006212:	331c      	adds	r3, #28
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4419      	add	r1, r3
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800621c:	4613      	mov	r3, r2
 800621e:	00db      	lsls	r3, r3, #3
 8006220:	4413      	add	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4403      	add	r3, r0
 8006226:	3320      	adds	r3, #32
 8006228:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800622a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622c:	2b00      	cmp	r3, #0
 800622e:	d113      	bne.n	8006258 <HAL_PCD_IRQHandler+0x3a2>
 8006230:	6879      	ldr	r1, [r7, #4]
 8006232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006234:	4613      	mov	r3, r2
 8006236:	00db      	lsls	r3, r3, #3
 8006238:	4413      	add	r3, r2
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	440b      	add	r3, r1
 800623e:	3324      	adds	r3, #36	@ 0x24
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d108      	bne.n	8006258 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6818      	ldr	r0, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006250:	461a      	mov	r2, r3
 8006252:	2101      	movs	r1, #1
 8006254:	f003 fdec 	bl	8009e30 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625a:	b2db      	uxtb	r3, r3
 800625c:	4619      	mov	r1, r3
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f006 f961 	bl	800c526 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	f003 0308 	and.w	r3, r3, #8
 800626a:	2b00      	cmp	r3, #0
 800626c:	d008      	beq.n	8006280 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800626e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006270:	015a      	lsls	r2, r3, #5
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	4413      	add	r3, r2
 8006276:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800627a:	461a      	mov	r2, r3
 800627c:	2308      	movs	r3, #8
 800627e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	f003 0310 	and.w	r3, r3, #16
 8006286:	2b00      	cmp	r3, #0
 8006288:	d008      	beq.n	800629c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800628a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628c:	015a      	lsls	r2, r3, #5
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	4413      	add	r3, r2
 8006292:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006296:	461a      	mov	r2, r3
 8006298:	2310      	movs	r3, #16
 800629a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d008      	beq.n	80062b8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80062a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062b2:	461a      	mov	r2, r3
 80062b4:	2340      	movs	r3, #64	@ 0x40
 80062b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d023      	beq.n	800630a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80062c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80062c4:	6a38      	ldr	r0, [r7, #32]
 80062c6:	f002 fdd3 	bl	8008e70 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80062ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062cc:	4613      	mov	r3, r2
 80062ce:	00db      	lsls	r3, r3, #3
 80062d0:	4413      	add	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	3310      	adds	r3, #16
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	4413      	add	r3, r2
 80062da:	3304      	adds	r3, #4
 80062dc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	78db      	ldrb	r3, [r3, #3]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d108      	bne.n	80062f8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	2200      	movs	r2, #0
 80062ea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80062ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	4619      	mov	r1, r3
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f006 f9a4 	bl	800c640 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80062f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fa:	015a      	lsls	r2, r3, #5
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	4413      	add	r3, r2
 8006300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006304:	461a      	mov	r2, r3
 8006306:	2302      	movs	r3, #2
 8006308:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006310:	2b00      	cmp	r3, #0
 8006312:	d003      	beq.n	800631c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006314:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 fcbd 	bl	8006c96 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800631c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631e:	3301      	adds	r3, #1
 8006320:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006324:	085b      	lsrs	r3, r3, #1
 8006326:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800632a:	2b00      	cmp	r3, #0
 800632c:	f47f af2e 	bne.w	800618c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4618      	mov	r0, r3
 8006336:	f003 fcb7 	bl	8009ca8 <USB_ReadInterrupts>
 800633a:	4603      	mov	r3, r0
 800633c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006340:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006344:	d122      	bne.n	800638c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	69fa      	ldr	r2, [r7, #28]
 8006350:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006354:	f023 0301 	bic.w	r3, r3, #1
 8006358:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006360:	2b01      	cmp	r3, #1
 8006362:	d108      	bne.n	8006376 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800636c:	2100      	movs	r1, #0
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fea4 	bl	80070bc <HAL_PCDEx_LPM_Callback>
 8006374:	e002      	b.n	800637c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f006 f942 	bl	800c600 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	695a      	ldr	r2, [r3, #20]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800638a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4618      	mov	r0, r3
 8006392:	f003 fc89 	bl	8009ca8 <USB_ReadInterrupts>
 8006396:	4603      	mov	r3, r0
 8006398:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800639c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063a0:	d112      	bne.n	80063c8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f003 0301 	and.w	r3, r3, #1
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d102      	bne.n	80063b8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f006 f8fe 	bl	800c5b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	695a      	ldr	r2, [r3, #20]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80063c6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4618      	mov	r0, r3
 80063ce:	f003 fc6b 	bl	8009ca8 <USB_ReadInterrupts>
 80063d2:	4603      	mov	r3, r0
 80063d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80063d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063dc:	f040 80b7 	bne.w	800654e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	69fa      	ldr	r2, [r7, #28]
 80063ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063ee:	f023 0301 	bic.w	r3, r3, #1
 80063f2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2110      	movs	r1, #16
 80063fa:	4618      	mov	r0, r3
 80063fc:	f002 fd38 	bl	8008e70 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006400:	2300      	movs	r3, #0
 8006402:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006404:	e046      	b.n	8006494 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006408:	015a      	lsls	r2, r3, #5
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	4413      	add	r3, r2
 800640e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006412:	461a      	mov	r2, r3
 8006414:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006418:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800641a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800641c:	015a      	lsls	r2, r3, #5
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	4413      	add	r3, r2
 8006422:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800642a:	0151      	lsls	r1, r2, #5
 800642c:	69fa      	ldr	r2, [r7, #28]
 800642e:	440a      	add	r2, r1
 8006430:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006434:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006438:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800643a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800643c:	015a      	lsls	r2, r3, #5
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	4413      	add	r3, r2
 8006442:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006446:	461a      	mov	r2, r3
 8006448:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800644c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800644e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	4413      	add	r3, r2
 8006456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800645e:	0151      	lsls	r1, r2, #5
 8006460:	69fa      	ldr	r2, [r7, #28]
 8006462:	440a      	add	r2, r1
 8006464:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006468:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800646c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800646e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	4413      	add	r3, r2
 8006476:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800647e:	0151      	lsls	r1, r2, #5
 8006480:	69fa      	ldr	r2, [r7, #28]
 8006482:	440a      	add	r2, r1
 8006484:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006488:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800648c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800648e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006490:	3301      	adds	r3, #1
 8006492:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	791b      	ldrb	r3, [r3, #4]
 8006498:	461a      	mov	r2, r3
 800649a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800649c:	4293      	cmp	r3, r2
 800649e:	d3b2      	bcc.n	8006406 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064a6:	69db      	ldr	r3, [r3, #28]
 80064a8:	69fa      	ldr	r2, [r7, #28]
 80064aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064ae:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80064b2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	7bdb      	ldrb	r3, [r3, #15]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d016      	beq.n	80064ea <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064c6:	69fa      	ldr	r2, [r7, #28]
 80064c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064cc:	f043 030b 	orr.w	r3, r3, #11
 80064d0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064dc:	69fa      	ldr	r2, [r7, #28]
 80064de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064e2:	f043 030b 	orr.w	r3, r3, #11
 80064e6:	6453      	str	r3, [r2, #68]	@ 0x44
 80064e8:	e015      	b.n	8006516 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	69fa      	ldr	r2, [r7, #28]
 80064f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80064fc:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8006500:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	69fa      	ldr	r2, [r7, #28]
 800650c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006510:	f043 030b 	orr.w	r3, r3, #11
 8006514:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	69fa      	ldr	r2, [r7, #28]
 8006520:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006524:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006528:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6818      	ldr	r0, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006538:	461a      	mov	r2, r3
 800653a:	f003 fc79 	bl	8009e30 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	695a      	ldr	r2, [r3, #20]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800654c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4618      	mov	r0, r3
 8006554:	f003 fba8 	bl	8009ca8 <USB_ReadInterrupts>
 8006558:	4603      	mov	r3, r0
 800655a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800655e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006562:	d123      	bne.n	80065ac <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4618      	mov	r0, r3
 800656a:	f003 fc3e 	bl	8009dea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4618      	mov	r0, r3
 8006574:	f002 fcf5 	bl	8008f62 <USB_GetDevSpeed>
 8006578:	4603      	mov	r3, r0
 800657a:	461a      	mov	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681c      	ldr	r4, [r3, #0]
 8006584:	f001 f9ca 	bl	800791c <HAL_RCC_GetHCLKFreq>
 8006588:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800658e:	461a      	mov	r2, r3
 8006590:	4620      	mov	r0, r4
 8006592:	f002 f9f9 	bl	8008988 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f005 ffed 	bl	800c576 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	695a      	ldr	r2, [r3, #20]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80065aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4618      	mov	r0, r3
 80065b2:	f003 fb79 	bl	8009ca8 <USB_ReadInterrupts>
 80065b6:	4603      	mov	r3, r0
 80065b8:	f003 0308 	and.w	r3, r3, #8
 80065bc:	2b08      	cmp	r3, #8
 80065be:	d10a      	bne.n	80065d6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f005 ffca 	bl	800c55a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	695a      	ldr	r2, [r3, #20]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f002 0208 	and.w	r2, r2, #8
 80065d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4618      	mov	r0, r3
 80065dc:	f003 fb64 	bl	8009ca8 <USB_ReadInterrupts>
 80065e0:	4603      	mov	r3, r0
 80065e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065e6:	2b80      	cmp	r3, #128	@ 0x80
 80065e8:	d123      	bne.n	8006632 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80065f2:	6a3b      	ldr	r3, [r7, #32]
 80065f4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80065f6:	2301      	movs	r3, #1
 80065f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80065fa:	e014      	b.n	8006626 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80065fc:	6879      	ldr	r1, [r7, #4]
 80065fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006600:	4613      	mov	r3, r2
 8006602:	00db      	lsls	r3, r3, #3
 8006604:	4413      	add	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	440b      	add	r3, r1
 800660a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d105      	bne.n	8006620 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006616:	b2db      	uxtb	r3, r3
 8006618:	4619      	mov	r1, r3
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fb0a 	bl	8006c34 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006622:	3301      	adds	r3, #1
 8006624:	627b      	str	r3, [r7, #36]	@ 0x24
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	791b      	ldrb	r3, [r3, #4]
 800662a:	461a      	mov	r2, r3
 800662c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662e:	4293      	cmp	r3, r2
 8006630:	d3e4      	bcc.n	80065fc <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4618      	mov	r0, r3
 8006638:	f003 fb36 	bl	8009ca8 <USB_ReadInterrupts>
 800663c:	4603      	mov	r3, r0
 800663e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006642:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006646:	d13c      	bne.n	80066c2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006648:	2301      	movs	r3, #1
 800664a:	627b      	str	r3, [r7, #36]	@ 0x24
 800664c:	e02b      	b.n	80066a6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800664e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006650:	015a      	lsls	r2, r3, #5
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	4413      	add	r3, r2
 8006656:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800665e:	6879      	ldr	r1, [r7, #4]
 8006660:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006662:	4613      	mov	r3, r2
 8006664:	00db      	lsls	r3, r3, #3
 8006666:	4413      	add	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	440b      	add	r3, r1
 800666c:	3318      	adds	r3, #24
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d115      	bne.n	80066a0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006674:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006676:	2b00      	cmp	r3, #0
 8006678:	da12      	bge.n	80066a0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800667a:	6879      	ldr	r1, [r7, #4]
 800667c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800667e:	4613      	mov	r3, r2
 8006680:	00db      	lsls	r3, r3, #3
 8006682:	4413      	add	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	440b      	add	r3, r1
 8006688:	3317      	adds	r3, #23
 800668a:	2201      	movs	r2, #1
 800668c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800668e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006690:	b2db      	uxtb	r3, r3
 8006692:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006696:	b2db      	uxtb	r3, r3
 8006698:	4619      	mov	r1, r3
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 faca 	bl	8006c34 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80066a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a2:	3301      	adds	r3, #1
 80066a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	791b      	ldrb	r3, [r3, #4]
 80066aa:	461a      	mov	r2, r3
 80066ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d3cd      	bcc.n	800664e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	695a      	ldr	r2, [r3, #20]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80066c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f003 faee 	bl	8009ca8 <USB_ReadInterrupts>
 80066cc:	4603      	mov	r3, r0
 80066ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80066d6:	d156      	bne.n	8006786 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80066d8:	2301      	movs	r3, #1
 80066da:	627b      	str	r3, [r7, #36]	@ 0x24
 80066dc:	e045      	b.n	800676a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80066de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80066ee:	6879      	ldr	r1, [r7, #4]
 80066f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066f2:	4613      	mov	r3, r2
 80066f4:	00db      	lsls	r3, r3, #3
 80066f6:	4413      	add	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	440b      	add	r3, r1
 80066fc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d12e      	bne.n	8006764 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006706:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006708:	2b00      	cmp	r3, #0
 800670a:	da2b      	bge.n	8006764 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	0c1a      	lsrs	r2, r3, #16
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006716:	4053      	eors	r3, r2
 8006718:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800671c:	2b00      	cmp	r3, #0
 800671e:	d121      	bne.n	8006764 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006720:	6879      	ldr	r1, [r7, #4]
 8006722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006724:	4613      	mov	r3, r2
 8006726:	00db      	lsls	r3, r3, #3
 8006728:	4413      	add	r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	440b      	add	r3, r1
 800672e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006732:	2201      	movs	r2, #1
 8006734:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006736:	6a3b      	ldr	r3, [r7, #32]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800673e:	6a3b      	ldr	r3, [r7, #32]
 8006740:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006742:	6a3b      	ldr	r3, [r7, #32]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800674a:	2b00      	cmp	r3, #0
 800674c:	d10a      	bne.n	8006764 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	69fa      	ldr	r2, [r7, #28]
 8006758:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800675c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006760:	6053      	str	r3, [r2, #4]
            break;
 8006762:	e008      	b.n	8006776 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006766:	3301      	adds	r3, #1
 8006768:	627b      	str	r3, [r7, #36]	@ 0x24
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	791b      	ldrb	r3, [r3, #4]
 800676e:	461a      	mov	r2, r3
 8006770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006772:	4293      	cmp	r3, r2
 8006774:	d3b3      	bcc.n	80066de <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	695a      	ldr	r2, [r3, #20]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006784:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4618      	mov	r0, r3
 800678c:	f003 fa8c 	bl	8009ca8 <USB_ReadInterrupts>
 8006790:	4603      	mov	r3, r0
 8006792:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800679a:	d10a      	bne.n	80067b2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f005 ff61 	bl	800c664 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	695a      	ldr	r2, [r3, #20]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80067b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4618      	mov	r0, r3
 80067b8:	f003 fa76 	bl	8009ca8 <USB_ReadInterrupts>
 80067bc:	4603      	mov	r3, r0
 80067be:	f003 0304 	and.w	r3, r3, #4
 80067c2:	2b04      	cmp	r3, #4
 80067c4:	d115      	bne.n	80067f2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	f003 0304 	and.w	r3, r3, #4
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d002      	beq.n	80067de <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f005 ff51 	bl	800c680 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6859      	ldr	r1, [r3, #4]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	69ba      	ldr	r2, [r7, #24]
 80067ea:	430a      	orrs	r2, r1
 80067ec:	605a      	str	r2, [r3, #4]
 80067ee:	e000      	b.n	80067f2 <HAL_PCD_IRQHandler+0x93c>
      return;
 80067f0:	bf00      	nop
    }
  }
}
 80067f2:	3734      	adds	r7, #52	@ 0x34
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd90      	pop	{r4, r7, pc}

080067f8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	460b      	mov	r3, r1
 8006802:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800680a:	2b01      	cmp	r3, #1
 800680c:	d101      	bne.n	8006812 <HAL_PCD_SetAddress+0x1a>
 800680e:	2302      	movs	r3, #2
 8006810:	e012      	b.n	8006838 <HAL_PCD_SetAddress+0x40>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	78fa      	ldrb	r2, [r7, #3]
 800681e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	78fa      	ldrb	r2, [r7, #3]
 8006826:	4611      	mov	r1, r2
 8006828:	4618      	mov	r0, r3
 800682a:	f003 f9d5 	bl	8009bd8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	4608      	mov	r0, r1
 800684a:	4611      	mov	r1, r2
 800684c:	461a      	mov	r2, r3
 800684e:	4603      	mov	r3, r0
 8006850:	70fb      	strb	r3, [r7, #3]
 8006852:	460b      	mov	r3, r1
 8006854:	803b      	strh	r3, [r7, #0]
 8006856:	4613      	mov	r3, r2
 8006858:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800685a:	2300      	movs	r3, #0
 800685c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800685e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006862:	2b00      	cmp	r3, #0
 8006864:	da0f      	bge.n	8006886 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006866:	78fb      	ldrb	r3, [r7, #3]
 8006868:	f003 020f 	and.w	r2, r3, #15
 800686c:	4613      	mov	r3, r2
 800686e:	00db      	lsls	r3, r3, #3
 8006870:	4413      	add	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	3310      	adds	r3, #16
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	4413      	add	r3, r2
 800687a:	3304      	adds	r3, #4
 800687c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2201      	movs	r2, #1
 8006882:	705a      	strb	r2, [r3, #1]
 8006884:	e00f      	b.n	80068a6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006886:	78fb      	ldrb	r3, [r7, #3]
 8006888:	f003 020f 	and.w	r2, r3, #15
 800688c:	4613      	mov	r3, r2
 800688e:	00db      	lsls	r3, r3, #3
 8006890:	4413      	add	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	4413      	add	r3, r2
 800689c:	3304      	adds	r3, #4
 800689e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80068a6:	78fb      	ldrb	r3, [r7, #3]
 80068a8:	f003 030f 	and.w	r3, r3, #15
 80068ac:	b2da      	uxtb	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80068b2:	883b      	ldrh	r3, [r7, #0]
 80068b4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	78ba      	ldrb	r2, [r7, #2]
 80068c0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	785b      	ldrb	r3, [r3, #1]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d004      	beq.n	80068d4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	461a      	mov	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80068d4:	78bb      	ldrb	r3, [r7, #2]
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d102      	bne.n	80068e0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d101      	bne.n	80068ee <HAL_PCD_EP_Open+0xae>
 80068ea:	2302      	movs	r3, #2
 80068ec:	e00e      	b.n	800690c <HAL_PCD_EP_Open+0xcc>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68f9      	ldr	r1, [r7, #12]
 80068fc:	4618      	mov	r0, r3
 80068fe:	f002 fb55 	bl	8008fac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800690a:	7afb      	ldrb	r3, [r7, #11]
}
 800690c:	4618      	mov	r0, r3
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	460b      	mov	r3, r1
 800691e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006920:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006924:	2b00      	cmp	r3, #0
 8006926:	da0f      	bge.n	8006948 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006928:	78fb      	ldrb	r3, [r7, #3]
 800692a:	f003 020f 	and.w	r2, r3, #15
 800692e:	4613      	mov	r3, r2
 8006930:	00db      	lsls	r3, r3, #3
 8006932:	4413      	add	r3, r2
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	3310      	adds	r3, #16
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	4413      	add	r3, r2
 800693c:	3304      	adds	r3, #4
 800693e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2201      	movs	r2, #1
 8006944:	705a      	strb	r2, [r3, #1]
 8006946:	e00f      	b.n	8006968 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006948:	78fb      	ldrb	r3, [r7, #3]
 800694a:	f003 020f 	and.w	r2, r3, #15
 800694e:	4613      	mov	r3, r2
 8006950:	00db      	lsls	r3, r3, #3
 8006952:	4413      	add	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	4413      	add	r3, r2
 800695e:	3304      	adds	r3, #4
 8006960:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006968:	78fb      	ldrb	r3, [r7, #3]
 800696a:	f003 030f 	and.w	r3, r3, #15
 800696e:	b2da      	uxtb	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800697a:	2b01      	cmp	r3, #1
 800697c:	d101      	bne.n	8006982 <HAL_PCD_EP_Close+0x6e>
 800697e:	2302      	movs	r3, #2
 8006980:	e00e      	b.n	80069a0 <HAL_PCD_EP_Close+0x8c>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2201      	movs	r2, #1
 8006986:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68f9      	ldr	r1, [r7, #12]
 8006990:	4618      	mov	r0, r3
 8006992:	f002 fb93 	bl	80090bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	607a      	str	r2, [r7, #4]
 80069b2:	603b      	str	r3, [r7, #0]
 80069b4:	460b      	mov	r3, r1
 80069b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069b8:	7afb      	ldrb	r3, [r7, #11]
 80069ba:	f003 020f 	and.w	r2, r3, #15
 80069be:	4613      	mov	r3, r2
 80069c0:	00db      	lsls	r3, r3, #3
 80069c2:	4413      	add	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	4413      	add	r3, r2
 80069ce:	3304      	adds	r3, #4
 80069d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	2200      	movs	r2, #0
 80069e2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	2200      	movs	r2, #0
 80069e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80069ea:	7afb      	ldrb	r3, [r7, #11]
 80069ec:	f003 030f 	and.w	r3, r3, #15
 80069f0:	b2da      	uxtb	r2, r3
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	799b      	ldrb	r3, [r3, #6]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d102      	bne.n	8006a04 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6818      	ldr	r0, [r3, #0]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	799b      	ldrb	r3, [r3, #6]
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	6979      	ldr	r1, [r7, #20]
 8006a10:	f002 fc30 	bl	8009274 <USB_EPStartXfer>

  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3718      	adds	r7, #24
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b083      	sub	sp, #12
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
 8006a26:	460b      	mov	r3, r1
 8006a28:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006a2a:	78fb      	ldrb	r3, [r7, #3]
 8006a2c:	f003 020f 	and.w	r2, r3, #15
 8006a30:	6879      	ldr	r1, [r7, #4]
 8006a32:	4613      	mov	r3, r2
 8006a34:	00db      	lsls	r3, r3, #3
 8006a36:	4413      	add	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	440b      	add	r3, r1
 8006a3c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006a40:	681b      	ldr	r3, [r3, #0]
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b086      	sub	sp, #24
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	60f8      	str	r0, [r7, #12]
 8006a56:	607a      	str	r2, [r7, #4]
 8006a58:	603b      	str	r3, [r7, #0]
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a5e:	7afb      	ldrb	r3, [r7, #11]
 8006a60:	f003 020f 	and.w	r2, r3, #15
 8006a64:	4613      	mov	r3, r2
 8006a66:	00db      	lsls	r3, r3, #3
 8006a68:	4413      	add	r3, r2
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	3310      	adds	r3, #16
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	4413      	add	r3, r2
 8006a72:	3304      	adds	r3, #4
 8006a74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	683a      	ldr	r2, [r7, #0]
 8006a80:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	2200      	movs	r2, #0
 8006a86:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a8e:	7afb      	ldrb	r3, [r7, #11]
 8006a90:	f003 030f 	and.w	r3, r3, #15
 8006a94:	b2da      	uxtb	r2, r3
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	799b      	ldrb	r3, [r3, #6]
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d102      	bne.n	8006aa8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6818      	ldr	r0, [r3, #0]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	799b      	ldrb	r3, [r3, #6]
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	6979      	ldr	r1, [r7, #20]
 8006ab4:	f002 fbde 	bl	8009274 <USB_EPStartXfer>

  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3718      	adds	r7, #24
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b084      	sub	sp, #16
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	460b      	mov	r3, r1
 8006acc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006ace:	78fb      	ldrb	r3, [r7, #3]
 8006ad0:	f003 030f 	and.w	r3, r3, #15
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	7912      	ldrb	r2, [r2, #4]
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d901      	bls.n	8006ae0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e04f      	b.n	8006b80 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006ae0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	da0f      	bge.n	8006b08 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ae8:	78fb      	ldrb	r3, [r7, #3]
 8006aea:	f003 020f 	and.w	r2, r3, #15
 8006aee:	4613      	mov	r3, r2
 8006af0:	00db      	lsls	r3, r3, #3
 8006af2:	4413      	add	r3, r2
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	3310      	adds	r3, #16
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	4413      	add	r3, r2
 8006afc:	3304      	adds	r3, #4
 8006afe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2201      	movs	r2, #1
 8006b04:	705a      	strb	r2, [r3, #1]
 8006b06:	e00d      	b.n	8006b24 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006b08:	78fa      	ldrb	r2, [r7, #3]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	00db      	lsls	r3, r3, #3
 8006b0e:	4413      	add	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	4413      	add	r3, r2
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2201      	movs	r2, #1
 8006b28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b2a:	78fb      	ldrb	r3, [r7, #3]
 8006b2c:	f003 030f 	and.w	r3, r3, #15
 8006b30:	b2da      	uxtb	r2, r3
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d101      	bne.n	8006b44 <HAL_PCD_EP_SetStall+0x82>
 8006b40:	2302      	movs	r3, #2
 8006b42:	e01d      	b.n	8006b80 <HAL_PCD_EP_SetStall+0xbe>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68f9      	ldr	r1, [r7, #12]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f002 ff6c 	bl	8009a30 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006b58:	78fb      	ldrb	r3, [r7, #3]
 8006b5a:	f003 030f 	and.w	r3, r3, #15
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d109      	bne.n	8006b76 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6818      	ldr	r0, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	7999      	ldrb	r1, [r3, #6]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006b70:	461a      	mov	r2, r3
 8006b72:	f003 f95d 	bl	8009e30 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	460b      	mov	r3, r1
 8006b92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006b94:	78fb      	ldrb	r3, [r7, #3]
 8006b96:	f003 030f 	and.w	r3, r3, #15
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	7912      	ldrb	r2, [r2, #4]
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d901      	bls.n	8006ba6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e042      	b.n	8006c2c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006ba6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	da0f      	bge.n	8006bce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006bae:	78fb      	ldrb	r3, [r7, #3]
 8006bb0:	f003 020f 	and.w	r2, r3, #15
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	00db      	lsls	r3, r3, #3
 8006bb8:	4413      	add	r3, r2
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	3310      	adds	r3, #16
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	3304      	adds	r3, #4
 8006bc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	705a      	strb	r2, [r3, #1]
 8006bcc:	e00f      	b.n	8006bee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006bce:	78fb      	ldrb	r3, [r7, #3]
 8006bd0:	f003 020f 	and.w	r2, r3, #15
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	00db      	lsls	r3, r3, #3
 8006bd8:	4413      	add	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	4413      	add	r3, r2
 8006be4:	3304      	adds	r3, #4
 8006be6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006bf4:	78fb      	ldrb	r3, [r7, #3]
 8006bf6:	f003 030f 	and.w	r3, r3, #15
 8006bfa:	b2da      	uxtb	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d101      	bne.n	8006c0e <HAL_PCD_EP_ClrStall+0x86>
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	e00e      	b.n	8006c2c <HAL_PCD_EP_ClrStall+0xa4>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68f9      	ldr	r1, [r7, #12]
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f002 ff75 	bl	8009b0c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006c40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	da0c      	bge.n	8006c62 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c48:	78fb      	ldrb	r3, [r7, #3]
 8006c4a:	f003 020f 	and.w	r2, r3, #15
 8006c4e:	4613      	mov	r3, r2
 8006c50:	00db      	lsls	r3, r3, #3
 8006c52:	4413      	add	r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	3310      	adds	r3, #16
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	3304      	adds	r3, #4
 8006c5e:	60fb      	str	r3, [r7, #12]
 8006c60:	e00c      	b.n	8006c7c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c62:	78fb      	ldrb	r3, [r7, #3]
 8006c64:	f003 020f 	and.w	r2, r3, #15
 8006c68:	4613      	mov	r3, r2
 8006c6a:	00db      	lsls	r3, r3, #3
 8006c6c:	4413      	add	r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	4413      	add	r3, r2
 8006c78:	3304      	adds	r3, #4
 8006c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68f9      	ldr	r1, [r7, #12]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f002 fd94 	bl	80097b0 <USB_EPStopXfer>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006c8c:	7afb      	ldrb	r3, [r7, #11]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b08a      	sub	sp, #40	@ 0x28
 8006c9a:	af02      	add	r7, sp, #8
 8006c9c:	6078      	str	r0, [r7, #4]
 8006c9e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006caa:	683a      	ldr	r2, [r7, #0]
 8006cac:	4613      	mov	r3, r2
 8006cae:	00db      	lsls	r3, r3, #3
 8006cb0:	4413      	add	r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	3310      	adds	r3, #16
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	4413      	add	r3, r2
 8006cba:	3304      	adds	r3, #4
 8006cbc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	695a      	ldr	r2, [r3, #20]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d901      	bls.n	8006cce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e06b      	b.n	8006da6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	691a      	ldr	r2, [r3, #16]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	69fa      	ldr	r2, [r7, #28]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d902      	bls.n	8006cea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	3303      	adds	r3, #3
 8006cee:	089b      	lsrs	r3, r3, #2
 8006cf0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006cf2:	e02a      	b.n	8006d4a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	691a      	ldr	r2, [r3, #16]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	69fa      	ldr	r2, [r7, #28]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d902      	bls.n	8006d10 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	3303      	adds	r3, #3
 8006d14:	089b      	lsrs	r3, r3, #2
 8006d16:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	68d9      	ldr	r1, [r3, #12]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	b2da      	uxtb	r2, r3
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	6978      	ldr	r0, [r7, #20]
 8006d2e:	f002 fde9 	bl	8009904 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	68da      	ldr	r2, [r3, #12]
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	441a      	add	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	695a      	ldr	r2, [r3, #20]
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	441a      	add	r2, r3
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	015a      	lsls	r2, r3, #5
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006d5a:	69ba      	ldr	r2, [r7, #24]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d809      	bhi.n	8006d74 <PCD_WriteEmptyTxFifo+0xde>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	695a      	ldr	r2, [r3, #20]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d203      	bcs.n	8006d74 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1bf      	bne.n	8006cf4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	691a      	ldr	r2, [r3, #16]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d811      	bhi.n	8006da4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	f003 030f 	and.w	r3, r3, #15
 8006d86:	2201      	movs	r2, #1
 8006d88:	fa02 f303 	lsl.w	r3, r2, r3
 8006d8c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	43db      	mvns	r3, r3
 8006d9a:	6939      	ldr	r1, [r7, #16]
 8006d9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006da0:	4013      	ands	r3, r2
 8006da2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3720      	adds	r7, #32
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
	...

08006db0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b088      	sub	sp, #32
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	333c      	adds	r3, #60	@ 0x3c
 8006dc8:	3304      	adds	r3, #4
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	015a      	lsls	r2, r3, #5
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	799b      	ldrb	r3, [r3, #6]
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d17b      	bne.n	8006ede <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	f003 0308 	and.w	r3, r3, #8
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d015      	beq.n	8006e1c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	4a61      	ldr	r2, [pc, #388]	@ (8006f78 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	f240 80b9 	bls.w	8006f6c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f000 80b3 	beq.w	8006f6c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	015a      	lsls	r2, r3, #5
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e12:	461a      	mov	r2, r3
 8006e14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e18:	6093      	str	r3, [r2, #8]
 8006e1a:	e0a7      	b.n	8006f6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	f003 0320 	and.w	r3, r3, #32
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d009      	beq.n	8006e3a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	015a      	lsls	r2, r3, #5
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e32:	461a      	mov	r2, r3
 8006e34:	2320      	movs	r3, #32
 8006e36:	6093      	str	r3, [r2, #8]
 8006e38:	e098      	b.n	8006f6c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f040 8093 	bne.w	8006f6c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	4a4b      	ldr	r2, [pc, #300]	@ (8006f78 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d90f      	bls.n	8006e6e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00a      	beq.n	8006e6e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	015a      	lsls	r2, r3, #5
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e64:	461a      	mov	r2, r3
 8006e66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e6a:	6093      	str	r3, [r2, #8]
 8006e6c:	e07e      	b.n	8006f6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	4613      	mov	r3, r2
 8006e72:	00db      	lsls	r3, r3, #3
 8006e74:	4413      	add	r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	4413      	add	r3, r2
 8006e80:	3304      	adds	r3, #4
 8006e82:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6a1a      	ldr	r2, [r3, #32]
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	0159      	lsls	r1, r3, #5
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	440b      	add	r3, r1
 8006e90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e9a:	1ad2      	subs	r2, r2, r3
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d114      	bne.n	8006ed0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d109      	bne.n	8006ec2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6818      	ldr	r0, [r3, #0]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006eb8:	461a      	mov	r2, r3
 8006eba:	2101      	movs	r1, #1
 8006ebc:	f002 ffb8 	bl	8009e30 <USB_EP0_OutStart>
 8006ec0:	e006      	b.n	8006ed0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	68da      	ldr	r2, [r3, #12]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	441a      	add	r2, r3
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f005 fb0a 	bl	800c4f0 <HAL_PCD_DataOutStageCallback>
 8006edc:	e046      	b.n	8006f6c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	4a26      	ldr	r2, [pc, #152]	@ (8006f7c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d124      	bne.n	8006f30 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00a      	beq.n	8006f06 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	015a      	lsls	r2, r3, #5
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006efc:	461a      	mov	r2, r3
 8006efe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f02:	6093      	str	r3, [r2, #8]
 8006f04:	e032      	b.n	8006f6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	f003 0320 	and.w	r3, r3, #32
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d008      	beq.n	8006f22 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	015a      	lsls	r2, r3, #5
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	4413      	add	r3, r2
 8006f18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	2320      	movs	r3, #32
 8006f20:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	4619      	mov	r1, r3
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f005 fae1 	bl	800c4f0 <HAL_PCD_DataOutStageCallback>
 8006f2e:	e01d      	b.n	8006f6c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d114      	bne.n	8006f60 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006f36:	6879      	ldr	r1, [r7, #4]
 8006f38:	683a      	ldr	r2, [r7, #0]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	00db      	lsls	r3, r3, #3
 8006f3e:	4413      	add	r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	440b      	add	r3, r1
 8006f44:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d108      	bne.n	8006f60 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6818      	ldr	r0, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006f58:	461a      	mov	r2, r3
 8006f5a:	2100      	movs	r1, #0
 8006f5c:	f002 ff68 	bl	8009e30 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	4619      	mov	r1, r3
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f005 fac2 	bl	800c4f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3720      	adds	r7, #32
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	4f54300a 	.word	0x4f54300a
 8006f7c:	4f54310a 	.word	0x4f54310a

08006f80 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	333c      	adds	r3, #60	@ 0x3c
 8006f98:	3304      	adds	r3, #4
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	015a      	lsls	r2, r3, #5
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	4a15      	ldr	r2, [pc, #84]	@ (8007008 <PCD_EP_OutSetupPacket_int+0x88>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d90e      	bls.n	8006fd4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d009      	beq.n	8006fd4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	015a      	lsls	r2, r3, #5
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fcc:	461a      	mov	r2, r3
 8006fce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fd2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f005 fa79 	bl	800c4cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	4a0a      	ldr	r2, [pc, #40]	@ (8007008 <PCD_EP_OutSetupPacket_int+0x88>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d90c      	bls.n	8006ffc <PCD_EP_OutSetupPacket_int+0x7c>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	799b      	ldrb	r3, [r3, #6]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d108      	bne.n	8006ffc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6818      	ldr	r0, [r3, #0]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	2101      	movs	r1, #1
 8006ff8:	f002 ff1a 	bl	8009e30 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3718      	adds	r7, #24
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	4f54300a 	.word	0x4f54300a

0800700c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800700c:	b480      	push	{r7}
 800700e:	b085      	sub	sp, #20
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	460b      	mov	r3, r1
 8007016:	70fb      	strb	r3, [r7, #3]
 8007018:	4613      	mov	r3, r2
 800701a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007022:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007024:	78fb      	ldrb	r3, [r7, #3]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d107      	bne.n	800703a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800702a:	883b      	ldrh	r3, [r7, #0]
 800702c:	0419      	lsls	r1, r3, #16
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68ba      	ldr	r2, [r7, #8]
 8007034:	430a      	orrs	r2, r1
 8007036:	629a      	str	r2, [r3, #40]	@ 0x28
 8007038:	e028      	b.n	800708c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007040:	0c1b      	lsrs	r3, r3, #16
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	4413      	add	r3, r2
 8007046:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007048:	2300      	movs	r3, #0
 800704a:	73fb      	strb	r3, [r7, #15]
 800704c:	e00d      	b.n	800706a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	7bfb      	ldrb	r3, [r7, #15]
 8007054:	3340      	adds	r3, #64	@ 0x40
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	4413      	add	r3, r2
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	0c1b      	lsrs	r3, r3, #16
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	4413      	add	r3, r2
 8007062:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007064:	7bfb      	ldrb	r3, [r7, #15]
 8007066:	3301      	adds	r3, #1
 8007068:	73fb      	strb	r3, [r7, #15]
 800706a:	7bfa      	ldrb	r2, [r7, #15]
 800706c:	78fb      	ldrb	r3, [r7, #3]
 800706e:	3b01      	subs	r3, #1
 8007070:	429a      	cmp	r2, r3
 8007072:	d3ec      	bcc.n	800704e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007074:	883b      	ldrh	r3, [r7, #0]
 8007076:	0418      	lsls	r0, r3, #16
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6819      	ldr	r1, [r3, #0]
 800707c:	78fb      	ldrb	r3, [r7, #3]
 800707e:	3b01      	subs	r3, #1
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	4302      	orrs	r2, r0
 8007084:	3340      	adds	r3, #64	@ 0x40
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	440b      	add	r3, r1
 800708a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3714      	adds	r7, #20
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr

0800709a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800709a:	b480      	push	{r7}
 800709c:	b083      	sub	sp, #12
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
 80070a2:	460b      	mov	r3, r1
 80070a4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	887a      	ldrh	r2, [r7, #2]
 80070ac:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	460b      	mov	r3, r1
 80070c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e267      	b.n	80075b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d075      	beq.n	80071de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80070f2:	4b88      	ldr	r3, [pc, #544]	@ (8007314 <HAL_RCC_OscConfig+0x240>)
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f003 030c 	and.w	r3, r3, #12
 80070fa:	2b04      	cmp	r3, #4
 80070fc:	d00c      	beq.n	8007118 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070fe:	4b85      	ldr	r3, [pc, #532]	@ (8007314 <HAL_RCC_OscConfig+0x240>)
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007106:	2b08      	cmp	r3, #8
 8007108:	d112      	bne.n	8007130 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800710a:	4b82      	ldr	r3, [pc, #520]	@ (8007314 <HAL_RCC_OscConfig+0x240>)
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007112:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007116:	d10b      	bne.n	8007130 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007118:	4b7e      	ldr	r3, [pc, #504]	@ (8007314 <HAL_RCC_OscConfig+0x240>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d05b      	beq.n	80071dc <HAL_RCC_OscConfig+0x108>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d157      	bne.n	80071dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	e242      	b.n	80075b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007138:	d106      	bne.n	8007148 <HAL_RCC_OscConfig+0x74>
 800713a:	4b76      	ldr	r3, [pc, #472]	@ (8007314 <HAL_RCC_OscConfig+0x240>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a75      	ldr	r2, [pc, #468]	@ (8007314 <HAL_RCC_OscConfig+0x240>)
 8007140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007144:	6013      	str	r3, [r2, #0]
 8007146:	e01d      	b.n	8007184 <HAL_RCC_OscConfig+0xb0>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007150:	d10c      	bne.n	800716c <HAL_RCC_OscConfig+0x98>
 8007152:	4b70      	ldr	r3, [pc, #448]	@ (8007314 <HAL_RCC_OscConfig+0x240>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a6f      	ldr	r2, [pc, #444]	@ (8007314 <HAL_RCC_OscConfig+0x240>)
 8007158:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800715c:	6013      	str	r3, [r2, #0]
 800715e:	4b6d      	ldr	r3, [pc, #436]	@ (8007314 <HAL_RCC_OscConfig+0x240>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a6c      	ldr	r2, [pc, #432]	@ (8007314 <HAL_RCC_OscConfig+0x240>)
 8007164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007168:	6013      	str	r3, [r2, #0]
 800716a:	e00b      	b.n	8007184 <HAL_RCC_OscConfig+0xb0>
 800716c:	4b69      	ldr	r3, [pc, #420]	@ (8007314 <HAL_RCC_OscConfig+0x240>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a68      	ldr	r2, [pc, #416]	@ (8007314 <HAL_RCC_OscConfig+0x240>)
 8007172:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007176:	6013      	str	r3, [r2, #0]
 8007178:	4b66      	ldr	r3, [pc, #408]	@ (8007314 <HAL_RCC_OscConfig+0x240>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a65      	ldr	r2, [pc, #404]	@ (8007314 <HAL_RCC_OscConfig+0x240>)
 800717e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007182:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d013      	beq.n	80071b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800718c:	f7fb fb44 	bl	8002818 <HAL_GetTick>
 8007190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007192:	e008      	b.n	80071a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007194:	f7fb fb40 	bl	8002818 <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	2b64      	cmp	r3, #100	@ 0x64
 80071a0:	d901      	bls.n	80071a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e207      	b.n	80075b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071a6:	4b5b      	ldr	r3, [pc, #364]	@ (8007314 <HAL_RCC_OscConfig+0x240>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d0f0      	beq.n	8007194 <HAL_RCC_OscConfig+0xc0>
 80071b2:	e014      	b.n	80071de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071b4:	f7fb fb30 	bl	8002818 <HAL_GetTick>
 80071b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071ba:	e008      	b.n	80071ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071bc:	f7fb fb2c 	bl	8002818 <HAL_GetTick>
 80071c0:	4602      	mov	r2, r0
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	2b64      	cmp	r3, #100	@ 0x64
 80071c8:	d901      	bls.n	80071ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e1f3      	b.n	80075b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071ce:	4b51      	ldr	r3, [pc, #324]	@ (8007314 <HAL_RCC_OscConfig+0x240>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1f0      	bne.n	80071bc <HAL_RCC_OscConfig+0xe8>
 80071da:	e000      	b.n	80071de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 0302 	and.w	r3, r3, #2
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d063      	beq.n	80072b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80071ea:	4b4a      	ldr	r3, [pc, #296]	@ (8007314 <HAL_RCC_OscConfig+0x240>)
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f003 030c 	and.w	r3, r3, #12
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00b      	beq.n	800720e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071f6:	4b47      	ldr	r3, [pc, #284]	@ (8007314 <HAL_RCC_OscConfig+0x240>)
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80071fe:	2b08      	cmp	r3, #8
 8007200:	d11c      	bne.n	800723c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007202:	4b44      	ldr	r3, [pc, #272]	@ (8007314 <HAL_RCC_OscConfig+0x240>)
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800720a:	2b00      	cmp	r3, #0
 800720c:	d116      	bne.n	800723c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800720e:	4b41      	ldr	r3, [pc, #260]	@ (8007314 <HAL_RCC_OscConfig+0x240>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0302 	and.w	r3, r3, #2
 8007216:	2b00      	cmp	r3, #0
 8007218:	d005      	beq.n	8007226 <HAL_RCC_OscConfig+0x152>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d001      	beq.n	8007226 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e1c7      	b.n	80075b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007226:	4b3b      	ldr	r3, [pc, #236]	@ (8007314 <HAL_RCC_OscConfig+0x240>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	00db      	lsls	r3, r3, #3
 8007234:	4937      	ldr	r1, [pc, #220]	@ (8007314 <HAL_RCC_OscConfig+0x240>)
 8007236:	4313      	orrs	r3, r2
 8007238:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800723a:	e03a      	b.n	80072b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d020      	beq.n	8007286 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007244:	4b34      	ldr	r3, [pc, #208]	@ (8007318 <HAL_RCC_OscConfig+0x244>)
 8007246:	2201      	movs	r2, #1
 8007248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800724a:	f7fb fae5 	bl	8002818 <HAL_GetTick>
 800724e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007250:	e008      	b.n	8007264 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007252:	f7fb fae1 	bl	8002818 <HAL_GetTick>
 8007256:	4602      	mov	r2, r0
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	2b02      	cmp	r3, #2
 800725e:	d901      	bls.n	8007264 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e1a8      	b.n	80075b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007264:	4b2b      	ldr	r3, [pc, #172]	@ (8007314 <HAL_RCC_OscConfig+0x240>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 0302 	and.w	r3, r3, #2
 800726c:	2b00      	cmp	r3, #0
 800726e:	d0f0      	beq.n	8007252 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007270:	4b28      	ldr	r3, [pc, #160]	@ (8007314 <HAL_RCC_OscConfig+0x240>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	00db      	lsls	r3, r3, #3
 800727e:	4925      	ldr	r1, [pc, #148]	@ (8007314 <HAL_RCC_OscConfig+0x240>)
 8007280:	4313      	orrs	r3, r2
 8007282:	600b      	str	r3, [r1, #0]
 8007284:	e015      	b.n	80072b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007286:	4b24      	ldr	r3, [pc, #144]	@ (8007318 <HAL_RCC_OscConfig+0x244>)
 8007288:	2200      	movs	r2, #0
 800728a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800728c:	f7fb fac4 	bl	8002818 <HAL_GetTick>
 8007290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007292:	e008      	b.n	80072a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007294:	f7fb fac0 	bl	8002818 <HAL_GetTick>
 8007298:	4602      	mov	r2, r0
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d901      	bls.n	80072a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	e187      	b.n	80075b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072a6:	4b1b      	ldr	r3, [pc, #108]	@ (8007314 <HAL_RCC_OscConfig+0x240>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 0302 	and.w	r3, r3, #2
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1f0      	bne.n	8007294 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0308 	and.w	r3, r3, #8
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d036      	beq.n	800732c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d016      	beq.n	80072f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072c6:	4b15      	ldr	r3, [pc, #84]	@ (800731c <HAL_RCC_OscConfig+0x248>)
 80072c8:	2201      	movs	r2, #1
 80072ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072cc:	f7fb faa4 	bl	8002818 <HAL_GetTick>
 80072d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072d2:	e008      	b.n	80072e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072d4:	f7fb faa0 	bl	8002818 <HAL_GetTick>
 80072d8:	4602      	mov	r2, r0
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d901      	bls.n	80072e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e167      	b.n	80075b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007314 <HAL_RCC_OscConfig+0x240>)
 80072e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072ea:	f003 0302 	and.w	r3, r3, #2
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d0f0      	beq.n	80072d4 <HAL_RCC_OscConfig+0x200>
 80072f2:	e01b      	b.n	800732c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072f4:	4b09      	ldr	r3, [pc, #36]	@ (800731c <HAL_RCC_OscConfig+0x248>)
 80072f6:	2200      	movs	r2, #0
 80072f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072fa:	f7fb fa8d 	bl	8002818 <HAL_GetTick>
 80072fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007300:	e00e      	b.n	8007320 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007302:	f7fb fa89 	bl	8002818 <HAL_GetTick>
 8007306:	4602      	mov	r2, r0
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	2b02      	cmp	r3, #2
 800730e:	d907      	bls.n	8007320 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	e150      	b.n	80075b6 <HAL_RCC_OscConfig+0x4e2>
 8007314:	40023800 	.word	0x40023800
 8007318:	42470000 	.word	0x42470000
 800731c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007320:	4b88      	ldr	r3, [pc, #544]	@ (8007544 <HAL_RCC_OscConfig+0x470>)
 8007322:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007324:	f003 0302 	and.w	r3, r3, #2
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1ea      	bne.n	8007302 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0304 	and.w	r3, r3, #4
 8007334:	2b00      	cmp	r3, #0
 8007336:	f000 8097 	beq.w	8007468 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800733a:	2300      	movs	r3, #0
 800733c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800733e:	4b81      	ldr	r3, [pc, #516]	@ (8007544 <HAL_RCC_OscConfig+0x470>)
 8007340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10f      	bne.n	800736a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800734a:	2300      	movs	r3, #0
 800734c:	60bb      	str	r3, [r7, #8]
 800734e:	4b7d      	ldr	r3, [pc, #500]	@ (8007544 <HAL_RCC_OscConfig+0x470>)
 8007350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007352:	4a7c      	ldr	r2, [pc, #496]	@ (8007544 <HAL_RCC_OscConfig+0x470>)
 8007354:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007358:	6413      	str	r3, [r2, #64]	@ 0x40
 800735a:	4b7a      	ldr	r3, [pc, #488]	@ (8007544 <HAL_RCC_OscConfig+0x470>)
 800735c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800735e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007362:	60bb      	str	r3, [r7, #8]
 8007364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007366:	2301      	movs	r3, #1
 8007368:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800736a:	4b77      	ldr	r3, [pc, #476]	@ (8007548 <HAL_RCC_OscConfig+0x474>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007372:	2b00      	cmp	r3, #0
 8007374:	d118      	bne.n	80073a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007376:	4b74      	ldr	r3, [pc, #464]	@ (8007548 <HAL_RCC_OscConfig+0x474>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a73      	ldr	r2, [pc, #460]	@ (8007548 <HAL_RCC_OscConfig+0x474>)
 800737c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007382:	f7fb fa49 	bl	8002818 <HAL_GetTick>
 8007386:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007388:	e008      	b.n	800739c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800738a:	f7fb fa45 	bl	8002818 <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	2b02      	cmp	r3, #2
 8007396:	d901      	bls.n	800739c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007398:	2303      	movs	r3, #3
 800739a:	e10c      	b.n	80075b6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800739c:	4b6a      	ldr	r3, [pc, #424]	@ (8007548 <HAL_RCC_OscConfig+0x474>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d0f0      	beq.n	800738a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d106      	bne.n	80073be <HAL_RCC_OscConfig+0x2ea>
 80073b0:	4b64      	ldr	r3, [pc, #400]	@ (8007544 <HAL_RCC_OscConfig+0x470>)
 80073b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073b4:	4a63      	ldr	r2, [pc, #396]	@ (8007544 <HAL_RCC_OscConfig+0x470>)
 80073b6:	f043 0301 	orr.w	r3, r3, #1
 80073ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80073bc:	e01c      	b.n	80073f8 <HAL_RCC_OscConfig+0x324>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	2b05      	cmp	r3, #5
 80073c4:	d10c      	bne.n	80073e0 <HAL_RCC_OscConfig+0x30c>
 80073c6:	4b5f      	ldr	r3, [pc, #380]	@ (8007544 <HAL_RCC_OscConfig+0x470>)
 80073c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073ca:	4a5e      	ldr	r2, [pc, #376]	@ (8007544 <HAL_RCC_OscConfig+0x470>)
 80073cc:	f043 0304 	orr.w	r3, r3, #4
 80073d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80073d2:	4b5c      	ldr	r3, [pc, #368]	@ (8007544 <HAL_RCC_OscConfig+0x470>)
 80073d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073d6:	4a5b      	ldr	r2, [pc, #364]	@ (8007544 <HAL_RCC_OscConfig+0x470>)
 80073d8:	f043 0301 	orr.w	r3, r3, #1
 80073dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80073de:	e00b      	b.n	80073f8 <HAL_RCC_OscConfig+0x324>
 80073e0:	4b58      	ldr	r3, [pc, #352]	@ (8007544 <HAL_RCC_OscConfig+0x470>)
 80073e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073e4:	4a57      	ldr	r2, [pc, #348]	@ (8007544 <HAL_RCC_OscConfig+0x470>)
 80073e6:	f023 0301 	bic.w	r3, r3, #1
 80073ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80073ec:	4b55      	ldr	r3, [pc, #340]	@ (8007544 <HAL_RCC_OscConfig+0x470>)
 80073ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073f0:	4a54      	ldr	r2, [pc, #336]	@ (8007544 <HAL_RCC_OscConfig+0x470>)
 80073f2:	f023 0304 	bic.w	r3, r3, #4
 80073f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d015      	beq.n	800742c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007400:	f7fb fa0a 	bl	8002818 <HAL_GetTick>
 8007404:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007406:	e00a      	b.n	800741e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007408:	f7fb fa06 	bl	8002818 <HAL_GetTick>
 800740c:	4602      	mov	r2, r0
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007416:	4293      	cmp	r3, r2
 8007418:	d901      	bls.n	800741e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800741a:	2303      	movs	r3, #3
 800741c:	e0cb      	b.n	80075b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800741e:	4b49      	ldr	r3, [pc, #292]	@ (8007544 <HAL_RCC_OscConfig+0x470>)
 8007420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007422:	f003 0302 	and.w	r3, r3, #2
 8007426:	2b00      	cmp	r3, #0
 8007428:	d0ee      	beq.n	8007408 <HAL_RCC_OscConfig+0x334>
 800742a:	e014      	b.n	8007456 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800742c:	f7fb f9f4 	bl	8002818 <HAL_GetTick>
 8007430:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007432:	e00a      	b.n	800744a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007434:	f7fb f9f0 	bl	8002818 <HAL_GetTick>
 8007438:	4602      	mov	r2, r0
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007442:	4293      	cmp	r3, r2
 8007444:	d901      	bls.n	800744a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e0b5      	b.n	80075b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800744a:	4b3e      	ldr	r3, [pc, #248]	@ (8007544 <HAL_RCC_OscConfig+0x470>)
 800744c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800744e:	f003 0302 	and.w	r3, r3, #2
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1ee      	bne.n	8007434 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007456:	7dfb      	ldrb	r3, [r7, #23]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d105      	bne.n	8007468 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800745c:	4b39      	ldr	r3, [pc, #228]	@ (8007544 <HAL_RCC_OscConfig+0x470>)
 800745e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007460:	4a38      	ldr	r2, [pc, #224]	@ (8007544 <HAL_RCC_OscConfig+0x470>)
 8007462:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007466:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	699b      	ldr	r3, [r3, #24]
 800746c:	2b00      	cmp	r3, #0
 800746e:	f000 80a1 	beq.w	80075b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007472:	4b34      	ldr	r3, [pc, #208]	@ (8007544 <HAL_RCC_OscConfig+0x470>)
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f003 030c 	and.w	r3, r3, #12
 800747a:	2b08      	cmp	r3, #8
 800747c:	d05c      	beq.n	8007538 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	2b02      	cmp	r3, #2
 8007484:	d141      	bne.n	800750a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007486:	4b31      	ldr	r3, [pc, #196]	@ (800754c <HAL_RCC_OscConfig+0x478>)
 8007488:	2200      	movs	r2, #0
 800748a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800748c:	f7fb f9c4 	bl	8002818 <HAL_GetTick>
 8007490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007492:	e008      	b.n	80074a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007494:	f7fb f9c0 	bl	8002818 <HAL_GetTick>
 8007498:	4602      	mov	r2, r0
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	1ad3      	subs	r3, r2, r3
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d901      	bls.n	80074a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80074a2:	2303      	movs	r3, #3
 80074a4:	e087      	b.n	80075b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074a6:	4b27      	ldr	r3, [pc, #156]	@ (8007544 <HAL_RCC_OscConfig+0x470>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1f0      	bne.n	8007494 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	69da      	ldr	r2, [r3, #28]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	431a      	orrs	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074c0:	019b      	lsls	r3, r3, #6
 80074c2:	431a      	orrs	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c8:	085b      	lsrs	r3, r3, #1
 80074ca:	3b01      	subs	r3, #1
 80074cc:	041b      	lsls	r3, r3, #16
 80074ce:	431a      	orrs	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d4:	061b      	lsls	r3, r3, #24
 80074d6:	491b      	ldr	r1, [pc, #108]	@ (8007544 <HAL_RCC_OscConfig+0x470>)
 80074d8:	4313      	orrs	r3, r2
 80074da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074dc:	4b1b      	ldr	r3, [pc, #108]	@ (800754c <HAL_RCC_OscConfig+0x478>)
 80074de:	2201      	movs	r2, #1
 80074e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074e2:	f7fb f999 	bl	8002818 <HAL_GetTick>
 80074e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074e8:	e008      	b.n	80074fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074ea:	f7fb f995 	bl	8002818 <HAL_GetTick>
 80074ee:	4602      	mov	r2, r0
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d901      	bls.n	80074fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e05c      	b.n	80075b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074fc:	4b11      	ldr	r3, [pc, #68]	@ (8007544 <HAL_RCC_OscConfig+0x470>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007504:	2b00      	cmp	r3, #0
 8007506:	d0f0      	beq.n	80074ea <HAL_RCC_OscConfig+0x416>
 8007508:	e054      	b.n	80075b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800750a:	4b10      	ldr	r3, [pc, #64]	@ (800754c <HAL_RCC_OscConfig+0x478>)
 800750c:	2200      	movs	r2, #0
 800750e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007510:	f7fb f982 	bl	8002818 <HAL_GetTick>
 8007514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007516:	e008      	b.n	800752a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007518:	f7fb f97e 	bl	8002818 <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	2b02      	cmp	r3, #2
 8007524:	d901      	bls.n	800752a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e045      	b.n	80075b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800752a:	4b06      	ldr	r3, [pc, #24]	@ (8007544 <HAL_RCC_OscConfig+0x470>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1f0      	bne.n	8007518 <HAL_RCC_OscConfig+0x444>
 8007536:	e03d      	b.n	80075b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d107      	bne.n	8007550 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	e038      	b.n	80075b6 <HAL_RCC_OscConfig+0x4e2>
 8007544:	40023800 	.word	0x40023800
 8007548:	40007000 	.word	0x40007000
 800754c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007550:	4b1b      	ldr	r3, [pc, #108]	@ (80075c0 <HAL_RCC_OscConfig+0x4ec>)
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d028      	beq.n	80075b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007568:	429a      	cmp	r2, r3
 800756a:	d121      	bne.n	80075b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007576:	429a      	cmp	r2, r3
 8007578:	d11a      	bne.n	80075b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007580:	4013      	ands	r3, r2
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007586:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007588:	4293      	cmp	r3, r2
 800758a:	d111      	bne.n	80075b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007596:	085b      	lsrs	r3, r3, #1
 8007598:	3b01      	subs	r3, #1
 800759a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800759c:	429a      	cmp	r2, r3
 800759e:	d107      	bne.n	80075b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d001      	beq.n	80075b4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e000      	b.n	80075b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3718      	adds	r7, #24
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	40023800 	.word	0x40023800

080075c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d101      	bne.n	80075d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e0cc      	b.n	8007772 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075d8:	4b68      	ldr	r3, [pc, #416]	@ (800777c <HAL_RCC_ClockConfig+0x1b8>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0307 	and.w	r3, r3, #7
 80075e0:	683a      	ldr	r2, [r7, #0]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d90c      	bls.n	8007600 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075e6:	4b65      	ldr	r3, [pc, #404]	@ (800777c <HAL_RCC_ClockConfig+0x1b8>)
 80075e8:	683a      	ldr	r2, [r7, #0]
 80075ea:	b2d2      	uxtb	r2, r2
 80075ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ee:	4b63      	ldr	r3, [pc, #396]	@ (800777c <HAL_RCC_ClockConfig+0x1b8>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 0307 	and.w	r3, r3, #7
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d001      	beq.n	8007600 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e0b8      	b.n	8007772 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 0302 	and.w	r3, r3, #2
 8007608:	2b00      	cmp	r3, #0
 800760a:	d020      	beq.n	800764e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0304 	and.w	r3, r3, #4
 8007614:	2b00      	cmp	r3, #0
 8007616:	d005      	beq.n	8007624 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007618:	4b59      	ldr	r3, [pc, #356]	@ (8007780 <HAL_RCC_ClockConfig+0x1bc>)
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	4a58      	ldr	r2, [pc, #352]	@ (8007780 <HAL_RCC_ClockConfig+0x1bc>)
 800761e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007622:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 0308 	and.w	r3, r3, #8
 800762c:	2b00      	cmp	r3, #0
 800762e:	d005      	beq.n	800763c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007630:	4b53      	ldr	r3, [pc, #332]	@ (8007780 <HAL_RCC_ClockConfig+0x1bc>)
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	4a52      	ldr	r2, [pc, #328]	@ (8007780 <HAL_RCC_ClockConfig+0x1bc>)
 8007636:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800763a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800763c:	4b50      	ldr	r3, [pc, #320]	@ (8007780 <HAL_RCC_ClockConfig+0x1bc>)
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	494d      	ldr	r1, [pc, #308]	@ (8007780 <HAL_RCC_ClockConfig+0x1bc>)
 800764a:	4313      	orrs	r3, r2
 800764c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 0301 	and.w	r3, r3, #1
 8007656:	2b00      	cmp	r3, #0
 8007658:	d044      	beq.n	80076e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	2b01      	cmp	r3, #1
 8007660:	d107      	bne.n	8007672 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007662:	4b47      	ldr	r3, [pc, #284]	@ (8007780 <HAL_RCC_ClockConfig+0x1bc>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d119      	bne.n	80076a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e07f      	b.n	8007772 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	2b02      	cmp	r3, #2
 8007678:	d003      	beq.n	8007682 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800767e:	2b03      	cmp	r3, #3
 8007680:	d107      	bne.n	8007692 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007682:	4b3f      	ldr	r3, [pc, #252]	@ (8007780 <HAL_RCC_ClockConfig+0x1bc>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800768a:	2b00      	cmp	r3, #0
 800768c:	d109      	bne.n	80076a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e06f      	b.n	8007772 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007692:	4b3b      	ldr	r3, [pc, #236]	@ (8007780 <HAL_RCC_ClockConfig+0x1bc>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0302 	and.w	r3, r3, #2
 800769a:	2b00      	cmp	r3, #0
 800769c:	d101      	bne.n	80076a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e067      	b.n	8007772 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076a2:	4b37      	ldr	r3, [pc, #220]	@ (8007780 <HAL_RCC_ClockConfig+0x1bc>)
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	f023 0203 	bic.w	r2, r3, #3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	4934      	ldr	r1, [pc, #208]	@ (8007780 <HAL_RCC_ClockConfig+0x1bc>)
 80076b0:	4313      	orrs	r3, r2
 80076b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80076b4:	f7fb f8b0 	bl	8002818 <HAL_GetTick>
 80076b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076ba:	e00a      	b.n	80076d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076bc:	f7fb f8ac 	bl	8002818 <HAL_GetTick>
 80076c0:	4602      	mov	r2, r0
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	1ad3      	subs	r3, r2, r3
 80076c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d901      	bls.n	80076d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e04f      	b.n	8007772 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076d2:	4b2b      	ldr	r3, [pc, #172]	@ (8007780 <HAL_RCC_ClockConfig+0x1bc>)
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	f003 020c 	and.w	r2, r3, #12
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d1eb      	bne.n	80076bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076e4:	4b25      	ldr	r3, [pc, #148]	@ (800777c <HAL_RCC_ClockConfig+0x1b8>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0307 	and.w	r3, r3, #7
 80076ec:	683a      	ldr	r2, [r7, #0]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d20c      	bcs.n	800770c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076f2:	4b22      	ldr	r3, [pc, #136]	@ (800777c <HAL_RCC_ClockConfig+0x1b8>)
 80076f4:	683a      	ldr	r2, [r7, #0]
 80076f6:	b2d2      	uxtb	r2, r2
 80076f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076fa:	4b20      	ldr	r3, [pc, #128]	@ (800777c <HAL_RCC_ClockConfig+0x1b8>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 0307 	and.w	r3, r3, #7
 8007702:	683a      	ldr	r2, [r7, #0]
 8007704:	429a      	cmp	r2, r3
 8007706:	d001      	beq.n	800770c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	e032      	b.n	8007772 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0304 	and.w	r3, r3, #4
 8007714:	2b00      	cmp	r3, #0
 8007716:	d008      	beq.n	800772a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007718:	4b19      	ldr	r3, [pc, #100]	@ (8007780 <HAL_RCC_ClockConfig+0x1bc>)
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	4916      	ldr	r1, [pc, #88]	@ (8007780 <HAL_RCC_ClockConfig+0x1bc>)
 8007726:	4313      	orrs	r3, r2
 8007728:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0308 	and.w	r3, r3, #8
 8007732:	2b00      	cmp	r3, #0
 8007734:	d009      	beq.n	800774a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007736:	4b12      	ldr	r3, [pc, #72]	@ (8007780 <HAL_RCC_ClockConfig+0x1bc>)
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	00db      	lsls	r3, r3, #3
 8007744:	490e      	ldr	r1, [pc, #56]	@ (8007780 <HAL_RCC_ClockConfig+0x1bc>)
 8007746:	4313      	orrs	r3, r2
 8007748:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800774a:	f000 f821 	bl	8007790 <HAL_RCC_GetSysClockFreq>
 800774e:	4602      	mov	r2, r0
 8007750:	4b0b      	ldr	r3, [pc, #44]	@ (8007780 <HAL_RCC_ClockConfig+0x1bc>)
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	091b      	lsrs	r3, r3, #4
 8007756:	f003 030f 	and.w	r3, r3, #15
 800775a:	490a      	ldr	r1, [pc, #40]	@ (8007784 <HAL_RCC_ClockConfig+0x1c0>)
 800775c:	5ccb      	ldrb	r3, [r1, r3]
 800775e:	fa22 f303 	lsr.w	r3, r2, r3
 8007762:	4a09      	ldr	r2, [pc, #36]	@ (8007788 <HAL_RCC_ClockConfig+0x1c4>)
 8007764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007766:	4b09      	ldr	r3, [pc, #36]	@ (800778c <HAL_RCC_ClockConfig+0x1c8>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4618      	mov	r0, r3
 800776c:	f7fb f810 	bl	8002790 <HAL_InitTick>

  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	40023c00 	.word	0x40023c00
 8007780:	40023800 	.word	0x40023800
 8007784:	08011168 	.word	0x08011168
 8007788:	20000000 	.word	0x20000000
 800778c:	20000004 	.word	0x20000004

08007790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007794:	b090      	sub	sp, #64	@ 0x40
 8007796:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007798:	2300      	movs	r3, #0
 800779a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800779c:	2300      	movs	r3, #0
 800779e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80077a0:	2300      	movs	r3, #0
 80077a2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80077a4:	2300      	movs	r3, #0
 80077a6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077a8:	4b59      	ldr	r3, [pc, #356]	@ (8007910 <HAL_RCC_GetSysClockFreq+0x180>)
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f003 030c 	and.w	r3, r3, #12
 80077b0:	2b08      	cmp	r3, #8
 80077b2:	d00d      	beq.n	80077d0 <HAL_RCC_GetSysClockFreq+0x40>
 80077b4:	2b08      	cmp	r3, #8
 80077b6:	f200 80a1 	bhi.w	80078fc <HAL_RCC_GetSysClockFreq+0x16c>
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d002      	beq.n	80077c4 <HAL_RCC_GetSysClockFreq+0x34>
 80077be:	2b04      	cmp	r3, #4
 80077c0:	d003      	beq.n	80077ca <HAL_RCC_GetSysClockFreq+0x3a>
 80077c2:	e09b      	b.n	80078fc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80077c4:	4b53      	ldr	r3, [pc, #332]	@ (8007914 <HAL_RCC_GetSysClockFreq+0x184>)
 80077c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80077c8:	e09b      	b.n	8007902 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80077ca:	4b53      	ldr	r3, [pc, #332]	@ (8007918 <HAL_RCC_GetSysClockFreq+0x188>)
 80077cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80077ce:	e098      	b.n	8007902 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80077d0:	4b4f      	ldr	r3, [pc, #316]	@ (8007910 <HAL_RCC_GetSysClockFreq+0x180>)
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077d8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80077da:	4b4d      	ldr	r3, [pc, #308]	@ (8007910 <HAL_RCC_GetSysClockFreq+0x180>)
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d028      	beq.n	8007838 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077e6:	4b4a      	ldr	r3, [pc, #296]	@ (8007910 <HAL_RCC_GetSysClockFreq+0x180>)
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	099b      	lsrs	r3, r3, #6
 80077ec:	2200      	movs	r2, #0
 80077ee:	623b      	str	r3, [r7, #32]
 80077f0:	627a      	str	r2, [r7, #36]	@ 0x24
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80077f8:	2100      	movs	r1, #0
 80077fa:	4b47      	ldr	r3, [pc, #284]	@ (8007918 <HAL_RCC_GetSysClockFreq+0x188>)
 80077fc:	fb03 f201 	mul.w	r2, r3, r1
 8007800:	2300      	movs	r3, #0
 8007802:	fb00 f303 	mul.w	r3, r0, r3
 8007806:	4413      	add	r3, r2
 8007808:	4a43      	ldr	r2, [pc, #268]	@ (8007918 <HAL_RCC_GetSysClockFreq+0x188>)
 800780a:	fba0 1202 	umull	r1, r2, r0, r2
 800780e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007810:	460a      	mov	r2, r1
 8007812:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007814:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007816:	4413      	add	r3, r2
 8007818:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800781a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800781c:	2200      	movs	r2, #0
 800781e:	61bb      	str	r3, [r7, #24]
 8007820:	61fa      	str	r2, [r7, #28]
 8007822:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007826:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800782a:	f7f9 fa35 	bl	8000c98 <__aeabi_uldivmod>
 800782e:	4602      	mov	r2, r0
 8007830:	460b      	mov	r3, r1
 8007832:	4613      	mov	r3, r2
 8007834:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007836:	e053      	b.n	80078e0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007838:	4b35      	ldr	r3, [pc, #212]	@ (8007910 <HAL_RCC_GetSysClockFreq+0x180>)
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	099b      	lsrs	r3, r3, #6
 800783e:	2200      	movs	r2, #0
 8007840:	613b      	str	r3, [r7, #16]
 8007842:	617a      	str	r2, [r7, #20]
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800784a:	f04f 0b00 	mov.w	fp, #0
 800784e:	4652      	mov	r2, sl
 8007850:	465b      	mov	r3, fp
 8007852:	f04f 0000 	mov.w	r0, #0
 8007856:	f04f 0100 	mov.w	r1, #0
 800785a:	0159      	lsls	r1, r3, #5
 800785c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007860:	0150      	lsls	r0, r2, #5
 8007862:	4602      	mov	r2, r0
 8007864:	460b      	mov	r3, r1
 8007866:	ebb2 080a 	subs.w	r8, r2, sl
 800786a:	eb63 090b 	sbc.w	r9, r3, fp
 800786e:	f04f 0200 	mov.w	r2, #0
 8007872:	f04f 0300 	mov.w	r3, #0
 8007876:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800787a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800787e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007882:	ebb2 0408 	subs.w	r4, r2, r8
 8007886:	eb63 0509 	sbc.w	r5, r3, r9
 800788a:	f04f 0200 	mov.w	r2, #0
 800788e:	f04f 0300 	mov.w	r3, #0
 8007892:	00eb      	lsls	r3, r5, #3
 8007894:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007898:	00e2      	lsls	r2, r4, #3
 800789a:	4614      	mov	r4, r2
 800789c:	461d      	mov	r5, r3
 800789e:	eb14 030a 	adds.w	r3, r4, sl
 80078a2:	603b      	str	r3, [r7, #0]
 80078a4:	eb45 030b 	adc.w	r3, r5, fp
 80078a8:	607b      	str	r3, [r7, #4]
 80078aa:	f04f 0200 	mov.w	r2, #0
 80078ae:	f04f 0300 	mov.w	r3, #0
 80078b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80078b6:	4629      	mov	r1, r5
 80078b8:	028b      	lsls	r3, r1, #10
 80078ba:	4621      	mov	r1, r4
 80078bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80078c0:	4621      	mov	r1, r4
 80078c2:	028a      	lsls	r2, r1, #10
 80078c4:	4610      	mov	r0, r2
 80078c6:	4619      	mov	r1, r3
 80078c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ca:	2200      	movs	r2, #0
 80078cc:	60bb      	str	r3, [r7, #8]
 80078ce:	60fa      	str	r2, [r7, #12]
 80078d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078d4:	f7f9 f9e0 	bl	8000c98 <__aeabi_uldivmod>
 80078d8:	4602      	mov	r2, r0
 80078da:	460b      	mov	r3, r1
 80078dc:	4613      	mov	r3, r2
 80078de:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80078e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007910 <HAL_RCC_GetSysClockFreq+0x180>)
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	0c1b      	lsrs	r3, r3, #16
 80078e6:	f003 0303 	and.w	r3, r3, #3
 80078ea:	3301      	adds	r3, #1
 80078ec:	005b      	lsls	r3, r3, #1
 80078ee:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80078f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80078f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80078fa:	e002      	b.n	8007902 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80078fc:	4b05      	ldr	r3, [pc, #20]	@ (8007914 <HAL_RCC_GetSysClockFreq+0x184>)
 80078fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007900:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007904:	4618      	mov	r0, r3
 8007906:	3740      	adds	r7, #64	@ 0x40
 8007908:	46bd      	mov	sp, r7
 800790a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800790e:	bf00      	nop
 8007910:	40023800 	.word	0x40023800
 8007914:	00f42400 	.word	0x00f42400
 8007918:	017d7840 	.word	0x017d7840

0800791c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800791c:	b480      	push	{r7}
 800791e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007920:	4b03      	ldr	r3, [pc, #12]	@ (8007930 <HAL_RCC_GetHCLKFreq+0x14>)
 8007922:	681b      	ldr	r3, [r3, #0]
}
 8007924:	4618      	mov	r0, r3
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop
 8007930:	20000000 	.word	0x20000000

08007934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007938:	f7ff fff0 	bl	800791c <HAL_RCC_GetHCLKFreq>
 800793c:	4602      	mov	r2, r0
 800793e:	4b05      	ldr	r3, [pc, #20]	@ (8007954 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	0a9b      	lsrs	r3, r3, #10
 8007944:	f003 0307 	and.w	r3, r3, #7
 8007948:	4903      	ldr	r1, [pc, #12]	@ (8007958 <HAL_RCC_GetPCLK1Freq+0x24>)
 800794a:	5ccb      	ldrb	r3, [r1, r3]
 800794c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007950:	4618      	mov	r0, r3
 8007952:	bd80      	pop	{r7, pc}
 8007954:	40023800 	.word	0x40023800
 8007958:	08011178 	.word	0x08011178

0800795c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e041      	b.n	80079f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d106      	bne.n	8007988 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f7fa fc7e 	bl	8002284 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2202      	movs	r2, #2
 800798c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	3304      	adds	r3, #4
 8007998:	4619      	mov	r1, r3
 800799a:	4610      	mov	r0, r2
 800799c:	f000 fc3c 	bl	8008218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
	...

080079fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d001      	beq.n	8007a14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e044      	b.n	8007a9e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2202      	movs	r2, #2
 8007a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68da      	ldr	r2, [r3, #12]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f042 0201 	orr.w	r2, r2, #1
 8007a2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a1e      	ldr	r2, [pc, #120]	@ (8007aac <HAL_TIM_Base_Start_IT+0xb0>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d018      	beq.n	8007a68 <HAL_TIM_Base_Start_IT+0x6c>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a3e:	d013      	beq.n	8007a68 <HAL_TIM_Base_Start_IT+0x6c>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a1a      	ldr	r2, [pc, #104]	@ (8007ab0 <HAL_TIM_Base_Start_IT+0xb4>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d00e      	beq.n	8007a68 <HAL_TIM_Base_Start_IT+0x6c>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a19      	ldr	r2, [pc, #100]	@ (8007ab4 <HAL_TIM_Base_Start_IT+0xb8>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d009      	beq.n	8007a68 <HAL_TIM_Base_Start_IT+0x6c>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a17      	ldr	r2, [pc, #92]	@ (8007ab8 <HAL_TIM_Base_Start_IT+0xbc>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d004      	beq.n	8007a68 <HAL_TIM_Base_Start_IT+0x6c>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a16      	ldr	r2, [pc, #88]	@ (8007abc <HAL_TIM_Base_Start_IT+0xc0>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d111      	bne.n	8007a8c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	f003 0307 	and.w	r3, r3, #7
 8007a72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2b06      	cmp	r3, #6
 8007a78:	d010      	beq.n	8007a9c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f042 0201 	orr.w	r2, r2, #1
 8007a88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a8a:	e007      	b.n	8007a9c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f042 0201 	orr.w	r2, r2, #1
 8007a9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3714      	adds	r7, #20
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	40010000 	.word	0x40010000
 8007ab0:	40000400 	.word	0x40000400
 8007ab4:	40000800 	.word	0x40000800
 8007ab8:	40000c00 	.word	0x40000c00
 8007abc:	40014000 	.word	0x40014000

08007ac0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d101      	bne.n	8007ad2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e041      	b.n	8007b56 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d106      	bne.n	8007aec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f839 	bl	8007b5e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2202      	movs	r2, #2
 8007af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	3304      	adds	r3, #4
 8007afc:	4619      	mov	r1, r3
 8007afe:	4610      	mov	r0, r2
 8007b00:	f000 fb8a 	bl	8008218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007b5e:	b480      	push	{r7}
 8007b60:	b083      	sub	sp, #12
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007b66:	bf00      	nop
 8007b68:	370c      	adds	r7, #12
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
	...

08007b74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d109      	bne.n	8007b98 <HAL_TIM_PWM_Start+0x24>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	bf14      	ite	ne
 8007b90:	2301      	movne	r3, #1
 8007b92:	2300      	moveq	r3, #0
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	e022      	b.n	8007bde <HAL_TIM_PWM_Start+0x6a>
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	2b04      	cmp	r3, #4
 8007b9c:	d109      	bne.n	8007bb2 <HAL_TIM_PWM_Start+0x3e>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	bf14      	ite	ne
 8007baa:	2301      	movne	r3, #1
 8007bac:	2300      	moveq	r3, #0
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	e015      	b.n	8007bde <HAL_TIM_PWM_Start+0x6a>
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	2b08      	cmp	r3, #8
 8007bb6:	d109      	bne.n	8007bcc <HAL_TIM_PWM_Start+0x58>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	bf14      	ite	ne
 8007bc4:	2301      	movne	r3, #1
 8007bc6:	2300      	moveq	r3, #0
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	e008      	b.n	8007bde <HAL_TIM_PWM_Start+0x6a>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	bf14      	ite	ne
 8007bd8:	2301      	movne	r3, #1
 8007bda:	2300      	moveq	r3, #0
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d001      	beq.n	8007be6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e068      	b.n	8007cb8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d104      	bne.n	8007bf6 <HAL_TIM_PWM_Start+0x82>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2202      	movs	r2, #2
 8007bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bf4:	e013      	b.n	8007c1e <HAL_TIM_PWM_Start+0xaa>
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	2b04      	cmp	r3, #4
 8007bfa:	d104      	bne.n	8007c06 <HAL_TIM_PWM_Start+0x92>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2202      	movs	r2, #2
 8007c00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c04:	e00b      	b.n	8007c1e <HAL_TIM_PWM_Start+0xaa>
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	2b08      	cmp	r3, #8
 8007c0a:	d104      	bne.n	8007c16 <HAL_TIM_PWM_Start+0xa2>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c14:	e003      	b.n	8007c1e <HAL_TIM_PWM_Start+0xaa>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2202      	movs	r2, #2
 8007c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2201      	movs	r2, #1
 8007c24:	6839      	ldr	r1, [r7, #0]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f000 fda2 	bl	8008770 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a23      	ldr	r2, [pc, #140]	@ (8007cc0 <HAL_TIM_PWM_Start+0x14c>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d107      	bne.n	8007c46 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c44:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a1d      	ldr	r2, [pc, #116]	@ (8007cc0 <HAL_TIM_PWM_Start+0x14c>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d018      	beq.n	8007c82 <HAL_TIM_PWM_Start+0x10e>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c58:	d013      	beq.n	8007c82 <HAL_TIM_PWM_Start+0x10e>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a19      	ldr	r2, [pc, #100]	@ (8007cc4 <HAL_TIM_PWM_Start+0x150>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d00e      	beq.n	8007c82 <HAL_TIM_PWM_Start+0x10e>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a17      	ldr	r2, [pc, #92]	@ (8007cc8 <HAL_TIM_PWM_Start+0x154>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d009      	beq.n	8007c82 <HAL_TIM_PWM_Start+0x10e>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a16      	ldr	r2, [pc, #88]	@ (8007ccc <HAL_TIM_PWM_Start+0x158>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d004      	beq.n	8007c82 <HAL_TIM_PWM_Start+0x10e>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a14      	ldr	r2, [pc, #80]	@ (8007cd0 <HAL_TIM_PWM_Start+0x15c>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d111      	bne.n	8007ca6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f003 0307 	and.w	r3, r3, #7
 8007c8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2b06      	cmp	r3, #6
 8007c92:	d010      	beq.n	8007cb6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f042 0201 	orr.w	r2, r2, #1
 8007ca2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ca4:	e007      	b.n	8007cb6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f042 0201 	orr.w	r2, r2, #1
 8007cb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	40010000 	.word	0x40010000
 8007cc4:	40000400 	.word	0x40000400
 8007cc8:	40000800 	.word	0x40000800
 8007ccc:	40000c00 	.word	0x40000c00
 8007cd0:	40014000 	.word	0x40014000

08007cd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	f003 0302 	and.w	r3, r3, #2
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d020      	beq.n	8007d38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f003 0302 	and.w	r3, r3, #2
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d01b      	beq.n	8007d38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f06f 0202 	mvn.w	r2, #2
 8007d08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	f003 0303 	and.w	r3, r3, #3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d003      	beq.n	8007d26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fa5b 	bl	80081da <HAL_TIM_IC_CaptureCallback>
 8007d24:	e005      	b.n	8007d32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fa4d 	bl	80081c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fa5e 	bl	80081ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	f003 0304 	and.w	r3, r3, #4
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d020      	beq.n	8007d84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f003 0304 	and.w	r3, r3, #4
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d01b      	beq.n	8007d84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f06f 0204 	mvn.w	r2, #4
 8007d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2202      	movs	r2, #2
 8007d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d003      	beq.n	8007d72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fa35 	bl	80081da <HAL_TIM_IC_CaptureCallback>
 8007d70:	e005      	b.n	8007d7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 fa27 	bl	80081c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 fa38 	bl	80081ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	f003 0308 	and.w	r3, r3, #8
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d020      	beq.n	8007dd0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f003 0308 	and.w	r3, r3, #8
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d01b      	beq.n	8007dd0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f06f 0208 	mvn.w	r2, #8
 8007da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2204      	movs	r2, #4
 8007da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	69db      	ldr	r3, [r3, #28]
 8007dae:	f003 0303 	and.w	r3, r3, #3
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fa0f 	bl	80081da <HAL_TIM_IC_CaptureCallback>
 8007dbc:	e005      	b.n	8007dca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fa01 	bl	80081c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 fa12 	bl	80081ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	f003 0310 	and.w	r3, r3, #16
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d020      	beq.n	8007e1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f003 0310 	and.w	r3, r3, #16
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d01b      	beq.n	8007e1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f06f 0210 	mvn.w	r2, #16
 8007dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2208      	movs	r2, #8
 8007df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	69db      	ldr	r3, [r3, #28]
 8007dfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d003      	beq.n	8007e0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f9e9 	bl	80081da <HAL_TIM_IC_CaptureCallback>
 8007e08:	e005      	b.n	8007e16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f9db 	bl	80081c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 f9ec 	bl	80081ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	f003 0301 	and.w	r3, r3, #1
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00c      	beq.n	8007e40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f003 0301 	and.w	r3, r3, #1
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d007      	beq.n	8007e40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f06f 0201 	mvn.w	r2, #1
 8007e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f7f9 fc50 	bl	80016e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00c      	beq.n	8007e64 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d007      	beq.n	8007e64 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fd24 	bl	80088ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00c      	beq.n	8007e88 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d007      	beq.n	8007e88 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f9bd 	bl	8008202 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	f003 0320 	and.w	r3, r3, #32
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00c      	beq.n	8007eac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f003 0320 	and.w	r3, r3, #32
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d007      	beq.n	8007eac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f06f 0220 	mvn.w	r2, #32
 8007ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fcf6 	bl	8008898 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007eac:	bf00      	nop
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b086      	sub	sp, #24
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d101      	bne.n	8007ed2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007ece:	2302      	movs	r3, #2
 8007ed0:	e0ae      	b.n	8008030 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2b0c      	cmp	r3, #12
 8007ede:	f200 809f 	bhi.w	8008020 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ee8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee8:	08007f1d 	.word	0x08007f1d
 8007eec:	08008021 	.word	0x08008021
 8007ef0:	08008021 	.word	0x08008021
 8007ef4:	08008021 	.word	0x08008021
 8007ef8:	08007f5d 	.word	0x08007f5d
 8007efc:	08008021 	.word	0x08008021
 8007f00:	08008021 	.word	0x08008021
 8007f04:	08008021 	.word	0x08008021
 8007f08:	08007f9f 	.word	0x08007f9f
 8007f0c:	08008021 	.word	0x08008021
 8007f10:	08008021 	.word	0x08008021
 8007f14:	08008021 	.word	0x08008021
 8007f18:	08007fdf 	.word	0x08007fdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68b9      	ldr	r1, [r7, #8]
 8007f22:	4618      	mov	r0, r3
 8007f24:	f000 f9fe 	bl	8008324 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	699a      	ldr	r2, [r3, #24]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f042 0208 	orr.w	r2, r2, #8
 8007f36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	699a      	ldr	r2, [r3, #24]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f022 0204 	bic.w	r2, r2, #4
 8007f46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	6999      	ldr	r1, [r3, #24]
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	691a      	ldr	r2, [r3, #16]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	430a      	orrs	r2, r1
 8007f58:	619a      	str	r2, [r3, #24]
      break;
 8007f5a:	e064      	b.n	8008026 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68b9      	ldr	r1, [r7, #8]
 8007f62:	4618      	mov	r0, r3
 8007f64:	f000 fa44 	bl	80083f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	699a      	ldr	r2, [r3, #24]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	699a      	ldr	r2, [r3, #24]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	6999      	ldr	r1, [r3, #24]
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	021a      	lsls	r2, r3, #8
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	430a      	orrs	r2, r1
 8007f9a:	619a      	str	r2, [r3, #24]
      break;
 8007f9c:	e043      	b.n	8008026 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68b9      	ldr	r1, [r7, #8]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f000 fa8f 	bl	80084c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	69da      	ldr	r2, [r3, #28]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f042 0208 	orr.w	r2, r2, #8
 8007fb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	69da      	ldr	r2, [r3, #28]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f022 0204 	bic.w	r2, r2, #4
 8007fc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	69d9      	ldr	r1, [r3, #28]
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	691a      	ldr	r2, [r3, #16]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	430a      	orrs	r2, r1
 8007fda:	61da      	str	r2, [r3, #28]
      break;
 8007fdc:	e023      	b.n	8008026 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68b9      	ldr	r1, [r7, #8]
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f000 fad9 	bl	800859c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	69da      	ldr	r2, [r3, #28]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ff8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	69da      	ldr	r2, [r3, #28]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008008:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	69d9      	ldr	r1, [r3, #28]
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	021a      	lsls	r2, r3, #8
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	430a      	orrs	r2, r1
 800801c:	61da      	str	r2, [r3, #28]
      break;
 800801e:	e002      	b.n	8008026 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	75fb      	strb	r3, [r7, #23]
      break;
 8008024:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800802e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008030:	4618      	mov	r0, r3
 8008032:	3718      	adds	r7, #24
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008042:	2300      	movs	r3, #0
 8008044:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800804c:	2b01      	cmp	r3, #1
 800804e:	d101      	bne.n	8008054 <HAL_TIM_ConfigClockSource+0x1c>
 8008050:	2302      	movs	r3, #2
 8008052:	e0b4      	b.n	80081be <HAL_TIM_ConfigClockSource+0x186>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2202      	movs	r2, #2
 8008060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008072:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800807a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68ba      	ldr	r2, [r7, #8]
 8008082:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800808c:	d03e      	beq.n	800810c <HAL_TIM_ConfigClockSource+0xd4>
 800808e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008092:	f200 8087 	bhi.w	80081a4 <HAL_TIM_ConfigClockSource+0x16c>
 8008096:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800809a:	f000 8086 	beq.w	80081aa <HAL_TIM_ConfigClockSource+0x172>
 800809e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080a2:	d87f      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x16c>
 80080a4:	2b70      	cmp	r3, #112	@ 0x70
 80080a6:	d01a      	beq.n	80080de <HAL_TIM_ConfigClockSource+0xa6>
 80080a8:	2b70      	cmp	r3, #112	@ 0x70
 80080aa:	d87b      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x16c>
 80080ac:	2b60      	cmp	r3, #96	@ 0x60
 80080ae:	d050      	beq.n	8008152 <HAL_TIM_ConfigClockSource+0x11a>
 80080b0:	2b60      	cmp	r3, #96	@ 0x60
 80080b2:	d877      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x16c>
 80080b4:	2b50      	cmp	r3, #80	@ 0x50
 80080b6:	d03c      	beq.n	8008132 <HAL_TIM_ConfigClockSource+0xfa>
 80080b8:	2b50      	cmp	r3, #80	@ 0x50
 80080ba:	d873      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x16c>
 80080bc:	2b40      	cmp	r3, #64	@ 0x40
 80080be:	d058      	beq.n	8008172 <HAL_TIM_ConfigClockSource+0x13a>
 80080c0:	2b40      	cmp	r3, #64	@ 0x40
 80080c2:	d86f      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x16c>
 80080c4:	2b30      	cmp	r3, #48	@ 0x30
 80080c6:	d064      	beq.n	8008192 <HAL_TIM_ConfigClockSource+0x15a>
 80080c8:	2b30      	cmp	r3, #48	@ 0x30
 80080ca:	d86b      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x16c>
 80080cc:	2b20      	cmp	r3, #32
 80080ce:	d060      	beq.n	8008192 <HAL_TIM_ConfigClockSource+0x15a>
 80080d0:	2b20      	cmp	r3, #32
 80080d2:	d867      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x16c>
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d05c      	beq.n	8008192 <HAL_TIM_ConfigClockSource+0x15a>
 80080d8:	2b10      	cmp	r3, #16
 80080da:	d05a      	beq.n	8008192 <HAL_TIM_ConfigClockSource+0x15a>
 80080dc:	e062      	b.n	80081a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80080ee:	f000 fb1f 	bl	8008730 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008100:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	609a      	str	r2, [r3, #8]
      break;
 800810a:	e04f      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800811c:	f000 fb08 	bl	8008730 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	689a      	ldr	r2, [r3, #8]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800812e:	609a      	str	r2, [r3, #8]
      break;
 8008130:	e03c      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800813e:	461a      	mov	r2, r3
 8008140:	f000 fa7c 	bl	800863c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2150      	movs	r1, #80	@ 0x50
 800814a:	4618      	mov	r0, r3
 800814c:	f000 fad5 	bl	80086fa <TIM_ITRx_SetConfig>
      break;
 8008150:	e02c      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800815e:	461a      	mov	r2, r3
 8008160:	f000 fa9b 	bl	800869a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2160      	movs	r1, #96	@ 0x60
 800816a:	4618      	mov	r0, r3
 800816c:	f000 fac5 	bl	80086fa <TIM_ITRx_SetConfig>
      break;
 8008170:	e01c      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800817e:	461a      	mov	r2, r3
 8008180:	f000 fa5c 	bl	800863c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2140      	movs	r1, #64	@ 0x40
 800818a:	4618      	mov	r0, r3
 800818c:	f000 fab5 	bl	80086fa <TIM_ITRx_SetConfig>
      break;
 8008190:	e00c      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4619      	mov	r1, r3
 800819c:	4610      	mov	r0, r2
 800819e:	f000 faac 	bl	80086fa <TIM_ITRx_SetConfig>
      break;
 80081a2:	e003      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	73fb      	strb	r3, [r7, #15]
      break;
 80081a8:	e000      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80081aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80081bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081c6:	b480      	push	{r7}
 80081c8:	b083      	sub	sp, #12
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081ce:	bf00      	nop
 80081d0:	370c      	adds	r7, #12
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr

080081da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081da:	b480      	push	{r7}
 80081dc:	b083      	sub	sp, #12
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081e2:	bf00      	nop
 80081e4:	370c      	adds	r7, #12
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr

080081ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081ee:	b480      	push	{r7}
 80081f0:	b083      	sub	sp, #12
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081f6:	bf00      	nop
 80081f8:	370c      	adds	r7, #12
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr

08008202 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008202:	b480      	push	{r7}
 8008204:	b083      	sub	sp, #12
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800820a:	bf00      	nop
 800820c:	370c      	adds	r7, #12
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr
	...

08008218 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a37      	ldr	r2, [pc, #220]	@ (8008308 <TIM_Base_SetConfig+0xf0>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d00f      	beq.n	8008250 <TIM_Base_SetConfig+0x38>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008236:	d00b      	beq.n	8008250 <TIM_Base_SetConfig+0x38>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a34      	ldr	r2, [pc, #208]	@ (800830c <TIM_Base_SetConfig+0xf4>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d007      	beq.n	8008250 <TIM_Base_SetConfig+0x38>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a33      	ldr	r2, [pc, #204]	@ (8008310 <TIM_Base_SetConfig+0xf8>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d003      	beq.n	8008250 <TIM_Base_SetConfig+0x38>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a32      	ldr	r2, [pc, #200]	@ (8008314 <TIM_Base_SetConfig+0xfc>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d108      	bne.n	8008262 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008256:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	4313      	orrs	r3, r2
 8008260:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a28      	ldr	r2, [pc, #160]	@ (8008308 <TIM_Base_SetConfig+0xf0>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d01b      	beq.n	80082a2 <TIM_Base_SetConfig+0x8a>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008270:	d017      	beq.n	80082a2 <TIM_Base_SetConfig+0x8a>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a25      	ldr	r2, [pc, #148]	@ (800830c <TIM_Base_SetConfig+0xf4>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d013      	beq.n	80082a2 <TIM_Base_SetConfig+0x8a>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a24      	ldr	r2, [pc, #144]	@ (8008310 <TIM_Base_SetConfig+0xf8>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d00f      	beq.n	80082a2 <TIM_Base_SetConfig+0x8a>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a23      	ldr	r2, [pc, #140]	@ (8008314 <TIM_Base_SetConfig+0xfc>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d00b      	beq.n	80082a2 <TIM_Base_SetConfig+0x8a>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a22      	ldr	r2, [pc, #136]	@ (8008318 <TIM_Base_SetConfig+0x100>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d007      	beq.n	80082a2 <TIM_Base_SetConfig+0x8a>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a21      	ldr	r2, [pc, #132]	@ (800831c <TIM_Base_SetConfig+0x104>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d003      	beq.n	80082a2 <TIM_Base_SetConfig+0x8a>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a20      	ldr	r2, [pc, #128]	@ (8008320 <TIM_Base_SetConfig+0x108>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d108      	bne.n	80082b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	68fa      	ldr	r2, [r7, #12]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	695b      	ldr	r3, [r3, #20]
 80082be:	4313      	orrs	r3, r2
 80082c0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	689a      	ldr	r2, [r3, #8]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4a0c      	ldr	r2, [pc, #48]	@ (8008308 <TIM_Base_SetConfig+0xf0>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d103      	bne.n	80082e2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	691a      	ldr	r2, [r3, #16]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f043 0204 	orr.w	r2, r3, #4
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2201      	movs	r2, #1
 80082f2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	601a      	str	r2, [r3, #0]
}
 80082fa:	bf00      	nop
 80082fc:	3714      	adds	r7, #20
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop
 8008308:	40010000 	.word	0x40010000
 800830c:	40000400 	.word	0x40000400
 8008310:	40000800 	.word	0x40000800
 8008314:	40000c00 	.word	0x40000c00
 8008318:	40014000 	.word	0x40014000
 800831c:	40014400 	.word	0x40014400
 8008320:	40014800 	.word	0x40014800

08008324 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008324:	b480      	push	{r7}
 8008326:	b087      	sub	sp, #28
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a1b      	ldr	r3, [r3, #32]
 8008332:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a1b      	ldr	r3, [r3, #32]
 8008338:	f023 0201 	bic.w	r2, r3, #1
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	699b      	ldr	r3, [r3, #24]
 800834a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f023 0303 	bic.w	r3, r3, #3
 800835a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68fa      	ldr	r2, [r7, #12]
 8008362:	4313      	orrs	r3, r2
 8008364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	f023 0302 	bic.w	r3, r3, #2
 800836c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	697a      	ldr	r2, [r7, #20]
 8008374:	4313      	orrs	r3, r2
 8008376:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a1c      	ldr	r2, [pc, #112]	@ (80083ec <TIM_OC1_SetConfig+0xc8>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d10c      	bne.n	800839a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	f023 0308 	bic.w	r3, r3, #8
 8008386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	697a      	ldr	r2, [r7, #20]
 800838e:	4313      	orrs	r3, r2
 8008390:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	f023 0304 	bic.w	r3, r3, #4
 8008398:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a13      	ldr	r2, [pc, #76]	@ (80083ec <TIM_OC1_SetConfig+0xc8>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d111      	bne.n	80083c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80083b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	695b      	ldr	r3, [r3, #20]
 80083b6:	693a      	ldr	r2, [r7, #16]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	699b      	ldr	r3, [r3, #24]
 80083c0:	693a      	ldr	r2, [r7, #16]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	693a      	ldr	r2, [r7, #16]
 80083ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	68fa      	ldr	r2, [r7, #12]
 80083d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	685a      	ldr	r2, [r3, #4]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	697a      	ldr	r2, [r7, #20]
 80083de:	621a      	str	r2, [r3, #32]
}
 80083e0:	bf00      	nop
 80083e2:	371c      	adds	r7, #28
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr
 80083ec:	40010000 	.word	0x40010000

080083f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b087      	sub	sp, #28
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a1b      	ldr	r3, [r3, #32]
 80083fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a1b      	ldr	r3, [r3, #32]
 8008404:	f023 0210 	bic.w	r2, r3, #16
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800841e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	021b      	lsls	r3, r3, #8
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	4313      	orrs	r3, r2
 8008432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	f023 0320 	bic.w	r3, r3, #32
 800843a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	011b      	lsls	r3, r3, #4
 8008442:	697a      	ldr	r2, [r7, #20]
 8008444:	4313      	orrs	r3, r2
 8008446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a1e      	ldr	r2, [pc, #120]	@ (80084c4 <TIM_OC2_SetConfig+0xd4>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d10d      	bne.n	800846c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008456:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	011b      	lsls	r3, r3, #4
 800845e:	697a      	ldr	r2, [r7, #20]
 8008460:	4313      	orrs	r3, r2
 8008462:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800846a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a15      	ldr	r2, [pc, #84]	@ (80084c4 <TIM_OC2_SetConfig+0xd4>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d113      	bne.n	800849c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800847a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008482:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	695b      	ldr	r3, [r3, #20]
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	693a      	ldr	r2, [r7, #16]
 800848c:	4313      	orrs	r3, r2
 800848e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	699b      	ldr	r3, [r3, #24]
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	693a      	ldr	r2, [r7, #16]
 8008498:	4313      	orrs	r3, r2
 800849a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	693a      	ldr	r2, [r7, #16]
 80084a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	685a      	ldr	r2, [r3, #4]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	697a      	ldr	r2, [r7, #20]
 80084b4:	621a      	str	r2, [r3, #32]
}
 80084b6:	bf00      	nop
 80084b8:	371c      	adds	r7, #28
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop
 80084c4:	40010000 	.word	0x40010000

080084c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b087      	sub	sp, #28
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a1b      	ldr	r3, [r3, #32]
 80084d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6a1b      	ldr	r3, [r3, #32]
 80084dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	69db      	ldr	r3, [r3, #28]
 80084ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f023 0303 	bic.w	r3, r3, #3
 80084fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	4313      	orrs	r3, r2
 8008508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008510:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	021b      	lsls	r3, r3, #8
 8008518:	697a      	ldr	r2, [r7, #20]
 800851a:	4313      	orrs	r3, r2
 800851c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a1d      	ldr	r2, [pc, #116]	@ (8008598 <TIM_OC3_SetConfig+0xd0>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d10d      	bne.n	8008542 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800852c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	021b      	lsls	r3, r3, #8
 8008534:	697a      	ldr	r2, [r7, #20]
 8008536:	4313      	orrs	r3, r2
 8008538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4a14      	ldr	r2, [pc, #80]	@ (8008598 <TIM_OC3_SetConfig+0xd0>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d113      	bne.n	8008572 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008550:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008558:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	695b      	ldr	r3, [r3, #20]
 800855e:	011b      	lsls	r3, r3, #4
 8008560:	693a      	ldr	r2, [r7, #16]
 8008562:	4313      	orrs	r3, r2
 8008564:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	699b      	ldr	r3, [r3, #24]
 800856a:	011b      	lsls	r3, r3, #4
 800856c:	693a      	ldr	r2, [r7, #16]
 800856e:	4313      	orrs	r3, r2
 8008570:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	693a      	ldr	r2, [r7, #16]
 8008576:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	68fa      	ldr	r2, [r7, #12]
 800857c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	685a      	ldr	r2, [r3, #4]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	697a      	ldr	r2, [r7, #20]
 800858a:	621a      	str	r2, [r3, #32]
}
 800858c:	bf00      	nop
 800858e:	371c      	adds	r7, #28
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr
 8008598:	40010000 	.word	0x40010000

0800859c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800859c:	b480      	push	{r7}
 800859e:	b087      	sub	sp, #28
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6a1b      	ldr	r3, [r3, #32]
 80085aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6a1b      	ldr	r3, [r3, #32]
 80085b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	69db      	ldr	r3, [r3, #28]
 80085c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	021b      	lsls	r3, r3, #8
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	4313      	orrs	r3, r2
 80085de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80085e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	031b      	lsls	r3, r3, #12
 80085ee:	693a      	ldr	r2, [r7, #16]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a10      	ldr	r2, [pc, #64]	@ (8008638 <TIM_OC4_SetConfig+0x9c>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d109      	bne.n	8008610 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008602:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	695b      	ldr	r3, [r3, #20]
 8008608:	019b      	lsls	r3, r3, #6
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	4313      	orrs	r3, r2
 800860e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	697a      	ldr	r2, [r7, #20]
 8008614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	685a      	ldr	r2, [r3, #4]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	693a      	ldr	r2, [r7, #16]
 8008628:	621a      	str	r2, [r3, #32]
}
 800862a:	bf00      	nop
 800862c:	371c      	adds	r7, #28
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	40010000 	.word	0x40010000

0800863c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800863c:	b480      	push	{r7}
 800863e:	b087      	sub	sp, #28
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6a1b      	ldr	r3, [r3, #32]
 800864c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6a1b      	ldr	r3, [r3, #32]
 8008652:	f023 0201 	bic.w	r2, r3, #1
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	699b      	ldr	r3, [r3, #24]
 800865e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008666:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	011b      	lsls	r3, r3, #4
 800866c:	693a      	ldr	r2, [r7, #16]
 800866e:	4313      	orrs	r3, r2
 8008670:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	f023 030a 	bic.w	r3, r3, #10
 8008678:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800867a:	697a      	ldr	r2, [r7, #20]
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	4313      	orrs	r3, r2
 8008680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	693a      	ldr	r2, [r7, #16]
 8008686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	697a      	ldr	r2, [r7, #20]
 800868c:	621a      	str	r2, [r3, #32]
}
 800868e:	bf00      	nop
 8008690:	371c      	adds	r7, #28
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr

0800869a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800869a:	b480      	push	{r7}
 800869c:	b087      	sub	sp, #28
 800869e:	af00      	add	r7, sp, #0
 80086a0:	60f8      	str	r0, [r7, #12]
 80086a2:	60b9      	str	r1, [r7, #8]
 80086a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	6a1b      	ldr	r3, [r3, #32]
 80086aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6a1b      	ldr	r3, [r3, #32]
 80086b0:	f023 0210 	bic.w	r2, r3, #16
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80086c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	031b      	lsls	r3, r3, #12
 80086ca:	693a      	ldr	r2, [r7, #16]
 80086cc:	4313      	orrs	r3, r2
 80086ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80086d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	011b      	lsls	r3, r3, #4
 80086dc:	697a      	ldr	r2, [r7, #20]
 80086de:	4313      	orrs	r3, r2
 80086e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	693a      	ldr	r2, [r7, #16]
 80086e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	697a      	ldr	r2, [r7, #20]
 80086ec:	621a      	str	r2, [r3, #32]
}
 80086ee:	bf00      	nop
 80086f0:	371c      	adds	r7, #28
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr

080086fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086fa:	b480      	push	{r7}
 80086fc:	b085      	sub	sp, #20
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008710:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008712:	683a      	ldr	r2, [r7, #0]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	4313      	orrs	r3, r2
 8008718:	f043 0307 	orr.w	r3, r3, #7
 800871c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	609a      	str	r2, [r3, #8]
}
 8008724:	bf00      	nop
 8008726:	3714      	adds	r7, #20
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008730:	b480      	push	{r7}
 8008732:	b087      	sub	sp, #28
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	607a      	str	r2, [r7, #4]
 800873c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800874a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	021a      	lsls	r2, r3, #8
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	431a      	orrs	r2, r3
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	4313      	orrs	r3, r2
 8008758:	697a      	ldr	r2, [r7, #20]
 800875a:	4313      	orrs	r3, r2
 800875c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	697a      	ldr	r2, [r7, #20]
 8008762:	609a      	str	r2, [r3, #8]
}
 8008764:	bf00      	nop
 8008766:	371c      	adds	r7, #28
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008770:	b480      	push	{r7}
 8008772:	b087      	sub	sp, #28
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	f003 031f 	and.w	r3, r3, #31
 8008782:	2201      	movs	r2, #1
 8008784:	fa02 f303 	lsl.w	r3, r2, r3
 8008788:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6a1a      	ldr	r2, [r3, #32]
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	43db      	mvns	r3, r3
 8008792:	401a      	ands	r2, r3
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6a1a      	ldr	r2, [r3, #32]
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	f003 031f 	and.w	r3, r3, #31
 80087a2:	6879      	ldr	r1, [r7, #4]
 80087a4:	fa01 f303 	lsl.w	r3, r1, r3
 80087a8:	431a      	orrs	r2, r3
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	621a      	str	r2, [r3, #32]
}
 80087ae:	bf00      	nop
 80087b0:	371c      	adds	r7, #28
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr
	...

080087bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d101      	bne.n	80087d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087d0:	2302      	movs	r3, #2
 80087d2:	e050      	b.n	8008876 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2202      	movs	r2, #2
 80087e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	4313      	orrs	r3, r2
 8008804:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	68fa      	ldr	r2, [r7, #12]
 800880c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a1c      	ldr	r2, [pc, #112]	@ (8008884 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d018      	beq.n	800884a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008820:	d013      	beq.n	800884a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a18      	ldr	r2, [pc, #96]	@ (8008888 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d00e      	beq.n	800884a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a16      	ldr	r2, [pc, #88]	@ (800888c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d009      	beq.n	800884a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a15      	ldr	r2, [pc, #84]	@ (8008890 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d004      	beq.n	800884a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a13      	ldr	r2, [pc, #76]	@ (8008894 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d10c      	bne.n	8008864 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008850:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	4313      	orrs	r3, r2
 800885a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	68ba      	ldr	r2, [r7, #8]
 8008862:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3714      	adds	r7, #20
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr
 8008882:	bf00      	nop
 8008884:	40010000 	.word	0x40010000
 8008888:	40000400 	.word	0x40000400
 800888c:	40000800 	.word	0x40000800
 8008890:	40000c00 	.word	0x40000c00
 8008894:	40014000 	.word	0x40014000

08008898 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088a0:	bf00      	nop
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088b4:	bf00      	nop
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80088c0:	b084      	sub	sp, #16
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b084      	sub	sp, #16
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
 80088ca:	f107 001c 	add.w	r0, r7, #28
 80088ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80088d2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d123      	bne.n	8008922 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80088ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008902:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008906:	2b01      	cmp	r3, #1
 8008908:	d105      	bne.n	8008916 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f001 fae8 	bl	8009eec <USB_CoreReset>
 800891c:	4603      	mov	r3, r0
 800891e:	73fb      	strb	r3, [r7, #15]
 8008920:	e01b      	b.n	800895a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	68db      	ldr	r3, [r3, #12]
 8008926:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f001 fadc 	bl	8009eec <USB_CoreReset>
 8008934:	4603      	mov	r3, r0
 8008936:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008938:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800893c:	2b00      	cmp	r3, #0
 800893e:	d106      	bne.n	800894e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008944:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	639a      	str	r2, [r3, #56]	@ 0x38
 800894c:	e005      	b.n	800895a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008952:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800895a:	7fbb      	ldrb	r3, [r7, #30]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d10b      	bne.n	8008978 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	f043 0206 	orr.w	r2, r3, #6
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	f043 0220 	orr.w	r2, r3, #32
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008978:	7bfb      	ldrb	r3, [r7, #15]
}
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008984:	b004      	add	sp, #16
 8008986:	4770      	bx	lr

08008988 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008988:	b480      	push	{r7}
 800898a:	b087      	sub	sp, #28
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	4613      	mov	r3, r2
 8008994:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008996:	79fb      	ldrb	r3, [r7, #7]
 8008998:	2b02      	cmp	r3, #2
 800899a:	d165      	bne.n	8008a68 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	4a41      	ldr	r2, [pc, #260]	@ (8008aa4 <USB_SetTurnaroundTime+0x11c>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d906      	bls.n	80089b2 <USB_SetTurnaroundTime+0x2a>
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	4a40      	ldr	r2, [pc, #256]	@ (8008aa8 <USB_SetTurnaroundTime+0x120>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d202      	bcs.n	80089b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80089ac:	230f      	movs	r3, #15
 80089ae:	617b      	str	r3, [r7, #20]
 80089b0:	e062      	b.n	8008a78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	4a3c      	ldr	r2, [pc, #240]	@ (8008aa8 <USB_SetTurnaroundTime+0x120>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d306      	bcc.n	80089c8 <USB_SetTurnaroundTime+0x40>
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	4a3b      	ldr	r2, [pc, #236]	@ (8008aac <USB_SetTurnaroundTime+0x124>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d202      	bcs.n	80089c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80089c2:	230e      	movs	r3, #14
 80089c4:	617b      	str	r3, [r7, #20]
 80089c6:	e057      	b.n	8008a78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	4a38      	ldr	r2, [pc, #224]	@ (8008aac <USB_SetTurnaroundTime+0x124>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d306      	bcc.n	80089de <USB_SetTurnaroundTime+0x56>
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	4a37      	ldr	r2, [pc, #220]	@ (8008ab0 <USB_SetTurnaroundTime+0x128>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d202      	bcs.n	80089de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80089d8:	230d      	movs	r3, #13
 80089da:	617b      	str	r3, [r7, #20]
 80089dc:	e04c      	b.n	8008a78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	4a33      	ldr	r2, [pc, #204]	@ (8008ab0 <USB_SetTurnaroundTime+0x128>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d306      	bcc.n	80089f4 <USB_SetTurnaroundTime+0x6c>
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	4a32      	ldr	r2, [pc, #200]	@ (8008ab4 <USB_SetTurnaroundTime+0x12c>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d802      	bhi.n	80089f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80089ee:	230c      	movs	r3, #12
 80089f0:	617b      	str	r3, [r7, #20]
 80089f2:	e041      	b.n	8008a78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	4a2f      	ldr	r2, [pc, #188]	@ (8008ab4 <USB_SetTurnaroundTime+0x12c>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d906      	bls.n	8008a0a <USB_SetTurnaroundTime+0x82>
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	4a2e      	ldr	r2, [pc, #184]	@ (8008ab8 <USB_SetTurnaroundTime+0x130>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d802      	bhi.n	8008a0a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008a04:	230b      	movs	r3, #11
 8008a06:	617b      	str	r3, [r7, #20]
 8008a08:	e036      	b.n	8008a78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	4a2a      	ldr	r2, [pc, #168]	@ (8008ab8 <USB_SetTurnaroundTime+0x130>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d906      	bls.n	8008a20 <USB_SetTurnaroundTime+0x98>
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	4a29      	ldr	r2, [pc, #164]	@ (8008abc <USB_SetTurnaroundTime+0x134>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d802      	bhi.n	8008a20 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008a1a:	230a      	movs	r3, #10
 8008a1c:	617b      	str	r3, [r7, #20]
 8008a1e:	e02b      	b.n	8008a78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	4a26      	ldr	r2, [pc, #152]	@ (8008abc <USB_SetTurnaroundTime+0x134>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d906      	bls.n	8008a36 <USB_SetTurnaroundTime+0xae>
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	4a25      	ldr	r2, [pc, #148]	@ (8008ac0 <USB_SetTurnaroundTime+0x138>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d202      	bcs.n	8008a36 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008a30:	2309      	movs	r3, #9
 8008a32:	617b      	str	r3, [r7, #20]
 8008a34:	e020      	b.n	8008a78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	4a21      	ldr	r2, [pc, #132]	@ (8008ac0 <USB_SetTurnaroundTime+0x138>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d306      	bcc.n	8008a4c <USB_SetTurnaroundTime+0xc4>
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	4a20      	ldr	r2, [pc, #128]	@ (8008ac4 <USB_SetTurnaroundTime+0x13c>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d802      	bhi.n	8008a4c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008a46:	2308      	movs	r3, #8
 8008a48:	617b      	str	r3, [r7, #20]
 8008a4a:	e015      	b.n	8008a78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	4a1d      	ldr	r2, [pc, #116]	@ (8008ac4 <USB_SetTurnaroundTime+0x13c>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d906      	bls.n	8008a62 <USB_SetTurnaroundTime+0xda>
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	4a1c      	ldr	r2, [pc, #112]	@ (8008ac8 <USB_SetTurnaroundTime+0x140>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d202      	bcs.n	8008a62 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008a5c:	2307      	movs	r3, #7
 8008a5e:	617b      	str	r3, [r7, #20]
 8008a60:	e00a      	b.n	8008a78 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008a62:	2306      	movs	r3, #6
 8008a64:	617b      	str	r3, [r7, #20]
 8008a66:	e007      	b.n	8008a78 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008a68:	79fb      	ldrb	r3, [r7, #7]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d102      	bne.n	8008a74 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008a6e:	2309      	movs	r3, #9
 8008a70:	617b      	str	r3, [r7, #20]
 8008a72:	e001      	b.n	8008a78 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008a74:	2309      	movs	r3, #9
 8008a76:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	68da      	ldr	r2, [r3, #12]
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	029b      	lsls	r3, r3, #10
 8008a8c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008a90:	431a      	orrs	r2, r3
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	371c      	adds	r7, #28
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr
 8008aa4:	00d8acbf 	.word	0x00d8acbf
 8008aa8:	00e4e1c0 	.word	0x00e4e1c0
 8008aac:	00f42400 	.word	0x00f42400
 8008ab0:	01067380 	.word	0x01067380
 8008ab4:	011a499f 	.word	0x011a499f
 8008ab8:	01312cff 	.word	0x01312cff
 8008abc:	014ca43f 	.word	0x014ca43f
 8008ac0:	016e3600 	.word	0x016e3600
 8008ac4:	01a6ab1f 	.word	0x01a6ab1f
 8008ac8:	01e84800 	.word	0x01e84800

08008acc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	f043 0201 	orr.w	r2, r3, #1
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	370c      	adds	r7, #12
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr

08008aee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008aee:	b480      	push	{r7}
 8008af0:	b083      	sub	sp, #12
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	f023 0201 	bic.w	r2, r3, #1
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008b02:	2300      	movs	r3, #0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	370c      	adds	r7, #12
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	460b      	mov	r3, r1
 8008b1a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008b2c:	78fb      	ldrb	r3, [r7, #3]
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d115      	bne.n	8008b5e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008b3e:	200a      	movs	r0, #10
 8008b40:	f7f9 fe76 	bl	8002830 <HAL_Delay>
      ms += 10U;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	330a      	adds	r3, #10
 8008b48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f001 f93f 	bl	8009dce <USB_GetMode>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d01e      	beq.n	8008b94 <USB_SetCurrentMode+0x84>
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2bc7      	cmp	r3, #199	@ 0xc7
 8008b5a:	d9f0      	bls.n	8008b3e <USB_SetCurrentMode+0x2e>
 8008b5c:	e01a      	b.n	8008b94 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008b5e:	78fb      	ldrb	r3, [r7, #3]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d115      	bne.n	8008b90 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008b70:	200a      	movs	r0, #10
 8008b72:	f7f9 fe5d 	bl	8002830 <HAL_Delay>
      ms += 10U;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	330a      	adds	r3, #10
 8008b7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f001 f926 	bl	8009dce <USB_GetMode>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d005      	beq.n	8008b94 <USB_SetCurrentMode+0x84>
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2bc7      	cmp	r3, #199	@ 0xc7
 8008b8c:	d9f0      	bls.n	8008b70 <USB_SetCurrentMode+0x60>
 8008b8e:	e001      	b.n	8008b94 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	e005      	b.n	8008ba0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2bc8      	cmp	r3, #200	@ 0xc8
 8008b98:	d101      	bne.n	8008b9e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e000      	b.n	8008ba0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ba8:	b084      	sub	sp, #16
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b086      	sub	sp, #24
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
 8008bb2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008bb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	613b      	str	r3, [r7, #16]
 8008bc6:	e009      	b.n	8008bdc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	3340      	adds	r3, #64	@ 0x40
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4413      	add	r3, r2
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	613b      	str	r3, [r7, #16]
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	2b0e      	cmp	r3, #14
 8008be0:	d9f2      	bls.n	8008bc8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008be2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d11c      	bne.n	8008c24 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008bf8:	f043 0302 	orr.w	r3, r3, #2
 8008bfc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c02:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c0e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c1a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	639a      	str	r2, [r3, #56]	@ 0x38
 8008c22:	e00b      	b.n	8008c3c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c28:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c34:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008c42:	461a      	mov	r2, r3
 8008c44:	2300      	movs	r3, #0
 8008c46:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c48:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d10d      	bne.n	8008c6c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008c50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d104      	bne.n	8008c62 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008c58:	2100      	movs	r1, #0
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f968 	bl	8008f30 <USB_SetDevSpeed>
 8008c60:	e008      	b.n	8008c74 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008c62:	2101      	movs	r1, #1
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 f963 	bl	8008f30 <USB_SetDevSpeed>
 8008c6a:	e003      	b.n	8008c74 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008c6c:	2103      	movs	r1, #3
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 f95e 	bl	8008f30 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008c74:	2110      	movs	r1, #16
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 f8fa 	bl	8008e70 <USB_FlushTxFifo>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d001      	beq.n	8008c86 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 f924 	bl	8008ed4 <USB_FlushRxFifo>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d001      	beq.n	8008c96 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ca8:	461a      	mov	r2, r3
 8008caa:	2300      	movs	r3, #0
 8008cac:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cba:	2300      	movs	r3, #0
 8008cbc:	613b      	str	r3, [r7, #16]
 8008cbe:	e043      	b.n	8008d48 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	015a      	lsls	r2, r3, #5
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008cd2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008cd6:	d118      	bne.n	8008d0a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d10a      	bne.n	8008cf4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	015a      	lsls	r2, r3, #5
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cea:	461a      	mov	r2, r3
 8008cec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008cf0:	6013      	str	r3, [r2, #0]
 8008cf2:	e013      	b.n	8008d1c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	015a      	lsls	r2, r3, #5
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	4413      	add	r3, r2
 8008cfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d00:	461a      	mov	r2, r3
 8008d02:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008d06:	6013      	str	r3, [r2, #0]
 8008d08:	e008      	b.n	8008d1c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	015a      	lsls	r2, r3, #5
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	4413      	add	r3, r2
 8008d12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d16:	461a      	mov	r2, r3
 8008d18:	2300      	movs	r3, #0
 8008d1a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	015a      	lsls	r2, r3, #5
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	4413      	add	r3, r2
 8008d24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d28:	461a      	mov	r2, r3
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	015a      	lsls	r2, r3, #5
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	4413      	add	r3, r2
 8008d36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008d40:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	3301      	adds	r3, #1
 8008d46:	613b      	str	r3, [r7, #16]
 8008d48:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d3b5      	bcc.n	8008cc0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d54:	2300      	movs	r3, #0
 8008d56:	613b      	str	r3, [r7, #16]
 8008d58:	e043      	b.n	8008de2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	015a      	lsls	r2, r3, #5
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	4413      	add	r3, r2
 8008d62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d70:	d118      	bne.n	8008da4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d10a      	bne.n	8008d8e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	015a      	lsls	r2, r3, #5
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	4413      	add	r3, r2
 8008d80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d84:	461a      	mov	r2, r3
 8008d86:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008d8a:	6013      	str	r3, [r2, #0]
 8008d8c:	e013      	b.n	8008db6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	015a      	lsls	r2, r3, #5
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	4413      	add	r3, r2
 8008d96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008da0:	6013      	str	r3, [r2, #0]
 8008da2:	e008      	b.n	8008db6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	015a      	lsls	r2, r3, #5
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	4413      	add	r3, r2
 8008dac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008db0:	461a      	mov	r2, r3
 8008db2:	2300      	movs	r3, #0
 8008db4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	015a      	lsls	r2, r3, #5
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	015a      	lsls	r2, r3, #5
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	4413      	add	r3, r2
 8008dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008dda:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	3301      	adds	r3, #1
 8008de0:	613b      	str	r3, [r7, #16]
 8008de2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008de6:	461a      	mov	r2, r3
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d3b5      	bcc.n	8008d5a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	68fa      	ldr	r2, [r7, #12]
 8008df8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008dfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e00:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008e0e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008e10:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d105      	bne.n	8008e24 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	699b      	ldr	r3, [r3, #24]
 8008e1c:	f043 0210 	orr.w	r2, r3, #16
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	699a      	ldr	r2, [r3, #24]
 8008e28:	4b10      	ldr	r3, [pc, #64]	@ (8008e6c <USB_DevInit+0x2c4>)
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008e30:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d005      	beq.n	8008e44 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	699b      	ldr	r3, [r3, #24]
 8008e3c:	f043 0208 	orr.w	r2, r3, #8
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008e44:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d107      	bne.n	8008e5c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	699b      	ldr	r3, [r3, #24]
 8008e50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e54:	f043 0304 	orr.w	r3, r3, #4
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3718      	adds	r7, #24
 8008e62:	46bd      	mov	sp, r7
 8008e64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e68:	b004      	add	sp, #16
 8008e6a:	4770      	bx	lr
 8008e6c:	803c3800 	.word	0x803c3800

08008e70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b085      	sub	sp, #20
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	3301      	adds	r3, #1
 8008e82:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e8a:	d901      	bls.n	8008e90 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	e01b      	b.n	8008ec8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	daf2      	bge.n	8008e7e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	019b      	lsls	r3, r3, #6
 8008ea0:	f043 0220 	orr.w	r2, r3, #32
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008eb4:	d901      	bls.n	8008eba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008eb6:	2303      	movs	r3, #3
 8008eb8:	e006      	b.n	8008ec8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	691b      	ldr	r3, [r3, #16]
 8008ebe:	f003 0320 	and.w	r3, r3, #32
 8008ec2:	2b20      	cmp	r3, #32
 8008ec4:	d0f0      	beq.n	8008ea8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3714      	adds	r7, #20
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008edc:	2300      	movs	r3, #0
 8008ede:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008eec:	d901      	bls.n	8008ef2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e018      	b.n	8008f24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	691b      	ldr	r3, [r3, #16]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	daf2      	bge.n	8008ee0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008efa:	2300      	movs	r3, #0
 8008efc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2210      	movs	r2, #16
 8008f02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	3301      	adds	r3, #1
 8008f08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008f10:	d901      	bls.n	8008f16 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008f12:	2303      	movs	r3, #3
 8008f14:	e006      	b.n	8008f24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	691b      	ldr	r3, [r3, #16]
 8008f1a:	f003 0310 	and.w	r3, r3, #16
 8008f1e:	2b10      	cmp	r3, #16
 8008f20:	d0f0      	beq.n	8008f04 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3714      	adds	r7, #20
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b085      	sub	sp, #20
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	460b      	mov	r3, r1
 8008f3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	78fb      	ldrb	r3, [r7, #3]
 8008f4a:	68f9      	ldr	r1, [r7, #12]
 8008f4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008f50:	4313      	orrs	r3, r2
 8008f52:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008f54:	2300      	movs	r3, #0
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3714      	adds	r7, #20
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr

08008f62 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008f62:	b480      	push	{r7}
 8008f64:	b087      	sub	sp, #28
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	f003 0306 	and.w	r3, r3, #6
 8008f7a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d102      	bne.n	8008f88 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008f82:	2300      	movs	r3, #0
 8008f84:	75fb      	strb	r3, [r7, #23]
 8008f86:	e00a      	b.n	8008f9e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d002      	beq.n	8008f94 <USB_GetDevSpeed+0x32>
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2b06      	cmp	r3, #6
 8008f92:	d102      	bne.n	8008f9a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008f94:	2302      	movs	r3, #2
 8008f96:	75fb      	strb	r3, [r7, #23]
 8008f98:	e001      	b.n	8008f9e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008f9a:	230f      	movs	r3, #15
 8008f9c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	371c      	adds	r7, #28
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	785b      	ldrb	r3, [r3, #1]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d13a      	bne.n	800903e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fce:	69da      	ldr	r2, [r3, #28]
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	f003 030f 	and.w	r3, r3, #15
 8008fd8:	2101      	movs	r1, #1
 8008fda:	fa01 f303 	lsl.w	r3, r1, r3
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	68f9      	ldr	r1, [r7, #12]
 8008fe2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	015a      	lsls	r2, r3, #5
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d155      	bne.n	80090ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	015a      	lsls	r2, r3, #5
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	4413      	add	r3, r2
 8009008:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	791b      	ldrb	r3, [r3, #4]
 800901a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800901c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	059b      	lsls	r3, r3, #22
 8009022:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009024:	4313      	orrs	r3, r2
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	0151      	lsls	r1, r2, #5
 800902a:	68fa      	ldr	r2, [r7, #12]
 800902c:	440a      	add	r2, r1
 800902e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009032:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009036:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800903a:	6013      	str	r3, [r2, #0]
 800903c:	e036      	b.n	80090ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009044:	69da      	ldr	r2, [r3, #28]
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	f003 030f 	and.w	r3, r3, #15
 800904e:	2101      	movs	r1, #1
 8009050:	fa01 f303 	lsl.w	r3, r1, r3
 8009054:	041b      	lsls	r3, r3, #16
 8009056:	68f9      	ldr	r1, [r7, #12]
 8009058:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800905c:	4313      	orrs	r3, r2
 800905e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	015a      	lsls	r2, r3, #5
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	4413      	add	r3, r2
 8009068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009072:	2b00      	cmp	r3, #0
 8009074:	d11a      	bne.n	80090ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	015a      	lsls	r2, r3, #5
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	4413      	add	r3, r2
 800907e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	791b      	ldrb	r3, [r3, #4]
 8009090:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009092:	430b      	orrs	r3, r1
 8009094:	4313      	orrs	r3, r2
 8009096:	68ba      	ldr	r2, [r7, #8]
 8009098:	0151      	lsls	r1, r2, #5
 800909a:	68fa      	ldr	r2, [r7, #12]
 800909c:	440a      	add	r2, r1
 800909e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80090a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3714      	adds	r7, #20
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr
	...

080090bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80090bc:	b480      	push	{r7}
 80090be:	b085      	sub	sp, #20
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	785b      	ldrb	r3, [r3, #1]
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d161      	bne.n	800919c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	015a      	lsls	r2, r3, #5
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	4413      	add	r3, r2
 80090e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80090ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090ee:	d11f      	bne.n	8009130 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	015a      	lsls	r2, r3, #5
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	4413      	add	r3, r2
 80090f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	68ba      	ldr	r2, [r7, #8]
 8009100:	0151      	lsls	r1, r2, #5
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	440a      	add	r2, r1
 8009106:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800910a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800910e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	015a      	lsls	r2, r3, #5
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	4413      	add	r3, r2
 8009118:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	68ba      	ldr	r2, [r7, #8]
 8009120:	0151      	lsls	r1, r2, #5
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	440a      	add	r2, r1
 8009126:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800912a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800912e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009136:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	f003 030f 	and.w	r3, r3, #15
 8009140:	2101      	movs	r1, #1
 8009142:	fa01 f303 	lsl.w	r3, r1, r3
 8009146:	b29b      	uxth	r3, r3
 8009148:	43db      	mvns	r3, r3
 800914a:	68f9      	ldr	r1, [r7, #12]
 800914c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009150:	4013      	ands	r3, r2
 8009152:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800915a:	69da      	ldr	r2, [r3, #28]
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	f003 030f 	and.w	r3, r3, #15
 8009164:	2101      	movs	r1, #1
 8009166:	fa01 f303 	lsl.w	r3, r1, r3
 800916a:	b29b      	uxth	r3, r3
 800916c:	43db      	mvns	r3, r3
 800916e:	68f9      	ldr	r1, [r7, #12]
 8009170:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009174:	4013      	ands	r3, r2
 8009176:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	015a      	lsls	r2, r3, #5
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	4413      	add	r3, r2
 8009180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	0159      	lsls	r1, r3, #5
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	440b      	add	r3, r1
 800918e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009192:	4619      	mov	r1, r3
 8009194:	4b35      	ldr	r3, [pc, #212]	@ (800926c <USB_DeactivateEndpoint+0x1b0>)
 8009196:	4013      	ands	r3, r2
 8009198:	600b      	str	r3, [r1, #0]
 800919a:	e060      	b.n	800925e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	015a      	lsls	r2, r3, #5
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	4413      	add	r3, r2
 80091a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80091ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80091b2:	d11f      	bne.n	80091f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	015a      	lsls	r2, r3, #5
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	4413      	add	r3, r2
 80091bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68ba      	ldr	r2, [r7, #8]
 80091c4:	0151      	lsls	r1, r2, #5
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	440a      	add	r2, r1
 80091ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80091d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	015a      	lsls	r2, r3, #5
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	4413      	add	r3, r2
 80091dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	68ba      	ldr	r2, [r7, #8]
 80091e4:	0151      	lsls	r1, r2, #5
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	440a      	add	r2, r1
 80091ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80091f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	f003 030f 	and.w	r3, r3, #15
 8009204:	2101      	movs	r1, #1
 8009206:	fa01 f303 	lsl.w	r3, r1, r3
 800920a:	041b      	lsls	r3, r3, #16
 800920c:	43db      	mvns	r3, r3
 800920e:	68f9      	ldr	r1, [r7, #12]
 8009210:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009214:	4013      	ands	r3, r2
 8009216:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800921e:	69da      	ldr	r2, [r3, #28]
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	f003 030f 	and.w	r3, r3, #15
 8009228:	2101      	movs	r1, #1
 800922a:	fa01 f303 	lsl.w	r3, r1, r3
 800922e:	041b      	lsls	r3, r3, #16
 8009230:	43db      	mvns	r3, r3
 8009232:	68f9      	ldr	r1, [r7, #12]
 8009234:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009238:	4013      	ands	r3, r2
 800923a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	015a      	lsls	r2, r3, #5
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	4413      	add	r3, r2
 8009244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	0159      	lsls	r1, r3, #5
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	440b      	add	r3, r1
 8009252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009256:	4619      	mov	r1, r3
 8009258:	4b05      	ldr	r3, [pc, #20]	@ (8009270 <USB_DeactivateEndpoint+0x1b4>)
 800925a:	4013      	ands	r3, r2
 800925c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3714      	adds	r7, #20
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr
 800926c:	ec337800 	.word	0xec337800
 8009270:	eff37800 	.word	0xeff37800

08009274 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b08a      	sub	sp, #40	@ 0x28
 8009278:	af02      	add	r7, sp, #8
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	4613      	mov	r3, r2
 8009280:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	785b      	ldrb	r3, [r3, #1]
 8009290:	2b01      	cmp	r3, #1
 8009292:	f040 817f 	bne.w	8009594 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	691b      	ldr	r3, [r3, #16]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d132      	bne.n	8009304 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	015a      	lsls	r2, r3, #5
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	4413      	add	r3, r2
 80092a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	69ba      	ldr	r2, [r7, #24]
 80092ae:	0151      	lsls	r1, r2, #5
 80092b0:	69fa      	ldr	r2, [r7, #28]
 80092b2:	440a      	add	r2, r1
 80092b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092b8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80092bc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80092c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	015a      	lsls	r2, r3, #5
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	4413      	add	r3, r2
 80092ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	69ba      	ldr	r2, [r7, #24]
 80092d2:	0151      	lsls	r1, r2, #5
 80092d4:	69fa      	ldr	r2, [r7, #28]
 80092d6:	440a      	add	r2, r1
 80092d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80092e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	015a      	lsls	r2, r3, #5
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	4413      	add	r3, r2
 80092ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	69ba      	ldr	r2, [r7, #24]
 80092f2:	0151      	lsls	r1, r2, #5
 80092f4:	69fa      	ldr	r2, [r7, #28]
 80092f6:	440a      	add	r2, r1
 80092f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092fc:	0cdb      	lsrs	r3, r3, #19
 80092fe:	04db      	lsls	r3, r3, #19
 8009300:	6113      	str	r3, [r2, #16]
 8009302:	e097      	b.n	8009434 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009304:	69bb      	ldr	r3, [r7, #24]
 8009306:	015a      	lsls	r2, r3, #5
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	4413      	add	r3, r2
 800930c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	69ba      	ldr	r2, [r7, #24]
 8009314:	0151      	lsls	r1, r2, #5
 8009316:	69fa      	ldr	r2, [r7, #28]
 8009318:	440a      	add	r2, r1
 800931a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800931e:	0cdb      	lsrs	r3, r3, #19
 8009320:	04db      	lsls	r3, r3, #19
 8009322:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009324:	69bb      	ldr	r3, [r7, #24]
 8009326:	015a      	lsls	r2, r3, #5
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	4413      	add	r3, r2
 800932c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	69ba      	ldr	r2, [r7, #24]
 8009334:	0151      	lsls	r1, r2, #5
 8009336:	69fa      	ldr	r2, [r7, #28]
 8009338:	440a      	add	r2, r1
 800933a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800933e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009342:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009346:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d11a      	bne.n	8009384 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	691a      	ldr	r2, [r3, #16]
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	429a      	cmp	r2, r3
 8009358:	d903      	bls.n	8009362 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	689a      	ldr	r2, [r3, #8]
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	015a      	lsls	r2, r3, #5
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	4413      	add	r3, r2
 800936a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	69ba      	ldr	r2, [r7, #24]
 8009372:	0151      	lsls	r1, r2, #5
 8009374:	69fa      	ldr	r2, [r7, #28]
 8009376:	440a      	add	r2, r1
 8009378:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800937c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009380:	6113      	str	r3, [r2, #16]
 8009382:	e044      	b.n	800940e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	691a      	ldr	r2, [r3, #16]
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	4413      	add	r3, r2
 800938e:	1e5a      	subs	r2, r3, #1
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	fbb2 f3f3 	udiv	r3, r2, r3
 8009398:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	015a      	lsls	r2, r3, #5
 800939e:	69fb      	ldr	r3, [r7, #28]
 80093a0:	4413      	add	r3, r2
 80093a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093a6:	691a      	ldr	r2, [r3, #16]
 80093a8:	8afb      	ldrh	r3, [r7, #22]
 80093aa:	04d9      	lsls	r1, r3, #19
 80093ac:	4ba4      	ldr	r3, [pc, #656]	@ (8009640 <USB_EPStartXfer+0x3cc>)
 80093ae:	400b      	ands	r3, r1
 80093b0:	69b9      	ldr	r1, [r7, #24]
 80093b2:	0148      	lsls	r0, r1, #5
 80093b4:	69f9      	ldr	r1, [r7, #28]
 80093b6:	4401      	add	r1, r0
 80093b8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80093bc:	4313      	orrs	r3, r2
 80093be:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	791b      	ldrb	r3, [r3, #4]
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d122      	bne.n	800940e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	015a      	lsls	r2, r3, #5
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	4413      	add	r3, r2
 80093d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093d4:	691b      	ldr	r3, [r3, #16]
 80093d6:	69ba      	ldr	r2, [r7, #24]
 80093d8:	0151      	lsls	r1, r2, #5
 80093da:	69fa      	ldr	r2, [r7, #28]
 80093dc:	440a      	add	r2, r1
 80093de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80093e2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80093e6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	015a      	lsls	r2, r3, #5
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	4413      	add	r3, r2
 80093f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093f4:	691a      	ldr	r2, [r3, #16]
 80093f6:	8afb      	ldrh	r3, [r7, #22]
 80093f8:	075b      	lsls	r3, r3, #29
 80093fa:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80093fe:	69b9      	ldr	r1, [r7, #24]
 8009400:	0148      	lsls	r0, r1, #5
 8009402:	69f9      	ldr	r1, [r7, #28]
 8009404:	4401      	add	r1, r0
 8009406:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800940a:	4313      	orrs	r3, r2
 800940c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	015a      	lsls	r2, r3, #5
 8009412:	69fb      	ldr	r3, [r7, #28]
 8009414:	4413      	add	r3, r2
 8009416:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800941a:	691a      	ldr	r2, [r3, #16]
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	691b      	ldr	r3, [r3, #16]
 8009420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009424:	69b9      	ldr	r1, [r7, #24]
 8009426:	0148      	lsls	r0, r1, #5
 8009428:	69f9      	ldr	r1, [r7, #28]
 800942a:	4401      	add	r1, r0
 800942c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009430:	4313      	orrs	r3, r2
 8009432:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009434:	79fb      	ldrb	r3, [r7, #7]
 8009436:	2b01      	cmp	r3, #1
 8009438:	d14b      	bne.n	80094d2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	69db      	ldr	r3, [r3, #28]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d009      	beq.n	8009456 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009442:	69bb      	ldr	r3, [r7, #24]
 8009444:	015a      	lsls	r2, r3, #5
 8009446:	69fb      	ldr	r3, [r7, #28]
 8009448:	4413      	add	r3, r2
 800944a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800944e:	461a      	mov	r2, r3
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	69db      	ldr	r3, [r3, #28]
 8009454:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	791b      	ldrb	r3, [r3, #4]
 800945a:	2b01      	cmp	r3, #1
 800945c:	d128      	bne.n	80094b0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800945e:	69fb      	ldr	r3, [r7, #28]
 8009460:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800946a:	2b00      	cmp	r3, #0
 800946c:	d110      	bne.n	8009490 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	015a      	lsls	r2, r3, #5
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	4413      	add	r3, r2
 8009476:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	69ba      	ldr	r2, [r7, #24]
 800947e:	0151      	lsls	r1, r2, #5
 8009480:	69fa      	ldr	r2, [r7, #28]
 8009482:	440a      	add	r2, r1
 8009484:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009488:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800948c:	6013      	str	r3, [r2, #0]
 800948e:	e00f      	b.n	80094b0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009490:	69bb      	ldr	r3, [r7, #24]
 8009492:	015a      	lsls	r2, r3, #5
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	4413      	add	r3, r2
 8009498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	69ba      	ldr	r2, [r7, #24]
 80094a0:	0151      	lsls	r1, r2, #5
 80094a2:	69fa      	ldr	r2, [r7, #28]
 80094a4:	440a      	add	r2, r1
 80094a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80094ae:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	015a      	lsls	r2, r3, #5
 80094b4:	69fb      	ldr	r3, [r7, #28]
 80094b6:	4413      	add	r3, r2
 80094b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	69ba      	ldr	r2, [r7, #24]
 80094c0:	0151      	lsls	r1, r2, #5
 80094c2:	69fa      	ldr	r2, [r7, #28]
 80094c4:	440a      	add	r2, r1
 80094c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094ca:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80094ce:	6013      	str	r3, [r2, #0]
 80094d0:	e166      	b.n	80097a0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80094d2:	69bb      	ldr	r3, [r7, #24]
 80094d4:	015a      	lsls	r2, r3, #5
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	4413      	add	r3, r2
 80094da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	69ba      	ldr	r2, [r7, #24]
 80094e2:	0151      	lsls	r1, r2, #5
 80094e4:	69fa      	ldr	r2, [r7, #28]
 80094e6:	440a      	add	r2, r1
 80094e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094ec:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80094f0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	791b      	ldrb	r3, [r3, #4]
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d015      	beq.n	8009526 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	f000 814e 	beq.w	80097a0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009504:	69fb      	ldr	r3, [r7, #28]
 8009506:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800950a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	f003 030f 	and.w	r3, r3, #15
 8009514:	2101      	movs	r1, #1
 8009516:	fa01 f303 	lsl.w	r3, r1, r3
 800951a:	69f9      	ldr	r1, [r7, #28]
 800951c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009520:	4313      	orrs	r3, r2
 8009522:	634b      	str	r3, [r1, #52]	@ 0x34
 8009524:	e13c      	b.n	80097a0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009526:	69fb      	ldr	r3, [r7, #28]
 8009528:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800952c:	689b      	ldr	r3, [r3, #8]
 800952e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009532:	2b00      	cmp	r3, #0
 8009534:	d110      	bne.n	8009558 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	015a      	lsls	r2, r3, #5
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	4413      	add	r3, r2
 800953e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	69ba      	ldr	r2, [r7, #24]
 8009546:	0151      	lsls	r1, r2, #5
 8009548:	69fa      	ldr	r2, [r7, #28]
 800954a:	440a      	add	r2, r1
 800954c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009550:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009554:	6013      	str	r3, [r2, #0]
 8009556:	e00f      	b.n	8009578 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	015a      	lsls	r2, r3, #5
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	4413      	add	r3, r2
 8009560:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	69ba      	ldr	r2, [r7, #24]
 8009568:	0151      	lsls	r1, r2, #5
 800956a:	69fa      	ldr	r2, [r7, #28]
 800956c:	440a      	add	r2, r1
 800956e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009572:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009576:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	68d9      	ldr	r1, [r3, #12]
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	781a      	ldrb	r2, [r3, #0]
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	691b      	ldr	r3, [r3, #16]
 8009584:	b298      	uxth	r0, r3
 8009586:	79fb      	ldrb	r3, [r7, #7]
 8009588:	9300      	str	r3, [sp, #0]
 800958a:	4603      	mov	r3, r0
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f000 f9b9 	bl	8009904 <USB_WritePacket>
 8009592:	e105      	b.n	80097a0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	015a      	lsls	r2, r3, #5
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	4413      	add	r3, r2
 800959c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095a0:	691b      	ldr	r3, [r3, #16]
 80095a2:	69ba      	ldr	r2, [r7, #24]
 80095a4:	0151      	lsls	r1, r2, #5
 80095a6:	69fa      	ldr	r2, [r7, #28]
 80095a8:	440a      	add	r2, r1
 80095aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095ae:	0cdb      	lsrs	r3, r3, #19
 80095b0:	04db      	lsls	r3, r3, #19
 80095b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	015a      	lsls	r2, r3, #5
 80095b8:	69fb      	ldr	r3, [r7, #28]
 80095ba:	4413      	add	r3, r2
 80095bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095c0:	691b      	ldr	r3, [r3, #16]
 80095c2:	69ba      	ldr	r2, [r7, #24]
 80095c4:	0151      	lsls	r1, r2, #5
 80095c6:	69fa      	ldr	r2, [r7, #28]
 80095c8:	440a      	add	r2, r1
 80095ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095ce:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80095d2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80095d6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80095d8:	69bb      	ldr	r3, [r7, #24]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d132      	bne.n	8009644 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	691b      	ldr	r3, [r3, #16]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d003      	beq.n	80095ee <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	689a      	ldr	r2, [r3, #8]
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	689a      	ldr	r2, [r3, #8]
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	015a      	lsls	r2, r3, #5
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	4413      	add	r3, r2
 80095fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009602:	691a      	ldr	r2, [r3, #16]
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	6a1b      	ldr	r3, [r3, #32]
 8009608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800960c:	69b9      	ldr	r1, [r7, #24]
 800960e:	0148      	lsls	r0, r1, #5
 8009610:	69f9      	ldr	r1, [r7, #28]
 8009612:	4401      	add	r1, r0
 8009614:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009618:	4313      	orrs	r3, r2
 800961a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800961c:	69bb      	ldr	r3, [r7, #24]
 800961e:	015a      	lsls	r2, r3, #5
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	4413      	add	r3, r2
 8009624:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009628:	691b      	ldr	r3, [r3, #16]
 800962a:	69ba      	ldr	r2, [r7, #24]
 800962c:	0151      	lsls	r1, r2, #5
 800962e:	69fa      	ldr	r2, [r7, #28]
 8009630:	440a      	add	r2, r1
 8009632:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009636:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800963a:	6113      	str	r3, [r2, #16]
 800963c:	e062      	b.n	8009704 <USB_EPStartXfer+0x490>
 800963e:	bf00      	nop
 8009640:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d123      	bne.n	8009694 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800964c:	69bb      	ldr	r3, [r7, #24]
 800964e:	015a      	lsls	r2, r3, #5
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	4413      	add	r3, r2
 8009654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009658:	691a      	ldr	r2, [r3, #16]
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009662:	69b9      	ldr	r1, [r7, #24]
 8009664:	0148      	lsls	r0, r1, #5
 8009666:	69f9      	ldr	r1, [r7, #28]
 8009668:	4401      	add	r1, r0
 800966a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800966e:	4313      	orrs	r3, r2
 8009670:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	015a      	lsls	r2, r3, #5
 8009676:	69fb      	ldr	r3, [r7, #28]
 8009678:	4413      	add	r3, r2
 800967a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800967e:	691b      	ldr	r3, [r3, #16]
 8009680:	69ba      	ldr	r2, [r7, #24]
 8009682:	0151      	lsls	r1, r2, #5
 8009684:	69fa      	ldr	r2, [r7, #28]
 8009686:	440a      	add	r2, r1
 8009688:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800968c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009690:	6113      	str	r3, [r2, #16]
 8009692:	e037      	b.n	8009704 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	691a      	ldr	r2, [r3, #16]
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	4413      	add	r3, r2
 800969e:	1e5a      	subs	r2, r3, #1
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80096a8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	8afa      	ldrh	r2, [r7, #22]
 80096b0:	fb03 f202 	mul.w	r2, r3, r2
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80096b8:	69bb      	ldr	r3, [r7, #24]
 80096ba:	015a      	lsls	r2, r3, #5
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	4413      	add	r3, r2
 80096c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096c4:	691a      	ldr	r2, [r3, #16]
 80096c6:	8afb      	ldrh	r3, [r7, #22]
 80096c8:	04d9      	lsls	r1, r3, #19
 80096ca:	4b38      	ldr	r3, [pc, #224]	@ (80097ac <USB_EPStartXfer+0x538>)
 80096cc:	400b      	ands	r3, r1
 80096ce:	69b9      	ldr	r1, [r7, #24]
 80096d0:	0148      	lsls	r0, r1, #5
 80096d2:	69f9      	ldr	r1, [r7, #28]
 80096d4:	4401      	add	r1, r0
 80096d6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80096da:	4313      	orrs	r3, r2
 80096dc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	015a      	lsls	r2, r3, #5
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	4413      	add	r3, r2
 80096e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096ea:	691a      	ldr	r2, [r3, #16]
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	6a1b      	ldr	r3, [r3, #32]
 80096f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096f4:	69b9      	ldr	r1, [r7, #24]
 80096f6:	0148      	lsls	r0, r1, #5
 80096f8:	69f9      	ldr	r1, [r7, #28]
 80096fa:	4401      	add	r1, r0
 80096fc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009700:	4313      	orrs	r3, r2
 8009702:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009704:	79fb      	ldrb	r3, [r7, #7]
 8009706:	2b01      	cmp	r3, #1
 8009708:	d10d      	bne.n	8009726 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d009      	beq.n	8009726 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	68d9      	ldr	r1, [r3, #12]
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	015a      	lsls	r2, r3, #5
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	4413      	add	r3, r2
 800971e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009722:	460a      	mov	r2, r1
 8009724:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	791b      	ldrb	r3, [r3, #4]
 800972a:	2b01      	cmp	r3, #1
 800972c:	d128      	bne.n	8009780 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800973a:	2b00      	cmp	r3, #0
 800973c:	d110      	bne.n	8009760 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800973e:	69bb      	ldr	r3, [r7, #24]
 8009740:	015a      	lsls	r2, r3, #5
 8009742:	69fb      	ldr	r3, [r7, #28]
 8009744:	4413      	add	r3, r2
 8009746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	69ba      	ldr	r2, [r7, #24]
 800974e:	0151      	lsls	r1, r2, #5
 8009750:	69fa      	ldr	r2, [r7, #28]
 8009752:	440a      	add	r2, r1
 8009754:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009758:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800975c:	6013      	str	r3, [r2, #0]
 800975e:	e00f      	b.n	8009780 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	015a      	lsls	r2, r3, #5
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	4413      	add	r3, r2
 8009768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	69ba      	ldr	r2, [r7, #24]
 8009770:	0151      	lsls	r1, r2, #5
 8009772:	69fa      	ldr	r2, [r7, #28]
 8009774:	440a      	add	r2, r1
 8009776:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800977a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800977e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	015a      	lsls	r2, r3, #5
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	4413      	add	r3, r2
 8009788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	69ba      	ldr	r2, [r7, #24]
 8009790:	0151      	lsls	r1, r2, #5
 8009792:	69fa      	ldr	r2, [r7, #28]
 8009794:	440a      	add	r2, r1
 8009796:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800979a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800979e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3720      	adds	r7, #32
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	1ff80000 	.word	0x1ff80000

080097b0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b087      	sub	sp, #28
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80097ba:	2300      	movs	r3, #0
 80097bc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80097be:	2300      	movs	r3, #0
 80097c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	785b      	ldrb	r3, [r3, #1]
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d14a      	bne.n	8009864 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	015a      	lsls	r2, r3, #5
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	4413      	add	r3, r2
 80097d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80097e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097e6:	f040 8086 	bne.w	80098f6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	015a      	lsls	r2, r3, #5
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	4413      	add	r3, r2
 80097f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	683a      	ldr	r2, [r7, #0]
 80097fc:	7812      	ldrb	r2, [r2, #0]
 80097fe:	0151      	lsls	r1, r2, #5
 8009800:	693a      	ldr	r2, [r7, #16]
 8009802:	440a      	add	r2, r1
 8009804:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009808:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800980c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	015a      	lsls	r2, r3, #5
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	4413      	add	r3, r2
 8009818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	683a      	ldr	r2, [r7, #0]
 8009820:	7812      	ldrb	r2, [r2, #0]
 8009822:	0151      	lsls	r1, r2, #5
 8009824:	693a      	ldr	r2, [r7, #16]
 8009826:	440a      	add	r2, r1
 8009828:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800982c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009830:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	3301      	adds	r3, #1
 8009836:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800983e:	4293      	cmp	r3, r2
 8009840:	d902      	bls.n	8009848 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009842:	2301      	movs	r3, #1
 8009844:	75fb      	strb	r3, [r7, #23]
          break;
 8009846:	e056      	b.n	80098f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	015a      	lsls	r2, r3, #5
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	4413      	add	r3, r2
 8009852:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800985c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009860:	d0e7      	beq.n	8009832 <USB_EPStopXfer+0x82>
 8009862:	e048      	b.n	80098f6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	015a      	lsls	r2, r3, #5
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	4413      	add	r3, r2
 800986e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009878:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800987c:	d13b      	bne.n	80098f6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	015a      	lsls	r2, r3, #5
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	4413      	add	r3, r2
 8009888:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	683a      	ldr	r2, [r7, #0]
 8009890:	7812      	ldrb	r2, [r2, #0]
 8009892:	0151      	lsls	r1, r2, #5
 8009894:	693a      	ldr	r2, [r7, #16]
 8009896:	440a      	add	r2, r1
 8009898:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800989c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80098a0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	015a      	lsls	r2, r3, #5
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	4413      	add	r3, r2
 80098ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	683a      	ldr	r2, [r7, #0]
 80098b4:	7812      	ldrb	r2, [r2, #0]
 80098b6:	0151      	lsls	r1, r2, #5
 80098b8:	693a      	ldr	r2, [r7, #16]
 80098ba:	440a      	add	r2, r1
 80098bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80098c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80098c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	3301      	adds	r3, #1
 80098ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f242 7210 	movw	r2, #10000	@ 0x2710
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d902      	bls.n	80098dc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80098d6:	2301      	movs	r3, #1
 80098d8:	75fb      	strb	r3, [r7, #23]
          break;
 80098da:	e00c      	b.n	80098f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	015a      	lsls	r2, r3, #5
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	4413      	add	r3, r2
 80098e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80098f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80098f4:	d0e7      	beq.n	80098c6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80098f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	371c      	adds	r7, #28
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009904:	b480      	push	{r7}
 8009906:	b089      	sub	sp, #36	@ 0x24
 8009908:	af00      	add	r7, sp, #0
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	4611      	mov	r1, r2
 8009910:	461a      	mov	r2, r3
 8009912:	460b      	mov	r3, r1
 8009914:	71fb      	strb	r3, [r7, #7]
 8009916:	4613      	mov	r3, r2
 8009918:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009922:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009926:	2b00      	cmp	r3, #0
 8009928:	d123      	bne.n	8009972 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800992a:	88bb      	ldrh	r3, [r7, #4]
 800992c:	3303      	adds	r3, #3
 800992e:	089b      	lsrs	r3, r3, #2
 8009930:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009932:	2300      	movs	r3, #0
 8009934:	61bb      	str	r3, [r7, #24]
 8009936:	e018      	b.n	800996a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009938:	79fb      	ldrb	r3, [r7, #7]
 800993a:	031a      	lsls	r2, r3, #12
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	4413      	add	r3, r2
 8009940:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009944:	461a      	mov	r2, r3
 8009946:	69fb      	ldr	r3, [r7, #28]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	3301      	adds	r3, #1
 8009950:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009952:	69fb      	ldr	r3, [r7, #28]
 8009954:	3301      	adds	r3, #1
 8009956:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009958:	69fb      	ldr	r3, [r7, #28]
 800995a:	3301      	adds	r3, #1
 800995c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	3301      	adds	r3, #1
 8009962:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009964:	69bb      	ldr	r3, [r7, #24]
 8009966:	3301      	adds	r3, #1
 8009968:	61bb      	str	r3, [r7, #24]
 800996a:	69ba      	ldr	r2, [r7, #24]
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	429a      	cmp	r2, r3
 8009970:	d3e2      	bcc.n	8009938 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009972:	2300      	movs	r3, #0
}
 8009974:	4618      	mov	r0, r3
 8009976:	3724      	adds	r7, #36	@ 0x24
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009980:	b480      	push	{r7}
 8009982:	b08b      	sub	sp, #44	@ 0x2c
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	4613      	mov	r3, r2
 800998c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009996:	88fb      	ldrh	r3, [r7, #6]
 8009998:	089b      	lsrs	r3, r3, #2
 800999a:	b29b      	uxth	r3, r3
 800999c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800999e:	88fb      	ldrh	r3, [r7, #6]
 80099a0:	f003 0303 	and.w	r3, r3, #3
 80099a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80099a6:	2300      	movs	r3, #0
 80099a8:	623b      	str	r3, [r7, #32]
 80099aa:	e014      	b.n	80099d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b6:	601a      	str	r2, [r3, #0]
    pDest++;
 80099b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ba:	3301      	adds	r3, #1
 80099bc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80099be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c0:	3301      	adds	r3, #1
 80099c2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80099c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c6:	3301      	adds	r3, #1
 80099c8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80099ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099cc:	3301      	adds	r3, #1
 80099ce:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80099d0:	6a3b      	ldr	r3, [r7, #32]
 80099d2:	3301      	adds	r3, #1
 80099d4:	623b      	str	r3, [r7, #32]
 80099d6:	6a3a      	ldr	r2, [r7, #32]
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	429a      	cmp	r2, r3
 80099dc:	d3e6      	bcc.n	80099ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80099de:	8bfb      	ldrh	r3, [r7, #30]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d01e      	beq.n	8009a22 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80099e4:	2300      	movs	r3, #0
 80099e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80099e8:	69bb      	ldr	r3, [r7, #24]
 80099ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80099ee:	461a      	mov	r2, r3
 80099f0:	f107 0310 	add.w	r3, r7, #16
 80099f4:	6812      	ldr	r2, [r2, #0]
 80099f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80099f8:	693a      	ldr	r2, [r7, #16]
 80099fa:	6a3b      	ldr	r3, [r7, #32]
 80099fc:	b2db      	uxtb	r3, r3
 80099fe:	00db      	lsls	r3, r3, #3
 8009a00:	fa22 f303 	lsr.w	r3, r2, r3
 8009a04:	b2da      	uxtb	r2, r3
 8009a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a08:	701a      	strb	r2, [r3, #0]
      i++;
 8009a0a:	6a3b      	ldr	r3, [r7, #32]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a12:	3301      	adds	r3, #1
 8009a14:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009a16:	8bfb      	ldrh	r3, [r7, #30]
 8009a18:	3b01      	subs	r3, #1
 8009a1a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009a1c:	8bfb      	ldrh	r3, [r7, #30]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d1ea      	bne.n	80099f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	372c      	adds	r7, #44	@ 0x2c
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b085      	sub	sp, #20
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	785b      	ldrb	r3, [r3, #1]
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d12c      	bne.n	8009aa6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	015a      	lsls	r2, r3, #5
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	4413      	add	r3, r2
 8009a54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	db12      	blt.n	8009a84 <USB_EPSetStall+0x54>
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d00f      	beq.n	8009a84 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	015a      	lsls	r2, r3, #5
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	68ba      	ldr	r2, [r7, #8]
 8009a74:	0151      	lsls	r1, r2, #5
 8009a76:	68fa      	ldr	r2, [r7, #12]
 8009a78:	440a      	add	r2, r1
 8009a7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a7e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009a82:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	015a      	lsls	r2, r3, #5
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	4413      	add	r3, r2
 8009a8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	68ba      	ldr	r2, [r7, #8]
 8009a94:	0151      	lsls	r1, r2, #5
 8009a96:	68fa      	ldr	r2, [r7, #12]
 8009a98:	440a      	add	r2, r1
 8009a9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a9e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009aa2:	6013      	str	r3, [r2, #0]
 8009aa4:	e02b      	b.n	8009afe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	015a      	lsls	r2, r3, #5
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	4413      	add	r3, r2
 8009aae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	db12      	blt.n	8009ade <USB_EPSetStall+0xae>
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d00f      	beq.n	8009ade <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	015a      	lsls	r2, r3, #5
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	4413      	add	r3, r2
 8009ac6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	68ba      	ldr	r2, [r7, #8]
 8009ace:	0151      	lsls	r1, r2, #5
 8009ad0:	68fa      	ldr	r2, [r7, #12]
 8009ad2:	440a      	add	r2, r1
 8009ad4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ad8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009adc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	015a      	lsls	r2, r3, #5
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	4413      	add	r3, r2
 8009ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68ba      	ldr	r2, [r7, #8]
 8009aee:	0151      	lsls	r1, r2, #5
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	440a      	add	r2, r1
 8009af4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009af8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009afc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3714      	adds	r7, #20
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr

08009b0c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b085      	sub	sp, #20
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	785b      	ldrb	r3, [r3, #1]
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d128      	bne.n	8009b7a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	015a      	lsls	r2, r3, #5
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	4413      	add	r3, r2
 8009b30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	68ba      	ldr	r2, [r7, #8]
 8009b38:	0151      	lsls	r1, r2, #5
 8009b3a:	68fa      	ldr	r2, [r7, #12]
 8009b3c:	440a      	add	r2, r1
 8009b3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b42:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009b46:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	791b      	ldrb	r3, [r3, #4]
 8009b4c:	2b03      	cmp	r3, #3
 8009b4e:	d003      	beq.n	8009b58 <USB_EPClearStall+0x4c>
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	791b      	ldrb	r3, [r3, #4]
 8009b54:	2b02      	cmp	r3, #2
 8009b56:	d138      	bne.n	8009bca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	015a      	lsls	r2, r3, #5
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	4413      	add	r3, r2
 8009b60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	68ba      	ldr	r2, [r7, #8]
 8009b68:	0151      	lsls	r1, r2, #5
 8009b6a:	68fa      	ldr	r2, [r7, #12]
 8009b6c:	440a      	add	r2, r1
 8009b6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b76:	6013      	str	r3, [r2, #0]
 8009b78:	e027      	b.n	8009bca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	015a      	lsls	r2, r3, #5
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	4413      	add	r3, r2
 8009b82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	68ba      	ldr	r2, [r7, #8]
 8009b8a:	0151      	lsls	r1, r2, #5
 8009b8c:	68fa      	ldr	r2, [r7, #12]
 8009b8e:	440a      	add	r2, r1
 8009b90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b94:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009b98:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	791b      	ldrb	r3, [r3, #4]
 8009b9e:	2b03      	cmp	r3, #3
 8009ba0:	d003      	beq.n	8009baa <USB_EPClearStall+0x9e>
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	791b      	ldrb	r3, [r3, #4]
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	d10f      	bne.n	8009bca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	015a      	lsls	r2, r3, #5
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	68ba      	ldr	r2, [r7, #8]
 8009bba:	0151      	lsls	r1, r2, #5
 8009bbc:	68fa      	ldr	r2, [r7, #12]
 8009bbe:	440a      	add	r2, r1
 8009bc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009bc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009bc8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3714      	adds	r7, #20
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b085      	sub	sp, #20
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	460b      	mov	r3, r1
 8009be2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	68fa      	ldr	r2, [r7, #12]
 8009bf2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009bf6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009bfa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	78fb      	ldrb	r3, [r7, #3]
 8009c06:	011b      	lsls	r3, r3, #4
 8009c08:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009c0c:	68f9      	ldr	r1, [r7, #12]
 8009c0e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c12:	4313      	orrs	r3, r2
 8009c14:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009c16:	2300      	movs	r3, #0
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3714      	adds	r7, #20
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b085      	sub	sp, #20
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	68fa      	ldr	r2, [r7, #12]
 8009c3a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009c3e:	f023 0303 	bic.w	r3, r3, #3
 8009c42:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	68fa      	ldr	r2, [r7, #12]
 8009c4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009c52:	f023 0302 	bic.w	r3, r3, #2
 8009c56:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009c58:	2300      	movs	r3, #0
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3714      	adds	r7, #20
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr

08009c66 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009c66:	b480      	push	{r7}
 8009c68:	b085      	sub	sp, #20
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	68fa      	ldr	r2, [r7, #12]
 8009c7c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009c80:	f023 0303 	bic.w	r3, r3, #3
 8009c84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	68fa      	ldr	r2, [r7, #12]
 8009c90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009c94:	f043 0302 	orr.w	r3, r3, #2
 8009c98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009c9a:	2300      	movs	r3, #0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3714      	adds	r7, #20
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr

08009ca8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b085      	sub	sp, #20
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	695b      	ldr	r3, [r3, #20]
 8009cb4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	699b      	ldr	r3, [r3, #24]
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	4013      	ands	r3, r2
 8009cbe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3714      	adds	r7, #20
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr

08009cce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009cce:	b480      	push	{r7}
 8009cd0:	b085      	sub	sp, #20
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ce0:	699b      	ldr	r3, [r3, #24]
 8009ce2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cea:	69db      	ldr	r3, [r3, #28]
 8009cec:	68ba      	ldr	r2, [r7, #8]
 8009cee:	4013      	ands	r3, r2
 8009cf0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	0c1b      	lsrs	r3, r3, #16
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3714      	adds	r7, #20
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr

08009d02 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009d02:	b480      	push	{r7}
 8009d04:	b085      	sub	sp, #20
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d14:	699b      	ldr	r3, [r3, #24]
 8009d16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d1e:	69db      	ldr	r3, [r3, #28]
 8009d20:	68ba      	ldr	r2, [r7, #8]
 8009d22:	4013      	ands	r3, r2
 8009d24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	b29b      	uxth	r3, r3
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3714      	adds	r7, #20
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr

08009d36 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009d36:	b480      	push	{r7}
 8009d38:	b085      	sub	sp, #20
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
 8009d3e:	460b      	mov	r3, r1
 8009d40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009d46:	78fb      	ldrb	r3, [r7, #3]
 8009d48:	015a      	lsls	r2, r3, #5
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d5c:	695b      	ldr	r3, [r3, #20]
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	4013      	ands	r3, r2
 8009d62:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009d64:	68bb      	ldr	r3, [r7, #8]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3714      	adds	r7, #20
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr

08009d72 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009d72:	b480      	push	{r7}
 8009d74:	b087      	sub	sp, #28
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d88:	691b      	ldr	r3, [r3, #16]
 8009d8a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d94:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009d96:	78fb      	ldrb	r3, [r7, #3]
 8009d98:	f003 030f 	and.w	r3, r3, #15
 8009d9c:	68fa      	ldr	r2, [r7, #12]
 8009d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8009da2:	01db      	lsls	r3, r3, #7
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	693a      	ldr	r2, [r7, #16]
 8009da8:	4313      	orrs	r3, r2
 8009daa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009dac:	78fb      	ldrb	r3, [r7, #3]
 8009dae:	015a      	lsls	r2, r3, #5
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	4413      	add	r3, r2
 8009db4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	693a      	ldr	r2, [r7, #16]
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009dc0:	68bb      	ldr	r3, [r7, #8]
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	371c      	adds	r7, #28
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr

08009dce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009dce:	b480      	push	{r7}
 8009dd0:	b083      	sub	sp, #12
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	695b      	ldr	r3, [r3, #20]
 8009dda:	f003 0301 	and.w	r3, r3, #1
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	370c      	adds	r7, #12
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr

08009dea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009dea:	b480      	push	{r7}
 8009dec:	b085      	sub	sp, #20
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	68fa      	ldr	r2, [r7, #12]
 8009e00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e04:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009e08:	f023 0307 	bic.w	r3, r3, #7
 8009e0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	68fa      	ldr	r2, [r7, #12]
 8009e18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009e1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3714      	adds	r7, #20
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b087      	sub	sp, #28
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	460b      	mov	r3, r1
 8009e3a:	607a      	str	r2, [r7, #4]
 8009e3c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	333c      	adds	r3, #60	@ 0x3c
 8009e46:	3304      	adds	r3, #4
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	4a26      	ldr	r2, [pc, #152]	@ (8009ee8 <USB_EP0_OutStart+0xb8>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d90a      	bls.n	8009e6a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e64:	d101      	bne.n	8009e6a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009e66:	2300      	movs	r3, #0
 8009e68:	e037      	b.n	8009eda <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e70:	461a      	mov	r2, r3
 8009e72:	2300      	movs	r3, #0
 8009e74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e7c:	691b      	ldr	r3, [r3, #16]
 8009e7e:	697a      	ldr	r2, [r7, #20]
 8009e80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e84:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009e88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e90:	691b      	ldr	r3, [r3, #16]
 8009e92:	697a      	ldr	r2, [r7, #20]
 8009e94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e98:	f043 0318 	orr.w	r3, r3, #24
 8009e9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ea4:	691b      	ldr	r3, [r3, #16]
 8009ea6:	697a      	ldr	r2, [r7, #20]
 8009ea8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009eac:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009eb0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009eb2:	7afb      	ldrb	r3, [r7, #11]
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	d10f      	bne.n	8009ed8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	697a      	ldr	r2, [r7, #20]
 8009ece:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ed2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009ed6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009ed8:	2300      	movs	r3, #0
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	371c      	adds	r7, #28
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr
 8009ee6:	bf00      	nop
 8009ee8:	4f54300a 	.word	0x4f54300a

08009eec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b085      	sub	sp, #20
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	3301      	adds	r3, #1
 8009efc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009f04:	d901      	bls.n	8009f0a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009f06:	2303      	movs	r3, #3
 8009f08:	e022      	b.n	8009f50 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	daf2      	bge.n	8009ef8 <USB_CoreReset+0xc>

  count = 10U;
 8009f12:	230a      	movs	r3, #10
 8009f14:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8009f16:	e002      	b.n	8009f1e <USB_CoreReset+0x32>
  {
    count--;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	3b01      	subs	r3, #1
 8009f1c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d1f9      	bne.n	8009f18 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	691b      	ldr	r3, [r3, #16]
 8009f28:	f043 0201 	orr.w	r2, r3, #1
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	3301      	adds	r3, #1
 8009f34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009f3c:	d901      	bls.n	8009f42 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8009f3e:	2303      	movs	r3, #3
 8009f40:	e006      	b.n	8009f50 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	691b      	ldr	r3, [r3, #16]
 8009f46:	f003 0301 	and.w	r3, r3, #1
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	d0f0      	beq.n	8009f30 <USB_CoreReset+0x44>

  return HAL_OK;
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3714      	adds	r7, #20
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	460b      	mov	r3, r1
 8009f66:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009f68:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009f6c:	f002 fd20 	bl	800c9b0 <USBD_static_malloc>
 8009f70:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d109      	bne.n	8009f8c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	32b0      	adds	r2, #176	@ 0xb0
 8009f82:	2100      	movs	r1, #0
 8009f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009f88:	2302      	movs	r3, #2
 8009f8a:	e0d4      	b.n	800a136 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009f8c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009f90:	2100      	movs	r1, #0
 8009f92:	68f8      	ldr	r0, [r7, #12]
 8009f94:	f003 fd91 	bl	800daba <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	32b0      	adds	r2, #176	@ 0xb0
 8009fa2:	68f9      	ldr	r1, [r7, #12]
 8009fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	32b0      	adds	r2, #176	@ 0xb0
 8009fb2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	7c1b      	ldrb	r3, [r3, #16]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d138      	bne.n	800a036 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009fc4:	4b5e      	ldr	r3, [pc, #376]	@ (800a140 <USBD_CDC_Init+0x1e4>)
 8009fc6:	7819      	ldrb	r1, [r3, #0]
 8009fc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009fcc:	2202      	movs	r2, #2
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f002 fbcb 	bl	800c76a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009fd4:	4b5a      	ldr	r3, [pc, #360]	@ (800a140 <USBD_CDC_Init+0x1e4>)
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	f003 020f 	and.w	r2, r3, #15
 8009fdc:	6879      	ldr	r1, [r7, #4]
 8009fde:	4613      	mov	r3, r2
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	4413      	add	r3, r2
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	440b      	add	r3, r1
 8009fe8:	3323      	adds	r3, #35	@ 0x23
 8009fea:	2201      	movs	r2, #1
 8009fec:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009fee:	4b55      	ldr	r3, [pc, #340]	@ (800a144 <USBD_CDC_Init+0x1e8>)
 8009ff0:	7819      	ldrb	r1, [r3, #0]
 8009ff2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ff6:	2202      	movs	r2, #2
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f002 fbb6 	bl	800c76a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009ffe:	4b51      	ldr	r3, [pc, #324]	@ (800a144 <USBD_CDC_Init+0x1e8>)
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	f003 020f 	and.w	r2, r3, #15
 800a006:	6879      	ldr	r1, [r7, #4]
 800a008:	4613      	mov	r3, r2
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	4413      	add	r3, r2
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	440b      	add	r3, r1
 800a012:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800a016:	2201      	movs	r2, #1
 800a018:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a01a:	4b4b      	ldr	r3, [pc, #300]	@ (800a148 <USBD_CDC_Init+0x1ec>)
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	f003 020f 	and.w	r2, r3, #15
 800a022:	6879      	ldr	r1, [r7, #4]
 800a024:	4613      	mov	r3, r2
 800a026:	009b      	lsls	r3, r3, #2
 800a028:	4413      	add	r3, r2
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	440b      	add	r3, r1
 800a02e:	331c      	adds	r3, #28
 800a030:	2210      	movs	r2, #16
 800a032:	601a      	str	r2, [r3, #0]
 800a034:	e035      	b.n	800a0a2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a036:	4b42      	ldr	r3, [pc, #264]	@ (800a140 <USBD_CDC_Init+0x1e4>)
 800a038:	7819      	ldrb	r1, [r3, #0]
 800a03a:	2340      	movs	r3, #64	@ 0x40
 800a03c:	2202      	movs	r2, #2
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f002 fb93 	bl	800c76a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a044:	4b3e      	ldr	r3, [pc, #248]	@ (800a140 <USBD_CDC_Init+0x1e4>)
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	f003 020f 	and.w	r2, r3, #15
 800a04c:	6879      	ldr	r1, [r7, #4]
 800a04e:	4613      	mov	r3, r2
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	4413      	add	r3, r2
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	440b      	add	r3, r1
 800a058:	3323      	adds	r3, #35	@ 0x23
 800a05a:	2201      	movs	r2, #1
 800a05c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a05e:	4b39      	ldr	r3, [pc, #228]	@ (800a144 <USBD_CDC_Init+0x1e8>)
 800a060:	7819      	ldrb	r1, [r3, #0]
 800a062:	2340      	movs	r3, #64	@ 0x40
 800a064:	2202      	movs	r2, #2
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f002 fb7f 	bl	800c76a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a06c:	4b35      	ldr	r3, [pc, #212]	@ (800a144 <USBD_CDC_Init+0x1e8>)
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	f003 020f 	and.w	r2, r3, #15
 800a074:	6879      	ldr	r1, [r7, #4]
 800a076:	4613      	mov	r3, r2
 800a078:	009b      	lsls	r3, r3, #2
 800a07a:	4413      	add	r3, r2
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	440b      	add	r3, r1
 800a080:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800a084:	2201      	movs	r2, #1
 800a086:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a088:	4b2f      	ldr	r3, [pc, #188]	@ (800a148 <USBD_CDC_Init+0x1ec>)
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	f003 020f 	and.w	r2, r3, #15
 800a090:	6879      	ldr	r1, [r7, #4]
 800a092:	4613      	mov	r3, r2
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	4413      	add	r3, r2
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	440b      	add	r3, r1
 800a09c:	331c      	adds	r3, #28
 800a09e:	2210      	movs	r2, #16
 800a0a0:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a0a2:	4b29      	ldr	r3, [pc, #164]	@ (800a148 <USBD_CDC_Init+0x1ec>)
 800a0a4:	7819      	ldrb	r1, [r3, #0]
 800a0a6:	2308      	movs	r3, #8
 800a0a8:	2203      	movs	r2, #3
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f002 fb5d 	bl	800c76a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a0b0:	4b25      	ldr	r3, [pc, #148]	@ (800a148 <USBD_CDC_Init+0x1ec>)
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	f003 020f 	and.w	r2, r3, #15
 800a0b8:	6879      	ldr	r1, [r7, #4]
 800a0ba:	4613      	mov	r3, r2
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	4413      	add	r3, r2
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	440b      	add	r3, r1
 800a0c4:	3323      	adds	r3, #35	@ 0x23
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	33b0      	adds	r3, #176	@ 0xb0
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	4413      	add	r3, r2
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d101      	bne.n	800a104 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a100:	2302      	movs	r3, #2
 800a102:	e018      	b.n	800a136 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	7c1b      	ldrb	r3, [r3, #16]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d10a      	bne.n	800a122 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a10c:	4b0d      	ldr	r3, [pc, #52]	@ (800a144 <USBD_CDC_Init+0x1e8>)
 800a10e:	7819      	ldrb	r1, [r3, #0]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a116:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f002 fc14 	bl	800c948 <USBD_LL_PrepareReceive>
 800a120:	e008      	b.n	800a134 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a122:	4b08      	ldr	r3, [pc, #32]	@ (800a144 <USBD_CDC_Init+0x1e8>)
 800a124:	7819      	ldrb	r1, [r3, #0]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a12c:	2340      	movs	r3, #64	@ 0x40
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f002 fc0a 	bl	800c948 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3710      	adds	r7, #16
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	20000093 	.word	0x20000093
 800a144:	20000094 	.word	0x20000094
 800a148:	20000095 	.word	0x20000095

0800a14c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	460b      	mov	r3, r1
 800a156:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a158:	4b3a      	ldr	r3, [pc, #232]	@ (800a244 <USBD_CDC_DeInit+0xf8>)
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	4619      	mov	r1, r3
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f002 fb29 	bl	800c7b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a164:	4b37      	ldr	r3, [pc, #220]	@ (800a244 <USBD_CDC_DeInit+0xf8>)
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	f003 020f 	and.w	r2, r3, #15
 800a16c:	6879      	ldr	r1, [r7, #4]
 800a16e:	4613      	mov	r3, r2
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	4413      	add	r3, r2
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	440b      	add	r3, r1
 800a178:	3323      	adds	r3, #35	@ 0x23
 800a17a:	2200      	movs	r2, #0
 800a17c:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a17e:	4b32      	ldr	r3, [pc, #200]	@ (800a248 <USBD_CDC_DeInit+0xfc>)
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	4619      	mov	r1, r3
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f002 fb16 	bl	800c7b6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a18a:	4b2f      	ldr	r3, [pc, #188]	@ (800a248 <USBD_CDC_DeInit+0xfc>)
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	f003 020f 	and.w	r2, r3, #15
 800a192:	6879      	ldr	r1, [r7, #4]
 800a194:	4613      	mov	r3, r2
 800a196:	009b      	lsls	r3, r3, #2
 800a198:	4413      	add	r3, r2
 800a19a:	009b      	lsls	r3, r3, #2
 800a19c:	440b      	add	r3, r1
 800a19e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a1a6:	4b29      	ldr	r3, [pc, #164]	@ (800a24c <USBD_CDC_DeInit+0x100>)
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f002 fb02 	bl	800c7b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a1b2:	4b26      	ldr	r3, [pc, #152]	@ (800a24c <USBD_CDC_DeInit+0x100>)
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	f003 020f 	and.w	r2, r3, #15
 800a1ba:	6879      	ldr	r1, [r7, #4]
 800a1bc:	4613      	mov	r3, r2
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	4413      	add	r3, r2
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	440b      	add	r3, r1
 800a1c6:	3323      	adds	r3, #35	@ 0x23
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a1cc:	4b1f      	ldr	r3, [pc, #124]	@ (800a24c <USBD_CDC_DeInit+0x100>)
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	f003 020f 	and.w	r2, r3, #15
 800a1d4:	6879      	ldr	r1, [r7, #4]
 800a1d6:	4613      	mov	r3, r2
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	4413      	add	r3, r2
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	440b      	add	r3, r1
 800a1e0:	331c      	adds	r3, #28
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	32b0      	adds	r2, #176	@ 0xb0
 800a1f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d01f      	beq.n	800a238 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	33b0      	adds	r3, #176	@ 0xb0
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	4413      	add	r3, r2
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	32b0      	adds	r2, #176	@ 0xb0
 800a216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a21a:	4618      	mov	r0, r3
 800a21c:	f002 fbd6 	bl	800c9cc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	32b0      	adds	r2, #176	@ 0xb0
 800a22a:	2100      	movs	r1, #0
 800a22c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a238:	2300      	movs	r3, #0
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3708      	adds	r7, #8
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	20000093 	.word	0x20000093
 800a248:	20000094 	.word	0x20000094
 800a24c:	20000095 	.word	0x20000095

0800a250 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b086      	sub	sp, #24
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	32b0      	adds	r2, #176	@ 0xb0
 800a264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a268:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a26a:	2300      	movs	r3, #0
 800a26c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a26e:	2300      	movs	r3, #0
 800a270:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a272:	2300      	movs	r3, #0
 800a274:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d101      	bne.n	800a280 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a27c:	2303      	movs	r3, #3
 800a27e:	e0bf      	b.n	800a400 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d050      	beq.n	800a32e <USBD_CDC_Setup+0xde>
 800a28c:	2b20      	cmp	r3, #32
 800a28e:	f040 80af 	bne.w	800a3f0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	88db      	ldrh	r3, [r3, #6]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d03a      	beq.n	800a310 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	b25b      	sxtb	r3, r3
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	da1b      	bge.n	800a2dc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	33b0      	adds	r3, #176	@ 0xb0
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	4413      	add	r3, r2
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	689b      	ldr	r3, [r3, #8]
 800a2b6:	683a      	ldr	r2, [r7, #0]
 800a2b8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a2ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a2bc:	683a      	ldr	r2, [r7, #0]
 800a2be:	88d2      	ldrh	r2, [r2, #6]
 800a2c0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	88db      	ldrh	r3, [r3, #6]
 800a2c6:	2b07      	cmp	r3, #7
 800a2c8:	bf28      	it	cs
 800a2ca:	2307      	movcs	r3, #7
 800a2cc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	89fa      	ldrh	r2, [r7, #14]
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f001 fda9 	bl	800be2c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a2da:	e090      	b.n	800a3fe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	785a      	ldrb	r2, [r3, #1]
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	88db      	ldrh	r3, [r3, #6]
 800a2ea:	2b3f      	cmp	r3, #63	@ 0x3f
 800a2ec:	d803      	bhi.n	800a2f6 <USBD_CDC_Setup+0xa6>
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	88db      	ldrh	r3, [r3, #6]
 800a2f2:	b2da      	uxtb	r2, r3
 800a2f4:	e000      	b.n	800a2f8 <USBD_CDC_Setup+0xa8>
 800a2f6:	2240      	movs	r2, #64	@ 0x40
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a2fe:	6939      	ldr	r1, [r7, #16]
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a306:	461a      	mov	r2, r3
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f001 fdbe 	bl	800be8a <USBD_CtlPrepareRx>
      break;
 800a30e:	e076      	b.n	800a3fe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	33b0      	adds	r3, #176	@ 0xb0
 800a31a:	009b      	lsls	r3, r3, #2
 800a31c:	4413      	add	r3, r2
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	689b      	ldr	r3, [r3, #8]
 800a322:	683a      	ldr	r2, [r7, #0]
 800a324:	7850      	ldrb	r0, [r2, #1]
 800a326:	2200      	movs	r2, #0
 800a328:	6839      	ldr	r1, [r7, #0]
 800a32a:	4798      	blx	r3
      break;
 800a32c:	e067      	b.n	800a3fe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	785b      	ldrb	r3, [r3, #1]
 800a332:	2b0b      	cmp	r3, #11
 800a334:	d851      	bhi.n	800a3da <USBD_CDC_Setup+0x18a>
 800a336:	a201      	add	r2, pc, #4	@ (adr r2, 800a33c <USBD_CDC_Setup+0xec>)
 800a338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a33c:	0800a36d 	.word	0x0800a36d
 800a340:	0800a3e9 	.word	0x0800a3e9
 800a344:	0800a3db 	.word	0x0800a3db
 800a348:	0800a3db 	.word	0x0800a3db
 800a34c:	0800a3db 	.word	0x0800a3db
 800a350:	0800a3db 	.word	0x0800a3db
 800a354:	0800a3db 	.word	0x0800a3db
 800a358:	0800a3db 	.word	0x0800a3db
 800a35c:	0800a3db 	.word	0x0800a3db
 800a360:	0800a3db 	.word	0x0800a3db
 800a364:	0800a397 	.word	0x0800a397
 800a368:	0800a3c1 	.word	0x0800a3c1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a372:	b2db      	uxtb	r3, r3
 800a374:	2b03      	cmp	r3, #3
 800a376:	d107      	bne.n	800a388 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a378:	f107 030a 	add.w	r3, r7, #10
 800a37c:	2202      	movs	r2, #2
 800a37e:	4619      	mov	r1, r3
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f001 fd53 	bl	800be2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a386:	e032      	b.n	800a3ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a388:	6839      	ldr	r1, [r7, #0]
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f001 fcd1 	bl	800bd32 <USBD_CtlError>
            ret = USBD_FAIL;
 800a390:	2303      	movs	r3, #3
 800a392:	75fb      	strb	r3, [r7, #23]
          break;
 800a394:	e02b      	b.n	800a3ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	2b03      	cmp	r3, #3
 800a3a0:	d107      	bne.n	800a3b2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a3a2:	f107 030d 	add.w	r3, r7, #13
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f001 fd3e 	bl	800be2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a3b0:	e01d      	b.n	800a3ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a3b2:	6839      	ldr	r1, [r7, #0]
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f001 fcbc 	bl	800bd32 <USBD_CtlError>
            ret = USBD_FAIL;
 800a3ba:	2303      	movs	r3, #3
 800a3bc:	75fb      	strb	r3, [r7, #23]
          break;
 800a3be:	e016      	b.n	800a3ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	2b03      	cmp	r3, #3
 800a3ca:	d00f      	beq.n	800a3ec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a3cc:	6839      	ldr	r1, [r7, #0]
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f001 fcaf 	bl	800bd32 <USBD_CtlError>
            ret = USBD_FAIL;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a3d8:	e008      	b.n	800a3ec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a3da:	6839      	ldr	r1, [r7, #0]
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f001 fca8 	bl	800bd32 <USBD_CtlError>
          ret = USBD_FAIL;
 800a3e2:	2303      	movs	r3, #3
 800a3e4:	75fb      	strb	r3, [r7, #23]
          break;
 800a3e6:	e002      	b.n	800a3ee <USBD_CDC_Setup+0x19e>
          break;
 800a3e8:	bf00      	nop
 800a3ea:	e008      	b.n	800a3fe <USBD_CDC_Setup+0x1ae>
          break;
 800a3ec:	bf00      	nop
      }
      break;
 800a3ee:	e006      	b.n	800a3fe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a3f0:	6839      	ldr	r1, [r7, #0]
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f001 fc9d 	bl	800bd32 <USBD_CtlError>
      ret = USBD_FAIL;
 800a3f8:	2303      	movs	r3, #3
 800a3fa:	75fb      	strb	r3, [r7, #23]
      break;
 800a3fc:	bf00      	nop
  }

  return (uint8_t)ret;
 800a3fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800a400:	4618      	mov	r0, r3
 800a402:	3718      	adds	r7, #24
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b084      	sub	sp, #16
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	460b      	mov	r3, r1
 800a412:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a41a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	32b0      	adds	r2, #176	@ 0xb0
 800a426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d101      	bne.n	800a432 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a42e:	2303      	movs	r3, #3
 800a430:	e065      	b.n	800a4fe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	32b0      	adds	r2, #176	@ 0xb0
 800a43c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a440:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a442:	78fb      	ldrb	r3, [r7, #3]
 800a444:	f003 020f 	and.w	r2, r3, #15
 800a448:	6879      	ldr	r1, [r7, #4]
 800a44a:	4613      	mov	r3, r2
 800a44c:	009b      	lsls	r3, r3, #2
 800a44e:	4413      	add	r3, r2
 800a450:	009b      	lsls	r3, r3, #2
 800a452:	440b      	add	r3, r1
 800a454:	3314      	adds	r3, #20
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d02f      	beq.n	800a4bc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a45c:	78fb      	ldrb	r3, [r7, #3]
 800a45e:	f003 020f 	and.w	r2, r3, #15
 800a462:	6879      	ldr	r1, [r7, #4]
 800a464:	4613      	mov	r3, r2
 800a466:	009b      	lsls	r3, r3, #2
 800a468:	4413      	add	r3, r2
 800a46a:	009b      	lsls	r3, r3, #2
 800a46c:	440b      	add	r3, r1
 800a46e:	3314      	adds	r3, #20
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	78fb      	ldrb	r3, [r7, #3]
 800a474:	f003 010f 	and.w	r1, r3, #15
 800a478:	68f8      	ldr	r0, [r7, #12]
 800a47a:	460b      	mov	r3, r1
 800a47c:	00db      	lsls	r3, r3, #3
 800a47e:	440b      	add	r3, r1
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	4403      	add	r3, r0
 800a484:	331c      	adds	r3, #28
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	fbb2 f1f3 	udiv	r1, r2, r3
 800a48c:	fb01 f303 	mul.w	r3, r1, r3
 800a490:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a492:	2b00      	cmp	r3, #0
 800a494:	d112      	bne.n	800a4bc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a496:	78fb      	ldrb	r3, [r7, #3]
 800a498:	f003 020f 	and.w	r2, r3, #15
 800a49c:	6879      	ldr	r1, [r7, #4]
 800a49e:	4613      	mov	r3, r2
 800a4a0:	009b      	lsls	r3, r3, #2
 800a4a2:	4413      	add	r3, r2
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	440b      	add	r3, r1
 800a4a8:	3314      	adds	r3, #20
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a4ae:	78f9      	ldrb	r1, [r7, #3]
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f002 fa26 	bl	800c906 <USBD_LL_Transmit>
 800a4ba:	e01f      	b.n	800a4fc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	33b0      	adds	r3, #176	@ 0xb0
 800a4ce:	009b      	lsls	r3, r3, #2
 800a4d0:	4413      	add	r3, r2
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	691b      	ldr	r3, [r3, #16]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d010      	beq.n	800a4fc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	33b0      	adds	r3, #176	@ 0xb0
 800a4e4:	009b      	lsls	r3, r3, #2
 800a4e6:	4413      	add	r3, r2
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	691b      	ldr	r3, [r3, #16]
 800a4ec:	68ba      	ldr	r2, [r7, #8]
 800a4ee:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a4f2:	68ba      	ldr	r2, [r7, #8]
 800a4f4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a4f8:	78fa      	ldrb	r2, [r7, #3]
 800a4fa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3710      	adds	r7, #16
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}

0800a506 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a506:	b580      	push	{r7, lr}
 800a508:	b084      	sub	sp, #16
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
 800a50e:	460b      	mov	r3, r1
 800a510:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	32b0      	adds	r2, #176	@ 0xb0
 800a51c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a520:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	32b0      	adds	r2, #176	@ 0xb0
 800a52c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d101      	bne.n	800a538 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a534:	2303      	movs	r3, #3
 800a536:	e01a      	b.n	800a56e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a538:	78fb      	ldrb	r3, [r7, #3]
 800a53a:	4619      	mov	r1, r3
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f002 fa24 	bl	800c98a <USBD_LL_GetRxDataSize>
 800a542:	4602      	mov	r2, r0
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	33b0      	adds	r3, #176	@ 0xb0
 800a554:	009b      	lsls	r3, r3, #2
 800a556:	4413      	add	r3, r2
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	68fa      	ldr	r2, [r7, #12]
 800a55e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a562:	68fa      	ldr	r2, [r7, #12]
 800a564:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a568:	4611      	mov	r1, r2
 800a56a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a56c:	2300      	movs	r3, #0
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3710      	adds	r7, #16
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}

0800a576 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a576:	b580      	push	{r7, lr}
 800a578:	b084      	sub	sp, #16
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	32b0      	adds	r2, #176	@ 0xb0
 800a588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a58c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d101      	bne.n	800a598 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a594:	2303      	movs	r3, #3
 800a596:	e024      	b.n	800a5e2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	33b0      	adds	r3, #176	@ 0xb0
 800a5a2:	009b      	lsls	r3, r3, #2
 800a5a4:	4413      	add	r3, r2
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d019      	beq.n	800a5e0 <USBD_CDC_EP0_RxReady+0x6a>
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a5b2:	2bff      	cmp	r3, #255	@ 0xff
 800a5b4:	d014      	beq.n	800a5e0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	33b0      	adds	r3, #176	@ 0xb0
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	4413      	add	r3, r2
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	689b      	ldr	r3, [r3, #8]
 800a5c8:	68fa      	ldr	r2, [r7, #12]
 800a5ca:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a5ce:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a5d0:	68fa      	ldr	r2, [r7, #12]
 800a5d2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a5d6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	22ff      	movs	r2, #255	@ 0xff
 800a5dc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a5e0:	2300      	movs	r3, #0
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3710      	adds	r7, #16
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
	...

0800a5ec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b086      	sub	sp, #24
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a5f4:	2182      	movs	r1, #130	@ 0x82
 800a5f6:	4818      	ldr	r0, [pc, #96]	@ (800a658 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a5f8:	f000 fd62 	bl	800b0c0 <USBD_GetEpDesc>
 800a5fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a5fe:	2101      	movs	r1, #1
 800a600:	4815      	ldr	r0, [pc, #84]	@ (800a658 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a602:	f000 fd5d 	bl	800b0c0 <USBD_GetEpDesc>
 800a606:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a608:	2181      	movs	r1, #129	@ 0x81
 800a60a:	4813      	ldr	r0, [pc, #76]	@ (800a658 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a60c:	f000 fd58 	bl	800b0c0 <USBD_GetEpDesc>
 800a610:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d002      	beq.n	800a61e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	2210      	movs	r2, #16
 800a61c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d006      	beq.n	800a632 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	2200      	movs	r2, #0
 800a628:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a62c:	711a      	strb	r2, [r3, #4]
 800a62e:	2200      	movs	r2, #0
 800a630:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d006      	beq.n	800a646 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2200      	movs	r2, #0
 800a63c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a640:	711a      	strb	r2, [r3, #4]
 800a642:	2200      	movs	r2, #0
 800a644:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2243      	movs	r2, #67	@ 0x43
 800a64a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a64c:	4b02      	ldr	r3, [pc, #8]	@ (800a658 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3718      	adds	r7, #24
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	20000050 	.word	0x20000050

0800a65c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b086      	sub	sp, #24
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a664:	2182      	movs	r1, #130	@ 0x82
 800a666:	4818      	ldr	r0, [pc, #96]	@ (800a6c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a668:	f000 fd2a 	bl	800b0c0 <USBD_GetEpDesc>
 800a66c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a66e:	2101      	movs	r1, #1
 800a670:	4815      	ldr	r0, [pc, #84]	@ (800a6c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a672:	f000 fd25 	bl	800b0c0 <USBD_GetEpDesc>
 800a676:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a678:	2181      	movs	r1, #129	@ 0x81
 800a67a:	4813      	ldr	r0, [pc, #76]	@ (800a6c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a67c:	f000 fd20 	bl	800b0c0 <USBD_GetEpDesc>
 800a680:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d002      	beq.n	800a68e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	2210      	movs	r2, #16
 800a68c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d006      	beq.n	800a6a2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	2200      	movs	r2, #0
 800a698:	711a      	strb	r2, [r3, #4]
 800a69a:	2200      	movs	r2, #0
 800a69c:	f042 0202 	orr.w	r2, r2, #2
 800a6a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d006      	beq.n	800a6b6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	711a      	strb	r2, [r3, #4]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f042 0202 	orr.w	r2, r2, #2
 800a6b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2243      	movs	r2, #67	@ 0x43
 800a6ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a6bc:	4b02      	ldr	r3, [pc, #8]	@ (800a6c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3718      	adds	r7, #24
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	20000050 	.word	0x20000050

0800a6cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b086      	sub	sp, #24
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a6d4:	2182      	movs	r1, #130	@ 0x82
 800a6d6:	4818      	ldr	r0, [pc, #96]	@ (800a738 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a6d8:	f000 fcf2 	bl	800b0c0 <USBD_GetEpDesc>
 800a6dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a6de:	2101      	movs	r1, #1
 800a6e0:	4815      	ldr	r0, [pc, #84]	@ (800a738 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a6e2:	f000 fced 	bl	800b0c0 <USBD_GetEpDesc>
 800a6e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a6e8:	2181      	movs	r1, #129	@ 0x81
 800a6ea:	4813      	ldr	r0, [pc, #76]	@ (800a738 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a6ec:	f000 fce8 	bl	800b0c0 <USBD_GetEpDesc>
 800a6f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d002      	beq.n	800a6fe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	2210      	movs	r2, #16
 800a6fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d006      	beq.n	800a712 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	2200      	movs	r2, #0
 800a708:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a70c:	711a      	strb	r2, [r3, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d006      	beq.n	800a726 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a720:	711a      	strb	r2, [r3, #4]
 800a722:	2200      	movs	r2, #0
 800a724:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2243      	movs	r2, #67	@ 0x43
 800a72a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a72c:	4b02      	ldr	r3, [pc, #8]	@ (800a738 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3718      	adds	r7, #24
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	20000050 	.word	0x20000050

0800a73c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b083      	sub	sp, #12
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	220a      	movs	r2, #10
 800a748:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a74a:	4b03      	ldr	r3, [pc, #12]	@ (800a758 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	370c      	adds	r7, #12
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr
 800a758:	2000000c 	.word	0x2000000c

0800a75c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d101      	bne.n	800a770 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a76c:	2303      	movs	r3, #3
 800a76e:	e009      	b.n	800a784 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	33b0      	adds	r3, #176	@ 0xb0
 800a77a:	009b      	lsls	r3, r3, #2
 800a77c:	4413      	add	r3, r2
 800a77e:	683a      	ldr	r2, [r7, #0]
 800a780:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a782:	2300      	movs	r3, #0
}
 800a784:	4618      	mov	r0, r3
 800a786:	370c      	adds	r7, #12
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a790:	b480      	push	{r7}
 800a792:	b087      	sub	sp, #28
 800a794:	af00      	add	r7, sp, #0
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	60b9      	str	r1, [r7, #8]
 800a79a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	32b0      	adds	r2, #176	@ 0xb0
 800a7a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7aa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d101      	bne.n	800a7b6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a7b2:	2303      	movs	r3, #3
 800a7b4:	e008      	b.n	800a7c8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	68ba      	ldr	r2, [r7, #8]
 800a7ba:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a7c6:	2300      	movs	r3, #0
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	371c      	adds	r7, #28
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b085      	sub	sp, #20
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	32b0      	adds	r2, #176	@ 0xb0
 800a7e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d101      	bne.n	800a7f8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a7f4:	2303      	movs	r3, #3
 800a7f6:	e004      	b.n	800a802 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	683a      	ldr	r2, [r7, #0]
 800a7fc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a800:	2300      	movs	r3, #0
}
 800a802:	4618      	mov	r0, r3
 800a804:	3714      	adds	r7, #20
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr
	...

0800a810 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	32b0      	adds	r2, #176	@ 0xb0
 800a822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a826:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a828:	2301      	movs	r3, #1
 800a82a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d101      	bne.n	800a836 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a832:	2303      	movs	r3, #3
 800a834:	e025      	b.n	800a882 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d11f      	bne.n	800a880 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	2201      	movs	r2, #1
 800a844:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a848:	4b10      	ldr	r3, [pc, #64]	@ (800a88c <USBD_CDC_TransmitPacket+0x7c>)
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	f003 020f 	and.w	r2, r3, #15
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	4613      	mov	r3, r2
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	4413      	add	r3, r2
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	4403      	add	r3, r0
 800a862:	3314      	adds	r3, #20
 800a864:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a866:	4b09      	ldr	r3, [pc, #36]	@ (800a88c <USBD_CDC_TransmitPacket+0x7c>)
 800a868:	7819      	ldrb	r1, [r3, #0]
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f002 f845 	bl	800c906 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a87c:	2300      	movs	r3, #0
 800a87e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a880:	7bfb      	ldrb	r3, [r7, #15]
}
 800a882:	4618      	mov	r0, r3
 800a884:	3710      	adds	r7, #16
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	bf00      	nop
 800a88c:	20000093 	.word	0x20000093

0800a890 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b084      	sub	sp, #16
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	32b0      	adds	r2, #176	@ 0xb0
 800a8a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8a6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	32b0      	adds	r2, #176	@ 0xb0
 800a8b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d101      	bne.n	800a8be <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a8ba:	2303      	movs	r3, #3
 800a8bc:	e018      	b.n	800a8f0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	7c1b      	ldrb	r3, [r3, #16]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d10a      	bne.n	800a8dc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a8c6:	4b0c      	ldr	r3, [pc, #48]	@ (800a8f8 <USBD_CDC_ReceivePacket+0x68>)
 800a8c8:	7819      	ldrb	r1, [r3, #0]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a8d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f002 f837 	bl	800c948 <USBD_LL_PrepareReceive>
 800a8da:	e008      	b.n	800a8ee <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a8dc:	4b06      	ldr	r3, [pc, #24]	@ (800a8f8 <USBD_CDC_ReceivePacket+0x68>)
 800a8de:	7819      	ldrb	r1, [r3, #0]
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a8e6:	2340      	movs	r3, #64	@ 0x40
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f002 f82d 	bl	800c948 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a8ee:	2300      	movs	r3, #0
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3710      	adds	r7, #16
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	20000094 	.word	0x20000094

0800a8fc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b086      	sub	sp, #24
 800a900:	af00      	add	r7, sp, #0
 800a902:	60f8      	str	r0, [r7, #12]
 800a904:	60b9      	str	r1, [r7, #8]
 800a906:	4613      	mov	r3, r2
 800a908:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d101      	bne.n	800a914 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a910:	2303      	movs	r3, #3
 800a912:	e01f      	b.n	800a954 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2200      	movs	r2, #0
 800a918:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2200      	movs	r2, #0
 800a920:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2200      	movs	r2, #0
 800a928:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d003      	beq.n	800a93a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	68ba      	ldr	r2, [r7, #8]
 800a936:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	2201      	movs	r2, #1
 800a93e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	79fa      	ldrb	r2, [r7, #7]
 800a946:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a948:	68f8      	ldr	r0, [r7, #12]
 800a94a:	f001 fea7 	bl	800c69c <USBD_LL_Init>
 800a94e:	4603      	mov	r3, r0
 800a950:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a952:	7dfb      	ldrb	r3, [r7, #23]
}
 800a954:	4618      	mov	r0, r3
 800a956:	3718      	adds	r7, #24
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b084      	sub	sp, #16
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a966:	2300      	movs	r3, #0
 800a968:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d101      	bne.n	800a974 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a970:	2303      	movs	r3, #3
 800a972:	e025      	b.n	800a9c0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	683a      	ldr	r2, [r7, #0]
 800a978:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	32ae      	adds	r2, #174	@ 0xae
 800a986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a98a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d00f      	beq.n	800a9b0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	32ae      	adds	r2, #174	@ 0xae
 800a99a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a99e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9a0:	f107 020e 	add.w	r2, r7, #14
 800a9a4:	4610      	mov	r0, r2
 800a9a6:	4798      	blx	r3
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a9b6:	1c5a      	adds	r2, r3, #1
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a9be:	2300      	movs	r3, #0
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3710      	adds	r7, #16
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f001 feaf 	bl	800c734 <USBD_LL_Start>
 800a9d6:	4603      	mov	r3, r0
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3708      	adds	r7, #8
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a9e8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	370c      	adds	r7, #12
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f4:	4770      	bx	lr

0800a9f6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a9f6:	b580      	push	{r7, lr}
 800a9f8:	b084      	sub	sp, #16
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
 800a9fe:	460b      	mov	r3, r1
 800aa00:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa02:	2300      	movs	r3, #0
 800aa04:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d009      	beq.n	800aa24 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	78fa      	ldrb	r2, [r7, #3]
 800aa1a:	4611      	mov	r1, r2
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	4798      	blx	r3
 800aa20:	4603      	mov	r3, r0
 800aa22:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aa24:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3710      	adds	r7, #16
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}

0800aa2e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa2e:	b580      	push	{r7, lr}
 800aa30:	b084      	sub	sp, #16
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
 800aa36:	460b      	mov	r3, r1
 800aa38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	78fa      	ldrb	r2, [r7, #3]
 800aa48:	4611      	mov	r1, r2
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	4798      	blx	r3
 800aa4e:	4603      	mov	r3, r0
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d001      	beq.n	800aa58 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800aa54:	2303      	movs	r3, #3
 800aa56:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aa58:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3710      	adds	r7, #16
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}

0800aa62 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b084      	sub	sp, #16
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
 800aa6a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800aa72:	6839      	ldr	r1, [r7, #0]
 800aa74:	4618      	mov	r0, r3
 800aa76:	f001 f922 	bl	800bcbe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800aa88:	461a      	mov	r2, r3
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800aa96:	f003 031f 	and.w	r3, r3, #31
 800aa9a:	2b02      	cmp	r3, #2
 800aa9c:	d01a      	beq.n	800aad4 <USBD_LL_SetupStage+0x72>
 800aa9e:	2b02      	cmp	r3, #2
 800aaa0:	d822      	bhi.n	800aae8 <USBD_LL_SetupStage+0x86>
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d002      	beq.n	800aaac <USBD_LL_SetupStage+0x4a>
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	d00a      	beq.n	800aac0 <USBD_LL_SetupStage+0x5e>
 800aaaa:	e01d      	b.n	800aae8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800aab2:	4619      	mov	r1, r3
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f000 fb77 	bl	800b1a8 <USBD_StdDevReq>
 800aaba:	4603      	mov	r3, r0
 800aabc:	73fb      	strb	r3, [r7, #15]
      break;
 800aabe:	e020      	b.n	800ab02 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800aac6:	4619      	mov	r1, r3
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 fbdf 	bl	800b28c <USBD_StdItfReq>
 800aace:	4603      	mov	r3, r0
 800aad0:	73fb      	strb	r3, [r7, #15]
      break;
 800aad2:	e016      	b.n	800ab02 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800aada:	4619      	mov	r1, r3
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f000 fc41 	bl	800b364 <USBD_StdEPReq>
 800aae2:	4603      	mov	r3, r0
 800aae4:	73fb      	strb	r3, [r7, #15]
      break;
 800aae6:	e00c      	b.n	800ab02 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800aaee:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f001 fe7c 	bl	800c7f4 <USBD_LL_StallEP>
 800aafc:	4603      	mov	r3, r0
 800aafe:	73fb      	strb	r3, [r7, #15]
      break;
 800ab00:	bf00      	nop
  }

  return ret;
 800ab02:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3710      	adds	r7, #16
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b086      	sub	sp, #24
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	460b      	mov	r3, r1
 800ab16:	607a      	str	r2, [r7, #4]
 800ab18:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800ab1e:	7afb      	ldrb	r3, [r7, #11]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d177      	bne.n	800ac14 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ab2a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ab32:	2b03      	cmp	r3, #3
 800ab34:	f040 80a1 	bne.w	800ac7a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	693a      	ldr	r2, [r7, #16]
 800ab3e:	8992      	ldrh	r2, [r2, #12]
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d91c      	bls.n	800ab7e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	693a      	ldr	r2, [r7, #16]
 800ab4a:	8992      	ldrh	r2, [r2, #12]
 800ab4c:	1a9a      	subs	r2, r3, r2
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	691b      	ldr	r3, [r3, #16]
 800ab56:	693a      	ldr	r2, [r7, #16]
 800ab58:	8992      	ldrh	r2, [r2, #12]
 800ab5a:	441a      	add	r2, r3
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	6919      	ldr	r1, [r3, #16]
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	899b      	ldrh	r3, [r3, #12]
 800ab68:	461a      	mov	r2, r3
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	bf38      	it	cc
 800ab72:	4613      	movcc	r3, r2
 800ab74:	461a      	mov	r2, r3
 800ab76:	68f8      	ldr	r0, [r7, #12]
 800ab78:	f001 f9a8 	bl	800becc <USBD_CtlContinueRx>
 800ab7c:	e07d      	b.n	800ac7a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ab84:	f003 031f 	and.w	r3, r3, #31
 800ab88:	2b02      	cmp	r3, #2
 800ab8a:	d014      	beq.n	800abb6 <USBD_LL_DataOutStage+0xaa>
 800ab8c:	2b02      	cmp	r3, #2
 800ab8e:	d81d      	bhi.n	800abcc <USBD_LL_DataOutStage+0xc0>
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d002      	beq.n	800ab9a <USBD_LL_DataOutStage+0x8e>
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d003      	beq.n	800aba0 <USBD_LL_DataOutStage+0x94>
 800ab98:	e018      	b.n	800abcc <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	75bb      	strb	r3, [r7, #22]
            break;
 800ab9e:	e018      	b.n	800abd2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	4619      	mov	r1, r3
 800abaa:	68f8      	ldr	r0, [r7, #12]
 800abac:	f000 fa6e 	bl	800b08c <USBD_CoreFindIF>
 800abb0:	4603      	mov	r3, r0
 800abb2:	75bb      	strb	r3, [r7, #22]
            break;
 800abb4:	e00d      	b.n	800abd2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	4619      	mov	r1, r3
 800abc0:	68f8      	ldr	r0, [r7, #12]
 800abc2:	f000 fa70 	bl	800b0a6 <USBD_CoreFindEP>
 800abc6:	4603      	mov	r3, r0
 800abc8:	75bb      	strb	r3, [r7, #22]
            break;
 800abca:	e002      	b.n	800abd2 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800abcc:	2300      	movs	r3, #0
 800abce:	75bb      	strb	r3, [r7, #22]
            break;
 800abd0:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800abd2:	7dbb      	ldrb	r3, [r7, #22]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d119      	bne.n	800ac0c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abde:	b2db      	uxtb	r3, r3
 800abe0:	2b03      	cmp	r3, #3
 800abe2:	d113      	bne.n	800ac0c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800abe4:	7dba      	ldrb	r2, [r7, #22]
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	32ae      	adds	r2, #174	@ 0xae
 800abea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abee:	691b      	ldr	r3, [r3, #16]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d00b      	beq.n	800ac0c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800abf4:	7dba      	ldrb	r2, [r7, #22]
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800abfc:	7dba      	ldrb	r2, [r7, #22]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	32ae      	adds	r2, #174	@ 0xae
 800ac02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac06:	691b      	ldr	r3, [r3, #16]
 800ac08:	68f8      	ldr	r0, [r7, #12]
 800ac0a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ac0c:	68f8      	ldr	r0, [r7, #12]
 800ac0e:	f001 f96e 	bl	800beee <USBD_CtlSendStatus>
 800ac12:	e032      	b.n	800ac7a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ac14:	7afb      	ldrb	r3, [r7, #11]
 800ac16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	68f8      	ldr	r0, [r7, #12]
 800ac20:	f000 fa41 	bl	800b0a6 <USBD_CoreFindEP>
 800ac24:	4603      	mov	r3, r0
 800ac26:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac28:	7dbb      	ldrb	r3, [r7, #22]
 800ac2a:	2bff      	cmp	r3, #255	@ 0xff
 800ac2c:	d025      	beq.n	800ac7a <USBD_LL_DataOutStage+0x16e>
 800ac2e:	7dbb      	ldrb	r3, [r7, #22]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d122      	bne.n	800ac7a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	2b03      	cmp	r3, #3
 800ac3e:	d117      	bne.n	800ac70 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ac40:	7dba      	ldrb	r2, [r7, #22]
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	32ae      	adds	r2, #174	@ 0xae
 800ac46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac4a:	699b      	ldr	r3, [r3, #24]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d00f      	beq.n	800ac70 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800ac50:	7dba      	ldrb	r2, [r7, #22]
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ac58:	7dba      	ldrb	r2, [r7, #22]
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	32ae      	adds	r2, #174	@ 0xae
 800ac5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac62:	699b      	ldr	r3, [r3, #24]
 800ac64:	7afa      	ldrb	r2, [r7, #11]
 800ac66:	4611      	mov	r1, r2
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	4798      	blx	r3
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ac70:	7dfb      	ldrb	r3, [r7, #23]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d001      	beq.n	800ac7a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800ac76:	7dfb      	ldrb	r3, [r7, #23]
 800ac78:	e000      	b.n	800ac7c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800ac7a:	2300      	movs	r3, #0
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3718      	adds	r7, #24
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b086      	sub	sp, #24
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	60f8      	str	r0, [r7, #12]
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	607a      	str	r2, [r7, #4]
 800ac90:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800ac92:	7afb      	ldrb	r3, [r7, #11]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d178      	bne.n	800ad8a <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	3314      	adds	r3, #20
 800ac9c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800aca4:	2b02      	cmp	r3, #2
 800aca6:	d163      	bne.n	800ad70 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	693a      	ldr	r2, [r7, #16]
 800acae:	8992      	ldrh	r2, [r2, #12]
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d91c      	bls.n	800acee <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	693a      	ldr	r2, [r7, #16]
 800acba:	8992      	ldrh	r2, [r2, #12]
 800acbc:	1a9a      	subs	r2, r3, r2
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	691b      	ldr	r3, [r3, #16]
 800acc6:	693a      	ldr	r2, [r7, #16]
 800acc8:	8992      	ldrh	r2, [r2, #12]
 800acca:	441a      	add	r2, r3
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	6919      	ldr	r1, [r3, #16]
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	461a      	mov	r2, r3
 800acda:	68f8      	ldr	r0, [r7, #12]
 800acdc:	f001 f8c4 	bl	800be68 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ace0:	2300      	movs	r3, #0
 800ace2:	2200      	movs	r2, #0
 800ace4:	2100      	movs	r1, #0
 800ace6:	68f8      	ldr	r0, [r7, #12]
 800ace8:	f001 fe2e 	bl	800c948 <USBD_LL_PrepareReceive>
 800acec:	e040      	b.n	800ad70 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	899b      	ldrh	r3, [r3, #12]
 800acf2:	461a      	mov	r2, r3
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d11c      	bne.n	800ad36 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	693a      	ldr	r2, [r7, #16]
 800ad02:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d316      	bcc.n	800ad36 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d20f      	bcs.n	800ad36 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ad16:	2200      	movs	r2, #0
 800ad18:	2100      	movs	r1, #0
 800ad1a:	68f8      	ldr	r0, [r7, #12]
 800ad1c:	f001 f8a4 	bl	800be68 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2200      	movs	r2, #0
 800ad24:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad28:	2300      	movs	r3, #0
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	2100      	movs	r1, #0
 800ad2e:	68f8      	ldr	r0, [r7, #12]
 800ad30:	f001 fe0a 	bl	800c948 <USBD_LL_PrepareReceive>
 800ad34:	e01c      	b.n	800ad70 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad3c:	b2db      	uxtb	r3, r3
 800ad3e:	2b03      	cmp	r3, #3
 800ad40:	d10f      	bne.n	800ad62 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad48:	68db      	ldr	r3, [r3, #12]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d009      	beq.n	800ad62 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2200      	movs	r2, #0
 800ad52:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	68f8      	ldr	r0, [r7, #12]
 800ad60:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad62:	2180      	movs	r1, #128	@ 0x80
 800ad64:	68f8      	ldr	r0, [r7, #12]
 800ad66:	f001 fd45 	bl	800c7f4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ad6a:	68f8      	ldr	r0, [r7, #12]
 800ad6c:	f001 f8d2 	bl	800bf14 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d03a      	beq.n	800adf0 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800ad7a:	68f8      	ldr	r0, [r7, #12]
 800ad7c:	f7ff fe30 	bl	800a9e0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2200      	movs	r2, #0
 800ad84:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ad88:	e032      	b.n	800adf0 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ad8a:	7afb      	ldrb	r3, [r7, #11]
 800ad8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ad90:	b2db      	uxtb	r3, r3
 800ad92:	4619      	mov	r1, r3
 800ad94:	68f8      	ldr	r0, [r7, #12]
 800ad96:	f000 f986 	bl	800b0a6 <USBD_CoreFindEP>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad9e:	7dfb      	ldrb	r3, [r7, #23]
 800ada0:	2bff      	cmp	r3, #255	@ 0xff
 800ada2:	d025      	beq.n	800adf0 <USBD_LL_DataInStage+0x16c>
 800ada4:	7dfb      	ldrb	r3, [r7, #23]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d122      	bne.n	800adf0 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	2b03      	cmp	r3, #3
 800adb4:	d11c      	bne.n	800adf0 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800adb6:	7dfa      	ldrb	r2, [r7, #23]
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	32ae      	adds	r2, #174	@ 0xae
 800adbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adc0:	695b      	ldr	r3, [r3, #20]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d014      	beq.n	800adf0 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800adc6:	7dfa      	ldrb	r2, [r7, #23]
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800adce:	7dfa      	ldrb	r2, [r7, #23]
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	32ae      	adds	r2, #174	@ 0xae
 800add4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800add8:	695b      	ldr	r3, [r3, #20]
 800adda:	7afa      	ldrb	r2, [r7, #11]
 800addc:	4611      	mov	r1, r2
 800adde:	68f8      	ldr	r0, [r7, #12]
 800ade0:	4798      	blx	r3
 800ade2:	4603      	mov	r3, r0
 800ade4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ade6:	7dbb      	ldrb	r3, [r7, #22]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d001      	beq.n	800adf0 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800adec:	7dbb      	ldrb	r3, [r7, #22]
 800adee:	e000      	b.n	800adf2 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800adf0:	2300      	movs	r3, #0
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3718      	adds	r7, #24
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}

0800adfa <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800adfa:	b580      	push	{r7, lr}
 800adfc:	b084      	sub	sp, #16
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae02:	2300      	movs	r3, #0
 800ae04:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2201      	movs	r2, #1
 800ae0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2200      	movs	r2, #0
 800ae12:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2200      	movs	r2, #0
 800ae28:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d014      	beq.n	800ae60 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d00e      	beq.n	800ae60 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae48:	685b      	ldr	r3, [r3, #4]
 800ae4a:	687a      	ldr	r2, [r7, #4]
 800ae4c:	6852      	ldr	r2, [r2, #4]
 800ae4e:	b2d2      	uxtb	r2, r2
 800ae50:	4611      	mov	r1, r2
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	4798      	blx	r3
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d001      	beq.n	800ae60 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ae5c:	2303      	movs	r3, #3
 800ae5e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ae60:	2340      	movs	r3, #64	@ 0x40
 800ae62:	2200      	movs	r2, #0
 800ae64:	2100      	movs	r1, #0
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f001 fc7f 	bl	800c76a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2201      	movs	r2, #1
 800ae70:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2240      	movs	r2, #64	@ 0x40
 800ae78:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ae7c:	2340      	movs	r3, #64	@ 0x40
 800ae7e:	2200      	movs	r2, #0
 800ae80:	2180      	movs	r1, #128	@ 0x80
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f001 fc71 	bl	800c76a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2240      	movs	r2, #64	@ 0x40
 800ae94:	841a      	strh	r2, [r3, #32]

  return ret;
 800ae96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3710      	adds	r7, #16
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b083      	sub	sp, #12
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	460b      	mov	r3, r1
 800aeaa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	78fa      	ldrb	r2, [r7, #3]
 800aeb0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aeb2:	2300      	movs	r3, #0
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	370c      	adds	r7, #12
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr

0800aec0 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b083      	sub	sp, #12
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aece:	b2db      	uxtb	r3, r3
 800aed0:	2b04      	cmp	r3, #4
 800aed2:	d006      	beq.n	800aee2 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aeda:	b2da      	uxtb	r2, r3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2204      	movs	r2, #4
 800aee6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800aeea:	2300      	movs	r3, #0
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	370c      	adds	r7, #12
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr

0800aef8 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b083      	sub	sp, #12
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af06:	b2db      	uxtb	r3, r3
 800af08:	2b04      	cmp	r3, #4
 800af0a:	d106      	bne.n	800af1a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800af12:	b2da      	uxtb	r2, r3
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800af1a:	2300      	movs	r3, #0
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	370c      	adds	r7, #12
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af36:	b2db      	uxtb	r3, r3
 800af38:	2b03      	cmp	r3, #3
 800af3a:	d110      	bne.n	800af5e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af42:	2b00      	cmp	r3, #0
 800af44:	d00b      	beq.n	800af5e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af4c:	69db      	ldr	r3, [r3, #28]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d005      	beq.n	800af5e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af58:	69db      	ldr	r3, [r3, #28]
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800af5e:	2300      	movs	r3, #0
}
 800af60:	4618      	mov	r0, r3
 800af62:	3708      	adds	r7, #8
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	460b      	mov	r3, r1
 800af72:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	32ae      	adds	r2, #174	@ 0xae
 800af7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d101      	bne.n	800af8a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800af86:	2303      	movs	r3, #3
 800af88:	e01c      	b.n	800afc4 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af90:	b2db      	uxtb	r3, r3
 800af92:	2b03      	cmp	r3, #3
 800af94:	d115      	bne.n	800afc2 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	32ae      	adds	r2, #174	@ 0xae
 800afa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afa4:	6a1b      	ldr	r3, [r3, #32]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d00b      	beq.n	800afc2 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	32ae      	adds	r2, #174	@ 0xae
 800afb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afb8:	6a1b      	ldr	r3, [r3, #32]
 800afba:	78fa      	ldrb	r2, [r7, #3]
 800afbc:	4611      	mov	r1, r2
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800afc2:	2300      	movs	r3, #0
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3708      	adds	r7, #8
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	460b      	mov	r3, r1
 800afd6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	32ae      	adds	r2, #174	@ 0xae
 800afe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d101      	bne.n	800afee <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800afea:	2303      	movs	r3, #3
 800afec:	e01c      	b.n	800b028 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	2b03      	cmp	r3, #3
 800aff8:	d115      	bne.n	800b026 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	32ae      	adds	r2, #174	@ 0xae
 800b004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d00b      	beq.n	800b026 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	32ae      	adds	r2, #174	@ 0xae
 800b018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b01c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b01e:	78fa      	ldrb	r2, [r7, #3]
 800b020:	4611      	mov	r1, r2
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b026:	2300      	movs	r3, #0
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3708      	adds	r7, #8
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b030:	b480      	push	{r7}
 800b032:	b083      	sub	sp, #12
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b038:	2300      	movs	r3, #0
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	370c      	adds	r7, #12
 800b03e:	46bd      	mov	sp, r7
 800b040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b044:	4770      	bx	lr

0800b046 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b046:	b580      	push	{r7, lr}
 800b048:	b084      	sub	sp, #16
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b04e:	2300      	movs	r3, #0
 800b050:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2201      	movs	r2, #1
 800b056:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b060:	2b00      	cmp	r3, #0
 800b062:	d00e      	beq.n	800b082 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	687a      	ldr	r2, [r7, #4]
 800b06e:	6852      	ldr	r2, [r2, #4]
 800b070:	b2d2      	uxtb	r2, r2
 800b072:	4611      	mov	r1, r2
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	4798      	blx	r3
 800b078:	4603      	mov	r3, r0
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d001      	beq.n	800b082 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b07e:	2303      	movs	r3, #3
 800b080:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b082:	7bfb      	ldrb	r3, [r7, #15]
}
 800b084:	4618      	mov	r0, r3
 800b086:	3710      	adds	r7, #16
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b083      	sub	sp, #12
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	460b      	mov	r3, r1
 800b096:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b098:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	370c      	adds	r7, #12
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr

0800b0a6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b0a6:	b480      	push	{r7}
 800b0a8:	b083      	sub	sp, #12
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	6078      	str	r0, [r7, #4]
 800b0ae:	460b      	mov	r3, r1
 800b0b0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b0b2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	370c      	adds	r7, #12
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr

0800b0c0 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b086      	sub	sp, #24
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	885b      	ldrh	r3, [r3, #2]
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	68fa      	ldr	r2, [r7, #12]
 800b0e0:	7812      	ldrb	r2, [r2, #0]
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d91f      	bls.n	800b126 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b0ec:	e013      	b.n	800b116 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b0ee:	f107 030a 	add.w	r3, r7, #10
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	6978      	ldr	r0, [r7, #20]
 800b0f6:	f000 f81b 	bl	800b130 <USBD_GetNextDesc>
 800b0fa:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	785b      	ldrb	r3, [r3, #1]
 800b100:	2b05      	cmp	r3, #5
 800b102:	d108      	bne.n	800b116 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	789b      	ldrb	r3, [r3, #2]
 800b10c:	78fa      	ldrb	r2, [r7, #3]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d008      	beq.n	800b124 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b112:	2300      	movs	r3, #0
 800b114:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	885b      	ldrh	r3, [r3, #2]
 800b11a:	b29a      	uxth	r2, r3
 800b11c:	897b      	ldrh	r3, [r7, #10]
 800b11e:	429a      	cmp	r2, r3
 800b120:	d8e5      	bhi.n	800b0ee <USBD_GetEpDesc+0x2e>
 800b122:	e000      	b.n	800b126 <USBD_GetEpDesc+0x66>
          break;
 800b124:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b126:	693b      	ldr	r3, [r7, #16]
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3718      	adds	r7, #24
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b130:	b480      	push	{r7}
 800b132:	b085      	sub	sp, #20
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	881b      	ldrh	r3, [r3, #0]
 800b142:	68fa      	ldr	r2, [r7, #12]
 800b144:	7812      	ldrb	r2, [r2, #0]
 800b146:	4413      	add	r3, r2
 800b148:	b29a      	uxth	r2, r3
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	461a      	mov	r2, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	4413      	add	r3, r2
 800b158:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b15a:	68fb      	ldr	r3, [r7, #12]
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3714      	adds	r7, #20
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr

0800b168 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b168:	b480      	push	{r7}
 800b16a:	b087      	sub	sp, #28
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	781b      	ldrb	r3, [r3, #0]
 800b178:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	3301      	adds	r3, #1
 800b17e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	781b      	ldrb	r3, [r3, #0]
 800b184:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b186:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b18a:	021b      	lsls	r3, r3, #8
 800b18c:	b21a      	sxth	r2, r3
 800b18e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b192:	4313      	orrs	r3, r2
 800b194:	b21b      	sxth	r3, r3
 800b196:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b198:	89fb      	ldrh	r3, [r7, #14]
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	371c      	adds	r7, #28
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a4:	4770      	bx	lr
	...

0800b1a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	781b      	ldrb	r3, [r3, #0]
 800b1ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b1be:	2b40      	cmp	r3, #64	@ 0x40
 800b1c0:	d005      	beq.n	800b1ce <USBD_StdDevReq+0x26>
 800b1c2:	2b40      	cmp	r3, #64	@ 0x40
 800b1c4:	d857      	bhi.n	800b276 <USBD_StdDevReq+0xce>
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d00f      	beq.n	800b1ea <USBD_StdDevReq+0x42>
 800b1ca:	2b20      	cmp	r3, #32
 800b1cc:	d153      	bne.n	800b276 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	32ae      	adds	r2, #174	@ 0xae
 800b1d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1dc:	689b      	ldr	r3, [r3, #8]
 800b1de:	6839      	ldr	r1, [r7, #0]
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	4798      	blx	r3
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	73fb      	strb	r3, [r7, #15]
      break;
 800b1e8:	e04a      	b.n	800b280 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	785b      	ldrb	r3, [r3, #1]
 800b1ee:	2b09      	cmp	r3, #9
 800b1f0:	d83b      	bhi.n	800b26a <USBD_StdDevReq+0xc2>
 800b1f2:	a201      	add	r2, pc, #4	@ (adr r2, 800b1f8 <USBD_StdDevReq+0x50>)
 800b1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1f8:	0800b24d 	.word	0x0800b24d
 800b1fc:	0800b261 	.word	0x0800b261
 800b200:	0800b26b 	.word	0x0800b26b
 800b204:	0800b257 	.word	0x0800b257
 800b208:	0800b26b 	.word	0x0800b26b
 800b20c:	0800b22b 	.word	0x0800b22b
 800b210:	0800b221 	.word	0x0800b221
 800b214:	0800b26b 	.word	0x0800b26b
 800b218:	0800b243 	.word	0x0800b243
 800b21c:	0800b235 	.word	0x0800b235
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b220:	6839      	ldr	r1, [r7, #0]
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f000 fa3e 	bl	800b6a4 <USBD_GetDescriptor>
          break;
 800b228:	e024      	b.n	800b274 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b22a:	6839      	ldr	r1, [r7, #0]
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 fba3 	bl	800b978 <USBD_SetAddress>
          break;
 800b232:	e01f      	b.n	800b274 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b234:	6839      	ldr	r1, [r7, #0]
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 fbe2 	bl	800ba00 <USBD_SetConfig>
 800b23c:	4603      	mov	r3, r0
 800b23e:	73fb      	strb	r3, [r7, #15]
          break;
 800b240:	e018      	b.n	800b274 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b242:	6839      	ldr	r1, [r7, #0]
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f000 fc85 	bl	800bb54 <USBD_GetConfig>
          break;
 800b24a:	e013      	b.n	800b274 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b24c:	6839      	ldr	r1, [r7, #0]
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f000 fcb6 	bl	800bbc0 <USBD_GetStatus>
          break;
 800b254:	e00e      	b.n	800b274 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b256:	6839      	ldr	r1, [r7, #0]
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 fce5 	bl	800bc28 <USBD_SetFeature>
          break;
 800b25e:	e009      	b.n	800b274 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b260:	6839      	ldr	r1, [r7, #0]
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 fd09 	bl	800bc7a <USBD_ClrFeature>
          break;
 800b268:	e004      	b.n	800b274 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b26a:	6839      	ldr	r1, [r7, #0]
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f000 fd60 	bl	800bd32 <USBD_CtlError>
          break;
 800b272:	bf00      	nop
      }
      break;
 800b274:	e004      	b.n	800b280 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b276:	6839      	ldr	r1, [r7, #0]
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f000 fd5a 	bl	800bd32 <USBD_CtlError>
      break;
 800b27e:	bf00      	nop
  }

  return ret;
 800b280:	7bfb      	ldrb	r3, [r7, #15]
}
 800b282:	4618      	mov	r0, r3
 800b284:	3710      	adds	r7, #16
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop

0800b28c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b084      	sub	sp, #16
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b296:	2300      	movs	r3, #0
 800b298:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b2a2:	2b40      	cmp	r3, #64	@ 0x40
 800b2a4:	d005      	beq.n	800b2b2 <USBD_StdItfReq+0x26>
 800b2a6:	2b40      	cmp	r3, #64	@ 0x40
 800b2a8:	d852      	bhi.n	800b350 <USBD_StdItfReq+0xc4>
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d001      	beq.n	800b2b2 <USBD_StdItfReq+0x26>
 800b2ae:	2b20      	cmp	r3, #32
 800b2b0:	d14e      	bne.n	800b350 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2b8:	b2db      	uxtb	r3, r3
 800b2ba:	3b01      	subs	r3, #1
 800b2bc:	2b02      	cmp	r3, #2
 800b2be:	d840      	bhi.n	800b342 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	889b      	ldrh	r3, [r3, #4]
 800b2c4:	b2db      	uxtb	r3, r3
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d836      	bhi.n	800b338 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	889b      	ldrh	r3, [r3, #4]
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f7ff feda 	bl	800b08c <USBD_CoreFindIF>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b2dc:	7bbb      	ldrb	r3, [r7, #14]
 800b2de:	2bff      	cmp	r3, #255	@ 0xff
 800b2e0:	d01d      	beq.n	800b31e <USBD_StdItfReq+0x92>
 800b2e2:	7bbb      	ldrb	r3, [r7, #14]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d11a      	bne.n	800b31e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b2e8:	7bba      	ldrb	r2, [r7, #14]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	32ae      	adds	r2, #174	@ 0xae
 800b2ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d00f      	beq.n	800b318 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b2f8:	7bba      	ldrb	r2, [r7, #14]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b300:	7bba      	ldrb	r2, [r7, #14]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	32ae      	adds	r2, #174	@ 0xae
 800b306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b30a:	689b      	ldr	r3, [r3, #8]
 800b30c:	6839      	ldr	r1, [r7, #0]
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	4798      	blx	r3
 800b312:	4603      	mov	r3, r0
 800b314:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b316:	e004      	b.n	800b322 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b318:	2303      	movs	r3, #3
 800b31a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b31c:	e001      	b.n	800b322 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b31e:	2303      	movs	r3, #3
 800b320:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	88db      	ldrh	r3, [r3, #6]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d110      	bne.n	800b34c <USBD_StdItfReq+0xc0>
 800b32a:	7bfb      	ldrb	r3, [r7, #15]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d10d      	bne.n	800b34c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f000 fddc 	bl	800beee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b336:	e009      	b.n	800b34c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b338:	6839      	ldr	r1, [r7, #0]
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f000 fcf9 	bl	800bd32 <USBD_CtlError>
          break;
 800b340:	e004      	b.n	800b34c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b342:	6839      	ldr	r1, [r7, #0]
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f000 fcf4 	bl	800bd32 <USBD_CtlError>
          break;
 800b34a:	e000      	b.n	800b34e <USBD_StdItfReq+0xc2>
          break;
 800b34c:	bf00      	nop
      }
      break;
 800b34e:	e004      	b.n	800b35a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b350:	6839      	ldr	r1, [r7, #0]
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f000 fced 	bl	800bd32 <USBD_CtlError>
      break;
 800b358:	bf00      	nop
  }

  return ret;
 800b35a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3710      	adds	r7, #16
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}

0800b364 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b084      	sub	sp, #16
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b36e:	2300      	movs	r3, #0
 800b370:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	889b      	ldrh	r3, [r3, #4]
 800b376:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b380:	2b40      	cmp	r3, #64	@ 0x40
 800b382:	d007      	beq.n	800b394 <USBD_StdEPReq+0x30>
 800b384:	2b40      	cmp	r3, #64	@ 0x40
 800b386:	f200 8181 	bhi.w	800b68c <USBD_StdEPReq+0x328>
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d02a      	beq.n	800b3e4 <USBD_StdEPReq+0x80>
 800b38e:	2b20      	cmp	r3, #32
 800b390:	f040 817c 	bne.w	800b68c <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b394:	7bbb      	ldrb	r3, [r7, #14]
 800b396:	4619      	mov	r1, r3
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f7ff fe84 	bl	800b0a6 <USBD_CoreFindEP>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b3a2:	7b7b      	ldrb	r3, [r7, #13]
 800b3a4:	2bff      	cmp	r3, #255	@ 0xff
 800b3a6:	f000 8176 	beq.w	800b696 <USBD_StdEPReq+0x332>
 800b3aa:	7b7b      	ldrb	r3, [r7, #13]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	f040 8172 	bne.w	800b696 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800b3b2:	7b7a      	ldrb	r2, [r7, #13]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b3ba:	7b7a      	ldrb	r2, [r7, #13]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	32ae      	adds	r2, #174	@ 0xae
 800b3c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3c4:	689b      	ldr	r3, [r3, #8]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	f000 8165 	beq.w	800b696 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b3cc:	7b7a      	ldrb	r2, [r7, #13]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	32ae      	adds	r2, #174	@ 0xae
 800b3d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	6839      	ldr	r1, [r7, #0]
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	4798      	blx	r3
 800b3de:	4603      	mov	r3, r0
 800b3e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b3e2:	e158      	b.n	800b696 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	785b      	ldrb	r3, [r3, #1]
 800b3e8:	2b03      	cmp	r3, #3
 800b3ea:	d008      	beq.n	800b3fe <USBD_StdEPReq+0x9a>
 800b3ec:	2b03      	cmp	r3, #3
 800b3ee:	f300 8147 	bgt.w	800b680 <USBD_StdEPReq+0x31c>
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	f000 809b 	beq.w	800b52e <USBD_StdEPReq+0x1ca>
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	d03c      	beq.n	800b476 <USBD_StdEPReq+0x112>
 800b3fc:	e140      	b.n	800b680 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b404:	b2db      	uxtb	r3, r3
 800b406:	2b02      	cmp	r3, #2
 800b408:	d002      	beq.n	800b410 <USBD_StdEPReq+0xac>
 800b40a:	2b03      	cmp	r3, #3
 800b40c:	d016      	beq.n	800b43c <USBD_StdEPReq+0xd8>
 800b40e:	e02c      	b.n	800b46a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b410:	7bbb      	ldrb	r3, [r7, #14]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d00d      	beq.n	800b432 <USBD_StdEPReq+0xce>
 800b416:	7bbb      	ldrb	r3, [r7, #14]
 800b418:	2b80      	cmp	r3, #128	@ 0x80
 800b41a:	d00a      	beq.n	800b432 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b41c:	7bbb      	ldrb	r3, [r7, #14]
 800b41e:	4619      	mov	r1, r3
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f001 f9e7 	bl	800c7f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b426:	2180      	movs	r1, #128	@ 0x80
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f001 f9e3 	bl	800c7f4 <USBD_LL_StallEP>
 800b42e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b430:	e020      	b.n	800b474 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b432:	6839      	ldr	r1, [r7, #0]
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f000 fc7c 	bl	800bd32 <USBD_CtlError>
              break;
 800b43a:	e01b      	b.n	800b474 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	885b      	ldrh	r3, [r3, #2]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d10e      	bne.n	800b462 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b444:	7bbb      	ldrb	r3, [r7, #14]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d00b      	beq.n	800b462 <USBD_StdEPReq+0xfe>
 800b44a:	7bbb      	ldrb	r3, [r7, #14]
 800b44c:	2b80      	cmp	r3, #128	@ 0x80
 800b44e:	d008      	beq.n	800b462 <USBD_StdEPReq+0xfe>
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	88db      	ldrh	r3, [r3, #6]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d104      	bne.n	800b462 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b458:	7bbb      	ldrb	r3, [r7, #14]
 800b45a:	4619      	mov	r1, r3
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f001 f9c9 	bl	800c7f4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f000 fd43 	bl	800beee <USBD_CtlSendStatus>

              break;
 800b468:	e004      	b.n	800b474 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b46a:	6839      	ldr	r1, [r7, #0]
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f000 fc60 	bl	800bd32 <USBD_CtlError>
              break;
 800b472:	bf00      	nop
          }
          break;
 800b474:	e109      	b.n	800b68a <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	2b02      	cmp	r3, #2
 800b480:	d002      	beq.n	800b488 <USBD_StdEPReq+0x124>
 800b482:	2b03      	cmp	r3, #3
 800b484:	d016      	beq.n	800b4b4 <USBD_StdEPReq+0x150>
 800b486:	e04b      	b.n	800b520 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b488:	7bbb      	ldrb	r3, [r7, #14]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d00d      	beq.n	800b4aa <USBD_StdEPReq+0x146>
 800b48e:	7bbb      	ldrb	r3, [r7, #14]
 800b490:	2b80      	cmp	r3, #128	@ 0x80
 800b492:	d00a      	beq.n	800b4aa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b494:	7bbb      	ldrb	r3, [r7, #14]
 800b496:	4619      	mov	r1, r3
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f001 f9ab 	bl	800c7f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b49e:	2180      	movs	r1, #128	@ 0x80
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f001 f9a7 	bl	800c7f4 <USBD_LL_StallEP>
 800b4a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b4a8:	e040      	b.n	800b52c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b4aa:	6839      	ldr	r1, [r7, #0]
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f000 fc40 	bl	800bd32 <USBD_CtlError>
              break;
 800b4b2:	e03b      	b.n	800b52c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	885b      	ldrh	r3, [r3, #2]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d136      	bne.n	800b52a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b4bc:	7bbb      	ldrb	r3, [r7, #14]
 800b4be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d004      	beq.n	800b4d0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b4c6:	7bbb      	ldrb	r3, [r7, #14]
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f001 f9b1 	bl	800c832 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f000 fd0c 	bl	800beee <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b4d6:	7bbb      	ldrb	r3, [r7, #14]
 800b4d8:	4619      	mov	r1, r3
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f7ff fde3 	bl	800b0a6 <USBD_CoreFindEP>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b4e4:	7b7b      	ldrb	r3, [r7, #13]
 800b4e6:	2bff      	cmp	r3, #255	@ 0xff
 800b4e8:	d01f      	beq.n	800b52a <USBD_StdEPReq+0x1c6>
 800b4ea:	7b7b      	ldrb	r3, [r7, #13]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d11c      	bne.n	800b52a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b4f0:	7b7a      	ldrb	r2, [r7, #13]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b4f8:	7b7a      	ldrb	r2, [r7, #13]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	32ae      	adds	r2, #174	@ 0xae
 800b4fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b502:	689b      	ldr	r3, [r3, #8]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d010      	beq.n	800b52a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b508:	7b7a      	ldrb	r2, [r7, #13]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	32ae      	adds	r2, #174	@ 0xae
 800b50e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b512:	689b      	ldr	r3, [r3, #8]
 800b514:	6839      	ldr	r1, [r7, #0]
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	4798      	blx	r3
 800b51a:	4603      	mov	r3, r0
 800b51c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b51e:	e004      	b.n	800b52a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b520:	6839      	ldr	r1, [r7, #0]
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 fc05 	bl	800bd32 <USBD_CtlError>
              break;
 800b528:	e000      	b.n	800b52c <USBD_StdEPReq+0x1c8>
              break;
 800b52a:	bf00      	nop
          }
          break;
 800b52c:	e0ad      	b.n	800b68a <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b534:	b2db      	uxtb	r3, r3
 800b536:	2b02      	cmp	r3, #2
 800b538:	d002      	beq.n	800b540 <USBD_StdEPReq+0x1dc>
 800b53a:	2b03      	cmp	r3, #3
 800b53c:	d033      	beq.n	800b5a6 <USBD_StdEPReq+0x242>
 800b53e:	e099      	b.n	800b674 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b540:	7bbb      	ldrb	r3, [r7, #14]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d007      	beq.n	800b556 <USBD_StdEPReq+0x1f2>
 800b546:	7bbb      	ldrb	r3, [r7, #14]
 800b548:	2b80      	cmp	r3, #128	@ 0x80
 800b54a:	d004      	beq.n	800b556 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b54c:	6839      	ldr	r1, [r7, #0]
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 fbef 	bl	800bd32 <USBD_CtlError>
                break;
 800b554:	e093      	b.n	800b67e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b556:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	da0b      	bge.n	800b576 <USBD_StdEPReq+0x212>
 800b55e:	7bbb      	ldrb	r3, [r7, #14]
 800b560:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b564:	4613      	mov	r3, r2
 800b566:	009b      	lsls	r3, r3, #2
 800b568:	4413      	add	r3, r2
 800b56a:	009b      	lsls	r3, r3, #2
 800b56c:	3310      	adds	r3, #16
 800b56e:	687a      	ldr	r2, [r7, #4]
 800b570:	4413      	add	r3, r2
 800b572:	3304      	adds	r3, #4
 800b574:	e00b      	b.n	800b58e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b576:	7bbb      	ldrb	r3, [r7, #14]
 800b578:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b57c:	4613      	mov	r3, r2
 800b57e:	009b      	lsls	r3, r3, #2
 800b580:	4413      	add	r3, r2
 800b582:	009b      	lsls	r3, r3, #2
 800b584:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b588:	687a      	ldr	r2, [r7, #4]
 800b58a:	4413      	add	r3, r2
 800b58c:	3304      	adds	r3, #4
 800b58e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	2200      	movs	r2, #0
 800b594:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	330e      	adds	r3, #14
 800b59a:	2202      	movs	r2, #2
 800b59c:	4619      	mov	r1, r3
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 fc44 	bl	800be2c <USBD_CtlSendData>
              break;
 800b5a4:	e06b      	b.n	800b67e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b5a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	da11      	bge.n	800b5d2 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b5ae:	7bbb      	ldrb	r3, [r7, #14]
 800b5b0:	f003 020f 	and.w	r2, r3, #15
 800b5b4:	6879      	ldr	r1, [r7, #4]
 800b5b6:	4613      	mov	r3, r2
 800b5b8:	009b      	lsls	r3, r3, #2
 800b5ba:	4413      	add	r3, r2
 800b5bc:	009b      	lsls	r3, r3, #2
 800b5be:	440b      	add	r3, r1
 800b5c0:	3323      	adds	r3, #35	@ 0x23
 800b5c2:	781b      	ldrb	r3, [r3, #0]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d117      	bne.n	800b5f8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800b5c8:	6839      	ldr	r1, [r7, #0]
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f000 fbb1 	bl	800bd32 <USBD_CtlError>
                  break;
 800b5d0:	e055      	b.n	800b67e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b5d2:	7bbb      	ldrb	r3, [r7, #14]
 800b5d4:	f003 020f 	and.w	r2, r3, #15
 800b5d8:	6879      	ldr	r1, [r7, #4]
 800b5da:	4613      	mov	r3, r2
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	4413      	add	r3, r2
 800b5e0:	009b      	lsls	r3, r3, #2
 800b5e2:	440b      	add	r3, r1
 800b5e4:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b5e8:	781b      	ldrb	r3, [r3, #0]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d104      	bne.n	800b5f8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800b5ee:	6839      	ldr	r1, [r7, #0]
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f000 fb9e 	bl	800bd32 <USBD_CtlError>
                  break;
 800b5f6:	e042      	b.n	800b67e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	da0b      	bge.n	800b618 <USBD_StdEPReq+0x2b4>
 800b600:	7bbb      	ldrb	r3, [r7, #14]
 800b602:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b606:	4613      	mov	r3, r2
 800b608:	009b      	lsls	r3, r3, #2
 800b60a:	4413      	add	r3, r2
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	3310      	adds	r3, #16
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	4413      	add	r3, r2
 800b614:	3304      	adds	r3, #4
 800b616:	e00b      	b.n	800b630 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b618:	7bbb      	ldrb	r3, [r7, #14]
 800b61a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b61e:	4613      	mov	r3, r2
 800b620:	009b      	lsls	r3, r3, #2
 800b622:	4413      	add	r3, r2
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b62a:	687a      	ldr	r2, [r7, #4]
 800b62c:	4413      	add	r3, r2
 800b62e:	3304      	adds	r3, #4
 800b630:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b632:	7bbb      	ldrb	r3, [r7, #14]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d002      	beq.n	800b63e <USBD_StdEPReq+0x2da>
 800b638:	7bbb      	ldrb	r3, [r7, #14]
 800b63a:	2b80      	cmp	r3, #128	@ 0x80
 800b63c:	d103      	bne.n	800b646 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	2200      	movs	r2, #0
 800b642:	739a      	strb	r2, [r3, #14]
 800b644:	e00e      	b.n	800b664 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b646:	7bbb      	ldrb	r3, [r7, #14]
 800b648:	4619      	mov	r1, r3
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f001 f910 	bl	800c870 <USBD_LL_IsStallEP>
 800b650:	4603      	mov	r3, r0
 800b652:	2b00      	cmp	r3, #0
 800b654:	d003      	beq.n	800b65e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	2201      	movs	r2, #1
 800b65a:	739a      	strb	r2, [r3, #14]
 800b65c:	e002      	b.n	800b664 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	2200      	movs	r2, #0
 800b662:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	330e      	adds	r3, #14
 800b668:	2202      	movs	r2, #2
 800b66a:	4619      	mov	r1, r3
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 fbdd 	bl	800be2c <USBD_CtlSendData>
              break;
 800b672:	e004      	b.n	800b67e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800b674:	6839      	ldr	r1, [r7, #0]
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f000 fb5b 	bl	800bd32 <USBD_CtlError>
              break;
 800b67c:	bf00      	nop
          }
          break;
 800b67e:	e004      	b.n	800b68a <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800b680:	6839      	ldr	r1, [r7, #0]
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 fb55 	bl	800bd32 <USBD_CtlError>
          break;
 800b688:	bf00      	nop
      }
      break;
 800b68a:	e005      	b.n	800b698 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800b68c:	6839      	ldr	r1, [r7, #0]
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f000 fb4f 	bl	800bd32 <USBD_CtlError>
      break;
 800b694:	e000      	b.n	800b698 <USBD_StdEPReq+0x334>
      break;
 800b696:	bf00      	nop
  }

  return ret;
 800b698:	7bfb      	ldrb	r3, [r7, #15]
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3710      	adds	r7, #16
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
	...

0800b6a4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b084      	sub	sp, #16
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	885b      	ldrh	r3, [r3, #2]
 800b6be:	0a1b      	lsrs	r3, r3, #8
 800b6c0:	b29b      	uxth	r3, r3
 800b6c2:	3b01      	subs	r3, #1
 800b6c4:	2b06      	cmp	r3, #6
 800b6c6:	f200 8128 	bhi.w	800b91a <USBD_GetDescriptor+0x276>
 800b6ca:	a201      	add	r2, pc, #4	@ (adr r2, 800b6d0 <USBD_GetDescriptor+0x2c>)
 800b6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6d0:	0800b6ed 	.word	0x0800b6ed
 800b6d4:	0800b705 	.word	0x0800b705
 800b6d8:	0800b745 	.word	0x0800b745
 800b6dc:	0800b91b 	.word	0x0800b91b
 800b6e0:	0800b91b 	.word	0x0800b91b
 800b6e4:	0800b8bb 	.word	0x0800b8bb
 800b6e8:	0800b8e7 	.word	0x0800b8e7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	687a      	ldr	r2, [r7, #4]
 800b6f6:	7c12      	ldrb	r2, [r2, #16]
 800b6f8:	f107 0108 	add.w	r1, r7, #8
 800b6fc:	4610      	mov	r0, r2
 800b6fe:	4798      	blx	r3
 800b700:	60f8      	str	r0, [r7, #12]
      break;
 800b702:	e112      	b.n	800b92a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	7c1b      	ldrb	r3, [r3, #16]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d10d      	bne.n	800b728 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b714:	f107 0208 	add.w	r2, r7, #8
 800b718:	4610      	mov	r0, r2
 800b71a:	4798      	blx	r3
 800b71c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	3301      	adds	r3, #1
 800b722:	2202      	movs	r2, #2
 800b724:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b726:	e100      	b.n	800b92a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b72e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b730:	f107 0208 	add.w	r2, r7, #8
 800b734:	4610      	mov	r0, r2
 800b736:	4798      	blx	r3
 800b738:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	3301      	adds	r3, #1
 800b73e:	2202      	movs	r2, #2
 800b740:	701a      	strb	r2, [r3, #0]
      break;
 800b742:	e0f2      	b.n	800b92a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	885b      	ldrh	r3, [r3, #2]
 800b748:	b2db      	uxtb	r3, r3
 800b74a:	2b05      	cmp	r3, #5
 800b74c:	f200 80ac 	bhi.w	800b8a8 <USBD_GetDescriptor+0x204>
 800b750:	a201      	add	r2, pc, #4	@ (adr r2, 800b758 <USBD_GetDescriptor+0xb4>)
 800b752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b756:	bf00      	nop
 800b758:	0800b771 	.word	0x0800b771
 800b75c:	0800b7a5 	.word	0x0800b7a5
 800b760:	0800b7d9 	.word	0x0800b7d9
 800b764:	0800b80d 	.word	0x0800b80d
 800b768:	0800b841 	.word	0x0800b841
 800b76c:	0800b875 	.word	0x0800b875
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d00b      	beq.n	800b794 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	7c12      	ldrb	r2, [r2, #16]
 800b788:	f107 0108 	add.w	r1, r7, #8
 800b78c:	4610      	mov	r0, r2
 800b78e:	4798      	blx	r3
 800b790:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b792:	e091      	b.n	800b8b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b794:	6839      	ldr	r1, [r7, #0]
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f000 facb 	bl	800bd32 <USBD_CtlError>
            err++;
 800b79c:	7afb      	ldrb	r3, [r7, #11]
 800b79e:	3301      	adds	r3, #1
 800b7a0:	72fb      	strb	r3, [r7, #11]
          break;
 800b7a2:	e089      	b.n	800b8b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7aa:	689b      	ldr	r3, [r3, #8]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d00b      	beq.n	800b7c8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7b6:	689b      	ldr	r3, [r3, #8]
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	7c12      	ldrb	r2, [r2, #16]
 800b7bc:	f107 0108 	add.w	r1, r7, #8
 800b7c0:	4610      	mov	r0, r2
 800b7c2:	4798      	blx	r3
 800b7c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7c6:	e077      	b.n	800b8b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7c8:	6839      	ldr	r1, [r7, #0]
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 fab1 	bl	800bd32 <USBD_CtlError>
            err++;
 800b7d0:	7afb      	ldrb	r3, [r7, #11]
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	72fb      	strb	r3, [r7, #11]
          break;
 800b7d6:	e06f      	b.n	800b8b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7de:	68db      	ldr	r3, [r3, #12]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d00b      	beq.n	800b7fc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7ea:	68db      	ldr	r3, [r3, #12]
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	7c12      	ldrb	r2, [r2, #16]
 800b7f0:	f107 0108 	add.w	r1, r7, #8
 800b7f4:	4610      	mov	r0, r2
 800b7f6:	4798      	blx	r3
 800b7f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7fa:	e05d      	b.n	800b8b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7fc:	6839      	ldr	r1, [r7, #0]
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 fa97 	bl	800bd32 <USBD_CtlError>
            err++;
 800b804:	7afb      	ldrb	r3, [r7, #11]
 800b806:	3301      	adds	r3, #1
 800b808:	72fb      	strb	r3, [r7, #11]
          break;
 800b80a:	e055      	b.n	800b8b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b812:	691b      	ldr	r3, [r3, #16]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d00b      	beq.n	800b830 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b81e:	691b      	ldr	r3, [r3, #16]
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	7c12      	ldrb	r2, [r2, #16]
 800b824:	f107 0108 	add.w	r1, r7, #8
 800b828:	4610      	mov	r0, r2
 800b82a:	4798      	blx	r3
 800b82c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b82e:	e043      	b.n	800b8b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b830:	6839      	ldr	r1, [r7, #0]
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f000 fa7d 	bl	800bd32 <USBD_CtlError>
            err++;
 800b838:	7afb      	ldrb	r3, [r7, #11]
 800b83a:	3301      	adds	r3, #1
 800b83c:	72fb      	strb	r3, [r7, #11]
          break;
 800b83e:	e03b      	b.n	800b8b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b846:	695b      	ldr	r3, [r3, #20]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d00b      	beq.n	800b864 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b852:	695b      	ldr	r3, [r3, #20]
 800b854:	687a      	ldr	r2, [r7, #4]
 800b856:	7c12      	ldrb	r2, [r2, #16]
 800b858:	f107 0108 	add.w	r1, r7, #8
 800b85c:	4610      	mov	r0, r2
 800b85e:	4798      	blx	r3
 800b860:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b862:	e029      	b.n	800b8b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b864:	6839      	ldr	r1, [r7, #0]
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 fa63 	bl	800bd32 <USBD_CtlError>
            err++;
 800b86c:	7afb      	ldrb	r3, [r7, #11]
 800b86e:	3301      	adds	r3, #1
 800b870:	72fb      	strb	r3, [r7, #11]
          break;
 800b872:	e021      	b.n	800b8b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b87a:	699b      	ldr	r3, [r3, #24]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d00b      	beq.n	800b898 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b886:	699b      	ldr	r3, [r3, #24]
 800b888:	687a      	ldr	r2, [r7, #4]
 800b88a:	7c12      	ldrb	r2, [r2, #16]
 800b88c:	f107 0108 	add.w	r1, r7, #8
 800b890:	4610      	mov	r0, r2
 800b892:	4798      	blx	r3
 800b894:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b896:	e00f      	b.n	800b8b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b898:	6839      	ldr	r1, [r7, #0]
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f000 fa49 	bl	800bd32 <USBD_CtlError>
            err++;
 800b8a0:	7afb      	ldrb	r3, [r7, #11]
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	72fb      	strb	r3, [r7, #11]
          break;
 800b8a6:	e007      	b.n	800b8b8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b8a8:	6839      	ldr	r1, [r7, #0]
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 fa41 	bl	800bd32 <USBD_CtlError>
          err++;
 800b8b0:	7afb      	ldrb	r3, [r7, #11]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b8b6:	bf00      	nop
      }
      break;
 800b8b8:	e037      	b.n	800b92a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	7c1b      	ldrb	r3, [r3, #16]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d109      	bne.n	800b8d6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8ca:	f107 0208 	add.w	r2, r7, #8
 800b8ce:	4610      	mov	r0, r2
 800b8d0:	4798      	blx	r3
 800b8d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b8d4:	e029      	b.n	800b92a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b8d6:	6839      	ldr	r1, [r7, #0]
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f000 fa2a 	bl	800bd32 <USBD_CtlError>
        err++;
 800b8de:	7afb      	ldrb	r3, [r7, #11]
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	72fb      	strb	r3, [r7, #11]
      break;
 800b8e4:	e021      	b.n	800b92a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	7c1b      	ldrb	r3, [r3, #16]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d10d      	bne.n	800b90a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8f6:	f107 0208 	add.w	r2, r7, #8
 800b8fa:	4610      	mov	r0, r2
 800b8fc:	4798      	blx	r3
 800b8fe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	3301      	adds	r3, #1
 800b904:	2207      	movs	r2, #7
 800b906:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b908:	e00f      	b.n	800b92a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b90a:	6839      	ldr	r1, [r7, #0]
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f000 fa10 	bl	800bd32 <USBD_CtlError>
        err++;
 800b912:	7afb      	ldrb	r3, [r7, #11]
 800b914:	3301      	adds	r3, #1
 800b916:	72fb      	strb	r3, [r7, #11]
      break;
 800b918:	e007      	b.n	800b92a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b91a:	6839      	ldr	r1, [r7, #0]
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f000 fa08 	bl	800bd32 <USBD_CtlError>
      err++;
 800b922:	7afb      	ldrb	r3, [r7, #11]
 800b924:	3301      	adds	r3, #1
 800b926:	72fb      	strb	r3, [r7, #11]
      break;
 800b928:	bf00      	nop
  }

  if (err != 0U)
 800b92a:	7afb      	ldrb	r3, [r7, #11]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d11e      	bne.n	800b96e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	88db      	ldrh	r3, [r3, #6]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d016      	beq.n	800b966 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b938:	893b      	ldrh	r3, [r7, #8]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d00e      	beq.n	800b95c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	88da      	ldrh	r2, [r3, #6]
 800b942:	893b      	ldrh	r3, [r7, #8]
 800b944:	4293      	cmp	r3, r2
 800b946:	bf28      	it	cs
 800b948:	4613      	movcs	r3, r2
 800b94a:	b29b      	uxth	r3, r3
 800b94c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b94e:	893b      	ldrh	r3, [r7, #8]
 800b950:	461a      	mov	r2, r3
 800b952:	68f9      	ldr	r1, [r7, #12]
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f000 fa69 	bl	800be2c <USBD_CtlSendData>
 800b95a:	e009      	b.n	800b970 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b95c:	6839      	ldr	r1, [r7, #0]
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f000 f9e7 	bl	800bd32 <USBD_CtlError>
 800b964:	e004      	b.n	800b970 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f000 fac1 	bl	800beee <USBD_CtlSendStatus>
 800b96c:	e000      	b.n	800b970 <USBD_GetDescriptor+0x2cc>
    return;
 800b96e:	bf00      	nop
  }
}
 800b970:	3710      	adds	r7, #16
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}
 800b976:	bf00      	nop

0800b978 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b084      	sub	sp, #16
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	889b      	ldrh	r3, [r3, #4]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d131      	bne.n	800b9ee <USBD_SetAddress+0x76>
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	88db      	ldrh	r3, [r3, #6]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d12d      	bne.n	800b9ee <USBD_SetAddress+0x76>
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	885b      	ldrh	r3, [r3, #2]
 800b996:	2b7f      	cmp	r3, #127	@ 0x7f
 800b998:	d829      	bhi.n	800b9ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	885b      	ldrh	r3, [r3, #2]
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9ac:	b2db      	uxtb	r3, r3
 800b9ae:	2b03      	cmp	r3, #3
 800b9b0:	d104      	bne.n	800b9bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b9b2:	6839      	ldr	r1, [r7, #0]
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f000 f9bc 	bl	800bd32 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9ba:	e01d      	b.n	800b9f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	7bfa      	ldrb	r2, [r7, #15]
 800b9c0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b9c4:	7bfb      	ldrb	r3, [r7, #15]
 800b9c6:	4619      	mov	r1, r3
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f000 ff7d 	bl	800c8c8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 fa8d 	bl	800beee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b9d4:	7bfb      	ldrb	r3, [r7, #15]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d004      	beq.n	800b9e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2202      	movs	r2, #2
 800b9de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9e2:	e009      	b.n	800b9f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9ec:	e004      	b.n	800b9f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b9ee:	6839      	ldr	r1, [r7, #0]
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 f99e 	bl	800bd32 <USBD_CtlError>
  }
}
 800b9f6:	bf00      	nop
 800b9f8:	bf00      	nop
 800b9fa:	3710      	adds	r7, #16
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b084      	sub	sp, #16
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	885b      	ldrh	r3, [r3, #2]
 800ba12:	b2da      	uxtb	r2, r3
 800ba14:	4b4e      	ldr	r3, [pc, #312]	@ (800bb50 <USBD_SetConfig+0x150>)
 800ba16:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ba18:	4b4d      	ldr	r3, [pc, #308]	@ (800bb50 <USBD_SetConfig+0x150>)
 800ba1a:	781b      	ldrb	r3, [r3, #0]
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	d905      	bls.n	800ba2c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ba20:	6839      	ldr	r1, [r7, #0]
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 f985 	bl	800bd32 <USBD_CtlError>
    return USBD_FAIL;
 800ba28:	2303      	movs	r3, #3
 800ba2a:	e08c      	b.n	800bb46 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	2b02      	cmp	r3, #2
 800ba36:	d002      	beq.n	800ba3e <USBD_SetConfig+0x3e>
 800ba38:	2b03      	cmp	r3, #3
 800ba3a:	d029      	beq.n	800ba90 <USBD_SetConfig+0x90>
 800ba3c:	e075      	b.n	800bb2a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ba3e:	4b44      	ldr	r3, [pc, #272]	@ (800bb50 <USBD_SetConfig+0x150>)
 800ba40:	781b      	ldrb	r3, [r3, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d020      	beq.n	800ba88 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ba46:	4b42      	ldr	r3, [pc, #264]	@ (800bb50 <USBD_SetConfig+0x150>)
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ba50:	4b3f      	ldr	r3, [pc, #252]	@ (800bb50 <USBD_SetConfig+0x150>)
 800ba52:	781b      	ldrb	r3, [r3, #0]
 800ba54:	4619      	mov	r1, r3
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f7fe ffcd 	bl	800a9f6 <USBD_SetClassConfig>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ba60:	7bfb      	ldrb	r3, [r7, #15]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d008      	beq.n	800ba78 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ba66:	6839      	ldr	r1, [r7, #0]
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f000 f962 	bl	800bd32 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2202      	movs	r2, #2
 800ba72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ba76:	e065      	b.n	800bb44 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f000 fa38 	bl	800beee <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2203      	movs	r2, #3
 800ba82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ba86:	e05d      	b.n	800bb44 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f000 fa30 	bl	800beee <USBD_CtlSendStatus>
      break;
 800ba8e:	e059      	b.n	800bb44 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ba90:	4b2f      	ldr	r3, [pc, #188]	@ (800bb50 <USBD_SetConfig+0x150>)
 800ba92:	781b      	ldrb	r3, [r3, #0]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d112      	bne.n	800babe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2202      	movs	r2, #2
 800ba9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800baa0:	4b2b      	ldr	r3, [pc, #172]	@ (800bb50 <USBD_SetConfig+0x150>)
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	461a      	mov	r2, r3
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800baaa:	4b29      	ldr	r3, [pc, #164]	@ (800bb50 <USBD_SetConfig+0x150>)
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	4619      	mov	r1, r3
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f7fe ffbc 	bl	800aa2e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 fa19 	bl	800beee <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800babc:	e042      	b.n	800bb44 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800babe:	4b24      	ldr	r3, [pc, #144]	@ (800bb50 <USBD_SetConfig+0x150>)
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	461a      	mov	r2, r3
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	685b      	ldr	r3, [r3, #4]
 800bac8:	429a      	cmp	r2, r3
 800baca:	d02a      	beq.n	800bb22 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	b2db      	uxtb	r3, r3
 800bad2:	4619      	mov	r1, r3
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f7fe ffaa 	bl	800aa2e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bada:	4b1d      	ldr	r3, [pc, #116]	@ (800bb50 <USBD_SetConfig+0x150>)
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	461a      	mov	r2, r3
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bae4:	4b1a      	ldr	r3, [pc, #104]	@ (800bb50 <USBD_SetConfig+0x150>)
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	4619      	mov	r1, r3
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f7fe ff83 	bl	800a9f6 <USBD_SetClassConfig>
 800baf0:	4603      	mov	r3, r0
 800baf2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800baf4:	7bfb      	ldrb	r3, [r7, #15]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d00f      	beq.n	800bb1a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bafa:	6839      	ldr	r1, [r7, #0]
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f000 f918 	bl	800bd32 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	685b      	ldr	r3, [r3, #4]
 800bb06:	b2db      	uxtb	r3, r3
 800bb08:	4619      	mov	r1, r3
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f7fe ff8f 	bl	800aa2e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2202      	movs	r2, #2
 800bb14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bb18:	e014      	b.n	800bb44 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f000 f9e7 	bl	800beee <USBD_CtlSendStatus>
      break;
 800bb20:	e010      	b.n	800bb44 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 f9e3 	bl	800beee <USBD_CtlSendStatus>
      break;
 800bb28:	e00c      	b.n	800bb44 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bb2a:	6839      	ldr	r1, [r7, #0]
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f000 f900 	bl	800bd32 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bb32:	4b07      	ldr	r3, [pc, #28]	@ (800bb50 <USBD_SetConfig+0x150>)
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	4619      	mov	r1, r3
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f7fe ff78 	bl	800aa2e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bb3e:	2303      	movs	r3, #3
 800bb40:	73fb      	strb	r3, [r7, #15]
      break;
 800bb42:	bf00      	nop
  }

  return ret;
 800bb44:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3710      	adds	r7, #16
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	200006cc 	.word	0x200006cc

0800bb54 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b082      	sub	sp, #8
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	88db      	ldrh	r3, [r3, #6]
 800bb62:	2b01      	cmp	r3, #1
 800bb64:	d004      	beq.n	800bb70 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bb66:	6839      	ldr	r1, [r7, #0]
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 f8e2 	bl	800bd32 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bb6e:	e023      	b.n	800bbb8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb76:	b2db      	uxtb	r3, r3
 800bb78:	2b02      	cmp	r3, #2
 800bb7a:	dc02      	bgt.n	800bb82 <USBD_GetConfig+0x2e>
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	dc03      	bgt.n	800bb88 <USBD_GetConfig+0x34>
 800bb80:	e015      	b.n	800bbae <USBD_GetConfig+0x5a>
 800bb82:	2b03      	cmp	r3, #3
 800bb84:	d00b      	beq.n	800bb9e <USBD_GetConfig+0x4a>
 800bb86:	e012      	b.n	800bbae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	3308      	adds	r3, #8
 800bb92:	2201      	movs	r2, #1
 800bb94:	4619      	mov	r1, r3
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 f948 	bl	800be2c <USBD_CtlSendData>
        break;
 800bb9c:	e00c      	b.n	800bbb8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	3304      	adds	r3, #4
 800bba2:	2201      	movs	r2, #1
 800bba4:	4619      	mov	r1, r3
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f000 f940 	bl	800be2c <USBD_CtlSendData>
        break;
 800bbac:	e004      	b.n	800bbb8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bbae:	6839      	ldr	r1, [r7, #0]
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f000 f8be 	bl	800bd32 <USBD_CtlError>
        break;
 800bbb6:	bf00      	nop
}
 800bbb8:	bf00      	nop
 800bbba:	3708      	adds	r7, #8
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}

0800bbc0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbd0:	b2db      	uxtb	r3, r3
 800bbd2:	3b01      	subs	r3, #1
 800bbd4:	2b02      	cmp	r3, #2
 800bbd6:	d81e      	bhi.n	800bc16 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	88db      	ldrh	r3, [r3, #6]
 800bbdc:	2b02      	cmp	r3, #2
 800bbde:	d004      	beq.n	800bbea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bbe0:	6839      	ldr	r1, [r7, #0]
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f000 f8a5 	bl	800bd32 <USBD_CtlError>
        break;
 800bbe8:	e01a      	b.n	800bc20 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2201      	movs	r2, #1
 800bbee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d005      	beq.n	800bc06 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	68db      	ldr	r3, [r3, #12]
 800bbfe:	f043 0202 	orr.w	r2, r3, #2
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	330c      	adds	r3, #12
 800bc0a:	2202      	movs	r2, #2
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f000 f90c 	bl	800be2c <USBD_CtlSendData>
      break;
 800bc14:	e004      	b.n	800bc20 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bc16:	6839      	ldr	r1, [r7, #0]
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f000 f88a 	bl	800bd32 <USBD_CtlError>
      break;
 800bc1e:	bf00      	nop
  }
}
 800bc20:	bf00      	nop
 800bc22:	3708      	adds	r7, #8
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	885b      	ldrh	r3, [r3, #2]
 800bc36:	2b01      	cmp	r3, #1
 800bc38:	d107      	bne.n	800bc4a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2201      	movs	r2, #1
 800bc3e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f000 f953 	bl	800beee <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bc48:	e013      	b.n	800bc72 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	885b      	ldrh	r3, [r3, #2]
 800bc4e:	2b02      	cmp	r3, #2
 800bc50:	d10b      	bne.n	800bc6a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	889b      	ldrh	r3, [r3, #4]
 800bc56:	0a1b      	lsrs	r3, r3, #8
 800bc58:	b29b      	uxth	r3, r3
 800bc5a:	b2da      	uxtb	r2, r3
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f000 f943 	bl	800beee <USBD_CtlSendStatus>
}
 800bc68:	e003      	b.n	800bc72 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bc6a:	6839      	ldr	r1, [r7, #0]
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f000 f860 	bl	800bd32 <USBD_CtlError>
}
 800bc72:	bf00      	nop
 800bc74:	3708      	adds	r7, #8
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}

0800bc7a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc7a:	b580      	push	{r7, lr}
 800bc7c:	b082      	sub	sp, #8
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
 800bc82:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	3b01      	subs	r3, #1
 800bc8e:	2b02      	cmp	r3, #2
 800bc90:	d80b      	bhi.n	800bcaa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	885b      	ldrh	r3, [r3, #2]
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	d10c      	bne.n	800bcb4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f000 f923 	bl	800beee <USBD_CtlSendStatus>
      }
      break;
 800bca8:	e004      	b.n	800bcb4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bcaa:	6839      	ldr	r1, [r7, #0]
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f000 f840 	bl	800bd32 <USBD_CtlError>
      break;
 800bcb2:	e000      	b.n	800bcb6 <USBD_ClrFeature+0x3c>
      break;
 800bcb4:	bf00      	nop
  }
}
 800bcb6:	bf00      	nop
 800bcb8:	3708      	adds	r7, #8
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}

0800bcbe <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bcbe:	b580      	push	{r7, lr}
 800bcc0:	b084      	sub	sp, #16
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]
 800bcc6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	781a      	ldrb	r2, [r3, #0]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	781a      	ldrb	r2, [r3, #0]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	3301      	adds	r3, #1
 800bce6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bce8:	68f8      	ldr	r0, [r7, #12]
 800bcea:	f7ff fa3d 	bl	800b168 <SWAPBYTE>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bd02:	68f8      	ldr	r0, [r7, #12]
 800bd04:	f7ff fa30 	bl	800b168 <SWAPBYTE>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	3301      	adds	r3, #1
 800bd14:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	3301      	adds	r3, #1
 800bd1a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bd1c:	68f8      	ldr	r0, [r7, #12]
 800bd1e:	f7ff fa23 	bl	800b168 <SWAPBYTE>
 800bd22:	4603      	mov	r3, r0
 800bd24:	461a      	mov	r2, r3
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	80da      	strh	r2, [r3, #6]
}
 800bd2a:	bf00      	nop
 800bd2c:	3710      	adds	r7, #16
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b082      	sub	sp, #8
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	6078      	str	r0, [r7, #4]
 800bd3a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd3c:	2180      	movs	r1, #128	@ 0x80
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f000 fd58 	bl	800c7f4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bd44:	2100      	movs	r1, #0
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f000 fd54 	bl	800c7f4 <USBD_LL_StallEP>
}
 800bd4c:	bf00      	nop
 800bd4e:	3708      	adds	r7, #8
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b086      	sub	sp, #24
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	60f8      	str	r0, [r7, #12]
 800bd5c:	60b9      	str	r1, [r7, #8]
 800bd5e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bd60:	2300      	movs	r3, #0
 800bd62:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d042      	beq.n	800bdf0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800bd6e:	6938      	ldr	r0, [r7, #16]
 800bd70:	f000 f842 	bl	800bdf8 <USBD_GetLen>
 800bd74:	4603      	mov	r3, r0
 800bd76:	3301      	adds	r3, #1
 800bd78:	005b      	lsls	r3, r3, #1
 800bd7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd7e:	d808      	bhi.n	800bd92 <USBD_GetString+0x3e>
 800bd80:	6938      	ldr	r0, [r7, #16]
 800bd82:	f000 f839 	bl	800bdf8 <USBD_GetLen>
 800bd86:	4603      	mov	r3, r0
 800bd88:	3301      	adds	r3, #1
 800bd8a:	b29b      	uxth	r3, r3
 800bd8c:	005b      	lsls	r3, r3, #1
 800bd8e:	b29a      	uxth	r2, r3
 800bd90:	e001      	b.n	800bd96 <USBD_GetString+0x42>
 800bd92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bd9a:	7dfb      	ldrb	r3, [r7, #23]
 800bd9c:	68ba      	ldr	r2, [r7, #8]
 800bd9e:	4413      	add	r3, r2
 800bda0:	687a      	ldr	r2, [r7, #4]
 800bda2:	7812      	ldrb	r2, [r2, #0]
 800bda4:	701a      	strb	r2, [r3, #0]
  idx++;
 800bda6:	7dfb      	ldrb	r3, [r7, #23]
 800bda8:	3301      	adds	r3, #1
 800bdaa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bdac:	7dfb      	ldrb	r3, [r7, #23]
 800bdae:	68ba      	ldr	r2, [r7, #8]
 800bdb0:	4413      	add	r3, r2
 800bdb2:	2203      	movs	r2, #3
 800bdb4:	701a      	strb	r2, [r3, #0]
  idx++;
 800bdb6:	7dfb      	ldrb	r3, [r7, #23]
 800bdb8:	3301      	adds	r3, #1
 800bdba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bdbc:	e013      	b.n	800bde6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800bdbe:	7dfb      	ldrb	r3, [r7, #23]
 800bdc0:	68ba      	ldr	r2, [r7, #8]
 800bdc2:	4413      	add	r3, r2
 800bdc4:	693a      	ldr	r2, [r7, #16]
 800bdc6:	7812      	ldrb	r2, [r2, #0]
 800bdc8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	3301      	adds	r3, #1
 800bdce:	613b      	str	r3, [r7, #16]
    idx++;
 800bdd0:	7dfb      	ldrb	r3, [r7, #23]
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bdd6:	7dfb      	ldrb	r3, [r7, #23]
 800bdd8:	68ba      	ldr	r2, [r7, #8]
 800bdda:	4413      	add	r3, r2
 800bddc:	2200      	movs	r2, #0
 800bdde:	701a      	strb	r2, [r3, #0]
    idx++;
 800bde0:	7dfb      	ldrb	r3, [r7, #23]
 800bde2:	3301      	adds	r3, #1
 800bde4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	781b      	ldrb	r3, [r3, #0]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d1e7      	bne.n	800bdbe <USBD_GetString+0x6a>
 800bdee:	e000      	b.n	800bdf2 <USBD_GetString+0x9e>
    return;
 800bdf0:	bf00      	nop
  }
}
 800bdf2:	3718      	adds	r7, #24
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}

0800bdf8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b085      	sub	sp, #20
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800be00:	2300      	movs	r3, #0
 800be02:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800be08:	e005      	b.n	800be16 <USBD_GetLen+0x1e>
  {
    len++;
 800be0a:	7bfb      	ldrb	r3, [r7, #15]
 800be0c:	3301      	adds	r3, #1
 800be0e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	3301      	adds	r3, #1
 800be14:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	781b      	ldrb	r3, [r3, #0]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d1f5      	bne.n	800be0a <USBD_GetLen+0x12>
  }

  return len;
 800be1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800be20:	4618      	mov	r0, r3
 800be22:	3714      	adds	r7, #20
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr

0800be2c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b084      	sub	sp, #16
 800be30:	af00      	add	r7, sp, #0
 800be32:	60f8      	str	r0, [r7, #12]
 800be34:	60b9      	str	r1, [r7, #8]
 800be36:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2202      	movs	r2, #2
 800be3c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	687a      	ldr	r2, [r7, #4]
 800be44:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	68ba      	ldr	r2, [r7, #8]
 800be4a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	687a      	ldr	r2, [r7, #4]
 800be50:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	68ba      	ldr	r2, [r7, #8]
 800be56:	2100      	movs	r1, #0
 800be58:	68f8      	ldr	r0, [r7, #12]
 800be5a:	f000 fd54 	bl	800c906 <USBD_LL_Transmit>

  return USBD_OK;
 800be5e:	2300      	movs	r3, #0
}
 800be60:	4618      	mov	r0, r3
 800be62:	3710      	adds	r7, #16
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}

0800be68 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b084      	sub	sp, #16
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	60f8      	str	r0, [r7, #12]
 800be70:	60b9      	str	r1, [r7, #8]
 800be72:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	68ba      	ldr	r2, [r7, #8]
 800be78:	2100      	movs	r1, #0
 800be7a:	68f8      	ldr	r0, [r7, #12]
 800be7c:	f000 fd43 	bl	800c906 <USBD_LL_Transmit>

  return USBD_OK;
 800be80:	2300      	movs	r3, #0
}
 800be82:	4618      	mov	r0, r3
 800be84:	3710      	adds	r7, #16
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}

0800be8a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800be8a:	b580      	push	{r7, lr}
 800be8c:	b084      	sub	sp, #16
 800be8e:	af00      	add	r7, sp, #0
 800be90:	60f8      	str	r0, [r7, #12]
 800be92:	60b9      	str	r1, [r7, #8]
 800be94:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2203      	movs	r2, #3
 800be9a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	687a      	ldr	r2, [r7, #4]
 800bea2:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	68ba      	ldr	r2, [r7, #8]
 800beaa:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	68ba      	ldr	r2, [r7, #8]
 800beba:	2100      	movs	r1, #0
 800bebc:	68f8      	ldr	r0, [r7, #12]
 800bebe:	f000 fd43 	bl	800c948 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bec2:	2300      	movs	r3, #0
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3710      	adds	r7, #16
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}

0800becc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b084      	sub	sp, #16
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	60b9      	str	r1, [r7, #8]
 800bed6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	68ba      	ldr	r2, [r7, #8]
 800bedc:	2100      	movs	r1, #0
 800bede:	68f8      	ldr	r0, [r7, #12]
 800bee0:	f000 fd32 	bl	800c948 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bee4:	2300      	movs	r3, #0
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3710      	adds	r7, #16
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}

0800beee <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800beee:	b580      	push	{r7, lr}
 800bef0:	b082      	sub	sp, #8
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2204      	movs	r2, #4
 800befa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800befe:	2300      	movs	r3, #0
 800bf00:	2200      	movs	r2, #0
 800bf02:	2100      	movs	r1, #0
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f000 fcfe 	bl	800c906 <USBD_LL_Transmit>

  return USBD_OK;
 800bf0a:	2300      	movs	r3, #0
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3708      	adds	r7, #8
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2205      	movs	r2, #5
 800bf20:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf24:	2300      	movs	r3, #0
 800bf26:	2200      	movs	r2, #0
 800bf28:	2100      	movs	r1, #0
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f000 fd0c 	bl	800c948 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf30:	2300      	movs	r3, #0
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3708      	adds	r7, #8
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
	...

0800bf3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bf40:	2200      	movs	r2, #0
 800bf42:	4912      	ldr	r1, [pc, #72]	@ (800bf8c <MX_USB_DEVICE_Init+0x50>)
 800bf44:	4812      	ldr	r0, [pc, #72]	@ (800bf90 <MX_USB_DEVICE_Init+0x54>)
 800bf46:	f7fe fcd9 	bl	800a8fc <USBD_Init>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d001      	beq.n	800bf54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bf50:	f7f6 f80e 	bl	8001f70 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bf54:	490f      	ldr	r1, [pc, #60]	@ (800bf94 <MX_USB_DEVICE_Init+0x58>)
 800bf56:	480e      	ldr	r0, [pc, #56]	@ (800bf90 <MX_USB_DEVICE_Init+0x54>)
 800bf58:	f7fe fd00 	bl	800a95c <USBD_RegisterClass>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d001      	beq.n	800bf66 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bf62:	f7f6 f805 	bl	8001f70 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bf66:	490c      	ldr	r1, [pc, #48]	@ (800bf98 <MX_USB_DEVICE_Init+0x5c>)
 800bf68:	4809      	ldr	r0, [pc, #36]	@ (800bf90 <MX_USB_DEVICE_Init+0x54>)
 800bf6a:	f7fe fbf7 	bl	800a75c <USBD_CDC_RegisterInterface>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d001      	beq.n	800bf78 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bf74:	f7f5 fffc 	bl	8001f70 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bf78:	4805      	ldr	r0, [pc, #20]	@ (800bf90 <MX_USB_DEVICE_Init+0x54>)
 800bf7a:	f7fe fd25 	bl	800a9c8 <USBD_Start>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d001      	beq.n	800bf88 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bf84:	f7f5 fff4 	bl	8001f70 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bf88:	bf00      	nop
 800bf8a:	bd80      	pop	{r7, pc}
 800bf8c:	200000b4 	.word	0x200000b4
 800bf90:	200006d0 	.word	0x200006d0
 800bf94:	20000018 	.word	0x20000018
 800bf98:	200000a0 	.word	0x200000a0

0800bf9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	4905      	ldr	r1, [pc, #20]	@ (800bfb8 <CDC_Init_FS+0x1c>)
 800bfa4:	4805      	ldr	r0, [pc, #20]	@ (800bfbc <CDC_Init_FS+0x20>)
 800bfa6:	f7fe fbf3 	bl	800a790 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bfaa:	4905      	ldr	r1, [pc, #20]	@ (800bfc0 <CDC_Init_FS+0x24>)
 800bfac:	4803      	ldr	r0, [pc, #12]	@ (800bfbc <CDC_Init_FS+0x20>)
 800bfae:	f7fe fc11 	bl	800a7d4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bfb2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	bd80      	pop	{r7, pc}
 800bfb8:	20000bac 	.word	0x20000bac
 800bfbc:	200006d0 	.word	0x200006d0
 800bfc0:	200009ac 	.word	0x200009ac

0800bfc4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bfc8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr

0800bfd4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b083      	sub	sp, #12
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	4603      	mov	r3, r0
 800bfdc:	6039      	str	r1, [r7, #0]
 800bfde:	71fb      	strb	r3, [r7, #7]
 800bfe0:	4613      	mov	r3, r2
 800bfe2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bfe4:	79fb      	ldrb	r3, [r7, #7]
 800bfe6:	2b23      	cmp	r3, #35	@ 0x23
 800bfe8:	f200 8098 	bhi.w	800c11c <CDC_Control_FS+0x148>
 800bfec:	a201      	add	r2, pc, #4	@ (adr r2, 800bff4 <CDC_Control_FS+0x20>)
 800bfee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff2:	bf00      	nop
 800bff4:	0800c11d 	.word	0x0800c11d
 800bff8:	0800c11d 	.word	0x0800c11d
 800bffc:	0800c11d 	.word	0x0800c11d
 800c000:	0800c11d 	.word	0x0800c11d
 800c004:	0800c11d 	.word	0x0800c11d
 800c008:	0800c11d 	.word	0x0800c11d
 800c00c:	0800c11d 	.word	0x0800c11d
 800c010:	0800c11d 	.word	0x0800c11d
 800c014:	0800c11d 	.word	0x0800c11d
 800c018:	0800c11d 	.word	0x0800c11d
 800c01c:	0800c11d 	.word	0x0800c11d
 800c020:	0800c11d 	.word	0x0800c11d
 800c024:	0800c11d 	.word	0x0800c11d
 800c028:	0800c11d 	.word	0x0800c11d
 800c02c:	0800c11d 	.word	0x0800c11d
 800c030:	0800c11d 	.word	0x0800c11d
 800c034:	0800c11d 	.word	0x0800c11d
 800c038:	0800c11d 	.word	0x0800c11d
 800c03c:	0800c11d 	.word	0x0800c11d
 800c040:	0800c11d 	.word	0x0800c11d
 800c044:	0800c11d 	.word	0x0800c11d
 800c048:	0800c11d 	.word	0x0800c11d
 800c04c:	0800c11d 	.word	0x0800c11d
 800c050:	0800c11d 	.word	0x0800c11d
 800c054:	0800c11d 	.word	0x0800c11d
 800c058:	0800c11d 	.word	0x0800c11d
 800c05c:	0800c11d 	.word	0x0800c11d
 800c060:	0800c11d 	.word	0x0800c11d
 800c064:	0800c11d 	.word	0x0800c11d
 800c068:	0800c11d 	.word	0x0800c11d
 800c06c:	0800c11d 	.word	0x0800c11d
 800c070:	0800c11d 	.word	0x0800c11d
 800c074:	0800c085 	.word	0x0800c085
 800c078:	0800c0c9 	.word	0x0800c0c9
 800c07c:	0800c11d 	.word	0x0800c11d
 800c080:	0800c11d 	.word	0x0800c11d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
     	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2]<<16) | (pbuf[3]<<24));
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	781b      	ldrb	r3, [r3, #0]
 800c088:	461a      	mov	r2, r3
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	3301      	adds	r3, #1
 800c08e:	781b      	ldrb	r3, [r3, #0]
 800c090:	021b      	lsls	r3, r3, #8
 800c092:	431a      	orrs	r2, r3
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	3302      	adds	r3, #2
 800c098:	781b      	ldrb	r3, [r3, #0]
 800c09a:	041b      	lsls	r3, r3, #16
 800c09c:	431a      	orrs	r2, r3
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	3303      	adds	r3, #3
 800c0a2:	781b      	ldrb	r3, [r3, #0]
 800c0a4:	061b      	lsls	r3, r3, #24
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	4b20      	ldr	r3, [pc, #128]	@ (800c12c <CDC_Control_FS+0x158>)
 800c0ac:	601a      	str	r2, [r3, #0]
     	LineCoding.format = pbuf[4];
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	791a      	ldrb	r2, [r3, #4]
 800c0b2:	4b1e      	ldr	r3, [pc, #120]	@ (800c12c <CDC_Control_FS+0x158>)
 800c0b4:	711a      	strb	r2, [r3, #4]
     	LineCoding.paritytype = pbuf[5];
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	795a      	ldrb	r2, [r3, #5]
 800c0ba:	4b1c      	ldr	r3, [pc, #112]	@ (800c12c <CDC_Control_FS+0x158>)
 800c0bc:	715a      	strb	r2, [r3, #5]
     	LineCoding.datatype = pbuf[6];
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	799a      	ldrb	r2, [r3, #6]
 800c0c2:	4b1a      	ldr	r3, [pc, #104]	@ (800c12c <CDC_Control_FS+0x158>)
 800c0c4:	719a      	strb	r2, [r3, #6]
     break;
 800c0c6:	e02a      	b.n	800c11e <CDC_Control_FS+0x14a>

     case CDC_GET_LINE_CODING:
     	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800c0c8:	4b18      	ldr	r3, [pc, #96]	@ (800c12c <CDC_Control_FS+0x158>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	b2da      	uxtb	r2, r3
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	701a      	strb	r2, [r3, #0]
     	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800c0d2:	4b16      	ldr	r3, [pc, #88]	@ (800c12c <CDC_Control_FS+0x158>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	0a1a      	lsrs	r2, r3, #8
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	3301      	adds	r3, #1
 800c0dc:	b2d2      	uxtb	r2, r2
 800c0de:	701a      	strb	r2, [r3, #0]
     	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800c0e0:	4b12      	ldr	r3, [pc, #72]	@ (800c12c <CDC_Control_FS+0x158>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	0c1a      	lsrs	r2, r3, #16
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	3302      	adds	r3, #2
 800c0ea:	b2d2      	uxtb	r2, r2
 800c0ec:	701a      	strb	r2, [r3, #0]
     	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800c0ee:	4b0f      	ldr	r3, [pc, #60]	@ (800c12c <CDC_Control_FS+0x158>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	0e1a      	lsrs	r2, r3, #24
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	3303      	adds	r3, #3
 800c0f8:	b2d2      	uxtb	r2, r2
 800c0fa:	701a      	strb	r2, [r3, #0]
     	pbuf[4] = LineCoding.format;
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	3304      	adds	r3, #4
 800c100:	4a0a      	ldr	r2, [pc, #40]	@ (800c12c <CDC_Control_FS+0x158>)
 800c102:	7912      	ldrb	r2, [r2, #4]
 800c104:	701a      	strb	r2, [r3, #0]
     	pbuf[5] = LineCoding.paritytype;
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	3305      	adds	r3, #5
 800c10a:	4a08      	ldr	r2, [pc, #32]	@ (800c12c <CDC_Control_FS+0x158>)
 800c10c:	7952      	ldrb	r2, [r2, #5]
 800c10e:	701a      	strb	r2, [r3, #0]
     	pbuf[6] = LineCoding.datatype;
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	3306      	adds	r3, #6
 800c114:	4a05      	ldr	r2, [pc, #20]	@ (800c12c <CDC_Control_FS+0x158>)
 800c116:	7992      	ldrb	r2, [r2, #6]
 800c118:	701a      	strb	r2, [r3, #0]
     break;
 800c11a:	e000      	b.n	800c11e <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c11c:	bf00      	nop
  }

  return (USBD_OK);
 800c11e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c120:	4618      	mov	r0, r3
 800c122:	370c      	adds	r7, #12
 800c124:	46bd      	mov	sp, r7
 800c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12a:	4770      	bx	lr
 800c12c:	20000098 	.word	0x20000098

0800c130 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b082      	sub	sp, #8
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 if(aPtrFunRx != NULL)
 800c13a:	4b0c      	ldr	r3, [pc, #48]	@ (800c16c <CDC_Receive_FS+0x3c>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d007      	beq.n	800c152 <CDC_Receive_FS+0x22>
			aPtrFunRx(Buf, *Len);
 800c142:	4b0a      	ldr	r3, [pc, #40]	@ (800c16c <CDC_Receive_FS+0x3c>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	683a      	ldr	r2, [r7, #0]
 800c148:	6812      	ldr	r2, [r2, #0]
 800c14a:	b292      	uxth	r2, r2
 800c14c:	4611      	mov	r1, r2
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	4798      	blx	r3
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c152:	6879      	ldr	r1, [r7, #4]
 800c154:	4806      	ldr	r0, [pc, #24]	@ (800c170 <CDC_Receive_FS+0x40>)
 800c156:	f7fe fb3d 	bl	800a7d4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c15a:	4805      	ldr	r0, [pc, #20]	@ (800c170 <CDC_Receive_FS+0x40>)
 800c15c:	f7fe fb98 	bl	800a890 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c160:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c162:	4618      	mov	r0, r3
 800c164:	3708      	adds	r7, #8
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}
 800c16a:	bf00      	nop
 800c16c:	20000dac 	.word	0x20000dac
 800c170:	200006d0 	.word	0x200006d0

0800c174 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b084      	sub	sp, #16
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	460b      	mov	r3, r1
 800c17e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c180:	2300      	movs	r3, #0
 800c182:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c184:	4b0d      	ldr	r3, [pc, #52]	@ (800c1bc <CDC_Transmit_FS+0x48>)
 800c186:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c18a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c192:	2b00      	cmp	r3, #0
 800c194:	d001      	beq.n	800c19a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c196:	2301      	movs	r3, #1
 800c198:	e00b      	b.n	800c1b2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c19a:	887b      	ldrh	r3, [r7, #2]
 800c19c:	461a      	mov	r2, r3
 800c19e:	6879      	ldr	r1, [r7, #4]
 800c1a0:	4806      	ldr	r0, [pc, #24]	@ (800c1bc <CDC_Transmit_FS+0x48>)
 800c1a2:	f7fe faf5 	bl	800a790 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c1a6:	4805      	ldr	r0, [pc, #20]	@ (800c1bc <CDC_Transmit_FS+0x48>)
 800c1a8:	f7fe fb32 	bl	800a810 <USBD_CDC_TransmitPacket>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c1b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3710      	adds	r7, #16
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	200006d0 	.word	0x200006d0

0800c1c0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	b087      	sub	sp, #28
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	60f8      	str	r0, [r7, #12]
 800c1c8:	60b9      	str	r1, [r7, #8]
 800c1ca:	4613      	mov	r3, r2
 800c1cc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c1d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	371c      	adds	r7, #28
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e0:	4770      	bx	lr
	...

0800c1e4 <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 800c1e4:	b480      	push	{r7}
 800c1e6:	b083      	sub	sp, #12
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 800c1ec:	4a04      	ldr	r2, [pc, #16]	@ (800c200 <CDC_AttachRxData+0x1c>)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6013      	str	r3, [r2, #0]
}
 800c1f2:	bf00      	nop
 800c1f4:	370c      	adds	r7, #12
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fc:	4770      	bx	lr
 800c1fe:	bf00      	nop
 800c200:	20000dac 	.word	0x20000dac

0800c204 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c204:	b480      	push	{r7}
 800c206:	b083      	sub	sp, #12
 800c208:	af00      	add	r7, sp, #0
 800c20a:	4603      	mov	r3, r0
 800c20c:	6039      	str	r1, [r7, #0]
 800c20e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	2212      	movs	r2, #18
 800c214:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c216:	4b03      	ldr	r3, [pc, #12]	@ (800c224 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c218:	4618      	mov	r0, r3
 800c21a:	370c      	adds	r7, #12
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr
 800c224:	200000d0 	.word	0x200000d0

0800c228 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c228:	b480      	push	{r7}
 800c22a:	b083      	sub	sp, #12
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	4603      	mov	r3, r0
 800c230:	6039      	str	r1, [r7, #0]
 800c232:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	2204      	movs	r2, #4
 800c238:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c23a:	4b03      	ldr	r3, [pc, #12]	@ (800c248 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	370c      	adds	r7, #12
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr
 800c248:	200000e4 	.word	0x200000e4

0800c24c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b082      	sub	sp, #8
 800c250:	af00      	add	r7, sp, #0
 800c252:	4603      	mov	r3, r0
 800c254:	6039      	str	r1, [r7, #0]
 800c256:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c258:	79fb      	ldrb	r3, [r7, #7]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d105      	bne.n	800c26a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c25e:	683a      	ldr	r2, [r7, #0]
 800c260:	4907      	ldr	r1, [pc, #28]	@ (800c280 <USBD_FS_ProductStrDescriptor+0x34>)
 800c262:	4808      	ldr	r0, [pc, #32]	@ (800c284 <USBD_FS_ProductStrDescriptor+0x38>)
 800c264:	f7ff fd76 	bl	800bd54 <USBD_GetString>
 800c268:	e004      	b.n	800c274 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c26a:	683a      	ldr	r2, [r7, #0]
 800c26c:	4904      	ldr	r1, [pc, #16]	@ (800c280 <USBD_FS_ProductStrDescriptor+0x34>)
 800c26e:	4805      	ldr	r0, [pc, #20]	@ (800c284 <USBD_FS_ProductStrDescriptor+0x38>)
 800c270:	f7ff fd70 	bl	800bd54 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c274:	4b02      	ldr	r3, [pc, #8]	@ (800c280 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c276:	4618      	mov	r0, r3
 800c278:	3708      	adds	r7, #8
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	20000db0 	.word	0x20000db0
 800c284:	08011120 	.word	0x08011120

0800c288 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	4603      	mov	r3, r0
 800c290:	6039      	str	r1, [r7, #0]
 800c292:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c294:	683a      	ldr	r2, [r7, #0]
 800c296:	4904      	ldr	r1, [pc, #16]	@ (800c2a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c298:	4804      	ldr	r0, [pc, #16]	@ (800c2ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c29a:	f7ff fd5b 	bl	800bd54 <USBD_GetString>
  return USBD_StrDesc;
 800c29e:	4b02      	ldr	r3, [pc, #8]	@ (800c2a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3708      	adds	r7, #8
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}
 800c2a8:	20000db0 	.word	0x20000db0
 800c2ac:	08011138 	.word	0x08011138

0800c2b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b082      	sub	sp, #8
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	6039      	str	r1, [r7, #0]
 800c2ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	221a      	movs	r2, #26
 800c2c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c2c2:	f000 f843 	bl	800c34c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c2c6:	4b02      	ldr	r3, [pc, #8]	@ (800c2d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3708      	adds	r7, #8
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}
 800c2d0:	200000e8 	.word	0x200000e8

0800c2d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b082      	sub	sp, #8
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	4603      	mov	r3, r0
 800c2dc:	6039      	str	r1, [r7, #0]
 800c2de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c2e0:	79fb      	ldrb	r3, [r7, #7]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d105      	bne.n	800c2f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c2e6:	683a      	ldr	r2, [r7, #0]
 800c2e8:	4907      	ldr	r1, [pc, #28]	@ (800c308 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c2ea:	4808      	ldr	r0, [pc, #32]	@ (800c30c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c2ec:	f7ff fd32 	bl	800bd54 <USBD_GetString>
 800c2f0:	e004      	b.n	800c2fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c2f2:	683a      	ldr	r2, [r7, #0]
 800c2f4:	4904      	ldr	r1, [pc, #16]	@ (800c308 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c2f6:	4805      	ldr	r0, [pc, #20]	@ (800c30c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c2f8:	f7ff fd2c 	bl	800bd54 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c2fc:	4b02      	ldr	r3, [pc, #8]	@ (800c308 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3708      	adds	r7, #8
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	20000db0 	.word	0x20000db0
 800c30c:	0801114c 	.word	0x0801114c

0800c310 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
 800c316:	4603      	mov	r3, r0
 800c318:	6039      	str	r1, [r7, #0]
 800c31a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c31c:	79fb      	ldrb	r3, [r7, #7]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d105      	bne.n	800c32e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c322:	683a      	ldr	r2, [r7, #0]
 800c324:	4907      	ldr	r1, [pc, #28]	@ (800c344 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c326:	4808      	ldr	r0, [pc, #32]	@ (800c348 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c328:	f7ff fd14 	bl	800bd54 <USBD_GetString>
 800c32c:	e004      	b.n	800c338 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c32e:	683a      	ldr	r2, [r7, #0]
 800c330:	4904      	ldr	r1, [pc, #16]	@ (800c344 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c332:	4805      	ldr	r0, [pc, #20]	@ (800c348 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c334:	f7ff fd0e 	bl	800bd54 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c338:	4b02      	ldr	r3, [pc, #8]	@ (800c344 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3708      	adds	r7, #8
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}
 800c342:	bf00      	nop
 800c344:	20000db0 	.word	0x20000db0
 800c348:	08011158 	.word	0x08011158

0800c34c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b084      	sub	sp, #16
 800c350:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c352:	4b0f      	ldr	r3, [pc, #60]	@ (800c390 <Get_SerialNum+0x44>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c358:	4b0e      	ldr	r3, [pc, #56]	@ (800c394 <Get_SerialNum+0x48>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c35e:	4b0e      	ldr	r3, [pc, #56]	@ (800c398 <Get_SerialNum+0x4c>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c364:	68fa      	ldr	r2, [r7, #12]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	4413      	add	r3, r2
 800c36a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d009      	beq.n	800c386 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c372:	2208      	movs	r2, #8
 800c374:	4909      	ldr	r1, [pc, #36]	@ (800c39c <Get_SerialNum+0x50>)
 800c376:	68f8      	ldr	r0, [r7, #12]
 800c378:	f000 f814 	bl	800c3a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c37c:	2204      	movs	r2, #4
 800c37e:	4908      	ldr	r1, [pc, #32]	@ (800c3a0 <Get_SerialNum+0x54>)
 800c380:	68b8      	ldr	r0, [r7, #8]
 800c382:	f000 f80f 	bl	800c3a4 <IntToUnicode>
  }
}
 800c386:	bf00      	nop
 800c388:	3710      	adds	r7, #16
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	bf00      	nop
 800c390:	1fff7a10 	.word	0x1fff7a10
 800c394:	1fff7a14 	.word	0x1fff7a14
 800c398:	1fff7a18 	.word	0x1fff7a18
 800c39c:	200000ea 	.word	0x200000ea
 800c3a0:	200000fa 	.word	0x200000fa

0800c3a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b087      	sub	sp, #28
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	60f8      	str	r0, [r7, #12]
 800c3ac:	60b9      	str	r1, [r7, #8]
 800c3ae:	4613      	mov	r3, r2
 800c3b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	75fb      	strb	r3, [r7, #23]
 800c3ba:	e027      	b.n	800c40c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	0f1b      	lsrs	r3, r3, #28
 800c3c0:	2b09      	cmp	r3, #9
 800c3c2:	d80b      	bhi.n	800c3dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	0f1b      	lsrs	r3, r3, #28
 800c3c8:	b2da      	uxtb	r2, r3
 800c3ca:	7dfb      	ldrb	r3, [r7, #23]
 800c3cc:	005b      	lsls	r3, r3, #1
 800c3ce:	4619      	mov	r1, r3
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	440b      	add	r3, r1
 800c3d4:	3230      	adds	r2, #48	@ 0x30
 800c3d6:	b2d2      	uxtb	r2, r2
 800c3d8:	701a      	strb	r2, [r3, #0]
 800c3da:	e00a      	b.n	800c3f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	0f1b      	lsrs	r3, r3, #28
 800c3e0:	b2da      	uxtb	r2, r3
 800c3e2:	7dfb      	ldrb	r3, [r7, #23]
 800c3e4:	005b      	lsls	r3, r3, #1
 800c3e6:	4619      	mov	r1, r3
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	440b      	add	r3, r1
 800c3ec:	3237      	adds	r2, #55	@ 0x37
 800c3ee:	b2d2      	uxtb	r2, r2
 800c3f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	011b      	lsls	r3, r3, #4
 800c3f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c3f8:	7dfb      	ldrb	r3, [r7, #23]
 800c3fa:	005b      	lsls	r3, r3, #1
 800c3fc:	3301      	adds	r3, #1
 800c3fe:	68ba      	ldr	r2, [r7, #8]
 800c400:	4413      	add	r3, r2
 800c402:	2200      	movs	r2, #0
 800c404:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c406:	7dfb      	ldrb	r3, [r7, #23]
 800c408:	3301      	adds	r3, #1
 800c40a:	75fb      	strb	r3, [r7, #23]
 800c40c:	7dfa      	ldrb	r2, [r7, #23]
 800c40e:	79fb      	ldrb	r3, [r7, #7]
 800c410:	429a      	cmp	r2, r3
 800c412:	d3d3      	bcc.n	800c3bc <IntToUnicode+0x18>
  }
}
 800c414:	bf00      	nop
 800c416:	bf00      	nop
 800c418:	371c      	adds	r7, #28
 800c41a:	46bd      	mov	sp, r7
 800c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c420:	4770      	bx	lr
	...

0800c424 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b08a      	sub	sp, #40	@ 0x28
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c42c:	f107 0314 	add.w	r3, r7, #20
 800c430:	2200      	movs	r2, #0
 800c432:	601a      	str	r2, [r3, #0]
 800c434:	605a      	str	r2, [r3, #4]
 800c436:	609a      	str	r2, [r3, #8]
 800c438:	60da      	str	r2, [r3, #12]
 800c43a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c444:	d13a      	bne.n	800c4bc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c446:	2300      	movs	r3, #0
 800c448:	613b      	str	r3, [r7, #16]
 800c44a:	4b1e      	ldr	r3, [pc, #120]	@ (800c4c4 <HAL_PCD_MspInit+0xa0>)
 800c44c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c44e:	4a1d      	ldr	r2, [pc, #116]	@ (800c4c4 <HAL_PCD_MspInit+0xa0>)
 800c450:	f043 0301 	orr.w	r3, r3, #1
 800c454:	6313      	str	r3, [r2, #48]	@ 0x30
 800c456:	4b1b      	ldr	r3, [pc, #108]	@ (800c4c4 <HAL_PCD_MspInit+0xa0>)
 800c458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c45a:	f003 0301 	and.w	r3, r3, #1
 800c45e:	613b      	str	r3, [r7, #16]
 800c460:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c462:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c468:	2302      	movs	r3, #2
 800c46a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c46c:	2300      	movs	r3, #0
 800c46e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c470:	2303      	movs	r3, #3
 800c472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c474:	230a      	movs	r3, #10
 800c476:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c478:	f107 0314 	add.w	r3, r7, #20
 800c47c:	4619      	mov	r1, r3
 800c47e:	4812      	ldr	r0, [pc, #72]	@ (800c4c8 <HAL_PCD_MspInit+0xa4>)
 800c480:	f7f7 fbcc 	bl	8003c1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c484:	4b0f      	ldr	r3, [pc, #60]	@ (800c4c4 <HAL_PCD_MspInit+0xa0>)
 800c486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c488:	4a0e      	ldr	r2, [pc, #56]	@ (800c4c4 <HAL_PCD_MspInit+0xa0>)
 800c48a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c48e:	6353      	str	r3, [r2, #52]	@ 0x34
 800c490:	2300      	movs	r3, #0
 800c492:	60fb      	str	r3, [r7, #12]
 800c494:	4b0b      	ldr	r3, [pc, #44]	@ (800c4c4 <HAL_PCD_MspInit+0xa0>)
 800c496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c498:	4a0a      	ldr	r2, [pc, #40]	@ (800c4c4 <HAL_PCD_MspInit+0xa0>)
 800c49a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c49e:	6453      	str	r3, [r2, #68]	@ 0x44
 800c4a0:	4b08      	ldr	r3, [pc, #32]	@ (800c4c4 <HAL_PCD_MspInit+0xa0>)
 800c4a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c4a8:	60fb      	str	r3, [r7, #12]
 800c4aa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	2100      	movs	r1, #0
 800c4b0:	2043      	movs	r0, #67	@ 0x43
 800c4b2:	f7f6 ffdc 	bl	800346e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c4b6:	2043      	movs	r0, #67	@ 0x43
 800c4b8:	f7f6 fff5 	bl	80034a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c4bc:	bf00      	nop
 800c4be:	3728      	adds	r7, #40	@ 0x28
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}
 800c4c4:	40023800 	.word	0x40023800
 800c4c8:	40020000 	.word	0x40020000

0800c4cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b082      	sub	sp, #8
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c4e0:	4619      	mov	r1, r3
 800c4e2:	4610      	mov	r0, r2
 800c4e4:	f7fe fabd 	bl	800aa62 <USBD_LL_SetupStage>
}
 800c4e8:	bf00      	nop
 800c4ea:	3708      	adds	r7, #8
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}

0800c4f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b082      	sub	sp, #8
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	460b      	mov	r3, r1
 800c4fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c502:	78fa      	ldrb	r2, [r7, #3]
 800c504:	6879      	ldr	r1, [r7, #4]
 800c506:	4613      	mov	r3, r2
 800c508:	00db      	lsls	r3, r3, #3
 800c50a:	4413      	add	r3, r2
 800c50c:	009b      	lsls	r3, r3, #2
 800c50e:	440b      	add	r3, r1
 800c510:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c514:	681a      	ldr	r2, [r3, #0]
 800c516:	78fb      	ldrb	r3, [r7, #3]
 800c518:	4619      	mov	r1, r3
 800c51a:	f7fe faf7 	bl	800ab0c <USBD_LL_DataOutStage>
}
 800c51e:	bf00      	nop
 800c520:	3708      	adds	r7, #8
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}

0800c526 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c526:	b580      	push	{r7, lr}
 800c528:	b082      	sub	sp, #8
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
 800c52e:	460b      	mov	r3, r1
 800c530:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c538:	78fa      	ldrb	r2, [r7, #3]
 800c53a:	6879      	ldr	r1, [r7, #4]
 800c53c:	4613      	mov	r3, r2
 800c53e:	00db      	lsls	r3, r3, #3
 800c540:	4413      	add	r3, r2
 800c542:	009b      	lsls	r3, r3, #2
 800c544:	440b      	add	r3, r1
 800c546:	3320      	adds	r3, #32
 800c548:	681a      	ldr	r2, [r3, #0]
 800c54a:	78fb      	ldrb	r3, [r7, #3]
 800c54c:	4619      	mov	r1, r3
 800c54e:	f7fe fb99 	bl	800ac84 <USBD_LL_DataInStage>
}
 800c552:	bf00      	nop
 800c554:	3708      	adds	r7, #8
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}

0800c55a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c55a:	b580      	push	{r7, lr}
 800c55c:	b082      	sub	sp, #8
 800c55e:	af00      	add	r7, sp, #0
 800c560:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c568:	4618      	mov	r0, r3
 800c56a:	f7fe fcdd 	bl	800af28 <USBD_LL_SOF>
}
 800c56e:	bf00      	nop
 800c570:	3708      	adds	r7, #8
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}

0800c576 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c576:	b580      	push	{r7, lr}
 800c578:	b084      	sub	sp, #16
 800c57a:	af00      	add	r7, sp, #0
 800c57c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c57e:	2301      	movs	r3, #1
 800c580:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	79db      	ldrb	r3, [r3, #7]
 800c586:	2b02      	cmp	r3, #2
 800c588:	d001      	beq.n	800c58e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c58a:	f7f5 fcf1 	bl	8001f70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c594:	7bfa      	ldrb	r2, [r7, #15]
 800c596:	4611      	mov	r1, r2
 800c598:	4618      	mov	r0, r3
 800c59a:	f7fe fc81 	bl	800aea0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f7fe fc28 	bl	800adfa <USBD_LL_Reset>
}
 800c5aa:	bf00      	nop
 800c5ac:	3710      	adds	r7, #16
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
	...

0800c5b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b082      	sub	sp, #8
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f7fe fc7c 	bl	800aec0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	687a      	ldr	r2, [r7, #4]
 800c5d4:	6812      	ldr	r2, [r2, #0]
 800c5d6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c5da:	f043 0301 	orr.w	r3, r3, #1
 800c5de:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	7adb      	ldrb	r3, [r3, #11]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d005      	beq.n	800c5f4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c5e8:	4b04      	ldr	r3, [pc, #16]	@ (800c5fc <HAL_PCD_SuspendCallback+0x48>)
 800c5ea:	691b      	ldr	r3, [r3, #16]
 800c5ec:	4a03      	ldr	r2, [pc, #12]	@ (800c5fc <HAL_PCD_SuspendCallback+0x48>)
 800c5ee:	f043 0306 	orr.w	r3, r3, #6
 800c5f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c5f4:	bf00      	nop
 800c5f6:	3708      	adds	r7, #8
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}
 800c5fc:	e000ed00 	.word	0xe000ed00

0800c600 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b082      	sub	sp, #8
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c60e:	4618      	mov	r0, r3
 800c610:	f7fe fc72 	bl	800aef8 <USBD_LL_Resume>
}
 800c614:	bf00      	nop
 800c616:	3708      	adds	r7, #8
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
 800c624:	460b      	mov	r3, r1
 800c626:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c62e:	78fa      	ldrb	r2, [r7, #3]
 800c630:	4611      	mov	r1, r2
 800c632:	4618      	mov	r0, r3
 800c634:	f7fe fcca 	bl	800afcc <USBD_LL_IsoOUTIncomplete>
}
 800c638:	bf00      	nop
 800c63a:	3708      	adds	r7, #8
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	460b      	mov	r3, r1
 800c64a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c652:	78fa      	ldrb	r2, [r7, #3]
 800c654:	4611      	mov	r1, r2
 800c656:	4618      	mov	r0, r3
 800c658:	f7fe fc86 	bl	800af68 <USBD_LL_IsoINIncomplete>
}
 800c65c:	bf00      	nop
 800c65e:	3708      	adds	r7, #8
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b082      	sub	sp, #8
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c672:	4618      	mov	r0, r3
 800c674:	f7fe fcdc 	bl	800b030 <USBD_LL_DevConnected>
}
 800c678:	bf00      	nop
 800c67a:	3708      	adds	r7, #8
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b082      	sub	sp, #8
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c68e:	4618      	mov	r0, r3
 800c690:	f7fe fcd9 	bl	800b046 <USBD_LL_DevDisconnected>
}
 800c694:	bf00      	nop
 800c696:	3708      	adds	r7, #8
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b082      	sub	sp, #8
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d13c      	bne.n	800c726 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c6ac:	4a20      	ldr	r2, [pc, #128]	@ (800c730 <USBD_LL_Init+0x94>)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	4a1e      	ldr	r2, [pc, #120]	@ (800c730 <USBD_LL_Init+0x94>)
 800c6b8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c6bc:	4b1c      	ldr	r3, [pc, #112]	@ (800c730 <USBD_LL_Init+0x94>)
 800c6be:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c6c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c6c4:	4b1a      	ldr	r3, [pc, #104]	@ (800c730 <USBD_LL_Init+0x94>)
 800c6c6:	2204      	movs	r2, #4
 800c6c8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c6ca:	4b19      	ldr	r3, [pc, #100]	@ (800c730 <USBD_LL_Init+0x94>)
 800c6cc:	2202      	movs	r2, #2
 800c6ce:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c6d0:	4b17      	ldr	r3, [pc, #92]	@ (800c730 <USBD_LL_Init+0x94>)
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c6d6:	4b16      	ldr	r3, [pc, #88]	@ (800c730 <USBD_LL_Init+0x94>)
 800c6d8:	2202      	movs	r2, #2
 800c6da:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c6dc:	4b14      	ldr	r3, [pc, #80]	@ (800c730 <USBD_LL_Init+0x94>)
 800c6de:	2200      	movs	r2, #0
 800c6e0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c6e2:	4b13      	ldr	r3, [pc, #76]	@ (800c730 <USBD_LL_Init+0x94>)
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c6e8:	4b11      	ldr	r3, [pc, #68]	@ (800c730 <USBD_LL_Init+0x94>)
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c6ee:	4b10      	ldr	r3, [pc, #64]	@ (800c730 <USBD_LL_Init+0x94>)
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c6f4:	4b0e      	ldr	r3, [pc, #56]	@ (800c730 <USBD_LL_Init+0x94>)
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c6fa:	480d      	ldr	r0, [pc, #52]	@ (800c730 <USBD_LL_Init+0x94>)
 800c6fc:	f7f9 fa97 	bl	8005c2e <HAL_PCD_Init>
 800c700:	4603      	mov	r3, r0
 800c702:	2b00      	cmp	r3, #0
 800c704:	d001      	beq.n	800c70a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c706:	f7f5 fc33 	bl	8001f70 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c70a:	2180      	movs	r1, #128	@ 0x80
 800c70c:	4808      	ldr	r0, [pc, #32]	@ (800c730 <USBD_LL_Init+0x94>)
 800c70e:	f7fa fcc4 	bl	800709a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c712:	2240      	movs	r2, #64	@ 0x40
 800c714:	2100      	movs	r1, #0
 800c716:	4806      	ldr	r0, [pc, #24]	@ (800c730 <USBD_LL_Init+0x94>)
 800c718:	f7fa fc78 	bl	800700c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c71c:	2280      	movs	r2, #128	@ 0x80
 800c71e:	2101      	movs	r1, #1
 800c720:	4803      	ldr	r0, [pc, #12]	@ (800c730 <USBD_LL_Init+0x94>)
 800c722:	f7fa fc73 	bl	800700c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c726:	2300      	movs	r3, #0
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3708      	adds	r7, #8
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}
 800c730:	20000fb0 	.word	0x20000fb0

0800c734 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b084      	sub	sp, #16
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c73c:	2300      	movs	r3, #0
 800c73e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c740:	2300      	movs	r3, #0
 800c742:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c74a:	4618      	mov	r0, r3
 800c74c:	f7f9 fb7e 	bl	8005e4c <HAL_PCD_Start>
 800c750:	4603      	mov	r3, r0
 800c752:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c754:	7bfb      	ldrb	r3, [r7, #15]
 800c756:	4618      	mov	r0, r3
 800c758:	f000 f942 	bl	800c9e0 <USBD_Get_USB_Status>
 800c75c:	4603      	mov	r3, r0
 800c75e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c760:	7bbb      	ldrb	r3, [r7, #14]
}
 800c762:	4618      	mov	r0, r3
 800c764:	3710      	adds	r7, #16
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}

0800c76a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c76a:	b580      	push	{r7, lr}
 800c76c:	b084      	sub	sp, #16
 800c76e:	af00      	add	r7, sp, #0
 800c770:	6078      	str	r0, [r7, #4]
 800c772:	4608      	mov	r0, r1
 800c774:	4611      	mov	r1, r2
 800c776:	461a      	mov	r2, r3
 800c778:	4603      	mov	r3, r0
 800c77a:	70fb      	strb	r3, [r7, #3]
 800c77c:	460b      	mov	r3, r1
 800c77e:	70bb      	strb	r3, [r7, #2]
 800c780:	4613      	mov	r3, r2
 800c782:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c784:	2300      	movs	r3, #0
 800c786:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c788:	2300      	movs	r3, #0
 800c78a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c792:	78bb      	ldrb	r3, [r7, #2]
 800c794:	883a      	ldrh	r2, [r7, #0]
 800c796:	78f9      	ldrb	r1, [r7, #3]
 800c798:	f7fa f852 	bl	8006840 <HAL_PCD_EP_Open>
 800c79c:	4603      	mov	r3, r0
 800c79e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7a0:	7bfb      	ldrb	r3, [r7, #15]
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f000 f91c 	bl	800c9e0 <USBD_Get_USB_Status>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3710      	adds	r7, #16
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}

0800c7b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7b6:	b580      	push	{r7, lr}
 800c7b8:	b084      	sub	sp, #16
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
 800c7be:	460b      	mov	r3, r1
 800c7c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c7d0:	78fa      	ldrb	r2, [r7, #3]
 800c7d2:	4611      	mov	r1, r2
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f7fa f89d 	bl	8006914 <HAL_PCD_EP_Close>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7de:	7bfb      	ldrb	r3, [r7, #15]
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f000 f8fd 	bl	800c9e0 <USBD_Get_USB_Status>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3710      	adds	r7, #16
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}

0800c7f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b084      	sub	sp, #16
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	460b      	mov	r3, r1
 800c7fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c800:	2300      	movs	r3, #0
 800c802:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c804:	2300      	movs	r3, #0
 800c806:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c80e:	78fa      	ldrb	r2, [r7, #3]
 800c810:	4611      	mov	r1, r2
 800c812:	4618      	mov	r0, r3
 800c814:	f7fa f955 	bl	8006ac2 <HAL_PCD_EP_SetStall>
 800c818:	4603      	mov	r3, r0
 800c81a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c81c:	7bfb      	ldrb	r3, [r7, #15]
 800c81e:	4618      	mov	r0, r3
 800c820:	f000 f8de 	bl	800c9e0 <USBD_Get_USB_Status>
 800c824:	4603      	mov	r3, r0
 800c826:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c828:	7bbb      	ldrb	r3, [r7, #14]
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3710      	adds	r7, #16
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}

0800c832 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c832:	b580      	push	{r7, lr}
 800c834:	b084      	sub	sp, #16
 800c836:	af00      	add	r7, sp, #0
 800c838:	6078      	str	r0, [r7, #4]
 800c83a:	460b      	mov	r3, r1
 800c83c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c83e:	2300      	movs	r3, #0
 800c840:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c842:	2300      	movs	r3, #0
 800c844:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c84c:	78fa      	ldrb	r2, [r7, #3]
 800c84e:	4611      	mov	r1, r2
 800c850:	4618      	mov	r0, r3
 800c852:	f7fa f999 	bl	8006b88 <HAL_PCD_EP_ClrStall>
 800c856:	4603      	mov	r3, r0
 800c858:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c85a:	7bfb      	ldrb	r3, [r7, #15]
 800c85c:	4618      	mov	r0, r3
 800c85e:	f000 f8bf 	bl	800c9e0 <USBD_Get_USB_Status>
 800c862:	4603      	mov	r3, r0
 800c864:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c866:	7bbb      	ldrb	r3, [r7, #14]
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3710      	adds	r7, #16
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c870:	b480      	push	{r7}
 800c872:	b085      	sub	sp, #20
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	460b      	mov	r3, r1
 800c87a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c882:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c884:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	da0b      	bge.n	800c8a4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c88c:	78fb      	ldrb	r3, [r7, #3]
 800c88e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c892:	68f9      	ldr	r1, [r7, #12]
 800c894:	4613      	mov	r3, r2
 800c896:	00db      	lsls	r3, r3, #3
 800c898:	4413      	add	r3, r2
 800c89a:	009b      	lsls	r3, r3, #2
 800c89c:	440b      	add	r3, r1
 800c89e:	3316      	adds	r3, #22
 800c8a0:	781b      	ldrb	r3, [r3, #0]
 800c8a2:	e00b      	b.n	800c8bc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c8a4:	78fb      	ldrb	r3, [r7, #3]
 800c8a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c8aa:	68f9      	ldr	r1, [r7, #12]
 800c8ac:	4613      	mov	r3, r2
 800c8ae:	00db      	lsls	r3, r3, #3
 800c8b0:	4413      	add	r3, r2
 800c8b2:	009b      	lsls	r3, r3, #2
 800c8b4:	440b      	add	r3, r1
 800c8b6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c8ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3714      	adds	r7, #20
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr

0800c8c8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b084      	sub	sp, #16
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	460b      	mov	r3, r1
 800c8d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c8e2:	78fa      	ldrb	r2, [r7, #3]
 800c8e4:	4611      	mov	r1, r2
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7f9 ff86 	bl	80067f8 <HAL_PCD_SetAddress>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8f0:	7bfb      	ldrb	r3, [r7, #15]
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f000 f874 	bl	800c9e0 <USBD_Get_USB_Status>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3710      	adds	r7, #16
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}

0800c906 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c906:	b580      	push	{r7, lr}
 800c908:	b086      	sub	sp, #24
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	60f8      	str	r0, [r7, #12]
 800c90e:	607a      	str	r2, [r7, #4]
 800c910:	603b      	str	r3, [r7, #0]
 800c912:	460b      	mov	r3, r1
 800c914:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c916:	2300      	movs	r3, #0
 800c918:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c91a:	2300      	movs	r3, #0
 800c91c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c924:	7af9      	ldrb	r1, [r7, #11]
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	687a      	ldr	r2, [r7, #4]
 800c92a:	f7fa f890 	bl	8006a4e <HAL_PCD_EP_Transmit>
 800c92e:	4603      	mov	r3, r0
 800c930:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c932:	7dfb      	ldrb	r3, [r7, #23]
 800c934:	4618      	mov	r0, r3
 800c936:	f000 f853 	bl	800c9e0 <USBD_Get_USB_Status>
 800c93a:	4603      	mov	r3, r0
 800c93c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c93e:	7dbb      	ldrb	r3, [r7, #22]
}
 800c940:	4618      	mov	r0, r3
 800c942:	3718      	adds	r7, #24
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}

0800c948 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b086      	sub	sp, #24
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	60f8      	str	r0, [r7, #12]
 800c950:	607a      	str	r2, [r7, #4]
 800c952:	603b      	str	r3, [r7, #0]
 800c954:	460b      	mov	r3, r1
 800c956:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c958:	2300      	movs	r3, #0
 800c95a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c95c:	2300      	movs	r3, #0
 800c95e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c966:	7af9      	ldrb	r1, [r7, #11]
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	687a      	ldr	r2, [r7, #4]
 800c96c:	f7fa f81c 	bl	80069a8 <HAL_PCD_EP_Receive>
 800c970:	4603      	mov	r3, r0
 800c972:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c974:	7dfb      	ldrb	r3, [r7, #23]
 800c976:	4618      	mov	r0, r3
 800c978:	f000 f832 	bl	800c9e0 <USBD_Get_USB_Status>
 800c97c:	4603      	mov	r3, r0
 800c97e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c980:	7dbb      	ldrb	r3, [r7, #22]
}
 800c982:	4618      	mov	r0, r3
 800c984:	3718      	adds	r7, #24
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}

0800c98a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c98a:	b580      	push	{r7, lr}
 800c98c:	b082      	sub	sp, #8
 800c98e:	af00      	add	r7, sp, #0
 800c990:	6078      	str	r0, [r7, #4]
 800c992:	460b      	mov	r3, r1
 800c994:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c99c:	78fa      	ldrb	r2, [r7, #3]
 800c99e:	4611      	mov	r1, r2
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f7fa f83c 	bl	8006a1e <HAL_PCD_EP_GetRxCount>
 800c9a6:	4603      	mov	r3, r0
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3708      	adds	r7, #8
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}

0800c9b0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b083      	sub	sp, #12
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c9b8:	4b03      	ldr	r3, [pc, #12]	@ (800c9c8 <USBD_static_malloc+0x18>)
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	370c      	adds	r7, #12
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c4:	4770      	bx	lr
 800c9c6:	bf00      	nop
 800c9c8:	20001494 	.word	0x20001494

0800c9cc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b083      	sub	sp, #12
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]

}
 800c9d4:	bf00      	nop
 800c9d6:	370c      	adds	r7, #12
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9de:	4770      	bx	lr

0800c9e0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	b085      	sub	sp, #20
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c9ee:	79fb      	ldrb	r3, [r7, #7]
 800c9f0:	2b03      	cmp	r3, #3
 800c9f2:	d817      	bhi.n	800ca24 <USBD_Get_USB_Status+0x44>
 800c9f4:	a201      	add	r2, pc, #4	@ (adr r2, 800c9fc <USBD_Get_USB_Status+0x1c>)
 800c9f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9fa:	bf00      	nop
 800c9fc:	0800ca0d 	.word	0x0800ca0d
 800ca00:	0800ca13 	.word	0x0800ca13
 800ca04:	0800ca19 	.word	0x0800ca19
 800ca08:	0800ca1f 	.word	0x0800ca1f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	73fb      	strb	r3, [r7, #15]
    break;
 800ca10:	e00b      	b.n	800ca2a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ca12:	2303      	movs	r3, #3
 800ca14:	73fb      	strb	r3, [r7, #15]
    break;
 800ca16:	e008      	b.n	800ca2a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ca18:	2301      	movs	r3, #1
 800ca1a:	73fb      	strb	r3, [r7, #15]
    break;
 800ca1c:	e005      	b.n	800ca2a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ca1e:	2303      	movs	r3, #3
 800ca20:	73fb      	strb	r3, [r7, #15]
    break;
 800ca22:	e002      	b.n	800ca2a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ca24:	2303      	movs	r3, #3
 800ca26:	73fb      	strb	r3, [r7, #15]
    break;
 800ca28:	bf00      	nop
  }
  return usb_status;
 800ca2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3714      	adds	r7, #20
 800ca30:	46bd      	mov	sp, r7
 800ca32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca36:	4770      	bx	lr

0800ca38 <malloc>:
 800ca38:	4b02      	ldr	r3, [pc, #8]	@ (800ca44 <malloc+0xc>)
 800ca3a:	4601      	mov	r1, r0
 800ca3c:	6818      	ldr	r0, [r3, #0]
 800ca3e:	f000 b825 	b.w	800ca8c <_malloc_r>
 800ca42:	bf00      	nop
 800ca44:	20000110 	.word	0x20000110

0800ca48 <sbrk_aligned>:
 800ca48:	b570      	push	{r4, r5, r6, lr}
 800ca4a:	4e0f      	ldr	r6, [pc, #60]	@ (800ca88 <sbrk_aligned+0x40>)
 800ca4c:	460c      	mov	r4, r1
 800ca4e:	6831      	ldr	r1, [r6, #0]
 800ca50:	4605      	mov	r5, r0
 800ca52:	b911      	cbnz	r1, 800ca5a <sbrk_aligned+0x12>
 800ca54:	f001 f872 	bl	800db3c <_sbrk_r>
 800ca58:	6030      	str	r0, [r6, #0]
 800ca5a:	4621      	mov	r1, r4
 800ca5c:	4628      	mov	r0, r5
 800ca5e:	f001 f86d 	bl	800db3c <_sbrk_r>
 800ca62:	1c43      	adds	r3, r0, #1
 800ca64:	d103      	bne.n	800ca6e <sbrk_aligned+0x26>
 800ca66:	f04f 34ff 	mov.w	r4, #4294967295
 800ca6a:	4620      	mov	r0, r4
 800ca6c:	bd70      	pop	{r4, r5, r6, pc}
 800ca6e:	1cc4      	adds	r4, r0, #3
 800ca70:	f024 0403 	bic.w	r4, r4, #3
 800ca74:	42a0      	cmp	r0, r4
 800ca76:	d0f8      	beq.n	800ca6a <sbrk_aligned+0x22>
 800ca78:	1a21      	subs	r1, r4, r0
 800ca7a:	4628      	mov	r0, r5
 800ca7c:	f001 f85e 	bl	800db3c <_sbrk_r>
 800ca80:	3001      	adds	r0, #1
 800ca82:	d1f2      	bne.n	800ca6a <sbrk_aligned+0x22>
 800ca84:	e7ef      	b.n	800ca66 <sbrk_aligned+0x1e>
 800ca86:	bf00      	nop
 800ca88:	200016b4 	.word	0x200016b4

0800ca8c <_malloc_r>:
 800ca8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca90:	1ccd      	adds	r5, r1, #3
 800ca92:	f025 0503 	bic.w	r5, r5, #3
 800ca96:	3508      	adds	r5, #8
 800ca98:	2d0c      	cmp	r5, #12
 800ca9a:	bf38      	it	cc
 800ca9c:	250c      	movcc	r5, #12
 800ca9e:	2d00      	cmp	r5, #0
 800caa0:	4606      	mov	r6, r0
 800caa2:	db01      	blt.n	800caa8 <_malloc_r+0x1c>
 800caa4:	42a9      	cmp	r1, r5
 800caa6:	d904      	bls.n	800cab2 <_malloc_r+0x26>
 800caa8:	230c      	movs	r3, #12
 800caaa:	6033      	str	r3, [r6, #0]
 800caac:	2000      	movs	r0, #0
 800caae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cab2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cb88 <_malloc_r+0xfc>
 800cab6:	f000 f869 	bl	800cb8c <__malloc_lock>
 800caba:	f8d8 3000 	ldr.w	r3, [r8]
 800cabe:	461c      	mov	r4, r3
 800cac0:	bb44      	cbnz	r4, 800cb14 <_malloc_r+0x88>
 800cac2:	4629      	mov	r1, r5
 800cac4:	4630      	mov	r0, r6
 800cac6:	f7ff ffbf 	bl	800ca48 <sbrk_aligned>
 800caca:	1c43      	adds	r3, r0, #1
 800cacc:	4604      	mov	r4, r0
 800cace:	d158      	bne.n	800cb82 <_malloc_r+0xf6>
 800cad0:	f8d8 4000 	ldr.w	r4, [r8]
 800cad4:	4627      	mov	r7, r4
 800cad6:	2f00      	cmp	r7, #0
 800cad8:	d143      	bne.n	800cb62 <_malloc_r+0xd6>
 800cada:	2c00      	cmp	r4, #0
 800cadc:	d04b      	beq.n	800cb76 <_malloc_r+0xea>
 800cade:	6823      	ldr	r3, [r4, #0]
 800cae0:	4639      	mov	r1, r7
 800cae2:	4630      	mov	r0, r6
 800cae4:	eb04 0903 	add.w	r9, r4, r3
 800cae8:	f001 f828 	bl	800db3c <_sbrk_r>
 800caec:	4581      	cmp	r9, r0
 800caee:	d142      	bne.n	800cb76 <_malloc_r+0xea>
 800caf0:	6821      	ldr	r1, [r4, #0]
 800caf2:	1a6d      	subs	r5, r5, r1
 800caf4:	4629      	mov	r1, r5
 800caf6:	4630      	mov	r0, r6
 800caf8:	f7ff ffa6 	bl	800ca48 <sbrk_aligned>
 800cafc:	3001      	adds	r0, #1
 800cafe:	d03a      	beq.n	800cb76 <_malloc_r+0xea>
 800cb00:	6823      	ldr	r3, [r4, #0]
 800cb02:	442b      	add	r3, r5
 800cb04:	6023      	str	r3, [r4, #0]
 800cb06:	f8d8 3000 	ldr.w	r3, [r8]
 800cb0a:	685a      	ldr	r2, [r3, #4]
 800cb0c:	bb62      	cbnz	r2, 800cb68 <_malloc_r+0xdc>
 800cb0e:	f8c8 7000 	str.w	r7, [r8]
 800cb12:	e00f      	b.n	800cb34 <_malloc_r+0xa8>
 800cb14:	6822      	ldr	r2, [r4, #0]
 800cb16:	1b52      	subs	r2, r2, r5
 800cb18:	d420      	bmi.n	800cb5c <_malloc_r+0xd0>
 800cb1a:	2a0b      	cmp	r2, #11
 800cb1c:	d917      	bls.n	800cb4e <_malloc_r+0xc2>
 800cb1e:	1961      	adds	r1, r4, r5
 800cb20:	42a3      	cmp	r3, r4
 800cb22:	6025      	str	r5, [r4, #0]
 800cb24:	bf18      	it	ne
 800cb26:	6059      	strne	r1, [r3, #4]
 800cb28:	6863      	ldr	r3, [r4, #4]
 800cb2a:	bf08      	it	eq
 800cb2c:	f8c8 1000 	streq.w	r1, [r8]
 800cb30:	5162      	str	r2, [r4, r5]
 800cb32:	604b      	str	r3, [r1, #4]
 800cb34:	4630      	mov	r0, r6
 800cb36:	f000 f82f 	bl	800cb98 <__malloc_unlock>
 800cb3a:	f104 000b 	add.w	r0, r4, #11
 800cb3e:	1d23      	adds	r3, r4, #4
 800cb40:	f020 0007 	bic.w	r0, r0, #7
 800cb44:	1ac2      	subs	r2, r0, r3
 800cb46:	bf1c      	itt	ne
 800cb48:	1a1b      	subne	r3, r3, r0
 800cb4a:	50a3      	strne	r3, [r4, r2]
 800cb4c:	e7af      	b.n	800caae <_malloc_r+0x22>
 800cb4e:	6862      	ldr	r2, [r4, #4]
 800cb50:	42a3      	cmp	r3, r4
 800cb52:	bf0c      	ite	eq
 800cb54:	f8c8 2000 	streq.w	r2, [r8]
 800cb58:	605a      	strne	r2, [r3, #4]
 800cb5a:	e7eb      	b.n	800cb34 <_malloc_r+0xa8>
 800cb5c:	4623      	mov	r3, r4
 800cb5e:	6864      	ldr	r4, [r4, #4]
 800cb60:	e7ae      	b.n	800cac0 <_malloc_r+0x34>
 800cb62:	463c      	mov	r4, r7
 800cb64:	687f      	ldr	r7, [r7, #4]
 800cb66:	e7b6      	b.n	800cad6 <_malloc_r+0x4a>
 800cb68:	461a      	mov	r2, r3
 800cb6a:	685b      	ldr	r3, [r3, #4]
 800cb6c:	42a3      	cmp	r3, r4
 800cb6e:	d1fb      	bne.n	800cb68 <_malloc_r+0xdc>
 800cb70:	2300      	movs	r3, #0
 800cb72:	6053      	str	r3, [r2, #4]
 800cb74:	e7de      	b.n	800cb34 <_malloc_r+0xa8>
 800cb76:	230c      	movs	r3, #12
 800cb78:	6033      	str	r3, [r6, #0]
 800cb7a:	4630      	mov	r0, r6
 800cb7c:	f000 f80c 	bl	800cb98 <__malloc_unlock>
 800cb80:	e794      	b.n	800caac <_malloc_r+0x20>
 800cb82:	6005      	str	r5, [r0, #0]
 800cb84:	e7d6      	b.n	800cb34 <_malloc_r+0xa8>
 800cb86:	bf00      	nop
 800cb88:	200016b8 	.word	0x200016b8

0800cb8c <__malloc_lock>:
 800cb8c:	4801      	ldr	r0, [pc, #4]	@ (800cb94 <__malloc_lock+0x8>)
 800cb8e:	f001 b822 	b.w	800dbd6 <__retarget_lock_acquire_recursive>
 800cb92:	bf00      	nop
 800cb94:	200017fc 	.word	0x200017fc

0800cb98 <__malloc_unlock>:
 800cb98:	4801      	ldr	r0, [pc, #4]	@ (800cba0 <__malloc_unlock+0x8>)
 800cb9a:	f001 b81d 	b.w	800dbd8 <__retarget_lock_release_recursive>
 800cb9e:	bf00      	nop
 800cba0:	200017fc 	.word	0x200017fc

0800cba4 <__cvt>:
 800cba4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cba8:	ec57 6b10 	vmov	r6, r7, d0
 800cbac:	2f00      	cmp	r7, #0
 800cbae:	460c      	mov	r4, r1
 800cbb0:	4619      	mov	r1, r3
 800cbb2:	463b      	mov	r3, r7
 800cbb4:	bfbb      	ittet	lt
 800cbb6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cbba:	461f      	movlt	r7, r3
 800cbbc:	2300      	movge	r3, #0
 800cbbe:	232d      	movlt	r3, #45	@ 0x2d
 800cbc0:	700b      	strb	r3, [r1, #0]
 800cbc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cbc4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cbc8:	4691      	mov	r9, r2
 800cbca:	f023 0820 	bic.w	r8, r3, #32
 800cbce:	bfbc      	itt	lt
 800cbd0:	4632      	movlt	r2, r6
 800cbd2:	4616      	movlt	r6, r2
 800cbd4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cbd8:	d005      	beq.n	800cbe6 <__cvt+0x42>
 800cbda:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cbde:	d100      	bne.n	800cbe2 <__cvt+0x3e>
 800cbe0:	3401      	adds	r4, #1
 800cbe2:	2102      	movs	r1, #2
 800cbe4:	e000      	b.n	800cbe8 <__cvt+0x44>
 800cbe6:	2103      	movs	r1, #3
 800cbe8:	ab03      	add	r3, sp, #12
 800cbea:	9301      	str	r3, [sp, #4]
 800cbec:	ab02      	add	r3, sp, #8
 800cbee:	9300      	str	r3, [sp, #0]
 800cbf0:	ec47 6b10 	vmov	d0, r6, r7
 800cbf4:	4653      	mov	r3, sl
 800cbf6:	4622      	mov	r2, r4
 800cbf8:	f001 f87e 	bl	800dcf8 <_dtoa_r>
 800cbfc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cc00:	4605      	mov	r5, r0
 800cc02:	d119      	bne.n	800cc38 <__cvt+0x94>
 800cc04:	f019 0f01 	tst.w	r9, #1
 800cc08:	d00e      	beq.n	800cc28 <__cvt+0x84>
 800cc0a:	eb00 0904 	add.w	r9, r0, r4
 800cc0e:	2200      	movs	r2, #0
 800cc10:	2300      	movs	r3, #0
 800cc12:	4630      	mov	r0, r6
 800cc14:	4639      	mov	r1, r7
 800cc16:	f7f3 ff5f 	bl	8000ad8 <__aeabi_dcmpeq>
 800cc1a:	b108      	cbz	r0, 800cc20 <__cvt+0x7c>
 800cc1c:	f8cd 900c 	str.w	r9, [sp, #12]
 800cc20:	2230      	movs	r2, #48	@ 0x30
 800cc22:	9b03      	ldr	r3, [sp, #12]
 800cc24:	454b      	cmp	r3, r9
 800cc26:	d31e      	bcc.n	800cc66 <__cvt+0xc2>
 800cc28:	9b03      	ldr	r3, [sp, #12]
 800cc2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc2c:	1b5b      	subs	r3, r3, r5
 800cc2e:	4628      	mov	r0, r5
 800cc30:	6013      	str	r3, [r2, #0]
 800cc32:	b004      	add	sp, #16
 800cc34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc38:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cc3c:	eb00 0904 	add.w	r9, r0, r4
 800cc40:	d1e5      	bne.n	800cc0e <__cvt+0x6a>
 800cc42:	7803      	ldrb	r3, [r0, #0]
 800cc44:	2b30      	cmp	r3, #48	@ 0x30
 800cc46:	d10a      	bne.n	800cc5e <__cvt+0xba>
 800cc48:	2200      	movs	r2, #0
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	4630      	mov	r0, r6
 800cc4e:	4639      	mov	r1, r7
 800cc50:	f7f3 ff42 	bl	8000ad8 <__aeabi_dcmpeq>
 800cc54:	b918      	cbnz	r0, 800cc5e <__cvt+0xba>
 800cc56:	f1c4 0401 	rsb	r4, r4, #1
 800cc5a:	f8ca 4000 	str.w	r4, [sl]
 800cc5e:	f8da 3000 	ldr.w	r3, [sl]
 800cc62:	4499      	add	r9, r3
 800cc64:	e7d3      	b.n	800cc0e <__cvt+0x6a>
 800cc66:	1c59      	adds	r1, r3, #1
 800cc68:	9103      	str	r1, [sp, #12]
 800cc6a:	701a      	strb	r2, [r3, #0]
 800cc6c:	e7d9      	b.n	800cc22 <__cvt+0x7e>

0800cc6e <__exponent>:
 800cc6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc70:	2900      	cmp	r1, #0
 800cc72:	bfba      	itte	lt
 800cc74:	4249      	neglt	r1, r1
 800cc76:	232d      	movlt	r3, #45	@ 0x2d
 800cc78:	232b      	movge	r3, #43	@ 0x2b
 800cc7a:	2909      	cmp	r1, #9
 800cc7c:	7002      	strb	r2, [r0, #0]
 800cc7e:	7043      	strb	r3, [r0, #1]
 800cc80:	dd29      	ble.n	800ccd6 <__exponent+0x68>
 800cc82:	f10d 0307 	add.w	r3, sp, #7
 800cc86:	461d      	mov	r5, r3
 800cc88:	270a      	movs	r7, #10
 800cc8a:	461a      	mov	r2, r3
 800cc8c:	fbb1 f6f7 	udiv	r6, r1, r7
 800cc90:	fb07 1416 	mls	r4, r7, r6, r1
 800cc94:	3430      	adds	r4, #48	@ 0x30
 800cc96:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cc9a:	460c      	mov	r4, r1
 800cc9c:	2c63      	cmp	r4, #99	@ 0x63
 800cc9e:	f103 33ff 	add.w	r3, r3, #4294967295
 800cca2:	4631      	mov	r1, r6
 800cca4:	dcf1      	bgt.n	800cc8a <__exponent+0x1c>
 800cca6:	3130      	adds	r1, #48	@ 0x30
 800cca8:	1e94      	subs	r4, r2, #2
 800ccaa:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ccae:	1c41      	adds	r1, r0, #1
 800ccb0:	4623      	mov	r3, r4
 800ccb2:	42ab      	cmp	r3, r5
 800ccb4:	d30a      	bcc.n	800cccc <__exponent+0x5e>
 800ccb6:	f10d 0309 	add.w	r3, sp, #9
 800ccba:	1a9b      	subs	r3, r3, r2
 800ccbc:	42ac      	cmp	r4, r5
 800ccbe:	bf88      	it	hi
 800ccc0:	2300      	movhi	r3, #0
 800ccc2:	3302      	adds	r3, #2
 800ccc4:	4403      	add	r3, r0
 800ccc6:	1a18      	subs	r0, r3, r0
 800ccc8:	b003      	add	sp, #12
 800ccca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cccc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ccd0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ccd4:	e7ed      	b.n	800ccb2 <__exponent+0x44>
 800ccd6:	2330      	movs	r3, #48	@ 0x30
 800ccd8:	3130      	adds	r1, #48	@ 0x30
 800ccda:	7083      	strb	r3, [r0, #2]
 800ccdc:	70c1      	strb	r1, [r0, #3]
 800ccde:	1d03      	adds	r3, r0, #4
 800cce0:	e7f1      	b.n	800ccc6 <__exponent+0x58>
	...

0800cce4 <_printf_float>:
 800cce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cce8:	b08d      	sub	sp, #52	@ 0x34
 800ccea:	460c      	mov	r4, r1
 800ccec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ccf0:	4616      	mov	r6, r2
 800ccf2:	461f      	mov	r7, r3
 800ccf4:	4605      	mov	r5, r0
 800ccf6:	f000 fee9 	bl	800dacc <_localeconv_r>
 800ccfa:	6803      	ldr	r3, [r0, #0]
 800ccfc:	9304      	str	r3, [sp, #16]
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f7f3 fabe 	bl	8000280 <strlen>
 800cd04:	2300      	movs	r3, #0
 800cd06:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd08:	f8d8 3000 	ldr.w	r3, [r8]
 800cd0c:	9005      	str	r0, [sp, #20]
 800cd0e:	3307      	adds	r3, #7
 800cd10:	f023 0307 	bic.w	r3, r3, #7
 800cd14:	f103 0208 	add.w	r2, r3, #8
 800cd18:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cd1c:	f8d4 b000 	ldr.w	fp, [r4]
 800cd20:	f8c8 2000 	str.w	r2, [r8]
 800cd24:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cd28:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cd2c:	9307      	str	r3, [sp, #28]
 800cd2e:	f8cd 8018 	str.w	r8, [sp, #24]
 800cd32:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cd36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd3a:	4b9c      	ldr	r3, [pc, #624]	@ (800cfac <_printf_float+0x2c8>)
 800cd3c:	f04f 32ff 	mov.w	r2, #4294967295
 800cd40:	f7f3 fefc 	bl	8000b3c <__aeabi_dcmpun>
 800cd44:	bb70      	cbnz	r0, 800cda4 <_printf_float+0xc0>
 800cd46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd4a:	4b98      	ldr	r3, [pc, #608]	@ (800cfac <_printf_float+0x2c8>)
 800cd4c:	f04f 32ff 	mov.w	r2, #4294967295
 800cd50:	f7f3 fed6 	bl	8000b00 <__aeabi_dcmple>
 800cd54:	bb30      	cbnz	r0, 800cda4 <_printf_float+0xc0>
 800cd56:	2200      	movs	r2, #0
 800cd58:	2300      	movs	r3, #0
 800cd5a:	4640      	mov	r0, r8
 800cd5c:	4649      	mov	r1, r9
 800cd5e:	f7f3 fec5 	bl	8000aec <__aeabi_dcmplt>
 800cd62:	b110      	cbz	r0, 800cd6a <_printf_float+0x86>
 800cd64:	232d      	movs	r3, #45	@ 0x2d
 800cd66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cd6a:	4a91      	ldr	r2, [pc, #580]	@ (800cfb0 <_printf_float+0x2cc>)
 800cd6c:	4b91      	ldr	r3, [pc, #580]	@ (800cfb4 <_printf_float+0x2d0>)
 800cd6e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cd72:	bf8c      	ite	hi
 800cd74:	4690      	movhi	r8, r2
 800cd76:	4698      	movls	r8, r3
 800cd78:	2303      	movs	r3, #3
 800cd7a:	6123      	str	r3, [r4, #16]
 800cd7c:	f02b 0304 	bic.w	r3, fp, #4
 800cd80:	6023      	str	r3, [r4, #0]
 800cd82:	f04f 0900 	mov.w	r9, #0
 800cd86:	9700      	str	r7, [sp, #0]
 800cd88:	4633      	mov	r3, r6
 800cd8a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cd8c:	4621      	mov	r1, r4
 800cd8e:	4628      	mov	r0, r5
 800cd90:	f000 f9d2 	bl	800d138 <_printf_common>
 800cd94:	3001      	adds	r0, #1
 800cd96:	f040 808d 	bne.w	800ceb4 <_printf_float+0x1d0>
 800cd9a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd9e:	b00d      	add	sp, #52	@ 0x34
 800cda0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cda4:	4642      	mov	r2, r8
 800cda6:	464b      	mov	r3, r9
 800cda8:	4640      	mov	r0, r8
 800cdaa:	4649      	mov	r1, r9
 800cdac:	f7f3 fec6 	bl	8000b3c <__aeabi_dcmpun>
 800cdb0:	b140      	cbz	r0, 800cdc4 <_printf_float+0xe0>
 800cdb2:	464b      	mov	r3, r9
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	bfbc      	itt	lt
 800cdb8:	232d      	movlt	r3, #45	@ 0x2d
 800cdba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cdbe:	4a7e      	ldr	r2, [pc, #504]	@ (800cfb8 <_printf_float+0x2d4>)
 800cdc0:	4b7e      	ldr	r3, [pc, #504]	@ (800cfbc <_printf_float+0x2d8>)
 800cdc2:	e7d4      	b.n	800cd6e <_printf_float+0x8a>
 800cdc4:	6863      	ldr	r3, [r4, #4]
 800cdc6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cdca:	9206      	str	r2, [sp, #24]
 800cdcc:	1c5a      	adds	r2, r3, #1
 800cdce:	d13b      	bne.n	800ce48 <_printf_float+0x164>
 800cdd0:	2306      	movs	r3, #6
 800cdd2:	6063      	str	r3, [r4, #4]
 800cdd4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800cdd8:	2300      	movs	r3, #0
 800cdda:	6022      	str	r2, [r4, #0]
 800cddc:	9303      	str	r3, [sp, #12]
 800cdde:	ab0a      	add	r3, sp, #40	@ 0x28
 800cde0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800cde4:	ab09      	add	r3, sp, #36	@ 0x24
 800cde6:	9300      	str	r3, [sp, #0]
 800cde8:	6861      	ldr	r1, [r4, #4]
 800cdea:	ec49 8b10 	vmov	d0, r8, r9
 800cdee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cdf2:	4628      	mov	r0, r5
 800cdf4:	f7ff fed6 	bl	800cba4 <__cvt>
 800cdf8:	9b06      	ldr	r3, [sp, #24]
 800cdfa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cdfc:	2b47      	cmp	r3, #71	@ 0x47
 800cdfe:	4680      	mov	r8, r0
 800ce00:	d129      	bne.n	800ce56 <_printf_float+0x172>
 800ce02:	1cc8      	adds	r0, r1, #3
 800ce04:	db02      	blt.n	800ce0c <_printf_float+0x128>
 800ce06:	6863      	ldr	r3, [r4, #4]
 800ce08:	4299      	cmp	r1, r3
 800ce0a:	dd41      	ble.n	800ce90 <_printf_float+0x1ac>
 800ce0c:	f1aa 0a02 	sub.w	sl, sl, #2
 800ce10:	fa5f fa8a 	uxtb.w	sl, sl
 800ce14:	3901      	subs	r1, #1
 800ce16:	4652      	mov	r2, sl
 800ce18:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ce1c:	9109      	str	r1, [sp, #36]	@ 0x24
 800ce1e:	f7ff ff26 	bl	800cc6e <__exponent>
 800ce22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ce24:	1813      	adds	r3, r2, r0
 800ce26:	2a01      	cmp	r2, #1
 800ce28:	4681      	mov	r9, r0
 800ce2a:	6123      	str	r3, [r4, #16]
 800ce2c:	dc02      	bgt.n	800ce34 <_printf_float+0x150>
 800ce2e:	6822      	ldr	r2, [r4, #0]
 800ce30:	07d2      	lsls	r2, r2, #31
 800ce32:	d501      	bpl.n	800ce38 <_printf_float+0x154>
 800ce34:	3301      	adds	r3, #1
 800ce36:	6123      	str	r3, [r4, #16]
 800ce38:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d0a2      	beq.n	800cd86 <_printf_float+0xa2>
 800ce40:	232d      	movs	r3, #45	@ 0x2d
 800ce42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce46:	e79e      	b.n	800cd86 <_printf_float+0xa2>
 800ce48:	9a06      	ldr	r2, [sp, #24]
 800ce4a:	2a47      	cmp	r2, #71	@ 0x47
 800ce4c:	d1c2      	bne.n	800cdd4 <_printf_float+0xf0>
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d1c0      	bne.n	800cdd4 <_printf_float+0xf0>
 800ce52:	2301      	movs	r3, #1
 800ce54:	e7bd      	b.n	800cdd2 <_printf_float+0xee>
 800ce56:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ce5a:	d9db      	bls.n	800ce14 <_printf_float+0x130>
 800ce5c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ce60:	d118      	bne.n	800ce94 <_printf_float+0x1b0>
 800ce62:	2900      	cmp	r1, #0
 800ce64:	6863      	ldr	r3, [r4, #4]
 800ce66:	dd0b      	ble.n	800ce80 <_printf_float+0x19c>
 800ce68:	6121      	str	r1, [r4, #16]
 800ce6a:	b913      	cbnz	r3, 800ce72 <_printf_float+0x18e>
 800ce6c:	6822      	ldr	r2, [r4, #0]
 800ce6e:	07d0      	lsls	r0, r2, #31
 800ce70:	d502      	bpl.n	800ce78 <_printf_float+0x194>
 800ce72:	3301      	adds	r3, #1
 800ce74:	440b      	add	r3, r1
 800ce76:	6123      	str	r3, [r4, #16]
 800ce78:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ce7a:	f04f 0900 	mov.w	r9, #0
 800ce7e:	e7db      	b.n	800ce38 <_printf_float+0x154>
 800ce80:	b913      	cbnz	r3, 800ce88 <_printf_float+0x1a4>
 800ce82:	6822      	ldr	r2, [r4, #0]
 800ce84:	07d2      	lsls	r2, r2, #31
 800ce86:	d501      	bpl.n	800ce8c <_printf_float+0x1a8>
 800ce88:	3302      	adds	r3, #2
 800ce8a:	e7f4      	b.n	800ce76 <_printf_float+0x192>
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	e7f2      	b.n	800ce76 <_printf_float+0x192>
 800ce90:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ce94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce96:	4299      	cmp	r1, r3
 800ce98:	db05      	blt.n	800cea6 <_printf_float+0x1c2>
 800ce9a:	6823      	ldr	r3, [r4, #0]
 800ce9c:	6121      	str	r1, [r4, #16]
 800ce9e:	07d8      	lsls	r0, r3, #31
 800cea0:	d5ea      	bpl.n	800ce78 <_printf_float+0x194>
 800cea2:	1c4b      	adds	r3, r1, #1
 800cea4:	e7e7      	b.n	800ce76 <_printf_float+0x192>
 800cea6:	2900      	cmp	r1, #0
 800cea8:	bfd4      	ite	le
 800ceaa:	f1c1 0202 	rsble	r2, r1, #2
 800ceae:	2201      	movgt	r2, #1
 800ceb0:	4413      	add	r3, r2
 800ceb2:	e7e0      	b.n	800ce76 <_printf_float+0x192>
 800ceb4:	6823      	ldr	r3, [r4, #0]
 800ceb6:	055a      	lsls	r2, r3, #21
 800ceb8:	d407      	bmi.n	800ceca <_printf_float+0x1e6>
 800ceba:	6923      	ldr	r3, [r4, #16]
 800cebc:	4642      	mov	r2, r8
 800cebe:	4631      	mov	r1, r6
 800cec0:	4628      	mov	r0, r5
 800cec2:	47b8      	blx	r7
 800cec4:	3001      	adds	r0, #1
 800cec6:	d12b      	bne.n	800cf20 <_printf_float+0x23c>
 800cec8:	e767      	b.n	800cd9a <_printf_float+0xb6>
 800ceca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cece:	f240 80dd 	bls.w	800d08c <_printf_float+0x3a8>
 800ced2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ced6:	2200      	movs	r2, #0
 800ced8:	2300      	movs	r3, #0
 800ceda:	f7f3 fdfd 	bl	8000ad8 <__aeabi_dcmpeq>
 800cede:	2800      	cmp	r0, #0
 800cee0:	d033      	beq.n	800cf4a <_printf_float+0x266>
 800cee2:	4a37      	ldr	r2, [pc, #220]	@ (800cfc0 <_printf_float+0x2dc>)
 800cee4:	2301      	movs	r3, #1
 800cee6:	4631      	mov	r1, r6
 800cee8:	4628      	mov	r0, r5
 800ceea:	47b8      	blx	r7
 800ceec:	3001      	adds	r0, #1
 800ceee:	f43f af54 	beq.w	800cd9a <_printf_float+0xb6>
 800cef2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cef6:	4543      	cmp	r3, r8
 800cef8:	db02      	blt.n	800cf00 <_printf_float+0x21c>
 800cefa:	6823      	ldr	r3, [r4, #0]
 800cefc:	07d8      	lsls	r0, r3, #31
 800cefe:	d50f      	bpl.n	800cf20 <_printf_float+0x23c>
 800cf00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf04:	4631      	mov	r1, r6
 800cf06:	4628      	mov	r0, r5
 800cf08:	47b8      	blx	r7
 800cf0a:	3001      	adds	r0, #1
 800cf0c:	f43f af45 	beq.w	800cd9a <_printf_float+0xb6>
 800cf10:	f04f 0900 	mov.w	r9, #0
 800cf14:	f108 38ff 	add.w	r8, r8, #4294967295
 800cf18:	f104 0a1a 	add.w	sl, r4, #26
 800cf1c:	45c8      	cmp	r8, r9
 800cf1e:	dc09      	bgt.n	800cf34 <_printf_float+0x250>
 800cf20:	6823      	ldr	r3, [r4, #0]
 800cf22:	079b      	lsls	r3, r3, #30
 800cf24:	f100 8103 	bmi.w	800d12e <_printf_float+0x44a>
 800cf28:	68e0      	ldr	r0, [r4, #12]
 800cf2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf2c:	4298      	cmp	r0, r3
 800cf2e:	bfb8      	it	lt
 800cf30:	4618      	movlt	r0, r3
 800cf32:	e734      	b.n	800cd9e <_printf_float+0xba>
 800cf34:	2301      	movs	r3, #1
 800cf36:	4652      	mov	r2, sl
 800cf38:	4631      	mov	r1, r6
 800cf3a:	4628      	mov	r0, r5
 800cf3c:	47b8      	blx	r7
 800cf3e:	3001      	adds	r0, #1
 800cf40:	f43f af2b 	beq.w	800cd9a <_printf_float+0xb6>
 800cf44:	f109 0901 	add.w	r9, r9, #1
 800cf48:	e7e8      	b.n	800cf1c <_printf_float+0x238>
 800cf4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	dc39      	bgt.n	800cfc4 <_printf_float+0x2e0>
 800cf50:	4a1b      	ldr	r2, [pc, #108]	@ (800cfc0 <_printf_float+0x2dc>)
 800cf52:	2301      	movs	r3, #1
 800cf54:	4631      	mov	r1, r6
 800cf56:	4628      	mov	r0, r5
 800cf58:	47b8      	blx	r7
 800cf5a:	3001      	adds	r0, #1
 800cf5c:	f43f af1d 	beq.w	800cd9a <_printf_float+0xb6>
 800cf60:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cf64:	ea59 0303 	orrs.w	r3, r9, r3
 800cf68:	d102      	bne.n	800cf70 <_printf_float+0x28c>
 800cf6a:	6823      	ldr	r3, [r4, #0]
 800cf6c:	07d9      	lsls	r1, r3, #31
 800cf6e:	d5d7      	bpl.n	800cf20 <_printf_float+0x23c>
 800cf70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf74:	4631      	mov	r1, r6
 800cf76:	4628      	mov	r0, r5
 800cf78:	47b8      	blx	r7
 800cf7a:	3001      	adds	r0, #1
 800cf7c:	f43f af0d 	beq.w	800cd9a <_printf_float+0xb6>
 800cf80:	f04f 0a00 	mov.w	sl, #0
 800cf84:	f104 0b1a 	add.w	fp, r4, #26
 800cf88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf8a:	425b      	negs	r3, r3
 800cf8c:	4553      	cmp	r3, sl
 800cf8e:	dc01      	bgt.n	800cf94 <_printf_float+0x2b0>
 800cf90:	464b      	mov	r3, r9
 800cf92:	e793      	b.n	800cebc <_printf_float+0x1d8>
 800cf94:	2301      	movs	r3, #1
 800cf96:	465a      	mov	r2, fp
 800cf98:	4631      	mov	r1, r6
 800cf9a:	4628      	mov	r0, r5
 800cf9c:	47b8      	blx	r7
 800cf9e:	3001      	adds	r0, #1
 800cfa0:	f43f aefb 	beq.w	800cd9a <_printf_float+0xb6>
 800cfa4:	f10a 0a01 	add.w	sl, sl, #1
 800cfa8:	e7ee      	b.n	800cf88 <_printf_float+0x2a4>
 800cfaa:	bf00      	nop
 800cfac:	7fefffff 	.word	0x7fefffff
 800cfb0:	0801118c 	.word	0x0801118c
 800cfb4:	08011188 	.word	0x08011188
 800cfb8:	08011194 	.word	0x08011194
 800cfbc:	08011190 	.word	0x08011190
 800cfc0:	08011198 	.word	0x08011198
 800cfc4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cfc6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cfca:	4553      	cmp	r3, sl
 800cfcc:	bfa8      	it	ge
 800cfce:	4653      	movge	r3, sl
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	4699      	mov	r9, r3
 800cfd4:	dc36      	bgt.n	800d044 <_printf_float+0x360>
 800cfd6:	f04f 0b00 	mov.w	fp, #0
 800cfda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cfde:	f104 021a 	add.w	r2, r4, #26
 800cfe2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cfe4:	9306      	str	r3, [sp, #24]
 800cfe6:	eba3 0309 	sub.w	r3, r3, r9
 800cfea:	455b      	cmp	r3, fp
 800cfec:	dc31      	bgt.n	800d052 <_printf_float+0x36e>
 800cfee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cff0:	459a      	cmp	sl, r3
 800cff2:	dc3a      	bgt.n	800d06a <_printf_float+0x386>
 800cff4:	6823      	ldr	r3, [r4, #0]
 800cff6:	07da      	lsls	r2, r3, #31
 800cff8:	d437      	bmi.n	800d06a <_printf_float+0x386>
 800cffa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cffc:	ebaa 0903 	sub.w	r9, sl, r3
 800d000:	9b06      	ldr	r3, [sp, #24]
 800d002:	ebaa 0303 	sub.w	r3, sl, r3
 800d006:	4599      	cmp	r9, r3
 800d008:	bfa8      	it	ge
 800d00a:	4699      	movge	r9, r3
 800d00c:	f1b9 0f00 	cmp.w	r9, #0
 800d010:	dc33      	bgt.n	800d07a <_printf_float+0x396>
 800d012:	f04f 0800 	mov.w	r8, #0
 800d016:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d01a:	f104 0b1a 	add.w	fp, r4, #26
 800d01e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d020:	ebaa 0303 	sub.w	r3, sl, r3
 800d024:	eba3 0309 	sub.w	r3, r3, r9
 800d028:	4543      	cmp	r3, r8
 800d02a:	f77f af79 	ble.w	800cf20 <_printf_float+0x23c>
 800d02e:	2301      	movs	r3, #1
 800d030:	465a      	mov	r2, fp
 800d032:	4631      	mov	r1, r6
 800d034:	4628      	mov	r0, r5
 800d036:	47b8      	blx	r7
 800d038:	3001      	adds	r0, #1
 800d03a:	f43f aeae 	beq.w	800cd9a <_printf_float+0xb6>
 800d03e:	f108 0801 	add.w	r8, r8, #1
 800d042:	e7ec      	b.n	800d01e <_printf_float+0x33a>
 800d044:	4642      	mov	r2, r8
 800d046:	4631      	mov	r1, r6
 800d048:	4628      	mov	r0, r5
 800d04a:	47b8      	blx	r7
 800d04c:	3001      	adds	r0, #1
 800d04e:	d1c2      	bne.n	800cfd6 <_printf_float+0x2f2>
 800d050:	e6a3      	b.n	800cd9a <_printf_float+0xb6>
 800d052:	2301      	movs	r3, #1
 800d054:	4631      	mov	r1, r6
 800d056:	4628      	mov	r0, r5
 800d058:	9206      	str	r2, [sp, #24]
 800d05a:	47b8      	blx	r7
 800d05c:	3001      	adds	r0, #1
 800d05e:	f43f ae9c 	beq.w	800cd9a <_printf_float+0xb6>
 800d062:	9a06      	ldr	r2, [sp, #24]
 800d064:	f10b 0b01 	add.w	fp, fp, #1
 800d068:	e7bb      	b.n	800cfe2 <_printf_float+0x2fe>
 800d06a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d06e:	4631      	mov	r1, r6
 800d070:	4628      	mov	r0, r5
 800d072:	47b8      	blx	r7
 800d074:	3001      	adds	r0, #1
 800d076:	d1c0      	bne.n	800cffa <_printf_float+0x316>
 800d078:	e68f      	b.n	800cd9a <_printf_float+0xb6>
 800d07a:	9a06      	ldr	r2, [sp, #24]
 800d07c:	464b      	mov	r3, r9
 800d07e:	4442      	add	r2, r8
 800d080:	4631      	mov	r1, r6
 800d082:	4628      	mov	r0, r5
 800d084:	47b8      	blx	r7
 800d086:	3001      	adds	r0, #1
 800d088:	d1c3      	bne.n	800d012 <_printf_float+0x32e>
 800d08a:	e686      	b.n	800cd9a <_printf_float+0xb6>
 800d08c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d090:	f1ba 0f01 	cmp.w	sl, #1
 800d094:	dc01      	bgt.n	800d09a <_printf_float+0x3b6>
 800d096:	07db      	lsls	r3, r3, #31
 800d098:	d536      	bpl.n	800d108 <_printf_float+0x424>
 800d09a:	2301      	movs	r3, #1
 800d09c:	4642      	mov	r2, r8
 800d09e:	4631      	mov	r1, r6
 800d0a0:	4628      	mov	r0, r5
 800d0a2:	47b8      	blx	r7
 800d0a4:	3001      	adds	r0, #1
 800d0a6:	f43f ae78 	beq.w	800cd9a <_printf_float+0xb6>
 800d0aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d0ae:	4631      	mov	r1, r6
 800d0b0:	4628      	mov	r0, r5
 800d0b2:	47b8      	blx	r7
 800d0b4:	3001      	adds	r0, #1
 800d0b6:	f43f ae70 	beq.w	800cd9a <_printf_float+0xb6>
 800d0ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d0be:	2200      	movs	r2, #0
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d0c6:	f7f3 fd07 	bl	8000ad8 <__aeabi_dcmpeq>
 800d0ca:	b9c0      	cbnz	r0, 800d0fe <_printf_float+0x41a>
 800d0cc:	4653      	mov	r3, sl
 800d0ce:	f108 0201 	add.w	r2, r8, #1
 800d0d2:	4631      	mov	r1, r6
 800d0d4:	4628      	mov	r0, r5
 800d0d6:	47b8      	blx	r7
 800d0d8:	3001      	adds	r0, #1
 800d0da:	d10c      	bne.n	800d0f6 <_printf_float+0x412>
 800d0dc:	e65d      	b.n	800cd9a <_printf_float+0xb6>
 800d0de:	2301      	movs	r3, #1
 800d0e0:	465a      	mov	r2, fp
 800d0e2:	4631      	mov	r1, r6
 800d0e4:	4628      	mov	r0, r5
 800d0e6:	47b8      	blx	r7
 800d0e8:	3001      	adds	r0, #1
 800d0ea:	f43f ae56 	beq.w	800cd9a <_printf_float+0xb6>
 800d0ee:	f108 0801 	add.w	r8, r8, #1
 800d0f2:	45d0      	cmp	r8, sl
 800d0f4:	dbf3      	blt.n	800d0de <_printf_float+0x3fa>
 800d0f6:	464b      	mov	r3, r9
 800d0f8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d0fc:	e6df      	b.n	800cebe <_printf_float+0x1da>
 800d0fe:	f04f 0800 	mov.w	r8, #0
 800d102:	f104 0b1a 	add.w	fp, r4, #26
 800d106:	e7f4      	b.n	800d0f2 <_printf_float+0x40e>
 800d108:	2301      	movs	r3, #1
 800d10a:	4642      	mov	r2, r8
 800d10c:	e7e1      	b.n	800d0d2 <_printf_float+0x3ee>
 800d10e:	2301      	movs	r3, #1
 800d110:	464a      	mov	r2, r9
 800d112:	4631      	mov	r1, r6
 800d114:	4628      	mov	r0, r5
 800d116:	47b8      	blx	r7
 800d118:	3001      	adds	r0, #1
 800d11a:	f43f ae3e 	beq.w	800cd9a <_printf_float+0xb6>
 800d11e:	f108 0801 	add.w	r8, r8, #1
 800d122:	68e3      	ldr	r3, [r4, #12]
 800d124:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d126:	1a5b      	subs	r3, r3, r1
 800d128:	4543      	cmp	r3, r8
 800d12a:	dcf0      	bgt.n	800d10e <_printf_float+0x42a>
 800d12c:	e6fc      	b.n	800cf28 <_printf_float+0x244>
 800d12e:	f04f 0800 	mov.w	r8, #0
 800d132:	f104 0919 	add.w	r9, r4, #25
 800d136:	e7f4      	b.n	800d122 <_printf_float+0x43e>

0800d138 <_printf_common>:
 800d138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d13c:	4616      	mov	r6, r2
 800d13e:	4698      	mov	r8, r3
 800d140:	688a      	ldr	r2, [r1, #8]
 800d142:	690b      	ldr	r3, [r1, #16]
 800d144:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d148:	4293      	cmp	r3, r2
 800d14a:	bfb8      	it	lt
 800d14c:	4613      	movlt	r3, r2
 800d14e:	6033      	str	r3, [r6, #0]
 800d150:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d154:	4607      	mov	r7, r0
 800d156:	460c      	mov	r4, r1
 800d158:	b10a      	cbz	r2, 800d15e <_printf_common+0x26>
 800d15a:	3301      	adds	r3, #1
 800d15c:	6033      	str	r3, [r6, #0]
 800d15e:	6823      	ldr	r3, [r4, #0]
 800d160:	0699      	lsls	r1, r3, #26
 800d162:	bf42      	ittt	mi
 800d164:	6833      	ldrmi	r3, [r6, #0]
 800d166:	3302      	addmi	r3, #2
 800d168:	6033      	strmi	r3, [r6, #0]
 800d16a:	6825      	ldr	r5, [r4, #0]
 800d16c:	f015 0506 	ands.w	r5, r5, #6
 800d170:	d106      	bne.n	800d180 <_printf_common+0x48>
 800d172:	f104 0a19 	add.w	sl, r4, #25
 800d176:	68e3      	ldr	r3, [r4, #12]
 800d178:	6832      	ldr	r2, [r6, #0]
 800d17a:	1a9b      	subs	r3, r3, r2
 800d17c:	42ab      	cmp	r3, r5
 800d17e:	dc26      	bgt.n	800d1ce <_printf_common+0x96>
 800d180:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d184:	6822      	ldr	r2, [r4, #0]
 800d186:	3b00      	subs	r3, #0
 800d188:	bf18      	it	ne
 800d18a:	2301      	movne	r3, #1
 800d18c:	0692      	lsls	r2, r2, #26
 800d18e:	d42b      	bmi.n	800d1e8 <_printf_common+0xb0>
 800d190:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d194:	4641      	mov	r1, r8
 800d196:	4638      	mov	r0, r7
 800d198:	47c8      	blx	r9
 800d19a:	3001      	adds	r0, #1
 800d19c:	d01e      	beq.n	800d1dc <_printf_common+0xa4>
 800d19e:	6823      	ldr	r3, [r4, #0]
 800d1a0:	6922      	ldr	r2, [r4, #16]
 800d1a2:	f003 0306 	and.w	r3, r3, #6
 800d1a6:	2b04      	cmp	r3, #4
 800d1a8:	bf02      	ittt	eq
 800d1aa:	68e5      	ldreq	r5, [r4, #12]
 800d1ac:	6833      	ldreq	r3, [r6, #0]
 800d1ae:	1aed      	subeq	r5, r5, r3
 800d1b0:	68a3      	ldr	r3, [r4, #8]
 800d1b2:	bf0c      	ite	eq
 800d1b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d1b8:	2500      	movne	r5, #0
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	bfc4      	itt	gt
 800d1be:	1a9b      	subgt	r3, r3, r2
 800d1c0:	18ed      	addgt	r5, r5, r3
 800d1c2:	2600      	movs	r6, #0
 800d1c4:	341a      	adds	r4, #26
 800d1c6:	42b5      	cmp	r5, r6
 800d1c8:	d11a      	bne.n	800d200 <_printf_common+0xc8>
 800d1ca:	2000      	movs	r0, #0
 800d1cc:	e008      	b.n	800d1e0 <_printf_common+0xa8>
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	4652      	mov	r2, sl
 800d1d2:	4641      	mov	r1, r8
 800d1d4:	4638      	mov	r0, r7
 800d1d6:	47c8      	blx	r9
 800d1d8:	3001      	adds	r0, #1
 800d1da:	d103      	bne.n	800d1e4 <_printf_common+0xac>
 800d1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d1e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1e4:	3501      	adds	r5, #1
 800d1e6:	e7c6      	b.n	800d176 <_printf_common+0x3e>
 800d1e8:	18e1      	adds	r1, r4, r3
 800d1ea:	1c5a      	adds	r2, r3, #1
 800d1ec:	2030      	movs	r0, #48	@ 0x30
 800d1ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d1f2:	4422      	add	r2, r4
 800d1f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d1f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d1fc:	3302      	adds	r3, #2
 800d1fe:	e7c7      	b.n	800d190 <_printf_common+0x58>
 800d200:	2301      	movs	r3, #1
 800d202:	4622      	mov	r2, r4
 800d204:	4641      	mov	r1, r8
 800d206:	4638      	mov	r0, r7
 800d208:	47c8      	blx	r9
 800d20a:	3001      	adds	r0, #1
 800d20c:	d0e6      	beq.n	800d1dc <_printf_common+0xa4>
 800d20e:	3601      	adds	r6, #1
 800d210:	e7d9      	b.n	800d1c6 <_printf_common+0x8e>
	...

0800d214 <_printf_i>:
 800d214:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d218:	7e0f      	ldrb	r7, [r1, #24]
 800d21a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d21c:	2f78      	cmp	r7, #120	@ 0x78
 800d21e:	4691      	mov	r9, r2
 800d220:	4680      	mov	r8, r0
 800d222:	460c      	mov	r4, r1
 800d224:	469a      	mov	sl, r3
 800d226:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d22a:	d807      	bhi.n	800d23c <_printf_i+0x28>
 800d22c:	2f62      	cmp	r7, #98	@ 0x62
 800d22e:	d80a      	bhi.n	800d246 <_printf_i+0x32>
 800d230:	2f00      	cmp	r7, #0
 800d232:	f000 80d1 	beq.w	800d3d8 <_printf_i+0x1c4>
 800d236:	2f58      	cmp	r7, #88	@ 0x58
 800d238:	f000 80b8 	beq.w	800d3ac <_printf_i+0x198>
 800d23c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d240:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d244:	e03a      	b.n	800d2bc <_printf_i+0xa8>
 800d246:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d24a:	2b15      	cmp	r3, #21
 800d24c:	d8f6      	bhi.n	800d23c <_printf_i+0x28>
 800d24e:	a101      	add	r1, pc, #4	@ (adr r1, 800d254 <_printf_i+0x40>)
 800d250:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d254:	0800d2ad 	.word	0x0800d2ad
 800d258:	0800d2c1 	.word	0x0800d2c1
 800d25c:	0800d23d 	.word	0x0800d23d
 800d260:	0800d23d 	.word	0x0800d23d
 800d264:	0800d23d 	.word	0x0800d23d
 800d268:	0800d23d 	.word	0x0800d23d
 800d26c:	0800d2c1 	.word	0x0800d2c1
 800d270:	0800d23d 	.word	0x0800d23d
 800d274:	0800d23d 	.word	0x0800d23d
 800d278:	0800d23d 	.word	0x0800d23d
 800d27c:	0800d23d 	.word	0x0800d23d
 800d280:	0800d3bf 	.word	0x0800d3bf
 800d284:	0800d2eb 	.word	0x0800d2eb
 800d288:	0800d379 	.word	0x0800d379
 800d28c:	0800d23d 	.word	0x0800d23d
 800d290:	0800d23d 	.word	0x0800d23d
 800d294:	0800d3e1 	.word	0x0800d3e1
 800d298:	0800d23d 	.word	0x0800d23d
 800d29c:	0800d2eb 	.word	0x0800d2eb
 800d2a0:	0800d23d 	.word	0x0800d23d
 800d2a4:	0800d23d 	.word	0x0800d23d
 800d2a8:	0800d381 	.word	0x0800d381
 800d2ac:	6833      	ldr	r3, [r6, #0]
 800d2ae:	1d1a      	adds	r2, r3, #4
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	6032      	str	r2, [r6, #0]
 800d2b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d2b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d2bc:	2301      	movs	r3, #1
 800d2be:	e09c      	b.n	800d3fa <_printf_i+0x1e6>
 800d2c0:	6833      	ldr	r3, [r6, #0]
 800d2c2:	6820      	ldr	r0, [r4, #0]
 800d2c4:	1d19      	adds	r1, r3, #4
 800d2c6:	6031      	str	r1, [r6, #0]
 800d2c8:	0606      	lsls	r6, r0, #24
 800d2ca:	d501      	bpl.n	800d2d0 <_printf_i+0xbc>
 800d2cc:	681d      	ldr	r5, [r3, #0]
 800d2ce:	e003      	b.n	800d2d8 <_printf_i+0xc4>
 800d2d0:	0645      	lsls	r5, r0, #25
 800d2d2:	d5fb      	bpl.n	800d2cc <_printf_i+0xb8>
 800d2d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d2d8:	2d00      	cmp	r5, #0
 800d2da:	da03      	bge.n	800d2e4 <_printf_i+0xd0>
 800d2dc:	232d      	movs	r3, #45	@ 0x2d
 800d2de:	426d      	negs	r5, r5
 800d2e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d2e4:	4858      	ldr	r0, [pc, #352]	@ (800d448 <_printf_i+0x234>)
 800d2e6:	230a      	movs	r3, #10
 800d2e8:	e011      	b.n	800d30e <_printf_i+0xfa>
 800d2ea:	6821      	ldr	r1, [r4, #0]
 800d2ec:	6833      	ldr	r3, [r6, #0]
 800d2ee:	0608      	lsls	r0, r1, #24
 800d2f0:	f853 5b04 	ldr.w	r5, [r3], #4
 800d2f4:	d402      	bmi.n	800d2fc <_printf_i+0xe8>
 800d2f6:	0649      	lsls	r1, r1, #25
 800d2f8:	bf48      	it	mi
 800d2fa:	b2ad      	uxthmi	r5, r5
 800d2fc:	2f6f      	cmp	r7, #111	@ 0x6f
 800d2fe:	4852      	ldr	r0, [pc, #328]	@ (800d448 <_printf_i+0x234>)
 800d300:	6033      	str	r3, [r6, #0]
 800d302:	bf14      	ite	ne
 800d304:	230a      	movne	r3, #10
 800d306:	2308      	moveq	r3, #8
 800d308:	2100      	movs	r1, #0
 800d30a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d30e:	6866      	ldr	r6, [r4, #4]
 800d310:	60a6      	str	r6, [r4, #8]
 800d312:	2e00      	cmp	r6, #0
 800d314:	db05      	blt.n	800d322 <_printf_i+0x10e>
 800d316:	6821      	ldr	r1, [r4, #0]
 800d318:	432e      	orrs	r6, r5
 800d31a:	f021 0104 	bic.w	r1, r1, #4
 800d31e:	6021      	str	r1, [r4, #0]
 800d320:	d04b      	beq.n	800d3ba <_printf_i+0x1a6>
 800d322:	4616      	mov	r6, r2
 800d324:	fbb5 f1f3 	udiv	r1, r5, r3
 800d328:	fb03 5711 	mls	r7, r3, r1, r5
 800d32c:	5dc7      	ldrb	r7, [r0, r7]
 800d32e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d332:	462f      	mov	r7, r5
 800d334:	42bb      	cmp	r3, r7
 800d336:	460d      	mov	r5, r1
 800d338:	d9f4      	bls.n	800d324 <_printf_i+0x110>
 800d33a:	2b08      	cmp	r3, #8
 800d33c:	d10b      	bne.n	800d356 <_printf_i+0x142>
 800d33e:	6823      	ldr	r3, [r4, #0]
 800d340:	07df      	lsls	r7, r3, #31
 800d342:	d508      	bpl.n	800d356 <_printf_i+0x142>
 800d344:	6923      	ldr	r3, [r4, #16]
 800d346:	6861      	ldr	r1, [r4, #4]
 800d348:	4299      	cmp	r1, r3
 800d34a:	bfde      	ittt	le
 800d34c:	2330      	movle	r3, #48	@ 0x30
 800d34e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d352:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d356:	1b92      	subs	r2, r2, r6
 800d358:	6122      	str	r2, [r4, #16]
 800d35a:	f8cd a000 	str.w	sl, [sp]
 800d35e:	464b      	mov	r3, r9
 800d360:	aa03      	add	r2, sp, #12
 800d362:	4621      	mov	r1, r4
 800d364:	4640      	mov	r0, r8
 800d366:	f7ff fee7 	bl	800d138 <_printf_common>
 800d36a:	3001      	adds	r0, #1
 800d36c:	d14a      	bne.n	800d404 <_printf_i+0x1f0>
 800d36e:	f04f 30ff 	mov.w	r0, #4294967295
 800d372:	b004      	add	sp, #16
 800d374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d378:	6823      	ldr	r3, [r4, #0]
 800d37a:	f043 0320 	orr.w	r3, r3, #32
 800d37e:	6023      	str	r3, [r4, #0]
 800d380:	4832      	ldr	r0, [pc, #200]	@ (800d44c <_printf_i+0x238>)
 800d382:	2778      	movs	r7, #120	@ 0x78
 800d384:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d388:	6823      	ldr	r3, [r4, #0]
 800d38a:	6831      	ldr	r1, [r6, #0]
 800d38c:	061f      	lsls	r7, r3, #24
 800d38e:	f851 5b04 	ldr.w	r5, [r1], #4
 800d392:	d402      	bmi.n	800d39a <_printf_i+0x186>
 800d394:	065f      	lsls	r7, r3, #25
 800d396:	bf48      	it	mi
 800d398:	b2ad      	uxthmi	r5, r5
 800d39a:	6031      	str	r1, [r6, #0]
 800d39c:	07d9      	lsls	r1, r3, #31
 800d39e:	bf44      	itt	mi
 800d3a0:	f043 0320 	orrmi.w	r3, r3, #32
 800d3a4:	6023      	strmi	r3, [r4, #0]
 800d3a6:	b11d      	cbz	r5, 800d3b0 <_printf_i+0x19c>
 800d3a8:	2310      	movs	r3, #16
 800d3aa:	e7ad      	b.n	800d308 <_printf_i+0xf4>
 800d3ac:	4826      	ldr	r0, [pc, #152]	@ (800d448 <_printf_i+0x234>)
 800d3ae:	e7e9      	b.n	800d384 <_printf_i+0x170>
 800d3b0:	6823      	ldr	r3, [r4, #0]
 800d3b2:	f023 0320 	bic.w	r3, r3, #32
 800d3b6:	6023      	str	r3, [r4, #0]
 800d3b8:	e7f6      	b.n	800d3a8 <_printf_i+0x194>
 800d3ba:	4616      	mov	r6, r2
 800d3bc:	e7bd      	b.n	800d33a <_printf_i+0x126>
 800d3be:	6833      	ldr	r3, [r6, #0]
 800d3c0:	6825      	ldr	r5, [r4, #0]
 800d3c2:	6961      	ldr	r1, [r4, #20]
 800d3c4:	1d18      	adds	r0, r3, #4
 800d3c6:	6030      	str	r0, [r6, #0]
 800d3c8:	062e      	lsls	r6, r5, #24
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	d501      	bpl.n	800d3d2 <_printf_i+0x1be>
 800d3ce:	6019      	str	r1, [r3, #0]
 800d3d0:	e002      	b.n	800d3d8 <_printf_i+0x1c4>
 800d3d2:	0668      	lsls	r0, r5, #25
 800d3d4:	d5fb      	bpl.n	800d3ce <_printf_i+0x1ba>
 800d3d6:	8019      	strh	r1, [r3, #0]
 800d3d8:	2300      	movs	r3, #0
 800d3da:	6123      	str	r3, [r4, #16]
 800d3dc:	4616      	mov	r6, r2
 800d3de:	e7bc      	b.n	800d35a <_printf_i+0x146>
 800d3e0:	6833      	ldr	r3, [r6, #0]
 800d3e2:	1d1a      	adds	r2, r3, #4
 800d3e4:	6032      	str	r2, [r6, #0]
 800d3e6:	681e      	ldr	r6, [r3, #0]
 800d3e8:	6862      	ldr	r2, [r4, #4]
 800d3ea:	2100      	movs	r1, #0
 800d3ec:	4630      	mov	r0, r6
 800d3ee:	f7f2 fef7 	bl	80001e0 <memchr>
 800d3f2:	b108      	cbz	r0, 800d3f8 <_printf_i+0x1e4>
 800d3f4:	1b80      	subs	r0, r0, r6
 800d3f6:	6060      	str	r0, [r4, #4]
 800d3f8:	6863      	ldr	r3, [r4, #4]
 800d3fa:	6123      	str	r3, [r4, #16]
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d402:	e7aa      	b.n	800d35a <_printf_i+0x146>
 800d404:	6923      	ldr	r3, [r4, #16]
 800d406:	4632      	mov	r2, r6
 800d408:	4649      	mov	r1, r9
 800d40a:	4640      	mov	r0, r8
 800d40c:	47d0      	blx	sl
 800d40e:	3001      	adds	r0, #1
 800d410:	d0ad      	beq.n	800d36e <_printf_i+0x15a>
 800d412:	6823      	ldr	r3, [r4, #0]
 800d414:	079b      	lsls	r3, r3, #30
 800d416:	d413      	bmi.n	800d440 <_printf_i+0x22c>
 800d418:	68e0      	ldr	r0, [r4, #12]
 800d41a:	9b03      	ldr	r3, [sp, #12]
 800d41c:	4298      	cmp	r0, r3
 800d41e:	bfb8      	it	lt
 800d420:	4618      	movlt	r0, r3
 800d422:	e7a6      	b.n	800d372 <_printf_i+0x15e>
 800d424:	2301      	movs	r3, #1
 800d426:	4632      	mov	r2, r6
 800d428:	4649      	mov	r1, r9
 800d42a:	4640      	mov	r0, r8
 800d42c:	47d0      	blx	sl
 800d42e:	3001      	adds	r0, #1
 800d430:	d09d      	beq.n	800d36e <_printf_i+0x15a>
 800d432:	3501      	adds	r5, #1
 800d434:	68e3      	ldr	r3, [r4, #12]
 800d436:	9903      	ldr	r1, [sp, #12]
 800d438:	1a5b      	subs	r3, r3, r1
 800d43a:	42ab      	cmp	r3, r5
 800d43c:	dcf2      	bgt.n	800d424 <_printf_i+0x210>
 800d43e:	e7eb      	b.n	800d418 <_printf_i+0x204>
 800d440:	2500      	movs	r5, #0
 800d442:	f104 0619 	add.w	r6, r4, #25
 800d446:	e7f5      	b.n	800d434 <_printf_i+0x220>
 800d448:	0801119a 	.word	0x0801119a
 800d44c:	080111ab 	.word	0x080111ab

0800d450 <_scanf_float>:
 800d450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d454:	b087      	sub	sp, #28
 800d456:	4691      	mov	r9, r2
 800d458:	9303      	str	r3, [sp, #12]
 800d45a:	688b      	ldr	r3, [r1, #8]
 800d45c:	1e5a      	subs	r2, r3, #1
 800d45e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d462:	bf81      	itttt	hi
 800d464:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d468:	eb03 0b05 	addhi.w	fp, r3, r5
 800d46c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d470:	608b      	strhi	r3, [r1, #8]
 800d472:	680b      	ldr	r3, [r1, #0]
 800d474:	460a      	mov	r2, r1
 800d476:	f04f 0500 	mov.w	r5, #0
 800d47a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d47e:	f842 3b1c 	str.w	r3, [r2], #28
 800d482:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d486:	4680      	mov	r8, r0
 800d488:	460c      	mov	r4, r1
 800d48a:	bf98      	it	ls
 800d48c:	f04f 0b00 	movls.w	fp, #0
 800d490:	9201      	str	r2, [sp, #4]
 800d492:	4616      	mov	r6, r2
 800d494:	46aa      	mov	sl, r5
 800d496:	462f      	mov	r7, r5
 800d498:	9502      	str	r5, [sp, #8]
 800d49a:	68a2      	ldr	r2, [r4, #8]
 800d49c:	b15a      	cbz	r2, 800d4b6 <_scanf_float+0x66>
 800d49e:	f8d9 3000 	ldr.w	r3, [r9]
 800d4a2:	781b      	ldrb	r3, [r3, #0]
 800d4a4:	2b4e      	cmp	r3, #78	@ 0x4e
 800d4a6:	d863      	bhi.n	800d570 <_scanf_float+0x120>
 800d4a8:	2b40      	cmp	r3, #64	@ 0x40
 800d4aa:	d83b      	bhi.n	800d524 <_scanf_float+0xd4>
 800d4ac:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d4b0:	b2c8      	uxtb	r0, r1
 800d4b2:	280e      	cmp	r0, #14
 800d4b4:	d939      	bls.n	800d52a <_scanf_float+0xda>
 800d4b6:	b11f      	cbz	r7, 800d4c0 <_scanf_float+0x70>
 800d4b8:	6823      	ldr	r3, [r4, #0]
 800d4ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d4be:	6023      	str	r3, [r4, #0]
 800d4c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d4c4:	f1ba 0f01 	cmp.w	sl, #1
 800d4c8:	f200 8114 	bhi.w	800d6f4 <_scanf_float+0x2a4>
 800d4cc:	9b01      	ldr	r3, [sp, #4]
 800d4ce:	429e      	cmp	r6, r3
 800d4d0:	f200 8105 	bhi.w	800d6de <_scanf_float+0x28e>
 800d4d4:	2001      	movs	r0, #1
 800d4d6:	b007      	add	sp, #28
 800d4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4dc:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d4e0:	2a0d      	cmp	r2, #13
 800d4e2:	d8e8      	bhi.n	800d4b6 <_scanf_float+0x66>
 800d4e4:	a101      	add	r1, pc, #4	@ (adr r1, 800d4ec <_scanf_float+0x9c>)
 800d4e6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d4ea:	bf00      	nop
 800d4ec:	0800d635 	.word	0x0800d635
 800d4f0:	0800d4b7 	.word	0x0800d4b7
 800d4f4:	0800d4b7 	.word	0x0800d4b7
 800d4f8:	0800d4b7 	.word	0x0800d4b7
 800d4fc:	0800d691 	.word	0x0800d691
 800d500:	0800d66b 	.word	0x0800d66b
 800d504:	0800d4b7 	.word	0x0800d4b7
 800d508:	0800d4b7 	.word	0x0800d4b7
 800d50c:	0800d643 	.word	0x0800d643
 800d510:	0800d4b7 	.word	0x0800d4b7
 800d514:	0800d4b7 	.word	0x0800d4b7
 800d518:	0800d4b7 	.word	0x0800d4b7
 800d51c:	0800d4b7 	.word	0x0800d4b7
 800d520:	0800d5ff 	.word	0x0800d5ff
 800d524:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800d528:	e7da      	b.n	800d4e0 <_scanf_float+0x90>
 800d52a:	290e      	cmp	r1, #14
 800d52c:	d8c3      	bhi.n	800d4b6 <_scanf_float+0x66>
 800d52e:	a001      	add	r0, pc, #4	@ (adr r0, 800d534 <_scanf_float+0xe4>)
 800d530:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d534:	0800d5ef 	.word	0x0800d5ef
 800d538:	0800d4b7 	.word	0x0800d4b7
 800d53c:	0800d5ef 	.word	0x0800d5ef
 800d540:	0800d67f 	.word	0x0800d67f
 800d544:	0800d4b7 	.word	0x0800d4b7
 800d548:	0800d591 	.word	0x0800d591
 800d54c:	0800d5d5 	.word	0x0800d5d5
 800d550:	0800d5d5 	.word	0x0800d5d5
 800d554:	0800d5d5 	.word	0x0800d5d5
 800d558:	0800d5d5 	.word	0x0800d5d5
 800d55c:	0800d5d5 	.word	0x0800d5d5
 800d560:	0800d5d5 	.word	0x0800d5d5
 800d564:	0800d5d5 	.word	0x0800d5d5
 800d568:	0800d5d5 	.word	0x0800d5d5
 800d56c:	0800d5d5 	.word	0x0800d5d5
 800d570:	2b6e      	cmp	r3, #110	@ 0x6e
 800d572:	d809      	bhi.n	800d588 <_scanf_float+0x138>
 800d574:	2b60      	cmp	r3, #96	@ 0x60
 800d576:	d8b1      	bhi.n	800d4dc <_scanf_float+0x8c>
 800d578:	2b54      	cmp	r3, #84	@ 0x54
 800d57a:	d07b      	beq.n	800d674 <_scanf_float+0x224>
 800d57c:	2b59      	cmp	r3, #89	@ 0x59
 800d57e:	d19a      	bne.n	800d4b6 <_scanf_float+0x66>
 800d580:	2d07      	cmp	r5, #7
 800d582:	d198      	bne.n	800d4b6 <_scanf_float+0x66>
 800d584:	2508      	movs	r5, #8
 800d586:	e02f      	b.n	800d5e8 <_scanf_float+0x198>
 800d588:	2b74      	cmp	r3, #116	@ 0x74
 800d58a:	d073      	beq.n	800d674 <_scanf_float+0x224>
 800d58c:	2b79      	cmp	r3, #121	@ 0x79
 800d58e:	e7f6      	b.n	800d57e <_scanf_float+0x12e>
 800d590:	6821      	ldr	r1, [r4, #0]
 800d592:	05c8      	lsls	r0, r1, #23
 800d594:	d51e      	bpl.n	800d5d4 <_scanf_float+0x184>
 800d596:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800d59a:	6021      	str	r1, [r4, #0]
 800d59c:	3701      	adds	r7, #1
 800d59e:	f1bb 0f00 	cmp.w	fp, #0
 800d5a2:	d003      	beq.n	800d5ac <_scanf_float+0x15c>
 800d5a4:	3201      	adds	r2, #1
 800d5a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d5aa:	60a2      	str	r2, [r4, #8]
 800d5ac:	68a3      	ldr	r3, [r4, #8]
 800d5ae:	3b01      	subs	r3, #1
 800d5b0:	60a3      	str	r3, [r4, #8]
 800d5b2:	6923      	ldr	r3, [r4, #16]
 800d5b4:	3301      	adds	r3, #1
 800d5b6:	6123      	str	r3, [r4, #16]
 800d5b8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d5bc:	3b01      	subs	r3, #1
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	f8c9 3004 	str.w	r3, [r9, #4]
 800d5c4:	f340 8082 	ble.w	800d6cc <_scanf_float+0x27c>
 800d5c8:	f8d9 3000 	ldr.w	r3, [r9]
 800d5cc:	3301      	adds	r3, #1
 800d5ce:	f8c9 3000 	str.w	r3, [r9]
 800d5d2:	e762      	b.n	800d49a <_scanf_float+0x4a>
 800d5d4:	eb1a 0105 	adds.w	r1, sl, r5
 800d5d8:	f47f af6d 	bne.w	800d4b6 <_scanf_float+0x66>
 800d5dc:	6822      	ldr	r2, [r4, #0]
 800d5de:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800d5e2:	6022      	str	r2, [r4, #0]
 800d5e4:	460d      	mov	r5, r1
 800d5e6:	468a      	mov	sl, r1
 800d5e8:	f806 3b01 	strb.w	r3, [r6], #1
 800d5ec:	e7de      	b.n	800d5ac <_scanf_float+0x15c>
 800d5ee:	6822      	ldr	r2, [r4, #0]
 800d5f0:	0610      	lsls	r0, r2, #24
 800d5f2:	f57f af60 	bpl.w	800d4b6 <_scanf_float+0x66>
 800d5f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d5fa:	6022      	str	r2, [r4, #0]
 800d5fc:	e7f4      	b.n	800d5e8 <_scanf_float+0x198>
 800d5fe:	f1ba 0f00 	cmp.w	sl, #0
 800d602:	d10c      	bne.n	800d61e <_scanf_float+0x1ce>
 800d604:	b977      	cbnz	r7, 800d624 <_scanf_float+0x1d4>
 800d606:	6822      	ldr	r2, [r4, #0]
 800d608:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d60c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d610:	d108      	bne.n	800d624 <_scanf_float+0x1d4>
 800d612:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d616:	6022      	str	r2, [r4, #0]
 800d618:	f04f 0a01 	mov.w	sl, #1
 800d61c:	e7e4      	b.n	800d5e8 <_scanf_float+0x198>
 800d61e:	f1ba 0f02 	cmp.w	sl, #2
 800d622:	d050      	beq.n	800d6c6 <_scanf_float+0x276>
 800d624:	2d01      	cmp	r5, #1
 800d626:	d002      	beq.n	800d62e <_scanf_float+0x1de>
 800d628:	2d04      	cmp	r5, #4
 800d62a:	f47f af44 	bne.w	800d4b6 <_scanf_float+0x66>
 800d62e:	3501      	adds	r5, #1
 800d630:	b2ed      	uxtb	r5, r5
 800d632:	e7d9      	b.n	800d5e8 <_scanf_float+0x198>
 800d634:	f1ba 0f01 	cmp.w	sl, #1
 800d638:	f47f af3d 	bne.w	800d4b6 <_scanf_float+0x66>
 800d63c:	f04f 0a02 	mov.w	sl, #2
 800d640:	e7d2      	b.n	800d5e8 <_scanf_float+0x198>
 800d642:	b975      	cbnz	r5, 800d662 <_scanf_float+0x212>
 800d644:	2f00      	cmp	r7, #0
 800d646:	f47f af37 	bne.w	800d4b8 <_scanf_float+0x68>
 800d64a:	6822      	ldr	r2, [r4, #0]
 800d64c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d650:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d654:	f040 8103 	bne.w	800d85e <_scanf_float+0x40e>
 800d658:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d65c:	6022      	str	r2, [r4, #0]
 800d65e:	2501      	movs	r5, #1
 800d660:	e7c2      	b.n	800d5e8 <_scanf_float+0x198>
 800d662:	2d03      	cmp	r5, #3
 800d664:	d0e3      	beq.n	800d62e <_scanf_float+0x1de>
 800d666:	2d05      	cmp	r5, #5
 800d668:	e7df      	b.n	800d62a <_scanf_float+0x1da>
 800d66a:	2d02      	cmp	r5, #2
 800d66c:	f47f af23 	bne.w	800d4b6 <_scanf_float+0x66>
 800d670:	2503      	movs	r5, #3
 800d672:	e7b9      	b.n	800d5e8 <_scanf_float+0x198>
 800d674:	2d06      	cmp	r5, #6
 800d676:	f47f af1e 	bne.w	800d4b6 <_scanf_float+0x66>
 800d67a:	2507      	movs	r5, #7
 800d67c:	e7b4      	b.n	800d5e8 <_scanf_float+0x198>
 800d67e:	6822      	ldr	r2, [r4, #0]
 800d680:	0591      	lsls	r1, r2, #22
 800d682:	f57f af18 	bpl.w	800d4b6 <_scanf_float+0x66>
 800d686:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800d68a:	6022      	str	r2, [r4, #0]
 800d68c:	9702      	str	r7, [sp, #8]
 800d68e:	e7ab      	b.n	800d5e8 <_scanf_float+0x198>
 800d690:	6822      	ldr	r2, [r4, #0]
 800d692:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800d696:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d69a:	d005      	beq.n	800d6a8 <_scanf_float+0x258>
 800d69c:	0550      	lsls	r0, r2, #21
 800d69e:	f57f af0a 	bpl.w	800d4b6 <_scanf_float+0x66>
 800d6a2:	2f00      	cmp	r7, #0
 800d6a4:	f000 80db 	beq.w	800d85e <_scanf_float+0x40e>
 800d6a8:	0591      	lsls	r1, r2, #22
 800d6aa:	bf58      	it	pl
 800d6ac:	9902      	ldrpl	r1, [sp, #8]
 800d6ae:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d6b2:	bf58      	it	pl
 800d6b4:	1a79      	subpl	r1, r7, r1
 800d6b6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800d6ba:	bf58      	it	pl
 800d6bc:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d6c0:	6022      	str	r2, [r4, #0]
 800d6c2:	2700      	movs	r7, #0
 800d6c4:	e790      	b.n	800d5e8 <_scanf_float+0x198>
 800d6c6:	f04f 0a03 	mov.w	sl, #3
 800d6ca:	e78d      	b.n	800d5e8 <_scanf_float+0x198>
 800d6cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d6d0:	4649      	mov	r1, r9
 800d6d2:	4640      	mov	r0, r8
 800d6d4:	4798      	blx	r3
 800d6d6:	2800      	cmp	r0, #0
 800d6d8:	f43f aedf 	beq.w	800d49a <_scanf_float+0x4a>
 800d6dc:	e6eb      	b.n	800d4b6 <_scanf_float+0x66>
 800d6de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d6e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d6e6:	464a      	mov	r2, r9
 800d6e8:	4640      	mov	r0, r8
 800d6ea:	4798      	blx	r3
 800d6ec:	6923      	ldr	r3, [r4, #16]
 800d6ee:	3b01      	subs	r3, #1
 800d6f0:	6123      	str	r3, [r4, #16]
 800d6f2:	e6eb      	b.n	800d4cc <_scanf_float+0x7c>
 800d6f4:	1e6b      	subs	r3, r5, #1
 800d6f6:	2b06      	cmp	r3, #6
 800d6f8:	d824      	bhi.n	800d744 <_scanf_float+0x2f4>
 800d6fa:	2d02      	cmp	r5, #2
 800d6fc:	d836      	bhi.n	800d76c <_scanf_float+0x31c>
 800d6fe:	9b01      	ldr	r3, [sp, #4]
 800d700:	429e      	cmp	r6, r3
 800d702:	f67f aee7 	bls.w	800d4d4 <_scanf_float+0x84>
 800d706:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d70a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d70e:	464a      	mov	r2, r9
 800d710:	4640      	mov	r0, r8
 800d712:	4798      	blx	r3
 800d714:	6923      	ldr	r3, [r4, #16]
 800d716:	3b01      	subs	r3, #1
 800d718:	6123      	str	r3, [r4, #16]
 800d71a:	e7f0      	b.n	800d6fe <_scanf_float+0x2ae>
 800d71c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d720:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800d724:	464a      	mov	r2, r9
 800d726:	4640      	mov	r0, r8
 800d728:	4798      	blx	r3
 800d72a:	6923      	ldr	r3, [r4, #16]
 800d72c:	3b01      	subs	r3, #1
 800d72e:	6123      	str	r3, [r4, #16]
 800d730:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d734:	fa5f fa8a 	uxtb.w	sl, sl
 800d738:	f1ba 0f02 	cmp.w	sl, #2
 800d73c:	d1ee      	bne.n	800d71c <_scanf_float+0x2cc>
 800d73e:	3d03      	subs	r5, #3
 800d740:	b2ed      	uxtb	r5, r5
 800d742:	1b76      	subs	r6, r6, r5
 800d744:	6823      	ldr	r3, [r4, #0]
 800d746:	05da      	lsls	r2, r3, #23
 800d748:	d530      	bpl.n	800d7ac <_scanf_float+0x35c>
 800d74a:	055b      	lsls	r3, r3, #21
 800d74c:	d511      	bpl.n	800d772 <_scanf_float+0x322>
 800d74e:	9b01      	ldr	r3, [sp, #4]
 800d750:	429e      	cmp	r6, r3
 800d752:	f67f aebf 	bls.w	800d4d4 <_scanf_float+0x84>
 800d756:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d75a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d75e:	464a      	mov	r2, r9
 800d760:	4640      	mov	r0, r8
 800d762:	4798      	blx	r3
 800d764:	6923      	ldr	r3, [r4, #16]
 800d766:	3b01      	subs	r3, #1
 800d768:	6123      	str	r3, [r4, #16]
 800d76a:	e7f0      	b.n	800d74e <_scanf_float+0x2fe>
 800d76c:	46aa      	mov	sl, r5
 800d76e:	46b3      	mov	fp, r6
 800d770:	e7de      	b.n	800d730 <_scanf_float+0x2e0>
 800d772:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d776:	6923      	ldr	r3, [r4, #16]
 800d778:	2965      	cmp	r1, #101	@ 0x65
 800d77a:	f103 33ff 	add.w	r3, r3, #4294967295
 800d77e:	f106 35ff 	add.w	r5, r6, #4294967295
 800d782:	6123      	str	r3, [r4, #16]
 800d784:	d00c      	beq.n	800d7a0 <_scanf_float+0x350>
 800d786:	2945      	cmp	r1, #69	@ 0x45
 800d788:	d00a      	beq.n	800d7a0 <_scanf_float+0x350>
 800d78a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d78e:	464a      	mov	r2, r9
 800d790:	4640      	mov	r0, r8
 800d792:	4798      	blx	r3
 800d794:	6923      	ldr	r3, [r4, #16]
 800d796:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d79a:	3b01      	subs	r3, #1
 800d79c:	1eb5      	subs	r5, r6, #2
 800d79e:	6123      	str	r3, [r4, #16]
 800d7a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d7a4:	464a      	mov	r2, r9
 800d7a6:	4640      	mov	r0, r8
 800d7a8:	4798      	blx	r3
 800d7aa:	462e      	mov	r6, r5
 800d7ac:	6822      	ldr	r2, [r4, #0]
 800d7ae:	f012 0210 	ands.w	r2, r2, #16
 800d7b2:	d001      	beq.n	800d7b8 <_scanf_float+0x368>
 800d7b4:	2000      	movs	r0, #0
 800d7b6:	e68e      	b.n	800d4d6 <_scanf_float+0x86>
 800d7b8:	7032      	strb	r2, [r6, #0]
 800d7ba:	6823      	ldr	r3, [r4, #0]
 800d7bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d7c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d7c4:	d125      	bne.n	800d812 <_scanf_float+0x3c2>
 800d7c6:	9b02      	ldr	r3, [sp, #8]
 800d7c8:	429f      	cmp	r7, r3
 800d7ca:	d00a      	beq.n	800d7e2 <_scanf_float+0x392>
 800d7cc:	1bda      	subs	r2, r3, r7
 800d7ce:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800d7d2:	429e      	cmp	r6, r3
 800d7d4:	bf28      	it	cs
 800d7d6:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800d7da:	4922      	ldr	r1, [pc, #136]	@ (800d864 <_scanf_float+0x414>)
 800d7dc:	4630      	mov	r0, r6
 800d7de:	f000 f907 	bl	800d9f0 <siprintf>
 800d7e2:	9901      	ldr	r1, [sp, #4]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	4640      	mov	r0, r8
 800d7e8:	f002 fb4e 	bl	800fe88 <_strtod_r>
 800d7ec:	9b03      	ldr	r3, [sp, #12]
 800d7ee:	6821      	ldr	r1, [r4, #0]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	f011 0f02 	tst.w	r1, #2
 800d7f6:	ec57 6b10 	vmov	r6, r7, d0
 800d7fa:	f103 0204 	add.w	r2, r3, #4
 800d7fe:	d015      	beq.n	800d82c <_scanf_float+0x3dc>
 800d800:	9903      	ldr	r1, [sp, #12]
 800d802:	600a      	str	r2, [r1, #0]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	e9c3 6700 	strd	r6, r7, [r3]
 800d80a:	68e3      	ldr	r3, [r4, #12]
 800d80c:	3301      	adds	r3, #1
 800d80e:	60e3      	str	r3, [r4, #12]
 800d810:	e7d0      	b.n	800d7b4 <_scanf_float+0x364>
 800d812:	9b04      	ldr	r3, [sp, #16]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d0e4      	beq.n	800d7e2 <_scanf_float+0x392>
 800d818:	9905      	ldr	r1, [sp, #20]
 800d81a:	230a      	movs	r3, #10
 800d81c:	3101      	adds	r1, #1
 800d81e:	4640      	mov	r0, r8
 800d820:	f002 fbb2 	bl	800ff88 <_strtol_r>
 800d824:	9b04      	ldr	r3, [sp, #16]
 800d826:	9e05      	ldr	r6, [sp, #20]
 800d828:	1ac2      	subs	r2, r0, r3
 800d82a:	e7d0      	b.n	800d7ce <_scanf_float+0x37e>
 800d82c:	f011 0f04 	tst.w	r1, #4
 800d830:	9903      	ldr	r1, [sp, #12]
 800d832:	600a      	str	r2, [r1, #0]
 800d834:	d1e6      	bne.n	800d804 <_scanf_float+0x3b4>
 800d836:	681d      	ldr	r5, [r3, #0]
 800d838:	4632      	mov	r2, r6
 800d83a:	463b      	mov	r3, r7
 800d83c:	4630      	mov	r0, r6
 800d83e:	4639      	mov	r1, r7
 800d840:	f7f3 f97c 	bl	8000b3c <__aeabi_dcmpun>
 800d844:	b128      	cbz	r0, 800d852 <_scanf_float+0x402>
 800d846:	4808      	ldr	r0, [pc, #32]	@ (800d868 <_scanf_float+0x418>)
 800d848:	f000 f9c8 	bl	800dbdc <nanf>
 800d84c:	ed85 0a00 	vstr	s0, [r5]
 800d850:	e7db      	b.n	800d80a <_scanf_float+0x3ba>
 800d852:	4630      	mov	r0, r6
 800d854:	4639      	mov	r1, r7
 800d856:	f7f3 f9cf 	bl	8000bf8 <__aeabi_d2f>
 800d85a:	6028      	str	r0, [r5, #0]
 800d85c:	e7d5      	b.n	800d80a <_scanf_float+0x3ba>
 800d85e:	2700      	movs	r7, #0
 800d860:	e62e      	b.n	800d4c0 <_scanf_float+0x70>
 800d862:	bf00      	nop
 800d864:	080111bc 	.word	0x080111bc
 800d868:	080112fd 	.word	0x080112fd

0800d86c <std>:
 800d86c:	2300      	movs	r3, #0
 800d86e:	b510      	push	{r4, lr}
 800d870:	4604      	mov	r4, r0
 800d872:	e9c0 3300 	strd	r3, r3, [r0]
 800d876:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d87a:	6083      	str	r3, [r0, #8]
 800d87c:	8181      	strh	r1, [r0, #12]
 800d87e:	6643      	str	r3, [r0, #100]	@ 0x64
 800d880:	81c2      	strh	r2, [r0, #14]
 800d882:	6183      	str	r3, [r0, #24]
 800d884:	4619      	mov	r1, r3
 800d886:	2208      	movs	r2, #8
 800d888:	305c      	adds	r0, #92	@ 0x5c
 800d88a:	f000 f916 	bl	800daba <memset>
 800d88e:	4b0d      	ldr	r3, [pc, #52]	@ (800d8c4 <std+0x58>)
 800d890:	6263      	str	r3, [r4, #36]	@ 0x24
 800d892:	4b0d      	ldr	r3, [pc, #52]	@ (800d8c8 <std+0x5c>)
 800d894:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d896:	4b0d      	ldr	r3, [pc, #52]	@ (800d8cc <std+0x60>)
 800d898:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d89a:	4b0d      	ldr	r3, [pc, #52]	@ (800d8d0 <std+0x64>)
 800d89c:	6323      	str	r3, [r4, #48]	@ 0x30
 800d89e:	4b0d      	ldr	r3, [pc, #52]	@ (800d8d4 <std+0x68>)
 800d8a0:	6224      	str	r4, [r4, #32]
 800d8a2:	429c      	cmp	r4, r3
 800d8a4:	d006      	beq.n	800d8b4 <std+0x48>
 800d8a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d8aa:	4294      	cmp	r4, r2
 800d8ac:	d002      	beq.n	800d8b4 <std+0x48>
 800d8ae:	33d0      	adds	r3, #208	@ 0xd0
 800d8b0:	429c      	cmp	r4, r3
 800d8b2:	d105      	bne.n	800d8c0 <std+0x54>
 800d8b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d8b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8bc:	f000 b98a 	b.w	800dbd4 <__retarget_lock_init_recursive>
 800d8c0:	bd10      	pop	{r4, pc}
 800d8c2:	bf00      	nop
 800d8c4:	0800da35 	.word	0x0800da35
 800d8c8:	0800da57 	.word	0x0800da57
 800d8cc:	0800da8f 	.word	0x0800da8f
 800d8d0:	0800dab3 	.word	0x0800dab3
 800d8d4:	200016bc 	.word	0x200016bc

0800d8d8 <stdio_exit_handler>:
 800d8d8:	4a02      	ldr	r2, [pc, #8]	@ (800d8e4 <stdio_exit_handler+0xc>)
 800d8da:	4903      	ldr	r1, [pc, #12]	@ (800d8e8 <stdio_exit_handler+0x10>)
 800d8dc:	4803      	ldr	r0, [pc, #12]	@ (800d8ec <stdio_exit_handler+0x14>)
 800d8de:	f000 b869 	b.w	800d9b4 <_fwalk_sglue>
 800d8e2:	bf00      	nop
 800d8e4:	20000104 	.word	0x20000104
 800d8e8:	08010345 	.word	0x08010345
 800d8ec:	20000114 	.word	0x20000114

0800d8f0 <cleanup_stdio>:
 800d8f0:	6841      	ldr	r1, [r0, #4]
 800d8f2:	4b0c      	ldr	r3, [pc, #48]	@ (800d924 <cleanup_stdio+0x34>)
 800d8f4:	4299      	cmp	r1, r3
 800d8f6:	b510      	push	{r4, lr}
 800d8f8:	4604      	mov	r4, r0
 800d8fa:	d001      	beq.n	800d900 <cleanup_stdio+0x10>
 800d8fc:	f002 fd22 	bl	8010344 <_fflush_r>
 800d900:	68a1      	ldr	r1, [r4, #8]
 800d902:	4b09      	ldr	r3, [pc, #36]	@ (800d928 <cleanup_stdio+0x38>)
 800d904:	4299      	cmp	r1, r3
 800d906:	d002      	beq.n	800d90e <cleanup_stdio+0x1e>
 800d908:	4620      	mov	r0, r4
 800d90a:	f002 fd1b 	bl	8010344 <_fflush_r>
 800d90e:	68e1      	ldr	r1, [r4, #12]
 800d910:	4b06      	ldr	r3, [pc, #24]	@ (800d92c <cleanup_stdio+0x3c>)
 800d912:	4299      	cmp	r1, r3
 800d914:	d004      	beq.n	800d920 <cleanup_stdio+0x30>
 800d916:	4620      	mov	r0, r4
 800d918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d91c:	f002 bd12 	b.w	8010344 <_fflush_r>
 800d920:	bd10      	pop	{r4, pc}
 800d922:	bf00      	nop
 800d924:	200016bc 	.word	0x200016bc
 800d928:	20001724 	.word	0x20001724
 800d92c:	2000178c 	.word	0x2000178c

0800d930 <global_stdio_init.part.0>:
 800d930:	b510      	push	{r4, lr}
 800d932:	4b0b      	ldr	r3, [pc, #44]	@ (800d960 <global_stdio_init.part.0+0x30>)
 800d934:	4c0b      	ldr	r4, [pc, #44]	@ (800d964 <global_stdio_init.part.0+0x34>)
 800d936:	4a0c      	ldr	r2, [pc, #48]	@ (800d968 <global_stdio_init.part.0+0x38>)
 800d938:	601a      	str	r2, [r3, #0]
 800d93a:	4620      	mov	r0, r4
 800d93c:	2200      	movs	r2, #0
 800d93e:	2104      	movs	r1, #4
 800d940:	f7ff ff94 	bl	800d86c <std>
 800d944:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d948:	2201      	movs	r2, #1
 800d94a:	2109      	movs	r1, #9
 800d94c:	f7ff ff8e 	bl	800d86c <std>
 800d950:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d954:	2202      	movs	r2, #2
 800d956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d95a:	2112      	movs	r1, #18
 800d95c:	f7ff bf86 	b.w	800d86c <std>
 800d960:	200017f4 	.word	0x200017f4
 800d964:	200016bc 	.word	0x200016bc
 800d968:	0800d8d9 	.word	0x0800d8d9

0800d96c <__sfp_lock_acquire>:
 800d96c:	4801      	ldr	r0, [pc, #4]	@ (800d974 <__sfp_lock_acquire+0x8>)
 800d96e:	f000 b932 	b.w	800dbd6 <__retarget_lock_acquire_recursive>
 800d972:	bf00      	nop
 800d974:	200017fd 	.word	0x200017fd

0800d978 <__sfp_lock_release>:
 800d978:	4801      	ldr	r0, [pc, #4]	@ (800d980 <__sfp_lock_release+0x8>)
 800d97a:	f000 b92d 	b.w	800dbd8 <__retarget_lock_release_recursive>
 800d97e:	bf00      	nop
 800d980:	200017fd 	.word	0x200017fd

0800d984 <__sinit>:
 800d984:	b510      	push	{r4, lr}
 800d986:	4604      	mov	r4, r0
 800d988:	f7ff fff0 	bl	800d96c <__sfp_lock_acquire>
 800d98c:	6a23      	ldr	r3, [r4, #32]
 800d98e:	b11b      	cbz	r3, 800d998 <__sinit+0x14>
 800d990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d994:	f7ff bff0 	b.w	800d978 <__sfp_lock_release>
 800d998:	4b04      	ldr	r3, [pc, #16]	@ (800d9ac <__sinit+0x28>)
 800d99a:	6223      	str	r3, [r4, #32]
 800d99c:	4b04      	ldr	r3, [pc, #16]	@ (800d9b0 <__sinit+0x2c>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d1f5      	bne.n	800d990 <__sinit+0xc>
 800d9a4:	f7ff ffc4 	bl	800d930 <global_stdio_init.part.0>
 800d9a8:	e7f2      	b.n	800d990 <__sinit+0xc>
 800d9aa:	bf00      	nop
 800d9ac:	0800d8f1 	.word	0x0800d8f1
 800d9b0:	200017f4 	.word	0x200017f4

0800d9b4 <_fwalk_sglue>:
 800d9b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9b8:	4607      	mov	r7, r0
 800d9ba:	4688      	mov	r8, r1
 800d9bc:	4614      	mov	r4, r2
 800d9be:	2600      	movs	r6, #0
 800d9c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d9c4:	f1b9 0901 	subs.w	r9, r9, #1
 800d9c8:	d505      	bpl.n	800d9d6 <_fwalk_sglue+0x22>
 800d9ca:	6824      	ldr	r4, [r4, #0]
 800d9cc:	2c00      	cmp	r4, #0
 800d9ce:	d1f7      	bne.n	800d9c0 <_fwalk_sglue+0xc>
 800d9d0:	4630      	mov	r0, r6
 800d9d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9d6:	89ab      	ldrh	r3, [r5, #12]
 800d9d8:	2b01      	cmp	r3, #1
 800d9da:	d907      	bls.n	800d9ec <_fwalk_sglue+0x38>
 800d9dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d9e0:	3301      	adds	r3, #1
 800d9e2:	d003      	beq.n	800d9ec <_fwalk_sglue+0x38>
 800d9e4:	4629      	mov	r1, r5
 800d9e6:	4638      	mov	r0, r7
 800d9e8:	47c0      	blx	r8
 800d9ea:	4306      	orrs	r6, r0
 800d9ec:	3568      	adds	r5, #104	@ 0x68
 800d9ee:	e7e9      	b.n	800d9c4 <_fwalk_sglue+0x10>

0800d9f0 <siprintf>:
 800d9f0:	b40e      	push	{r1, r2, r3}
 800d9f2:	b510      	push	{r4, lr}
 800d9f4:	b09d      	sub	sp, #116	@ 0x74
 800d9f6:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d9f8:	9002      	str	r0, [sp, #8]
 800d9fa:	9006      	str	r0, [sp, #24]
 800d9fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800da00:	480a      	ldr	r0, [pc, #40]	@ (800da2c <siprintf+0x3c>)
 800da02:	9107      	str	r1, [sp, #28]
 800da04:	9104      	str	r1, [sp, #16]
 800da06:	490a      	ldr	r1, [pc, #40]	@ (800da30 <siprintf+0x40>)
 800da08:	f853 2b04 	ldr.w	r2, [r3], #4
 800da0c:	9105      	str	r1, [sp, #20]
 800da0e:	2400      	movs	r4, #0
 800da10:	a902      	add	r1, sp, #8
 800da12:	6800      	ldr	r0, [r0, #0]
 800da14:	9301      	str	r3, [sp, #4]
 800da16:	941b      	str	r4, [sp, #108]	@ 0x6c
 800da18:	f002 fb14 	bl	8010044 <_svfiprintf_r>
 800da1c:	9b02      	ldr	r3, [sp, #8]
 800da1e:	701c      	strb	r4, [r3, #0]
 800da20:	b01d      	add	sp, #116	@ 0x74
 800da22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da26:	b003      	add	sp, #12
 800da28:	4770      	bx	lr
 800da2a:	bf00      	nop
 800da2c:	20000110 	.word	0x20000110
 800da30:	ffff0208 	.word	0xffff0208

0800da34 <__sread>:
 800da34:	b510      	push	{r4, lr}
 800da36:	460c      	mov	r4, r1
 800da38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da3c:	f000 f86c 	bl	800db18 <_read_r>
 800da40:	2800      	cmp	r0, #0
 800da42:	bfab      	itete	ge
 800da44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800da46:	89a3      	ldrhlt	r3, [r4, #12]
 800da48:	181b      	addge	r3, r3, r0
 800da4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800da4e:	bfac      	ite	ge
 800da50:	6563      	strge	r3, [r4, #84]	@ 0x54
 800da52:	81a3      	strhlt	r3, [r4, #12]
 800da54:	bd10      	pop	{r4, pc}

0800da56 <__swrite>:
 800da56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da5a:	461f      	mov	r7, r3
 800da5c:	898b      	ldrh	r3, [r1, #12]
 800da5e:	05db      	lsls	r3, r3, #23
 800da60:	4605      	mov	r5, r0
 800da62:	460c      	mov	r4, r1
 800da64:	4616      	mov	r6, r2
 800da66:	d505      	bpl.n	800da74 <__swrite+0x1e>
 800da68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da6c:	2302      	movs	r3, #2
 800da6e:	2200      	movs	r2, #0
 800da70:	f000 f840 	bl	800daf4 <_lseek_r>
 800da74:	89a3      	ldrh	r3, [r4, #12]
 800da76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800da7e:	81a3      	strh	r3, [r4, #12]
 800da80:	4632      	mov	r2, r6
 800da82:	463b      	mov	r3, r7
 800da84:	4628      	mov	r0, r5
 800da86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da8a:	f000 b867 	b.w	800db5c <_write_r>

0800da8e <__sseek>:
 800da8e:	b510      	push	{r4, lr}
 800da90:	460c      	mov	r4, r1
 800da92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da96:	f000 f82d 	bl	800daf4 <_lseek_r>
 800da9a:	1c43      	adds	r3, r0, #1
 800da9c:	89a3      	ldrh	r3, [r4, #12]
 800da9e:	bf15      	itete	ne
 800daa0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800daa2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800daa6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800daaa:	81a3      	strheq	r3, [r4, #12]
 800daac:	bf18      	it	ne
 800daae:	81a3      	strhne	r3, [r4, #12]
 800dab0:	bd10      	pop	{r4, pc}

0800dab2 <__sclose>:
 800dab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dab6:	f000 b80d 	b.w	800dad4 <_close_r>

0800daba <memset>:
 800daba:	4402      	add	r2, r0
 800dabc:	4603      	mov	r3, r0
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d100      	bne.n	800dac4 <memset+0xa>
 800dac2:	4770      	bx	lr
 800dac4:	f803 1b01 	strb.w	r1, [r3], #1
 800dac8:	e7f9      	b.n	800dabe <memset+0x4>
	...

0800dacc <_localeconv_r>:
 800dacc:	4800      	ldr	r0, [pc, #0]	@ (800dad0 <_localeconv_r+0x4>)
 800dace:	4770      	bx	lr
 800dad0:	20000250 	.word	0x20000250

0800dad4 <_close_r>:
 800dad4:	b538      	push	{r3, r4, r5, lr}
 800dad6:	4d06      	ldr	r5, [pc, #24]	@ (800daf0 <_close_r+0x1c>)
 800dad8:	2300      	movs	r3, #0
 800dada:	4604      	mov	r4, r0
 800dadc:	4608      	mov	r0, r1
 800dade:	602b      	str	r3, [r5, #0]
 800dae0:	f7f4 fd8d 	bl	80025fe <_close>
 800dae4:	1c43      	adds	r3, r0, #1
 800dae6:	d102      	bne.n	800daee <_close_r+0x1a>
 800dae8:	682b      	ldr	r3, [r5, #0]
 800daea:	b103      	cbz	r3, 800daee <_close_r+0x1a>
 800daec:	6023      	str	r3, [r4, #0]
 800daee:	bd38      	pop	{r3, r4, r5, pc}
 800daf0:	200017f8 	.word	0x200017f8

0800daf4 <_lseek_r>:
 800daf4:	b538      	push	{r3, r4, r5, lr}
 800daf6:	4d07      	ldr	r5, [pc, #28]	@ (800db14 <_lseek_r+0x20>)
 800daf8:	4604      	mov	r4, r0
 800dafa:	4608      	mov	r0, r1
 800dafc:	4611      	mov	r1, r2
 800dafe:	2200      	movs	r2, #0
 800db00:	602a      	str	r2, [r5, #0]
 800db02:	461a      	mov	r2, r3
 800db04:	f7f4 fda2 	bl	800264c <_lseek>
 800db08:	1c43      	adds	r3, r0, #1
 800db0a:	d102      	bne.n	800db12 <_lseek_r+0x1e>
 800db0c:	682b      	ldr	r3, [r5, #0]
 800db0e:	b103      	cbz	r3, 800db12 <_lseek_r+0x1e>
 800db10:	6023      	str	r3, [r4, #0]
 800db12:	bd38      	pop	{r3, r4, r5, pc}
 800db14:	200017f8 	.word	0x200017f8

0800db18 <_read_r>:
 800db18:	b538      	push	{r3, r4, r5, lr}
 800db1a:	4d07      	ldr	r5, [pc, #28]	@ (800db38 <_read_r+0x20>)
 800db1c:	4604      	mov	r4, r0
 800db1e:	4608      	mov	r0, r1
 800db20:	4611      	mov	r1, r2
 800db22:	2200      	movs	r2, #0
 800db24:	602a      	str	r2, [r5, #0]
 800db26:	461a      	mov	r2, r3
 800db28:	f7f4 fd30 	bl	800258c <_read>
 800db2c:	1c43      	adds	r3, r0, #1
 800db2e:	d102      	bne.n	800db36 <_read_r+0x1e>
 800db30:	682b      	ldr	r3, [r5, #0]
 800db32:	b103      	cbz	r3, 800db36 <_read_r+0x1e>
 800db34:	6023      	str	r3, [r4, #0]
 800db36:	bd38      	pop	{r3, r4, r5, pc}
 800db38:	200017f8 	.word	0x200017f8

0800db3c <_sbrk_r>:
 800db3c:	b538      	push	{r3, r4, r5, lr}
 800db3e:	4d06      	ldr	r5, [pc, #24]	@ (800db58 <_sbrk_r+0x1c>)
 800db40:	2300      	movs	r3, #0
 800db42:	4604      	mov	r4, r0
 800db44:	4608      	mov	r0, r1
 800db46:	602b      	str	r3, [r5, #0]
 800db48:	f7f4 fd8e 	bl	8002668 <_sbrk>
 800db4c:	1c43      	adds	r3, r0, #1
 800db4e:	d102      	bne.n	800db56 <_sbrk_r+0x1a>
 800db50:	682b      	ldr	r3, [r5, #0]
 800db52:	b103      	cbz	r3, 800db56 <_sbrk_r+0x1a>
 800db54:	6023      	str	r3, [r4, #0]
 800db56:	bd38      	pop	{r3, r4, r5, pc}
 800db58:	200017f8 	.word	0x200017f8

0800db5c <_write_r>:
 800db5c:	b538      	push	{r3, r4, r5, lr}
 800db5e:	4d07      	ldr	r5, [pc, #28]	@ (800db7c <_write_r+0x20>)
 800db60:	4604      	mov	r4, r0
 800db62:	4608      	mov	r0, r1
 800db64:	4611      	mov	r1, r2
 800db66:	2200      	movs	r2, #0
 800db68:	602a      	str	r2, [r5, #0]
 800db6a:	461a      	mov	r2, r3
 800db6c:	f7f4 fd2b 	bl	80025c6 <_write>
 800db70:	1c43      	adds	r3, r0, #1
 800db72:	d102      	bne.n	800db7a <_write_r+0x1e>
 800db74:	682b      	ldr	r3, [r5, #0]
 800db76:	b103      	cbz	r3, 800db7a <_write_r+0x1e>
 800db78:	6023      	str	r3, [r4, #0]
 800db7a:	bd38      	pop	{r3, r4, r5, pc}
 800db7c:	200017f8 	.word	0x200017f8

0800db80 <__errno>:
 800db80:	4b01      	ldr	r3, [pc, #4]	@ (800db88 <__errno+0x8>)
 800db82:	6818      	ldr	r0, [r3, #0]
 800db84:	4770      	bx	lr
 800db86:	bf00      	nop
 800db88:	20000110 	.word	0x20000110

0800db8c <__libc_init_array>:
 800db8c:	b570      	push	{r4, r5, r6, lr}
 800db8e:	4d0d      	ldr	r5, [pc, #52]	@ (800dbc4 <__libc_init_array+0x38>)
 800db90:	4c0d      	ldr	r4, [pc, #52]	@ (800dbc8 <__libc_init_array+0x3c>)
 800db92:	1b64      	subs	r4, r4, r5
 800db94:	10a4      	asrs	r4, r4, #2
 800db96:	2600      	movs	r6, #0
 800db98:	42a6      	cmp	r6, r4
 800db9a:	d109      	bne.n	800dbb0 <__libc_init_array+0x24>
 800db9c:	4d0b      	ldr	r5, [pc, #44]	@ (800dbcc <__libc_init_array+0x40>)
 800db9e:	4c0c      	ldr	r4, [pc, #48]	@ (800dbd0 <__libc_init_array+0x44>)
 800dba0:	f003 fab0 	bl	8011104 <_init>
 800dba4:	1b64      	subs	r4, r4, r5
 800dba6:	10a4      	asrs	r4, r4, #2
 800dba8:	2600      	movs	r6, #0
 800dbaa:	42a6      	cmp	r6, r4
 800dbac:	d105      	bne.n	800dbba <__libc_init_array+0x2e>
 800dbae:	bd70      	pop	{r4, r5, r6, pc}
 800dbb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbb4:	4798      	blx	r3
 800dbb6:	3601      	adds	r6, #1
 800dbb8:	e7ee      	b.n	800db98 <__libc_init_array+0xc>
 800dbba:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbbe:	4798      	blx	r3
 800dbc0:	3601      	adds	r6, #1
 800dbc2:	e7f2      	b.n	800dbaa <__libc_init_array+0x1e>
 800dbc4:	080115bc 	.word	0x080115bc
 800dbc8:	080115bc 	.word	0x080115bc
 800dbcc:	080115bc 	.word	0x080115bc
 800dbd0:	080115c0 	.word	0x080115c0

0800dbd4 <__retarget_lock_init_recursive>:
 800dbd4:	4770      	bx	lr

0800dbd6 <__retarget_lock_acquire_recursive>:
 800dbd6:	4770      	bx	lr

0800dbd8 <__retarget_lock_release_recursive>:
 800dbd8:	4770      	bx	lr
	...

0800dbdc <nanf>:
 800dbdc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800dbe4 <nanf+0x8>
 800dbe0:	4770      	bx	lr
 800dbe2:	bf00      	nop
 800dbe4:	7fc00000 	.word	0x7fc00000

0800dbe8 <quorem>:
 800dbe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbec:	6903      	ldr	r3, [r0, #16]
 800dbee:	690c      	ldr	r4, [r1, #16]
 800dbf0:	42a3      	cmp	r3, r4
 800dbf2:	4607      	mov	r7, r0
 800dbf4:	db7e      	blt.n	800dcf4 <quorem+0x10c>
 800dbf6:	3c01      	subs	r4, #1
 800dbf8:	f101 0814 	add.w	r8, r1, #20
 800dbfc:	00a3      	lsls	r3, r4, #2
 800dbfe:	f100 0514 	add.w	r5, r0, #20
 800dc02:	9300      	str	r3, [sp, #0]
 800dc04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dc08:	9301      	str	r3, [sp, #4]
 800dc0a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dc0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc12:	3301      	adds	r3, #1
 800dc14:	429a      	cmp	r2, r3
 800dc16:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dc1a:	fbb2 f6f3 	udiv	r6, r2, r3
 800dc1e:	d32e      	bcc.n	800dc7e <quorem+0x96>
 800dc20:	f04f 0a00 	mov.w	sl, #0
 800dc24:	46c4      	mov	ip, r8
 800dc26:	46ae      	mov	lr, r5
 800dc28:	46d3      	mov	fp, sl
 800dc2a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dc2e:	b298      	uxth	r0, r3
 800dc30:	fb06 a000 	mla	r0, r6, r0, sl
 800dc34:	0c02      	lsrs	r2, r0, #16
 800dc36:	0c1b      	lsrs	r3, r3, #16
 800dc38:	fb06 2303 	mla	r3, r6, r3, r2
 800dc3c:	f8de 2000 	ldr.w	r2, [lr]
 800dc40:	b280      	uxth	r0, r0
 800dc42:	b292      	uxth	r2, r2
 800dc44:	1a12      	subs	r2, r2, r0
 800dc46:	445a      	add	r2, fp
 800dc48:	f8de 0000 	ldr.w	r0, [lr]
 800dc4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dc50:	b29b      	uxth	r3, r3
 800dc52:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800dc56:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800dc5a:	b292      	uxth	r2, r2
 800dc5c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dc60:	45e1      	cmp	r9, ip
 800dc62:	f84e 2b04 	str.w	r2, [lr], #4
 800dc66:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800dc6a:	d2de      	bcs.n	800dc2a <quorem+0x42>
 800dc6c:	9b00      	ldr	r3, [sp, #0]
 800dc6e:	58eb      	ldr	r3, [r5, r3]
 800dc70:	b92b      	cbnz	r3, 800dc7e <quorem+0x96>
 800dc72:	9b01      	ldr	r3, [sp, #4]
 800dc74:	3b04      	subs	r3, #4
 800dc76:	429d      	cmp	r5, r3
 800dc78:	461a      	mov	r2, r3
 800dc7a:	d32f      	bcc.n	800dcdc <quorem+0xf4>
 800dc7c:	613c      	str	r4, [r7, #16]
 800dc7e:	4638      	mov	r0, r7
 800dc80:	f001 f910 	bl	800eea4 <__mcmp>
 800dc84:	2800      	cmp	r0, #0
 800dc86:	db25      	blt.n	800dcd4 <quorem+0xec>
 800dc88:	4629      	mov	r1, r5
 800dc8a:	2000      	movs	r0, #0
 800dc8c:	f858 2b04 	ldr.w	r2, [r8], #4
 800dc90:	f8d1 c000 	ldr.w	ip, [r1]
 800dc94:	fa1f fe82 	uxth.w	lr, r2
 800dc98:	fa1f f38c 	uxth.w	r3, ip
 800dc9c:	eba3 030e 	sub.w	r3, r3, lr
 800dca0:	4403      	add	r3, r0
 800dca2:	0c12      	lsrs	r2, r2, #16
 800dca4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800dca8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800dcac:	b29b      	uxth	r3, r3
 800dcae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dcb2:	45c1      	cmp	r9, r8
 800dcb4:	f841 3b04 	str.w	r3, [r1], #4
 800dcb8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dcbc:	d2e6      	bcs.n	800dc8c <quorem+0xa4>
 800dcbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dcc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dcc6:	b922      	cbnz	r2, 800dcd2 <quorem+0xea>
 800dcc8:	3b04      	subs	r3, #4
 800dcca:	429d      	cmp	r5, r3
 800dccc:	461a      	mov	r2, r3
 800dcce:	d30b      	bcc.n	800dce8 <quorem+0x100>
 800dcd0:	613c      	str	r4, [r7, #16]
 800dcd2:	3601      	adds	r6, #1
 800dcd4:	4630      	mov	r0, r6
 800dcd6:	b003      	add	sp, #12
 800dcd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcdc:	6812      	ldr	r2, [r2, #0]
 800dcde:	3b04      	subs	r3, #4
 800dce0:	2a00      	cmp	r2, #0
 800dce2:	d1cb      	bne.n	800dc7c <quorem+0x94>
 800dce4:	3c01      	subs	r4, #1
 800dce6:	e7c6      	b.n	800dc76 <quorem+0x8e>
 800dce8:	6812      	ldr	r2, [r2, #0]
 800dcea:	3b04      	subs	r3, #4
 800dcec:	2a00      	cmp	r2, #0
 800dcee:	d1ef      	bne.n	800dcd0 <quorem+0xe8>
 800dcf0:	3c01      	subs	r4, #1
 800dcf2:	e7ea      	b.n	800dcca <quorem+0xe2>
 800dcf4:	2000      	movs	r0, #0
 800dcf6:	e7ee      	b.n	800dcd6 <quorem+0xee>

0800dcf8 <_dtoa_r>:
 800dcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcfc:	69c7      	ldr	r7, [r0, #28]
 800dcfe:	b097      	sub	sp, #92	@ 0x5c
 800dd00:	ed8d 0b04 	vstr	d0, [sp, #16]
 800dd04:	ec55 4b10 	vmov	r4, r5, d0
 800dd08:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800dd0a:	9107      	str	r1, [sp, #28]
 800dd0c:	4681      	mov	r9, r0
 800dd0e:	920c      	str	r2, [sp, #48]	@ 0x30
 800dd10:	9311      	str	r3, [sp, #68]	@ 0x44
 800dd12:	b97f      	cbnz	r7, 800dd34 <_dtoa_r+0x3c>
 800dd14:	2010      	movs	r0, #16
 800dd16:	f7fe fe8f 	bl	800ca38 <malloc>
 800dd1a:	4602      	mov	r2, r0
 800dd1c:	f8c9 001c 	str.w	r0, [r9, #28]
 800dd20:	b920      	cbnz	r0, 800dd2c <_dtoa_r+0x34>
 800dd22:	4ba9      	ldr	r3, [pc, #676]	@ (800dfc8 <_dtoa_r+0x2d0>)
 800dd24:	21ef      	movs	r1, #239	@ 0xef
 800dd26:	48a9      	ldr	r0, [pc, #676]	@ (800dfcc <_dtoa_r+0x2d4>)
 800dd28:	f002 fb76 	bl	8010418 <__assert_func>
 800dd2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dd30:	6007      	str	r7, [r0, #0]
 800dd32:	60c7      	str	r7, [r0, #12]
 800dd34:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dd38:	6819      	ldr	r1, [r3, #0]
 800dd3a:	b159      	cbz	r1, 800dd54 <_dtoa_r+0x5c>
 800dd3c:	685a      	ldr	r2, [r3, #4]
 800dd3e:	604a      	str	r2, [r1, #4]
 800dd40:	2301      	movs	r3, #1
 800dd42:	4093      	lsls	r3, r2
 800dd44:	608b      	str	r3, [r1, #8]
 800dd46:	4648      	mov	r0, r9
 800dd48:	f000 fe30 	bl	800e9ac <_Bfree>
 800dd4c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dd50:	2200      	movs	r2, #0
 800dd52:	601a      	str	r2, [r3, #0]
 800dd54:	1e2b      	subs	r3, r5, #0
 800dd56:	bfb9      	ittee	lt
 800dd58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800dd5c:	9305      	strlt	r3, [sp, #20]
 800dd5e:	2300      	movge	r3, #0
 800dd60:	6033      	strge	r3, [r6, #0]
 800dd62:	9f05      	ldr	r7, [sp, #20]
 800dd64:	4b9a      	ldr	r3, [pc, #616]	@ (800dfd0 <_dtoa_r+0x2d8>)
 800dd66:	bfbc      	itt	lt
 800dd68:	2201      	movlt	r2, #1
 800dd6a:	6032      	strlt	r2, [r6, #0]
 800dd6c:	43bb      	bics	r3, r7
 800dd6e:	d112      	bne.n	800dd96 <_dtoa_r+0x9e>
 800dd70:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dd72:	f242 730f 	movw	r3, #9999	@ 0x270f
 800dd76:	6013      	str	r3, [r2, #0]
 800dd78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dd7c:	4323      	orrs	r3, r4
 800dd7e:	f000 855a 	beq.w	800e836 <_dtoa_r+0xb3e>
 800dd82:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dd84:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800dfe4 <_dtoa_r+0x2ec>
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	f000 855c 	beq.w	800e846 <_dtoa_r+0xb4e>
 800dd8e:	f10a 0303 	add.w	r3, sl, #3
 800dd92:	f000 bd56 	b.w	800e842 <_dtoa_r+0xb4a>
 800dd96:	ed9d 7b04 	vldr	d7, [sp, #16]
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	ec51 0b17 	vmov	r0, r1, d7
 800dda0:	2300      	movs	r3, #0
 800dda2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800dda6:	f7f2 fe97 	bl	8000ad8 <__aeabi_dcmpeq>
 800ddaa:	4680      	mov	r8, r0
 800ddac:	b158      	cbz	r0, 800ddc6 <_dtoa_r+0xce>
 800ddae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ddb0:	2301      	movs	r3, #1
 800ddb2:	6013      	str	r3, [r2, #0]
 800ddb4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ddb6:	b113      	cbz	r3, 800ddbe <_dtoa_r+0xc6>
 800ddb8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ddba:	4b86      	ldr	r3, [pc, #536]	@ (800dfd4 <_dtoa_r+0x2dc>)
 800ddbc:	6013      	str	r3, [r2, #0]
 800ddbe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800dfe8 <_dtoa_r+0x2f0>
 800ddc2:	f000 bd40 	b.w	800e846 <_dtoa_r+0xb4e>
 800ddc6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800ddca:	aa14      	add	r2, sp, #80	@ 0x50
 800ddcc:	a915      	add	r1, sp, #84	@ 0x54
 800ddce:	4648      	mov	r0, r9
 800ddd0:	f001 f988 	bl	800f0e4 <__d2b>
 800ddd4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ddd8:	9002      	str	r0, [sp, #8]
 800ddda:	2e00      	cmp	r6, #0
 800dddc:	d078      	beq.n	800ded0 <_dtoa_r+0x1d8>
 800ddde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dde0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800dde4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dde8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ddec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ddf0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ddf4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ddf8:	4619      	mov	r1, r3
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	4b76      	ldr	r3, [pc, #472]	@ (800dfd8 <_dtoa_r+0x2e0>)
 800ddfe:	f7f2 fa4b 	bl	8000298 <__aeabi_dsub>
 800de02:	a36b      	add	r3, pc, #428	@ (adr r3, 800dfb0 <_dtoa_r+0x2b8>)
 800de04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de08:	f7f2 fbfe 	bl	8000608 <__aeabi_dmul>
 800de0c:	a36a      	add	r3, pc, #424	@ (adr r3, 800dfb8 <_dtoa_r+0x2c0>)
 800de0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de12:	f7f2 fa43 	bl	800029c <__adddf3>
 800de16:	4604      	mov	r4, r0
 800de18:	4630      	mov	r0, r6
 800de1a:	460d      	mov	r5, r1
 800de1c:	f7f2 fb8a 	bl	8000534 <__aeabi_i2d>
 800de20:	a367      	add	r3, pc, #412	@ (adr r3, 800dfc0 <_dtoa_r+0x2c8>)
 800de22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de26:	f7f2 fbef 	bl	8000608 <__aeabi_dmul>
 800de2a:	4602      	mov	r2, r0
 800de2c:	460b      	mov	r3, r1
 800de2e:	4620      	mov	r0, r4
 800de30:	4629      	mov	r1, r5
 800de32:	f7f2 fa33 	bl	800029c <__adddf3>
 800de36:	4604      	mov	r4, r0
 800de38:	460d      	mov	r5, r1
 800de3a:	f7f2 fe95 	bl	8000b68 <__aeabi_d2iz>
 800de3e:	2200      	movs	r2, #0
 800de40:	4607      	mov	r7, r0
 800de42:	2300      	movs	r3, #0
 800de44:	4620      	mov	r0, r4
 800de46:	4629      	mov	r1, r5
 800de48:	f7f2 fe50 	bl	8000aec <__aeabi_dcmplt>
 800de4c:	b140      	cbz	r0, 800de60 <_dtoa_r+0x168>
 800de4e:	4638      	mov	r0, r7
 800de50:	f7f2 fb70 	bl	8000534 <__aeabi_i2d>
 800de54:	4622      	mov	r2, r4
 800de56:	462b      	mov	r3, r5
 800de58:	f7f2 fe3e 	bl	8000ad8 <__aeabi_dcmpeq>
 800de5c:	b900      	cbnz	r0, 800de60 <_dtoa_r+0x168>
 800de5e:	3f01      	subs	r7, #1
 800de60:	2f16      	cmp	r7, #22
 800de62:	d852      	bhi.n	800df0a <_dtoa_r+0x212>
 800de64:	4b5d      	ldr	r3, [pc, #372]	@ (800dfdc <_dtoa_r+0x2e4>)
 800de66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800de6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800de72:	f7f2 fe3b 	bl	8000aec <__aeabi_dcmplt>
 800de76:	2800      	cmp	r0, #0
 800de78:	d049      	beq.n	800df0e <_dtoa_r+0x216>
 800de7a:	3f01      	subs	r7, #1
 800de7c:	2300      	movs	r3, #0
 800de7e:	9310      	str	r3, [sp, #64]	@ 0x40
 800de80:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800de82:	1b9b      	subs	r3, r3, r6
 800de84:	1e5a      	subs	r2, r3, #1
 800de86:	bf45      	ittet	mi
 800de88:	f1c3 0301 	rsbmi	r3, r3, #1
 800de8c:	9300      	strmi	r3, [sp, #0]
 800de8e:	2300      	movpl	r3, #0
 800de90:	2300      	movmi	r3, #0
 800de92:	9206      	str	r2, [sp, #24]
 800de94:	bf54      	ite	pl
 800de96:	9300      	strpl	r3, [sp, #0]
 800de98:	9306      	strmi	r3, [sp, #24]
 800de9a:	2f00      	cmp	r7, #0
 800de9c:	db39      	blt.n	800df12 <_dtoa_r+0x21a>
 800de9e:	9b06      	ldr	r3, [sp, #24]
 800dea0:	970d      	str	r7, [sp, #52]	@ 0x34
 800dea2:	443b      	add	r3, r7
 800dea4:	9306      	str	r3, [sp, #24]
 800dea6:	2300      	movs	r3, #0
 800dea8:	9308      	str	r3, [sp, #32]
 800deaa:	9b07      	ldr	r3, [sp, #28]
 800deac:	2b09      	cmp	r3, #9
 800deae:	d863      	bhi.n	800df78 <_dtoa_r+0x280>
 800deb0:	2b05      	cmp	r3, #5
 800deb2:	bfc4      	itt	gt
 800deb4:	3b04      	subgt	r3, #4
 800deb6:	9307      	strgt	r3, [sp, #28]
 800deb8:	9b07      	ldr	r3, [sp, #28]
 800deba:	f1a3 0302 	sub.w	r3, r3, #2
 800debe:	bfcc      	ite	gt
 800dec0:	2400      	movgt	r4, #0
 800dec2:	2401      	movle	r4, #1
 800dec4:	2b03      	cmp	r3, #3
 800dec6:	d863      	bhi.n	800df90 <_dtoa_r+0x298>
 800dec8:	e8df f003 	tbb	[pc, r3]
 800decc:	2b375452 	.word	0x2b375452
 800ded0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800ded4:	441e      	add	r6, r3
 800ded6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800deda:	2b20      	cmp	r3, #32
 800dedc:	bfc1      	itttt	gt
 800dede:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800dee2:	409f      	lslgt	r7, r3
 800dee4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800dee8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800deec:	bfd6      	itet	le
 800deee:	f1c3 0320 	rsble	r3, r3, #32
 800def2:	ea47 0003 	orrgt.w	r0, r7, r3
 800def6:	fa04 f003 	lslle.w	r0, r4, r3
 800defa:	f7f2 fb0b 	bl	8000514 <__aeabi_ui2d>
 800defe:	2201      	movs	r2, #1
 800df00:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800df04:	3e01      	subs	r6, #1
 800df06:	9212      	str	r2, [sp, #72]	@ 0x48
 800df08:	e776      	b.n	800ddf8 <_dtoa_r+0x100>
 800df0a:	2301      	movs	r3, #1
 800df0c:	e7b7      	b.n	800de7e <_dtoa_r+0x186>
 800df0e:	9010      	str	r0, [sp, #64]	@ 0x40
 800df10:	e7b6      	b.n	800de80 <_dtoa_r+0x188>
 800df12:	9b00      	ldr	r3, [sp, #0]
 800df14:	1bdb      	subs	r3, r3, r7
 800df16:	9300      	str	r3, [sp, #0]
 800df18:	427b      	negs	r3, r7
 800df1a:	9308      	str	r3, [sp, #32]
 800df1c:	2300      	movs	r3, #0
 800df1e:	930d      	str	r3, [sp, #52]	@ 0x34
 800df20:	e7c3      	b.n	800deaa <_dtoa_r+0x1b2>
 800df22:	2301      	movs	r3, #1
 800df24:	9309      	str	r3, [sp, #36]	@ 0x24
 800df26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800df28:	eb07 0b03 	add.w	fp, r7, r3
 800df2c:	f10b 0301 	add.w	r3, fp, #1
 800df30:	2b01      	cmp	r3, #1
 800df32:	9303      	str	r3, [sp, #12]
 800df34:	bfb8      	it	lt
 800df36:	2301      	movlt	r3, #1
 800df38:	e006      	b.n	800df48 <_dtoa_r+0x250>
 800df3a:	2301      	movs	r3, #1
 800df3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800df3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800df40:	2b00      	cmp	r3, #0
 800df42:	dd28      	ble.n	800df96 <_dtoa_r+0x29e>
 800df44:	469b      	mov	fp, r3
 800df46:	9303      	str	r3, [sp, #12]
 800df48:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800df4c:	2100      	movs	r1, #0
 800df4e:	2204      	movs	r2, #4
 800df50:	f102 0514 	add.w	r5, r2, #20
 800df54:	429d      	cmp	r5, r3
 800df56:	d926      	bls.n	800dfa6 <_dtoa_r+0x2ae>
 800df58:	6041      	str	r1, [r0, #4]
 800df5a:	4648      	mov	r0, r9
 800df5c:	f000 fce6 	bl	800e92c <_Balloc>
 800df60:	4682      	mov	sl, r0
 800df62:	2800      	cmp	r0, #0
 800df64:	d142      	bne.n	800dfec <_dtoa_r+0x2f4>
 800df66:	4b1e      	ldr	r3, [pc, #120]	@ (800dfe0 <_dtoa_r+0x2e8>)
 800df68:	4602      	mov	r2, r0
 800df6a:	f240 11af 	movw	r1, #431	@ 0x1af
 800df6e:	e6da      	b.n	800dd26 <_dtoa_r+0x2e>
 800df70:	2300      	movs	r3, #0
 800df72:	e7e3      	b.n	800df3c <_dtoa_r+0x244>
 800df74:	2300      	movs	r3, #0
 800df76:	e7d5      	b.n	800df24 <_dtoa_r+0x22c>
 800df78:	2401      	movs	r4, #1
 800df7a:	2300      	movs	r3, #0
 800df7c:	9307      	str	r3, [sp, #28]
 800df7e:	9409      	str	r4, [sp, #36]	@ 0x24
 800df80:	f04f 3bff 	mov.w	fp, #4294967295
 800df84:	2200      	movs	r2, #0
 800df86:	f8cd b00c 	str.w	fp, [sp, #12]
 800df8a:	2312      	movs	r3, #18
 800df8c:	920c      	str	r2, [sp, #48]	@ 0x30
 800df8e:	e7db      	b.n	800df48 <_dtoa_r+0x250>
 800df90:	2301      	movs	r3, #1
 800df92:	9309      	str	r3, [sp, #36]	@ 0x24
 800df94:	e7f4      	b.n	800df80 <_dtoa_r+0x288>
 800df96:	f04f 0b01 	mov.w	fp, #1
 800df9a:	f8cd b00c 	str.w	fp, [sp, #12]
 800df9e:	465b      	mov	r3, fp
 800dfa0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800dfa4:	e7d0      	b.n	800df48 <_dtoa_r+0x250>
 800dfa6:	3101      	adds	r1, #1
 800dfa8:	0052      	lsls	r2, r2, #1
 800dfaa:	e7d1      	b.n	800df50 <_dtoa_r+0x258>
 800dfac:	f3af 8000 	nop.w
 800dfb0:	636f4361 	.word	0x636f4361
 800dfb4:	3fd287a7 	.word	0x3fd287a7
 800dfb8:	8b60c8b3 	.word	0x8b60c8b3
 800dfbc:	3fc68a28 	.word	0x3fc68a28
 800dfc0:	509f79fb 	.word	0x509f79fb
 800dfc4:	3fd34413 	.word	0x3fd34413
 800dfc8:	080111ce 	.word	0x080111ce
 800dfcc:	080111e5 	.word	0x080111e5
 800dfd0:	7ff00000 	.word	0x7ff00000
 800dfd4:	08011199 	.word	0x08011199
 800dfd8:	3ff80000 	.word	0x3ff80000
 800dfdc:	08011398 	.word	0x08011398
 800dfe0:	0801123d 	.word	0x0801123d
 800dfe4:	080111ca 	.word	0x080111ca
 800dfe8:	08011198 	.word	0x08011198
 800dfec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dff0:	6018      	str	r0, [r3, #0]
 800dff2:	9b03      	ldr	r3, [sp, #12]
 800dff4:	2b0e      	cmp	r3, #14
 800dff6:	f200 80a1 	bhi.w	800e13c <_dtoa_r+0x444>
 800dffa:	2c00      	cmp	r4, #0
 800dffc:	f000 809e 	beq.w	800e13c <_dtoa_r+0x444>
 800e000:	2f00      	cmp	r7, #0
 800e002:	dd33      	ble.n	800e06c <_dtoa_r+0x374>
 800e004:	4b9c      	ldr	r3, [pc, #624]	@ (800e278 <_dtoa_r+0x580>)
 800e006:	f007 020f 	and.w	r2, r7, #15
 800e00a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e00e:	ed93 7b00 	vldr	d7, [r3]
 800e012:	05f8      	lsls	r0, r7, #23
 800e014:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800e018:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e01c:	d516      	bpl.n	800e04c <_dtoa_r+0x354>
 800e01e:	4b97      	ldr	r3, [pc, #604]	@ (800e27c <_dtoa_r+0x584>)
 800e020:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e024:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e028:	f7f2 fc18 	bl	800085c <__aeabi_ddiv>
 800e02c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e030:	f004 040f 	and.w	r4, r4, #15
 800e034:	2603      	movs	r6, #3
 800e036:	4d91      	ldr	r5, [pc, #580]	@ (800e27c <_dtoa_r+0x584>)
 800e038:	b954      	cbnz	r4, 800e050 <_dtoa_r+0x358>
 800e03a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e03e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e042:	f7f2 fc0b 	bl	800085c <__aeabi_ddiv>
 800e046:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e04a:	e028      	b.n	800e09e <_dtoa_r+0x3a6>
 800e04c:	2602      	movs	r6, #2
 800e04e:	e7f2      	b.n	800e036 <_dtoa_r+0x33e>
 800e050:	07e1      	lsls	r1, r4, #31
 800e052:	d508      	bpl.n	800e066 <_dtoa_r+0x36e>
 800e054:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e058:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e05c:	f7f2 fad4 	bl	8000608 <__aeabi_dmul>
 800e060:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e064:	3601      	adds	r6, #1
 800e066:	1064      	asrs	r4, r4, #1
 800e068:	3508      	adds	r5, #8
 800e06a:	e7e5      	b.n	800e038 <_dtoa_r+0x340>
 800e06c:	f000 80af 	beq.w	800e1ce <_dtoa_r+0x4d6>
 800e070:	427c      	negs	r4, r7
 800e072:	4b81      	ldr	r3, [pc, #516]	@ (800e278 <_dtoa_r+0x580>)
 800e074:	4d81      	ldr	r5, [pc, #516]	@ (800e27c <_dtoa_r+0x584>)
 800e076:	f004 020f 	and.w	r2, r4, #15
 800e07a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e082:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e086:	f7f2 fabf 	bl	8000608 <__aeabi_dmul>
 800e08a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e08e:	1124      	asrs	r4, r4, #4
 800e090:	2300      	movs	r3, #0
 800e092:	2602      	movs	r6, #2
 800e094:	2c00      	cmp	r4, #0
 800e096:	f040 808f 	bne.w	800e1b8 <_dtoa_r+0x4c0>
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d1d3      	bne.n	800e046 <_dtoa_r+0x34e>
 800e09e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e0a0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	f000 8094 	beq.w	800e1d2 <_dtoa_r+0x4da>
 800e0aa:	4b75      	ldr	r3, [pc, #468]	@ (800e280 <_dtoa_r+0x588>)
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	4620      	mov	r0, r4
 800e0b0:	4629      	mov	r1, r5
 800e0b2:	f7f2 fd1b 	bl	8000aec <__aeabi_dcmplt>
 800e0b6:	2800      	cmp	r0, #0
 800e0b8:	f000 808b 	beq.w	800e1d2 <_dtoa_r+0x4da>
 800e0bc:	9b03      	ldr	r3, [sp, #12]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	f000 8087 	beq.w	800e1d2 <_dtoa_r+0x4da>
 800e0c4:	f1bb 0f00 	cmp.w	fp, #0
 800e0c8:	dd34      	ble.n	800e134 <_dtoa_r+0x43c>
 800e0ca:	4620      	mov	r0, r4
 800e0cc:	4b6d      	ldr	r3, [pc, #436]	@ (800e284 <_dtoa_r+0x58c>)
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	4629      	mov	r1, r5
 800e0d2:	f7f2 fa99 	bl	8000608 <__aeabi_dmul>
 800e0d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e0da:	f107 38ff 	add.w	r8, r7, #4294967295
 800e0de:	3601      	adds	r6, #1
 800e0e0:	465c      	mov	r4, fp
 800e0e2:	4630      	mov	r0, r6
 800e0e4:	f7f2 fa26 	bl	8000534 <__aeabi_i2d>
 800e0e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e0ec:	f7f2 fa8c 	bl	8000608 <__aeabi_dmul>
 800e0f0:	4b65      	ldr	r3, [pc, #404]	@ (800e288 <_dtoa_r+0x590>)
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	f7f2 f8d2 	bl	800029c <__adddf3>
 800e0f8:	4605      	mov	r5, r0
 800e0fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e0fe:	2c00      	cmp	r4, #0
 800e100:	d16a      	bne.n	800e1d8 <_dtoa_r+0x4e0>
 800e102:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e106:	4b61      	ldr	r3, [pc, #388]	@ (800e28c <_dtoa_r+0x594>)
 800e108:	2200      	movs	r2, #0
 800e10a:	f7f2 f8c5 	bl	8000298 <__aeabi_dsub>
 800e10e:	4602      	mov	r2, r0
 800e110:	460b      	mov	r3, r1
 800e112:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e116:	462a      	mov	r2, r5
 800e118:	4633      	mov	r3, r6
 800e11a:	f7f2 fd05 	bl	8000b28 <__aeabi_dcmpgt>
 800e11e:	2800      	cmp	r0, #0
 800e120:	f040 8298 	bne.w	800e654 <_dtoa_r+0x95c>
 800e124:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e128:	462a      	mov	r2, r5
 800e12a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e12e:	f7f2 fcdd 	bl	8000aec <__aeabi_dcmplt>
 800e132:	bb38      	cbnz	r0, 800e184 <_dtoa_r+0x48c>
 800e134:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800e138:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e13c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e13e:	2b00      	cmp	r3, #0
 800e140:	f2c0 8157 	blt.w	800e3f2 <_dtoa_r+0x6fa>
 800e144:	2f0e      	cmp	r7, #14
 800e146:	f300 8154 	bgt.w	800e3f2 <_dtoa_r+0x6fa>
 800e14a:	4b4b      	ldr	r3, [pc, #300]	@ (800e278 <_dtoa_r+0x580>)
 800e14c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e150:	ed93 7b00 	vldr	d7, [r3]
 800e154:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e156:	2b00      	cmp	r3, #0
 800e158:	ed8d 7b00 	vstr	d7, [sp]
 800e15c:	f280 80e5 	bge.w	800e32a <_dtoa_r+0x632>
 800e160:	9b03      	ldr	r3, [sp, #12]
 800e162:	2b00      	cmp	r3, #0
 800e164:	f300 80e1 	bgt.w	800e32a <_dtoa_r+0x632>
 800e168:	d10c      	bne.n	800e184 <_dtoa_r+0x48c>
 800e16a:	4b48      	ldr	r3, [pc, #288]	@ (800e28c <_dtoa_r+0x594>)
 800e16c:	2200      	movs	r2, #0
 800e16e:	ec51 0b17 	vmov	r0, r1, d7
 800e172:	f7f2 fa49 	bl	8000608 <__aeabi_dmul>
 800e176:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e17a:	f7f2 fccb 	bl	8000b14 <__aeabi_dcmpge>
 800e17e:	2800      	cmp	r0, #0
 800e180:	f000 8266 	beq.w	800e650 <_dtoa_r+0x958>
 800e184:	2400      	movs	r4, #0
 800e186:	4625      	mov	r5, r4
 800e188:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e18a:	4656      	mov	r6, sl
 800e18c:	ea6f 0803 	mvn.w	r8, r3
 800e190:	2700      	movs	r7, #0
 800e192:	4621      	mov	r1, r4
 800e194:	4648      	mov	r0, r9
 800e196:	f000 fc09 	bl	800e9ac <_Bfree>
 800e19a:	2d00      	cmp	r5, #0
 800e19c:	f000 80bd 	beq.w	800e31a <_dtoa_r+0x622>
 800e1a0:	b12f      	cbz	r7, 800e1ae <_dtoa_r+0x4b6>
 800e1a2:	42af      	cmp	r7, r5
 800e1a4:	d003      	beq.n	800e1ae <_dtoa_r+0x4b6>
 800e1a6:	4639      	mov	r1, r7
 800e1a8:	4648      	mov	r0, r9
 800e1aa:	f000 fbff 	bl	800e9ac <_Bfree>
 800e1ae:	4629      	mov	r1, r5
 800e1b0:	4648      	mov	r0, r9
 800e1b2:	f000 fbfb 	bl	800e9ac <_Bfree>
 800e1b6:	e0b0      	b.n	800e31a <_dtoa_r+0x622>
 800e1b8:	07e2      	lsls	r2, r4, #31
 800e1ba:	d505      	bpl.n	800e1c8 <_dtoa_r+0x4d0>
 800e1bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e1c0:	f7f2 fa22 	bl	8000608 <__aeabi_dmul>
 800e1c4:	3601      	adds	r6, #1
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	1064      	asrs	r4, r4, #1
 800e1ca:	3508      	adds	r5, #8
 800e1cc:	e762      	b.n	800e094 <_dtoa_r+0x39c>
 800e1ce:	2602      	movs	r6, #2
 800e1d0:	e765      	b.n	800e09e <_dtoa_r+0x3a6>
 800e1d2:	9c03      	ldr	r4, [sp, #12]
 800e1d4:	46b8      	mov	r8, r7
 800e1d6:	e784      	b.n	800e0e2 <_dtoa_r+0x3ea>
 800e1d8:	4b27      	ldr	r3, [pc, #156]	@ (800e278 <_dtoa_r+0x580>)
 800e1da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e1dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e1e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e1e4:	4454      	add	r4, sl
 800e1e6:	2900      	cmp	r1, #0
 800e1e8:	d054      	beq.n	800e294 <_dtoa_r+0x59c>
 800e1ea:	4929      	ldr	r1, [pc, #164]	@ (800e290 <_dtoa_r+0x598>)
 800e1ec:	2000      	movs	r0, #0
 800e1ee:	f7f2 fb35 	bl	800085c <__aeabi_ddiv>
 800e1f2:	4633      	mov	r3, r6
 800e1f4:	462a      	mov	r2, r5
 800e1f6:	f7f2 f84f 	bl	8000298 <__aeabi_dsub>
 800e1fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e1fe:	4656      	mov	r6, sl
 800e200:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e204:	f7f2 fcb0 	bl	8000b68 <__aeabi_d2iz>
 800e208:	4605      	mov	r5, r0
 800e20a:	f7f2 f993 	bl	8000534 <__aeabi_i2d>
 800e20e:	4602      	mov	r2, r0
 800e210:	460b      	mov	r3, r1
 800e212:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e216:	f7f2 f83f 	bl	8000298 <__aeabi_dsub>
 800e21a:	3530      	adds	r5, #48	@ 0x30
 800e21c:	4602      	mov	r2, r0
 800e21e:	460b      	mov	r3, r1
 800e220:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e224:	f806 5b01 	strb.w	r5, [r6], #1
 800e228:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e22c:	f7f2 fc5e 	bl	8000aec <__aeabi_dcmplt>
 800e230:	2800      	cmp	r0, #0
 800e232:	d172      	bne.n	800e31a <_dtoa_r+0x622>
 800e234:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e238:	4911      	ldr	r1, [pc, #68]	@ (800e280 <_dtoa_r+0x588>)
 800e23a:	2000      	movs	r0, #0
 800e23c:	f7f2 f82c 	bl	8000298 <__aeabi_dsub>
 800e240:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e244:	f7f2 fc52 	bl	8000aec <__aeabi_dcmplt>
 800e248:	2800      	cmp	r0, #0
 800e24a:	f040 80b4 	bne.w	800e3b6 <_dtoa_r+0x6be>
 800e24e:	42a6      	cmp	r6, r4
 800e250:	f43f af70 	beq.w	800e134 <_dtoa_r+0x43c>
 800e254:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e258:	4b0a      	ldr	r3, [pc, #40]	@ (800e284 <_dtoa_r+0x58c>)
 800e25a:	2200      	movs	r2, #0
 800e25c:	f7f2 f9d4 	bl	8000608 <__aeabi_dmul>
 800e260:	4b08      	ldr	r3, [pc, #32]	@ (800e284 <_dtoa_r+0x58c>)
 800e262:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e266:	2200      	movs	r2, #0
 800e268:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e26c:	f7f2 f9cc 	bl	8000608 <__aeabi_dmul>
 800e270:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e274:	e7c4      	b.n	800e200 <_dtoa_r+0x508>
 800e276:	bf00      	nop
 800e278:	08011398 	.word	0x08011398
 800e27c:	08011370 	.word	0x08011370
 800e280:	3ff00000 	.word	0x3ff00000
 800e284:	40240000 	.word	0x40240000
 800e288:	401c0000 	.word	0x401c0000
 800e28c:	40140000 	.word	0x40140000
 800e290:	3fe00000 	.word	0x3fe00000
 800e294:	4631      	mov	r1, r6
 800e296:	4628      	mov	r0, r5
 800e298:	f7f2 f9b6 	bl	8000608 <__aeabi_dmul>
 800e29c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e2a0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e2a2:	4656      	mov	r6, sl
 800e2a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e2a8:	f7f2 fc5e 	bl	8000b68 <__aeabi_d2iz>
 800e2ac:	4605      	mov	r5, r0
 800e2ae:	f7f2 f941 	bl	8000534 <__aeabi_i2d>
 800e2b2:	4602      	mov	r2, r0
 800e2b4:	460b      	mov	r3, r1
 800e2b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e2ba:	f7f1 ffed 	bl	8000298 <__aeabi_dsub>
 800e2be:	3530      	adds	r5, #48	@ 0x30
 800e2c0:	f806 5b01 	strb.w	r5, [r6], #1
 800e2c4:	4602      	mov	r2, r0
 800e2c6:	460b      	mov	r3, r1
 800e2c8:	42a6      	cmp	r6, r4
 800e2ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e2ce:	f04f 0200 	mov.w	r2, #0
 800e2d2:	d124      	bne.n	800e31e <_dtoa_r+0x626>
 800e2d4:	4baf      	ldr	r3, [pc, #700]	@ (800e594 <_dtoa_r+0x89c>)
 800e2d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e2da:	f7f1 ffdf 	bl	800029c <__adddf3>
 800e2de:	4602      	mov	r2, r0
 800e2e0:	460b      	mov	r3, r1
 800e2e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e2e6:	f7f2 fc1f 	bl	8000b28 <__aeabi_dcmpgt>
 800e2ea:	2800      	cmp	r0, #0
 800e2ec:	d163      	bne.n	800e3b6 <_dtoa_r+0x6be>
 800e2ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e2f2:	49a8      	ldr	r1, [pc, #672]	@ (800e594 <_dtoa_r+0x89c>)
 800e2f4:	2000      	movs	r0, #0
 800e2f6:	f7f1 ffcf 	bl	8000298 <__aeabi_dsub>
 800e2fa:	4602      	mov	r2, r0
 800e2fc:	460b      	mov	r3, r1
 800e2fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e302:	f7f2 fbf3 	bl	8000aec <__aeabi_dcmplt>
 800e306:	2800      	cmp	r0, #0
 800e308:	f43f af14 	beq.w	800e134 <_dtoa_r+0x43c>
 800e30c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e30e:	1e73      	subs	r3, r6, #1
 800e310:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e312:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e316:	2b30      	cmp	r3, #48	@ 0x30
 800e318:	d0f8      	beq.n	800e30c <_dtoa_r+0x614>
 800e31a:	4647      	mov	r7, r8
 800e31c:	e03b      	b.n	800e396 <_dtoa_r+0x69e>
 800e31e:	4b9e      	ldr	r3, [pc, #632]	@ (800e598 <_dtoa_r+0x8a0>)
 800e320:	f7f2 f972 	bl	8000608 <__aeabi_dmul>
 800e324:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e328:	e7bc      	b.n	800e2a4 <_dtoa_r+0x5ac>
 800e32a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e32e:	4656      	mov	r6, sl
 800e330:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e334:	4620      	mov	r0, r4
 800e336:	4629      	mov	r1, r5
 800e338:	f7f2 fa90 	bl	800085c <__aeabi_ddiv>
 800e33c:	f7f2 fc14 	bl	8000b68 <__aeabi_d2iz>
 800e340:	4680      	mov	r8, r0
 800e342:	f7f2 f8f7 	bl	8000534 <__aeabi_i2d>
 800e346:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e34a:	f7f2 f95d 	bl	8000608 <__aeabi_dmul>
 800e34e:	4602      	mov	r2, r0
 800e350:	460b      	mov	r3, r1
 800e352:	4620      	mov	r0, r4
 800e354:	4629      	mov	r1, r5
 800e356:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e35a:	f7f1 ff9d 	bl	8000298 <__aeabi_dsub>
 800e35e:	f806 4b01 	strb.w	r4, [r6], #1
 800e362:	9d03      	ldr	r5, [sp, #12]
 800e364:	eba6 040a 	sub.w	r4, r6, sl
 800e368:	42a5      	cmp	r5, r4
 800e36a:	4602      	mov	r2, r0
 800e36c:	460b      	mov	r3, r1
 800e36e:	d133      	bne.n	800e3d8 <_dtoa_r+0x6e0>
 800e370:	f7f1 ff94 	bl	800029c <__adddf3>
 800e374:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e378:	4604      	mov	r4, r0
 800e37a:	460d      	mov	r5, r1
 800e37c:	f7f2 fbd4 	bl	8000b28 <__aeabi_dcmpgt>
 800e380:	b9c0      	cbnz	r0, 800e3b4 <_dtoa_r+0x6bc>
 800e382:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e386:	4620      	mov	r0, r4
 800e388:	4629      	mov	r1, r5
 800e38a:	f7f2 fba5 	bl	8000ad8 <__aeabi_dcmpeq>
 800e38e:	b110      	cbz	r0, 800e396 <_dtoa_r+0x69e>
 800e390:	f018 0f01 	tst.w	r8, #1
 800e394:	d10e      	bne.n	800e3b4 <_dtoa_r+0x6bc>
 800e396:	9902      	ldr	r1, [sp, #8]
 800e398:	4648      	mov	r0, r9
 800e39a:	f000 fb07 	bl	800e9ac <_Bfree>
 800e39e:	2300      	movs	r3, #0
 800e3a0:	7033      	strb	r3, [r6, #0]
 800e3a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e3a4:	3701      	adds	r7, #1
 800e3a6:	601f      	str	r7, [r3, #0]
 800e3a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	f000 824b 	beq.w	800e846 <_dtoa_r+0xb4e>
 800e3b0:	601e      	str	r6, [r3, #0]
 800e3b2:	e248      	b.n	800e846 <_dtoa_r+0xb4e>
 800e3b4:	46b8      	mov	r8, r7
 800e3b6:	4633      	mov	r3, r6
 800e3b8:	461e      	mov	r6, r3
 800e3ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e3be:	2a39      	cmp	r2, #57	@ 0x39
 800e3c0:	d106      	bne.n	800e3d0 <_dtoa_r+0x6d8>
 800e3c2:	459a      	cmp	sl, r3
 800e3c4:	d1f8      	bne.n	800e3b8 <_dtoa_r+0x6c0>
 800e3c6:	2230      	movs	r2, #48	@ 0x30
 800e3c8:	f108 0801 	add.w	r8, r8, #1
 800e3cc:	f88a 2000 	strb.w	r2, [sl]
 800e3d0:	781a      	ldrb	r2, [r3, #0]
 800e3d2:	3201      	adds	r2, #1
 800e3d4:	701a      	strb	r2, [r3, #0]
 800e3d6:	e7a0      	b.n	800e31a <_dtoa_r+0x622>
 800e3d8:	4b6f      	ldr	r3, [pc, #444]	@ (800e598 <_dtoa_r+0x8a0>)
 800e3da:	2200      	movs	r2, #0
 800e3dc:	f7f2 f914 	bl	8000608 <__aeabi_dmul>
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	4604      	mov	r4, r0
 800e3e6:	460d      	mov	r5, r1
 800e3e8:	f7f2 fb76 	bl	8000ad8 <__aeabi_dcmpeq>
 800e3ec:	2800      	cmp	r0, #0
 800e3ee:	d09f      	beq.n	800e330 <_dtoa_r+0x638>
 800e3f0:	e7d1      	b.n	800e396 <_dtoa_r+0x69e>
 800e3f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e3f4:	2a00      	cmp	r2, #0
 800e3f6:	f000 80ea 	beq.w	800e5ce <_dtoa_r+0x8d6>
 800e3fa:	9a07      	ldr	r2, [sp, #28]
 800e3fc:	2a01      	cmp	r2, #1
 800e3fe:	f300 80cd 	bgt.w	800e59c <_dtoa_r+0x8a4>
 800e402:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e404:	2a00      	cmp	r2, #0
 800e406:	f000 80c1 	beq.w	800e58c <_dtoa_r+0x894>
 800e40a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e40e:	9c08      	ldr	r4, [sp, #32]
 800e410:	9e00      	ldr	r6, [sp, #0]
 800e412:	9a00      	ldr	r2, [sp, #0]
 800e414:	441a      	add	r2, r3
 800e416:	9200      	str	r2, [sp, #0]
 800e418:	9a06      	ldr	r2, [sp, #24]
 800e41a:	2101      	movs	r1, #1
 800e41c:	441a      	add	r2, r3
 800e41e:	4648      	mov	r0, r9
 800e420:	9206      	str	r2, [sp, #24]
 800e422:	f000 fbc1 	bl	800eba8 <__i2b>
 800e426:	4605      	mov	r5, r0
 800e428:	b166      	cbz	r6, 800e444 <_dtoa_r+0x74c>
 800e42a:	9b06      	ldr	r3, [sp, #24]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	dd09      	ble.n	800e444 <_dtoa_r+0x74c>
 800e430:	42b3      	cmp	r3, r6
 800e432:	9a00      	ldr	r2, [sp, #0]
 800e434:	bfa8      	it	ge
 800e436:	4633      	movge	r3, r6
 800e438:	1ad2      	subs	r2, r2, r3
 800e43a:	9200      	str	r2, [sp, #0]
 800e43c:	9a06      	ldr	r2, [sp, #24]
 800e43e:	1af6      	subs	r6, r6, r3
 800e440:	1ad3      	subs	r3, r2, r3
 800e442:	9306      	str	r3, [sp, #24]
 800e444:	9b08      	ldr	r3, [sp, #32]
 800e446:	b30b      	cbz	r3, 800e48c <_dtoa_r+0x794>
 800e448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	f000 80c6 	beq.w	800e5dc <_dtoa_r+0x8e4>
 800e450:	2c00      	cmp	r4, #0
 800e452:	f000 80c0 	beq.w	800e5d6 <_dtoa_r+0x8de>
 800e456:	4629      	mov	r1, r5
 800e458:	4622      	mov	r2, r4
 800e45a:	4648      	mov	r0, r9
 800e45c:	f000 fc5c 	bl	800ed18 <__pow5mult>
 800e460:	9a02      	ldr	r2, [sp, #8]
 800e462:	4601      	mov	r1, r0
 800e464:	4605      	mov	r5, r0
 800e466:	4648      	mov	r0, r9
 800e468:	f000 fbb4 	bl	800ebd4 <__multiply>
 800e46c:	9902      	ldr	r1, [sp, #8]
 800e46e:	4680      	mov	r8, r0
 800e470:	4648      	mov	r0, r9
 800e472:	f000 fa9b 	bl	800e9ac <_Bfree>
 800e476:	9b08      	ldr	r3, [sp, #32]
 800e478:	1b1b      	subs	r3, r3, r4
 800e47a:	9308      	str	r3, [sp, #32]
 800e47c:	f000 80b1 	beq.w	800e5e2 <_dtoa_r+0x8ea>
 800e480:	9a08      	ldr	r2, [sp, #32]
 800e482:	4641      	mov	r1, r8
 800e484:	4648      	mov	r0, r9
 800e486:	f000 fc47 	bl	800ed18 <__pow5mult>
 800e48a:	9002      	str	r0, [sp, #8]
 800e48c:	2101      	movs	r1, #1
 800e48e:	4648      	mov	r0, r9
 800e490:	f000 fb8a 	bl	800eba8 <__i2b>
 800e494:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e496:	4604      	mov	r4, r0
 800e498:	2b00      	cmp	r3, #0
 800e49a:	f000 81d8 	beq.w	800e84e <_dtoa_r+0xb56>
 800e49e:	461a      	mov	r2, r3
 800e4a0:	4601      	mov	r1, r0
 800e4a2:	4648      	mov	r0, r9
 800e4a4:	f000 fc38 	bl	800ed18 <__pow5mult>
 800e4a8:	9b07      	ldr	r3, [sp, #28]
 800e4aa:	2b01      	cmp	r3, #1
 800e4ac:	4604      	mov	r4, r0
 800e4ae:	f300 809f 	bgt.w	800e5f0 <_dtoa_r+0x8f8>
 800e4b2:	9b04      	ldr	r3, [sp, #16]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	f040 8097 	bne.w	800e5e8 <_dtoa_r+0x8f0>
 800e4ba:	9b05      	ldr	r3, [sp, #20]
 800e4bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	f040 8093 	bne.w	800e5ec <_dtoa_r+0x8f4>
 800e4c6:	9b05      	ldr	r3, [sp, #20]
 800e4c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e4cc:	0d1b      	lsrs	r3, r3, #20
 800e4ce:	051b      	lsls	r3, r3, #20
 800e4d0:	b133      	cbz	r3, 800e4e0 <_dtoa_r+0x7e8>
 800e4d2:	9b00      	ldr	r3, [sp, #0]
 800e4d4:	3301      	adds	r3, #1
 800e4d6:	9300      	str	r3, [sp, #0]
 800e4d8:	9b06      	ldr	r3, [sp, #24]
 800e4da:	3301      	adds	r3, #1
 800e4dc:	9306      	str	r3, [sp, #24]
 800e4de:	2301      	movs	r3, #1
 800e4e0:	9308      	str	r3, [sp, #32]
 800e4e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	f000 81b8 	beq.w	800e85a <_dtoa_r+0xb62>
 800e4ea:	6923      	ldr	r3, [r4, #16]
 800e4ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e4f0:	6918      	ldr	r0, [r3, #16]
 800e4f2:	f000 fb0d 	bl	800eb10 <__hi0bits>
 800e4f6:	f1c0 0020 	rsb	r0, r0, #32
 800e4fa:	9b06      	ldr	r3, [sp, #24]
 800e4fc:	4418      	add	r0, r3
 800e4fe:	f010 001f 	ands.w	r0, r0, #31
 800e502:	f000 8082 	beq.w	800e60a <_dtoa_r+0x912>
 800e506:	f1c0 0320 	rsb	r3, r0, #32
 800e50a:	2b04      	cmp	r3, #4
 800e50c:	dd73      	ble.n	800e5f6 <_dtoa_r+0x8fe>
 800e50e:	9b00      	ldr	r3, [sp, #0]
 800e510:	f1c0 001c 	rsb	r0, r0, #28
 800e514:	4403      	add	r3, r0
 800e516:	9300      	str	r3, [sp, #0]
 800e518:	9b06      	ldr	r3, [sp, #24]
 800e51a:	4403      	add	r3, r0
 800e51c:	4406      	add	r6, r0
 800e51e:	9306      	str	r3, [sp, #24]
 800e520:	9b00      	ldr	r3, [sp, #0]
 800e522:	2b00      	cmp	r3, #0
 800e524:	dd05      	ble.n	800e532 <_dtoa_r+0x83a>
 800e526:	9902      	ldr	r1, [sp, #8]
 800e528:	461a      	mov	r2, r3
 800e52a:	4648      	mov	r0, r9
 800e52c:	f000 fc4e 	bl	800edcc <__lshift>
 800e530:	9002      	str	r0, [sp, #8]
 800e532:	9b06      	ldr	r3, [sp, #24]
 800e534:	2b00      	cmp	r3, #0
 800e536:	dd05      	ble.n	800e544 <_dtoa_r+0x84c>
 800e538:	4621      	mov	r1, r4
 800e53a:	461a      	mov	r2, r3
 800e53c:	4648      	mov	r0, r9
 800e53e:	f000 fc45 	bl	800edcc <__lshift>
 800e542:	4604      	mov	r4, r0
 800e544:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e546:	2b00      	cmp	r3, #0
 800e548:	d061      	beq.n	800e60e <_dtoa_r+0x916>
 800e54a:	9802      	ldr	r0, [sp, #8]
 800e54c:	4621      	mov	r1, r4
 800e54e:	f000 fca9 	bl	800eea4 <__mcmp>
 800e552:	2800      	cmp	r0, #0
 800e554:	da5b      	bge.n	800e60e <_dtoa_r+0x916>
 800e556:	2300      	movs	r3, #0
 800e558:	9902      	ldr	r1, [sp, #8]
 800e55a:	220a      	movs	r2, #10
 800e55c:	4648      	mov	r0, r9
 800e55e:	f000 fa47 	bl	800e9f0 <__multadd>
 800e562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e564:	9002      	str	r0, [sp, #8]
 800e566:	f107 38ff 	add.w	r8, r7, #4294967295
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	f000 8177 	beq.w	800e85e <_dtoa_r+0xb66>
 800e570:	4629      	mov	r1, r5
 800e572:	2300      	movs	r3, #0
 800e574:	220a      	movs	r2, #10
 800e576:	4648      	mov	r0, r9
 800e578:	f000 fa3a 	bl	800e9f0 <__multadd>
 800e57c:	f1bb 0f00 	cmp.w	fp, #0
 800e580:	4605      	mov	r5, r0
 800e582:	dc6f      	bgt.n	800e664 <_dtoa_r+0x96c>
 800e584:	9b07      	ldr	r3, [sp, #28]
 800e586:	2b02      	cmp	r3, #2
 800e588:	dc49      	bgt.n	800e61e <_dtoa_r+0x926>
 800e58a:	e06b      	b.n	800e664 <_dtoa_r+0x96c>
 800e58c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e58e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e592:	e73c      	b.n	800e40e <_dtoa_r+0x716>
 800e594:	3fe00000 	.word	0x3fe00000
 800e598:	40240000 	.word	0x40240000
 800e59c:	9b03      	ldr	r3, [sp, #12]
 800e59e:	1e5c      	subs	r4, r3, #1
 800e5a0:	9b08      	ldr	r3, [sp, #32]
 800e5a2:	42a3      	cmp	r3, r4
 800e5a4:	db09      	blt.n	800e5ba <_dtoa_r+0x8c2>
 800e5a6:	1b1c      	subs	r4, r3, r4
 800e5a8:	9b03      	ldr	r3, [sp, #12]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	f6bf af30 	bge.w	800e410 <_dtoa_r+0x718>
 800e5b0:	9b00      	ldr	r3, [sp, #0]
 800e5b2:	9a03      	ldr	r2, [sp, #12]
 800e5b4:	1a9e      	subs	r6, r3, r2
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	e72b      	b.n	800e412 <_dtoa_r+0x71a>
 800e5ba:	9b08      	ldr	r3, [sp, #32]
 800e5bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e5be:	9408      	str	r4, [sp, #32]
 800e5c0:	1ae3      	subs	r3, r4, r3
 800e5c2:	441a      	add	r2, r3
 800e5c4:	9e00      	ldr	r6, [sp, #0]
 800e5c6:	9b03      	ldr	r3, [sp, #12]
 800e5c8:	920d      	str	r2, [sp, #52]	@ 0x34
 800e5ca:	2400      	movs	r4, #0
 800e5cc:	e721      	b.n	800e412 <_dtoa_r+0x71a>
 800e5ce:	9c08      	ldr	r4, [sp, #32]
 800e5d0:	9e00      	ldr	r6, [sp, #0]
 800e5d2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e5d4:	e728      	b.n	800e428 <_dtoa_r+0x730>
 800e5d6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e5da:	e751      	b.n	800e480 <_dtoa_r+0x788>
 800e5dc:	9a08      	ldr	r2, [sp, #32]
 800e5de:	9902      	ldr	r1, [sp, #8]
 800e5e0:	e750      	b.n	800e484 <_dtoa_r+0x78c>
 800e5e2:	f8cd 8008 	str.w	r8, [sp, #8]
 800e5e6:	e751      	b.n	800e48c <_dtoa_r+0x794>
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	e779      	b.n	800e4e0 <_dtoa_r+0x7e8>
 800e5ec:	9b04      	ldr	r3, [sp, #16]
 800e5ee:	e777      	b.n	800e4e0 <_dtoa_r+0x7e8>
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	9308      	str	r3, [sp, #32]
 800e5f4:	e779      	b.n	800e4ea <_dtoa_r+0x7f2>
 800e5f6:	d093      	beq.n	800e520 <_dtoa_r+0x828>
 800e5f8:	9a00      	ldr	r2, [sp, #0]
 800e5fa:	331c      	adds	r3, #28
 800e5fc:	441a      	add	r2, r3
 800e5fe:	9200      	str	r2, [sp, #0]
 800e600:	9a06      	ldr	r2, [sp, #24]
 800e602:	441a      	add	r2, r3
 800e604:	441e      	add	r6, r3
 800e606:	9206      	str	r2, [sp, #24]
 800e608:	e78a      	b.n	800e520 <_dtoa_r+0x828>
 800e60a:	4603      	mov	r3, r0
 800e60c:	e7f4      	b.n	800e5f8 <_dtoa_r+0x900>
 800e60e:	9b03      	ldr	r3, [sp, #12]
 800e610:	2b00      	cmp	r3, #0
 800e612:	46b8      	mov	r8, r7
 800e614:	dc20      	bgt.n	800e658 <_dtoa_r+0x960>
 800e616:	469b      	mov	fp, r3
 800e618:	9b07      	ldr	r3, [sp, #28]
 800e61a:	2b02      	cmp	r3, #2
 800e61c:	dd1e      	ble.n	800e65c <_dtoa_r+0x964>
 800e61e:	f1bb 0f00 	cmp.w	fp, #0
 800e622:	f47f adb1 	bne.w	800e188 <_dtoa_r+0x490>
 800e626:	4621      	mov	r1, r4
 800e628:	465b      	mov	r3, fp
 800e62a:	2205      	movs	r2, #5
 800e62c:	4648      	mov	r0, r9
 800e62e:	f000 f9df 	bl	800e9f0 <__multadd>
 800e632:	4601      	mov	r1, r0
 800e634:	4604      	mov	r4, r0
 800e636:	9802      	ldr	r0, [sp, #8]
 800e638:	f000 fc34 	bl	800eea4 <__mcmp>
 800e63c:	2800      	cmp	r0, #0
 800e63e:	f77f ada3 	ble.w	800e188 <_dtoa_r+0x490>
 800e642:	4656      	mov	r6, sl
 800e644:	2331      	movs	r3, #49	@ 0x31
 800e646:	f806 3b01 	strb.w	r3, [r6], #1
 800e64a:	f108 0801 	add.w	r8, r8, #1
 800e64e:	e59f      	b.n	800e190 <_dtoa_r+0x498>
 800e650:	9c03      	ldr	r4, [sp, #12]
 800e652:	46b8      	mov	r8, r7
 800e654:	4625      	mov	r5, r4
 800e656:	e7f4      	b.n	800e642 <_dtoa_r+0x94a>
 800e658:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e65c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e65e:	2b00      	cmp	r3, #0
 800e660:	f000 8101 	beq.w	800e866 <_dtoa_r+0xb6e>
 800e664:	2e00      	cmp	r6, #0
 800e666:	dd05      	ble.n	800e674 <_dtoa_r+0x97c>
 800e668:	4629      	mov	r1, r5
 800e66a:	4632      	mov	r2, r6
 800e66c:	4648      	mov	r0, r9
 800e66e:	f000 fbad 	bl	800edcc <__lshift>
 800e672:	4605      	mov	r5, r0
 800e674:	9b08      	ldr	r3, [sp, #32]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d05c      	beq.n	800e734 <_dtoa_r+0xa3c>
 800e67a:	6869      	ldr	r1, [r5, #4]
 800e67c:	4648      	mov	r0, r9
 800e67e:	f000 f955 	bl	800e92c <_Balloc>
 800e682:	4606      	mov	r6, r0
 800e684:	b928      	cbnz	r0, 800e692 <_dtoa_r+0x99a>
 800e686:	4b82      	ldr	r3, [pc, #520]	@ (800e890 <_dtoa_r+0xb98>)
 800e688:	4602      	mov	r2, r0
 800e68a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e68e:	f7ff bb4a 	b.w	800dd26 <_dtoa_r+0x2e>
 800e692:	692a      	ldr	r2, [r5, #16]
 800e694:	3202      	adds	r2, #2
 800e696:	0092      	lsls	r2, r2, #2
 800e698:	f105 010c 	add.w	r1, r5, #12
 800e69c:	300c      	adds	r0, #12
 800e69e:	f001 fea5 	bl	80103ec <memcpy>
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	4631      	mov	r1, r6
 800e6a6:	4648      	mov	r0, r9
 800e6a8:	f000 fb90 	bl	800edcc <__lshift>
 800e6ac:	f10a 0301 	add.w	r3, sl, #1
 800e6b0:	9300      	str	r3, [sp, #0]
 800e6b2:	eb0a 030b 	add.w	r3, sl, fp
 800e6b6:	9308      	str	r3, [sp, #32]
 800e6b8:	9b04      	ldr	r3, [sp, #16]
 800e6ba:	f003 0301 	and.w	r3, r3, #1
 800e6be:	462f      	mov	r7, r5
 800e6c0:	9306      	str	r3, [sp, #24]
 800e6c2:	4605      	mov	r5, r0
 800e6c4:	9b00      	ldr	r3, [sp, #0]
 800e6c6:	9802      	ldr	r0, [sp, #8]
 800e6c8:	4621      	mov	r1, r4
 800e6ca:	f103 3bff 	add.w	fp, r3, #4294967295
 800e6ce:	f7ff fa8b 	bl	800dbe8 <quorem>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	3330      	adds	r3, #48	@ 0x30
 800e6d6:	9003      	str	r0, [sp, #12]
 800e6d8:	4639      	mov	r1, r7
 800e6da:	9802      	ldr	r0, [sp, #8]
 800e6dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e6de:	f000 fbe1 	bl	800eea4 <__mcmp>
 800e6e2:	462a      	mov	r2, r5
 800e6e4:	9004      	str	r0, [sp, #16]
 800e6e6:	4621      	mov	r1, r4
 800e6e8:	4648      	mov	r0, r9
 800e6ea:	f000 fbf7 	bl	800eedc <__mdiff>
 800e6ee:	68c2      	ldr	r2, [r0, #12]
 800e6f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6f2:	4606      	mov	r6, r0
 800e6f4:	bb02      	cbnz	r2, 800e738 <_dtoa_r+0xa40>
 800e6f6:	4601      	mov	r1, r0
 800e6f8:	9802      	ldr	r0, [sp, #8]
 800e6fa:	f000 fbd3 	bl	800eea4 <__mcmp>
 800e6fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e700:	4602      	mov	r2, r0
 800e702:	4631      	mov	r1, r6
 800e704:	4648      	mov	r0, r9
 800e706:	920c      	str	r2, [sp, #48]	@ 0x30
 800e708:	9309      	str	r3, [sp, #36]	@ 0x24
 800e70a:	f000 f94f 	bl	800e9ac <_Bfree>
 800e70e:	9b07      	ldr	r3, [sp, #28]
 800e710:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e712:	9e00      	ldr	r6, [sp, #0]
 800e714:	ea42 0103 	orr.w	r1, r2, r3
 800e718:	9b06      	ldr	r3, [sp, #24]
 800e71a:	4319      	orrs	r1, r3
 800e71c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e71e:	d10d      	bne.n	800e73c <_dtoa_r+0xa44>
 800e720:	2b39      	cmp	r3, #57	@ 0x39
 800e722:	d027      	beq.n	800e774 <_dtoa_r+0xa7c>
 800e724:	9a04      	ldr	r2, [sp, #16]
 800e726:	2a00      	cmp	r2, #0
 800e728:	dd01      	ble.n	800e72e <_dtoa_r+0xa36>
 800e72a:	9b03      	ldr	r3, [sp, #12]
 800e72c:	3331      	adds	r3, #49	@ 0x31
 800e72e:	f88b 3000 	strb.w	r3, [fp]
 800e732:	e52e      	b.n	800e192 <_dtoa_r+0x49a>
 800e734:	4628      	mov	r0, r5
 800e736:	e7b9      	b.n	800e6ac <_dtoa_r+0x9b4>
 800e738:	2201      	movs	r2, #1
 800e73a:	e7e2      	b.n	800e702 <_dtoa_r+0xa0a>
 800e73c:	9904      	ldr	r1, [sp, #16]
 800e73e:	2900      	cmp	r1, #0
 800e740:	db04      	blt.n	800e74c <_dtoa_r+0xa54>
 800e742:	9807      	ldr	r0, [sp, #28]
 800e744:	4301      	orrs	r1, r0
 800e746:	9806      	ldr	r0, [sp, #24]
 800e748:	4301      	orrs	r1, r0
 800e74a:	d120      	bne.n	800e78e <_dtoa_r+0xa96>
 800e74c:	2a00      	cmp	r2, #0
 800e74e:	ddee      	ble.n	800e72e <_dtoa_r+0xa36>
 800e750:	9902      	ldr	r1, [sp, #8]
 800e752:	9300      	str	r3, [sp, #0]
 800e754:	2201      	movs	r2, #1
 800e756:	4648      	mov	r0, r9
 800e758:	f000 fb38 	bl	800edcc <__lshift>
 800e75c:	4621      	mov	r1, r4
 800e75e:	9002      	str	r0, [sp, #8]
 800e760:	f000 fba0 	bl	800eea4 <__mcmp>
 800e764:	2800      	cmp	r0, #0
 800e766:	9b00      	ldr	r3, [sp, #0]
 800e768:	dc02      	bgt.n	800e770 <_dtoa_r+0xa78>
 800e76a:	d1e0      	bne.n	800e72e <_dtoa_r+0xa36>
 800e76c:	07da      	lsls	r2, r3, #31
 800e76e:	d5de      	bpl.n	800e72e <_dtoa_r+0xa36>
 800e770:	2b39      	cmp	r3, #57	@ 0x39
 800e772:	d1da      	bne.n	800e72a <_dtoa_r+0xa32>
 800e774:	2339      	movs	r3, #57	@ 0x39
 800e776:	f88b 3000 	strb.w	r3, [fp]
 800e77a:	4633      	mov	r3, r6
 800e77c:	461e      	mov	r6, r3
 800e77e:	3b01      	subs	r3, #1
 800e780:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e784:	2a39      	cmp	r2, #57	@ 0x39
 800e786:	d04e      	beq.n	800e826 <_dtoa_r+0xb2e>
 800e788:	3201      	adds	r2, #1
 800e78a:	701a      	strb	r2, [r3, #0]
 800e78c:	e501      	b.n	800e192 <_dtoa_r+0x49a>
 800e78e:	2a00      	cmp	r2, #0
 800e790:	dd03      	ble.n	800e79a <_dtoa_r+0xaa2>
 800e792:	2b39      	cmp	r3, #57	@ 0x39
 800e794:	d0ee      	beq.n	800e774 <_dtoa_r+0xa7c>
 800e796:	3301      	adds	r3, #1
 800e798:	e7c9      	b.n	800e72e <_dtoa_r+0xa36>
 800e79a:	9a00      	ldr	r2, [sp, #0]
 800e79c:	9908      	ldr	r1, [sp, #32]
 800e79e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e7a2:	428a      	cmp	r2, r1
 800e7a4:	d028      	beq.n	800e7f8 <_dtoa_r+0xb00>
 800e7a6:	9902      	ldr	r1, [sp, #8]
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	220a      	movs	r2, #10
 800e7ac:	4648      	mov	r0, r9
 800e7ae:	f000 f91f 	bl	800e9f0 <__multadd>
 800e7b2:	42af      	cmp	r7, r5
 800e7b4:	9002      	str	r0, [sp, #8]
 800e7b6:	f04f 0300 	mov.w	r3, #0
 800e7ba:	f04f 020a 	mov.w	r2, #10
 800e7be:	4639      	mov	r1, r7
 800e7c0:	4648      	mov	r0, r9
 800e7c2:	d107      	bne.n	800e7d4 <_dtoa_r+0xadc>
 800e7c4:	f000 f914 	bl	800e9f0 <__multadd>
 800e7c8:	4607      	mov	r7, r0
 800e7ca:	4605      	mov	r5, r0
 800e7cc:	9b00      	ldr	r3, [sp, #0]
 800e7ce:	3301      	adds	r3, #1
 800e7d0:	9300      	str	r3, [sp, #0]
 800e7d2:	e777      	b.n	800e6c4 <_dtoa_r+0x9cc>
 800e7d4:	f000 f90c 	bl	800e9f0 <__multadd>
 800e7d8:	4629      	mov	r1, r5
 800e7da:	4607      	mov	r7, r0
 800e7dc:	2300      	movs	r3, #0
 800e7de:	220a      	movs	r2, #10
 800e7e0:	4648      	mov	r0, r9
 800e7e2:	f000 f905 	bl	800e9f0 <__multadd>
 800e7e6:	4605      	mov	r5, r0
 800e7e8:	e7f0      	b.n	800e7cc <_dtoa_r+0xad4>
 800e7ea:	f1bb 0f00 	cmp.w	fp, #0
 800e7ee:	bfcc      	ite	gt
 800e7f0:	465e      	movgt	r6, fp
 800e7f2:	2601      	movle	r6, #1
 800e7f4:	4456      	add	r6, sl
 800e7f6:	2700      	movs	r7, #0
 800e7f8:	9902      	ldr	r1, [sp, #8]
 800e7fa:	9300      	str	r3, [sp, #0]
 800e7fc:	2201      	movs	r2, #1
 800e7fe:	4648      	mov	r0, r9
 800e800:	f000 fae4 	bl	800edcc <__lshift>
 800e804:	4621      	mov	r1, r4
 800e806:	9002      	str	r0, [sp, #8]
 800e808:	f000 fb4c 	bl	800eea4 <__mcmp>
 800e80c:	2800      	cmp	r0, #0
 800e80e:	dcb4      	bgt.n	800e77a <_dtoa_r+0xa82>
 800e810:	d102      	bne.n	800e818 <_dtoa_r+0xb20>
 800e812:	9b00      	ldr	r3, [sp, #0]
 800e814:	07db      	lsls	r3, r3, #31
 800e816:	d4b0      	bmi.n	800e77a <_dtoa_r+0xa82>
 800e818:	4633      	mov	r3, r6
 800e81a:	461e      	mov	r6, r3
 800e81c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e820:	2a30      	cmp	r2, #48	@ 0x30
 800e822:	d0fa      	beq.n	800e81a <_dtoa_r+0xb22>
 800e824:	e4b5      	b.n	800e192 <_dtoa_r+0x49a>
 800e826:	459a      	cmp	sl, r3
 800e828:	d1a8      	bne.n	800e77c <_dtoa_r+0xa84>
 800e82a:	2331      	movs	r3, #49	@ 0x31
 800e82c:	f108 0801 	add.w	r8, r8, #1
 800e830:	f88a 3000 	strb.w	r3, [sl]
 800e834:	e4ad      	b.n	800e192 <_dtoa_r+0x49a>
 800e836:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e838:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800e894 <_dtoa_r+0xb9c>
 800e83c:	b11b      	cbz	r3, 800e846 <_dtoa_r+0xb4e>
 800e83e:	f10a 0308 	add.w	r3, sl, #8
 800e842:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e844:	6013      	str	r3, [r2, #0]
 800e846:	4650      	mov	r0, sl
 800e848:	b017      	add	sp, #92	@ 0x5c
 800e84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e84e:	9b07      	ldr	r3, [sp, #28]
 800e850:	2b01      	cmp	r3, #1
 800e852:	f77f ae2e 	ble.w	800e4b2 <_dtoa_r+0x7ba>
 800e856:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e858:	9308      	str	r3, [sp, #32]
 800e85a:	2001      	movs	r0, #1
 800e85c:	e64d      	b.n	800e4fa <_dtoa_r+0x802>
 800e85e:	f1bb 0f00 	cmp.w	fp, #0
 800e862:	f77f aed9 	ble.w	800e618 <_dtoa_r+0x920>
 800e866:	4656      	mov	r6, sl
 800e868:	9802      	ldr	r0, [sp, #8]
 800e86a:	4621      	mov	r1, r4
 800e86c:	f7ff f9bc 	bl	800dbe8 <quorem>
 800e870:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e874:	f806 3b01 	strb.w	r3, [r6], #1
 800e878:	eba6 020a 	sub.w	r2, r6, sl
 800e87c:	4593      	cmp	fp, r2
 800e87e:	ddb4      	ble.n	800e7ea <_dtoa_r+0xaf2>
 800e880:	9902      	ldr	r1, [sp, #8]
 800e882:	2300      	movs	r3, #0
 800e884:	220a      	movs	r2, #10
 800e886:	4648      	mov	r0, r9
 800e888:	f000 f8b2 	bl	800e9f0 <__multadd>
 800e88c:	9002      	str	r0, [sp, #8]
 800e88e:	e7eb      	b.n	800e868 <_dtoa_r+0xb70>
 800e890:	0801123d 	.word	0x0801123d
 800e894:	080111c1 	.word	0x080111c1

0800e898 <_free_r>:
 800e898:	b538      	push	{r3, r4, r5, lr}
 800e89a:	4605      	mov	r5, r0
 800e89c:	2900      	cmp	r1, #0
 800e89e:	d041      	beq.n	800e924 <_free_r+0x8c>
 800e8a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8a4:	1f0c      	subs	r4, r1, #4
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	bfb8      	it	lt
 800e8aa:	18e4      	addlt	r4, r4, r3
 800e8ac:	f7fe f96e 	bl	800cb8c <__malloc_lock>
 800e8b0:	4a1d      	ldr	r2, [pc, #116]	@ (800e928 <_free_r+0x90>)
 800e8b2:	6813      	ldr	r3, [r2, #0]
 800e8b4:	b933      	cbnz	r3, 800e8c4 <_free_r+0x2c>
 800e8b6:	6063      	str	r3, [r4, #4]
 800e8b8:	6014      	str	r4, [r2, #0]
 800e8ba:	4628      	mov	r0, r5
 800e8bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8c0:	f7fe b96a 	b.w	800cb98 <__malloc_unlock>
 800e8c4:	42a3      	cmp	r3, r4
 800e8c6:	d908      	bls.n	800e8da <_free_r+0x42>
 800e8c8:	6820      	ldr	r0, [r4, #0]
 800e8ca:	1821      	adds	r1, r4, r0
 800e8cc:	428b      	cmp	r3, r1
 800e8ce:	bf01      	itttt	eq
 800e8d0:	6819      	ldreq	r1, [r3, #0]
 800e8d2:	685b      	ldreq	r3, [r3, #4]
 800e8d4:	1809      	addeq	r1, r1, r0
 800e8d6:	6021      	streq	r1, [r4, #0]
 800e8d8:	e7ed      	b.n	800e8b6 <_free_r+0x1e>
 800e8da:	461a      	mov	r2, r3
 800e8dc:	685b      	ldr	r3, [r3, #4]
 800e8de:	b10b      	cbz	r3, 800e8e4 <_free_r+0x4c>
 800e8e0:	42a3      	cmp	r3, r4
 800e8e2:	d9fa      	bls.n	800e8da <_free_r+0x42>
 800e8e4:	6811      	ldr	r1, [r2, #0]
 800e8e6:	1850      	adds	r0, r2, r1
 800e8e8:	42a0      	cmp	r0, r4
 800e8ea:	d10b      	bne.n	800e904 <_free_r+0x6c>
 800e8ec:	6820      	ldr	r0, [r4, #0]
 800e8ee:	4401      	add	r1, r0
 800e8f0:	1850      	adds	r0, r2, r1
 800e8f2:	4283      	cmp	r3, r0
 800e8f4:	6011      	str	r1, [r2, #0]
 800e8f6:	d1e0      	bne.n	800e8ba <_free_r+0x22>
 800e8f8:	6818      	ldr	r0, [r3, #0]
 800e8fa:	685b      	ldr	r3, [r3, #4]
 800e8fc:	6053      	str	r3, [r2, #4]
 800e8fe:	4408      	add	r0, r1
 800e900:	6010      	str	r0, [r2, #0]
 800e902:	e7da      	b.n	800e8ba <_free_r+0x22>
 800e904:	d902      	bls.n	800e90c <_free_r+0x74>
 800e906:	230c      	movs	r3, #12
 800e908:	602b      	str	r3, [r5, #0]
 800e90a:	e7d6      	b.n	800e8ba <_free_r+0x22>
 800e90c:	6820      	ldr	r0, [r4, #0]
 800e90e:	1821      	adds	r1, r4, r0
 800e910:	428b      	cmp	r3, r1
 800e912:	bf04      	itt	eq
 800e914:	6819      	ldreq	r1, [r3, #0]
 800e916:	685b      	ldreq	r3, [r3, #4]
 800e918:	6063      	str	r3, [r4, #4]
 800e91a:	bf04      	itt	eq
 800e91c:	1809      	addeq	r1, r1, r0
 800e91e:	6021      	streq	r1, [r4, #0]
 800e920:	6054      	str	r4, [r2, #4]
 800e922:	e7ca      	b.n	800e8ba <_free_r+0x22>
 800e924:	bd38      	pop	{r3, r4, r5, pc}
 800e926:	bf00      	nop
 800e928:	200016b8 	.word	0x200016b8

0800e92c <_Balloc>:
 800e92c:	b570      	push	{r4, r5, r6, lr}
 800e92e:	69c6      	ldr	r6, [r0, #28]
 800e930:	4604      	mov	r4, r0
 800e932:	460d      	mov	r5, r1
 800e934:	b976      	cbnz	r6, 800e954 <_Balloc+0x28>
 800e936:	2010      	movs	r0, #16
 800e938:	f7fe f87e 	bl	800ca38 <malloc>
 800e93c:	4602      	mov	r2, r0
 800e93e:	61e0      	str	r0, [r4, #28]
 800e940:	b920      	cbnz	r0, 800e94c <_Balloc+0x20>
 800e942:	4b18      	ldr	r3, [pc, #96]	@ (800e9a4 <_Balloc+0x78>)
 800e944:	4818      	ldr	r0, [pc, #96]	@ (800e9a8 <_Balloc+0x7c>)
 800e946:	216b      	movs	r1, #107	@ 0x6b
 800e948:	f001 fd66 	bl	8010418 <__assert_func>
 800e94c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e950:	6006      	str	r6, [r0, #0]
 800e952:	60c6      	str	r6, [r0, #12]
 800e954:	69e6      	ldr	r6, [r4, #28]
 800e956:	68f3      	ldr	r3, [r6, #12]
 800e958:	b183      	cbz	r3, 800e97c <_Balloc+0x50>
 800e95a:	69e3      	ldr	r3, [r4, #28]
 800e95c:	68db      	ldr	r3, [r3, #12]
 800e95e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e962:	b9b8      	cbnz	r0, 800e994 <_Balloc+0x68>
 800e964:	2101      	movs	r1, #1
 800e966:	fa01 f605 	lsl.w	r6, r1, r5
 800e96a:	1d72      	adds	r2, r6, #5
 800e96c:	0092      	lsls	r2, r2, #2
 800e96e:	4620      	mov	r0, r4
 800e970:	f001 fd70 	bl	8010454 <_calloc_r>
 800e974:	b160      	cbz	r0, 800e990 <_Balloc+0x64>
 800e976:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e97a:	e00e      	b.n	800e99a <_Balloc+0x6e>
 800e97c:	2221      	movs	r2, #33	@ 0x21
 800e97e:	2104      	movs	r1, #4
 800e980:	4620      	mov	r0, r4
 800e982:	f001 fd67 	bl	8010454 <_calloc_r>
 800e986:	69e3      	ldr	r3, [r4, #28]
 800e988:	60f0      	str	r0, [r6, #12]
 800e98a:	68db      	ldr	r3, [r3, #12]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d1e4      	bne.n	800e95a <_Balloc+0x2e>
 800e990:	2000      	movs	r0, #0
 800e992:	bd70      	pop	{r4, r5, r6, pc}
 800e994:	6802      	ldr	r2, [r0, #0]
 800e996:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e99a:	2300      	movs	r3, #0
 800e99c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e9a0:	e7f7      	b.n	800e992 <_Balloc+0x66>
 800e9a2:	bf00      	nop
 800e9a4:	080111ce 	.word	0x080111ce
 800e9a8:	0801124e 	.word	0x0801124e

0800e9ac <_Bfree>:
 800e9ac:	b570      	push	{r4, r5, r6, lr}
 800e9ae:	69c6      	ldr	r6, [r0, #28]
 800e9b0:	4605      	mov	r5, r0
 800e9b2:	460c      	mov	r4, r1
 800e9b4:	b976      	cbnz	r6, 800e9d4 <_Bfree+0x28>
 800e9b6:	2010      	movs	r0, #16
 800e9b8:	f7fe f83e 	bl	800ca38 <malloc>
 800e9bc:	4602      	mov	r2, r0
 800e9be:	61e8      	str	r0, [r5, #28]
 800e9c0:	b920      	cbnz	r0, 800e9cc <_Bfree+0x20>
 800e9c2:	4b09      	ldr	r3, [pc, #36]	@ (800e9e8 <_Bfree+0x3c>)
 800e9c4:	4809      	ldr	r0, [pc, #36]	@ (800e9ec <_Bfree+0x40>)
 800e9c6:	218f      	movs	r1, #143	@ 0x8f
 800e9c8:	f001 fd26 	bl	8010418 <__assert_func>
 800e9cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e9d0:	6006      	str	r6, [r0, #0]
 800e9d2:	60c6      	str	r6, [r0, #12]
 800e9d4:	b13c      	cbz	r4, 800e9e6 <_Bfree+0x3a>
 800e9d6:	69eb      	ldr	r3, [r5, #28]
 800e9d8:	6862      	ldr	r2, [r4, #4]
 800e9da:	68db      	ldr	r3, [r3, #12]
 800e9dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e9e0:	6021      	str	r1, [r4, #0]
 800e9e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e9e6:	bd70      	pop	{r4, r5, r6, pc}
 800e9e8:	080111ce 	.word	0x080111ce
 800e9ec:	0801124e 	.word	0x0801124e

0800e9f0 <__multadd>:
 800e9f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9f4:	690d      	ldr	r5, [r1, #16]
 800e9f6:	4607      	mov	r7, r0
 800e9f8:	460c      	mov	r4, r1
 800e9fa:	461e      	mov	r6, r3
 800e9fc:	f101 0c14 	add.w	ip, r1, #20
 800ea00:	2000      	movs	r0, #0
 800ea02:	f8dc 3000 	ldr.w	r3, [ip]
 800ea06:	b299      	uxth	r1, r3
 800ea08:	fb02 6101 	mla	r1, r2, r1, r6
 800ea0c:	0c1e      	lsrs	r6, r3, #16
 800ea0e:	0c0b      	lsrs	r3, r1, #16
 800ea10:	fb02 3306 	mla	r3, r2, r6, r3
 800ea14:	b289      	uxth	r1, r1
 800ea16:	3001      	adds	r0, #1
 800ea18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ea1c:	4285      	cmp	r5, r0
 800ea1e:	f84c 1b04 	str.w	r1, [ip], #4
 800ea22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ea26:	dcec      	bgt.n	800ea02 <__multadd+0x12>
 800ea28:	b30e      	cbz	r6, 800ea6e <__multadd+0x7e>
 800ea2a:	68a3      	ldr	r3, [r4, #8]
 800ea2c:	42ab      	cmp	r3, r5
 800ea2e:	dc19      	bgt.n	800ea64 <__multadd+0x74>
 800ea30:	6861      	ldr	r1, [r4, #4]
 800ea32:	4638      	mov	r0, r7
 800ea34:	3101      	adds	r1, #1
 800ea36:	f7ff ff79 	bl	800e92c <_Balloc>
 800ea3a:	4680      	mov	r8, r0
 800ea3c:	b928      	cbnz	r0, 800ea4a <__multadd+0x5a>
 800ea3e:	4602      	mov	r2, r0
 800ea40:	4b0c      	ldr	r3, [pc, #48]	@ (800ea74 <__multadd+0x84>)
 800ea42:	480d      	ldr	r0, [pc, #52]	@ (800ea78 <__multadd+0x88>)
 800ea44:	21ba      	movs	r1, #186	@ 0xba
 800ea46:	f001 fce7 	bl	8010418 <__assert_func>
 800ea4a:	6922      	ldr	r2, [r4, #16]
 800ea4c:	3202      	adds	r2, #2
 800ea4e:	f104 010c 	add.w	r1, r4, #12
 800ea52:	0092      	lsls	r2, r2, #2
 800ea54:	300c      	adds	r0, #12
 800ea56:	f001 fcc9 	bl	80103ec <memcpy>
 800ea5a:	4621      	mov	r1, r4
 800ea5c:	4638      	mov	r0, r7
 800ea5e:	f7ff ffa5 	bl	800e9ac <_Bfree>
 800ea62:	4644      	mov	r4, r8
 800ea64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ea68:	3501      	adds	r5, #1
 800ea6a:	615e      	str	r6, [r3, #20]
 800ea6c:	6125      	str	r5, [r4, #16]
 800ea6e:	4620      	mov	r0, r4
 800ea70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea74:	0801123d 	.word	0x0801123d
 800ea78:	0801124e 	.word	0x0801124e

0800ea7c <__s2b>:
 800ea7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea80:	460c      	mov	r4, r1
 800ea82:	4615      	mov	r5, r2
 800ea84:	461f      	mov	r7, r3
 800ea86:	2209      	movs	r2, #9
 800ea88:	3308      	adds	r3, #8
 800ea8a:	4606      	mov	r6, r0
 800ea8c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ea90:	2100      	movs	r1, #0
 800ea92:	2201      	movs	r2, #1
 800ea94:	429a      	cmp	r2, r3
 800ea96:	db09      	blt.n	800eaac <__s2b+0x30>
 800ea98:	4630      	mov	r0, r6
 800ea9a:	f7ff ff47 	bl	800e92c <_Balloc>
 800ea9e:	b940      	cbnz	r0, 800eab2 <__s2b+0x36>
 800eaa0:	4602      	mov	r2, r0
 800eaa2:	4b19      	ldr	r3, [pc, #100]	@ (800eb08 <__s2b+0x8c>)
 800eaa4:	4819      	ldr	r0, [pc, #100]	@ (800eb0c <__s2b+0x90>)
 800eaa6:	21d3      	movs	r1, #211	@ 0xd3
 800eaa8:	f001 fcb6 	bl	8010418 <__assert_func>
 800eaac:	0052      	lsls	r2, r2, #1
 800eaae:	3101      	adds	r1, #1
 800eab0:	e7f0      	b.n	800ea94 <__s2b+0x18>
 800eab2:	9b08      	ldr	r3, [sp, #32]
 800eab4:	6143      	str	r3, [r0, #20]
 800eab6:	2d09      	cmp	r5, #9
 800eab8:	f04f 0301 	mov.w	r3, #1
 800eabc:	6103      	str	r3, [r0, #16]
 800eabe:	dd16      	ble.n	800eaee <__s2b+0x72>
 800eac0:	f104 0909 	add.w	r9, r4, #9
 800eac4:	46c8      	mov	r8, r9
 800eac6:	442c      	add	r4, r5
 800eac8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800eacc:	4601      	mov	r1, r0
 800eace:	3b30      	subs	r3, #48	@ 0x30
 800ead0:	220a      	movs	r2, #10
 800ead2:	4630      	mov	r0, r6
 800ead4:	f7ff ff8c 	bl	800e9f0 <__multadd>
 800ead8:	45a0      	cmp	r8, r4
 800eada:	d1f5      	bne.n	800eac8 <__s2b+0x4c>
 800eadc:	f1a5 0408 	sub.w	r4, r5, #8
 800eae0:	444c      	add	r4, r9
 800eae2:	1b2d      	subs	r5, r5, r4
 800eae4:	1963      	adds	r3, r4, r5
 800eae6:	42bb      	cmp	r3, r7
 800eae8:	db04      	blt.n	800eaf4 <__s2b+0x78>
 800eaea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eaee:	340a      	adds	r4, #10
 800eaf0:	2509      	movs	r5, #9
 800eaf2:	e7f6      	b.n	800eae2 <__s2b+0x66>
 800eaf4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800eaf8:	4601      	mov	r1, r0
 800eafa:	3b30      	subs	r3, #48	@ 0x30
 800eafc:	220a      	movs	r2, #10
 800eafe:	4630      	mov	r0, r6
 800eb00:	f7ff ff76 	bl	800e9f0 <__multadd>
 800eb04:	e7ee      	b.n	800eae4 <__s2b+0x68>
 800eb06:	bf00      	nop
 800eb08:	0801123d 	.word	0x0801123d
 800eb0c:	0801124e 	.word	0x0801124e

0800eb10 <__hi0bits>:
 800eb10:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800eb14:	4603      	mov	r3, r0
 800eb16:	bf36      	itet	cc
 800eb18:	0403      	lslcc	r3, r0, #16
 800eb1a:	2000      	movcs	r0, #0
 800eb1c:	2010      	movcc	r0, #16
 800eb1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800eb22:	bf3c      	itt	cc
 800eb24:	021b      	lslcc	r3, r3, #8
 800eb26:	3008      	addcc	r0, #8
 800eb28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eb2c:	bf3c      	itt	cc
 800eb2e:	011b      	lslcc	r3, r3, #4
 800eb30:	3004      	addcc	r0, #4
 800eb32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb36:	bf3c      	itt	cc
 800eb38:	009b      	lslcc	r3, r3, #2
 800eb3a:	3002      	addcc	r0, #2
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	db05      	blt.n	800eb4c <__hi0bits+0x3c>
 800eb40:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800eb44:	f100 0001 	add.w	r0, r0, #1
 800eb48:	bf08      	it	eq
 800eb4a:	2020      	moveq	r0, #32
 800eb4c:	4770      	bx	lr

0800eb4e <__lo0bits>:
 800eb4e:	6803      	ldr	r3, [r0, #0]
 800eb50:	4602      	mov	r2, r0
 800eb52:	f013 0007 	ands.w	r0, r3, #7
 800eb56:	d00b      	beq.n	800eb70 <__lo0bits+0x22>
 800eb58:	07d9      	lsls	r1, r3, #31
 800eb5a:	d421      	bmi.n	800eba0 <__lo0bits+0x52>
 800eb5c:	0798      	lsls	r0, r3, #30
 800eb5e:	bf49      	itett	mi
 800eb60:	085b      	lsrmi	r3, r3, #1
 800eb62:	089b      	lsrpl	r3, r3, #2
 800eb64:	2001      	movmi	r0, #1
 800eb66:	6013      	strmi	r3, [r2, #0]
 800eb68:	bf5c      	itt	pl
 800eb6a:	6013      	strpl	r3, [r2, #0]
 800eb6c:	2002      	movpl	r0, #2
 800eb6e:	4770      	bx	lr
 800eb70:	b299      	uxth	r1, r3
 800eb72:	b909      	cbnz	r1, 800eb78 <__lo0bits+0x2a>
 800eb74:	0c1b      	lsrs	r3, r3, #16
 800eb76:	2010      	movs	r0, #16
 800eb78:	b2d9      	uxtb	r1, r3
 800eb7a:	b909      	cbnz	r1, 800eb80 <__lo0bits+0x32>
 800eb7c:	3008      	adds	r0, #8
 800eb7e:	0a1b      	lsrs	r3, r3, #8
 800eb80:	0719      	lsls	r1, r3, #28
 800eb82:	bf04      	itt	eq
 800eb84:	091b      	lsreq	r3, r3, #4
 800eb86:	3004      	addeq	r0, #4
 800eb88:	0799      	lsls	r1, r3, #30
 800eb8a:	bf04      	itt	eq
 800eb8c:	089b      	lsreq	r3, r3, #2
 800eb8e:	3002      	addeq	r0, #2
 800eb90:	07d9      	lsls	r1, r3, #31
 800eb92:	d403      	bmi.n	800eb9c <__lo0bits+0x4e>
 800eb94:	085b      	lsrs	r3, r3, #1
 800eb96:	f100 0001 	add.w	r0, r0, #1
 800eb9a:	d003      	beq.n	800eba4 <__lo0bits+0x56>
 800eb9c:	6013      	str	r3, [r2, #0]
 800eb9e:	4770      	bx	lr
 800eba0:	2000      	movs	r0, #0
 800eba2:	4770      	bx	lr
 800eba4:	2020      	movs	r0, #32
 800eba6:	4770      	bx	lr

0800eba8 <__i2b>:
 800eba8:	b510      	push	{r4, lr}
 800ebaa:	460c      	mov	r4, r1
 800ebac:	2101      	movs	r1, #1
 800ebae:	f7ff febd 	bl	800e92c <_Balloc>
 800ebb2:	4602      	mov	r2, r0
 800ebb4:	b928      	cbnz	r0, 800ebc2 <__i2b+0x1a>
 800ebb6:	4b05      	ldr	r3, [pc, #20]	@ (800ebcc <__i2b+0x24>)
 800ebb8:	4805      	ldr	r0, [pc, #20]	@ (800ebd0 <__i2b+0x28>)
 800ebba:	f240 1145 	movw	r1, #325	@ 0x145
 800ebbe:	f001 fc2b 	bl	8010418 <__assert_func>
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	6144      	str	r4, [r0, #20]
 800ebc6:	6103      	str	r3, [r0, #16]
 800ebc8:	bd10      	pop	{r4, pc}
 800ebca:	bf00      	nop
 800ebcc:	0801123d 	.word	0x0801123d
 800ebd0:	0801124e 	.word	0x0801124e

0800ebd4 <__multiply>:
 800ebd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebd8:	4617      	mov	r7, r2
 800ebda:	690a      	ldr	r2, [r1, #16]
 800ebdc:	693b      	ldr	r3, [r7, #16]
 800ebde:	429a      	cmp	r2, r3
 800ebe0:	bfa8      	it	ge
 800ebe2:	463b      	movge	r3, r7
 800ebe4:	4689      	mov	r9, r1
 800ebe6:	bfa4      	itt	ge
 800ebe8:	460f      	movge	r7, r1
 800ebea:	4699      	movge	r9, r3
 800ebec:	693d      	ldr	r5, [r7, #16]
 800ebee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ebf2:	68bb      	ldr	r3, [r7, #8]
 800ebf4:	6879      	ldr	r1, [r7, #4]
 800ebf6:	eb05 060a 	add.w	r6, r5, sl
 800ebfa:	42b3      	cmp	r3, r6
 800ebfc:	b085      	sub	sp, #20
 800ebfe:	bfb8      	it	lt
 800ec00:	3101      	addlt	r1, #1
 800ec02:	f7ff fe93 	bl	800e92c <_Balloc>
 800ec06:	b930      	cbnz	r0, 800ec16 <__multiply+0x42>
 800ec08:	4602      	mov	r2, r0
 800ec0a:	4b41      	ldr	r3, [pc, #260]	@ (800ed10 <__multiply+0x13c>)
 800ec0c:	4841      	ldr	r0, [pc, #260]	@ (800ed14 <__multiply+0x140>)
 800ec0e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ec12:	f001 fc01 	bl	8010418 <__assert_func>
 800ec16:	f100 0414 	add.w	r4, r0, #20
 800ec1a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ec1e:	4623      	mov	r3, r4
 800ec20:	2200      	movs	r2, #0
 800ec22:	4573      	cmp	r3, lr
 800ec24:	d320      	bcc.n	800ec68 <__multiply+0x94>
 800ec26:	f107 0814 	add.w	r8, r7, #20
 800ec2a:	f109 0114 	add.w	r1, r9, #20
 800ec2e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ec32:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ec36:	9302      	str	r3, [sp, #8]
 800ec38:	1beb      	subs	r3, r5, r7
 800ec3a:	3b15      	subs	r3, #21
 800ec3c:	f023 0303 	bic.w	r3, r3, #3
 800ec40:	3304      	adds	r3, #4
 800ec42:	3715      	adds	r7, #21
 800ec44:	42bd      	cmp	r5, r7
 800ec46:	bf38      	it	cc
 800ec48:	2304      	movcc	r3, #4
 800ec4a:	9301      	str	r3, [sp, #4]
 800ec4c:	9b02      	ldr	r3, [sp, #8]
 800ec4e:	9103      	str	r1, [sp, #12]
 800ec50:	428b      	cmp	r3, r1
 800ec52:	d80c      	bhi.n	800ec6e <__multiply+0x9a>
 800ec54:	2e00      	cmp	r6, #0
 800ec56:	dd03      	ble.n	800ec60 <__multiply+0x8c>
 800ec58:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d055      	beq.n	800ed0c <__multiply+0x138>
 800ec60:	6106      	str	r6, [r0, #16]
 800ec62:	b005      	add	sp, #20
 800ec64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec68:	f843 2b04 	str.w	r2, [r3], #4
 800ec6c:	e7d9      	b.n	800ec22 <__multiply+0x4e>
 800ec6e:	f8b1 a000 	ldrh.w	sl, [r1]
 800ec72:	f1ba 0f00 	cmp.w	sl, #0
 800ec76:	d01f      	beq.n	800ecb8 <__multiply+0xe4>
 800ec78:	46c4      	mov	ip, r8
 800ec7a:	46a1      	mov	r9, r4
 800ec7c:	2700      	movs	r7, #0
 800ec7e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ec82:	f8d9 3000 	ldr.w	r3, [r9]
 800ec86:	fa1f fb82 	uxth.w	fp, r2
 800ec8a:	b29b      	uxth	r3, r3
 800ec8c:	fb0a 330b 	mla	r3, sl, fp, r3
 800ec90:	443b      	add	r3, r7
 800ec92:	f8d9 7000 	ldr.w	r7, [r9]
 800ec96:	0c12      	lsrs	r2, r2, #16
 800ec98:	0c3f      	lsrs	r7, r7, #16
 800ec9a:	fb0a 7202 	mla	r2, sl, r2, r7
 800ec9e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800eca2:	b29b      	uxth	r3, r3
 800eca4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eca8:	4565      	cmp	r5, ip
 800ecaa:	f849 3b04 	str.w	r3, [r9], #4
 800ecae:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ecb2:	d8e4      	bhi.n	800ec7e <__multiply+0xaa>
 800ecb4:	9b01      	ldr	r3, [sp, #4]
 800ecb6:	50e7      	str	r7, [r4, r3]
 800ecb8:	9b03      	ldr	r3, [sp, #12]
 800ecba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ecbe:	3104      	adds	r1, #4
 800ecc0:	f1b9 0f00 	cmp.w	r9, #0
 800ecc4:	d020      	beq.n	800ed08 <__multiply+0x134>
 800ecc6:	6823      	ldr	r3, [r4, #0]
 800ecc8:	4647      	mov	r7, r8
 800ecca:	46a4      	mov	ip, r4
 800eccc:	f04f 0a00 	mov.w	sl, #0
 800ecd0:	f8b7 b000 	ldrh.w	fp, [r7]
 800ecd4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ecd8:	fb09 220b 	mla	r2, r9, fp, r2
 800ecdc:	4452      	add	r2, sl
 800ecde:	b29b      	uxth	r3, r3
 800ece0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ece4:	f84c 3b04 	str.w	r3, [ip], #4
 800ece8:	f857 3b04 	ldr.w	r3, [r7], #4
 800ecec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ecf0:	f8bc 3000 	ldrh.w	r3, [ip]
 800ecf4:	fb09 330a 	mla	r3, r9, sl, r3
 800ecf8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ecfc:	42bd      	cmp	r5, r7
 800ecfe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ed02:	d8e5      	bhi.n	800ecd0 <__multiply+0xfc>
 800ed04:	9a01      	ldr	r2, [sp, #4]
 800ed06:	50a3      	str	r3, [r4, r2]
 800ed08:	3404      	adds	r4, #4
 800ed0a:	e79f      	b.n	800ec4c <__multiply+0x78>
 800ed0c:	3e01      	subs	r6, #1
 800ed0e:	e7a1      	b.n	800ec54 <__multiply+0x80>
 800ed10:	0801123d 	.word	0x0801123d
 800ed14:	0801124e 	.word	0x0801124e

0800ed18 <__pow5mult>:
 800ed18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed1c:	4615      	mov	r5, r2
 800ed1e:	f012 0203 	ands.w	r2, r2, #3
 800ed22:	4607      	mov	r7, r0
 800ed24:	460e      	mov	r6, r1
 800ed26:	d007      	beq.n	800ed38 <__pow5mult+0x20>
 800ed28:	4c25      	ldr	r4, [pc, #148]	@ (800edc0 <__pow5mult+0xa8>)
 800ed2a:	3a01      	subs	r2, #1
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ed32:	f7ff fe5d 	bl	800e9f0 <__multadd>
 800ed36:	4606      	mov	r6, r0
 800ed38:	10ad      	asrs	r5, r5, #2
 800ed3a:	d03d      	beq.n	800edb8 <__pow5mult+0xa0>
 800ed3c:	69fc      	ldr	r4, [r7, #28]
 800ed3e:	b97c      	cbnz	r4, 800ed60 <__pow5mult+0x48>
 800ed40:	2010      	movs	r0, #16
 800ed42:	f7fd fe79 	bl	800ca38 <malloc>
 800ed46:	4602      	mov	r2, r0
 800ed48:	61f8      	str	r0, [r7, #28]
 800ed4a:	b928      	cbnz	r0, 800ed58 <__pow5mult+0x40>
 800ed4c:	4b1d      	ldr	r3, [pc, #116]	@ (800edc4 <__pow5mult+0xac>)
 800ed4e:	481e      	ldr	r0, [pc, #120]	@ (800edc8 <__pow5mult+0xb0>)
 800ed50:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ed54:	f001 fb60 	bl	8010418 <__assert_func>
 800ed58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ed5c:	6004      	str	r4, [r0, #0]
 800ed5e:	60c4      	str	r4, [r0, #12]
 800ed60:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ed64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ed68:	b94c      	cbnz	r4, 800ed7e <__pow5mult+0x66>
 800ed6a:	f240 2171 	movw	r1, #625	@ 0x271
 800ed6e:	4638      	mov	r0, r7
 800ed70:	f7ff ff1a 	bl	800eba8 <__i2b>
 800ed74:	2300      	movs	r3, #0
 800ed76:	f8c8 0008 	str.w	r0, [r8, #8]
 800ed7a:	4604      	mov	r4, r0
 800ed7c:	6003      	str	r3, [r0, #0]
 800ed7e:	f04f 0900 	mov.w	r9, #0
 800ed82:	07eb      	lsls	r3, r5, #31
 800ed84:	d50a      	bpl.n	800ed9c <__pow5mult+0x84>
 800ed86:	4631      	mov	r1, r6
 800ed88:	4622      	mov	r2, r4
 800ed8a:	4638      	mov	r0, r7
 800ed8c:	f7ff ff22 	bl	800ebd4 <__multiply>
 800ed90:	4631      	mov	r1, r6
 800ed92:	4680      	mov	r8, r0
 800ed94:	4638      	mov	r0, r7
 800ed96:	f7ff fe09 	bl	800e9ac <_Bfree>
 800ed9a:	4646      	mov	r6, r8
 800ed9c:	106d      	asrs	r5, r5, #1
 800ed9e:	d00b      	beq.n	800edb8 <__pow5mult+0xa0>
 800eda0:	6820      	ldr	r0, [r4, #0]
 800eda2:	b938      	cbnz	r0, 800edb4 <__pow5mult+0x9c>
 800eda4:	4622      	mov	r2, r4
 800eda6:	4621      	mov	r1, r4
 800eda8:	4638      	mov	r0, r7
 800edaa:	f7ff ff13 	bl	800ebd4 <__multiply>
 800edae:	6020      	str	r0, [r4, #0]
 800edb0:	f8c0 9000 	str.w	r9, [r0]
 800edb4:	4604      	mov	r4, r0
 800edb6:	e7e4      	b.n	800ed82 <__pow5mult+0x6a>
 800edb8:	4630      	mov	r0, r6
 800edba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edbe:	bf00      	nop
 800edc0:	08011360 	.word	0x08011360
 800edc4:	080111ce 	.word	0x080111ce
 800edc8:	0801124e 	.word	0x0801124e

0800edcc <__lshift>:
 800edcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edd0:	460c      	mov	r4, r1
 800edd2:	6849      	ldr	r1, [r1, #4]
 800edd4:	6923      	ldr	r3, [r4, #16]
 800edd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800edda:	68a3      	ldr	r3, [r4, #8]
 800eddc:	4607      	mov	r7, r0
 800edde:	4691      	mov	r9, r2
 800ede0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ede4:	f108 0601 	add.w	r6, r8, #1
 800ede8:	42b3      	cmp	r3, r6
 800edea:	db0b      	blt.n	800ee04 <__lshift+0x38>
 800edec:	4638      	mov	r0, r7
 800edee:	f7ff fd9d 	bl	800e92c <_Balloc>
 800edf2:	4605      	mov	r5, r0
 800edf4:	b948      	cbnz	r0, 800ee0a <__lshift+0x3e>
 800edf6:	4602      	mov	r2, r0
 800edf8:	4b28      	ldr	r3, [pc, #160]	@ (800ee9c <__lshift+0xd0>)
 800edfa:	4829      	ldr	r0, [pc, #164]	@ (800eea0 <__lshift+0xd4>)
 800edfc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ee00:	f001 fb0a 	bl	8010418 <__assert_func>
 800ee04:	3101      	adds	r1, #1
 800ee06:	005b      	lsls	r3, r3, #1
 800ee08:	e7ee      	b.n	800ede8 <__lshift+0x1c>
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	f100 0114 	add.w	r1, r0, #20
 800ee10:	f100 0210 	add.w	r2, r0, #16
 800ee14:	4618      	mov	r0, r3
 800ee16:	4553      	cmp	r3, sl
 800ee18:	db33      	blt.n	800ee82 <__lshift+0xb6>
 800ee1a:	6920      	ldr	r0, [r4, #16]
 800ee1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ee20:	f104 0314 	add.w	r3, r4, #20
 800ee24:	f019 091f 	ands.w	r9, r9, #31
 800ee28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ee2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ee30:	d02b      	beq.n	800ee8a <__lshift+0xbe>
 800ee32:	f1c9 0e20 	rsb	lr, r9, #32
 800ee36:	468a      	mov	sl, r1
 800ee38:	2200      	movs	r2, #0
 800ee3a:	6818      	ldr	r0, [r3, #0]
 800ee3c:	fa00 f009 	lsl.w	r0, r0, r9
 800ee40:	4310      	orrs	r0, r2
 800ee42:	f84a 0b04 	str.w	r0, [sl], #4
 800ee46:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee4a:	459c      	cmp	ip, r3
 800ee4c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ee50:	d8f3      	bhi.n	800ee3a <__lshift+0x6e>
 800ee52:	ebac 0304 	sub.w	r3, ip, r4
 800ee56:	3b15      	subs	r3, #21
 800ee58:	f023 0303 	bic.w	r3, r3, #3
 800ee5c:	3304      	adds	r3, #4
 800ee5e:	f104 0015 	add.w	r0, r4, #21
 800ee62:	4560      	cmp	r0, ip
 800ee64:	bf88      	it	hi
 800ee66:	2304      	movhi	r3, #4
 800ee68:	50ca      	str	r2, [r1, r3]
 800ee6a:	b10a      	cbz	r2, 800ee70 <__lshift+0xa4>
 800ee6c:	f108 0602 	add.w	r6, r8, #2
 800ee70:	3e01      	subs	r6, #1
 800ee72:	4638      	mov	r0, r7
 800ee74:	612e      	str	r6, [r5, #16]
 800ee76:	4621      	mov	r1, r4
 800ee78:	f7ff fd98 	bl	800e9ac <_Bfree>
 800ee7c:	4628      	mov	r0, r5
 800ee7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee82:	f842 0f04 	str.w	r0, [r2, #4]!
 800ee86:	3301      	adds	r3, #1
 800ee88:	e7c5      	b.n	800ee16 <__lshift+0x4a>
 800ee8a:	3904      	subs	r1, #4
 800ee8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee90:	f841 2f04 	str.w	r2, [r1, #4]!
 800ee94:	459c      	cmp	ip, r3
 800ee96:	d8f9      	bhi.n	800ee8c <__lshift+0xc0>
 800ee98:	e7ea      	b.n	800ee70 <__lshift+0xa4>
 800ee9a:	bf00      	nop
 800ee9c:	0801123d 	.word	0x0801123d
 800eea0:	0801124e 	.word	0x0801124e

0800eea4 <__mcmp>:
 800eea4:	690a      	ldr	r2, [r1, #16]
 800eea6:	4603      	mov	r3, r0
 800eea8:	6900      	ldr	r0, [r0, #16]
 800eeaa:	1a80      	subs	r0, r0, r2
 800eeac:	b530      	push	{r4, r5, lr}
 800eeae:	d10e      	bne.n	800eece <__mcmp+0x2a>
 800eeb0:	3314      	adds	r3, #20
 800eeb2:	3114      	adds	r1, #20
 800eeb4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800eeb8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800eebc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800eec0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800eec4:	4295      	cmp	r5, r2
 800eec6:	d003      	beq.n	800eed0 <__mcmp+0x2c>
 800eec8:	d205      	bcs.n	800eed6 <__mcmp+0x32>
 800eeca:	f04f 30ff 	mov.w	r0, #4294967295
 800eece:	bd30      	pop	{r4, r5, pc}
 800eed0:	42a3      	cmp	r3, r4
 800eed2:	d3f3      	bcc.n	800eebc <__mcmp+0x18>
 800eed4:	e7fb      	b.n	800eece <__mcmp+0x2a>
 800eed6:	2001      	movs	r0, #1
 800eed8:	e7f9      	b.n	800eece <__mcmp+0x2a>
	...

0800eedc <__mdiff>:
 800eedc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eee0:	4689      	mov	r9, r1
 800eee2:	4606      	mov	r6, r0
 800eee4:	4611      	mov	r1, r2
 800eee6:	4648      	mov	r0, r9
 800eee8:	4614      	mov	r4, r2
 800eeea:	f7ff ffdb 	bl	800eea4 <__mcmp>
 800eeee:	1e05      	subs	r5, r0, #0
 800eef0:	d112      	bne.n	800ef18 <__mdiff+0x3c>
 800eef2:	4629      	mov	r1, r5
 800eef4:	4630      	mov	r0, r6
 800eef6:	f7ff fd19 	bl	800e92c <_Balloc>
 800eefa:	4602      	mov	r2, r0
 800eefc:	b928      	cbnz	r0, 800ef0a <__mdiff+0x2e>
 800eefe:	4b3f      	ldr	r3, [pc, #252]	@ (800effc <__mdiff+0x120>)
 800ef00:	f240 2137 	movw	r1, #567	@ 0x237
 800ef04:	483e      	ldr	r0, [pc, #248]	@ (800f000 <__mdiff+0x124>)
 800ef06:	f001 fa87 	bl	8010418 <__assert_func>
 800ef0a:	2301      	movs	r3, #1
 800ef0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ef10:	4610      	mov	r0, r2
 800ef12:	b003      	add	sp, #12
 800ef14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef18:	bfbc      	itt	lt
 800ef1a:	464b      	movlt	r3, r9
 800ef1c:	46a1      	movlt	r9, r4
 800ef1e:	4630      	mov	r0, r6
 800ef20:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ef24:	bfba      	itte	lt
 800ef26:	461c      	movlt	r4, r3
 800ef28:	2501      	movlt	r5, #1
 800ef2a:	2500      	movge	r5, #0
 800ef2c:	f7ff fcfe 	bl	800e92c <_Balloc>
 800ef30:	4602      	mov	r2, r0
 800ef32:	b918      	cbnz	r0, 800ef3c <__mdiff+0x60>
 800ef34:	4b31      	ldr	r3, [pc, #196]	@ (800effc <__mdiff+0x120>)
 800ef36:	f240 2145 	movw	r1, #581	@ 0x245
 800ef3a:	e7e3      	b.n	800ef04 <__mdiff+0x28>
 800ef3c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ef40:	6926      	ldr	r6, [r4, #16]
 800ef42:	60c5      	str	r5, [r0, #12]
 800ef44:	f109 0310 	add.w	r3, r9, #16
 800ef48:	f109 0514 	add.w	r5, r9, #20
 800ef4c:	f104 0e14 	add.w	lr, r4, #20
 800ef50:	f100 0b14 	add.w	fp, r0, #20
 800ef54:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ef58:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ef5c:	9301      	str	r3, [sp, #4]
 800ef5e:	46d9      	mov	r9, fp
 800ef60:	f04f 0c00 	mov.w	ip, #0
 800ef64:	9b01      	ldr	r3, [sp, #4]
 800ef66:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ef6a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ef6e:	9301      	str	r3, [sp, #4]
 800ef70:	fa1f f38a 	uxth.w	r3, sl
 800ef74:	4619      	mov	r1, r3
 800ef76:	b283      	uxth	r3, r0
 800ef78:	1acb      	subs	r3, r1, r3
 800ef7a:	0c00      	lsrs	r0, r0, #16
 800ef7c:	4463      	add	r3, ip
 800ef7e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ef82:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ef86:	b29b      	uxth	r3, r3
 800ef88:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ef8c:	4576      	cmp	r6, lr
 800ef8e:	f849 3b04 	str.w	r3, [r9], #4
 800ef92:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ef96:	d8e5      	bhi.n	800ef64 <__mdiff+0x88>
 800ef98:	1b33      	subs	r3, r6, r4
 800ef9a:	3b15      	subs	r3, #21
 800ef9c:	f023 0303 	bic.w	r3, r3, #3
 800efa0:	3415      	adds	r4, #21
 800efa2:	3304      	adds	r3, #4
 800efa4:	42a6      	cmp	r6, r4
 800efa6:	bf38      	it	cc
 800efa8:	2304      	movcc	r3, #4
 800efaa:	441d      	add	r5, r3
 800efac:	445b      	add	r3, fp
 800efae:	461e      	mov	r6, r3
 800efb0:	462c      	mov	r4, r5
 800efb2:	4544      	cmp	r4, r8
 800efb4:	d30e      	bcc.n	800efd4 <__mdiff+0xf8>
 800efb6:	f108 0103 	add.w	r1, r8, #3
 800efba:	1b49      	subs	r1, r1, r5
 800efbc:	f021 0103 	bic.w	r1, r1, #3
 800efc0:	3d03      	subs	r5, #3
 800efc2:	45a8      	cmp	r8, r5
 800efc4:	bf38      	it	cc
 800efc6:	2100      	movcc	r1, #0
 800efc8:	440b      	add	r3, r1
 800efca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800efce:	b191      	cbz	r1, 800eff6 <__mdiff+0x11a>
 800efd0:	6117      	str	r7, [r2, #16]
 800efd2:	e79d      	b.n	800ef10 <__mdiff+0x34>
 800efd4:	f854 1b04 	ldr.w	r1, [r4], #4
 800efd8:	46e6      	mov	lr, ip
 800efda:	0c08      	lsrs	r0, r1, #16
 800efdc:	fa1c fc81 	uxtah	ip, ip, r1
 800efe0:	4471      	add	r1, lr
 800efe2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800efe6:	b289      	uxth	r1, r1
 800efe8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800efec:	f846 1b04 	str.w	r1, [r6], #4
 800eff0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eff4:	e7dd      	b.n	800efb2 <__mdiff+0xd6>
 800eff6:	3f01      	subs	r7, #1
 800eff8:	e7e7      	b.n	800efca <__mdiff+0xee>
 800effa:	bf00      	nop
 800effc:	0801123d 	.word	0x0801123d
 800f000:	0801124e 	.word	0x0801124e

0800f004 <__ulp>:
 800f004:	b082      	sub	sp, #8
 800f006:	ed8d 0b00 	vstr	d0, [sp]
 800f00a:	9a01      	ldr	r2, [sp, #4]
 800f00c:	4b0f      	ldr	r3, [pc, #60]	@ (800f04c <__ulp+0x48>)
 800f00e:	4013      	ands	r3, r2
 800f010:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f014:	2b00      	cmp	r3, #0
 800f016:	dc08      	bgt.n	800f02a <__ulp+0x26>
 800f018:	425b      	negs	r3, r3
 800f01a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f01e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f022:	da04      	bge.n	800f02e <__ulp+0x2a>
 800f024:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f028:	4113      	asrs	r3, r2
 800f02a:	2200      	movs	r2, #0
 800f02c:	e008      	b.n	800f040 <__ulp+0x3c>
 800f02e:	f1a2 0314 	sub.w	r3, r2, #20
 800f032:	2b1e      	cmp	r3, #30
 800f034:	bfda      	itte	le
 800f036:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f03a:	40da      	lsrle	r2, r3
 800f03c:	2201      	movgt	r2, #1
 800f03e:	2300      	movs	r3, #0
 800f040:	4619      	mov	r1, r3
 800f042:	4610      	mov	r0, r2
 800f044:	ec41 0b10 	vmov	d0, r0, r1
 800f048:	b002      	add	sp, #8
 800f04a:	4770      	bx	lr
 800f04c:	7ff00000 	.word	0x7ff00000

0800f050 <__b2d>:
 800f050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f054:	6906      	ldr	r6, [r0, #16]
 800f056:	f100 0814 	add.w	r8, r0, #20
 800f05a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f05e:	1f37      	subs	r7, r6, #4
 800f060:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f064:	4610      	mov	r0, r2
 800f066:	f7ff fd53 	bl	800eb10 <__hi0bits>
 800f06a:	f1c0 0320 	rsb	r3, r0, #32
 800f06e:	280a      	cmp	r0, #10
 800f070:	600b      	str	r3, [r1, #0]
 800f072:	491b      	ldr	r1, [pc, #108]	@ (800f0e0 <__b2d+0x90>)
 800f074:	dc15      	bgt.n	800f0a2 <__b2d+0x52>
 800f076:	f1c0 0c0b 	rsb	ip, r0, #11
 800f07a:	fa22 f30c 	lsr.w	r3, r2, ip
 800f07e:	45b8      	cmp	r8, r7
 800f080:	ea43 0501 	orr.w	r5, r3, r1
 800f084:	bf34      	ite	cc
 800f086:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f08a:	2300      	movcs	r3, #0
 800f08c:	3015      	adds	r0, #21
 800f08e:	fa02 f000 	lsl.w	r0, r2, r0
 800f092:	fa23 f30c 	lsr.w	r3, r3, ip
 800f096:	4303      	orrs	r3, r0
 800f098:	461c      	mov	r4, r3
 800f09a:	ec45 4b10 	vmov	d0, r4, r5
 800f09e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0a2:	45b8      	cmp	r8, r7
 800f0a4:	bf3a      	itte	cc
 800f0a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f0aa:	f1a6 0708 	subcc.w	r7, r6, #8
 800f0ae:	2300      	movcs	r3, #0
 800f0b0:	380b      	subs	r0, #11
 800f0b2:	d012      	beq.n	800f0da <__b2d+0x8a>
 800f0b4:	f1c0 0120 	rsb	r1, r0, #32
 800f0b8:	fa23 f401 	lsr.w	r4, r3, r1
 800f0bc:	4082      	lsls	r2, r0
 800f0be:	4322      	orrs	r2, r4
 800f0c0:	4547      	cmp	r7, r8
 800f0c2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800f0c6:	bf8c      	ite	hi
 800f0c8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f0cc:	2200      	movls	r2, #0
 800f0ce:	4083      	lsls	r3, r0
 800f0d0:	40ca      	lsrs	r2, r1
 800f0d2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f0d6:	4313      	orrs	r3, r2
 800f0d8:	e7de      	b.n	800f098 <__b2d+0x48>
 800f0da:	ea42 0501 	orr.w	r5, r2, r1
 800f0de:	e7db      	b.n	800f098 <__b2d+0x48>
 800f0e0:	3ff00000 	.word	0x3ff00000

0800f0e4 <__d2b>:
 800f0e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f0e8:	460f      	mov	r7, r1
 800f0ea:	2101      	movs	r1, #1
 800f0ec:	ec59 8b10 	vmov	r8, r9, d0
 800f0f0:	4616      	mov	r6, r2
 800f0f2:	f7ff fc1b 	bl	800e92c <_Balloc>
 800f0f6:	4604      	mov	r4, r0
 800f0f8:	b930      	cbnz	r0, 800f108 <__d2b+0x24>
 800f0fa:	4602      	mov	r2, r0
 800f0fc:	4b23      	ldr	r3, [pc, #140]	@ (800f18c <__d2b+0xa8>)
 800f0fe:	4824      	ldr	r0, [pc, #144]	@ (800f190 <__d2b+0xac>)
 800f100:	f240 310f 	movw	r1, #783	@ 0x30f
 800f104:	f001 f988 	bl	8010418 <__assert_func>
 800f108:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f10c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f110:	b10d      	cbz	r5, 800f116 <__d2b+0x32>
 800f112:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f116:	9301      	str	r3, [sp, #4]
 800f118:	f1b8 0300 	subs.w	r3, r8, #0
 800f11c:	d023      	beq.n	800f166 <__d2b+0x82>
 800f11e:	4668      	mov	r0, sp
 800f120:	9300      	str	r3, [sp, #0]
 800f122:	f7ff fd14 	bl	800eb4e <__lo0bits>
 800f126:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f12a:	b1d0      	cbz	r0, 800f162 <__d2b+0x7e>
 800f12c:	f1c0 0320 	rsb	r3, r0, #32
 800f130:	fa02 f303 	lsl.w	r3, r2, r3
 800f134:	430b      	orrs	r3, r1
 800f136:	40c2      	lsrs	r2, r0
 800f138:	6163      	str	r3, [r4, #20]
 800f13a:	9201      	str	r2, [sp, #4]
 800f13c:	9b01      	ldr	r3, [sp, #4]
 800f13e:	61a3      	str	r3, [r4, #24]
 800f140:	2b00      	cmp	r3, #0
 800f142:	bf0c      	ite	eq
 800f144:	2201      	moveq	r2, #1
 800f146:	2202      	movne	r2, #2
 800f148:	6122      	str	r2, [r4, #16]
 800f14a:	b1a5      	cbz	r5, 800f176 <__d2b+0x92>
 800f14c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f150:	4405      	add	r5, r0
 800f152:	603d      	str	r5, [r7, #0]
 800f154:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f158:	6030      	str	r0, [r6, #0]
 800f15a:	4620      	mov	r0, r4
 800f15c:	b003      	add	sp, #12
 800f15e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f162:	6161      	str	r1, [r4, #20]
 800f164:	e7ea      	b.n	800f13c <__d2b+0x58>
 800f166:	a801      	add	r0, sp, #4
 800f168:	f7ff fcf1 	bl	800eb4e <__lo0bits>
 800f16c:	9b01      	ldr	r3, [sp, #4]
 800f16e:	6163      	str	r3, [r4, #20]
 800f170:	3020      	adds	r0, #32
 800f172:	2201      	movs	r2, #1
 800f174:	e7e8      	b.n	800f148 <__d2b+0x64>
 800f176:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f17a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f17e:	6038      	str	r0, [r7, #0]
 800f180:	6918      	ldr	r0, [r3, #16]
 800f182:	f7ff fcc5 	bl	800eb10 <__hi0bits>
 800f186:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f18a:	e7e5      	b.n	800f158 <__d2b+0x74>
 800f18c:	0801123d 	.word	0x0801123d
 800f190:	0801124e 	.word	0x0801124e

0800f194 <__ratio>:
 800f194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f198:	b085      	sub	sp, #20
 800f19a:	e9cd 1000 	strd	r1, r0, [sp]
 800f19e:	a902      	add	r1, sp, #8
 800f1a0:	f7ff ff56 	bl	800f050 <__b2d>
 800f1a4:	9800      	ldr	r0, [sp, #0]
 800f1a6:	a903      	add	r1, sp, #12
 800f1a8:	ec55 4b10 	vmov	r4, r5, d0
 800f1ac:	f7ff ff50 	bl	800f050 <__b2d>
 800f1b0:	9b01      	ldr	r3, [sp, #4]
 800f1b2:	6919      	ldr	r1, [r3, #16]
 800f1b4:	9b00      	ldr	r3, [sp, #0]
 800f1b6:	691b      	ldr	r3, [r3, #16]
 800f1b8:	1ac9      	subs	r1, r1, r3
 800f1ba:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f1be:	1a9b      	subs	r3, r3, r2
 800f1c0:	ec5b ab10 	vmov	sl, fp, d0
 800f1c4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	bfce      	itee	gt
 800f1cc:	462a      	movgt	r2, r5
 800f1ce:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f1d2:	465a      	movle	r2, fp
 800f1d4:	462f      	mov	r7, r5
 800f1d6:	46d9      	mov	r9, fp
 800f1d8:	bfcc      	ite	gt
 800f1da:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f1de:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f1e2:	464b      	mov	r3, r9
 800f1e4:	4652      	mov	r2, sl
 800f1e6:	4620      	mov	r0, r4
 800f1e8:	4639      	mov	r1, r7
 800f1ea:	f7f1 fb37 	bl	800085c <__aeabi_ddiv>
 800f1ee:	ec41 0b10 	vmov	d0, r0, r1
 800f1f2:	b005      	add	sp, #20
 800f1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f1f8 <__copybits>:
 800f1f8:	3901      	subs	r1, #1
 800f1fa:	b570      	push	{r4, r5, r6, lr}
 800f1fc:	1149      	asrs	r1, r1, #5
 800f1fe:	6914      	ldr	r4, [r2, #16]
 800f200:	3101      	adds	r1, #1
 800f202:	f102 0314 	add.w	r3, r2, #20
 800f206:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f20a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f20e:	1f05      	subs	r5, r0, #4
 800f210:	42a3      	cmp	r3, r4
 800f212:	d30c      	bcc.n	800f22e <__copybits+0x36>
 800f214:	1aa3      	subs	r3, r4, r2
 800f216:	3b11      	subs	r3, #17
 800f218:	f023 0303 	bic.w	r3, r3, #3
 800f21c:	3211      	adds	r2, #17
 800f21e:	42a2      	cmp	r2, r4
 800f220:	bf88      	it	hi
 800f222:	2300      	movhi	r3, #0
 800f224:	4418      	add	r0, r3
 800f226:	2300      	movs	r3, #0
 800f228:	4288      	cmp	r0, r1
 800f22a:	d305      	bcc.n	800f238 <__copybits+0x40>
 800f22c:	bd70      	pop	{r4, r5, r6, pc}
 800f22e:	f853 6b04 	ldr.w	r6, [r3], #4
 800f232:	f845 6f04 	str.w	r6, [r5, #4]!
 800f236:	e7eb      	b.n	800f210 <__copybits+0x18>
 800f238:	f840 3b04 	str.w	r3, [r0], #4
 800f23c:	e7f4      	b.n	800f228 <__copybits+0x30>

0800f23e <__any_on>:
 800f23e:	f100 0214 	add.w	r2, r0, #20
 800f242:	6900      	ldr	r0, [r0, #16]
 800f244:	114b      	asrs	r3, r1, #5
 800f246:	4298      	cmp	r0, r3
 800f248:	b510      	push	{r4, lr}
 800f24a:	db11      	blt.n	800f270 <__any_on+0x32>
 800f24c:	dd0a      	ble.n	800f264 <__any_on+0x26>
 800f24e:	f011 011f 	ands.w	r1, r1, #31
 800f252:	d007      	beq.n	800f264 <__any_on+0x26>
 800f254:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f258:	fa24 f001 	lsr.w	r0, r4, r1
 800f25c:	fa00 f101 	lsl.w	r1, r0, r1
 800f260:	428c      	cmp	r4, r1
 800f262:	d10b      	bne.n	800f27c <__any_on+0x3e>
 800f264:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f268:	4293      	cmp	r3, r2
 800f26a:	d803      	bhi.n	800f274 <__any_on+0x36>
 800f26c:	2000      	movs	r0, #0
 800f26e:	bd10      	pop	{r4, pc}
 800f270:	4603      	mov	r3, r0
 800f272:	e7f7      	b.n	800f264 <__any_on+0x26>
 800f274:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f278:	2900      	cmp	r1, #0
 800f27a:	d0f5      	beq.n	800f268 <__any_on+0x2a>
 800f27c:	2001      	movs	r0, #1
 800f27e:	e7f6      	b.n	800f26e <__any_on+0x30>

0800f280 <sulp>:
 800f280:	b570      	push	{r4, r5, r6, lr}
 800f282:	4604      	mov	r4, r0
 800f284:	460d      	mov	r5, r1
 800f286:	ec45 4b10 	vmov	d0, r4, r5
 800f28a:	4616      	mov	r6, r2
 800f28c:	f7ff feba 	bl	800f004 <__ulp>
 800f290:	ec51 0b10 	vmov	r0, r1, d0
 800f294:	b17e      	cbz	r6, 800f2b6 <sulp+0x36>
 800f296:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f29a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	dd09      	ble.n	800f2b6 <sulp+0x36>
 800f2a2:	051b      	lsls	r3, r3, #20
 800f2a4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800f2a8:	2400      	movs	r4, #0
 800f2aa:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800f2ae:	4622      	mov	r2, r4
 800f2b0:	462b      	mov	r3, r5
 800f2b2:	f7f1 f9a9 	bl	8000608 <__aeabi_dmul>
 800f2b6:	ec41 0b10 	vmov	d0, r0, r1
 800f2ba:	bd70      	pop	{r4, r5, r6, pc}
 800f2bc:	0000      	movs	r0, r0
	...

0800f2c0 <_strtod_l>:
 800f2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2c4:	b09f      	sub	sp, #124	@ 0x7c
 800f2c6:	460c      	mov	r4, r1
 800f2c8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	921a      	str	r2, [sp, #104]	@ 0x68
 800f2ce:	9005      	str	r0, [sp, #20]
 800f2d0:	f04f 0a00 	mov.w	sl, #0
 800f2d4:	f04f 0b00 	mov.w	fp, #0
 800f2d8:	460a      	mov	r2, r1
 800f2da:	9219      	str	r2, [sp, #100]	@ 0x64
 800f2dc:	7811      	ldrb	r1, [r2, #0]
 800f2de:	292b      	cmp	r1, #43	@ 0x2b
 800f2e0:	d04a      	beq.n	800f378 <_strtod_l+0xb8>
 800f2e2:	d838      	bhi.n	800f356 <_strtod_l+0x96>
 800f2e4:	290d      	cmp	r1, #13
 800f2e6:	d832      	bhi.n	800f34e <_strtod_l+0x8e>
 800f2e8:	2908      	cmp	r1, #8
 800f2ea:	d832      	bhi.n	800f352 <_strtod_l+0x92>
 800f2ec:	2900      	cmp	r1, #0
 800f2ee:	d03b      	beq.n	800f368 <_strtod_l+0xa8>
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	920e      	str	r2, [sp, #56]	@ 0x38
 800f2f4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800f2f6:	782a      	ldrb	r2, [r5, #0]
 800f2f8:	2a30      	cmp	r2, #48	@ 0x30
 800f2fa:	f040 80b2 	bne.w	800f462 <_strtod_l+0x1a2>
 800f2fe:	786a      	ldrb	r2, [r5, #1]
 800f300:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f304:	2a58      	cmp	r2, #88	@ 0x58
 800f306:	d16e      	bne.n	800f3e6 <_strtod_l+0x126>
 800f308:	9302      	str	r3, [sp, #8]
 800f30a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f30c:	9301      	str	r3, [sp, #4]
 800f30e:	ab1a      	add	r3, sp, #104	@ 0x68
 800f310:	9300      	str	r3, [sp, #0]
 800f312:	4a8f      	ldr	r2, [pc, #572]	@ (800f550 <_strtod_l+0x290>)
 800f314:	9805      	ldr	r0, [sp, #20]
 800f316:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f318:	a919      	add	r1, sp, #100	@ 0x64
 800f31a:	f001 f917 	bl	801054c <__gethex>
 800f31e:	f010 060f 	ands.w	r6, r0, #15
 800f322:	4604      	mov	r4, r0
 800f324:	d005      	beq.n	800f332 <_strtod_l+0x72>
 800f326:	2e06      	cmp	r6, #6
 800f328:	d128      	bne.n	800f37c <_strtod_l+0xbc>
 800f32a:	3501      	adds	r5, #1
 800f32c:	2300      	movs	r3, #0
 800f32e:	9519      	str	r5, [sp, #100]	@ 0x64
 800f330:	930e      	str	r3, [sp, #56]	@ 0x38
 800f332:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f334:	2b00      	cmp	r3, #0
 800f336:	f040 858e 	bne.w	800fe56 <_strtod_l+0xb96>
 800f33a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f33c:	b1cb      	cbz	r3, 800f372 <_strtod_l+0xb2>
 800f33e:	4652      	mov	r2, sl
 800f340:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800f344:	ec43 2b10 	vmov	d0, r2, r3
 800f348:	b01f      	add	sp, #124	@ 0x7c
 800f34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f34e:	2920      	cmp	r1, #32
 800f350:	d1ce      	bne.n	800f2f0 <_strtod_l+0x30>
 800f352:	3201      	adds	r2, #1
 800f354:	e7c1      	b.n	800f2da <_strtod_l+0x1a>
 800f356:	292d      	cmp	r1, #45	@ 0x2d
 800f358:	d1ca      	bne.n	800f2f0 <_strtod_l+0x30>
 800f35a:	2101      	movs	r1, #1
 800f35c:	910e      	str	r1, [sp, #56]	@ 0x38
 800f35e:	1c51      	adds	r1, r2, #1
 800f360:	9119      	str	r1, [sp, #100]	@ 0x64
 800f362:	7852      	ldrb	r2, [r2, #1]
 800f364:	2a00      	cmp	r2, #0
 800f366:	d1c5      	bne.n	800f2f4 <_strtod_l+0x34>
 800f368:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f36a:	9419      	str	r4, [sp, #100]	@ 0x64
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	f040 8570 	bne.w	800fe52 <_strtod_l+0xb92>
 800f372:	4652      	mov	r2, sl
 800f374:	465b      	mov	r3, fp
 800f376:	e7e5      	b.n	800f344 <_strtod_l+0x84>
 800f378:	2100      	movs	r1, #0
 800f37a:	e7ef      	b.n	800f35c <_strtod_l+0x9c>
 800f37c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f37e:	b13a      	cbz	r2, 800f390 <_strtod_l+0xd0>
 800f380:	2135      	movs	r1, #53	@ 0x35
 800f382:	a81c      	add	r0, sp, #112	@ 0x70
 800f384:	f7ff ff38 	bl	800f1f8 <__copybits>
 800f388:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f38a:	9805      	ldr	r0, [sp, #20]
 800f38c:	f7ff fb0e 	bl	800e9ac <_Bfree>
 800f390:	3e01      	subs	r6, #1
 800f392:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f394:	2e04      	cmp	r6, #4
 800f396:	d806      	bhi.n	800f3a6 <_strtod_l+0xe6>
 800f398:	e8df f006 	tbb	[pc, r6]
 800f39c:	201d0314 	.word	0x201d0314
 800f3a0:	14          	.byte	0x14
 800f3a1:	00          	.byte	0x00
 800f3a2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800f3a6:	05e1      	lsls	r1, r4, #23
 800f3a8:	bf48      	it	mi
 800f3aa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800f3ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f3b2:	0d1b      	lsrs	r3, r3, #20
 800f3b4:	051b      	lsls	r3, r3, #20
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d1bb      	bne.n	800f332 <_strtod_l+0x72>
 800f3ba:	f7fe fbe1 	bl	800db80 <__errno>
 800f3be:	2322      	movs	r3, #34	@ 0x22
 800f3c0:	6003      	str	r3, [r0, #0]
 800f3c2:	e7b6      	b.n	800f332 <_strtod_l+0x72>
 800f3c4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800f3c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f3cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800f3d0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f3d4:	e7e7      	b.n	800f3a6 <_strtod_l+0xe6>
 800f3d6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800f558 <_strtod_l+0x298>
 800f3da:	e7e4      	b.n	800f3a6 <_strtod_l+0xe6>
 800f3dc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800f3e0:	f04f 3aff 	mov.w	sl, #4294967295
 800f3e4:	e7df      	b.n	800f3a6 <_strtod_l+0xe6>
 800f3e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f3e8:	1c5a      	adds	r2, r3, #1
 800f3ea:	9219      	str	r2, [sp, #100]	@ 0x64
 800f3ec:	785b      	ldrb	r3, [r3, #1]
 800f3ee:	2b30      	cmp	r3, #48	@ 0x30
 800f3f0:	d0f9      	beq.n	800f3e6 <_strtod_l+0x126>
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d09d      	beq.n	800f332 <_strtod_l+0x72>
 800f3f6:	2301      	movs	r3, #1
 800f3f8:	2700      	movs	r7, #0
 800f3fa:	9308      	str	r3, [sp, #32]
 800f3fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f3fe:	930c      	str	r3, [sp, #48]	@ 0x30
 800f400:	970b      	str	r7, [sp, #44]	@ 0x2c
 800f402:	46b9      	mov	r9, r7
 800f404:	220a      	movs	r2, #10
 800f406:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800f408:	7805      	ldrb	r5, [r0, #0]
 800f40a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800f40e:	b2d9      	uxtb	r1, r3
 800f410:	2909      	cmp	r1, #9
 800f412:	d928      	bls.n	800f466 <_strtod_l+0x1a6>
 800f414:	494f      	ldr	r1, [pc, #316]	@ (800f554 <_strtod_l+0x294>)
 800f416:	2201      	movs	r2, #1
 800f418:	f000 ffd6 	bl	80103c8 <strncmp>
 800f41c:	2800      	cmp	r0, #0
 800f41e:	d032      	beq.n	800f486 <_strtod_l+0x1c6>
 800f420:	2000      	movs	r0, #0
 800f422:	462a      	mov	r2, r5
 800f424:	900a      	str	r0, [sp, #40]	@ 0x28
 800f426:	464d      	mov	r5, r9
 800f428:	4603      	mov	r3, r0
 800f42a:	2a65      	cmp	r2, #101	@ 0x65
 800f42c:	d001      	beq.n	800f432 <_strtod_l+0x172>
 800f42e:	2a45      	cmp	r2, #69	@ 0x45
 800f430:	d114      	bne.n	800f45c <_strtod_l+0x19c>
 800f432:	b91d      	cbnz	r5, 800f43c <_strtod_l+0x17c>
 800f434:	9a08      	ldr	r2, [sp, #32]
 800f436:	4302      	orrs	r2, r0
 800f438:	d096      	beq.n	800f368 <_strtod_l+0xa8>
 800f43a:	2500      	movs	r5, #0
 800f43c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800f43e:	1c62      	adds	r2, r4, #1
 800f440:	9219      	str	r2, [sp, #100]	@ 0x64
 800f442:	7862      	ldrb	r2, [r4, #1]
 800f444:	2a2b      	cmp	r2, #43	@ 0x2b
 800f446:	d07a      	beq.n	800f53e <_strtod_l+0x27e>
 800f448:	2a2d      	cmp	r2, #45	@ 0x2d
 800f44a:	d07e      	beq.n	800f54a <_strtod_l+0x28a>
 800f44c:	f04f 0c00 	mov.w	ip, #0
 800f450:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800f454:	2909      	cmp	r1, #9
 800f456:	f240 8085 	bls.w	800f564 <_strtod_l+0x2a4>
 800f45a:	9419      	str	r4, [sp, #100]	@ 0x64
 800f45c:	f04f 0800 	mov.w	r8, #0
 800f460:	e0a5      	b.n	800f5ae <_strtod_l+0x2ee>
 800f462:	2300      	movs	r3, #0
 800f464:	e7c8      	b.n	800f3f8 <_strtod_l+0x138>
 800f466:	f1b9 0f08 	cmp.w	r9, #8
 800f46a:	bfd8      	it	le
 800f46c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800f46e:	f100 0001 	add.w	r0, r0, #1
 800f472:	bfda      	itte	le
 800f474:	fb02 3301 	mlale	r3, r2, r1, r3
 800f478:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800f47a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800f47e:	f109 0901 	add.w	r9, r9, #1
 800f482:	9019      	str	r0, [sp, #100]	@ 0x64
 800f484:	e7bf      	b.n	800f406 <_strtod_l+0x146>
 800f486:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f488:	1c5a      	adds	r2, r3, #1
 800f48a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f48c:	785a      	ldrb	r2, [r3, #1]
 800f48e:	f1b9 0f00 	cmp.w	r9, #0
 800f492:	d03b      	beq.n	800f50c <_strtod_l+0x24c>
 800f494:	900a      	str	r0, [sp, #40]	@ 0x28
 800f496:	464d      	mov	r5, r9
 800f498:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800f49c:	2b09      	cmp	r3, #9
 800f49e:	d912      	bls.n	800f4c6 <_strtod_l+0x206>
 800f4a0:	2301      	movs	r3, #1
 800f4a2:	e7c2      	b.n	800f42a <_strtod_l+0x16a>
 800f4a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f4a6:	1c5a      	adds	r2, r3, #1
 800f4a8:	9219      	str	r2, [sp, #100]	@ 0x64
 800f4aa:	785a      	ldrb	r2, [r3, #1]
 800f4ac:	3001      	adds	r0, #1
 800f4ae:	2a30      	cmp	r2, #48	@ 0x30
 800f4b0:	d0f8      	beq.n	800f4a4 <_strtod_l+0x1e4>
 800f4b2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f4b6:	2b08      	cmp	r3, #8
 800f4b8:	f200 84d2 	bhi.w	800fe60 <_strtod_l+0xba0>
 800f4bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f4be:	900a      	str	r0, [sp, #40]	@ 0x28
 800f4c0:	2000      	movs	r0, #0
 800f4c2:	930c      	str	r3, [sp, #48]	@ 0x30
 800f4c4:	4605      	mov	r5, r0
 800f4c6:	3a30      	subs	r2, #48	@ 0x30
 800f4c8:	f100 0301 	add.w	r3, r0, #1
 800f4cc:	d018      	beq.n	800f500 <_strtod_l+0x240>
 800f4ce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f4d0:	4419      	add	r1, r3
 800f4d2:	910a      	str	r1, [sp, #40]	@ 0x28
 800f4d4:	462e      	mov	r6, r5
 800f4d6:	f04f 0e0a 	mov.w	lr, #10
 800f4da:	1c71      	adds	r1, r6, #1
 800f4dc:	eba1 0c05 	sub.w	ip, r1, r5
 800f4e0:	4563      	cmp	r3, ip
 800f4e2:	dc15      	bgt.n	800f510 <_strtod_l+0x250>
 800f4e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800f4e8:	182b      	adds	r3, r5, r0
 800f4ea:	2b08      	cmp	r3, #8
 800f4ec:	f105 0501 	add.w	r5, r5, #1
 800f4f0:	4405      	add	r5, r0
 800f4f2:	dc1a      	bgt.n	800f52a <_strtod_l+0x26a>
 800f4f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f4f6:	230a      	movs	r3, #10
 800f4f8:	fb03 2301 	mla	r3, r3, r1, r2
 800f4fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f4fe:	2300      	movs	r3, #0
 800f500:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f502:	1c51      	adds	r1, r2, #1
 800f504:	9119      	str	r1, [sp, #100]	@ 0x64
 800f506:	7852      	ldrb	r2, [r2, #1]
 800f508:	4618      	mov	r0, r3
 800f50a:	e7c5      	b.n	800f498 <_strtod_l+0x1d8>
 800f50c:	4648      	mov	r0, r9
 800f50e:	e7ce      	b.n	800f4ae <_strtod_l+0x1ee>
 800f510:	2e08      	cmp	r6, #8
 800f512:	dc05      	bgt.n	800f520 <_strtod_l+0x260>
 800f514:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f516:	fb0e f606 	mul.w	r6, lr, r6
 800f51a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800f51c:	460e      	mov	r6, r1
 800f51e:	e7dc      	b.n	800f4da <_strtod_l+0x21a>
 800f520:	2910      	cmp	r1, #16
 800f522:	bfd8      	it	le
 800f524:	fb0e f707 	mulle.w	r7, lr, r7
 800f528:	e7f8      	b.n	800f51c <_strtod_l+0x25c>
 800f52a:	2b0f      	cmp	r3, #15
 800f52c:	bfdc      	itt	le
 800f52e:	230a      	movle	r3, #10
 800f530:	fb03 2707 	mlale	r7, r3, r7, r2
 800f534:	e7e3      	b.n	800f4fe <_strtod_l+0x23e>
 800f536:	2300      	movs	r3, #0
 800f538:	930a      	str	r3, [sp, #40]	@ 0x28
 800f53a:	2301      	movs	r3, #1
 800f53c:	e77a      	b.n	800f434 <_strtod_l+0x174>
 800f53e:	f04f 0c00 	mov.w	ip, #0
 800f542:	1ca2      	adds	r2, r4, #2
 800f544:	9219      	str	r2, [sp, #100]	@ 0x64
 800f546:	78a2      	ldrb	r2, [r4, #2]
 800f548:	e782      	b.n	800f450 <_strtod_l+0x190>
 800f54a:	f04f 0c01 	mov.w	ip, #1
 800f54e:	e7f8      	b.n	800f542 <_strtod_l+0x282>
 800f550:	08011474 	.word	0x08011474
 800f554:	080112a7 	.word	0x080112a7
 800f558:	7ff00000 	.word	0x7ff00000
 800f55c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f55e:	1c51      	adds	r1, r2, #1
 800f560:	9119      	str	r1, [sp, #100]	@ 0x64
 800f562:	7852      	ldrb	r2, [r2, #1]
 800f564:	2a30      	cmp	r2, #48	@ 0x30
 800f566:	d0f9      	beq.n	800f55c <_strtod_l+0x29c>
 800f568:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800f56c:	2908      	cmp	r1, #8
 800f56e:	f63f af75 	bhi.w	800f45c <_strtod_l+0x19c>
 800f572:	3a30      	subs	r2, #48	@ 0x30
 800f574:	9209      	str	r2, [sp, #36]	@ 0x24
 800f576:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f578:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f57a:	f04f 080a 	mov.w	r8, #10
 800f57e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f580:	1c56      	adds	r6, r2, #1
 800f582:	9619      	str	r6, [sp, #100]	@ 0x64
 800f584:	7852      	ldrb	r2, [r2, #1]
 800f586:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800f58a:	f1be 0f09 	cmp.w	lr, #9
 800f58e:	d939      	bls.n	800f604 <_strtod_l+0x344>
 800f590:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f592:	1a76      	subs	r6, r6, r1
 800f594:	2e08      	cmp	r6, #8
 800f596:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800f59a:	dc03      	bgt.n	800f5a4 <_strtod_l+0x2e4>
 800f59c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f59e:	4588      	cmp	r8, r1
 800f5a0:	bfa8      	it	ge
 800f5a2:	4688      	movge	r8, r1
 800f5a4:	f1bc 0f00 	cmp.w	ip, #0
 800f5a8:	d001      	beq.n	800f5ae <_strtod_l+0x2ee>
 800f5aa:	f1c8 0800 	rsb	r8, r8, #0
 800f5ae:	2d00      	cmp	r5, #0
 800f5b0:	d14e      	bne.n	800f650 <_strtod_l+0x390>
 800f5b2:	9908      	ldr	r1, [sp, #32]
 800f5b4:	4308      	orrs	r0, r1
 800f5b6:	f47f aebc 	bne.w	800f332 <_strtod_l+0x72>
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	f47f aed4 	bne.w	800f368 <_strtod_l+0xa8>
 800f5c0:	2a69      	cmp	r2, #105	@ 0x69
 800f5c2:	d028      	beq.n	800f616 <_strtod_l+0x356>
 800f5c4:	dc25      	bgt.n	800f612 <_strtod_l+0x352>
 800f5c6:	2a49      	cmp	r2, #73	@ 0x49
 800f5c8:	d025      	beq.n	800f616 <_strtod_l+0x356>
 800f5ca:	2a4e      	cmp	r2, #78	@ 0x4e
 800f5cc:	f47f aecc 	bne.w	800f368 <_strtod_l+0xa8>
 800f5d0:	499a      	ldr	r1, [pc, #616]	@ (800f83c <_strtod_l+0x57c>)
 800f5d2:	a819      	add	r0, sp, #100	@ 0x64
 800f5d4:	f001 f9dc 	bl	8010990 <__match>
 800f5d8:	2800      	cmp	r0, #0
 800f5da:	f43f aec5 	beq.w	800f368 <_strtod_l+0xa8>
 800f5de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f5e0:	781b      	ldrb	r3, [r3, #0]
 800f5e2:	2b28      	cmp	r3, #40	@ 0x28
 800f5e4:	d12e      	bne.n	800f644 <_strtod_l+0x384>
 800f5e6:	4996      	ldr	r1, [pc, #600]	@ (800f840 <_strtod_l+0x580>)
 800f5e8:	aa1c      	add	r2, sp, #112	@ 0x70
 800f5ea:	a819      	add	r0, sp, #100	@ 0x64
 800f5ec:	f001 f9e4 	bl	80109b8 <__hexnan>
 800f5f0:	2805      	cmp	r0, #5
 800f5f2:	d127      	bne.n	800f644 <_strtod_l+0x384>
 800f5f4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f5f6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800f5fa:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f5fe:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f602:	e696      	b.n	800f332 <_strtod_l+0x72>
 800f604:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f606:	fb08 2101 	mla	r1, r8, r1, r2
 800f60a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800f60e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f610:	e7b5      	b.n	800f57e <_strtod_l+0x2be>
 800f612:	2a6e      	cmp	r2, #110	@ 0x6e
 800f614:	e7da      	b.n	800f5cc <_strtod_l+0x30c>
 800f616:	498b      	ldr	r1, [pc, #556]	@ (800f844 <_strtod_l+0x584>)
 800f618:	a819      	add	r0, sp, #100	@ 0x64
 800f61a:	f001 f9b9 	bl	8010990 <__match>
 800f61e:	2800      	cmp	r0, #0
 800f620:	f43f aea2 	beq.w	800f368 <_strtod_l+0xa8>
 800f624:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f626:	4988      	ldr	r1, [pc, #544]	@ (800f848 <_strtod_l+0x588>)
 800f628:	3b01      	subs	r3, #1
 800f62a:	a819      	add	r0, sp, #100	@ 0x64
 800f62c:	9319      	str	r3, [sp, #100]	@ 0x64
 800f62e:	f001 f9af 	bl	8010990 <__match>
 800f632:	b910      	cbnz	r0, 800f63a <_strtod_l+0x37a>
 800f634:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f636:	3301      	adds	r3, #1
 800f638:	9319      	str	r3, [sp, #100]	@ 0x64
 800f63a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800f858 <_strtod_l+0x598>
 800f63e:	f04f 0a00 	mov.w	sl, #0
 800f642:	e676      	b.n	800f332 <_strtod_l+0x72>
 800f644:	4881      	ldr	r0, [pc, #516]	@ (800f84c <_strtod_l+0x58c>)
 800f646:	f000 fedf 	bl	8010408 <nan>
 800f64a:	ec5b ab10 	vmov	sl, fp, d0
 800f64e:	e670      	b.n	800f332 <_strtod_l+0x72>
 800f650:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f652:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800f654:	eba8 0303 	sub.w	r3, r8, r3
 800f658:	f1b9 0f00 	cmp.w	r9, #0
 800f65c:	bf08      	it	eq
 800f65e:	46a9      	moveq	r9, r5
 800f660:	2d10      	cmp	r5, #16
 800f662:	9309      	str	r3, [sp, #36]	@ 0x24
 800f664:	462c      	mov	r4, r5
 800f666:	bfa8      	it	ge
 800f668:	2410      	movge	r4, #16
 800f66a:	f7f0 ff53 	bl	8000514 <__aeabi_ui2d>
 800f66e:	2d09      	cmp	r5, #9
 800f670:	4682      	mov	sl, r0
 800f672:	468b      	mov	fp, r1
 800f674:	dc13      	bgt.n	800f69e <_strtod_l+0x3de>
 800f676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f678:	2b00      	cmp	r3, #0
 800f67a:	f43f ae5a 	beq.w	800f332 <_strtod_l+0x72>
 800f67e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f680:	dd78      	ble.n	800f774 <_strtod_l+0x4b4>
 800f682:	2b16      	cmp	r3, #22
 800f684:	dc5f      	bgt.n	800f746 <_strtod_l+0x486>
 800f686:	4972      	ldr	r1, [pc, #456]	@ (800f850 <_strtod_l+0x590>)
 800f688:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f68c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f690:	4652      	mov	r2, sl
 800f692:	465b      	mov	r3, fp
 800f694:	f7f0 ffb8 	bl	8000608 <__aeabi_dmul>
 800f698:	4682      	mov	sl, r0
 800f69a:	468b      	mov	fp, r1
 800f69c:	e649      	b.n	800f332 <_strtod_l+0x72>
 800f69e:	4b6c      	ldr	r3, [pc, #432]	@ (800f850 <_strtod_l+0x590>)
 800f6a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f6a4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f6a8:	f7f0 ffae 	bl	8000608 <__aeabi_dmul>
 800f6ac:	4682      	mov	sl, r0
 800f6ae:	4638      	mov	r0, r7
 800f6b0:	468b      	mov	fp, r1
 800f6b2:	f7f0 ff2f 	bl	8000514 <__aeabi_ui2d>
 800f6b6:	4602      	mov	r2, r0
 800f6b8:	460b      	mov	r3, r1
 800f6ba:	4650      	mov	r0, sl
 800f6bc:	4659      	mov	r1, fp
 800f6be:	f7f0 fded 	bl	800029c <__adddf3>
 800f6c2:	2d0f      	cmp	r5, #15
 800f6c4:	4682      	mov	sl, r0
 800f6c6:	468b      	mov	fp, r1
 800f6c8:	ddd5      	ble.n	800f676 <_strtod_l+0x3b6>
 800f6ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6cc:	1b2c      	subs	r4, r5, r4
 800f6ce:	441c      	add	r4, r3
 800f6d0:	2c00      	cmp	r4, #0
 800f6d2:	f340 8093 	ble.w	800f7fc <_strtod_l+0x53c>
 800f6d6:	f014 030f 	ands.w	r3, r4, #15
 800f6da:	d00a      	beq.n	800f6f2 <_strtod_l+0x432>
 800f6dc:	495c      	ldr	r1, [pc, #368]	@ (800f850 <_strtod_l+0x590>)
 800f6de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f6e2:	4652      	mov	r2, sl
 800f6e4:	465b      	mov	r3, fp
 800f6e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f6ea:	f7f0 ff8d 	bl	8000608 <__aeabi_dmul>
 800f6ee:	4682      	mov	sl, r0
 800f6f0:	468b      	mov	fp, r1
 800f6f2:	f034 040f 	bics.w	r4, r4, #15
 800f6f6:	d073      	beq.n	800f7e0 <_strtod_l+0x520>
 800f6f8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f6fc:	dd49      	ble.n	800f792 <_strtod_l+0x4d2>
 800f6fe:	2400      	movs	r4, #0
 800f700:	46a0      	mov	r8, r4
 800f702:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f704:	46a1      	mov	r9, r4
 800f706:	9a05      	ldr	r2, [sp, #20]
 800f708:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800f858 <_strtod_l+0x598>
 800f70c:	2322      	movs	r3, #34	@ 0x22
 800f70e:	6013      	str	r3, [r2, #0]
 800f710:	f04f 0a00 	mov.w	sl, #0
 800f714:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f716:	2b00      	cmp	r3, #0
 800f718:	f43f ae0b 	beq.w	800f332 <_strtod_l+0x72>
 800f71c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f71e:	9805      	ldr	r0, [sp, #20]
 800f720:	f7ff f944 	bl	800e9ac <_Bfree>
 800f724:	9805      	ldr	r0, [sp, #20]
 800f726:	4649      	mov	r1, r9
 800f728:	f7ff f940 	bl	800e9ac <_Bfree>
 800f72c:	9805      	ldr	r0, [sp, #20]
 800f72e:	4641      	mov	r1, r8
 800f730:	f7ff f93c 	bl	800e9ac <_Bfree>
 800f734:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f736:	9805      	ldr	r0, [sp, #20]
 800f738:	f7ff f938 	bl	800e9ac <_Bfree>
 800f73c:	9805      	ldr	r0, [sp, #20]
 800f73e:	4621      	mov	r1, r4
 800f740:	f7ff f934 	bl	800e9ac <_Bfree>
 800f744:	e5f5      	b.n	800f332 <_strtod_l+0x72>
 800f746:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f748:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f74c:	4293      	cmp	r3, r2
 800f74e:	dbbc      	blt.n	800f6ca <_strtod_l+0x40a>
 800f750:	4c3f      	ldr	r4, [pc, #252]	@ (800f850 <_strtod_l+0x590>)
 800f752:	f1c5 050f 	rsb	r5, r5, #15
 800f756:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f75a:	4652      	mov	r2, sl
 800f75c:	465b      	mov	r3, fp
 800f75e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f762:	f7f0 ff51 	bl	8000608 <__aeabi_dmul>
 800f766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f768:	1b5d      	subs	r5, r3, r5
 800f76a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f76e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f772:	e78f      	b.n	800f694 <_strtod_l+0x3d4>
 800f774:	3316      	adds	r3, #22
 800f776:	dba8      	blt.n	800f6ca <_strtod_l+0x40a>
 800f778:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f77a:	eba3 0808 	sub.w	r8, r3, r8
 800f77e:	4b34      	ldr	r3, [pc, #208]	@ (800f850 <_strtod_l+0x590>)
 800f780:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f784:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f788:	4650      	mov	r0, sl
 800f78a:	4659      	mov	r1, fp
 800f78c:	f7f1 f866 	bl	800085c <__aeabi_ddiv>
 800f790:	e782      	b.n	800f698 <_strtod_l+0x3d8>
 800f792:	2300      	movs	r3, #0
 800f794:	4f2f      	ldr	r7, [pc, #188]	@ (800f854 <_strtod_l+0x594>)
 800f796:	1124      	asrs	r4, r4, #4
 800f798:	4650      	mov	r0, sl
 800f79a:	4659      	mov	r1, fp
 800f79c:	461e      	mov	r6, r3
 800f79e:	2c01      	cmp	r4, #1
 800f7a0:	dc21      	bgt.n	800f7e6 <_strtod_l+0x526>
 800f7a2:	b10b      	cbz	r3, 800f7a8 <_strtod_l+0x4e8>
 800f7a4:	4682      	mov	sl, r0
 800f7a6:	468b      	mov	fp, r1
 800f7a8:	492a      	ldr	r1, [pc, #168]	@ (800f854 <_strtod_l+0x594>)
 800f7aa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f7ae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f7b2:	4652      	mov	r2, sl
 800f7b4:	465b      	mov	r3, fp
 800f7b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f7ba:	f7f0 ff25 	bl	8000608 <__aeabi_dmul>
 800f7be:	4b26      	ldr	r3, [pc, #152]	@ (800f858 <_strtod_l+0x598>)
 800f7c0:	460a      	mov	r2, r1
 800f7c2:	400b      	ands	r3, r1
 800f7c4:	4925      	ldr	r1, [pc, #148]	@ (800f85c <_strtod_l+0x59c>)
 800f7c6:	428b      	cmp	r3, r1
 800f7c8:	4682      	mov	sl, r0
 800f7ca:	d898      	bhi.n	800f6fe <_strtod_l+0x43e>
 800f7cc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f7d0:	428b      	cmp	r3, r1
 800f7d2:	bf86      	itte	hi
 800f7d4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800f860 <_strtod_l+0x5a0>
 800f7d8:	f04f 3aff 	movhi.w	sl, #4294967295
 800f7dc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	9308      	str	r3, [sp, #32]
 800f7e4:	e076      	b.n	800f8d4 <_strtod_l+0x614>
 800f7e6:	07e2      	lsls	r2, r4, #31
 800f7e8:	d504      	bpl.n	800f7f4 <_strtod_l+0x534>
 800f7ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f7ee:	f7f0 ff0b 	bl	8000608 <__aeabi_dmul>
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	3601      	adds	r6, #1
 800f7f6:	1064      	asrs	r4, r4, #1
 800f7f8:	3708      	adds	r7, #8
 800f7fa:	e7d0      	b.n	800f79e <_strtod_l+0x4de>
 800f7fc:	d0f0      	beq.n	800f7e0 <_strtod_l+0x520>
 800f7fe:	4264      	negs	r4, r4
 800f800:	f014 020f 	ands.w	r2, r4, #15
 800f804:	d00a      	beq.n	800f81c <_strtod_l+0x55c>
 800f806:	4b12      	ldr	r3, [pc, #72]	@ (800f850 <_strtod_l+0x590>)
 800f808:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f80c:	4650      	mov	r0, sl
 800f80e:	4659      	mov	r1, fp
 800f810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f814:	f7f1 f822 	bl	800085c <__aeabi_ddiv>
 800f818:	4682      	mov	sl, r0
 800f81a:	468b      	mov	fp, r1
 800f81c:	1124      	asrs	r4, r4, #4
 800f81e:	d0df      	beq.n	800f7e0 <_strtod_l+0x520>
 800f820:	2c1f      	cmp	r4, #31
 800f822:	dd1f      	ble.n	800f864 <_strtod_l+0x5a4>
 800f824:	2400      	movs	r4, #0
 800f826:	46a0      	mov	r8, r4
 800f828:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f82a:	46a1      	mov	r9, r4
 800f82c:	9a05      	ldr	r2, [sp, #20]
 800f82e:	2322      	movs	r3, #34	@ 0x22
 800f830:	f04f 0a00 	mov.w	sl, #0
 800f834:	f04f 0b00 	mov.w	fp, #0
 800f838:	6013      	str	r3, [r2, #0]
 800f83a:	e76b      	b.n	800f714 <_strtod_l+0x454>
 800f83c:	08011195 	.word	0x08011195
 800f840:	08011460 	.word	0x08011460
 800f844:	0801118d 	.word	0x0801118d
 800f848:	080111c4 	.word	0x080111c4
 800f84c:	080112fd 	.word	0x080112fd
 800f850:	08011398 	.word	0x08011398
 800f854:	08011370 	.word	0x08011370
 800f858:	7ff00000 	.word	0x7ff00000
 800f85c:	7ca00000 	.word	0x7ca00000
 800f860:	7fefffff 	.word	0x7fefffff
 800f864:	f014 0310 	ands.w	r3, r4, #16
 800f868:	bf18      	it	ne
 800f86a:	236a      	movne	r3, #106	@ 0x6a
 800f86c:	4ea9      	ldr	r6, [pc, #676]	@ (800fb14 <_strtod_l+0x854>)
 800f86e:	9308      	str	r3, [sp, #32]
 800f870:	4650      	mov	r0, sl
 800f872:	4659      	mov	r1, fp
 800f874:	2300      	movs	r3, #0
 800f876:	07e7      	lsls	r7, r4, #31
 800f878:	d504      	bpl.n	800f884 <_strtod_l+0x5c4>
 800f87a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f87e:	f7f0 fec3 	bl	8000608 <__aeabi_dmul>
 800f882:	2301      	movs	r3, #1
 800f884:	1064      	asrs	r4, r4, #1
 800f886:	f106 0608 	add.w	r6, r6, #8
 800f88a:	d1f4      	bne.n	800f876 <_strtod_l+0x5b6>
 800f88c:	b10b      	cbz	r3, 800f892 <_strtod_l+0x5d2>
 800f88e:	4682      	mov	sl, r0
 800f890:	468b      	mov	fp, r1
 800f892:	9b08      	ldr	r3, [sp, #32]
 800f894:	b1b3      	cbz	r3, 800f8c4 <_strtod_l+0x604>
 800f896:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f89a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	4659      	mov	r1, fp
 800f8a2:	dd0f      	ble.n	800f8c4 <_strtod_l+0x604>
 800f8a4:	2b1f      	cmp	r3, #31
 800f8a6:	dd56      	ble.n	800f956 <_strtod_l+0x696>
 800f8a8:	2b34      	cmp	r3, #52	@ 0x34
 800f8aa:	bfde      	ittt	le
 800f8ac:	f04f 33ff 	movle.w	r3, #4294967295
 800f8b0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f8b4:	4093      	lslle	r3, r2
 800f8b6:	f04f 0a00 	mov.w	sl, #0
 800f8ba:	bfcc      	ite	gt
 800f8bc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f8c0:	ea03 0b01 	andle.w	fp, r3, r1
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	4650      	mov	r0, sl
 800f8ca:	4659      	mov	r1, fp
 800f8cc:	f7f1 f904 	bl	8000ad8 <__aeabi_dcmpeq>
 800f8d0:	2800      	cmp	r0, #0
 800f8d2:	d1a7      	bne.n	800f824 <_strtod_l+0x564>
 800f8d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f8d6:	9300      	str	r3, [sp, #0]
 800f8d8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f8da:	9805      	ldr	r0, [sp, #20]
 800f8dc:	462b      	mov	r3, r5
 800f8de:	464a      	mov	r2, r9
 800f8e0:	f7ff f8cc 	bl	800ea7c <__s2b>
 800f8e4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f8e6:	2800      	cmp	r0, #0
 800f8e8:	f43f af09 	beq.w	800f6fe <_strtod_l+0x43e>
 800f8ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f8ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f8f0:	2a00      	cmp	r2, #0
 800f8f2:	eba3 0308 	sub.w	r3, r3, r8
 800f8f6:	bfa8      	it	ge
 800f8f8:	2300      	movge	r3, #0
 800f8fa:	9312      	str	r3, [sp, #72]	@ 0x48
 800f8fc:	2400      	movs	r4, #0
 800f8fe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f902:	9316      	str	r3, [sp, #88]	@ 0x58
 800f904:	46a0      	mov	r8, r4
 800f906:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f908:	9805      	ldr	r0, [sp, #20]
 800f90a:	6859      	ldr	r1, [r3, #4]
 800f90c:	f7ff f80e 	bl	800e92c <_Balloc>
 800f910:	4681      	mov	r9, r0
 800f912:	2800      	cmp	r0, #0
 800f914:	f43f aef7 	beq.w	800f706 <_strtod_l+0x446>
 800f918:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f91a:	691a      	ldr	r2, [r3, #16]
 800f91c:	3202      	adds	r2, #2
 800f91e:	f103 010c 	add.w	r1, r3, #12
 800f922:	0092      	lsls	r2, r2, #2
 800f924:	300c      	adds	r0, #12
 800f926:	f000 fd61 	bl	80103ec <memcpy>
 800f92a:	ec4b ab10 	vmov	d0, sl, fp
 800f92e:	9805      	ldr	r0, [sp, #20]
 800f930:	aa1c      	add	r2, sp, #112	@ 0x70
 800f932:	a91b      	add	r1, sp, #108	@ 0x6c
 800f934:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f938:	f7ff fbd4 	bl	800f0e4 <__d2b>
 800f93c:	901a      	str	r0, [sp, #104]	@ 0x68
 800f93e:	2800      	cmp	r0, #0
 800f940:	f43f aee1 	beq.w	800f706 <_strtod_l+0x446>
 800f944:	9805      	ldr	r0, [sp, #20]
 800f946:	2101      	movs	r1, #1
 800f948:	f7ff f92e 	bl	800eba8 <__i2b>
 800f94c:	4680      	mov	r8, r0
 800f94e:	b948      	cbnz	r0, 800f964 <_strtod_l+0x6a4>
 800f950:	f04f 0800 	mov.w	r8, #0
 800f954:	e6d7      	b.n	800f706 <_strtod_l+0x446>
 800f956:	f04f 32ff 	mov.w	r2, #4294967295
 800f95a:	fa02 f303 	lsl.w	r3, r2, r3
 800f95e:	ea03 0a0a 	and.w	sl, r3, sl
 800f962:	e7af      	b.n	800f8c4 <_strtod_l+0x604>
 800f964:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f966:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f968:	2d00      	cmp	r5, #0
 800f96a:	bfab      	itete	ge
 800f96c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f96e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f970:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f972:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f974:	bfac      	ite	ge
 800f976:	18ef      	addge	r7, r5, r3
 800f978:	1b5e      	sublt	r6, r3, r5
 800f97a:	9b08      	ldr	r3, [sp, #32]
 800f97c:	1aed      	subs	r5, r5, r3
 800f97e:	4415      	add	r5, r2
 800f980:	4b65      	ldr	r3, [pc, #404]	@ (800fb18 <_strtod_l+0x858>)
 800f982:	3d01      	subs	r5, #1
 800f984:	429d      	cmp	r5, r3
 800f986:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f98a:	da50      	bge.n	800fa2e <_strtod_l+0x76e>
 800f98c:	1b5b      	subs	r3, r3, r5
 800f98e:	2b1f      	cmp	r3, #31
 800f990:	eba2 0203 	sub.w	r2, r2, r3
 800f994:	f04f 0101 	mov.w	r1, #1
 800f998:	dc3d      	bgt.n	800fa16 <_strtod_l+0x756>
 800f99a:	fa01 f303 	lsl.w	r3, r1, r3
 800f99e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	9310      	str	r3, [sp, #64]	@ 0x40
 800f9a4:	18bd      	adds	r5, r7, r2
 800f9a6:	9b08      	ldr	r3, [sp, #32]
 800f9a8:	42af      	cmp	r7, r5
 800f9aa:	4416      	add	r6, r2
 800f9ac:	441e      	add	r6, r3
 800f9ae:	463b      	mov	r3, r7
 800f9b0:	bfa8      	it	ge
 800f9b2:	462b      	movge	r3, r5
 800f9b4:	42b3      	cmp	r3, r6
 800f9b6:	bfa8      	it	ge
 800f9b8:	4633      	movge	r3, r6
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	bfc2      	ittt	gt
 800f9be:	1aed      	subgt	r5, r5, r3
 800f9c0:	1af6      	subgt	r6, r6, r3
 800f9c2:	1aff      	subgt	r7, r7, r3
 800f9c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	dd16      	ble.n	800f9f8 <_strtod_l+0x738>
 800f9ca:	4641      	mov	r1, r8
 800f9cc:	9805      	ldr	r0, [sp, #20]
 800f9ce:	461a      	mov	r2, r3
 800f9d0:	f7ff f9a2 	bl	800ed18 <__pow5mult>
 800f9d4:	4680      	mov	r8, r0
 800f9d6:	2800      	cmp	r0, #0
 800f9d8:	d0ba      	beq.n	800f950 <_strtod_l+0x690>
 800f9da:	4601      	mov	r1, r0
 800f9dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f9de:	9805      	ldr	r0, [sp, #20]
 800f9e0:	f7ff f8f8 	bl	800ebd4 <__multiply>
 800f9e4:	900a      	str	r0, [sp, #40]	@ 0x28
 800f9e6:	2800      	cmp	r0, #0
 800f9e8:	f43f ae8d 	beq.w	800f706 <_strtod_l+0x446>
 800f9ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f9ee:	9805      	ldr	r0, [sp, #20]
 800f9f0:	f7fe ffdc 	bl	800e9ac <_Bfree>
 800f9f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f9f6:	931a      	str	r3, [sp, #104]	@ 0x68
 800f9f8:	2d00      	cmp	r5, #0
 800f9fa:	dc1d      	bgt.n	800fa38 <_strtod_l+0x778>
 800f9fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	dd23      	ble.n	800fa4a <_strtod_l+0x78a>
 800fa02:	4649      	mov	r1, r9
 800fa04:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800fa06:	9805      	ldr	r0, [sp, #20]
 800fa08:	f7ff f986 	bl	800ed18 <__pow5mult>
 800fa0c:	4681      	mov	r9, r0
 800fa0e:	b9e0      	cbnz	r0, 800fa4a <_strtod_l+0x78a>
 800fa10:	f04f 0900 	mov.w	r9, #0
 800fa14:	e677      	b.n	800f706 <_strtod_l+0x446>
 800fa16:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800fa1a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800fa1e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800fa22:	35e2      	adds	r5, #226	@ 0xe2
 800fa24:	fa01 f305 	lsl.w	r3, r1, r5
 800fa28:	9310      	str	r3, [sp, #64]	@ 0x40
 800fa2a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800fa2c:	e7ba      	b.n	800f9a4 <_strtod_l+0x6e4>
 800fa2e:	2300      	movs	r3, #0
 800fa30:	9310      	str	r3, [sp, #64]	@ 0x40
 800fa32:	2301      	movs	r3, #1
 800fa34:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fa36:	e7b5      	b.n	800f9a4 <_strtod_l+0x6e4>
 800fa38:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fa3a:	9805      	ldr	r0, [sp, #20]
 800fa3c:	462a      	mov	r2, r5
 800fa3e:	f7ff f9c5 	bl	800edcc <__lshift>
 800fa42:	901a      	str	r0, [sp, #104]	@ 0x68
 800fa44:	2800      	cmp	r0, #0
 800fa46:	d1d9      	bne.n	800f9fc <_strtod_l+0x73c>
 800fa48:	e65d      	b.n	800f706 <_strtod_l+0x446>
 800fa4a:	2e00      	cmp	r6, #0
 800fa4c:	dd07      	ble.n	800fa5e <_strtod_l+0x79e>
 800fa4e:	4649      	mov	r1, r9
 800fa50:	9805      	ldr	r0, [sp, #20]
 800fa52:	4632      	mov	r2, r6
 800fa54:	f7ff f9ba 	bl	800edcc <__lshift>
 800fa58:	4681      	mov	r9, r0
 800fa5a:	2800      	cmp	r0, #0
 800fa5c:	d0d8      	beq.n	800fa10 <_strtod_l+0x750>
 800fa5e:	2f00      	cmp	r7, #0
 800fa60:	dd08      	ble.n	800fa74 <_strtod_l+0x7b4>
 800fa62:	4641      	mov	r1, r8
 800fa64:	9805      	ldr	r0, [sp, #20]
 800fa66:	463a      	mov	r2, r7
 800fa68:	f7ff f9b0 	bl	800edcc <__lshift>
 800fa6c:	4680      	mov	r8, r0
 800fa6e:	2800      	cmp	r0, #0
 800fa70:	f43f ae49 	beq.w	800f706 <_strtod_l+0x446>
 800fa74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fa76:	9805      	ldr	r0, [sp, #20]
 800fa78:	464a      	mov	r2, r9
 800fa7a:	f7ff fa2f 	bl	800eedc <__mdiff>
 800fa7e:	4604      	mov	r4, r0
 800fa80:	2800      	cmp	r0, #0
 800fa82:	f43f ae40 	beq.w	800f706 <_strtod_l+0x446>
 800fa86:	68c3      	ldr	r3, [r0, #12]
 800fa88:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	60c3      	str	r3, [r0, #12]
 800fa8e:	4641      	mov	r1, r8
 800fa90:	f7ff fa08 	bl	800eea4 <__mcmp>
 800fa94:	2800      	cmp	r0, #0
 800fa96:	da45      	bge.n	800fb24 <_strtod_l+0x864>
 800fa98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fa9a:	ea53 030a 	orrs.w	r3, r3, sl
 800fa9e:	d16b      	bne.n	800fb78 <_strtod_l+0x8b8>
 800faa0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d167      	bne.n	800fb78 <_strtod_l+0x8b8>
 800faa8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800faac:	0d1b      	lsrs	r3, r3, #20
 800faae:	051b      	lsls	r3, r3, #20
 800fab0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800fab4:	d960      	bls.n	800fb78 <_strtod_l+0x8b8>
 800fab6:	6963      	ldr	r3, [r4, #20]
 800fab8:	b913      	cbnz	r3, 800fac0 <_strtod_l+0x800>
 800faba:	6923      	ldr	r3, [r4, #16]
 800fabc:	2b01      	cmp	r3, #1
 800fabe:	dd5b      	ble.n	800fb78 <_strtod_l+0x8b8>
 800fac0:	4621      	mov	r1, r4
 800fac2:	2201      	movs	r2, #1
 800fac4:	9805      	ldr	r0, [sp, #20]
 800fac6:	f7ff f981 	bl	800edcc <__lshift>
 800faca:	4641      	mov	r1, r8
 800facc:	4604      	mov	r4, r0
 800face:	f7ff f9e9 	bl	800eea4 <__mcmp>
 800fad2:	2800      	cmp	r0, #0
 800fad4:	dd50      	ble.n	800fb78 <_strtod_l+0x8b8>
 800fad6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fada:	9a08      	ldr	r2, [sp, #32]
 800fadc:	0d1b      	lsrs	r3, r3, #20
 800fade:	051b      	lsls	r3, r3, #20
 800fae0:	2a00      	cmp	r2, #0
 800fae2:	d06a      	beq.n	800fbba <_strtod_l+0x8fa>
 800fae4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800fae8:	d867      	bhi.n	800fbba <_strtod_l+0x8fa>
 800faea:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800faee:	f67f ae9d 	bls.w	800f82c <_strtod_l+0x56c>
 800faf2:	4b0a      	ldr	r3, [pc, #40]	@ (800fb1c <_strtod_l+0x85c>)
 800faf4:	4650      	mov	r0, sl
 800faf6:	4659      	mov	r1, fp
 800faf8:	2200      	movs	r2, #0
 800fafa:	f7f0 fd85 	bl	8000608 <__aeabi_dmul>
 800fafe:	4b08      	ldr	r3, [pc, #32]	@ (800fb20 <_strtod_l+0x860>)
 800fb00:	400b      	ands	r3, r1
 800fb02:	4682      	mov	sl, r0
 800fb04:	468b      	mov	fp, r1
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	f47f ae08 	bne.w	800f71c <_strtod_l+0x45c>
 800fb0c:	9a05      	ldr	r2, [sp, #20]
 800fb0e:	2322      	movs	r3, #34	@ 0x22
 800fb10:	6013      	str	r3, [r2, #0]
 800fb12:	e603      	b.n	800f71c <_strtod_l+0x45c>
 800fb14:	08011488 	.word	0x08011488
 800fb18:	fffffc02 	.word	0xfffffc02
 800fb1c:	39500000 	.word	0x39500000
 800fb20:	7ff00000 	.word	0x7ff00000
 800fb24:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800fb28:	d165      	bne.n	800fbf6 <_strtod_l+0x936>
 800fb2a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fb2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fb30:	b35a      	cbz	r2, 800fb8a <_strtod_l+0x8ca>
 800fb32:	4a9f      	ldr	r2, [pc, #636]	@ (800fdb0 <_strtod_l+0xaf0>)
 800fb34:	4293      	cmp	r3, r2
 800fb36:	d12b      	bne.n	800fb90 <_strtod_l+0x8d0>
 800fb38:	9b08      	ldr	r3, [sp, #32]
 800fb3a:	4651      	mov	r1, sl
 800fb3c:	b303      	cbz	r3, 800fb80 <_strtod_l+0x8c0>
 800fb3e:	4b9d      	ldr	r3, [pc, #628]	@ (800fdb4 <_strtod_l+0xaf4>)
 800fb40:	465a      	mov	r2, fp
 800fb42:	4013      	ands	r3, r2
 800fb44:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800fb48:	f04f 32ff 	mov.w	r2, #4294967295
 800fb4c:	d81b      	bhi.n	800fb86 <_strtod_l+0x8c6>
 800fb4e:	0d1b      	lsrs	r3, r3, #20
 800fb50:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800fb54:	fa02 f303 	lsl.w	r3, r2, r3
 800fb58:	4299      	cmp	r1, r3
 800fb5a:	d119      	bne.n	800fb90 <_strtod_l+0x8d0>
 800fb5c:	4b96      	ldr	r3, [pc, #600]	@ (800fdb8 <_strtod_l+0xaf8>)
 800fb5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fb60:	429a      	cmp	r2, r3
 800fb62:	d102      	bne.n	800fb6a <_strtod_l+0x8aa>
 800fb64:	3101      	adds	r1, #1
 800fb66:	f43f adce 	beq.w	800f706 <_strtod_l+0x446>
 800fb6a:	4b92      	ldr	r3, [pc, #584]	@ (800fdb4 <_strtod_l+0xaf4>)
 800fb6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fb6e:	401a      	ands	r2, r3
 800fb70:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800fb74:	f04f 0a00 	mov.w	sl, #0
 800fb78:	9b08      	ldr	r3, [sp, #32]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d1b9      	bne.n	800faf2 <_strtod_l+0x832>
 800fb7e:	e5cd      	b.n	800f71c <_strtod_l+0x45c>
 800fb80:	f04f 33ff 	mov.w	r3, #4294967295
 800fb84:	e7e8      	b.n	800fb58 <_strtod_l+0x898>
 800fb86:	4613      	mov	r3, r2
 800fb88:	e7e6      	b.n	800fb58 <_strtod_l+0x898>
 800fb8a:	ea53 030a 	orrs.w	r3, r3, sl
 800fb8e:	d0a2      	beq.n	800fad6 <_strtod_l+0x816>
 800fb90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fb92:	b1db      	cbz	r3, 800fbcc <_strtod_l+0x90c>
 800fb94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fb96:	4213      	tst	r3, r2
 800fb98:	d0ee      	beq.n	800fb78 <_strtod_l+0x8b8>
 800fb9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb9c:	9a08      	ldr	r2, [sp, #32]
 800fb9e:	4650      	mov	r0, sl
 800fba0:	4659      	mov	r1, fp
 800fba2:	b1bb      	cbz	r3, 800fbd4 <_strtod_l+0x914>
 800fba4:	f7ff fb6c 	bl	800f280 <sulp>
 800fba8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fbac:	ec53 2b10 	vmov	r2, r3, d0
 800fbb0:	f7f0 fb74 	bl	800029c <__adddf3>
 800fbb4:	4682      	mov	sl, r0
 800fbb6:	468b      	mov	fp, r1
 800fbb8:	e7de      	b.n	800fb78 <_strtod_l+0x8b8>
 800fbba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800fbbe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800fbc2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800fbc6:	f04f 3aff 	mov.w	sl, #4294967295
 800fbca:	e7d5      	b.n	800fb78 <_strtod_l+0x8b8>
 800fbcc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fbce:	ea13 0f0a 	tst.w	r3, sl
 800fbd2:	e7e1      	b.n	800fb98 <_strtod_l+0x8d8>
 800fbd4:	f7ff fb54 	bl	800f280 <sulp>
 800fbd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fbdc:	ec53 2b10 	vmov	r2, r3, d0
 800fbe0:	f7f0 fb5a 	bl	8000298 <__aeabi_dsub>
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	4682      	mov	sl, r0
 800fbea:	468b      	mov	fp, r1
 800fbec:	f7f0 ff74 	bl	8000ad8 <__aeabi_dcmpeq>
 800fbf0:	2800      	cmp	r0, #0
 800fbf2:	d0c1      	beq.n	800fb78 <_strtod_l+0x8b8>
 800fbf4:	e61a      	b.n	800f82c <_strtod_l+0x56c>
 800fbf6:	4641      	mov	r1, r8
 800fbf8:	4620      	mov	r0, r4
 800fbfa:	f7ff facb 	bl	800f194 <__ratio>
 800fbfe:	ec57 6b10 	vmov	r6, r7, d0
 800fc02:	2200      	movs	r2, #0
 800fc04:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fc08:	4630      	mov	r0, r6
 800fc0a:	4639      	mov	r1, r7
 800fc0c:	f7f0 ff78 	bl	8000b00 <__aeabi_dcmple>
 800fc10:	2800      	cmp	r0, #0
 800fc12:	d06f      	beq.n	800fcf4 <_strtod_l+0xa34>
 800fc14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d17a      	bne.n	800fd10 <_strtod_l+0xa50>
 800fc1a:	f1ba 0f00 	cmp.w	sl, #0
 800fc1e:	d158      	bne.n	800fcd2 <_strtod_l+0xa12>
 800fc20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d15a      	bne.n	800fce0 <_strtod_l+0xa20>
 800fc2a:	4b64      	ldr	r3, [pc, #400]	@ (800fdbc <_strtod_l+0xafc>)
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	4630      	mov	r0, r6
 800fc30:	4639      	mov	r1, r7
 800fc32:	f7f0 ff5b 	bl	8000aec <__aeabi_dcmplt>
 800fc36:	2800      	cmp	r0, #0
 800fc38:	d159      	bne.n	800fcee <_strtod_l+0xa2e>
 800fc3a:	4630      	mov	r0, r6
 800fc3c:	4639      	mov	r1, r7
 800fc3e:	4b60      	ldr	r3, [pc, #384]	@ (800fdc0 <_strtod_l+0xb00>)
 800fc40:	2200      	movs	r2, #0
 800fc42:	f7f0 fce1 	bl	8000608 <__aeabi_dmul>
 800fc46:	4606      	mov	r6, r0
 800fc48:	460f      	mov	r7, r1
 800fc4a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800fc4e:	9606      	str	r6, [sp, #24]
 800fc50:	9307      	str	r3, [sp, #28]
 800fc52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fc56:	4d57      	ldr	r5, [pc, #348]	@ (800fdb4 <_strtod_l+0xaf4>)
 800fc58:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800fc5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc5e:	401d      	ands	r5, r3
 800fc60:	4b58      	ldr	r3, [pc, #352]	@ (800fdc4 <_strtod_l+0xb04>)
 800fc62:	429d      	cmp	r5, r3
 800fc64:	f040 80b2 	bne.w	800fdcc <_strtod_l+0xb0c>
 800fc68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc6a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800fc6e:	ec4b ab10 	vmov	d0, sl, fp
 800fc72:	f7ff f9c7 	bl	800f004 <__ulp>
 800fc76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fc7a:	ec51 0b10 	vmov	r0, r1, d0
 800fc7e:	f7f0 fcc3 	bl	8000608 <__aeabi_dmul>
 800fc82:	4652      	mov	r2, sl
 800fc84:	465b      	mov	r3, fp
 800fc86:	f7f0 fb09 	bl	800029c <__adddf3>
 800fc8a:	460b      	mov	r3, r1
 800fc8c:	4949      	ldr	r1, [pc, #292]	@ (800fdb4 <_strtod_l+0xaf4>)
 800fc8e:	4a4e      	ldr	r2, [pc, #312]	@ (800fdc8 <_strtod_l+0xb08>)
 800fc90:	4019      	ands	r1, r3
 800fc92:	4291      	cmp	r1, r2
 800fc94:	4682      	mov	sl, r0
 800fc96:	d942      	bls.n	800fd1e <_strtod_l+0xa5e>
 800fc98:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fc9a:	4b47      	ldr	r3, [pc, #284]	@ (800fdb8 <_strtod_l+0xaf8>)
 800fc9c:	429a      	cmp	r2, r3
 800fc9e:	d103      	bne.n	800fca8 <_strtod_l+0x9e8>
 800fca0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fca2:	3301      	adds	r3, #1
 800fca4:	f43f ad2f 	beq.w	800f706 <_strtod_l+0x446>
 800fca8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800fdb8 <_strtod_l+0xaf8>
 800fcac:	f04f 3aff 	mov.w	sl, #4294967295
 800fcb0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fcb2:	9805      	ldr	r0, [sp, #20]
 800fcb4:	f7fe fe7a 	bl	800e9ac <_Bfree>
 800fcb8:	9805      	ldr	r0, [sp, #20]
 800fcba:	4649      	mov	r1, r9
 800fcbc:	f7fe fe76 	bl	800e9ac <_Bfree>
 800fcc0:	9805      	ldr	r0, [sp, #20]
 800fcc2:	4641      	mov	r1, r8
 800fcc4:	f7fe fe72 	bl	800e9ac <_Bfree>
 800fcc8:	9805      	ldr	r0, [sp, #20]
 800fcca:	4621      	mov	r1, r4
 800fccc:	f7fe fe6e 	bl	800e9ac <_Bfree>
 800fcd0:	e619      	b.n	800f906 <_strtod_l+0x646>
 800fcd2:	f1ba 0f01 	cmp.w	sl, #1
 800fcd6:	d103      	bne.n	800fce0 <_strtod_l+0xa20>
 800fcd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	f43f ada6 	beq.w	800f82c <_strtod_l+0x56c>
 800fce0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800fd90 <_strtod_l+0xad0>
 800fce4:	4f35      	ldr	r7, [pc, #212]	@ (800fdbc <_strtod_l+0xafc>)
 800fce6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fcea:	2600      	movs	r6, #0
 800fcec:	e7b1      	b.n	800fc52 <_strtod_l+0x992>
 800fcee:	4f34      	ldr	r7, [pc, #208]	@ (800fdc0 <_strtod_l+0xb00>)
 800fcf0:	2600      	movs	r6, #0
 800fcf2:	e7aa      	b.n	800fc4a <_strtod_l+0x98a>
 800fcf4:	4b32      	ldr	r3, [pc, #200]	@ (800fdc0 <_strtod_l+0xb00>)
 800fcf6:	4630      	mov	r0, r6
 800fcf8:	4639      	mov	r1, r7
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	f7f0 fc84 	bl	8000608 <__aeabi_dmul>
 800fd00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd02:	4606      	mov	r6, r0
 800fd04:	460f      	mov	r7, r1
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d09f      	beq.n	800fc4a <_strtod_l+0x98a>
 800fd0a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800fd0e:	e7a0      	b.n	800fc52 <_strtod_l+0x992>
 800fd10:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800fd98 <_strtod_l+0xad8>
 800fd14:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fd18:	ec57 6b17 	vmov	r6, r7, d7
 800fd1c:	e799      	b.n	800fc52 <_strtod_l+0x992>
 800fd1e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800fd22:	9b08      	ldr	r3, [sp, #32]
 800fd24:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d1c1      	bne.n	800fcb0 <_strtod_l+0x9f0>
 800fd2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fd30:	0d1b      	lsrs	r3, r3, #20
 800fd32:	051b      	lsls	r3, r3, #20
 800fd34:	429d      	cmp	r5, r3
 800fd36:	d1bb      	bne.n	800fcb0 <_strtod_l+0x9f0>
 800fd38:	4630      	mov	r0, r6
 800fd3a:	4639      	mov	r1, r7
 800fd3c:	f7f0 ffc4 	bl	8000cc8 <__aeabi_d2lz>
 800fd40:	f7f0 fc34 	bl	80005ac <__aeabi_l2d>
 800fd44:	4602      	mov	r2, r0
 800fd46:	460b      	mov	r3, r1
 800fd48:	4630      	mov	r0, r6
 800fd4a:	4639      	mov	r1, r7
 800fd4c:	f7f0 faa4 	bl	8000298 <__aeabi_dsub>
 800fd50:	460b      	mov	r3, r1
 800fd52:	4602      	mov	r2, r0
 800fd54:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800fd58:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800fd5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd5e:	ea46 060a 	orr.w	r6, r6, sl
 800fd62:	431e      	orrs	r6, r3
 800fd64:	d06f      	beq.n	800fe46 <_strtod_l+0xb86>
 800fd66:	a30e      	add	r3, pc, #56	@ (adr r3, 800fda0 <_strtod_l+0xae0>)
 800fd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd6c:	f7f0 febe 	bl	8000aec <__aeabi_dcmplt>
 800fd70:	2800      	cmp	r0, #0
 800fd72:	f47f acd3 	bne.w	800f71c <_strtod_l+0x45c>
 800fd76:	a30c      	add	r3, pc, #48	@ (adr r3, 800fda8 <_strtod_l+0xae8>)
 800fd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fd80:	f7f0 fed2 	bl	8000b28 <__aeabi_dcmpgt>
 800fd84:	2800      	cmp	r0, #0
 800fd86:	d093      	beq.n	800fcb0 <_strtod_l+0x9f0>
 800fd88:	e4c8      	b.n	800f71c <_strtod_l+0x45c>
 800fd8a:	bf00      	nop
 800fd8c:	f3af 8000 	nop.w
 800fd90:	00000000 	.word	0x00000000
 800fd94:	bff00000 	.word	0xbff00000
 800fd98:	00000000 	.word	0x00000000
 800fd9c:	3ff00000 	.word	0x3ff00000
 800fda0:	94a03595 	.word	0x94a03595
 800fda4:	3fdfffff 	.word	0x3fdfffff
 800fda8:	35afe535 	.word	0x35afe535
 800fdac:	3fe00000 	.word	0x3fe00000
 800fdb0:	000fffff 	.word	0x000fffff
 800fdb4:	7ff00000 	.word	0x7ff00000
 800fdb8:	7fefffff 	.word	0x7fefffff
 800fdbc:	3ff00000 	.word	0x3ff00000
 800fdc0:	3fe00000 	.word	0x3fe00000
 800fdc4:	7fe00000 	.word	0x7fe00000
 800fdc8:	7c9fffff 	.word	0x7c9fffff
 800fdcc:	9b08      	ldr	r3, [sp, #32]
 800fdce:	b323      	cbz	r3, 800fe1a <_strtod_l+0xb5a>
 800fdd0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800fdd4:	d821      	bhi.n	800fe1a <_strtod_l+0xb5a>
 800fdd6:	a328      	add	r3, pc, #160	@ (adr r3, 800fe78 <_strtod_l+0xbb8>)
 800fdd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fddc:	4630      	mov	r0, r6
 800fdde:	4639      	mov	r1, r7
 800fde0:	f7f0 fe8e 	bl	8000b00 <__aeabi_dcmple>
 800fde4:	b1a0      	cbz	r0, 800fe10 <_strtod_l+0xb50>
 800fde6:	4639      	mov	r1, r7
 800fde8:	4630      	mov	r0, r6
 800fdea:	f7f0 fee5 	bl	8000bb8 <__aeabi_d2uiz>
 800fdee:	2801      	cmp	r0, #1
 800fdf0:	bf38      	it	cc
 800fdf2:	2001      	movcc	r0, #1
 800fdf4:	f7f0 fb8e 	bl	8000514 <__aeabi_ui2d>
 800fdf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fdfa:	4606      	mov	r6, r0
 800fdfc:	460f      	mov	r7, r1
 800fdfe:	b9fb      	cbnz	r3, 800fe40 <_strtod_l+0xb80>
 800fe00:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fe04:	9014      	str	r0, [sp, #80]	@ 0x50
 800fe06:	9315      	str	r3, [sp, #84]	@ 0x54
 800fe08:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800fe0c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800fe10:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fe12:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800fe16:	1b5b      	subs	r3, r3, r5
 800fe18:	9311      	str	r3, [sp, #68]	@ 0x44
 800fe1a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800fe1e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800fe22:	f7ff f8ef 	bl	800f004 <__ulp>
 800fe26:	4650      	mov	r0, sl
 800fe28:	ec53 2b10 	vmov	r2, r3, d0
 800fe2c:	4659      	mov	r1, fp
 800fe2e:	f7f0 fbeb 	bl	8000608 <__aeabi_dmul>
 800fe32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800fe36:	f7f0 fa31 	bl	800029c <__adddf3>
 800fe3a:	4682      	mov	sl, r0
 800fe3c:	468b      	mov	fp, r1
 800fe3e:	e770      	b.n	800fd22 <_strtod_l+0xa62>
 800fe40:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800fe44:	e7e0      	b.n	800fe08 <_strtod_l+0xb48>
 800fe46:	a30e      	add	r3, pc, #56	@ (adr r3, 800fe80 <_strtod_l+0xbc0>)
 800fe48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe4c:	f7f0 fe4e 	bl	8000aec <__aeabi_dcmplt>
 800fe50:	e798      	b.n	800fd84 <_strtod_l+0xac4>
 800fe52:	2300      	movs	r3, #0
 800fe54:	930e      	str	r3, [sp, #56]	@ 0x38
 800fe56:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800fe58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fe5a:	6013      	str	r3, [r2, #0]
 800fe5c:	f7ff ba6d 	b.w	800f33a <_strtod_l+0x7a>
 800fe60:	2a65      	cmp	r2, #101	@ 0x65
 800fe62:	f43f ab68 	beq.w	800f536 <_strtod_l+0x276>
 800fe66:	2a45      	cmp	r2, #69	@ 0x45
 800fe68:	f43f ab65 	beq.w	800f536 <_strtod_l+0x276>
 800fe6c:	2301      	movs	r3, #1
 800fe6e:	f7ff bba0 	b.w	800f5b2 <_strtod_l+0x2f2>
 800fe72:	bf00      	nop
 800fe74:	f3af 8000 	nop.w
 800fe78:	ffc00000 	.word	0xffc00000
 800fe7c:	41dfffff 	.word	0x41dfffff
 800fe80:	94a03595 	.word	0x94a03595
 800fe84:	3fcfffff 	.word	0x3fcfffff

0800fe88 <_strtod_r>:
 800fe88:	4b01      	ldr	r3, [pc, #4]	@ (800fe90 <_strtod_r+0x8>)
 800fe8a:	f7ff ba19 	b.w	800f2c0 <_strtod_l>
 800fe8e:	bf00      	nop
 800fe90:	20000160 	.word	0x20000160

0800fe94 <_strtol_l.isra.0>:
 800fe94:	2b24      	cmp	r3, #36	@ 0x24
 800fe96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe9a:	4686      	mov	lr, r0
 800fe9c:	4690      	mov	r8, r2
 800fe9e:	d801      	bhi.n	800fea4 <_strtol_l.isra.0+0x10>
 800fea0:	2b01      	cmp	r3, #1
 800fea2:	d106      	bne.n	800feb2 <_strtol_l.isra.0+0x1e>
 800fea4:	f7fd fe6c 	bl	800db80 <__errno>
 800fea8:	2316      	movs	r3, #22
 800feaa:	6003      	str	r3, [r0, #0]
 800feac:	2000      	movs	r0, #0
 800feae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800feb2:	4834      	ldr	r0, [pc, #208]	@ (800ff84 <_strtol_l.isra.0+0xf0>)
 800feb4:	460d      	mov	r5, r1
 800feb6:	462a      	mov	r2, r5
 800feb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800febc:	5d06      	ldrb	r6, [r0, r4]
 800febe:	f016 0608 	ands.w	r6, r6, #8
 800fec2:	d1f8      	bne.n	800feb6 <_strtol_l.isra.0+0x22>
 800fec4:	2c2d      	cmp	r4, #45	@ 0x2d
 800fec6:	d110      	bne.n	800feea <_strtol_l.isra.0+0x56>
 800fec8:	782c      	ldrb	r4, [r5, #0]
 800feca:	2601      	movs	r6, #1
 800fecc:	1c95      	adds	r5, r2, #2
 800fece:	f033 0210 	bics.w	r2, r3, #16
 800fed2:	d115      	bne.n	800ff00 <_strtol_l.isra.0+0x6c>
 800fed4:	2c30      	cmp	r4, #48	@ 0x30
 800fed6:	d10d      	bne.n	800fef4 <_strtol_l.isra.0+0x60>
 800fed8:	782a      	ldrb	r2, [r5, #0]
 800feda:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800fede:	2a58      	cmp	r2, #88	@ 0x58
 800fee0:	d108      	bne.n	800fef4 <_strtol_l.isra.0+0x60>
 800fee2:	786c      	ldrb	r4, [r5, #1]
 800fee4:	3502      	adds	r5, #2
 800fee6:	2310      	movs	r3, #16
 800fee8:	e00a      	b.n	800ff00 <_strtol_l.isra.0+0x6c>
 800feea:	2c2b      	cmp	r4, #43	@ 0x2b
 800feec:	bf04      	itt	eq
 800feee:	782c      	ldrbeq	r4, [r5, #0]
 800fef0:	1c95      	addeq	r5, r2, #2
 800fef2:	e7ec      	b.n	800fece <_strtol_l.isra.0+0x3a>
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d1f6      	bne.n	800fee6 <_strtol_l.isra.0+0x52>
 800fef8:	2c30      	cmp	r4, #48	@ 0x30
 800fefa:	bf14      	ite	ne
 800fefc:	230a      	movne	r3, #10
 800fefe:	2308      	moveq	r3, #8
 800ff00:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ff04:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ff08:	2200      	movs	r2, #0
 800ff0a:	fbbc f9f3 	udiv	r9, ip, r3
 800ff0e:	4610      	mov	r0, r2
 800ff10:	fb03 ca19 	mls	sl, r3, r9, ip
 800ff14:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ff18:	2f09      	cmp	r7, #9
 800ff1a:	d80f      	bhi.n	800ff3c <_strtol_l.isra.0+0xa8>
 800ff1c:	463c      	mov	r4, r7
 800ff1e:	42a3      	cmp	r3, r4
 800ff20:	dd1b      	ble.n	800ff5a <_strtol_l.isra.0+0xc6>
 800ff22:	1c57      	adds	r7, r2, #1
 800ff24:	d007      	beq.n	800ff36 <_strtol_l.isra.0+0xa2>
 800ff26:	4581      	cmp	r9, r0
 800ff28:	d314      	bcc.n	800ff54 <_strtol_l.isra.0+0xc0>
 800ff2a:	d101      	bne.n	800ff30 <_strtol_l.isra.0+0x9c>
 800ff2c:	45a2      	cmp	sl, r4
 800ff2e:	db11      	blt.n	800ff54 <_strtol_l.isra.0+0xc0>
 800ff30:	fb00 4003 	mla	r0, r0, r3, r4
 800ff34:	2201      	movs	r2, #1
 800ff36:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ff3a:	e7eb      	b.n	800ff14 <_strtol_l.isra.0+0x80>
 800ff3c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ff40:	2f19      	cmp	r7, #25
 800ff42:	d801      	bhi.n	800ff48 <_strtol_l.isra.0+0xb4>
 800ff44:	3c37      	subs	r4, #55	@ 0x37
 800ff46:	e7ea      	b.n	800ff1e <_strtol_l.isra.0+0x8a>
 800ff48:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ff4c:	2f19      	cmp	r7, #25
 800ff4e:	d804      	bhi.n	800ff5a <_strtol_l.isra.0+0xc6>
 800ff50:	3c57      	subs	r4, #87	@ 0x57
 800ff52:	e7e4      	b.n	800ff1e <_strtol_l.isra.0+0x8a>
 800ff54:	f04f 32ff 	mov.w	r2, #4294967295
 800ff58:	e7ed      	b.n	800ff36 <_strtol_l.isra.0+0xa2>
 800ff5a:	1c53      	adds	r3, r2, #1
 800ff5c:	d108      	bne.n	800ff70 <_strtol_l.isra.0+0xdc>
 800ff5e:	2322      	movs	r3, #34	@ 0x22
 800ff60:	f8ce 3000 	str.w	r3, [lr]
 800ff64:	4660      	mov	r0, ip
 800ff66:	f1b8 0f00 	cmp.w	r8, #0
 800ff6a:	d0a0      	beq.n	800feae <_strtol_l.isra.0+0x1a>
 800ff6c:	1e69      	subs	r1, r5, #1
 800ff6e:	e006      	b.n	800ff7e <_strtol_l.isra.0+0xea>
 800ff70:	b106      	cbz	r6, 800ff74 <_strtol_l.isra.0+0xe0>
 800ff72:	4240      	negs	r0, r0
 800ff74:	f1b8 0f00 	cmp.w	r8, #0
 800ff78:	d099      	beq.n	800feae <_strtol_l.isra.0+0x1a>
 800ff7a:	2a00      	cmp	r2, #0
 800ff7c:	d1f6      	bne.n	800ff6c <_strtol_l.isra.0+0xd8>
 800ff7e:	f8c8 1000 	str.w	r1, [r8]
 800ff82:	e794      	b.n	800feae <_strtol_l.isra.0+0x1a>
 800ff84:	080114b1 	.word	0x080114b1

0800ff88 <_strtol_r>:
 800ff88:	f7ff bf84 	b.w	800fe94 <_strtol_l.isra.0>

0800ff8c <__ssputs_r>:
 800ff8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff90:	688e      	ldr	r6, [r1, #8]
 800ff92:	461f      	mov	r7, r3
 800ff94:	42be      	cmp	r6, r7
 800ff96:	680b      	ldr	r3, [r1, #0]
 800ff98:	4682      	mov	sl, r0
 800ff9a:	460c      	mov	r4, r1
 800ff9c:	4690      	mov	r8, r2
 800ff9e:	d82d      	bhi.n	800fffc <__ssputs_r+0x70>
 800ffa0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ffa4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ffa8:	d026      	beq.n	800fff8 <__ssputs_r+0x6c>
 800ffaa:	6965      	ldr	r5, [r4, #20]
 800ffac:	6909      	ldr	r1, [r1, #16]
 800ffae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ffb2:	eba3 0901 	sub.w	r9, r3, r1
 800ffb6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ffba:	1c7b      	adds	r3, r7, #1
 800ffbc:	444b      	add	r3, r9
 800ffbe:	106d      	asrs	r5, r5, #1
 800ffc0:	429d      	cmp	r5, r3
 800ffc2:	bf38      	it	cc
 800ffc4:	461d      	movcc	r5, r3
 800ffc6:	0553      	lsls	r3, r2, #21
 800ffc8:	d527      	bpl.n	801001a <__ssputs_r+0x8e>
 800ffca:	4629      	mov	r1, r5
 800ffcc:	f7fc fd5e 	bl	800ca8c <_malloc_r>
 800ffd0:	4606      	mov	r6, r0
 800ffd2:	b360      	cbz	r0, 801002e <__ssputs_r+0xa2>
 800ffd4:	6921      	ldr	r1, [r4, #16]
 800ffd6:	464a      	mov	r2, r9
 800ffd8:	f000 fa08 	bl	80103ec <memcpy>
 800ffdc:	89a3      	ldrh	r3, [r4, #12]
 800ffde:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ffe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ffe6:	81a3      	strh	r3, [r4, #12]
 800ffe8:	6126      	str	r6, [r4, #16]
 800ffea:	6165      	str	r5, [r4, #20]
 800ffec:	444e      	add	r6, r9
 800ffee:	eba5 0509 	sub.w	r5, r5, r9
 800fff2:	6026      	str	r6, [r4, #0]
 800fff4:	60a5      	str	r5, [r4, #8]
 800fff6:	463e      	mov	r6, r7
 800fff8:	42be      	cmp	r6, r7
 800fffa:	d900      	bls.n	800fffe <__ssputs_r+0x72>
 800fffc:	463e      	mov	r6, r7
 800fffe:	6820      	ldr	r0, [r4, #0]
 8010000:	4632      	mov	r2, r6
 8010002:	4641      	mov	r1, r8
 8010004:	f000 f9c6 	bl	8010394 <memmove>
 8010008:	68a3      	ldr	r3, [r4, #8]
 801000a:	1b9b      	subs	r3, r3, r6
 801000c:	60a3      	str	r3, [r4, #8]
 801000e:	6823      	ldr	r3, [r4, #0]
 8010010:	4433      	add	r3, r6
 8010012:	6023      	str	r3, [r4, #0]
 8010014:	2000      	movs	r0, #0
 8010016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801001a:	462a      	mov	r2, r5
 801001c:	f000 fd79 	bl	8010b12 <_realloc_r>
 8010020:	4606      	mov	r6, r0
 8010022:	2800      	cmp	r0, #0
 8010024:	d1e0      	bne.n	800ffe8 <__ssputs_r+0x5c>
 8010026:	6921      	ldr	r1, [r4, #16]
 8010028:	4650      	mov	r0, sl
 801002a:	f7fe fc35 	bl	800e898 <_free_r>
 801002e:	230c      	movs	r3, #12
 8010030:	f8ca 3000 	str.w	r3, [sl]
 8010034:	89a3      	ldrh	r3, [r4, #12]
 8010036:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801003a:	81a3      	strh	r3, [r4, #12]
 801003c:	f04f 30ff 	mov.w	r0, #4294967295
 8010040:	e7e9      	b.n	8010016 <__ssputs_r+0x8a>
	...

08010044 <_svfiprintf_r>:
 8010044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010048:	4698      	mov	r8, r3
 801004a:	898b      	ldrh	r3, [r1, #12]
 801004c:	061b      	lsls	r3, r3, #24
 801004e:	b09d      	sub	sp, #116	@ 0x74
 8010050:	4607      	mov	r7, r0
 8010052:	460d      	mov	r5, r1
 8010054:	4614      	mov	r4, r2
 8010056:	d510      	bpl.n	801007a <_svfiprintf_r+0x36>
 8010058:	690b      	ldr	r3, [r1, #16]
 801005a:	b973      	cbnz	r3, 801007a <_svfiprintf_r+0x36>
 801005c:	2140      	movs	r1, #64	@ 0x40
 801005e:	f7fc fd15 	bl	800ca8c <_malloc_r>
 8010062:	6028      	str	r0, [r5, #0]
 8010064:	6128      	str	r0, [r5, #16]
 8010066:	b930      	cbnz	r0, 8010076 <_svfiprintf_r+0x32>
 8010068:	230c      	movs	r3, #12
 801006a:	603b      	str	r3, [r7, #0]
 801006c:	f04f 30ff 	mov.w	r0, #4294967295
 8010070:	b01d      	add	sp, #116	@ 0x74
 8010072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010076:	2340      	movs	r3, #64	@ 0x40
 8010078:	616b      	str	r3, [r5, #20]
 801007a:	2300      	movs	r3, #0
 801007c:	9309      	str	r3, [sp, #36]	@ 0x24
 801007e:	2320      	movs	r3, #32
 8010080:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010084:	f8cd 800c 	str.w	r8, [sp, #12]
 8010088:	2330      	movs	r3, #48	@ 0x30
 801008a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010228 <_svfiprintf_r+0x1e4>
 801008e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010092:	f04f 0901 	mov.w	r9, #1
 8010096:	4623      	mov	r3, r4
 8010098:	469a      	mov	sl, r3
 801009a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801009e:	b10a      	cbz	r2, 80100a4 <_svfiprintf_r+0x60>
 80100a0:	2a25      	cmp	r2, #37	@ 0x25
 80100a2:	d1f9      	bne.n	8010098 <_svfiprintf_r+0x54>
 80100a4:	ebba 0b04 	subs.w	fp, sl, r4
 80100a8:	d00b      	beq.n	80100c2 <_svfiprintf_r+0x7e>
 80100aa:	465b      	mov	r3, fp
 80100ac:	4622      	mov	r2, r4
 80100ae:	4629      	mov	r1, r5
 80100b0:	4638      	mov	r0, r7
 80100b2:	f7ff ff6b 	bl	800ff8c <__ssputs_r>
 80100b6:	3001      	adds	r0, #1
 80100b8:	f000 80a7 	beq.w	801020a <_svfiprintf_r+0x1c6>
 80100bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80100be:	445a      	add	r2, fp
 80100c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80100c2:	f89a 3000 	ldrb.w	r3, [sl]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	f000 809f 	beq.w	801020a <_svfiprintf_r+0x1c6>
 80100cc:	2300      	movs	r3, #0
 80100ce:	f04f 32ff 	mov.w	r2, #4294967295
 80100d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80100d6:	f10a 0a01 	add.w	sl, sl, #1
 80100da:	9304      	str	r3, [sp, #16]
 80100dc:	9307      	str	r3, [sp, #28]
 80100de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80100e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80100e4:	4654      	mov	r4, sl
 80100e6:	2205      	movs	r2, #5
 80100e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100ec:	484e      	ldr	r0, [pc, #312]	@ (8010228 <_svfiprintf_r+0x1e4>)
 80100ee:	f7f0 f877 	bl	80001e0 <memchr>
 80100f2:	9a04      	ldr	r2, [sp, #16]
 80100f4:	b9d8      	cbnz	r0, 801012e <_svfiprintf_r+0xea>
 80100f6:	06d0      	lsls	r0, r2, #27
 80100f8:	bf44      	itt	mi
 80100fa:	2320      	movmi	r3, #32
 80100fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010100:	0711      	lsls	r1, r2, #28
 8010102:	bf44      	itt	mi
 8010104:	232b      	movmi	r3, #43	@ 0x2b
 8010106:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801010a:	f89a 3000 	ldrb.w	r3, [sl]
 801010e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010110:	d015      	beq.n	801013e <_svfiprintf_r+0xfa>
 8010112:	9a07      	ldr	r2, [sp, #28]
 8010114:	4654      	mov	r4, sl
 8010116:	2000      	movs	r0, #0
 8010118:	f04f 0c0a 	mov.w	ip, #10
 801011c:	4621      	mov	r1, r4
 801011e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010122:	3b30      	subs	r3, #48	@ 0x30
 8010124:	2b09      	cmp	r3, #9
 8010126:	d94b      	bls.n	80101c0 <_svfiprintf_r+0x17c>
 8010128:	b1b0      	cbz	r0, 8010158 <_svfiprintf_r+0x114>
 801012a:	9207      	str	r2, [sp, #28]
 801012c:	e014      	b.n	8010158 <_svfiprintf_r+0x114>
 801012e:	eba0 0308 	sub.w	r3, r0, r8
 8010132:	fa09 f303 	lsl.w	r3, r9, r3
 8010136:	4313      	orrs	r3, r2
 8010138:	9304      	str	r3, [sp, #16]
 801013a:	46a2      	mov	sl, r4
 801013c:	e7d2      	b.n	80100e4 <_svfiprintf_r+0xa0>
 801013e:	9b03      	ldr	r3, [sp, #12]
 8010140:	1d19      	adds	r1, r3, #4
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	9103      	str	r1, [sp, #12]
 8010146:	2b00      	cmp	r3, #0
 8010148:	bfbb      	ittet	lt
 801014a:	425b      	neglt	r3, r3
 801014c:	f042 0202 	orrlt.w	r2, r2, #2
 8010150:	9307      	strge	r3, [sp, #28]
 8010152:	9307      	strlt	r3, [sp, #28]
 8010154:	bfb8      	it	lt
 8010156:	9204      	strlt	r2, [sp, #16]
 8010158:	7823      	ldrb	r3, [r4, #0]
 801015a:	2b2e      	cmp	r3, #46	@ 0x2e
 801015c:	d10a      	bne.n	8010174 <_svfiprintf_r+0x130>
 801015e:	7863      	ldrb	r3, [r4, #1]
 8010160:	2b2a      	cmp	r3, #42	@ 0x2a
 8010162:	d132      	bne.n	80101ca <_svfiprintf_r+0x186>
 8010164:	9b03      	ldr	r3, [sp, #12]
 8010166:	1d1a      	adds	r2, r3, #4
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	9203      	str	r2, [sp, #12]
 801016c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010170:	3402      	adds	r4, #2
 8010172:	9305      	str	r3, [sp, #20]
 8010174:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010238 <_svfiprintf_r+0x1f4>
 8010178:	7821      	ldrb	r1, [r4, #0]
 801017a:	2203      	movs	r2, #3
 801017c:	4650      	mov	r0, sl
 801017e:	f7f0 f82f 	bl	80001e0 <memchr>
 8010182:	b138      	cbz	r0, 8010194 <_svfiprintf_r+0x150>
 8010184:	9b04      	ldr	r3, [sp, #16]
 8010186:	eba0 000a 	sub.w	r0, r0, sl
 801018a:	2240      	movs	r2, #64	@ 0x40
 801018c:	4082      	lsls	r2, r0
 801018e:	4313      	orrs	r3, r2
 8010190:	3401      	adds	r4, #1
 8010192:	9304      	str	r3, [sp, #16]
 8010194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010198:	4824      	ldr	r0, [pc, #144]	@ (801022c <_svfiprintf_r+0x1e8>)
 801019a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801019e:	2206      	movs	r2, #6
 80101a0:	f7f0 f81e 	bl	80001e0 <memchr>
 80101a4:	2800      	cmp	r0, #0
 80101a6:	d036      	beq.n	8010216 <_svfiprintf_r+0x1d2>
 80101a8:	4b21      	ldr	r3, [pc, #132]	@ (8010230 <_svfiprintf_r+0x1ec>)
 80101aa:	bb1b      	cbnz	r3, 80101f4 <_svfiprintf_r+0x1b0>
 80101ac:	9b03      	ldr	r3, [sp, #12]
 80101ae:	3307      	adds	r3, #7
 80101b0:	f023 0307 	bic.w	r3, r3, #7
 80101b4:	3308      	adds	r3, #8
 80101b6:	9303      	str	r3, [sp, #12]
 80101b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101ba:	4433      	add	r3, r6
 80101bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80101be:	e76a      	b.n	8010096 <_svfiprintf_r+0x52>
 80101c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80101c4:	460c      	mov	r4, r1
 80101c6:	2001      	movs	r0, #1
 80101c8:	e7a8      	b.n	801011c <_svfiprintf_r+0xd8>
 80101ca:	2300      	movs	r3, #0
 80101cc:	3401      	adds	r4, #1
 80101ce:	9305      	str	r3, [sp, #20]
 80101d0:	4619      	mov	r1, r3
 80101d2:	f04f 0c0a 	mov.w	ip, #10
 80101d6:	4620      	mov	r0, r4
 80101d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101dc:	3a30      	subs	r2, #48	@ 0x30
 80101de:	2a09      	cmp	r2, #9
 80101e0:	d903      	bls.n	80101ea <_svfiprintf_r+0x1a6>
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d0c6      	beq.n	8010174 <_svfiprintf_r+0x130>
 80101e6:	9105      	str	r1, [sp, #20]
 80101e8:	e7c4      	b.n	8010174 <_svfiprintf_r+0x130>
 80101ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80101ee:	4604      	mov	r4, r0
 80101f0:	2301      	movs	r3, #1
 80101f2:	e7f0      	b.n	80101d6 <_svfiprintf_r+0x192>
 80101f4:	ab03      	add	r3, sp, #12
 80101f6:	9300      	str	r3, [sp, #0]
 80101f8:	462a      	mov	r2, r5
 80101fa:	4b0e      	ldr	r3, [pc, #56]	@ (8010234 <_svfiprintf_r+0x1f0>)
 80101fc:	a904      	add	r1, sp, #16
 80101fe:	4638      	mov	r0, r7
 8010200:	f7fc fd70 	bl	800cce4 <_printf_float>
 8010204:	1c42      	adds	r2, r0, #1
 8010206:	4606      	mov	r6, r0
 8010208:	d1d6      	bne.n	80101b8 <_svfiprintf_r+0x174>
 801020a:	89ab      	ldrh	r3, [r5, #12]
 801020c:	065b      	lsls	r3, r3, #25
 801020e:	f53f af2d 	bmi.w	801006c <_svfiprintf_r+0x28>
 8010212:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010214:	e72c      	b.n	8010070 <_svfiprintf_r+0x2c>
 8010216:	ab03      	add	r3, sp, #12
 8010218:	9300      	str	r3, [sp, #0]
 801021a:	462a      	mov	r2, r5
 801021c:	4b05      	ldr	r3, [pc, #20]	@ (8010234 <_svfiprintf_r+0x1f0>)
 801021e:	a904      	add	r1, sp, #16
 8010220:	4638      	mov	r0, r7
 8010222:	f7fc fff7 	bl	800d214 <_printf_i>
 8010226:	e7ed      	b.n	8010204 <_svfiprintf_r+0x1c0>
 8010228:	080112a9 	.word	0x080112a9
 801022c:	080112b3 	.word	0x080112b3
 8010230:	0800cce5 	.word	0x0800cce5
 8010234:	0800ff8d 	.word	0x0800ff8d
 8010238:	080112af 	.word	0x080112af

0801023c <__sflush_r>:
 801023c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010244:	0716      	lsls	r6, r2, #28
 8010246:	4605      	mov	r5, r0
 8010248:	460c      	mov	r4, r1
 801024a:	d454      	bmi.n	80102f6 <__sflush_r+0xba>
 801024c:	684b      	ldr	r3, [r1, #4]
 801024e:	2b00      	cmp	r3, #0
 8010250:	dc02      	bgt.n	8010258 <__sflush_r+0x1c>
 8010252:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010254:	2b00      	cmp	r3, #0
 8010256:	dd48      	ble.n	80102ea <__sflush_r+0xae>
 8010258:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801025a:	2e00      	cmp	r6, #0
 801025c:	d045      	beq.n	80102ea <__sflush_r+0xae>
 801025e:	2300      	movs	r3, #0
 8010260:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010264:	682f      	ldr	r7, [r5, #0]
 8010266:	6a21      	ldr	r1, [r4, #32]
 8010268:	602b      	str	r3, [r5, #0]
 801026a:	d030      	beq.n	80102ce <__sflush_r+0x92>
 801026c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801026e:	89a3      	ldrh	r3, [r4, #12]
 8010270:	0759      	lsls	r1, r3, #29
 8010272:	d505      	bpl.n	8010280 <__sflush_r+0x44>
 8010274:	6863      	ldr	r3, [r4, #4]
 8010276:	1ad2      	subs	r2, r2, r3
 8010278:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801027a:	b10b      	cbz	r3, 8010280 <__sflush_r+0x44>
 801027c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801027e:	1ad2      	subs	r2, r2, r3
 8010280:	2300      	movs	r3, #0
 8010282:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010284:	6a21      	ldr	r1, [r4, #32]
 8010286:	4628      	mov	r0, r5
 8010288:	47b0      	blx	r6
 801028a:	1c43      	adds	r3, r0, #1
 801028c:	89a3      	ldrh	r3, [r4, #12]
 801028e:	d106      	bne.n	801029e <__sflush_r+0x62>
 8010290:	6829      	ldr	r1, [r5, #0]
 8010292:	291d      	cmp	r1, #29
 8010294:	d82b      	bhi.n	80102ee <__sflush_r+0xb2>
 8010296:	4a2a      	ldr	r2, [pc, #168]	@ (8010340 <__sflush_r+0x104>)
 8010298:	40ca      	lsrs	r2, r1
 801029a:	07d6      	lsls	r6, r2, #31
 801029c:	d527      	bpl.n	80102ee <__sflush_r+0xb2>
 801029e:	2200      	movs	r2, #0
 80102a0:	6062      	str	r2, [r4, #4]
 80102a2:	04d9      	lsls	r1, r3, #19
 80102a4:	6922      	ldr	r2, [r4, #16]
 80102a6:	6022      	str	r2, [r4, #0]
 80102a8:	d504      	bpl.n	80102b4 <__sflush_r+0x78>
 80102aa:	1c42      	adds	r2, r0, #1
 80102ac:	d101      	bne.n	80102b2 <__sflush_r+0x76>
 80102ae:	682b      	ldr	r3, [r5, #0]
 80102b0:	b903      	cbnz	r3, 80102b4 <__sflush_r+0x78>
 80102b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80102b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80102b6:	602f      	str	r7, [r5, #0]
 80102b8:	b1b9      	cbz	r1, 80102ea <__sflush_r+0xae>
 80102ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80102be:	4299      	cmp	r1, r3
 80102c0:	d002      	beq.n	80102c8 <__sflush_r+0x8c>
 80102c2:	4628      	mov	r0, r5
 80102c4:	f7fe fae8 	bl	800e898 <_free_r>
 80102c8:	2300      	movs	r3, #0
 80102ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80102cc:	e00d      	b.n	80102ea <__sflush_r+0xae>
 80102ce:	2301      	movs	r3, #1
 80102d0:	4628      	mov	r0, r5
 80102d2:	47b0      	blx	r6
 80102d4:	4602      	mov	r2, r0
 80102d6:	1c50      	adds	r0, r2, #1
 80102d8:	d1c9      	bne.n	801026e <__sflush_r+0x32>
 80102da:	682b      	ldr	r3, [r5, #0]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d0c6      	beq.n	801026e <__sflush_r+0x32>
 80102e0:	2b1d      	cmp	r3, #29
 80102e2:	d001      	beq.n	80102e8 <__sflush_r+0xac>
 80102e4:	2b16      	cmp	r3, #22
 80102e6:	d11e      	bne.n	8010326 <__sflush_r+0xea>
 80102e8:	602f      	str	r7, [r5, #0]
 80102ea:	2000      	movs	r0, #0
 80102ec:	e022      	b.n	8010334 <__sflush_r+0xf8>
 80102ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80102f2:	b21b      	sxth	r3, r3
 80102f4:	e01b      	b.n	801032e <__sflush_r+0xf2>
 80102f6:	690f      	ldr	r7, [r1, #16]
 80102f8:	2f00      	cmp	r7, #0
 80102fa:	d0f6      	beq.n	80102ea <__sflush_r+0xae>
 80102fc:	0793      	lsls	r3, r2, #30
 80102fe:	680e      	ldr	r6, [r1, #0]
 8010300:	bf08      	it	eq
 8010302:	694b      	ldreq	r3, [r1, #20]
 8010304:	600f      	str	r7, [r1, #0]
 8010306:	bf18      	it	ne
 8010308:	2300      	movne	r3, #0
 801030a:	eba6 0807 	sub.w	r8, r6, r7
 801030e:	608b      	str	r3, [r1, #8]
 8010310:	f1b8 0f00 	cmp.w	r8, #0
 8010314:	dde9      	ble.n	80102ea <__sflush_r+0xae>
 8010316:	6a21      	ldr	r1, [r4, #32]
 8010318:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801031a:	4643      	mov	r3, r8
 801031c:	463a      	mov	r2, r7
 801031e:	4628      	mov	r0, r5
 8010320:	47b0      	blx	r6
 8010322:	2800      	cmp	r0, #0
 8010324:	dc08      	bgt.n	8010338 <__sflush_r+0xfc>
 8010326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801032a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801032e:	81a3      	strh	r3, [r4, #12]
 8010330:	f04f 30ff 	mov.w	r0, #4294967295
 8010334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010338:	4407      	add	r7, r0
 801033a:	eba8 0800 	sub.w	r8, r8, r0
 801033e:	e7e7      	b.n	8010310 <__sflush_r+0xd4>
 8010340:	20400001 	.word	0x20400001

08010344 <_fflush_r>:
 8010344:	b538      	push	{r3, r4, r5, lr}
 8010346:	690b      	ldr	r3, [r1, #16]
 8010348:	4605      	mov	r5, r0
 801034a:	460c      	mov	r4, r1
 801034c:	b913      	cbnz	r3, 8010354 <_fflush_r+0x10>
 801034e:	2500      	movs	r5, #0
 8010350:	4628      	mov	r0, r5
 8010352:	bd38      	pop	{r3, r4, r5, pc}
 8010354:	b118      	cbz	r0, 801035e <_fflush_r+0x1a>
 8010356:	6a03      	ldr	r3, [r0, #32]
 8010358:	b90b      	cbnz	r3, 801035e <_fflush_r+0x1a>
 801035a:	f7fd fb13 	bl	800d984 <__sinit>
 801035e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d0f3      	beq.n	801034e <_fflush_r+0xa>
 8010366:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010368:	07d0      	lsls	r0, r2, #31
 801036a:	d404      	bmi.n	8010376 <_fflush_r+0x32>
 801036c:	0599      	lsls	r1, r3, #22
 801036e:	d402      	bmi.n	8010376 <_fflush_r+0x32>
 8010370:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010372:	f7fd fc30 	bl	800dbd6 <__retarget_lock_acquire_recursive>
 8010376:	4628      	mov	r0, r5
 8010378:	4621      	mov	r1, r4
 801037a:	f7ff ff5f 	bl	801023c <__sflush_r>
 801037e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010380:	07da      	lsls	r2, r3, #31
 8010382:	4605      	mov	r5, r0
 8010384:	d4e4      	bmi.n	8010350 <_fflush_r+0xc>
 8010386:	89a3      	ldrh	r3, [r4, #12]
 8010388:	059b      	lsls	r3, r3, #22
 801038a:	d4e1      	bmi.n	8010350 <_fflush_r+0xc>
 801038c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801038e:	f7fd fc23 	bl	800dbd8 <__retarget_lock_release_recursive>
 8010392:	e7dd      	b.n	8010350 <_fflush_r+0xc>

08010394 <memmove>:
 8010394:	4288      	cmp	r0, r1
 8010396:	b510      	push	{r4, lr}
 8010398:	eb01 0402 	add.w	r4, r1, r2
 801039c:	d902      	bls.n	80103a4 <memmove+0x10>
 801039e:	4284      	cmp	r4, r0
 80103a0:	4623      	mov	r3, r4
 80103a2:	d807      	bhi.n	80103b4 <memmove+0x20>
 80103a4:	1e43      	subs	r3, r0, #1
 80103a6:	42a1      	cmp	r1, r4
 80103a8:	d008      	beq.n	80103bc <memmove+0x28>
 80103aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80103ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80103b2:	e7f8      	b.n	80103a6 <memmove+0x12>
 80103b4:	4402      	add	r2, r0
 80103b6:	4601      	mov	r1, r0
 80103b8:	428a      	cmp	r2, r1
 80103ba:	d100      	bne.n	80103be <memmove+0x2a>
 80103bc:	bd10      	pop	{r4, pc}
 80103be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80103c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80103c6:	e7f7      	b.n	80103b8 <memmove+0x24>

080103c8 <strncmp>:
 80103c8:	b510      	push	{r4, lr}
 80103ca:	b16a      	cbz	r2, 80103e8 <strncmp+0x20>
 80103cc:	3901      	subs	r1, #1
 80103ce:	1884      	adds	r4, r0, r2
 80103d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80103d4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80103d8:	429a      	cmp	r2, r3
 80103da:	d103      	bne.n	80103e4 <strncmp+0x1c>
 80103dc:	42a0      	cmp	r0, r4
 80103de:	d001      	beq.n	80103e4 <strncmp+0x1c>
 80103e0:	2a00      	cmp	r2, #0
 80103e2:	d1f5      	bne.n	80103d0 <strncmp+0x8>
 80103e4:	1ad0      	subs	r0, r2, r3
 80103e6:	bd10      	pop	{r4, pc}
 80103e8:	4610      	mov	r0, r2
 80103ea:	e7fc      	b.n	80103e6 <strncmp+0x1e>

080103ec <memcpy>:
 80103ec:	440a      	add	r2, r1
 80103ee:	4291      	cmp	r1, r2
 80103f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80103f4:	d100      	bne.n	80103f8 <memcpy+0xc>
 80103f6:	4770      	bx	lr
 80103f8:	b510      	push	{r4, lr}
 80103fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80103fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010402:	4291      	cmp	r1, r2
 8010404:	d1f9      	bne.n	80103fa <memcpy+0xe>
 8010406:	bd10      	pop	{r4, pc}

08010408 <nan>:
 8010408:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010410 <nan+0x8>
 801040c:	4770      	bx	lr
 801040e:	bf00      	nop
 8010410:	00000000 	.word	0x00000000
 8010414:	7ff80000 	.word	0x7ff80000

08010418 <__assert_func>:
 8010418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801041a:	4614      	mov	r4, r2
 801041c:	461a      	mov	r2, r3
 801041e:	4b09      	ldr	r3, [pc, #36]	@ (8010444 <__assert_func+0x2c>)
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	4605      	mov	r5, r0
 8010424:	68d8      	ldr	r0, [r3, #12]
 8010426:	b14c      	cbz	r4, 801043c <__assert_func+0x24>
 8010428:	4b07      	ldr	r3, [pc, #28]	@ (8010448 <__assert_func+0x30>)
 801042a:	9100      	str	r1, [sp, #0]
 801042c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010430:	4906      	ldr	r1, [pc, #24]	@ (801044c <__assert_func+0x34>)
 8010432:	462b      	mov	r3, r5
 8010434:	f000 fba8 	bl	8010b88 <fiprintf>
 8010438:	f000 fbb8 	bl	8010bac <abort>
 801043c:	4b04      	ldr	r3, [pc, #16]	@ (8010450 <__assert_func+0x38>)
 801043e:	461c      	mov	r4, r3
 8010440:	e7f3      	b.n	801042a <__assert_func+0x12>
 8010442:	bf00      	nop
 8010444:	20000110 	.word	0x20000110
 8010448:	080112c2 	.word	0x080112c2
 801044c:	080112cf 	.word	0x080112cf
 8010450:	080112fd 	.word	0x080112fd

08010454 <_calloc_r>:
 8010454:	b570      	push	{r4, r5, r6, lr}
 8010456:	fba1 5402 	umull	r5, r4, r1, r2
 801045a:	b934      	cbnz	r4, 801046a <_calloc_r+0x16>
 801045c:	4629      	mov	r1, r5
 801045e:	f7fc fb15 	bl	800ca8c <_malloc_r>
 8010462:	4606      	mov	r6, r0
 8010464:	b928      	cbnz	r0, 8010472 <_calloc_r+0x1e>
 8010466:	4630      	mov	r0, r6
 8010468:	bd70      	pop	{r4, r5, r6, pc}
 801046a:	220c      	movs	r2, #12
 801046c:	6002      	str	r2, [r0, #0]
 801046e:	2600      	movs	r6, #0
 8010470:	e7f9      	b.n	8010466 <_calloc_r+0x12>
 8010472:	462a      	mov	r2, r5
 8010474:	4621      	mov	r1, r4
 8010476:	f7fd fb20 	bl	800daba <memset>
 801047a:	e7f4      	b.n	8010466 <_calloc_r+0x12>

0801047c <rshift>:
 801047c:	6903      	ldr	r3, [r0, #16]
 801047e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010482:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010486:	ea4f 1261 	mov.w	r2, r1, asr #5
 801048a:	f100 0414 	add.w	r4, r0, #20
 801048e:	dd45      	ble.n	801051c <rshift+0xa0>
 8010490:	f011 011f 	ands.w	r1, r1, #31
 8010494:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010498:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801049c:	d10c      	bne.n	80104b8 <rshift+0x3c>
 801049e:	f100 0710 	add.w	r7, r0, #16
 80104a2:	4629      	mov	r1, r5
 80104a4:	42b1      	cmp	r1, r6
 80104a6:	d334      	bcc.n	8010512 <rshift+0x96>
 80104a8:	1a9b      	subs	r3, r3, r2
 80104aa:	009b      	lsls	r3, r3, #2
 80104ac:	1eea      	subs	r2, r5, #3
 80104ae:	4296      	cmp	r6, r2
 80104b0:	bf38      	it	cc
 80104b2:	2300      	movcc	r3, #0
 80104b4:	4423      	add	r3, r4
 80104b6:	e015      	b.n	80104e4 <rshift+0x68>
 80104b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80104bc:	f1c1 0820 	rsb	r8, r1, #32
 80104c0:	40cf      	lsrs	r7, r1
 80104c2:	f105 0e04 	add.w	lr, r5, #4
 80104c6:	46a1      	mov	r9, r4
 80104c8:	4576      	cmp	r6, lr
 80104ca:	46f4      	mov	ip, lr
 80104cc:	d815      	bhi.n	80104fa <rshift+0x7e>
 80104ce:	1a9a      	subs	r2, r3, r2
 80104d0:	0092      	lsls	r2, r2, #2
 80104d2:	3a04      	subs	r2, #4
 80104d4:	3501      	adds	r5, #1
 80104d6:	42ae      	cmp	r6, r5
 80104d8:	bf38      	it	cc
 80104da:	2200      	movcc	r2, #0
 80104dc:	18a3      	adds	r3, r4, r2
 80104de:	50a7      	str	r7, [r4, r2]
 80104e0:	b107      	cbz	r7, 80104e4 <rshift+0x68>
 80104e2:	3304      	adds	r3, #4
 80104e4:	1b1a      	subs	r2, r3, r4
 80104e6:	42a3      	cmp	r3, r4
 80104e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80104ec:	bf08      	it	eq
 80104ee:	2300      	moveq	r3, #0
 80104f0:	6102      	str	r2, [r0, #16]
 80104f2:	bf08      	it	eq
 80104f4:	6143      	streq	r3, [r0, #20]
 80104f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80104fa:	f8dc c000 	ldr.w	ip, [ip]
 80104fe:	fa0c fc08 	lsl.w	ip, ip, r8
 8010502:	ea4c 0707 	orr.w	r7, ip, r7
 8010506:	f849 7b04 	str.w	r7, [r9], #4
 801050a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801050e:	40cf      	lsrs	r7, r1
 8010510:	e7da      	b.n	80104c8 <rshift+0x4c>
 8010512:	f851 cb04 	ldr.w	ip, [r1], #4
 8010516:	f847 cf04 	str.w	ip, [r7, #4]!
 801051a:	e7c3      	b.n	80104a4 <rshift+0x28>
 801051c:	4623      	mov	r3, r4
 801051e:	e7e1      	b.n	80104e4 <rshift+0x68>

08010520 <__hexdig_fun>:
 8010520:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010524:	2b09      	cmp	r3, #9
 8010526:	d802      	bhi.n	801052e <__hexdig_fun+0xe>
 8010528:	3820      	subs	r0, #32
 801052a:	b2c0      	uxtb	r0, r0
 801052c:	4770      	bx	lr
 801052e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010532:	2b05      	cmp	r3, #5
 8010534:	d801      	bhi.n	801053a <__hexdig_fun+0x1a>
 8010536:	3847      	subs	r0, #71	@ 0x47
 8010538:	e7f7      	b.n	801052a <__hexdig_fun+0xa>
 801053a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801053e:	2b05      	cmp	r3, #5
 8010540:	d801      	bhi.n	8010546 <__hexdig_fun+0x26>
 8010542:	3827      	subs	r0, #39	@ 0x27
 8010544:	e7f1      	b.n	801052a <__hexdig_fun+0xa>
 8010546:	2000      	movs	r0, #0
 8010548:	4770      	bx	lr
	...

0801054c <__gethex>:
 801054c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010550:	b085      	sub	sp, #20
 8010552:	468a      	mov	sl, r1
 8010554:	9302      	str	r3, [sp, #8]
 8010556:	680b      	ldr	r3, [r1, #0]
 8010558:	9001      	str	r0, [sp, #4]
 801055a:	4690      	mov	r8, r2
 801055c:	1c9c      	adds	r4, r3, #2
 801055e:	46a1      	mov	r9, r4
 8010560:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010564:	2830      	cmp	r0, #48	@ 0x30
 8010566:	d0fa      	beq.n	801055e <__gethex+0x12>
 8010568:	eba9 0303 	sub.w	r3, r9, r3
 801056c:	f1a3 0b02 	sub.w	fp, r3, #2
 8010570:	f7ff ffd6 	bl	8010520 <__hexdig_fun>
 8010574:	4605      	mov	r5, r0
 8010576:	2800      	cmp	r0, #0
 8010578:	d168      	bne.n	801064c <__gethex+0x100>
 801057a:	49a0      	ldr	r1, [pc, #640]	@ (80107fc <__gethex+0x2b0>)
 801057c:	2201      	movs	r2, #1
 801057e:	4648      	mov	r0, r9
 8010580:	f7ff ff22 	bl	80103c8 <strncmp>
 8010584:	4607      	mov	r7, r0
 8010586:	2800      	cmp	r0, #0
 8010588:	d167      	bne.n	801065a <__gethex+0x10e>
 801058a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801058e:	4626      	mov	r6, r4
 8010590:	f7ff ffc6 	bl	8010520 <__hexdig_fun>
 8010594:	2800      	cmp	r0, #0
 8010596:	d062      	beq.n	801065e <__gethex+0x112>
 8010598:	4623      	mov	r3, r4
 801059a:	7818      	ldrb	r0, [r3, #0]
 801059c:	2830      	cmp	r0, #48	@ 0x30
 801059e:	4699      	mov	r9, r3
 80105a0:	f103 0301 	add.w	r3, r3, #1
 80105a4:	d0f9      	beq.n	801059a <__gethex+0x4e>
 80105a6:	f7ff ffbb 	bl	8010520 <__hexdig_fun>
 80105aa:	fab0 f580 	clz	r5, r0
 80105ae:	096d      	lsrs	r5, r5, #5
 80105b0:	f04f 0b01 	mov.w	fp, #1
 80105b4:	464a      	mov	r2, r9
 80105b6:	4616      	mov	r6, r2
 80105b8:	3201      	adds	r2, #1
 80105ba:	7830      	ldrb	r0, [r6, #0]
 80105bc:	f7ff ffb0 	bl	8010520 <__hexdig_fun>
 80105c0:	2800      	cmp	r0, #0
 80105c2:	d1f8      	bne.n	80105b6 <__gethex+0x6a>
 80105c4:	498d      	ldr	r1, [pc, #564]	@ (80107fc <__gethex+0x2b0>)
 80105c6:	2201      	movs	r2, #1
 80105c8:	4630      	mov	r0, r6
 80105ca:	f7ff fefd 	bl	80103c8 <strncmp>
 80105ce:	2800      	cmp	r0, #0
 80105d0:	d13f      	bne.n	8010652 <__gethex+0x106>
 80105d2:	b944      	cbnz	r4, 80105e6 <__gethex+0x9a>
 80105d4:	1c74      	adds	r4, r6, #1
 80105d6:	4622      	mov	r2, r4
 80105d8:	4616      	mov	r6, r2
 80105da:	3201      	adds	r2, #1
 80105dc:	7830      	ldrb	r0, [r6, #0]
 80105de:	f7ff ff9f 	bl	8010520 <__hexdig_fun>
 80105e2:	2800      	cmp	r0, #0
 80105e4:	d1f8      	bne.n	80105d8 <__gethex+0x8c>
 80105e6:	1ba4      	subs	r4, r4, r6
 80105e8:	00a7      	lsls	r7, r4, #2
 80105ea:	7833      	ldrb	r3, [r6, #0]
 80105ec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80105f0:	2b50      	cmp	r3, #80	@ 0x50
 80105f2:	d13e      	bne.n	8010672 <__gethex+0x126>
 80105f4:	7873      	ldrb	r3, [r6, #1]
 80105f6:	2b2b      	cmp	r3, #43	@ 0x2b
 80105f8:	d033      	beq.n	8010662 <__gethex+0x116>
 80105fa:	2b2d      	cmp	r3, #45	@ 0x2d
 80105fc:	d034      	beq.n	8010668 <__gethex+0x11c>
 80105fe:	1c71      	adds	r1, r6, #1
 8010600:	2400      	movs	r4, #0
 8010602:	7808      	ldrb	r0, [r1, #0]
 8010604:	f7ff ff8c 	bl	8010520 <__hexdig_fun>
 8010608:	1e43      	subs	r3, r0, #1
 801060a:	b2db      	uxtb	r3, r3
 801060c:	2b18      	cmp	r3, #24
 801060e:	d830      	bhi.n	8010672 <__gethex+0x126>
 8010610:	f1a0 0210 	sub.w	r2, r0, #16
 8010614:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010618:	f7ff ff82 	bl	8010520 <__hexdig_fun>
 801061c:	f100 3cff 	add.w	ip, r0, #4294967295
 8010620:	fa5f fc8c 	uxtb.w	ip, ip
 8010624:	f1bc 0f18 	cmp.w	ip, #24
 8010628:	f04f 030a 	mov.w	r3, #10
 801062c:	d91e      	bls.n	801066c <__gethex+0x120>
 801062e:	b104      	cbz	r4, 8010632 <__gethex+0xe6>
 8010630:	4252      	negs	r2, r2
 8010632:	4417      	add	r7, r2
 8010634:	f8ca 1000 	str.w	r1, [sl]
 8010638:	b1ed      	cbz	r5, 8010676 <__gethex+0x12a>
 801063a:	f1bb 0f00 	cmp.w	fp, #0
 801063e:	bf0c      	ite	eq
 8010640:	2506      	moveq	r5, #6
 8010642:	2500      	movne	r5, #0
 8010644:	4628      	mov	r0, r5
 8010646:	b005      	add	sp, #20
 8010648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801064c:	2500      	movs	r5, #0
 801064e:	462c      	mov	r4, r5
 8010650:	e7b0      	b.n	80105b4 <__gethex+0x68>
 8010652:	2c00      	cmp	r4, #0
 8010654:	d1c7      	bne.n	80105e6 <__gethex+0x9a>
 8010656:	4627      	mov	r7, r4
 8010658:	e7c7      	b.n	80105ea <__gethex+0x9e>
 801065a:	464e      	mov	r6, r9
 801065c:	462f      	mov	r7, r5
 801065e:	2501      	movs	r5, #1
 8010660:	e7c3      	b.n	80105ea <__gethex+0x9e>
 8010662:	2400      	movs	r4, #0
 8010664:	1cb1      	adds	r1, r6, #2
 8010666:	e7cc      	b.n	8010602 <__gethex+0xb6>
 8010668:	2401      	movs	r4, #1
 801066a:	e7fb      	b.n	8010664 <__gethex+0x118>
 801066c:	fb03 0002 	mla	r0, r3, r2, r0
 8010670:	e7ce      	b.n	8010610 <__gethex+0xc4>
 8010672:	4631      	mov	r1, r6
 8010674:	e7de      	b.n	8010634 <__gethex+0xe8>
 8010676:	eba6 0309 	sub.w	r3, r6, r9
 801067a:	3b01      	subs	r3, #1
 801067c:	4629      	mov	r1, r5
 801067e:	2b07      	cmp	r3, #7
 8010680:	dc0a      	bgt.n	8010698 <__gethex+0x14c>
 8010682:	9801      	ldr	r0, [sp, #4]
 8010684:	f7fe f952 	bl	800e92c <_Balloc>
 8010688:	4604      	mov	r4, r0
 801068a:	b940      	cbnz	r0, 801069e <__gethex+0x152>
 801068c:	4b5c      	ldr	r3, [pc, #368]	@ (8010800 <__gethex+0x2b4>)
 801068e:	4602      	mov	r2, r0
 8010690:	21e4      	movs	r1, #228	@ 0xe4
 8010692:	485c      	ldr	r0, [pc, #368]	@ (8010804 <__gethex+0x2b8>)
 8010694:	f7ff fec0 	bl	8010418 <__assert_func>
 8010698:	3101      	adds	r1, #1
 801069a:	105b      	asrs	r3, r3, #1
 801069c:	e7ef      	b.n	801067e <__gethex+0x132>
 801069e:	f100 0a14 	add.w	sl, r0, #20
 80106a2:	2300      	movs	r3, #0
 80106a4:	4655      	mov	r5, sl
 80106a6:	469b      	mov	fp, r3
 80106a8:	45b1      	cmp	r9, r6
 80106aa:	d337      	bcc.n	801071c <__gethex+0x1d0>
 80106ac:	f845 bb04 	str.w	fp, [r5], #4
 80106b0:	eba5 050a 	sub.w	r5, r5, sl
 80106b4:	10ad      	asrs	r5, r5, #2
 80106b6:	6125      	str	r5, [r4, #16]
 80106b8:	4658      	mov	r0, fp
 80106ba:	f7fe fa29 	bl	800eb10 <__hi0bits>
 80106be:	016d      	lsls	r5, r5, #5
 80106c0:	f8d8 6000 	ldr.w	r6, [r8]
 80106c4:	1a2d      	subs	r5, r5, r0
 80106c6:	42b5      	cmp	r5, r6
 80106c8:	dd54      	ble.n	8010774 <__gethex+0x228>
 80106ca:	1bad      	subs	r5, r5, r6
 80106cc:	4629      	mov	r1, r5
 80106ce:	4620      	mov	r0, r4
 80106d0:	f7fe fdb5 	bl	800f23e <__any_on>
 80106d4:	4681      	mov	r9, r0
 80106d6:	b178      	cbz	r0, 80106f8 <__gethex+0x1ac>
 80106d8:	1e6b      	subs	r3, r5, #1
 80106da:	1159      	asrs	r1, r3, #5
 80106dc:	f003 021f 	and.w	r2, r3, #31
 80106e0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80106e4:	f04f 0901 	mov.w	r9, #1
 80106e8:	fa09 f202 	lsl.w	r2, r9, r2
 80106ec:	420a      	tst	r2, r1
 80106ee:	d003      	beq.n	80106f8 <__gethex+0x1ac>
 80106f0:	454b      	cmp	r3, r9
 80106f2:	dc36      	bgt.n	8010762 <__gethex+0x216>
 80106f4:	f04f 0902 	mov.w	r9, #2
 80106f8:	4629      	mov	r1, r5
 80106fa:	4620      	mov	r0, r4
 80106fc:	f7ff febe 	bl	801047c <rshift>
 8010700:	442f      	add	r7, r5
 8010702:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010706:	42bb      	cmp	r3, r7
 8010708:	da42      	bge.n	8010790 <__gethex+0x244>
 801070a:	9801      	ldr	r0, [sp, #4]
 801070c:	4621      	mov	r1, r4
 801070e:	f7fe f94d 	bl	800e9ac <_Bfree>
 8010712:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010714:	2300      	movs	r3, #0
 8010716:	6013      	str	r3, [r2, #0]
 8010718:	25a3      	movs	r5, #163	@ 0xa3
 801071a:	e793      	b.n	8010644 <__gethex+0xf8>
 801071c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010720:	2a2e      	cmp	r2, #46	@ 0x2e
 8010722:	d012      	beq.n	801074a <__gethex+0x1fe>
 8010724:	2b20      	cmp	r3, #32
 8010726:	d104      	bne.n	8010732 <__gethex+0x1e6>
 8010728:	f845 bb04 	str.w	fp, [r5], #4
 801072c:	f04f 0b00 	mov.w	fp, #0
 8010730:	465b      	mov	r3, fp
 8010732:	7830      	ldrb	r0, [r6, #0]
 8010734:	9303      	str	r3, [sp, #12]
 8010736:	f7ff fef3 	bl	8010520 <__hexdig_fun>
 801073a:	9b03      	ldr	r3, [sp, #12]
 801073c:	f000 000f 	and.w	r0, r0, #15
 8010740:	4098      	lsls	r0, r3
 8010742:	ea4b 0b00 	orr.w	fp, fp, r0
 8010746:	3304      	adds	r3, #4
 8010748:	e7ae      	b.n	80106a8 <__gethex+0x15c>
 801074a:	45b1      	cmp	r9, r6
 801074c:	d8ea      	bhi.n	8010724 <__gethex+0x1d8>
 801074e:	492b      	ldr	r1, [pc, #172]	@ (80107fc <__gethex+0x2b0>)
 8010750:	9303      	str	r3, [sp, #12]
 8010752:	2201      	movs	r2, #1
 8010754:	4630      	mov	r0, r6
 8010756:	f7ff fe37 	bl	80103c8 <strncmp>
 801075a:	9b03      	ldr	r3, [sp, #12]
 801075c:	2800      	cmp	r0, #0
 801075e:	d1e1      	bne.n	8010724 <__gethex+0x1d8>
 8010760:	e7a2      	b.n	80106a8 <__gethex+0x15c>
 8010762:	1ea9      	subs	r1, r5, #2
 8010764:	4620      	mov	r0, r4
 8010766:	f7fe fd6a 	bl	800f23e <__any_on>
 801076a:	2800      	cmp	r0, #0
 801076c:	d0c2      	beq.n	80106f4 <__gethex+0x1a8>
 801076e:	f04f 0903 	mov.w	r9, #3
 8010772:	e7c1      	b.n	80106f8 <__gethex+0x1ac>
 8010774:	da09      	bge.n	801078a <__gethex+0x23e>
 8010776:	1b75      	subs	r5, r6, r5
 8010778:	4621      	mov	r1, r4
 801077a:	9801      	ldr	r0, [sp, #4]
 801077c:	462a      	mov	r2, r5
 801077e:	f7fe fb25 	bl	800edcc <__lshift>
 8010782:	1b7f      	subs	r7, r7, r5
 8010784:	4604      	mov	r4, r0
 8010786:	f100 0a14 	add.w	sl, r0, #20
 801078a:	f04f 0900 	mov.w	r9, #0
 801078e:	e7b8      	b.n	8010702 <__gethex+0x1b6>
 8010790:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010794:	42bd      	cmp	r5, r7
 8010796:	dd6f      	ble.n	8010878 <__gethex+0x32c>
 8010798:	1bed      	subs	r5, r5, r7
 801079a:	42ae      	cmp	r6, r5
 801079c:	dc34      	bgt.n	8010808 <__gethex+0x2bc>
 801079e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80107a2:	2b02      	cmp	r3, #2
 80107a4:	d022      	beq.n	80107ec <__gethex+0x2a0>
 80107a6:	2b03      	cmp	r3, #3
 80107a8:	d024      	beq.n	80107f4 <__gethex+0x2a8>
 80107aa:	2b01      	cmp	r3, #1
 80107ac:	d115      	bne.n	80107da <__gethex+0x28e>
 80107ae:	42ae      	cmp	r6, r5
 80107b0:	d113      	bne.n	80107da <__gethex+0x28e>
 80107b2:	2e01      	cmp	r6, #1
 80107b4:	d10b      	bne.n	80107ce <__gethex+0x282>
 80107b6:	9a02      	ldr	r2, [sp, #8]
 80107b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80107bc:	6013      	str	r3, [r2, #0]
 80107be:	2301      	movs	r3, #1
 80107c0:	6123      	str	r3, [r4, #16]
 80107c2:	f8ca 3000 	str.w	r3, [sl]
 80107c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80107c8:	2562      	movs	r5, #98	@ 0x62
 80107ca:	601c      	str	r4, [r3, #0]
 80107cc:	e73a      	b.n	8010644 <__gethex+0xf8>
 80107ce:	1e71      	subs	r1, r6, #1
 80107d0:	4620      	mov	r0, r4
 80107d2:	f7fe fd34 	bl	800f23e <__any_on>
 80107d6:	2800      	cmp	r0, #0
 80107d8:	d1ed      	bne.n	80107b6 <__gethex+0x26a>
 80107da:	9801      	ldr	r0, [sp, #4]
 80107dc:	4621      	mov	r1, r4
 80107de:	f7fe f8e5 	bl	800e9ac <_Bfree>
 80107e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80107e4:	2300      	movs	r3, #0
 80107e6:	6013      	str	r3, [r2, #0]
 80107e8:	2550      	movs	r5, #80	@ 0x50
 80107ea:	e72b      	b.n	8010644 <__gethex+0xf8>
 80107ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d1f3      	bne.n	80107da <__gethex+0x28e>
 80107f2:	e7e0      	b.n	80107b6 <__gethex+0x26a>
 80107f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d1dd      	bne.n	80107b6 <__gethex+0x26a>
 80107fa:	e7ee      	b.n	80107da <__gethex+0x28e>
 80107fc:	080112a7 	.word	0x080112a7
 8010800:	0801123d 	.word	0x0801123d
 8010804:	080112fe 	.word	0x080112fe
 8010808:	1e6f      	subs	r7, r5, #1
 801080a:	f1b9 0f00 	cmp.w	r9, #0
 801080e:	d130      	bne.n	8010872 <__gethex+0x326>
 8010810:	b127      	cbz	r7, 801081c <__gethex+0x2d0>
 8010812:	4639      	mov	r1, r7
 8010814:	4620      	mov	r0, r4
 8010816:	f7fe fd12 	bl	800f23e <__any_on>
 801081a:	4681      	mov	r9, r0
 801081c:	117a      	asrs	r2, r7, #5
 801081e:	2301      	movs	r3, #1
 8010820:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010824:	f007 071f 	and.w	r7, r7, #31
 8010828:	40bb      	lsls	r3, r7
 801082a:	4213      	tst	r3, r2
 801082c:	4629      	mov	r1, r5
 801082e:	4620      	mov	r0, r4
 8010830:	bf18      	it	ne
 8010832:	f049 0902 	orrne.w	r9, r9, #2
 8010836:	f7ff fe21 	bl	801047c <rshift>
 801083a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801083e:	1b76      	subs	r6, r6, r5
 8010840:	2502      	movs	r5, #2
 8010842:	f1b9 0f00 	cmp.w	r9, #0
 8010846:	d047      	beq.n	80108d8 <__gethex+0x38c>
 8010848:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801084c:	2b02      	cmp	r3, #2
 801084e:	d015      	beq.n	801087c <__gethex+0x330>
 8010850:	2b03      	cmp	r3, #3
 8010852:	d017      	beq.n	8010884 <__gethex+0x338>
 8010854:	2b01      	cmp	r3, #1
 8010856:	d109      	bne.n	801086c <__gethex+0x320>
 8010858:	f019 0f02 	tst.w	r9, #2
 801085c:	d006      	beq.n	801086c <__gethex+0x320>
 801085e:	f8da 3000 	ldr.w	r3, [sl]
 8010862:	ea49 0903 	orr.w	r9, r9, r3
 8010866:	f019 0f01 	tst.w	r9, #1
 801086a:	d10e      	bne.n	801088a <__gethex+0x33e>
 801086c:	f045 0510 	orr.w	r5, r5, #16
 8010870:	e032      	b.n	80108d8 <__gethex+0x38c>
 8010872:	f04f 0901 	mov.w	r9, #1
 8010876:	e7d1      	b.n	801081c <__gethex+0x2d0>
 8010878:	2501      	movs	r5, #1
 801087a:	e7e2      	b.n	8010842 <__gethex+0x2f6>
 801087c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801087e:	f1c3 0301 	rsb	r3, r3, #1
 8010882:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010884:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010886:	2b00      	cmp	r3, #0
 8010888:	d0f0      	beq.n	801086c <__gethex+0x320>
 801088a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801088e:	f104 0314 	add.w	r3, r4, #20
 8010892:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010896:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801089a:	f04f 0c00 	mov.w	ip, #0
 801089e:	4618      	mov	r0, r3
 80108a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80108a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80108a8:	d01b      	beq.n	80108e2 <__gethex+0x396>
 80108aa:	3201      	adds	r2, #1
 80108ac:	6002      	str	r2, [r0, #0]
 80108ae:	2d02      	cmp	r5, #2
 80108b0:	f104 0314 	add.w	r3, r4, #20
 80108b4:	d13c      	bne.n	8010930 <__gethex+0x3e4>
 80108b6:	f8d8 2000 	ldr.w	r2, [r8]
 80108ba:	3a01      	subs	r2, #1
 80108bc:	42b2      	cmp	r2, r6
 80108be:	d109      	bne.n	80108d4 <__gethex+0x388>
 80108c0:	1171      	asrs	r1, r6, #5
 80108c2:	2201      	movs	r2, #1
 80108c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80108c8:	f006 061f 	and.w	r6, r6, #31
 80108cc:	fa02 f606 	lsl.w	r6, r2, r6
 80108d0:	421e      	tst	r6, r3
 80108d2:	d13a      	bne.n	801094a <__gethex+0x3fe>
 80108d4:	f045 0520 	orr.w	r5, r5, #32
 80108d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80108da:	601c      	str	r4, [r3, #0]
 80108dc:	9b02      	ldr	r3, [sp, #8]
 80108de:	601f      	str	r7, [r3, #0]
 80108e0:	e6b0      	b.n	8010644 <__gethex+0xf8>
 80108e2:	4299      	cmp	r1, r3
 80108e4:	f843 cc04 	str.w	ip, [r3, #-4]
 80108e8:	d8d9      	bhi.n	801089e <__gethex+0x352>
 80108ea:	68a3      	ldr	r3, [r4, #8]
 80108ec:	459b      	cmp	fp, r3
 80108ee:	db17      	blt.n	8010920 <__gethex+0x3d4>
 80108f0:	6861      	ldr	r1, [r4, #4]
 80108f2:	9801      	ldr	r0, [sp, #4]
 80108f4:	3101      	adds	r1, #1
 80108f6:	f7fe f819 	bl	800e92c <_Balloc>
 80108fa:	4681      	mov	r9, r0
 80108fc:	b918      	cbnz	r0, 8010906 <__gethex+0x3ba>
 80108fe:	4b1a      	ldr	r3, [pc, #104]	@ (8010968 <__gethex+0x41c>)
 8010900:	4602      	mov	r2, r0
 8010902:	2184      	movs	r1, #132	@ 0x84
 8010904:	e6c5      	b.n	8010692 <__gethex+0x146>
 8010906:	6922      	ldr	r2, [r4, #16]
 8010908:	3202      	adds	r2, #2
 801090a:	f104 010c 	add.w	r1, r4, #12
 801090e:	0092      	lsls	r2, r2, #2
 8010910:	300c      	adds	r0, #12
 8010912:	f7ff fd6b 	bl	80103ec <memcpy>
 8010916:	4621      	mov	r1, r4
 8010918:	9801      	ldr	r0, [sp, #4]
 801091a:	f7fe f847 	bl	800e9ac <_Bfree>
 801091e:	464c      	mov	r4, r9
 8010920:	6923      	ldr	r3, [r4, #16]
 8010922:	1c5a      	adds	r2, r3, #1
 8010924:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010928:	6122      	str	r2, [r4, #16]
 801092a:	2201      	movs	r2, #1
 801092c:	615a      	str	r2, [r3, #20]
 801092e:	e7be      	b.n	80108ae <__gethex+0x362>
 8010930:	6922      	ldr	r2, [r4, #16]
 8010932:	455a      	cmp	r2, fp
 8010934:	dd0b      	ble.n	801094e <__gethex+0x402>
 8010936:	2101      	movs	r1, #1
 8010938:	4620      	mov	r0, r4
 801093a:	f7ff fd9f 	bl	801047c <rshift>
 801093e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010942:	3701      	adds	r7, #1
 8010944:	42bb      	cmp	r3, r7
 8010946:	f6ff aee0 	blt.w	801070a <__gethex+0x1be>
 801094a:	2501      	movs	r5, #1
 801094c:	e7c2      	b.n	80108d4 <__gethex+0x388>
 801094e:	f016 061f 	ands.w	r6, r6, #31
 8010952:	d0fa      	beq.n	801094a <__gethex+0x3fe>
 8010954:	4453      	add	r3, sl
 8010956:	f1c6 0620 	rsb	r6, r6, #32
 801095a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801095e:	f7fe f8d7 	bl	800eb10 <__hi0bits>
 8010962:	42b0      	cmp	r0, r6
 8010964:	dbe7      	blt.n	8010936 <__gethex+0x3ea>
 8010966:	e7f0      	b.n	801094a <__gethex+0x3fe>
 8010968:	0801123d 	.word	0x0801123d

0801096c <L_shift>:
 801096c:	f1c2 0208 	rsb	r2, r2, #8
 8010970:	0092      	lsls	r2, r2, #2
 8010972:	b570      	push	{r4, r5, r6, lr}
 8010974:	f1c2 0620 	rsb	r6, r2, #32
 8010978:	6843      	ldr	r3, [r0, #4]
 801097a:	6804      	ldr	r4, [r0, #0]
 801097c:	fa03 f506 	lsl.w	r5, r3, r6
 8010980:	432c      	orrs	r4, r5
 8010982:	40d3      	lsrs	r3, r2
 8010984:	6004      	str	r4, [r0, #0]
 8010986:	f840 3f04 	str.w	r3, [r0, #4]!
 801098a:	4288      	cmp	r0, r1
 801098c:	d3f4      	bcc.n	8010978 <L_shift+0xc>
 801098e:	bd70      	pop	{r4, r5, r6, pc}

08010990 <__match>:
 8010990:	b530      	push	{r4, r5, lr}
 8010992:	6803      	ldr	r3, [r0, #0]
 8010994:	3301      	adds	r3, #1
 8010996:	f811 4b01 	ldrb.w	r4, [r1], #1
 801099a:	b914      	cbnz	r4, 80109a2 <__match+0x12>
 801099c:	6003      	str	r3, [r0, #0]
 801099e:	2001      	movs	r0, #1
 80109a0:	bd30      	pop	{r4, r5, pc}
 80109a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80109a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80109aa:	2d19      	cmp	r5, #25
 80109ac:	bf98      	it	ls
 80109ae:	3220      	addls	r2, #32
 80109b0:	42a2      	cmp	r2, r4
 80109b2:	d0f0      	beq.n	8010996 <__match+0x6>
 80109b4:	2000      	movs	r0, #0
 80109b6:	e7f3      	b.n	80109a0 <__match+0x10>

080109b8 <__hexnan>:
 80109b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109bc:	680b      	ldr	r3, [r1, #0]
 80109be:	6801      	ldr	r1, [r0, #0]
 80109c0:	115e      	asrs	r6, r3, #5
 80109c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80109c6:	f013 031f 	ands.w	r3, r3, #31
 80109ca:	b087      	sub	sp, #28
 80109cc:	bf18      	it	ne
 80109ce:	3604      	addne	r6, #4
 80109d0:	2500      	movs	r5, #0
 80109d2:	1f37      	subs	r7, r6, #4
 80109d4:	4682      	mov	sl, r0
 80109d6:	4690      	mov	r8, r2
 80109d8:	9301      	str	r3, [sp, #4]
 80109da:	f846 5c04 	str.w	r5, [r6, #-4]
 80109de:	46b9      	mov	r9, r7
 80109e0:	463c      	mov	r4, r7
 80109e2:	9502      	str	r5, [sp, #8]
 80109e4:	46ab      	mov	fp, r5
 80109e6:	784a      	ldrb	r2, [r1, #1]
 80109e8:	1c4b      	adds	r3, r1, #1
 80109ea:	9303      	str	r3, [sp, #12]
 80109ec:	b342      	cbz	r2, 8010a40 <__hexnan+0x88>
 80109ee:	4610      	mov	r0, r2
 80109f0:	9105      	str	r1, [sp, #20]
 80109f2:	9204      	str	r2, [sp, #16]
 80109f4:	f7ff fd94 	bl	8010520 <__hexdig_fun>
 80109f8:	2800      	cmp	r0, #0
 80109fa:	d151      	bne.n	8010aa0 <__hexnan+0xe8>
 80109fc:	9a04      	ldr	r2, [sp, #16]
 80109fe:	9905      	ldr	r1, [sp, #20]
 8010a00:	2a20      	cmp	r2, #32
 8010a02:	d818      	bhi.n	8010a36 <__hexnan+0x7e>
 8010a04:	9b02      	ldr	r3, [sp, #8]
 8010a06:	459b      	cmp	fp, r3
 8010a08:	dd13      	ble.n	8010a32 <__hexnan+0x7a>
 8010a0a:	454c      	cmp	r4, r9
 8010a0c:	d206      	bcs.n	8010a1c <__hexnan+0x64>
 8010a0e:	2d07      	cmp	r5, #7
 8010a10:	dc04      	bgt.n	8010a1c <__hexnan+0x64>
 8010a12:	462a      	mov	r2, r5
 8010a14:	4649      	mov	r1, r9
 8010a16:	4620      	mov	r0, r4
 8010a18:	f7ff ffa8 	bl	801096c <L_shift>
 8010a1c:	4544      	cmp	r4, r8
 8010a1e:	d952      	bls.n	8010ac6 <__hexnan+0x10e>
 8010a20:	2300      	movs	r3, #0
 8010a22:	f1a4 0904 	sub.w	r9, r4, #4
 8010a26:	f844 3c04 	str.w	r3, [r4, #-4]
 8010a2a:	f8cd b008 	str.w	fp, [sp, #8]
 8010a2e:	464c      	mov	r4, r9
 8010a30:	461d      	mov	r5, r3
 8010a32:	9903      	ldr	r1, [sp, #12]
 8010a34:	e7d7      	b.n	80109e6 <__hexnan+0x2e>
 8010a36:	2a29      	cmp	r2, #41	@ 0x29
 8010a38:	d157      	bne.n	8010aea <__hexnan+0x132>
 8010a3a:	3102      	adds	r1, #2
 8010a3c:	f8ca 1000 	str.w	r1, [sl]
 8010a40:	f1bb 0f00 	cmp.w	fp, #0
 8010a44:	d051      	beq.n	8010aea <__hexnan+0x132>
 8010a46:	454c      	cmp	r4, r9
 8010a48:	d206      	bcs.n	8010a58 <__hexnan+0xa0>
 8010a4a:	2d07      	cmp	r5, #7
 8010a4c:	dc04      	bgt.n	8010a58 <__hexnan+0xa0>
 8010a4e:	462a      	mov	r2, r5
 8010a50:	4649      	mov	r1, r9
 8010a52:	4620      	mov	r0, r4
 8010a54:	f7ff ff8a 	bl	801096c <L_shift>
 8010a58:	4544      	cmp	r4, r8
 8010a5a:	d936      	bls.n	8010aca <__hexnan+0x112>
 8010a5c:	f1a8 0204 	sub.w	r2, r8, #4
 8010a60:	4623      	mov	r3, r4
 8010a62:	f853 1b04 	ldr.w	r1, [r3], #4
 8010a66:	f842 1f04 	str.w	r1, [r2, #4]!
 8010a6a:	429f      	cmp	r7, r3
 8010a6c:	d2f9      	bcs.n	8010a62 <__hexnan+0xaa>
 8010a6e:	1b3b      	subs	r3, r7, r4
 8010a70:	f023 0303 	bic.w	r3, r3, #3
 8010a74:	3304      	adds	r3, #4
 8010a76:	3401      	adds	r4, #1
 8010a78:	3e03      	subs	r6, #3
 8010a7a:	42b4      	cmp	r4, r6
 8010a7c:	bf88      	it	hi
 8010a7e:	2304      	movhi	r3, #4
 8010a80:	4443      	add	r3, r8
 8010a82:	2200      	movs	r2, #0
 8010a84:	f843 2b04 	str.w	r2, [r3], #4
 8010a88:	429f      	cmp	r7, r3
 8010a8a:	d2fb      	bcs.n	8010a84 <__hexnan+0xcc>
 8010a8c:	683b      	ldr	r3, [r7, #0]
 8010a8e:	b91b      	cbnz	r3, 8010a98 <__hexnan+0xe0>
 8010a90:	4547      	cmp	r7, r8
 8010a92:	d128      	bne.n	8010ae6 <__hexnan+0x12e>
 8010a94:	2301      	movs	r3, #1
 8010a96:	603b      	str	r3, [r7, #0]
 8010a98:	2005      	movs	r0, #5
 8010a9a:	b007      	add	sp, #28
 8010a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aa0:	3501      	adds	r5, #1
 8010aa2:	2d08      	cmp	r5, #8
 8010aa4:	f10b 0b01 	add.w	fp, fp, #1
 8010aa8:	dd06      	ble.n	8010ab8 <__hexnan+0x100>
 8010aaa:	4544      	cmp	r4, r8
 8010aac:	d9c1      	bls.n	8010a32 <__hexnan+0x7a>
 8010aae:	2300      	movs	r3, #0
 8010ab0:	f844 3c04 	str.w	r3, [r4, #-4]
 8010ab4:	2501      	movs	r5, #1
 8010ab6:	3c04      	subs	r4, #4
 8010ab8:	6822      	ldr	r2, [r4, #0]
 8010aba:	f000 000f 	and.w	r0, r0, #15
 8010abe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010ac2:	6020      	str	r0, [r4, #0]
 8010ac4:	e7b5      	b.n	8010a32 <__hexnan+0x7a>
 8010ac6:	2508      	movs	r5, #8
 8010ac8:	e7b3      	b.n	8010a32 <__hexnan+0x7a>
 8010aca:	9b01      	ldr	r3, [sp, #4]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d0dd      	beq.n	8010a8c <__hexnan+0xd4>
 8010ad0:	f1c3 0320 	rsb	r3, r3, #32
 8010ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8010ad8:	40da      	lsrs	r2, r3
 8010ada:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010ade:	4013      	ands	r3, r2
 8010ae0:	f846 3c04 	str.w	r3, [r6, #-4]
 8010ae4:	e7d2      	b.n	8010a8c <__hexnan+0xd4>
 8010ae6:	3f04      	subs	r7, #4
 8010ae8:	e7d0      	b.n	8010a8c <__hexnan+0xd4>
 8010aea:	2004      	movs	r0, #4
 8010aec:	e7d5      	b.n	8010a9a <__hexnan+0xe2>

08010aee <__ascii_mbtowc>:
 8010aee:	b082      	sub	sp, #8
 8010af0:	b901      	cbnz	r1, 8010af4 <__ascii_mbtowc+0x6>
 8010af2:	a901      	add	r1, sp, #4
 8010af4:	b142      	cbz	r2, 8010b08 <__ascii_mbtowc+0x1a>
 8010af6:	b14b      	cbz	r3, 8010b0c <__ascii_mbtowc+0x1e>
 8010af8:	7813      	ldrb	r3, [r2, #0]
 8010afa:	600b      	str	r3, [r1, #0]
 8010afc:	7812      	ldrb	r2, [r2, #0]
 8010afe:	1e10      	subs	r0, r2, #0
 8010b00:	bf18      	it	ne
 8010b02:	2001      	movne	r0, #1
 8010b04:	b002      	add	sp, #8
 8010b06:	4770      	bx	lr
 8010b08:	4610      	mov	r0, r2
 8010b0a:	e7fb      	b.n	8010b04 <__ascii_mbtowc+0x16>
 8010b0c:	f06f 0001 	mvn.w	r0, #1
 8010b10:	e7f8      	b.n	8010b04 <__ascii_mbtowc+0x16>

08010b12 <_realloc_r>:
 8010b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b16:	4607      	mov	r7, r0
 8010b18:	4614      	mov	r4, r2
 8010b1a:	460d      	mov	r5, r1
 8010b1c:	b921      	cbnz	r1, 8010b28 <_realloc_r+0x16>
 8010b1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b22:	4611      	mov	r1, r2
 8010b24:	f7fb bfb2 	b.w	800ca8c <_malloc_r>
 8010b28:	b92a      	cbnz	r2, 8010b36 <_realloc_r+0x24>
 8010b2a:	f7fd feb5 	bl	800e898 <_free_r>
 8010b2e:	4625      	mov	r5, r4
 8010b30:	4628      	mov	r0, r5
 8010b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b36:	f000 f840 	bl	8010bba <_malloc_usable_size_r>
 8010b3a:	4284      	cmp	r4, r0
 8010b3c:	4606      	mov	r6, r0
 8010b3e:	d802      	bhi.n	8010b46 <_realloc_r+0x34>
 8010b40:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010b44:	d8f4      	bhi.n	8010b30 <_realloc_r+0x1e>
 8010b46:	4621      	mov	r1, r4
 8010b48:	4638      	mov	r0, r7
 8010b4a:	f7fb ff9f 	bl	800ca8c <_malloc_r>
 8010b4e:	4680      	mov	r8, r0
 8010b50:	b908      	cbnz	r0, 8010b56 <_realloc_r+0x44>
 8010b52:	4645      	mov	r5, r8
 8010b54:	e7ec      	b.n	8010b30 <_realloc_r+0x1e>
 8010b56:	42b4      	cmp	r4, r6
 8010b58:	4622      	mov	r2, r4
 8010b5a:	4629      	mov	r1, r5
 8010b5c:	bf28      	it	cs
 8010b5e:	4632      	movcs	r2, r6
 8010b60:	f7ff fc44 	bl	80103ec <memcpy>
 8010b64:	4629      	mov	r1, r5
 8010b66:	4638      	mov	r0, r7
 8010b68:	f7fd fe96 	bl	800e898 <_free_r>
 8010b6c:	e7f1      	b.n	8010b52 <_realloc_r+0x40>

08010b6e <__ascii_wctomb>:
 8010b6e:	4603      	mov	r3, r0
 8010b70:	4608      	mov	r0, r1
 8010b72:	b141      	cbz	r1, 8010b86 <__ascii_wctomb+0x18>
 8010b74:	2aff      	cmp	r2, #255	@ 0xff
 8010b76:	d904      	bls.n	8010b82 <__ascii_wctomb+0x14>
 8010b78:	228a      	movs	r2, #138	@ 0x8a
 8010b7a:	601a      	str	r2, [r3, #0]
 8010b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8010b80:	4770      	bx	lr
 8010b82:	700a      	strb	r2, [r1, #0]
 8010b84:	2001      	movs	r0, #1
 8010b86:	4770      	bx	lr

08010b88 <fiprintf>:
 8010b88:	b40e      	push	{r1, r2, r3}
 8010b8a:	b503      	push	{r0, r1, lr}
 8010b8c:	4601      	mov	r1, r0
 8010b8e:	ab03      	add	r3, sp, #12
 8010b90:	4805      	ldr	r0, [pc, #20]	@ (8010ba8 <fiprintf+0x20>)
 8010b92:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b96:	6800      	ldr	r0, [r0, #0]
 8010b98:	9301      	str	r3, [sp, #4]
 8010b9a:	f000 f83f 	bl	8010c1c <_vfiprintf_r>
 8010b9e:	b002      	add	sp, #8
 8010ba0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ba4:	b003      	add	sp, #12
 8010ba6:	4770      	bx	lr
 8010ba8:	20000110 	.word	0x20000110

08010bac <abort>:
 8010bac:	b508      	push	{r3, lr}
 8010bae:	2006      	movs	r0, #6
 8010bb0:	f000 fa08 	bl	8010fc4 <raise>
 8010bb4:	2001      	movs	r0, #1
 8010bb6:	f7f1 fcde 	bl	8002576 <_exit>

08010bba <_malloc_usable_size_r>:
 8010bba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010bbe:	1f18      	subs	r0, r3, #4
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	bfbc      	itt	lt
 8010bc4:	580b      	ldrlt	r3, [r1, r0]
 8010bc6:	18c0      	addlt	r0, r0, r3
 8010bc8:	4770      	bx	lr

08010bca <__sfputc_r>:
 8010bca:	6893      	ldr	r3, [r2, #8]
 8010bcc:	3b01      	subs	r3, #1
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	b410      	push	{r4}
 8010bd2:	6093      	str	r3, [r2, #8]
 8010bd4:	da08      	bge.n	8010be8 <__sfputc_r+0x1e>
 8010bd6:	6994      	ldr	r4, [r2, #24]
 8010bd8:	42a3      	cmp	r3, r4
 8010bda:	db01      	blt.n	8010be0 <__sfputc_r+0x16>
 8010bdc:	290a      	cmp	r1, #10
 8010bde:	d103      	bne.n	8010be8 <__sfputc_r+0x1e>
 8010be0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010be4:	f000 b932 	b.w	8010e4c <__swbuf_r>
 8010be8:	6813      	ldr	r3, [r2, #0]
 8010bea:	1c58      	adds	r0, r3, #1
 8010bec:	6010      	str	r0, [r2, #0]
 8010bee:	7019      	strb	r1, [r3, #0]
 8010bf0:	4608      	mov	r0, r1
 8010bf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010bf6:	4770      	bx	lr

08010bf8 <__sfputs_r>:
 8010bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bfa:	4606      	mov	r6, r0
 8010bfc:	460f      	mov	r7, r1
 8010bfe:	4614      	mov	r4, r2
 8010c00:	18d5      	adds	r5, r2, r3
 8010c02:	42ac      	cmp	r4, r5
 8010c04:	d101      	bne.n	8010c0a <__sfputs_r+0x12>
 8010c06:	2000      	movs	r0, #0
 8010c08:	e007      	b.n	8010c1a <__sfputs_r+0x22>
 8010c0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c0e:	463a      	mov	r2, r7
 8010c10:	4630      	mov	r0, r6
 8010c12:	f7ff ffda 	bl	8010bca <__sfputc_r>
 8010c16:	1c43      	adds	r3, r0, #1
 8010c18:	d1f3      	bne.n	8010c02 <__sfputs_r+0xa>
 8010c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010c1c <_vfiprintf_r>:
 8010c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c20:	460d      	mov	r5, r1
 8010c22:	b09d      	sub	sp, #116	@ 0x74
 8010c24:	4614      	mov	r4, r2
 8010c26:	4698      	mov	r8, r3
 8010c28:	4606      	mov	r6, r0
 8010c2a:	b118      	cbz	r0, 8010c34 <_vfiprintf_r+0x18>
 8010c2c:	6a03      	ldr	r3, [r0, #32]
 8010c2e:	b90b      	cbnz	r3, 8010c34 <_vfiprintf_r+0x18>
 8010c30:	f7fc fea8 	bl	800d984 <__sinit>
 8010c34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010c36:	07d9      	lsls	r1, r3, #31
 8010c38:	d405      	bmi.n	8010c46 <_vfiprintf_r+0x2a>
 8010c3a:	89ab      	ldrh	r3, [r5, #12]
 8010c3c:	059a      	lsls	r2, r3, #22
 8010c3e:	d402      	bmi.n	8010c46 <_vfiprintf_r+0x2a>
 8010c40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010c42:	f7fc ffc8 	bl	800dbd6 <__retarget_lock_acquire_recursive>
 8010c46:	89ab      	ldrh	r3, [r5, #12]
 8010c48:	071b      	lsls	r3, r3, #28
 8010c4a:	d501      	bpl.n	8010c50 <_vfiprintf_r+0x34>
 8010c4c:	692b      	ldr	r3, [r5, #16]
 8010c4e:	b99b      	cbnz	r3, 8010c78 <_vfiprintf_r+0x5c>
 8010c50:	4629      	mov	r1, r5
 8010c52:	4630      	mov	r0, r6
 8010c54:	f000 f938 	bl	8010ec8 <__swsetup_r>
 8010c58:	b170      	cbz	r0, 8010c78 <_vfiprintf_r+0x5c>
 8010c5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010c5c:	07dc      	lsls	r4, r3, #31
 8010c5e:	d504      	bpl.n	8010c6a <_vfiprintf_r+0x4e>
 8010c60:	f04f 30ff 	mov.w	r0, #4294967295
 8010c64:	b01d      	add	sp, #116	@ 0x74
 8010c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c6a:	89ab      	ldrh	r3, [r5, #12]
 8010c6c:	0598      	lsls	r0, r3, #22
 8010c6e:	d4f7      	bmi.n	8010c60 <_vfiprintf_r+0x44>
 8010c70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010c72:	f7fc ffb1 	bl	800dbd8 <__retarget_lock_release_recursive>
 8010c76:	e7f3      	b.n	8010c60 <_vfiprintf_r+0x44>
 8010c78:	2300      	movs	r3, #0
 8010c7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c7c:	2320      	movs	r3, #32
 8010c7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010c82:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c86:	2330      	movs	r3, #48	@ 0x30
 8010c88:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010e38 <_vfiprintf_r+0x21c>
 8010c8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010c90:	f04f 0901 	mov.w	r9, #1
 8010c94:	4623      	mov	r3, r4
 8010c96:	469a      	mov	sl, r3
 8010c98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c9c:	b10a      	cbz	r2, 8010ca2 <_vfiprintf_r+0x86>
 8010c9e:	2a25      	cmp	r2, #37	@ 0x25
 8010ca0:	d1f9      	bne.n	8010c96 <_vfiprintf_r+0x7a>
 8010ca2:	ebba 0b04 	subs.w	fp, sl, r4
 8010ca6:	d00b      	beq.n	8010cc0 <_vfiprintf_r+0xa4>
 8010ca8:	465b      	mov	r3, fp
 8010caa:	4622      	mov	r2, r4
 8010cac:	4629      	mov	r1, r5
 8010cae:	4630      	mov	r0, r6
 8010cb0:	f7ff ffa2 	bl	8010bf8 <__sfputs_r>
 8010cb4:	3001      	adds	r0, #1
 8010cb6:	f000 80a7 	beq.w	8010e08 <_vfiprintf_r+0x1ec>
 8010cba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010cbc:	445a      	add	r2, fp
 8010cbe:	9209      	str	r2, [sp, #36]	@ 0x24
 8010cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	f000 809f 	beq.w	8010e08 <_vfiprintf_r+0x1ec>
 8010cca:	2300      	movs	r3, #0
 8010ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8010cd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010cd4:	f10a 0a01 	add.w	sl, sl, #1
 8010cd8:	9304      	str	r3, [sp, #16]
 8010cda:	9307      	str	r3, [sp, #28]
 8010cdc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010ce0:	931a      	str	r3, [sp, #104]	@ 0x68
 8010ce2:	4654      	mov	r4, sl
 8010ce4:	2205      	movs	r2, #5
 8010ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cea:	4853      	ldr	r0, [pc, #332]	@ (8010e38 <_vfiprintf_r+0x21c>)
 8010cec:	f7ef fa78 	bl	80001e0 <memchr>
 8010cf0:	9a04      	ldr	r2, [sp, #16]
 8010cf2:	b9d8      	cbnz	r0, 8010d2c <_vfiprintf_r+0x110>
 8010cf4:	06d1      	lsls	r1, r2, #27
 8010cf6:	bf44      	itt	mi
 8010cf8:	2320      	movmi	r3, #32
 8010cfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010cfe:	0713      	lsls	r3, r2, #28
 8010d00:	bf44      	itt	mi
 8010d02:	232b      	movmi	r3, #43	@ 0x2b
 8010d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010d08:	f89a 3000 	ldrb.w	r3, [sl]
 8010d0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d0e:	d015      	beq.n	8010d3c <_vfiprintf_r+0x120>
 8010d10:	9a07      	ldr	r2, [sp, #28]
 8010d12:	4654      	mov	r4, sl
 8010d14:	2000      	movs	r0, #0
 8010d16:	f04f 0c0a 	mov.w	ip, #10
 8010d1a:	4621      	mov	r1, r4
 8010d1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d20:	3b30      	subs	r3, #48	@ 0x30
 8010d22:	2b09      	cmp	r3, #9
 8010d24:	d94b      	bls.n	8010dbe <_vfiprintf_r+0x1a2>
 8010d26:	b1b0      	cbz	r0, 8010d56 <_vfiprintf_r+0x13a>
 8010d28:	9207      	str	r2, [sp, #28]
 8010d2a:	e014      	b.n	8010d56 <_vfiprintf_r+0x13a>
 8010d2c:	eba0 0308 	sub.w	r3, r0, r8
 8010d30:	fa09 f303 	lsl.w	r3, r9, r3
 8010d34:	4313      	orrs	r3, r2
 8010d36:	9304      	str	r3, [sp, #16]
 8010d38:	46a2      	mov	sl, r4
 8010d3a:	e7d2      	b.n	8010ce2 <_vfiprintf_r+0xc6>
 8010d3c:	9b03      	ldr	r3, [sp, #12]
 8010d3e:	1d19      	adds	r1, r3, #4
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	9103      	str	r1, [sp, #12]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	bfbb      	ittet	lt
 8010d48:	425b      	neglt	r3, r3
 8010d4a:	f042 0202 	orrlt.w	r2, r2, #2
 8010d4e:	9307      	strge	r3, [sp, #28]
 8010d50:	9307      	strlt	r3, [sp, #28]
 8010d52:	bfb8      	it	lt
 8010d54:	9204      	strlt	r2, [sp, #16]
 8010d56:	7823      	ldrb	r3, [r4, #0]
 8010d58:	2b2e      	cmp	r3, #46	@ 0x2e
 8010d5a:	d10a      	bne.n	8010d72 <_vfiprintf_r+0x156>
 8010d5c:	7863      	ldrb	r3, [r4, #1]
 8010d5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d60:	d132      	bne.n	8010dc8 <_vfiprintf_r+0x1ac>
 8010d62:	9b03      	ldr	r3, [sp, #12]
 8010d64:	1d1a      	adds	r2, r3, #4
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	9203      	str	r2, [sp, #12]
 8010d6a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010d6e:	3402      	adds	r4, #2
 8010d70:	9305      	str	r3, [sp, #20]
 8010d72:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010e48 <_vfiprintf_r+0x22c>
 8010d76:	7821      	ldrb	r1, [r4, #0]
 8010d78:	2203      	movs	r2, #3
 8010d7a:	4650      	mov	r0, sl
 8010d7c:	f7ef fa30 	bl	80001e0 <memchr>
 8010d80:	b138      	cbz	r0, 8010d92 <_vfiprintf_r+0x176>
 8010d82:	9b04      	ldr	r3, [sp, #16]
 8010d84:	eba0 000a 	sub.w	r0, r0, sl
 8010d88:	2240      	movs	r2, #64	@ 0x40
 8010d8a:	4082      	lsls	r2, r0
 8010d8c:	4313      	orrs	r3, r2
 8010d8e:	3401      	adds	r4, #1
 8010d90:	9304      	str	r3, [sp, #16]
 8010d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d96:	4829      	ldr	r0, [pc, #164]	@ (8010e3c <_vfiprintf_r+0x220>)
 8010d98:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010d9c:	2206      	movs	r2, #6
 8010d9e:	f7ef fa1f 	bl	80001e0 <memchr>
 8010da2:	2800      	cmp	r0, #0
 8010da4:	d03f      	beq.n	8010e26 <_vfiprintf_r+0x20a>
 8010da6:	4b26      	ldr	r3, [pc, #152]	@ (8010e40 <_vfiprintf_r+0x224>)
 8010da8:	bb1b      	cbnz	r3, 8010df2 <_vfiprintf_r+0x1d6>
 8010daa:	9b03      	ldr	r3, [sp, #12]
 8010dac:	3307      	adds	r3, #7
 8010dae:	f023 0307 	bic.w	r3, r3, #7
 8010db2:	3308      	adds	r3, #8
 8010db4:	9303      	str	r3, [sp, #12]
 8010db6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010db8:	443b      	add	r3, r7
 8010dba:	9309      	str	r3, [sp, #36]	@ 0x24
 8010dbc:	e76a      	b.n	8010c94 <_vfiprintf_r+0x78>
 8010dbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8010dc2:	460c      	mov	r4, r1
 8010dc4:	2001      	movs	r0, #1
 8010dc6:	e7a8      	b.n	8010d1a <_vfiprintf_r+0xfe>
 8010dc8:	2300      	movs	r3, #0
 8010dca:	3401      	adds	r4, #1
 8010dcc:	9305      	str	r3, [sp, #20]
 8010dce:	4619      	mov	r1, r3
 8010dd0:	f04f 0c0a 	mov.w	ip, #10
 8010dd4:	4620      	mov	r0, r4
 8010dd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010dda:	3a30      	subs	r2, #48	@ 0x30
 8010ddc:	2a09      	cmp	r2, #9
 8010dde:	d903      	bls.n	8010de8 <_vfiprintf_r+0x1cc>
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d0c6      	beq.n	8010d72 <_vfiprintf_r+0x156>
 8010de4:	9105      	str	r1, [sp, #20]
 8010de6:	e7c4      	b.n	8010d72 <_vfiprintf_r+0x156>
 8010de8:	fb0c 2101 	mla	r1, ip, r1, r2
 8010dec:	4604      	mov	r4, r0
 8010dee:	2301      	movs	r3, #1
 8010df0:	e7f0      	b.n	8010dd4 <_vfiprintf_r+0x1b8>
 8010df2:	ab03      	add	r3, sp, #12
 8010df4:	9300      	str	r3, [sp, #0]
 8010df6:	462a      	mov	r2, r5
 8010df8:	4b12      	ldr	r3, [pc, #72]	@ (8010e44 <_vfiprintf_r+0x228>)
 8010dfa:	a904      	add	r1, sp, #16
 8010dfc:	4630      	mov	r0, r6
 8010dfe:	f7fb ff71 	bl	800cce4 <_printf_float>
 8010e02:	4607      	mov	r7, r0
 8010e04:	1c78      	adds	r0, r7, #1
 8010e06:	d1d6      	bne.n	8010db6 <_vfiprintf_r+0x19a>
 8010e08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010e0a:	07d9      	lsls	r1, r3, #31
 8010e0c:	d405      	bmi.n	8010e1a <_vfiprintf_r+0x1fe>
 8010e0e:	89ab      	ldrh	r3, [r5, #12]
 8010e10:	059a      	lsls	r2, r3, #22
 8010e12:	d402      	bmi.n	8010e1a <_vfiprintf_r+0x1fe>
 8010e14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010e16:	f7fc fedf 	bl	800dbd8 <__retarget_lock_release_recursive>
 8010e1a:	89ab      	ldrh	r3, [r5, #12]
 8010e1c:	065b      	lsls	r3, r3, #25
 8010e1e:	f53f af1f 	bmi.w	8010c60 <_vfiprintf_r+0x44>
 8010e22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010e24:	e71e      	b.n	8010c64 <_vfiprintf_r+0x48>
 8010e26:	ab03      	add	r3, sp, #12
 8010e28:	9300      	str	r3, [sp, #0]
 8010e2a:	462a      	mov	r2, r5
 8010e2c:	4b05      	ldr	r3, [pc, #20]	@ (8010e44 <_vfiprintf_r+0x228>)
 8010e2e:	a904      	add	r1, sp, #16
 8010e30:	4630      	mov	r0, r6
 8010e32:	f7fc f9ef 	bl	800d214 <_printf_i>
 8010e36:	e7e4      	b.n	8010e02 <_vfiprintf_r+0x1e6>
 8010e38:	080112a9 	.word	0x080112a9
 8010e3c:	080112b3 	.word	0x080112b3
 8010e40:	0800cce5 	.word	0x0800cce5
 8010e44:	08010bf9 	.word	0x08010bf9
 8010e48:	080112af 	.word	0x080112af

08010e4c <__swbuf_r>:
 8010e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e4e:	460e      	mov	r6, r1
 8010e50:	4614      	mov	r4, r2
 8010e52:	4605      	mov	r5, r0
 8010e54:	b118      	cbz	r0, 8010e5e <__swbuf_r+0x12>
 8010e56:	6a03      	ldr	r3, [r0, #32]
 8010e58:	b90b      	cbnz	r3, 8010e5e <__swbuf_r+0x12>
 8010e5a:	f7fc fd93 	bl	800d984 <__sinit>
 8010e5e:	69a3      	ldr	r3, [r4, #24]
 8010e60:	60a3      	str	r3, [r4, #8]
 8010e62:	89a3      	ldrh	r3, [r4, #12]
 8010e64:	071a      	lsls	r2, r3, #28
 8010e66:	d501      	bpl.n	8010e6c <__swbuf_r+0x20>
 8010e68:	6923      	ldr	r3, [r4, #16]
 8010e6a:	b943      	cbnz	r3, 8010e7e <__swbuf_r+0x32>
 8010e6c:	4621      	mov	r1, r4
 8010e6e:	4628      	mov	r0, r5
 8010e70:	f000 f82a 	bl	8010ec8 <__swsetup_r>
 8010e74:	b118      	cbz	r0, 8010e7e <__swbuf_r+0x32>
 8010e76:	f04f 37ff 	mov.w	r7, #4294967295
 8010e7a:	4638      	mov	r0, r7
 8010e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e7e:	6823      	ldr	r3, [r4, #0]
 8010e80:	6922      	ldr	r2, [r4, #16]
 8010e82:	1a98      	subs	r0, r3, r2
 8010e84:	6963      	ldr	r3, [r4, #20]
 8010e86:	b2f6      	uxtb	r6, r6
 8010e88:	4283      	cmp	r3, r0
 8010e8a:	4637      	mov	r7, r6
 8010e8c:	dc05      	bgt.n	8010e9a <__swbuf_r+0x4e>
 8010e8e:	4621      	mov	r1, r4
 8010e90:	4628      	mov	r0, r5
 8010e92:	f7ff fa57 	bl	8010344 <_fflush_r>
 8010e96:	2800      	cmp	r0, #0
 8010e98:	d1ed      	bne.n	8010e76 <__swbuf_r+0x2a>
 8010e9a:	68a3      	ldr	r3, [r4, #8]
 8010e9c:	3b01      	subs	r3, #1
 8010e9e:	60a3      	str	r3, [r4, #8]
 8010ea0:	6823      	ldr	r3, [r4, #0]
 8010ea2:	1c5a      	adds	r2, r3, #1
 8010ea4:	6022      	str	r2, [r4, #0]
 8010ea6:	701e      	strb	r6, [r3, #0]
 8010ea8:	6962      	ldr	r2, [r4, #20]
 8010eaa:	1c43      	adds	r3, r0, #1
 8010eac:	429a      	cmp	r2, r3
 8010eae:	d004      	beq.n	8010eba <__swbuf_r+0x6e>
 8010eb0:	89a3      	ldrh	r3, [r4, #12]
 8010eb2:	07db      	lsls	r3, r3, #31
 8010eb4:	d5e1      	bpl.n	8010e7a <__swbuf_r+0x2e>
 8010eb6:	2e0a      	cmp	r6, #10
 8010eb8:	d1df      	bne.n	8010e7a <__swbuf_r+0x2e>
 8010eba:	4621      	mov	r1, r4
 8010ebc:	4628      	mov	r0, r5
 8010ebe:	f7ff fa41 	bl	8010344 <_fflush_r>
 8010ec2:	2800      	cmp	r0, #0
 8010ec4:	d0d9      	beq.n	8010e7a <__swbuf_r+0x2e>
 8010ec6:	e7d6      	b.n	8010e76 <__swbuf_r+0x2a>

08010ec8 <__swsetup_r>:
 8010ec8:	b538      	push	{r3, r4, r5, lr}
 8010eca:	4b29      	ldr	r3, [pc, #164]	@ (8010f70 <__swsetup_r+0xa8>)
 8010ecc:	4605      	mov	r5, r0
 8010ece:	6818      	ldr	r0, [r3, #0]
 8010ed0:	460c      	mov	r4, r1
 8010ed2:	b118      	cbz	r0, 8010edc <__swsetup_r+0x14>
 8010ed4:	6a03      	ldr	r3, [r0, #32]
 8010ed6:	b90b      	cbnz	r3, 8010edc <__swsetup_r+0x14>
 8010ed8:	f7fc fd54 	bl	800d984 <__sinit>
 8010edc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ee0:	0719      	lsls	r1, r3, #28
 8010ee2:	d422      	bmi.n	8010f2a <__swsetup_r+0x62>
 8010ee4:	06da      	lsls	r2, r3, #27
 8010ee6:	d407      	bmi.n	8010ef8 <__swsetup_r+0x30>
 8010ee8:	2209      	movs	r2, #9
 8010eea:	602a      	str	r2, [r5, #0]
 8010eec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ef0:	81a3      	strh	r3, [r4, #12]
 8010ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8010ef6:	e033      	b.n	8010f60 <__swsetup_r+0x98>
 8010ef8:	0758      	lsls	r0, r3, #29
 8010efa:	d512      	bpl.n	8010f22 <__swsetup_r+0x5a>
 8010efc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010efe:	b141      	cbz	r1, 8010f12 <__swsetup_r+0x4a>
 8010f00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010f04:	4299      	cmp	r1, r3
 8010f06:	d002      	beq.n	8010f0e <__swsetup_r+0x46>
 8010f08:	4628      	mov	r0, r5
 8010f0a:	f7fd fcc5 	bl	800e898 <_free_r>
 8010f0e:	2300      	movs	r3, #0
 8010f10:	6363      	str	r3, [r4, #52]	@ 0x34
 8010f12:	89a3      	ldrh	r3, [r4, #12]
 8010f14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010f18:	81a3      	strh	r3, [r4, #12]
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	6063      	str	r3, [r4, #4]
 8010f1e:	6923      	ldr	r3, [r4, #16]
 8010f20:	6023      	str	r3, [r4, #0]
 8010f22:	89a3      	ldrh	r3, [r4, #12]
 8010f24:	f043 0308 	orr.w	r3, r3, #8
 8010f28:	81a3      	strh	r3, [r4, #12]
 8010f2a:	6923      	ldr	r3, [r4, #16]
 8010f2c:	b94b      	cbnz	r3, 8010f42 <__swsetup_r+0x7a>
 8010f2e:	89a3      	ldrh	r3, [r4, #12]
 8010f30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010f34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010f38:	d003      	beq.n	8010f42 <__swsetup_r+0x7a>
 8010f3a:	4621      	mov	r1, r4
 8010f3c:	4628      	mov	r0, r5
 8010f3e:	f000 f883 	bl	8011048 <__smakebuf_r>
 8010f42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f46:	f013 0201 	ands.w	r2, r3, #1
 8010f4a:	d00a      	beq.n	8010f62 <__swsetup_r+0x9a>
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	60a2      	str	r2, [r4, #8]
 8010f50:	6962      	ldr	r2, [r4, #20]
 8010f52:	4252      	negs	r2, r2
 8010f54:	61a2      	str	r2, [r4, #24]
 8010f56:	6922      	ldr	r2, [r4, #16]
 8010f58:	b942      	cbnz	r2, 8010f6c <__swsetup_r+0xa4>
 8010f5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010f5e:	d1c5      	bne.n	8010eec <__swsetup_r+0x24>
 8010f60:	bd38      	pop	{r3, r4, r5, pc}
 8010f62:	0799      	lsls	r1, r3, #30
 8010f64:	bf58      	it	pl
 8010f66:	6962      	ldrpl	r2, [r4, #20]
 8010f68:	60a2      	str	r2, [r4, #8]
 8010f6a:	e7f4      	b.n	8010f56 <__swsetup_r+0x8e>
 8010f6c:	2000      	movs	r0, #0
 8010f6e:	e7f7      	b.n	8010f60 <__swsetup_r+0x98>
 8010f70:	20000110 	.word	0x20000110

08010f74 <_raise_r>:
 8010f74:	291f      	cmp	r1, #31
 8010f76:	b538      	push	{r3, r4, r5, lr}
 8010f78:	4605      	mov	r5, r0
 8010f7a:	460c      	mov	r4, r1
 8010f7c:	d904      	bls.n	8010f88 <_raise_r+0x14>
 8010f7e:	2316      	movs	r3, #22
 8010f80:	6003      	str	r3, [r0, #0]
 8010f82:	f04f 30ff 	mov.w	r0, #4294967295
 8010f86:	bd38      	pop	{r3, r4, r5, pc}
 8010f88:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010f8a:	b112      	cbz	r2, 8010f92 <_raise_r+0x1e>
 8010f8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010f90:	b94b      	cbnz	r3, 8010fa6 <_raise_r+0x32>
 8010f92:	4628      	mov	r0, r5
 8010f94:	f000 f830 	bl	8010ff8 <_getpid_r>
 8010f98:	4622      	mov	r2, r4
 8010f9a:	4601      	mov	r1, r0
 8010f9c:	4628      	mov	r0, r5
 8010f9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010fa2:	f000 b817 	b.w	8010fd4 <_kill_r>
 8010fa6:	2b01      	cmp	r3, #1
 8010fa8:	d00a      	beq.n	8010fc0 <_raise_r+0x4c>
 8010faa:	1c59      	adds	r1, r3, #1
 8010fac:	d103      	bne.n	8010fb6 <_raise_r+0x42>
 8010fae:	2316      	movs	r3, #22
 8010fb0:	6003      	str	r3, [r0, #0]
 8010fb2:	2001      	movs	r0, #1
 8010fb4:	e7e7      	b.n	8010f86 <_raise_r+0x12>
 8010fb6:	2100      	movs	r1, #0
 8010fb8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010fbc:	4620      	mov	r0, r4
 8010fbe:	4798      	blx	r3
 8010fc0:	2000      	movs	r0, #0
 8010fc2:	e7e0      	b.n	8010f86 <_raise_r+0x12>

08010fc4 <raise>:
 8010fc4:	4b02      	ldr	r3, [pc, #8]	@ (8010fd0 <raise+0xc>)
 8010fc6:	4601      	mov	r1, r0
 8010fc8:	6818      	ldr	r0, [r3, #0]
 8010fca:	f7ff bfd3 	b.w	8010f74 <_raise_r>
 8010fce:	bf00      	nop
 8010fd0:	20000110 	.word	0x20000110

08010fd4 <_kill_r>:
 8010fd4:	b538      	push	{r3, r4, r5, lr}
 8010fd6:	4d07      	ldr	r5, [pc, #28]	@ (8010ff4 <_kill_r+0x20>)
 8010fd8:	2300      	movs	r3, #0
 8010fda:	4604      	mov	r4, r0
 8010fdc:	4608      	mov	r0, r1
 8010fde:	4611      	mov	r1, r2
 8010fe0:	602b      	str	r3, [r5, #0]
 8010fe2:	f7f1 fab8 	bl	8002556 <_kill>
 8010fe6:	1c43      	adds	r3, r0, #1
 8010fe8:	d102      	bne.n	8010ff0 <_kill_r+0x1c>
 8010fea:	682b      	ldr	r3, [r5, #0]
 8010fec:	b103      	cbz	r3, 8010ff0 <_kill_r+0x1c>
 8010fee:	6023      	str	r3, [r4, #0]
 8010ff0:	bd38      	pop	{r3, r4, r5, pc}
 8010ff2:	bf00      	nop
 8010ff4:	200017f8 	.word	0x200017f8

08010ff8 <_getpid_r>:
 8010ff8:	f7f1 baa5 	b.w	8002546 <_getpid>

08010ffc <__swhatbuf_r>:
 8010ffc:	b570      	push	{r4, r5, r6, lr}
 8010ffe:	460c      	mov	r4, r1
 8011000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011004:	2900      	cmp	r1, #0
 8011006:	b096      	sub	sp, #88	@ 0x58
 8011008:	4615      	mov	r5, r2
 801100a:	461e      	mov	r6, r3
 801100c:	da0d      	bge.n	801102a <__swhatbuf_r+0x2e>
 801100e:	89a3      	ldrh	r3, [r4, #12]
 8011010:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011014:	f04f 0100 	mov.w	r1, #0
 8011018:	bf14      	ite	ne
 801101a:	2340      	movne	r3, #64	@ 0x40
 801101c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011020:	2000      	movs	r0, #0
 8011022:	6031      	str	r1, [r6, #0]
 8011024:	602b      	str	r3, [r5, #0]
 8011026:	b016      	add	sp, #88	@ 0x58
 8011028:	bd70      	pop	{r4, r5, r6, pc}
 801102a:	466a      	mov	r2, sp
 801102c:	f000 f848 	bl	80110c0 <_fstat_r>
 8011030:	2800      	cmp	r0, #0
 8011032:	dbec      	blt.n	801100e <__swhatbuf_r+0x12>
 8011034:	9901      	ldr	r1, [sp, #4]
 8011036:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801103a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801103e:	4259      	negs	r1, r3
 8011040:	4159      	adcs	r1, r3
 8011042:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011046:	e7eb      	b.n	8011020 <__swhatbuf_r+0x24>

08011048 <__smakebuf_r>:
 8011048:	898b      	ldrh	r3, [r1, #12]
 801104a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801104c:	079d      	lsls	r5, r3, #30
 801104e:	4606      	mov	r6, r0
 8011050:	460c      	mov	r4, r1
 8011052:	d507      	bpl.n	8011064 <__smakebuf_r+0x1c>
 8011054:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011058:	6023      	str	r3, [r4, #0]
 801105a:	6123      	str	r3, [r4, #16]
 801105c:	2301      	movs	r3, #1
 801105e:	6163      	str	r3, [r4, #20]
 8011060:	b003      	add	sp, #12
 8011062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011064:	ab01      	add	r3, sp, #4
 8011066:	466a      	mov	r2, sp
 8011068:	f7ff ffc8 	bl	8010ffc <__swhatbuf_r>
 801106c:	9f00      	ldr	r7, [sp, #0]
 801106e:	4605      	mov	r5, r0
 8011070:	4639      	mov	r1, r7
 8011072:	4630      	mov	r0, r6
 8011074:	f7fb fd0a 	bl	800ca8c <_malloc_r>
 8011078:	b948      	cbnz	r0, 801108e <__smakebuf_r+0x46>
 801107a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801107e:	059a      	lsls	r2, r3, #22
 8011080:	d4ee      	bmi.n	8011060 <__smakebuf_r+0x18>
 8011082:	f023 0303 	bic.w	r3, r3, #3
 8011086:	f043 0302 	orr.w	r3, r3, #2
 801108a:	81a3      	strh	r3, [r4, #12]
 801108c:	e7e2      	b.n	8011054 <__smakebuf_r+0xc>
 801108e:	89a3      	ldrh	r3, [r4, #12]
 8011090:	6020      	str	r0, [r4, #0]
 8011092:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011096:	81a3      	strh	r3, [r4, #12]
 8011098:	9b01      	ldr	r3, [sp, #4]
 801109a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801109e:	b15b      	cbz	r3, 80110b8 <__smakebuf_r+0x70>
 80110a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80110a4:	4630      	mov	r0, r6
 80110a6:	f000 f81d 	bl	80110e4 <_isatty_r>
 80110aa:	b128      	cbz	r0, 80110b8 <__smakebuf_r+0x70>
 80110ac:	89a3      	ldrh	r3, [r4, #12]
 80110ae:	f023 0303 	bic.w	r3, r3, #3
 80110b2:	f043 0301 	orr.w	r3, r3, #1
 80110b6:	81a3      	strh	r3, [r4, #12]
 80110b8:	89a3      	ldrh	r3, [r4, #12]
 80110ba:	431d      	orrs	r5, r3
 80110bc:	81a5      	strh	r5, [r4, #12]
 80110be:	e7cf      	b.n	8011060 <__smakebuf_r+0x18>

080110c0 <_fstat_r>:
 80110c0:	b538      	push	{r3, r4, r5, lr}
 80110c2:	4d07      	ldr	r5, [pc, #28]	@ (80110e0 <_fstat_r+0x20>)
 80110c4:	2300      	movs	r3, #0
 80110c6:	4604      	mov	r4, r0
 80110c8:	4608      	mov	r0, r1
 80110ca:	4611      	mov	r1, r2
 80110cc:	602b      	str	r3, [r5, #0]
 80110ce:	f7f1 faa2 	bl	8002616 <_fstat>
 80110d2:	1c43      	adds	r3, r0, #1
 80110d4:	d102      	bne.n	80110dc <_fstat_r+0x1c>
 80110d6:	682b      	ldr	r3, [r5, #0]
 80110d8:	b103      	cbz	r3, 80110dc <_fstat_r+0x1c>
 80110da:	6023      	str	r3, [r4, #0]
 80110dc:	bd38      	pop	{r3, r4, r5, pc}
 80110de:	bf00      	nop
 80110e0:	200017f8 	.word	0x200017f8

080110e4 <_isatty_r>:
 80110e4:	b538      	push	{r3, r4, r5, lr}
 80110e6:	4d06      	ldr	r5, [pc, #24]	@ (8011100 <_isatty_r+0x1c>)
 80110e8:	2300      	movs	r3, #0
 80110ea:	4604      	mov	r4, r0
 80110ec:	4608      	mov	r0, r1
 80110ee:	602b      	str	r3, [r5, #0]
 80110f0:	f7f1 faa1 	bl	8002636 <_isatty>
 80110f4:	1c43      	adds	r3, r0, #1
 80110f6:	d102      	bne.n	80110fe <_isatty_r+0x1a>
 80110f8:	682b      	ldr	r3, [r5, #0]
 80110fa:	b103      	cbz	r3, 80110fe <_isatty_r+0x1a>
 80110fc:	6023      	str	r3, [r4, #0]
 80110fe:	bd38      	pop	{r3, r4, r5, pc}
 8011100:	200017f8 	.word	0x200017f8

08011104 <_init>:
 8011104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011106:	bf00      	nop
 8011108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801110a:	bc08      	pop	{r3}
 801110c:	469e      	mov	lr, r3
 801110e:	4770      	bx	lr

08011110 <_fini>:
 8011110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011112:	bf00      	nop
 8011114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011116:	bc08      	pop	{r3}
 8011118:	469e      	mov	lr, r3
 801111a:	4770      	bx	lr
