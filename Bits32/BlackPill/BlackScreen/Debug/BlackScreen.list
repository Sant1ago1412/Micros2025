
BlackScreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013b34  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014a4  08013cd8  08013cd8  00014cd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801517c  0801517c  000172d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801517c  0801517c  0001617c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015184  08015184  000172d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015184  08015184  00016184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015188  08015188  00016188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d4  20000000  0801518c  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019c0  200002d4  08015460  000172d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c94  08015460  00017c94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000172d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b5f4  00000000  00000000  00017304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000465e  00000000  00000000  000328f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001918  00000000  00000000  00036f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000134b  00000000  00000000  00038870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb36  00000000  00000000  00039bbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020951  00000000  00000000  000566f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1df1  00000000  00000000  00077042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118e33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007de8  00000000  00000000  00118e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00120c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d4 	.word	0x200002d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013cbc 	.word	0x08013cbc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d8 	.word	0x200002d8
 80001dc:	08013cbc 	.word	0x08013cbc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <UP_initprotocol>:
int16_t valuem1;
int16_t valuem2;
_eProtocolo estadoProtocolo;
_sDato *datosComLib;

void UP_initprotocol(_sDato *datosCom,uint8_t ringbuff){
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	70fb      	strb	r3, [r7, #3]

		datosCom->bufferRx = malloc(ringbuff);
 800103c:	78fb      	ldrb	r3, [r7, #3]
 800103e:	4618      	mov	r0, r3
 8001040:	f00e fad6 	bl	800f5f0 <malloc>
 8001044:	4603      	mov	r3, r0
 8001046:	461a      	mov	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	609a      	str	r2, [r3, #8]
	    datosCom->bufferTx = malloc(ringbuff);
 800104c:	78fb      	ldrb	r3, [r7, #3]
 800104e:	4618      	mov	r0, r3
 8001050:	f00e face 	bl	800f5f0 <malloc>
 8001054:	4603      	mov	r3, r0
 8001056:	461a      	mov	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	60da      	str	r2, [r3, #12]
	    datosComLib=datosCom;
 800105c:	4a03      	ldr	r2, [pc, #12]	@ (800106c <UP_initprotocol+0x3c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6013      	str	r3, [r2, #0]

}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200002fc 	.word	0x200002fc

08001070 <UP_sendInfo>:

void UP_sendInfo(_eEstadoMEFcmd CMD,uint8_t *bufferAux,uint8_t bytes){
 8001070:	b490      	push	{r4, r7}
 8001072:	b08c      	sub	sp, #48	@ 0x30
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	71fb      	strb	r3, [r7, #7]
 800107c:	4613      	mov	r3, r2
 800107e:	71bb      	strb	r3, [r7, #6]

    uint8_t bufAux[30], indiceAux=0,cks=0,i=0;
 8001080:	2300      	movs	r3, #0
 8001082:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001086:	2300      	movs	r3, #0
 8001088:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800108c:	2300      	movs	r3, #0
 800108e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    bufAux[indiceAux++]='U';
 8001092:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001096:	1c5a      	adds	r2, r3, #1
 8001098:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 800109c:	3330      	adds	r3, #48	@ 0x30
 800109e:	443b      	add	r3, r7
 80010a0:	2255      	movs	r2, #85	@ 0x55
 80010a2:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='N';
 80010a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010aa:	1c5a      	adds	r2, r3, #1
 80010ac:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80010b0:	3330      	adds	r3, #48	@ 0x30
 80010b2:	443b      	add	r3, r7
 80010b4:	224e      	movs	r2, #78	@ 0x4e
 80010b6:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='E';
 80010ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010be:	1c5a      	adds	r2, r3, #1
 80010c0:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80010c4:	3330      	adds	r3, #48	@ 0x30
 80010c6:	443b      	add	r3, r7
 80010c8:	2245      	movs	r2, #69	@ 0x45
 80010ca:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='R';
 80010ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010d2:	1c5a      	adds	r2, r3, #1
 80010d4:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80010d8:	3330      	adds	r3, #48	@ 0x30
 80010da:	443b      	add	r3, r7
 80010dc:	2252      	movs	r2, #82	@ 0x52
 80010de:	f803 2c24 	strb.w	r2, [r3, #-36]

    bufAux[indiceAux++]=bytes+1;
 80010e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80010ec:	4619      	mov	r1, r3
 80010ee:	79bb      	ldrb	r3, [r7, #6]
 80010f0:	3301      	adds	r3, #1
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 80010f8:	443b      	add	r3, r7
 80010fa:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]=':';
 80010fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001102:	1c5a      	adds	r2, r3, #1
 8001104:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8001108:	3330      	adds	r3, #48	@ 0x30
 800110a:	443b      	add	r3, r7
 800110c:	223a      	movs	r2, #58	@ 0x3a
 800110e:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]=CMD;
 8001112:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 800111c:	3330      	adds	r3, #48	@ 0x30
 800111e:	443b      	add	r3, r7
 8001120:	79fa      	ldrb	r2, [r7, #7]
 8001122:	f803 2c24 	strb.w	r2, [r3, #-36]

    for(i=0; i<bytes-1; i++)
 8001126:	2300      	movs	r3, #0
 8001128:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800112c:	e012      	b.n	8001154 <UP_sendInfo+0xe4>
        bufAux[indiceAux++] = bufferAux[i];
 800112e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	441a      	add	r2, r3
 8001136:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800113a:	1c59      	adds	r1, r3, #1
 800113c:	f887 102f 	strb.w	r1, [r7, #47]	@ 0x2f
 8001140:	7812      	ldrb	r2, [r2, #0]
 8001142:	3330      	adds	r3, #48	@ 0x30
 8001144:	443b      	add	r3, r7
 8001146:	f803 2c24 	strb.w	r2, [r3, #-36]
    for(i=0; i<bytes-1; i++)
 800114a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800114e:	3301      	adds	r3, #1
 8001150:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8001154:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8001158:	79bb      	ldrb	r3, [r7, #6]
 800115a:	3b01      	subs	r3, #1
 800115c:	429a      	cmp	r2, r3
 800115e:	dbe6      	blt.n	800112e <UP_sendInfo+0xbe>

    cks=0;
 8001160:	2300      	movs	r3, #0
 8001162:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    for(i=0 ;i<indiceAux;i++){
 8001166:	2300      	movs	r3, #0
 8001168:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800116c:	e022      	b.n	80011b4 <UP_sendInfo+0x144>
        cks^= bufAux[i];
 800116e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001172:	3330      	adds	r3, #48	@ 0x30
 8001174:	443b      	add	r3, r7
 8001176:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 800117a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800117e:	4053      	eors	r3, r2
 8001180:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        datosComLib->bufferTx[datosComLib->indexWriteTx++]=bufAux[i];
 8001184:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8001188:	4b19      	ldr	r3, [pc, #100]	@ (80011f0 <UP_sendInfo+0x180>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	68d8      	ldr	r0, [r3, #12]
 800118e:	4b18      	ldr	r3, [pc, #96]	@ (80011f0 <UP_sendInfo+0x180>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	795a      	ldrb	r2, [r3, #5]
 8001194:	1c54      	adds	r4, r2, #1
 8001196:	b2e4      	uxtb	r4, r4
 8001198:	715c      	strb	r4, [r3, #5]
 800119a:	4613      	mov	r3, r2
 800119c:	4403      	add	r3, r0
 800119e:	f101 0230 	add.w	r2, r1, #48	@ 0x30
 80011a2:	443a      	add	r2, r7
 80011a4:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 80011a8:	701a      	strb	r2, [r3, #0]
    for(i=0 ;i<indiceAux;i++){
 80011aa:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80011ae:	3301      	adds	r3, #1
 80011b0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80011b4:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80011b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011bc:	429a      	cmp	r2, r3
 80011be:	d3d6      	bcc.n	800116e <UP_sendInfo+0xfe>
    }
     datosComLib->bufferTx[datosComLib->indexWriteTx++]=cks;
 80011c0:	4b0b      	ldr	r3, [pc, #44]	@ (80011f0 <UP_sendInfo+0x180>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	68d9      	ldr	r1, [r3, #12]
 80011c6:	4b0a      	ldr	r3, [pc, #40]	@ (80011f0 <UP_sendInfo+0x180>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	795a      	ldrb	r2, [r3, #5]
 80011cc:	1c50      	adds	r0, r2, #1
 80011ce:	b2c0      	uxtb	r0, r0
 80011d0:	7158      	strb	r0, [r3, #5]
 80011d2:	4613      	mov	r3, r2
 80011d4:	440b      	add	r3, r1
 80011d6:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80011da:	701a      	strb	r2, [r3, #0]

     datosComLib->bytesTosend=indiceAux;
 80011dc:	4b04      	ldr	r3, [pc, #16]	@ (80011f0 <UP_sendInfo+0x180>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80011e4:	741a      	strb	r2, [r3, #16]

}
 80011e6:	bf00      	nop
 80011e8:	3730      	adds	r7, #48	@ 0x30
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc90      	pop	{r4, r7}
 80011ee:	4770      	bx	lr
 80011f0:	200002fc 	.word	0x200002fc

080011f4 <UP_decodeHeader>:

void UP_decodeHeader(_sDato *datosComLib){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

    static uint8_t nBytes=0;

    uint8_t indexWriteRxCopy=datosComLib->indexWriteRx;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	78db      	ldrb	r3, [r3, #3]
 8001200:	73fb      	strb	r3, [r7, #15]

    while (datosComLib->indexReadRx!=indexWriteRxCopy)
 8001202:	e0e2      	b.n	80013ca <UP_decodeHeader+0x1d6>
    {
        switch (estadoProtocolo) {
 8001204:	4b76      	ldr	r3, [pc, #472]	@ (80013e0 <UP_decodeHeader+0x1ec>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b06      	cmp	r3, #6
 800120a:	f200 80d7 	bhi.w	80013bc <UP_decodeHeader+0x1c8>
 800120e:	a201      	add	r2, pc, #4	@ (adr r2, 8001214 <UP_decodeHeader+0x20>)
 8001210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001214:	08001231 	.word	0x08001231
 8001218:	08001259 	.word	0x08001259
 800121c:	0800128d 	.word	0x0800128d
 8001220:	080012c1 	.word	0x080012c1
 8001224:	080012f5 	.word	0x080012f5
 8001228:	0800131d 	.word	0x0800131d
 800122c:	0800135f 	.word	0x0800135f
            case START:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='U'){
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	791b      	ldrb	r3, [r3, #4]
 8001238:	1c59      	adds	r1, r3, #1
 800123a:	b2c8      	uxtb	r0, r1
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	7108      	strb	r0, [r1, #4]
 8001240:	4413      	add	r3, r2
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b55      	cmp	r3, #85	@ 0x55
 8001246:	f040 80bd 	bne.w	80013c4 <UP_decodeHeader+0x1d0>
                    estadoProtocolo=HEADER_1;
 800124a:	4b65      	ldr	r3, [pc, #404]	@ (80013e0 <UP_decodeHeader+0x1ec>)
 800124c:	2201      	movs	r2, #1
 800124e:	701a      	strb	r2, [r3, #0]
                    datosComLib->cheksumRx=0;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	709a      	strb	r2, [r3, #2]
                }
                break;
 8001256:	e0b5      	b.n	80013c4 <UP_decodeHeader+0x1d0>
            case HEADER_1:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='N')
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	791b      	ldrb	r3, [r3, #4]
 8001260:	1c59      	adds	r1, r3, #1
 8001262:	b2c8      	uxtb	r0, r1
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	7108      	strb	r0, [r1, #4]
 8001268:	4413      	add	r3, r2
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b4e      	cmp	r3, #78	@ 0x4e
 800126e:	d103      	bne.n	8001278 <UP_decodeHeader+0x84>
                   estadoProtocolo=HEADER_2;
 8001270:	4b5b      	ldr	r3, [pc, #364]	@ (80013e0 <UP_decodeHeader+0x1ec>)
 8001272:	2202      	movs	r2, #2
 8001274:	701a      	strb	r2, [r3, #0]
                else{
                    datosComLib->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 8001276:	e0a8      	b.n	80013ca <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	791b      	ldrb	r3, [r3, #4]
 800127c:	3b01      	subs	r3, #1
 800127e:	b2da      	uxtb	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 8001284:	4b56      	ldr	r3, [pc, #344]	@ (80013e0 <UP_decodeHeader+0x1ec>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
                break;
 800128a:	e09e      	b.n	80013ca <UP_decodeHeader+0x1d6>
            case HEADER_2:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='E')
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	791b      	ldrb	r3, [r3, #4]
 8001294:	1c59      	adds	r1, r3, #1
 8001296:	b2c8      	uxtb	r0, r1
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	7108      	strb	r0, [r1, #4]
 800129c:	4413      	add	r3, r2
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b45      	cmp	r3, #69	@ 0x45
 80012a2:	d103      	bne.n	80012ac <UP_decodeHeader+0xb8>
                    estadoProtocolo=HEADER_3;
 80012a4:	4b4e      	ldr	r3, [pc, #312]	@ (80013e0 <UP_decodeHeader+0x1ec>)
 80012a6:	2203      	movs	r2, #3
 80012a8:	701a      	strb	r2, [r3, #0]
                else{
                    datosComLib->indexReadRx--;
                   estadoProtocolo=START;
                }
                break;
 80012aa:	e08e      	b.n	80013ca <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	791b      	ldrb	r3, [r3, #4]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	711a      	strb	r2, [r3, #4]
                   estadoProtocolo=START;
 80012b8:	4b49      	ldr	r3, [pc, #292]	@ (80013e0 <UP_decodeHeader+0x1ec>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
                break;
 80012be:	e084      	b.n	80013ca <UP_decodeHeader+0x1d6>
			case HEADER_3:
				if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='R')
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	791b      	ldrb	r3, [r3, #4]
 80012c8:	1c59      	adds	r1, r3, #1
 80012ca:	b2c8      	uxtb	r0, r1
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	7108      	strb	r0, [r1, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b52      	cmp	r3, #82	@ 0x52
 80012d6:	d103      	bne.n	80012e0 <UP_decodeHeader+0xec>
					estadoProtocolo=NBYTES;
 80012d8:	4b41      	ldr	r3, [pc, #260]	@ (80013e0 <UP_decodeHeader+0x1ec>)
 80012da:	2204      	movs	r2, #4
 80012dc:	701a      	strb	r2, [r3, #0]
				else{
					datosComLib->indexReadRx--;
				    estadoProtocolo=START;
				}
            break;
 80012de:	e074      	b.n	80013ca <UP_decodeHeader+0x1d6>
					datosComLib->indexReadRx--;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	791b      	ldrb	r3, [r3, #4]
 80012e4:	3b01      	subs	r3, #1
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	711a      	strb	r2, [r3, #4]
				    estadoProtocolo=START;
 80012ec:	4b3c      	ldr	r3, [pc, #240]	@ (80013e0 <UP_decodeHeader+0x1ec>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
            break;
 80012f2:	e06a      	b.n	80013ca <UP_decodeHeader+0x1d6>
            case NBYTES:
                datosComLib->indexStart=datosComLib->indexReadRx;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	791a      	ldrb	r2, [r3, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	705a      	strb	r2, [r3, #1]
                nBytes=datosComLib->bufferRx[datosComLib->indexReadRx++];
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	791b      	ldrb	r3, [r3, #4]
 8001304:	1c59      	adds	r1, r3, #1
 8001306:	b2c8      	uxtb	r0, r1
 8001308:	6879      	ldr	r1, [r7, #4]
 800130a:	7108      	strb	r0, [r1, #4]
 800130c:	4413      	add	r3, r2
 800130e:	781a      	ldrb	r2, [r3, #0]
 8001310:	4b34      	ldr	r3, [pc, #208]	@ (80013e4 <UP_decodeHeader+0x1f0>)
 8001312:	701a      	strb	r2, [r3, #0]
                estadoProtocolo=TOKEN;
 8001314:	4b32      	ldr	r3, [pc, #200]	@ (80013e0 <UP_decodeHeader+0x1ec>)
 8001316:	2205      	movs	r2, #5
 8001318:	701a      	strb	r2, [r3, #0]
                break;
 800131a:	e056      	b.n	80013ca <UP_decodeHeader+0x1d6>
            case TOKEN:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]==':'){
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	791b      	ldrb	r3, [r3, #4]
 8001324:	1c59      	adds	r1, r3, #1
 8001326:	b2c8      	uxtb	r0, r1
 8001328:	6879      	ldr	r1, [r7, #4]
 800132a:	7108      	strb	r0, [r1, #4]
 800132c:	4413      	add	r3, r2
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b3a      	cmp	r3, #58	@ 0x3a
 8001332:	d10a      	bne.n	800134a <UP_decodeHeader+0x156>
                   estadoProtocolo=PAYLOAD;
 8001334:	4b2a      	ldr	r3, [pc, #168]	@ (80013e0 <UP_decodeHeader+0x1ec>)
 8001336:	2206      	movs	r2, #6
 8001338:	701a      	strb	r2, [r3, #0]
                    datosComLib->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 800133a:	4b2a      	ldr	r3, [pc, #168]	@ (80013e4 <UP_decodeHeader+0x1f0>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8001342:	b2da      	uxtb	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	709a      	strb	r2, [r3, #2]
                }
                else{
                    datosComLib->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 8001348:	e03f      	b.n	80013ca <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	791b      	ldrb	r3, [r3, #4]
 800134e:	3b01      	subs	r3, #1
 8001350:	b2da      	uxtb	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 8001356:	4b22      	ldr	r3, [pc, #136]	@ (80013e0 <UP_decodeHeader+0x1ec>)
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
                break;
 800135c:	e035      	b.n	80013ca <UP_decodeHeader+0x1d6>
            case PAYLOAD:
                if (nBytes>1){
 800135e:	4b21      	ldr	r3, [pc, #132]	@ (80013e4 <UP_decodeHeader+0x1f0>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d90f      	bls.n	8001386 <UP_decodeHeader+0x192>
                    datosComLib->cheksumRx ^= datosComLib->bufferRx[datosComLib->indexReadRx++];
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	791b      	ldrb	r3, [r3, #4]
 800136e:	1c59      	adds	r1, r3, #1
 8001370:	b2c8      	uxtb	r0, r1
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	7108      	strb	r0, [r1, #4]
 8001376:	4413      	add	r3, r2
 8001378:	781a      	ldrb	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	789b      	ldrb	r3, [r3, #2]
 800137e:	4053      	eors	r3, r2
 8001380:	b2da      	uxtb	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	709a      	strb	r2, [r3, #2]
                }
                nBytes--;
 8001386:	4b17      	ldr	r3, [pc, #92]	@ (80013e4 <UP_decodeHeader+0x1f0>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	3b01      	subs	r3, #1
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <UP_decodeHeader+0x1f0>)
 8001390:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){
 8001392:	4b14      	ldr	r3, [pc, #80]	@ (80013e4 <UP_decodeHeader+0x1f0>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d116      	bne.n	80013c8 <UP_decodeHeader+0x1d4>
                    estadoProtocolo=START;
 800139a:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <UP_decodeHeader+0x1ec>)
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
                    if(datosComLib->cheksumRx == datosComLib->bufferRx[datosComLib->indexReadRx]){
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	789a      	ldrb	r2, [r3, #2]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	7909      	ldrb	r1, [r1, #4]
 80013ac:	440b      	add	r3, r1
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d109      	bne.n	80013c8 <UP_decodeHeader+0x1d4>
                    	UP_decodeData(datosComLib);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f000 f817 	bl	80013e8 <UP_decodeData>
                    }
                }

                break;
 80013ba:	e005      	b.n	80013c8 <UP_decodeHeader+0x1d4>
            default:
                estadoProtocolo=START;
 80013bc:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <UP_decodeHeader+0x1ec>)
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
                break;
 80013c2:	e002      	b.n	80013ca <UP_decodeHeader+0x1d6>
                break;
 80013c4:	bf00      	nop
 80013c6:	e000      	b.n	80013ca <UP_decodeHeader+0x1d6>
                break;
 80013c8:	bf00      	nop
    while (datosComLib->indexReadRx!=indexWriteRxCopy)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	791b      	ldrb	r3, [r3, #4]
 80013ce:	7bfa      	ldrb	r2, [r7, #15]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	f47f af17 	bne.w	8001204 <UP_decodeHeader+0x10>
        }
    }
}
 80013d6:	bf00      	nop
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	200002f8 	.word	0x200002f8
 80013e4:	20000300 	.word	0x20000300

080013e8 <UP_decodeData>:

void UP_decodeData(_sDato *datosComLib){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]

    uint8_t bufAux[20], indiceAux=0,bytes=0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	77bb      	strb	r3, [r7, #30]
 80013f4:	2300      	movs	r3, #0
 80013f6:	77fb      	strb	r3, [r7, #31]

    switch (datosComLib->bufferRx[datosComLib->indexStart+2])//CMD EN LA POSICION 2
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	785b      	ldrb	r3, [r3, #1]
 8001400:	3302      	adds	r3, #2
 8001402:	4413      	add	r3, r2
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	3bf0      	subs	r3, #240	@ 0xf0
 8001408:	2b03      	cmp	r3, #3
 800140a:	d861      	bhi.n	80014d0 <UP_decodeData+0xe8>
 800140c:	a201      	add	r2, pc, #4	@ (adr r2, 8001414 <UP_decodeData+0x2c>)
 800140e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001412:	bf00      	nop
 8001414:	08001425 	.word	0x08001425
 8001418:	0800143b 	.word	0x0800143b
 800141c:	08001451 	.word	0x08001451
 8001420:	08001463 	.word	0x08001463
    {
    case ALIVE:

        bufAux[indiceAux++]=ALIVE;
 8001424:	7fbb      	ldrb	r3, [r7, #30]
 8001426:	1c5a      	adds	r2, r3, #1
 8001428:	77ba      	strb	r2, [r7, #30]
 800142a:	3320      	adds	r3, #32
 800142c:	443b      	add	r3, r7
 800142e:	22f0      	movs	r2, #240	@ 0xf0
 8001430:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;//aca debo darle CMD+CKS+PAYLOAD
 8001434:	2302      	movs	r3, #2
 8001436:	77fb      	strb	r3, [r7, #31]

    break;
 8001438:	e055      	b.n	80014e6 <UP_decodeData+0xfe>
    case FIRMWARE:

		bufAux[indiceAux++]=FIRMWARE;
 800143a:	7fbb      	ldrb	r3, [r7, #30]
 800143c:	1c5a      	adds	r2, r3, #1
 800143e:	77ba      	strb	r2, [r7, #30]
 8001440:	3320      	adds	r3, #32
 8001442:	443b      	add	r3, r7
 8001444:	22f1      	movs	r2, #241	@ 0xf1
 8001446:	f803 2c18 	strb.w	r2, [r3, #-24]
		bytes=0x02;
 800144a:	2302      	movs	r3, #2
 800144c:	77fb      	strb	r3, [r7, #31]

    break;
 800144e:	e04a      	b.n	80014e6 <UP_decodeData+0xfe>

    case TEXT:

		bufAux[indiceAux++]=TEXT;
 8001450:	7fbb      	ldrb	r3, [r7, #30]
 8001452:	1c5a      	adds	r2, r3, #1
 8001454:	77ba      	strb	r2, [r7, #30]
 8001456:	3320      	adds	r3, #32
 8001458:	443b      	add	r3, r7
 800145a:	22f2      	movs	r2, #242	@ 0xf2
 800145c:	f803 2c18 	strb.w	r2, [r3, #-24]
//		bytes=;

    break;
 8001460:	e041      	b.n	80014e6 <UP_decodeData+0xfe>

    case ENGINES:
    	bufAux[indiceAux++]=ENGINES;
 8001462:	7fbb      	ldrb	r3, [r7, #30]
 8001464:	1c5a      	adds	r2, r3, #1
 8001466:	77ba      	strb	r2, [r7, #30]
 8001468:	3320      	adds	r3, #32
 800146a:	443b      	add	r3, r7
 800146c:	22f3      	movs	r2, #243	@ 0xf3
 800146e:	f803 2c18 	strb.w	r2, [r3, #-24]

    	casts.u8[0]=datosComLib->bufferRx[datosComLib->indexStart+3];
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	785b      	ldrb	r3, [r3, #1]
 800147a:	3303      	adds	r3, #3
 800147c:	4413      	add	r3, r2
 800147e:	781a      	ldrb	r2, [r3, #0]
 8001480:	4b20      	ldr	r3, [pc, #128]	@ (8001504 <UP_decodeData+0x11c>)
 8001482:	701a      	strb	r2, [r3, #0]
    	casts.u8[1]=datosComLib->bufferRx[datosComLib->indexStart+4];
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	785b      	ldrb	r3, [r3, #1]
 800148c:	3304      	adds	r3, #4
 800148e:	4413      	add	r3, r2
 8001490:	781a      	ldrb	r2, [r3, #0]
 8001492:	4b1c      	ldr	r3, [pc, #112]	@ (8001504 <UP_decodeData+0x11c>)
 8001494:	705a      	strb	r2, [r3, #1]
    	casts.u8[2]=datosComLib->bufferRx[datosComLib->indexStart+3];
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	785b      	ldrb	r3, [r3, #1]
 800149e:	3303      	adds	r3, #3
 80014a0:	4413      	add	r3, r2
 80014a2:	781a      	ldrb	r2, [r3, #0]
 80014a4:	4b17      	ldr	r3, [pc, #92]	@ (8001504 <UP_decodeData+0x11c>)
 80014a6:	709a      	strb	r2, [r3, #2]
        casts.u8[3]=datosComLib->bufferRx[datosComLib->indexStart+4];
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	785b      	ldrb	r3, [r3, #1]
 80014b0:	3304      	adds	r3, #4
 80014b2:	4413      	add	r3, r2
 80014b4:	781a      	ldrb	r2, [r3, #0]
 80014b6:	4b13      	ldr	r3, [pc, #76]	@ (8001504 <UP_decodeData+0x11c>)
 80014b8:	70da      	strb	r2, [r3, #3]
    	valuem1 = casts.i16[0]; //ver aca que pasa para recuperar el valor de la velocidad
 80014ba:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <UP_decodeData+0x11c>)
 80014bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80014c0:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <UP_decodeData+0x120>)
 80014c2:	801a      	strh	r2, [r3, #0]
    	valuem2 = casts.i16[1];
 80014c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001504 <UP_decodeData+0x11c>)
 80014c6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80014ca:	4b10      	ldr	r3, [pc, #64]	@ (800150c <UP_decodeData+0x124>)
 80014cc:	801a      	strh	r2, [r3, #0]
    break;
 80014ce:	e00a      	b.n	80014e6 <UP_decodeData+0xfe>

    default:

        bufAux[indiceAux++]=0xFF;
 80014d0:	7fbb      	ldrb	r3, [r7, #30]
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	77ba      	strb	r2, [r7, #30]
 80014d6:	3320      	adds	r3, #32
 80014d8:	443b      	add	r3, r7
 80014da:	22ff      	movs	r2, #255	@ 0xff
 80014dc:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;
 80014e0:	2302      	movs	r3, #2
 80014e2:	77fb      	strb	r3, [r7, #31]

    break;
 80014e4:	bf00      	nop
    }

    UP_sendInfo(datosComLib->indexStart+2,bufAux,bytes);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	785b      	ldrb	r3, [r3, #1]
 80014ea:	3302      	adds	r3, #2
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	7ffa      	ldrb	r2, [r7, #31]
 80014f0:	f107 0108 	add.w	r1, r7, #8
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fdbb 	bl	8001070 <UP_sendInfo>
}
 80014fa:	bf00      	nop
 80014fc:	3720      	adds	r7, #32
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200002f0 	.word	0x200002f0
 8001508:	200002f4 	.word	0x200002f4
 800150c:	200002f6 	.word	0x200002f6

08001510 <UP_datafromUSB>:

void UP_datafromUSB(uint8_t *buf, uint16_t length) {
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	807b      	strh	r3, [r7, #2]

  uint16_t i;

  for (i = 0; i < length; i++) {
 800151c:	2300      	movs	r3, #0
 800151e:	81fb      	strh	r3, [r7, #14]
 8001520:	e016      	b.n	8001550 <UP_datafromUSB+0x40>
	datosComLib->bufferRx[datosComLib->indexWriteRx] = buf[i];
 8001522:	89fb      	ldrh	r3, [r7, #14]
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	441a      	add	r2, r3
 8001528:	4b0f      	ldr	r3, [pc, #60]	@ (8001568 <UP_datafromUSB+0x58>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	490e      	ldr	r1, [pc, #56]	@ (8001568 <UP_datafromUSB+0x58>)
 8001530:	6809      	ldr	r1, [r1, #0]
 8001532:	78c9      	ldrb	r1, [r1, #3]
 8001534:	b2c9      	uxtb	r1, r1
 8001536:	440b      	add	r3, r1
 8001538:	7812      	ldrb	r2, [r2, #0]
 800153a:	701a      	strb	r2, [r3, #0]
	datosComLib->indexWriteRx++;
 800153c:	4b0a      	ldr	r3, [pc, #40]	@ (8001568 <UP_datafromUSB+0x58>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	78da      	ldrb	r2, [r3, #3]
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	3201      	adds	r2, #1
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < length; i++) {
 800154a:	89fb      	ldrh	r3, [r7, #14]
 800154c:	3301      	adds	r3, #1
 800154e:	81fb      	strh	r3, [r7, #14]
 8001550:	89fa      	ldrh	r2, [r7, #14]
 8001552:	887b      	ldrh	r3, [r7, #2]
 8001554:	429a      	cmp	r2, r3
 8001556:	d3e4      	bcc.n	8001522 <UP_datafromUSB+0x12>
  }
}
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	200002fc 	.word	0x200002fc

0800156c <ret_eng_Values>:

int16_t ret_eng_Values(uint8_t eng){
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
	if(eng)
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <ret_eng_Values+0x18>
		return valuem1;
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <ret_eng_Values+0x2c>)
 800157e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001582:	e002      	b.n	800158a <ret_eng_Values+0x1e>
	else
		return valuem2;
 8001584:	4b05      	ldr	r3, [pc, #20]	@ (800159c <ret_eng_Values+0x30>)
 8001586:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	200002f4 	.word	0x200002f4
 800159c:	200002f6 	.word	0x200002f6

080015a0 <en_InitENG>:
 *      Author: Baccon
 */
#include "engines.h"
#include "stdlib.h"

void en_InitENG(_sEng *engines,uint16_t maxSpeed){
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	807b      	strh	r3, [r7, #2]

	engines->estado=FREE;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2202      	movs	r2, #2
 80015b0:	709a      	strb	r2, [r3, #2]
	engines->speed=0;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	801a      	strh	r2, [r3, #0]
	engines->maxSpeed=maxSpeed;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	887a      	ldrh	r2, [r7, #2]
 80015bc:	809a      	strh	r2, [r3, #4]

}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <en_HandlerENG>:

void en_HandlerENG(_sEng *engines,int32_t newspeed,uint8_t freno){
 80015ca:	b480      	push	{r7}
 80015cc:	b085      	sub	sp, #20
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	60f8      	str	r0, [r7, #12]
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	4613      	mov	r3, r2
 80015d6:	71fb      	strb	r3, [r7, #7]

	if(newspeed==engines->speed)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d031      	beq.n	8001648 <en_HandlerENG+0x7e>
		return;
	if(freno==1){
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d103      	bne.n	80015f2 <en_HandlerENG+0x28>
		engines->estado=BRAKE;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2203      	movs	r2, #3
 80015ee:	709a      	strb	r2, [r3, #2]
		return;
 80015f0:	e02b      	b.n	800164a <en_HandlerENG+0x80>
	}
	if(newspeed>engines->maxSpeed)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	889b      	ldrh	r3, [r3, #4]
 80015f6:	461a      	mov	r2, r3
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	4293      	cmp	r3, r2
 80015fc:	dd02      	ble.n	8001604 <en_HandlerENG+0x3a>
		newspeed=engines->maxSpeed;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	889b      	ldrh	r3, [r3, #4]
 8001602:	60bb      	str	r3, [r7, #8]
	//agregar el caso anterior para negativo
	if(newspeed<0){
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	2b00      	cmp	r3, #0
 8001608:	da09      	bge.n	800161e <en_HandlerENG+0x54>
		engines->estado= BACK;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2201      	movs	r2, #1
 800160e:	709a      	strb	r2, [r3, #2]
		engines->speed= -newspeed;
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	b29b      	uxth	r3, r3
 8001614:	425b      	negs	r3, r3
 8001616:	b29a      	uxth	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	801a      	strh	r2, [r3, #0]
 800161c:	e015      	b.n	800164a <en_HandlerENG+0x80>
	}else if(newspeed>0){
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	2b00      	cmp	r3, #0
 8001622:	dd07      	ble.n	8001634 <en_HandlerENG+0x6a>
		engines->estado= FRONT;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2200      	movs	r2, #0
 8001628:	709a      	strb	r2, [r3, #2]
		engines->speed= newspeed;
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	b29a      	uxth	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	801a      	strh	r2, [r3, #0]
 8001632:	e00a      	b.n	800164a <en_HandlerENG+0x80>
	}else if(newspeed==0){
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d107      	bne.n	800164a <en_HandlerENG+0x80>
		engines->estado= FREE;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2202      	movs	r2, #2
 800163e:	709a      	strb	r2, [r3, #2]
		engines->speed= 0;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2200      	movs	r2, #0
 8001644:	801a      	strh	r2, [r3, #0]
 8001646:	e000      	b.n	800164a <en_HandlerENG+0x80>
		return;
 8001648:	bf00      	nop
	}

}
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <HAL_ADC_ConvCpltCallback>:
void I2C_1_Abstract_Mem_Read_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	NEWADCVALUES=TRUE;
 800165c:	4a05      	ldr	r2, [pc, #20]	@ (8001674 <HAL_ADC_ConvCpltCallback+0x20>)
 800165e:	7813      	ldrb	r3, [r2, #0]
 8001660:	f043 0320 	orr.w	r3, r3, #32
 8001664:	7013      	strb	r3, [r2, #0]
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	200005f4 	.word	0x200005f4

08001678 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM11) {
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a12      	ldr	r2, [pc, #72]	@ (80016d0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d104      	bne.n	8001694 <HAL_TIM_PeriodElapsedCallback+0x1c>
		IS10MS = TRUE;
 800168a:	4a12      	ldr	r2, [pc, #72]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800168c:	7813      	ldrb	r3, [r2, #0]
 800168e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001692:	7013      	strb	r3, [r2, #0]
	}

	if (htim->Instance == TIM10) {
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a0f      	ldr	r2, [pc, #60]	@ (80016d8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d109      	bne.n	80016b2 <HAL_TIM_PeriodElapsedCallback+0x3a>
		MPU6050_Read_All(&mpuValues);
 800169e:	480f      	ldr	r0, [pc, #60]	@ (80016dc <HAL_TIM_PeriodElapsedCallback+0x64>)
 80016a0:	f000 ffd6 	bl	8002650 <MPU6050_Read_All>
		mpuValues.DMAREADY=1;
 80016a4:	4b0d      	ldr	r3, [pc, #52]	@ (80016dc <HAL_TIM_PeriodElapsedCallback+0x64>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		SSD1306_DMAREADY(0);
 80016ac:	2000      	movs	r0, #0
 80016ae:	f001 fdc3 	bl	8003238 <SSD1306_DMAREADY>
	}
	if(htim->Instance == TIM9){
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a0a      	ldr	r2, [pc, #40]	@ (80016e0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d104      	bne.n	80016c6 <HAL_TIM_PeriodElapsedCallback+0x4e>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcValues.raw_Data, 8);
 80016bc:	2208      	movs	r2, #8
 80016be:	4909      	ldr	r1, [pc, #36]	@ (80016e4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80016c0:	4809      	ldr	r0, [pc, #36]	@ (80016e8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80016c2:	f002 fba7 	bl	8003e14 <HAL_ADC_Start_DMA>
	}
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40014800 	.word	0x40014800
 80016d4:	200005f4 	.word	0x200005f4
 80016d8:	40014400 	.word	0x40014400
 80016dc:	20000608 	.word	0x20000608
 80016e0:	40014000 	.word	0x40014000
 80016e4:	200006d4 	.word	0x200006d4
 80016e8:	20000304 	.word	0x20000304

080016ec <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress==SSD1306_I2C_ADDR){
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f8:	2b78      	cmp	r3, #120	@ 0x78
 80016fa:	d102      	bne.n	8001702 <HAL_I2C_MemTxCpltCallback+0x16>
		SSD1306_DMAREADY(1);
 80016fc:	2001      	movs	r0, #1
 80016fe:	f001 fd9b 	bl	8003238 <SSD1306_DMAREADY>
	}
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress==MPU6050_ADDR){
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001718:	2bd0      	cmp	r3, #208	@ 0xd0
 800171a:	d15c      	bne.n	80017d6 <HAL_I2C_MemRxCpltCallback+0xca>

	    mpuValues.MAF.rawData[0] = (int16_t) (mpuValues.Rec_Data[0] << 8 | mpuValues.Rec_Data[1]);
 800171c:	4b30      	ldr	r3, [pc, #192]	@ (80017e0 <HAL_I2C_MemRxCpltCallback+0xd4>)
 800171e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001722:	b21b      	sxth	r3, r3
 8001724:	021b      	lsls	r3, r3, #8
 8001726:	b21a      	sxth	r2, r3
 8001728:	4b2d      	ldr	r3, [pc, #180]	@ (80017e0 <HAL_I2C_MemRxCpltCallback+0xd4>)
 800172a:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800172e:	b21b      	sxth	r3, r3
 8001730:	4313      	orrs	r3, r2
 8001732:	b21a      	sxth	r2, r3
 8001734:	4b2a      	ldr	r3, [pc, #168]	@ (80017e0 <HAL_I2C_MemRxCpltCallback+0xd4>)
 8001736:	871a      	strh	r2, [r3, #56]	@ 0x38
	    mpuValues.MAF.rawData[1] = (int16_t) (mpuValues.Rec_Data[2] << 8 | mpuValues.Rec_Data[3]);
 8001738:	4b29      	ldr	r3, [pc, #164]	@ (80017e0 <HAL_I2C_MemRxCpltCallback+0xd4>)
 800173a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800173e:	b21b      	sxth	r3, r3
 8001740:	021b      	lsls	r3, r3, #8
 8001742:	b21a      	sxth	r2, r3
 8001744:	4b26      	ldr	r3, [pc, #152]	@ (80017e0 <HAL_I2C_MemRxCpltCallback+0xd4>)
 8001746:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800174a:	b21b      	sxth	r3, r3
 800174c:	4313      	orrs	r3, r2
 800174e:	b21a      	sxth	r2, r3
 8001750:	4b23      	ldr	r3, [pc, #140]	@ (80017e0 <HAL_I2C_MemRxCpltCallback+0xd4>)
 8001752:	875a      	strh	r2, [r3, #58]	@ 0x3a
	    mpuValues.MAF.rawData[2] = (int16_t) (mpuValues.Rec_Data[4] << 8 | mpuValues.Rec_Data[5]);
 8001754:	4b22      	ldr	r3, [pc, #136]	@ (80017e0 <HAL_I2C_MemRxCpltCallback+0xd4>)
 8001756:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800175a:	b21b      	sxth	r3, r3
 800175c:	021b      	lsls	r3, r3, #8
 800175e:	b21a      	sxth	r2, r3
 8001760:	4b1f      	ldr	r3, [pc, #124]	@ (80017e0 <HAL_I2C_MemRxCpltCallback+0xd4>)
 8001762:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001766:	b21b      	sxth	r3, r3
 8001768:	4313      	orrs	r3, r2
 800176a:	b21a      	sxth	r2, r3
 800176c:	4b1c      	ldr	r3, [pc, #112]	@ (80017e0 <HAL_I2C_MemRxCpltCallback+0xd4>)
 800176e:	879a      	strh	r2, [r3, #60]	@ 0x3c
	    mpuValues.MAF.rawData[3] = (int16_t) (mpuValues.Rec_Data[8] << 8 | mpuValues.Rec_Data[9]);
 8001770:	4b1b      	ldr	r3, [pc, #108]	@ (80017e0 <HAL_I2C_MemRxCpltCallback+0xd4>)
 8001772:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001776:	b21b      	sxth	r3, r3
 8001778:	021b      	lsls	r3, r3, #8
 800177a:	b21a      	sxth	r2, r3
 800177c:	4b18      	ldr	r3, [pc, #96]	@ (80017e0 <HAL_I2C_MemRxCpltCallback+0xd4>)
 800177e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001782:	b21b      	sxth	r3, r3
 8001784:	4313      	orrs	r3, r2
 8001786:	b21a      	sxth	r2, r3
 8001788:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <HAL_I2C_MemRxCpltCallback+0xd4>)
 800178a:	87da      	strh	r2, [r3, #62]	@ 0x3e
	    mpuValues.MAF.rawData[4] = (int16_t) (mpuValues.Rec_Data[10]<< 8 | mpuValues.Rec_Data[11]);
 800178c:	4b14      	ldr	r3, [pc, #80]	@ (80017e0 <HAL_I2C_MemRxCpltCallback+0xd4>)
 800178e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001792:	b21b      	sxth	r3, r3
 8001794:	021b      	lsls	r3, r3, #8
 8001796:	b21a      	sxth	r2, r3
 8001798:	4b11      	ldr	r3, [pc, #68]	@ (80017e0 <HAL_I2C_MemRxCpltCallback+0xd4>)
 800179a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800179e:	b21b      	sxth	r3, r3
 80017a0:	4313      	orrs	r3, r2
 80017a2:	b21a      	sxth	r2, r3
 80017a4:	4b0e      	ldr	r3, [pc, #56]	@ (80017e0 <HAL_I2C_MemRxCpltCallback+0xd4>)
 80017a6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	    mpuValues.MAF.rawData[5] = (int16_t) (mpuValues.Rec_Data[12]<< 8 | mpuValues.Rec_Data[13]);
 80017aa:	4b0d      	ldr	r3, [pc, #52]	@ (80017e0 <HAL_I2C_MemRxCpltCallback+0xd4>)
 80017ac:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80017b0:	b21b      	sxth	r3, r3
 80017b2:	021b      	lsls	r3, r3, #8
 80017b4:	b21a      	sxth	r2, r3
 80017b6:	4b0a      	ldr	r3, [pc, #40]	@ (80017e0 <HAL_I2C_MemRxCpltCallback+0xd4>)
 80017b8:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80017bc:	b21b      	sxth	r3, r3
 80017be:	4313      	orrs	r3, r2
 80017c0:	b21a      	sxth	r2, r3
 80017c2:	4b07      	ldr	r3, [pc, #28]	@ (80017e0 <HAL_I2C_MemRxCpltCallback+0xd4>)
 80017c4:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

		mpuValues.MAF.isOn=1;
 80017c8:	4b05      	ldr	r3, [pc, #20]	@ (80017e0 <HAL_I2C_MemRxCpltCallback+0xd4>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
		SSD1306_DMAREADY(1);
 80017d0:	2001      	movs	r0, #1
 80017d2:	f001 fd31 	bl	8003238 <SSD1306_DMAREADY>
	}
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000608 	.word	0x20000608

080017e4 <SSD1306_Task>:

void SSD1306_Task(){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af02      	add	r7, sp, #8

	uint32_t guiaBarras;

	if(SISINIT){
 80017ea:	4b7f      	ldr	r3, [pc, #508]	@ (80019e8 <SSD1306_Task+0x204>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 80f3 	beq.w	80019e0 <SSD1306_Task+0x1fc>
		SSD1306_DrawBitmap(0, 0, MainScreen, 128, 64,WHITE);
 80017fa:	2301      	movs	r3, #1
 80017fc:	9301      	str	r3, [sp, #4]
 80017fe:	2340      	movs	r3, #64	@ 0x40
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	2380      	movs	r3, #128	@ 0x80
 8001804:	4a79      	ldr	r2, [pc, #484]	@ (80019ec <SSD1306_Task+0x208>)
 8001806:	2100      	movs	r1, #0
 8001808:	2000      	movs	r0, #0
 800180a:	f001 f92f 	bl	8002a6c <SSD1306_DrawBitmap>

		sprintf(display, "X:%c%d",(mpuValues.Accel.X_filtered >= 0) ? '+' : '-',abs(mpuValues.Accel.X_filtered));
 800180e:	4b78      	ldr	r3, [pc, #480]	@ (80019f0 <SSD1306_Task+0x20c>)
 8001810:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001814:	2b00      	cmp	r3, #0
 8001816:	db01      	blt.n	800181c <SSD1306_Task+0x38>
 8001818:	222b      	movs	r2, #43	@ 0x2b
 800181a:	e000      	b.n	800181e <SSD1306_Task+0x3a>
 800181c:	222d      	movs	r2, #45	@ 0x2d
 800181e:	4b74      	ldr	r3, [pc, #464]	@ (80019f0 <SSD1306_Task+0x20c>)
 8001820:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001824:	2b00      	cmp	r3, #0
 8001826:	bfb8      	it	lt
 8001828:	425b      	neglt	r3, r3
 800182a:	b29b      	uxth	r3, r3
 800182c:	4971      	ldr	r1, [pc, #452]	@ (80019f4 <SSD1306_Task+0x210>)
 800182e:	4872      	ldr	r0, [pc, #456]	@ (80019f8 <SSD1306_Task+0x214>)
 8001830:	f00e feba 	bl	80105a8 <siprintf>
		SSD1306_GotoXY(43, 20);
 8001834:	2114      	movs	r1, #20
 8001836:	202b      	movs	r0, #43	@ 0x2b
 8001838:	f001 fb0e 	bl	8002e58 <SSD1306_GotoXY>
		SSD1306_Puts(display, &Font_7x10, BLACK);
 800183c:	2200      	movs	r2, #0
 800183e:	496f      	ldr	r1, [pc, #444]	@ (80019fc <SSD1306_Task+0x218>)
 8001840:	486d      	ldr	r0, [pc, #436]	@ (80019f8 <SSD1306_Task+0x214>)
 8001842:	f001 fb9d 	bl	8002f80 <SSD1306_Puts>
		sprintf(display, "Y:%c%d",(mpuValues.Accel.Y_filtered >= 0) ? '+' : '-',abs(mpuValues.Accel.Y_filtered));
 8001846:	4b6a      	ldr	r3, [pc, #424]	@ (80019f0 <SSD1306_Task+0x20c>)
 8001848:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800184c:	2b00      	cmp	r3, #0
 800184e:	db01      	blt.n	8001854 <SSD1306_Task+0x70>
 8001850:	222b      	movs	r2, #43	@ 0x2b
 8001852:	e000      	b.n	8001856 <SSD1306_Task+0x72>
 8001854:	222d      	movs	r2, #45	@ 0x2d
 8001856:	4b66      	ldr	r3, [pc, #408]	@ (80019f0 <SSD1306_Task+0x20c>)
 8001858:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800185c:	2b00      	cmp	r3, #0
 800185e:	bfb8      	it	lt
 8001860:	425b      	neglt	r3, r3
 8001862:	b29b      	uxth	r3, r3
 8001864:	4966      	ldr	r1, [pc, #408]	@ (8001a00 <SSD1306_Task+0x21c>)
 8001866:	4864      	ldr	r0, [pc, #400]	@ (80019f8 <SSD1306_Task+0x214>)
 8001868:	f00e fe9e 	bl	80105a8 <siprintf>
		SSD1306_GotoXY(43, 35);
 800186c:	2123      	movs	r1, #35	@ 0x23
 800186e:	202b      	movs	r0, #43	@ 0x2b
 8001870:	f001 faf2 	bl	8002e58 <SSD1306_GotoXY>
		SSD1306_Puts(display, &Font_7x10, BLACK);
 8001874:	2200      	movs	r2, #0
 8001876:	4961      	ldr	r1, [pc, #388]	@ (80019fc <SSD1306_Task+0x218>)
 8001878:	485f      	ldr	r0, [pc, #380]	@ (80019f8 <SSD1306_Task+0x214>)
 800187a:	f001 fb81 	bl	8002f80 <SSD1306_Puts>
		sprintf(display, "Z:%c%d",(mpuValues.Accel.Z_filtered >= 0) ? '+' : '-',abs(mpuValues.Accel.Z_filtered));
 800187e:	4b5c      	ldr	r3, [pc, #368]	@ (80019f0 <SSD1306_Task+0x20c>)
 8001880:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001884:	2b00      	cmp	r3, #0
 8001886:	db01      	blt.n	800188c <SSD1306_Task+0xa8>
 8001888:	222b      	movs	r2, #43	@ 0x2b
 800188a:	e000      	b.n	800188e <SSD1306_Task+0xaa>
 800188c:	222d      	movs	r2, #45	@ 0x2d
 800188e:	4b58      	ldr	r3, [pc, #352]	@ (80019f0 <SSD1306_Task+0x20c>)
 8001890:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001894:	2b00      	cmp	r3, #0
 8001896:	bfb8      	it	lt
 8001898:	425b      	neglt	r3, r3
 800189a:	b29b      	uxth	r3, r3
 800189c:	4959      	ldr	r1, [pc, #356]	@ (8001a04 <SSD1306_Task+0x220>)
 800189e:	4856      	ldr	r0, [pc, #344]	@ (80019f8 <SSD1306_Task+0x214>)
 80018a0:	f00e fe82 	bl	80105a8 <siprintf>
		SSD1306_GotoXY(43, 50);
 80018a4:	2132      	movs	r1, #50	@ 0x32
 80018a6:	202b      	movs	r0, #43	@ 0x2b
 80018a8:	f001 fad6 	bl	8002e58 <SSD1306_GotoXY>
		SSD1306_Puts(display, &Font_7x10, BLACK);
 80018ac:	2200      	movs	r2, #0
 80018ae:	4953      	ldr	r1, [pc, #332]	@ (80019fc <SSD1306_Task+0x218>)
 80018b0:	4851      	ldr	r0, [pc, #324]	@ (80019f8 <SSD1306_Task+0x214>)
 80018b2:	f001 fb65 	bl	8002f80 <SSD1306_Puts>
		sprintf(display, "X:%c%d ", (mpuValues.Gyro.X_filtered >= 0) ? '+' : '-', abs(mpuValues.Gyro.X_filtered));
 80018b6:	4b4e      	ldr	r3, [pc, #312]	@ (80019f0 <SSD1306_Task+0x20c>)
 80018b8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	db01      	blt.n	80018c4 <SSD1306_Task+0xe0>
 80018c0:	222b      	movs	r2, #43	@ 0x2b
 80018c2:	e000      	b.n	80018c6 <SSD1306_Task+0xe2>
 80018c4:	222d      	movs	r2, #45	@ 0x2d
 80018c6:	4b4a      	ldr	r3, [pc, #296]	@ (80019f0 <SSD1306_Task+0x20c>)
 80018c8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	bfb8      	it	lt
 80018d0:	425b      	neglt	r3, r3
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	494c      	ldr	r1, [pc, #304]	@ (8001a08 <SSD1306_Task+0x224>)
 80018d6:	4848      	ldr	r0, [pc, #288]	@ (80019f8 <SSD1306_Task+0x214>)
 80018d8:	f00e fe66 	bl	80105a8 <siprintf>
		SSD1306_GotoXY(90, 20);
 80018dc:	2114      	movs	r1, #20
 80018de:	205a      	movs	r0, #90	@ 0x5a
 80018e0:	f001 faba 	bl	8002e58 <SSD1306_GotoXY>
		SSD1306_Puts(display, &Font_7x10, BLACK);
 80018e4:	2200      	movs	r2, #0
 80018e6:	4945      	ldr	r1, [pc, #276]	@ (80019fc <SSD1306_Task+0x218>)
 80018e8:	4843      	ldr	r0, [pc, #268]	@ (80019f8 <SSD1306_Task+0x214>)
 80018ea:	f001 fb49 	bl	8002f80 <SSD1306_Puts>
		sprintf(display, "Y:%c%d ", (mpuValues.Gyro.Y_filtered >= 0) ? '+' : '-', abs(mpuValues.Gyro.Y_filtered));
 80018ee:	4b40      	ldr	r3, [pc, #256]	@ (80019f0 <SSD1306_Task+0x20c>)
 80018f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	db01      	blt.n	80018fc <SSD1306_Task+0x118>
 80018f8:	222b      	movs	r2, #43	@ 0x2b
 80018fa:	e000      	b.n	80018fe <SSD1306_Task+0x11a>
 80018fc:	222d      	movs	r2, #45	@ 0x2d
 80018fe:	4b3c      	ldr	r3, [pc, #240]	@ (80019f0 <SSD1306_Task+0x20c>)
 8001900:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001904:	2b00      	cmp	r3, #0
 8001906:	bfb8      	it	lt
 8001908:	425b      	neglt	r3, r3
 800190a:	b29b      	uxth	r3, r3
 800190c:	493f      	ldr	r1, [pc, #252]	@ (8001a0c <SSD1306_Task+0x228>)
 800190e:	483a      	ldr	r0, [pc, #232]	@ (80019f8 <SSD1306_Task+0x214>)
 8001910:	f00e fe4a 	bl	80105a8 <siprintf>
		SSD1306_GotoXY(90, 35);
 8001914:	2123      	movs	r1, #35	@ 0x23
 8001916:	205a      	movs	r0, #90	@ 0x5a
 8001918:	f001 fa9e 	bl	8002e58 <SSD1306_GotoXY>
		SSD1306_Puts(display, &Font_7x10, BLACK);
 800191c:	2200      	movs	r2, #0
 800191e:	4937      	ldr	r1, [pc, #220]	@ (80019fc <SSD1306_Task+0x218>)
 8001920:	4835      	ldr	r0, [pc, #212]	@ (80019f8 <SSD1306_Task+0x214>)
 8001922:	f001 fb2d 	bl	8002f80 <SSD1306_Puts>
		sprintf(display, "Z:%c%d ", (mpuValues.Gyro.Z_filtered) ? '+' : '-', abs(mpuValues.Gyro.Z_filtered));
 8001926:	4b32      	ldr	r3, [pc, #200]	@ (80019f0 <SSD1306_Task+0x20c>)
 8001928:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <SSD1306_Task+0x150>
 8001930:	222b      	movs	r2, #43	@ 0x2b
 8001932:	e000      	b.n	8001936 <SSD1306_Task+0x152>
 8001934:	222d      	movs	r2, #45	@ 0x2d
 8001936:	4b2e      	ldr	r3, [pc, #184]	@ (80019f0 <SSD1306_Task+0x20c>)
 8001938:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800193c:	2b00      	cmp	r3, #0
 800193e:	bfb8      	it	lt
 8001940:	425b      	neglt	r3, r3
 8001942:	b29b      	uxth	r3, r3
 8001944:	4932      	ldr	r1, [pc, #200]	@ (8001a10 <SSD1306_Task+0x22c>)
 8001946:	482c      	ldr	r0, [pc, #176]	@ (80019f8 <SSD1306_Task+0x214>)
 8001948:	f00e fe2e 	bl	80105a8 <siprintf>
		SSD1306_GotoXY(90, 50);
 800194c:	2132      	movs	r1, #50	@ 0x32
 800194e:	205a      	movs	r0, #90	@ 0x5a
 8001950:	f001 fa82 	bl	8002e58 <SSD1306_GotoXY>
		SSD1306_Puts(display, &Font_7x10, BLACK);
 8001954:	2200      	movs	r2, #0
 8001956:	4929      	ldr	r1, [pc, #164]	@ (80019fc <SSD1306_Task+0x218>)
 8001958:	4827      	ldr	r0, [pc, #156]	@ (80019f8 <SSD1306_Task+0x214>)
 800195a:	f001 fb11 	bl	8002f80 <SSD1306_Puts>
		for(uint8_t i = 0; i < 9; i++){
 800195e:	2300      	movs	r3, #0
 8001960:	71fb      	strb	r3, [r7, #7]
 8001962:	e03a      	b.n	80019da <SSD1306_Task+0x1f6>
			for(uint8_t j = 0; j < 39; j++){
 8001964:	2300      	movs	r3, #0
 8001966:	71bb      	strb	r3, [r7, #6]
 8001968:	e031      	b.n	80019ce <SSD1306_Task+0x1ea>
				if(adcValues.raw_Data[i] <= ADC_to_Index[j]){
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	4a29      	ldr	r2, [pc, #164]	@ (8001a14 <SSD1306_Task+0x230>)
 800196e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001972:	79bb      	ldrb	r3, [r7, #6]
 8001974:	4928      	ldr	r1, [pc, #160]	@ (8001a18 <SSD1306_Task+0x234>)
 8001976:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800197a:	429a      	cmp	r2, r3
 800197c:	d824      	bhi.n	80019c8 <SSD1306_Task+0x1e4>
					guiaBarras = 5 + i * 4;
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	3305      	adds	r3, #5
 8001984:	603b      	str	r3, [r7, #0]
					SSD1306_DrawLine(guiaBarras, 59,  guiaBarras, Index_to_Bar[j], BLACK);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	b298      	uxth	r0, r3
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	b29a      	uxth	r2, r3
 800198e:	79bb      	ldrb	r3, [r7, #6]
 8001990:	4922      	ldr	r1, [pc, #136]	@ (8001a1c <SSD1306_Task+0x238>)
 8001992:	5ccb      	ldrb	r3, [r1, r3]
 8001994:	4619      	mov	r1, r3
 8001996:	2300      	movs	r3, #0
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	460b      	mov	r3, r1
 800199c:	213b      	movs	r1, #59	@ 0x3b
 800199e:	f001 fb14 	bl	8002fca <SSD1306_DrawLine>
					SSD1306_DrawLine(guiaBarras+1, 59,  guiaBarras+1, Index_to_Bar[j], BLACK);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	3301      	adds	r3, #1
 80019a8:	b298      	uxth	r0, r3
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	3301      	adds	r3, #1
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	79bb      	ldrb	r3, [r7, #6]
 80019b4:	4919      	ldr	r1, [pc, #100]	@ (8001a1c <SSD1306_Task+0x238>)
 80019b6:	5ccb      	ldrb	r3, [r1, r3]
 80019b8:	4619      	mov	r1, r3
 80019ba:	2300      	movs	r3, #0
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	460b      	mov	r3, r1
 80019c0:	213b      	movs	r1, #59	@ 0x3b
 80019c2:	f001 fb02 	bl	8002fca <SSD1306_DrawLine>
					break;
 80019c6:	e005      	b.n	80019d4 <SSD1306_Task+0x1f0>
			for(uint8_t j = 0; j < 39; j++){
 80019c8:	79bb      	ldrb	r3, [r7, #6]
 80019ca:	3301      	adds	r3, #1
 80019cc:	71bb      	strb	r3, [r7, #6]
 80019ce:	79bb      	ldrb	r3, [r7, #6]
 80019d0:	2b26      	cmp	r3, #38	@ 0x26
 80019d2:	d9ca      	bls.n	800196a <SSD1306_Task+0x186>
		for(uint8_t i = 0; i < 9; i++){
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	3301      	adds	r3, #1
 80019d8:	71fb      	strb	r3, [r7, #7]
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	2b08      	cmp	r3, #8
 80019de:	d9c1      	bls.n	8001964 <SSD1306_Task+0x180>
				}
			}
		}
	}
}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	200005f4 	.word	0x200005f4
 80019ec:	080148bc 	.word	0x080148bc
 80019f0:	20000608 	.word	0x20000608
 80019f4:	08013cd8 	.word	0x08013cd8
 80019f8:	20000714 	.word	0x20000714
 80019fc:	20000000 	.word	0x20000000
 8001a00:	08013ce0 	.word	0x08013ce0
 8001a04:	08013ce8 	.word	0x08013ce8
 8001a08:	08013cf0 	.word	0x08013cf0
 8001a0c:	08013cf8 	.word	0x08013cf8
 8001a10:	08013d00 	.word	0x08013d00
 8001a14:	200006d4 	.word	0x200006d4
 8001a18:	08014ce4 	.word	0x08014ce4
 8001a1c:	08014cbc 	.word	0x08014cbc

08001a20 <task10ms>:

void task10ms(){
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0

	static uint8_t ticker=0;
	uint16_t buffaux[8];

	if(ticker%10==0){
 8001a26:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad0 <task10ms+0xb0>)
 8001a28:	781a      	ldrb	r2, [r3, #0]
 8001a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad4 <task10ms+0xb4>)
 8001a2c:	fba3 1302 	umull	r1, r3, r3, r2
 8001a30:	08d9      	lsrs	r1, r3, #3
 8001a32:	460b      	mov	r3, r1
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	440b      	add	r3, r1
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d126      	bne.n	8001a90 <task10ms+0x70>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001a42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a46:	4824      	ldr	r0, [pc, #144]	@ (8001ad8 <task10ms+0xb8>)
 8001a48:	f003 fc0b 	bl	8005262 <HAL_GPIO_TogglePin>
		UP_sendInfo(MPUDATA,(uint8_t*)mpuValues.MAF.filtredData, 13);
 8001a4c:	220d      	movs	r2, #13
 8001a4e:	4923      	ldr	r1, [pc, #140]	@ (8001adc <task10ms+0xbc>)
 8001a50:	20f4      	movs	r0, #244	@ 0xf4
 8001a52:	f7ff fb0d 	bl	8001070 <UP_sendInfo>

		for(uint8_t i=0;i<7;i++)
 8001a56:	2300      	movs	r3, #0
 8001a58:	75fb      	strb	r3, [r7, #23]
 8001a5a:	e00c      	b.n	8001a76 <task10ms+0x56>
			buffaux[i]=adcValues.raw_Data[i];
 8001a5c:	7dfa      	ldrb	r2, [r7, #23]
 8001a5e:	7dfb      	ldrb	r3, [r7, #23]
 8001a60:	491f      	ldr	r1, [pc, #124]	@ (8001ae0 <task10ms+0xc0>)
 8001a62:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	3318      	adds	r3, #24
 8001a6a:	443b      	add	r3, r7
 8001a6c:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(uint8_t i=0;i<7;i++)
 8001a70:	7dfb      	ldrb	r3, [r7, #23]
 8001a72:	3301      	adds	r3, #1
 8001a74:	75fb      	strb	r3, [r7, #23]
 8001a76:	7dfb      	ldrb	r3, [r7, #23]
 8001a78:	2b06      	cmp	r3, #6
 8001a7a:	d9ef      	bls.n	8001a5c <task10ms+0x3c>

		UP_sendInfo(ADCVALUES,(uint8_t*)&buffaux, 17);
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	2211      	movs	r2, #17
 8001a80:	4619      	mov	r1, r3
 8001a82:	20f5      	movs	r0, #245	@ 0xf5
 8001a84:	f7ff faf4 	bl	8001070 <UP_sendInfo>

		SSD1306_Task();
 8001a88:	f7ff feac 	bl	80017e4 <SSD1306_Task>
		SSD1306_RefreshReady();
 8001a8c:	f001 fbe4 	bl	8003258 <SSD1306_RefreshReady>
	}
	if(ticker>250){
 8001a90:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad0 <task10ms+0xb0>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2bfa      	cmp	r3, #250	@ 0xfa
 8001a96:	d910      	bls.n	8001aba <task10ms+0x9a>
		if(!SISINIT){
 8001a98:	4b12      	ldr	r3, [pc, #72]	@ (8001ae4 <task10ms+0xc4>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <task10ms+0x8a>
			SSD1306_Clear();
 8001aa6:	f001 fb8b 	bl	80031c0 <SSD1306_Clear>
		}
		SISINIT=TRUE;
 8001aaa:	4a0e      	ldr	r2, [pc, #56]	@ (8001ae4 <task10ms+0xc4>)
 8001aac:	7813      	ldrb	r3, [r2, #0]
 8001aae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ab2:	7013      	strb	r3, [r2, #0]
		ticker=0;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <task10ms+0xb0>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
	}
	ticker++;
 8001aba:	4b05      	ldr	r3, [pc, #20]	@ (8001ad0 <task10ms+0xb0>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4b03      	ldr	r3, [pc, #12]	@ (8001ad0 <task10ms+0xb0>)
 8001ac4:	701a      	strb	r2, [r3, #0]
}
 8001ac6:	bf00      	nop
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000728 	.word	0x20000728
 8001ad4:	cccccccd 	.word	0xcccccccd
 8001ad8:	40020800 	.word	0x40020800
 8001adc:	200006c4 	.word	0x200006c4
 8001ae0:	200006d4 	.word	0x200006d4
 8001ae4:	200005f4 	.word	0x200005f4

08001ae8 <Engines_task>:

void Engines_task(){
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0

	en_HandlerENG(&motorR, ret_eng_Values(1), 0);
 8001aec:	2001      	movs	r0, #1
 8001aee:	f7ff fd3d 	bl	800156c <ret_eng_Values>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2200      	movs	r2, #0
 8001af6:	4619      	mov	r1, r3
 8001af8:	484e      	ldr	r0, [pc, #312]	@ (8001c34 <Engines_task+0x14c>)
 8001afa:	f7ff fd66 	bl	80015ca <en_HandlerENG>
	en_HandlerENG(&motorL, ret_eng_Values(0), 0);
 8001afe:	2000      	movs	r0, #0
 8001b00:	f7ff fd34 	bl	800156c <ret_eng_Values>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2200      	movs	r2, #0
 8001b08:	4619      	mov	r1, r3
 8001b0a:	484b      	ldr	r0, [pc, #300]	@ (8001c38 <Engines_task+0x150>)
 8001b0c:	f7ff fd5d 	bl	80015ca <en_HandlerENG>

	switch(motorL.estado){
 8001b10:	4b49      	ldr	r3, [pc, #292]	@ (8001c38 <Engines_task+0x150>)
 8001b12:	789b      	ldrb	r3, [r3, #2]
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d83b      	bhi.n	8001b90 <Engines_task+0xa8>
 8001b18:	a201      	add	r2, pc, #4	@ (adr r2, 8001b20 <Engines_task+0x38>)
 8001b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1e:	bf00      	nop
 8001b20:	08001b49 	.word	0x08001b49
 8001b24:	08001b61 	.word	0x08001b61
 8001b28:	08001b79 	.word	0x08001b79
 8001b2c:	08001b31 	.word	0x08001b31
		case BRAKE:
			HAL_GPIO_WritePin(Out1_1_GPIO_Port, Out1_1_Pin, 1);
 8001b30:	2201      	movs	r2, #1
 8001b32:	2108      	movs	r1, #8
 8001b34:	4841      	ldr	r0, [pc, #260]	@ (8001c3c <Engines_task+0x154>)
 8001b36:	f003 fb7b 	bl	8005230 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Out1_2_GPIO_Port, Out1_2_Pin, 1);
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b40:	483f      	ldr	r0, [pc, #252]	@ (8001c40 <Engines_task+0x158>)
 8001b42:	f003 fb75 	bl	8005230 <HAL_GPIO_WritePin>
			break;
 8001b46:	e024      	b.n	8001b92 <Engines_task+0xaa>

		case FRONT:
			HAL_GPIO_WritePin(Out1_1_GPIO_Port, Out1_1_Pin, 1);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	2108      	movs	r1, #8
 8001b4c:	483b      	ldr	r0, [pc, #236]	@ (8001c3c <Engines_task+0x154>)
 8001b4e:	f003 fb6f 	bl	8005230 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Out1_2_GPIO_Port, Out1_2_Pin, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b58:	4839      	ldr	r0, [pc, #228]	@ (8001c40 <Engines_task+0x158>)
 8001b5a:	f003 fb69 	bl	8005230 <HAL_GPIO_WritePin>
			break;
 8001b5e:	e018      	b.n	8001b92 <Engines_task+0xaa>

		case BACK:
			HAL_GPIO_WritePin(Out1_1_GPIO_Port, Out1_1_Pin, 0);
 8001b60:	2200      	movs	r2, #0
 8001b62:	2108      	movs	r1, #8
 8001b64:	4835      	ldr	r0, [pc, #212]	@ (8001c3c <Engines_task+0x154>)
 8001b66:	f003 fb63 	bl	8005230 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Out1_2_GPIO_Port, Out1_2_Pin, 1);
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b70:	4833      	ldr	r0, [pc, #204]	@ (8001c40 <Engines_task+0x158>)
 8001b72:	f003 fb5d 	bl	8005230 <HAL_GPIO_WritePin>
			break;
 8001b76:	e00c      	b.n	8001b92 <Engines_task+0xaa>

		case FREE:
			HAL_GPIO_WritePin(Out1_1_GPIO_Port, Out1_1_Pin, 0);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2108      	movs	r1, #8
 8001b7c:	482f      	ldr	r0, [pc, #188]	@ (8001c3c <Engines_task+0x154>)
 8001b7e:	f003 fb57 	bl	8005230 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Out1_2_GPIO_Port, Out1_2_Pin, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b88:	482d      	ldr	r0, [pc, #180]	@ (8001c40 <Engines_task+0x158>)
 8001b8a:	f003 fb51 	bl	8005230 <HAL_GPIO_WritePin>
			break;
 8001b8e:	e000      	b.n	8001b92 <Engines_task+0xaa>
		default:
			break;
 8001b90:	bf00      	nop
	}
	switch(motorR.estado){
 8001b92:	4b28      	ldr	r3, [pc, #160]	@ (8001c34 <Engines_task+0x14c>)
 8001b94:	789b      	ldrb	r3, [r3, #2]
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d83e      	bhi.n	8001c18 <Engines_task+0x130>
 8001b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8001ba0 <Engines_task+0xb8>)
 8001b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba0:	08001bcb 	.word	0x08001bcb
 8001ba4:	08001be5 	.word	0x08001be5
 8001ba8:	08001bff 	.word	0x08001bff
 8001bac:	08001bb1 	.word	0x08001bb1
		case BRAKE:
			HAL_GPIO_WritePin(Out2_1_GPIO_Port, Out2_1_Pin, 1);
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bb6:	4822      	ldr	r0, [pc, #136]	@ (8001c40 <Engines_task+0x158>)
 8001bb8:	f003 fb3a 	bl	8005230 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Out2_2_GPIO_Port, Out2_2_Pin, 1);
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bc2:	481f      	ldr	r0, [pc, #124]	@ (8001c40 <Engines_task+0x158>)
 8001bc4:	f003 fb34 	bl	8005230 <HAL_GPIO_WritePin>
			break;
 8001bc8:	e027      	b.n	8001c1a <Engines_task+0x132>

		case FRONT:
			HAL_GPIO_WritePin(Out2_1_GPIO_Port, Out2_1_Pin, 1);
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bd0:	481b      	ldr	r0, [pc, #108]	@ (8001c40 <Engines_task+0x158>)
 8001bd2:	f003 fb2d 	bl	8005230 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Out2_2_GPIO_Port, Out2_2_Pin, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bdc:	4818      	ldr	r0, [pc, #96]	@ (8001c40 <Engines_task+0x158>)
 8001bde:	f003 fb27 	bl	8005230 <HAL_GPIO_WritePin>
			break;
 8001be2:	e01a      	b.n	8001c1a <Engines_task+0x132>

		case BACK:
			HAL_GPIO_WritePin(Out2_1_GPIO_Port, Out2_1_Pin, 0);
 8001be4:	2200      	movs	r2, #0
 8001be6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bea:	4815      	ldr	r0, [pc, #84]	@ (8001c40 <Engines_task+0x158>)
 8001bec:	f003 fb20 	bl	8005230 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Out2_2_GPIO_Port, Out2_2_Pin, 1);
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bf6:	4812      	ldr	r0, [pc, #72]	@ (8001c40 <Engines_task+0x158>)
 8001bf8:	f003 fb1a 	bl	8005230 <HAL_GPIO_WritePin>
			break;
 8001bfc:	e00d      	b.n	8001c1a <Engines_task+0x132>

		case FREE:
			HAL_GPIO_WritePin(Out2_1_GPIO_Port, Out2_1_Pin, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c04:	480e      	ldr	r0, [pc, #56]	@ (8001c40 <Engines_task+0x158>)
 8001c06:	f003 fb13 	bl	8005230 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Out2_2_GPIO_Port, Out2_2_Pin, 0);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c10:	480b      	ldr	r0, [pc, #44]	@ (8001c40 <Engines_task+0x158>)
 8001c12:	f003 fb0d 	bl	8005230 <HAL_GPIO_WritePin>
			break;
 8001c16:	e000      	b.n	8001c1a <Engines_task+0x132>
		default:
			break;
 8001c18:	bf00      	nop
		}

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, motorL.speed);
 8001c1a:	4b07      	ldr	r3, [pc, #28]	@ (8001c38 <Engines_task+0x150>)
 8001c1c:	881a      	ldrh	r2, [r3, #0]
 8001c1e:	4b09      	ldr	r3, [pc, #36]	@ (8001c44 <Engines_task+0x15c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, motorR.speed);
 8001c24:	4b03      	ldr	r3, [pc, #12]	@ (8001c34 <Engines_task+0x14c>)
 8001c26:	881a      	ldrh	r2, [r3, #0]
 8001c28:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <Engines_task+0x15c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000600 	.word	0x20000600
 8001c38:	200005f8 	.word	0x200005f8
 8001c3c:	40020400 	.word	0x40020400
 8001c40:	40020000 	.word	0x40020000
 8001c44:	200004c0 	.word	0x200004c0

08001c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c4e:	f001 fef7 	bl	8003a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c52:	f000 f897 	bl	8001d84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c56:	f000 fb21 	bl	800229c <MX_GPIO_Init>
  MX_DMA_Init();
 8001c5a:	f000 fae1 	bl	8002220 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8001c5e:	f00c ff49 	bl	800eaf4 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8001c62:	f000 f9d9 	bl	8002018 <MX_TIM3_Init>
  MX_TIM11_Init();
 8001c66:	f000 fab7 	bl	80021d8 <MX_TIM11_Init>
  MX_ADC1_Init();
 8001c6a:	f000 f8f3 	bl	8001e54 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001c6e:	f000 f9a5 	bl	8001fbc <MX_I2C1_Init>
  MX_TIM10_Init();
 8001c72:	f000 fa8d 	bl	8002190 <MX_TIM10_Init>
  MX_TIM9_Init();
 8001c76:	f000 fa51 	bl	800211c <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8001c7a:	4832      	ldr	r0, [pc, #200]	@ (8001d44 <main+0xfc>)
 8001c7c:	f008 fc9a 	bl	800a5b4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8001c80:	4831      	ldr	r0, [pc, #196]	@ (8001d48 <main+0x100>)
 8001c82:	f008 fc97 	bl	800a5b4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 8001c86:	4831      	ldr	r0, [pc, #196]	@ (8001d4c <main+0x104>)
 8001c88:	f008 fc94 	bl	800a5b4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim9);
 8001c8c:	4830      	ldr	r0, [pc, #192]	@ (8001d50 <main+0x108>)
 8001c8e:	f008 fc91 	bl	800a5b4 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001c92:	2104      	movs	r1, #4
 8001c94:	482b      	ldr	r0, [pc, #172]	@ (8001d44 <main+0xfc>)
 8001c96:	f008 fd49 	bl	800a72c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4829      	ldr	r0, [pc, #164]	@ (8001d44 <main+0xfc>)
 8001c9e:	f008 fd45 	bl	800a72c <HAL_TIM_PWM_Start>

  Display_Set_I2C_Master_Transmit(&I2C_DMA_Transmit, &I2C_1_Abstract_Master_Transmit_Blocking);
 8001ca2:	492c      	ldr	r1, [pc, #176]	@ (8001d54 <main+0x10c>)
 8001ca4:	482c      	ldr	r0, [pc, #176]	@ (8001d58 <main+0x110>)
 8001ca6:	f001 fab1 	bl	800320c <Display_Set_I2C_Master_Transmit>
  MPU6050_I2C_Blocking(&I2C_RBlocking,&I2C_1_Abstract_Mem_Write_Blocking);
 8001caa:	492c      	ldr	r1, [pc, #176]	@ (8001d5c <main+0x114>)
 8001cac:	482c      	ldr	r0, [pc, #176]	@ (8001d60 <main+0x118>)
 8001cae:	f000 fec7 	bl	8002a40 <MPU6050_I2C_Blocking>
  MPU6050_NonBlocking_DMA(&I2C_DMA_Transmit,&I2C_DMA_Recive);
 8001cb2:	492c      	ldr	r1, [pc, #176]	@ (8001d64 <main+0x11c>)
 8001cb4:	4828      	ldr	r0, [pc, #160]	@ (8001d58 <main+0x110>)
 8001cb6:	f000 fead 	bl	8002a14 <MPU6050_NonBlocking_DMA>
  SSD1306_Init();
 8001cba:	f000 ff3f 	bl	8002b3c <SSD1306_Init>
  MPU6050_Init(&mpuValues);
 8001cbe:	482a      	ldr	r0, [pc, #168]	@ (8001d68 <main+0x120>)
 8001cc0:	f000 fc5a 	bl	8002578 <MPU6050_Init>
  CDC_AttachRxData(&UP_datafromUSB);
 8001cc4:	4829      	ldr	r0, [pc, #164]	@ (8001d6c <main+0x124>)
 8001cc6:	f00d f869 	bl	800ed9c <CDC_AttachRxData>
  myFlags.allFlags=0;
 8001cca:	4b29      	ldr	r3, [pc, #164]	@ (8001d70 <main+0x128>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
  UP_initprotocol(&datosComSerie,(uint8_t)RINGBUFFER);
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	4828      	ldr	r0, [pc, #160]	@ (8001d74 <main+0x12c>)
 8001cd4:	f7ff f9ac 	bl	8001030 <UP_initprotocol>
  en_InitENG(&motorL, (uint16_t)htim3.Instance->ARR);
 8001cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d44 <main+0xfc>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4825      	ldr	r0, [pc, #148]	@ (8001d78 <main+0x130>)
 8001ce4:	f7ff fc5c 	bl	80015a0 <en_InitENG>
  en_InitENG(&motorR, (uint16_t)htim3.Instance->ARR);
 8001ce8:	4b16      	ldr	r3, [pc, #88]	@ (8001d44 <main+0xfc>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4822      	ldr	r0, [pc, #136]	@ (8001d7c <main+0x134>)
 8001cf4:	f7ff fc54 	bl	80015a0 <en_InitENG>

  SSD1306_DrawBitmap(0, 0, LogoMicros, 128, 64, WHITE);
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	9301      	str	r3, [sp, #4]
 8001cfc:	2340      	movs	r3, #64	@ 0x40
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	2380      	movs	r3, #128	@ 0x80
 8001d02:	4a1f      	ldr	r2, [pc, #124]	@ (8001d80 <main+0x138>)
 8001d04:	2100      	movs	r1, #0
 8001d06:	2000      	movs	r0, #0
 8001d08:	f000 feb0 	bl	8002a6c <SSD1306_DrawBitmap>
  MPU6050_Calibrate(&mpuValues);
 8001d0c:	4816      	ldr	r0, [pc, #88]	@ (8001d68 <main+0x120>)
 8001d0e:	f000 fcbd 	bl	800268c <MPU6050_Calibrate>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(IS10MS){
 8001d12:	4b17      	ldr	r3, [pc, #92]	@ (8001d70 <main+0x128>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d008      	beq.n	8001d32 <main+0xea>
		 task10ms();
 8001d20:	f7ff fe7e 	bl	8001a20 <task10ms>
		 IS10MS=FALSE;
 8001d24:	4a12      	ldr	r2, [pc, #72]	@ (8001d70 <main+0x128>)
 8001d26:	7813      	ldrb	r3, [r2, #0]
 8001d28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001d2c:	7013      	strb	r3, [r2, #0]
		 Engines_task();
 8001d2e:	f7ff fedb 	bl	8001ae8 <Engines_task>
	  }
	MPU6050_MAF(&mpuValues);
 8001d32:	480d      	ldr	r0, [pc, #52]	@ (8001d68 <main+0x120>)
 8001d34:	f000 fd4a 	bl	80027cc <MPU6050_MAF>
	UP_comunicationsTask(&datosComSerie);
 8001d38:	480e      	ldr	r0, [pc, #56]	@ (8001d74 <main+0x12c>)
 8001d3a:	f000 fb3b 	bl	80023b4 <UP_comunicationsTask>

//	if(NEWADCVALUES)
//		AdcFilter();

	SSD1306_UpdateScreen();
 8001d3e:	f000 ffaf 	bl	8002ca0 <SSD1306_UpdateScreen>
	  if(IS10MS){
 8001d42:	e7e6      	b.n	8001d12 <main+0xca>
 8001d44:	200004c0 	.word	0x200004c0
 8001d48:	20000598 	.word	0x20000598
 8001d4c:	20000550 	.word	0x20000550
 8001d50:	20000508 	.word	0x20000508
 8001d54:	08002481 	.word	0x08002481
 8001d58:	08002449 	.word	0x08002449
 8001d5c:	080024b5 	.word	0x080024b5
 8001d60:	0800252d 	.word	0x0800252d
 8001d64:	080024f5 	.word	0x080024f5
 8001d68:	20000608 	.word	0x20000608
 8001d6c:	08001511 	.word	0x08001511
 8001d70:	200005f4 	.word	0x200005f4
 8001d74:	200005e0 	.word	0x200005e0
 8001d78:	200005f8 	.word	0x200005f8
 8001d7c:	20000600 	.word	0x20000600
 8001d80:	080144bc 	.word	0x080144bc

08001d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b094      	sub	sp, #80	@ 0x50
 8001d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d8a:	f107 0320 	add.w	r3, r7, #32
 8001d8e:	2230      	movs	r2, #48	@ 0x30
 8001d90:	2100      	movs	r1, #0
 8001d92:	4618      	mov	r0, r3
 8001d94:	f00e fc6d 	bl	8010672 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d98:	f107 030c 	add.w	r3, r7, #12
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001da8:	2300      	movs	r3, #0
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	4b27      	ldr	r3, [pc, #156]	@ (8001e4c <SystemClock_Config+0xc8>)
 8001dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db0:	4a26      	ldr	r2, [pc, #152]	@ (8001e4c <SystemClock_Config+0xc8>)
 8001db2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001db6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001db8:	4b24      	ldr	r3, [pc, #144]	@ (8001e4c <SystemClock_Config+0xc8>)
 8001dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	607b      	str	r3, [r7, #4]
 8001dc8:	4b21      	ldr	r3, [pc, #132]	@ (8001e50 <SystemClock_Config+0xcc>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a20      	ldr	r2, [pc, #128]	@ (8001e50 <SystemClock_Config+0xcc>)
 8001dce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	4b1e      	ldr	r3, [pc, #120]	@ (8001e50 <SystemClock_Config+0xcc>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ddc:	607b      	str	r3, [r7, #4]
 8001dde:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001de0:	2301      	movs	r3, #1
 8001de2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001de4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001de8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dea:	2302      	movs	r3, #2
 8001dec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001df4:	2319      	movs	r3, #25
 8001df6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001df8:	23c0      	movs	r3, #192	@ 0xc0
 8001dfa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e00:	2304      	movs	r3, #4
 8001e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e04:	f107 0320 	add.w	r3, r7, #32
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f007 ff3f 	bl	8009c8c <HAL_RCC_OscConfig>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e14:	f000 fbaa 	bl	800256c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e18:	230f      	movs	r3, #15
 8001e1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e2e:	f107 030c 	add.w	r3, r7, #12
 8001e32:	2103      	movs	r1, #3
 8001e34:	4618      	mov	r0, r3
 8001e36:	f008 f9a1 	bl	800a17c <HAL_RCC_ClockConfig>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001e40:	f000 fb94 	bl	800256c <Error_Handler>
  }
}
 8001e44:	bf00      	nop
 8001e46:	3750      	adds	r7, #80	@ 0x50
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40007000 	.word	0x40007000

08001e54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e5a:	463b      	mov	r3, r7
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e66:	4b52      	ldr	r3, [pc, #328]	@ (8001fb0 <MX_ADC1_Init+0x15c>)
 8001e68:	4a52      	ldr	r2, [pc, #328]	@ (8001fb4 <MX_ADC1_Init+0x160>)
 8001e6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e6c:	4b50      	ldr	r3, [pc, #320]	@ (8001fb0 <MX_ADC1_Init+0x15c>)
 8001e6e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001e72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e74:	4b4e      	ldr	r3, [pc, #312]	@ (8001fb0 <MX_ADC1_Init+0x15c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001e7a:	4b4d      	ldr	r3, [pc, #308]	@ (8001fb0 <MX_ADC1_Init+0x15c>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e80:	4b4b      	ldr	r3, [pc, #300]	@ (8001fb0 <MX_ADC1_Init+0x15c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e86:	4b4a      	ldr	r3, [pc, #296]	@ (8001fb0 <MX_ADC1_Init+0x15c>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e8e:	4b48      	ldr	r3, [pc, #288]	@ (8001fb0 <MX_ADC1_Init+0x15c>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e94:	4b46      	ldr	r3, [pc, #280]	@ (8001fb0 <MX_ADC1_Init+0x15c>)
 8001e96:	4a48      	ldr	r2, [pc, #288]	@ (8001fb8 <MX_ADC1_Init+0x164>)
 8001e98:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e9a:	4b45      	ldr	r3, [pc, #276]	@ (8001fb0 <MX_ADC1_Init+0x15c>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8001ea0:	4b43      	ldr	r3, [pc, #268]	@ (8001fb0 <MX_ADC1_Init+0x15c>)
 8001ea2:	2208      	movs	r2, #8
 8001ea4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ea6:	4b42      	ldr	r3, [pc, #264]	@ (8001fb0 <MX_ADC1_Init+0x15c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001eae:	4b40      	ldr	r3, [pc, #256]	@ (8001fb0 <MX_ADC1_Init+0x15c>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001eb4:	483e      	ldr	r0, [pc, #248]	@ (8001fb0 <MX_ADC1_Init+0x15c>)
 8001eb6:	f001 fe59 	bl	8003b6c <HAL_ADC_Init>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001ec0:	f000 fb54 	bl	800256c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ed0:	463b      	mov	r3, r7
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4836      	ldr	r0, [pc, #216]	@ (8001fb0 <MX_ADC1_Init+0x15c>)
 8001ed6:	f002 f8af 	bl	8004038 <HAL_ADC_ConfigChannel>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001ee0:	f000 fb44 	bl	800256c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001eec:	463b      	mov	r3, r7
 8001eee:	4619      	mov	r1, r3
 8001ef0:	482f      	ldr	r0, [pc, #188]	@ (8001fb0 <MX_ADC1_Init+0x15c>)
 8001ef2:	f002 f8a1 	bl	8004038 <HAL_ADC_ConfigChannel>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001efc:	f000 fb36 	bl	800256c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001f00:	2303      	movs	r3, #3
 8001f02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001f04:	2303      	movs	r3, #3
 8001f06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f08:	463b      	mov	r3, r7
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4828      	ldr	r0, [pc, #160]	@ (8001fb0 <MX_ADC1_Init+0x15c>)
 8001f0e:	f002 f893 	bl	8004038 <HAL_ADC_ConfigChannel>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001f18:	f000 fb28 	bl	800256c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001f1c:	2304      	movs	r3, #4
 8001f1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001f20:	2304      	movs	r3, #4
 8001f22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f24:	463b      	mov	r3, r7
 8001f26:	4619      	mov	r1, r3
 8001f28:	4821      	ldr	r0, [pc, #132]	@ (8001fb0 <MX_ADC1_Init+0x15c>)
 8001f2a:	f002 f885 	bl	8004038 <HAL_ADC_ConfigChannel>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001f34:	f000 fb1a 	bl	800256c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001f38:	2305      	movs	r3, #5
 8001f3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001f3c:	2305      	movs	r3, #5
 8001f3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f40:	463b      	mov	r3, r7
 8001f42:	4619      	mov	r1, r3
 8001f44:	481a      	ldr	r0, [pc, #104]	@ (8001fb0 <MX_ADC1_Init+0x15c>)
 8001f46:	f002 f877 	bl	8004038 <HAL_ADC_ConfigChannel>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001f50:	f000 fb0c 	bl	800256c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001f54:	2306      	movs	r3, #6
 8001f56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001f58:	2306      	movs	r3, #6
 8001f5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f5c:	463b      	mov	r3, r7
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4813      	ldr	r0, [pc, #76]	@ (8001fb0 <MX_ADC1_Init+0x15c>)
 8001f62:	f002 f869 	bl	8004038 <HAL_ADC_ConfigChannel>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001f6c:	f000 fafe 	bl	800256c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001f70:	2307      	movs	r3, #7
 8001f72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001f74:	2307      	movs	r3, #7
 8001f76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f78:	463b      	mov	r3, r7
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	480c      	ldr	r0, [pc, #48]	@ (8001fb0 <MX_ADC1_Init+0x15c>)
 8001f7e:	f002 f85b 	bl	8004038 <HAL_ADC_ConfigChannel>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001f88:	f000 faf0 	bl	800256c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001f8c:	2308      	movs	r3, #8
 8001f8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001f90:	2308      	movs	r3, #8
 8001f92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f94:	463b      	mov	r3, r7
 8001f96:	4619      	mov	r1, r3
 8001f98:	4805      	ldr	r0, [pc, #20]	@ (8001fb0 <MX_ADC1_Init+0x15c>)
 8001f9a:	f002 f84d 	bl	8004038 <HAL_ADC_ConfigChannel>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001fa4:	f000 fae2 	bl	800256c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001fa8:	bf00      	nop
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000304 	.word	0x20000304
 8001fb4:	40012000 	.word	0x40012000
 8001fb8:	0f000001 	.word	0x0f000001

08001fbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fc0:	4b12      	ldr	r3, [pc, #72]	@ (800200c <MX_I2C1_Init+0x50>)
 8001fc2:	4a13      	ldr	r2, [pc, #76]	@ (8002010 <MX_I2C1_Init+0x54>)
 8001fc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001fc6:	4b11      	ldr	r3, [pc, #68]	@ (800200c <MX_I2C1_Init+0x50>)
 8001fc8:	4a12      	ldr	r2, [pc, #72]	@ (8002014 <MX_I2C1_Init+0x58>)
 8001fca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800200c <MX_I2C1_Init+0x50>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800200c <MX_I2C1_Init+0x50>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800200c <MX_I2C1_Init+0x50>)
 8001fda:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001fde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800200c <MX_I2C1_Init+0x50>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fe6:	4b09      	ldr	r3, [pc, #36]	@ (800200c <MX_I2C1_Init+0x50>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fec:	4b07      	ldr	r3, [pc, #28]	@ (800200c <MX_I2C1_Init+0x50>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ff2:	4b06      	ldr	r3, [pc, #24]	@ (800200c <MX_I2C1_Init+0x50>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ff8:	4804      	ldr	r0, [pc, #16]	@ (800200c <MX_I2C1_Init+0x50>)
 8001ffa:	f003 f94d 	bl	8005298 <HAL_I2C_Init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002004:	f000 fab2 	bl	800256c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002008:	bf00      	nop
 800200a:	bd80      	pop	{r7, pc}
 800200c:	200003ac 	.word	0x200003ac
 8002010:	40005400 	.word	0x40005400
 8002014:	00061a80 	.word	0x00061a80

08002018 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08e      	sub	sp, #56	@ 0x38
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800201e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	609a      	str	r2, [r3, #8]
 800202a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800202c:	f107 0320 	add.w	r3, r7, #32
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]
 8002044:	615a      	str	r2, [r3, #20]
 8002046:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002048:	4b32      	ldr	r3, [pc, #200]	@ (8002114 <MX_TIM3_Init+0xfc>)
 800204a:	4a33      	ldr	r2, [pc, #204]	@ (8002118 <MX_TIM3_Init+0x100>)
 800204c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 800204e:	4b31      	ldr	r3, [pc, #196]	@ (8002114 <MX_TIM3_Init+0xfc>)
 8002050:	220f      	movs	r2, #15
 8002052:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002054:	4b2f      	ldr	r3, [pc, #188]	@ (8002114 <MX_TIM3_Init+0xfc>)
 8002056:	2200      	movs	r2, #0
 8002058:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 800205a:	4b2e      	ldr	r3, [pc, #184]	@ (8002114 <MX_TIM3_Init+0xfc>)
 800205c:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8002060:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002062:	4b2c      	ldr	r3, [pc, #176]	@ (8002114 <MX_TIM3_Init+0xfc>)
 8002064:	2200      	movs	r2, #0
 8002066:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002068:	4b2a      	ldr	r3, [pc, #168]	@ (8002114 <MX_TIM3_Init+0xfc>)
 800206a:	2200      	movs	r2, #0
 800206c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800206e:	4829      	ldr	r0, [pc, #164]	@ (8002114 <MX_TIM3_Init+0xfc>)
 8002070:	f008 fa50 	bl	800a514 <HAL_TIM_Base_Init>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800207a:	f000 fa77 	bl	800256c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800207e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002082:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002084:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002088:	4619      	mov	r1, r3
 800208a:	4822      	ldr	r0, [pc, #136]	@ (8002114 <MX_TIM3_Init+0xfc>)
 800208c:	f008 fdb0 	bl	800abf0 <HAL_TIM_ConfigClockSource>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002096:	f000 fa69 	bl	800256c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800209a:	481e      	ldr	r0, [pc, #120]	@ (8002114 <MX_TIM3_Init+0xfc>)
 800209c:	f008 faec 	bl	800a678 <HAL_TIM_PWM_Init>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80020a6:	f000 fa61 	bl	800256c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020aa:	2300      	movs	r3, #0
 80020ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ae:	2300      	movs	r3, #0
 80020b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020b2:	f107 0320 	add.w	r3, r7, #32
 80020b6:	4619      	mov	r1, r3
 80020b8:	4816      	ldr	r0, [pc, #88]	@ (8002114 <MX_TIM3_Init+0xfc>)
 80020ba:	f009 f95b 	bl	800b374 <HAL_TIMEx_MasterConfigSynchronization>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80020c4:	f000 fa52 	bl	800256c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020c8:	2360      	movs	r3, #96	@ 0x60
 80020ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020d8:	1d3b      	adds	r3, r7, #4
 80020da:	2200      	movs	r2, #0
 80020dc:	4619      	mov	r1, r3
 80020de:	480d      	ldr	r0, [pc, #52]	@ (8002114 <MX_TIM3_Init+0xfc>)
 80020e0:	f008 fcc4 	bl	800aa6c <HAL_TIM_PWM_ConfigChannel>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80020ea:	f000 fa3f 	bl	800256c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	2204      	movs	r2, #4
 80020f2:	4619      	mov	r1, r3
 80020f4:	4807      	ldr	r0, [pc, #28]	@ (8002114 <MX_TIM3_Init+0xfc>)
 80020f6:	f008 fcb9 	bl	800aa6c <HAL_TIM_PWM_ConfigChannel>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002100:	f000 fa34 	bl	800256c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002104:	4803      	ldr	r0, [pc, #12]	@ (8002114 <MX_TIM3_Init+0xfc>)
 8002106:	f001 fab9 	bl	800367c <HAL_TIM_MspPostInit>

}
 800210a:	bf00      	nop
 800210c:	3738      	adds	r7, #56	@ 0x38
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	200004c0 	.word	0x200004c0
 8002118:	40000400 	.word	0x40000400

0800211c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002122:	463b      	mov	r3, r7
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800212e:	4b16      	ldr	r3, [pc, #88]	@ (8002188 <MX_TIM9_Init+0x6c>)
 8002130:	4a16      	ldr	r2, [pc, #88]	@ (800218c <MX_TIM9_Init+0x70>)
 8002132:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8002134:	4b14      	ldr	r3, [pc, #80]	@ (8002188 <MX_TIM9_Init+0x6c>)
 8002136:	2200      	movs	r2, #0
 8002138:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800213a:	4b13      	ldr	r3, [pc, #76]	@ (8002188 <MX_TIM9_Init+0x6c>)
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 23999;
 8002140:	4b11      	ldr	r3, [pc, #68]	@ (8002188 <MX_TIM9_Init+0x6c>)
 8002142:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8002146:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002148:	4b0f      	ldr	r3, [pc, #60]	@ (8002188 <MX_TIM9_Init+0x6c>)
 800214a:	2200      	movs	r2, #0
 800214c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800214e:	4b0e      	ldr	r3, [pc, #56]	@ (8002188 <MX_TIM9_Init+0x6c>)
 8002150:	2200      	movs	r2, #0
 8002152:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002154:	480c      	ldr	r0, [pc, #48]	@ (8002188 <MX_TIM9_Init+0x6c>)
 8002156:	f008 f9dd 	bl	800a514 <HAL_TIM_Base_Init>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8002160:	f000 fa04 	bl	800256c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002164:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002168:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800216a:	463b      	mov	r3, r7
 800216c:	4619      	mov	r1, r3
 800216e:	4806      	ldr	r0, [pc, #24]	@ (8002188 <MX_TIM9_Init+0x6c>)
 8002170:	f008 fd3e 	bl	800abf0 <HAL_TIM_ConfigClockSource>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 800217a:	f000 f9f7 	bl	800256c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800217e:	bf00      	nop
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000508 	.word	0x20000508
 800218c:	40014000 	.word	0x40014000

08002190 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002194:	4b0e      	ldr	r3, [pc, #56]	@ (80021d0 <MX_TIM10_Init+0x40>)
 8002196:	4a0f      	ldr	r2, [pc, #60]	@ (80021d4 <MX_TIM10_Init+0x44>)
 8002198:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 47;
 800219a:	4b0d      	ldr	r3, [pc, #52]	@ (80021d0 <MX_TIM10_Init+0x40>)
 800219c:	222f      	movs	r2, #47	@ 0x2f
 800219e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a0:	4b0b      	ldr	r3, [pc, #44]	@ (80021d0 <MX_TIM10_Init+0x40>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 80021a6:	4b0a      	ldr	r3, [pc, #40]	@ (80021d0 <MX_TIM10_Init+0x40>)
 80021a8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80021ac:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ae:	4b08      	ldr	r3, [pc, #32]	@ (80021d0 <MX_TIM10_Init+0x40>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b4:	4b06      	ldr	r3, [pc, #24]	@ (80021d0 <MX_TIM10_Init+0x40>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80021ba:	4805      	ldr	r0, [pc, #20]	@ (80021d0 <MX_TIM10_Init+0x40>)
 80021bc:	f008 f9aa 	bl	800a514 <HAL_TIM_Base_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80021c6:	f000 f9d1 	bl	800256c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000550 	.word	0x20000550
 80021d4:	40014400 	.word	0x40014400

080021d8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80021dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002218 <MX_TIM11_Init+0x40>)
 80021de:	4a0f      	ldr	r2, [pc, #60]	@ (800221c <MX_TIM11_Init+0x44>)
 80021e0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 95;
 80021e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002218 <MX_TIM11_Init+0x40>)
 80021e4:	225f      	movs	r2, #95	@ 0x5f
 80021e6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002218 <MX_TIM11_Init+0x40>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 9999;
 80021ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002218 <MX_TIM11_Init+0x40>)
 80021f0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80021f4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021f6:	4b08      	ldr	r3, [pc, #32]	@ (8002218 <MX_TIM11_Init+0x40>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021fc:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <MX_TIM11_Init+0x40>)
 80021fe:	2200      	movs	r2, #0
 8002200:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002202:	4805      	ldr	r0, [pc, #20]	@ (8002218 <MX_TIM11_Init+0x40>)
 8002204:	f008 f986 	bl	800a514 <HAL_TIM_Base_Init>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800220e:	f000 f9ad 	bl	800256c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000598 	.word	0x20000598
 800221c:	40014800 	.word	0x40014800

08002220 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	607b      	str	r3, [r7, #4]
 800222a:	4b1b      	ldr	r3, [pc, #108]	@ (8002298 <MX_DMA_Init+0x78>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222e:	4a1a      	ldr	r2, [pc, #104]	@ (8002298 <MX_DMA_Init+0x78>)
 8002230:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002234:	6313      	str	r3, [r2, #48]	@ 0x30
 8002236:	4b18      	ldr	r3, [pc, #96]	@ (8002298 <MX_DMA_Init+0x78>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800223e:	607b      	str	r3, [r7, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	603b      	str	r3, [r7, #0]
 8002246:	4b14      	ldr	r3, [pc, #80]	@ (8002298 <MX_DMA_Init+0x78>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224a:	4a13      	ldr	r2, [pc, #76]	@ (8002298 <MX_DMA_Init+0x78>)
 800224c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002250:	6313      	str	r3, [r2, #48]	@ 0x30
 8002252:	4b11      	ldr	r3, [pc, #68]	@ (8002298 <MX_DMA_Init+0x78>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800225a:	603b      	str	r3, [r7, #0]
 800225c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800225e:	2200      	movs	r2, #0
 8002260:	2100      	movs	r1, #0
 8002262:	200b      	movs	r0, #11
 8002264:	f002 fa7d 	bl	8004762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002268:	200b      	movs	r0, #11
 800226a:	f002 fa96 	bl	800479a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800226e:	2200      	movs	r2, #0
 8002270:	2100      	movs	r1, #0
 8002272:	200c      	movs	r0, #12
 8002274:	f002 fa75 	bl	8004762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002278:	200c      	movs	r0, #12
 800227a:	f002 fa8e 	bl	800479a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800227e:	2200      	movs	r2, #0
 8002280:	2100      	movs	r1, #0
 8002282:	2038      	movs	r0, #56	@ 0x38
 8002284:	f002 fa6d 	bl	8004762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002288:	2038      	movs	r0, #56	@ 0x38
 800228a:	f002 fa86 	bl	800479a <HAL_NVIC_EnableIRQ>

}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40023800 	.word	0x40023800

0800229c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08a      	sub	sp, #40	@ 0x28
 80022a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a2:	f107 0314 	add.w	r3, r7, #20
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	60da      	str	r2, [r3, #12]
 80022b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	4b3b      	ldr	r3, [pc, #236]	@ (80023a4 <MX_GPIO_Init+0x108>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	4a3a      	ldr	r2, [pc, #232]	@ (80023a4 <MX_GPIO_Init+0x108>)
 80022bc:	f043 0304 	orr.w	r3, r3, #4
 80022c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c2:	4b38      	ldr	r3, [pc, #224]	@ (80023a4 <MX_GPIO_Init+0x108>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c6:	f003 0304 	and.w	r3, r3, #4
 80022ca:	613b      	str	r3, [r7, #16]
 80022cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	4b34      	ldr	r3, [pc, #208]	@ (80023a4 <MX_GPIO_Init+0x108>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d6:	4a33      	ldr	r2, [pc, #204]	@ (80023a4 <MX_GPIO_Init+0x108>)
 80022d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022de:	4b31      	ldr	r3, [pc, #196]	@ (80023a4 <MX_GPIO_Init+0x108>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	4b2d      	ldr	r3, [pc, #180]	@ (80023a4 <MX_GPIO_Init+0x108>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f2:	4a2c      	ldr	r2, [pc, #176]	@ (80023a4 <MX_GPIO_Init+0x108>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022fa:	4b2a      	ldr	r3, [pc, #168]	@ (80023a4 <MX_GPIO_Init+0x108>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	60bb      	str	r3, [r7, #8]
 8002304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	607b      	str	r3, [r7, #4]
 800230a:	4b26      	ldr	r3, [pc, #152]	@ (80023a4 <MX_GPIO_Init+0x108>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230e:	4a25      	ldr	r2, [pc, #148]	@ (80023a4 <MX_GPIO_Init+0x108>)
 8002310:	f043 0302 	orr.w	r3, r3, #2
 8002314:	6313      	str	r3, [r2, #48]	@ 0x30
 8002316:	4b23      	ldr	r3, [pc, #140]	@ (80023a4 <MX_GPIO_Init+0x108>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	607b      	str	r3, [r7, #4]
 8002320:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002322:	2200      	movs	r2, #0
 8002324:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002328:	481f      	ldr	r0, [pc, #124]	@ (80023a8 <MX_GPIO_Init+0x10c>)
 800232a:	f002 ff81 	bl	8005230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Out2_2_Pin|Out2_1_Pin|Out1_2_Pin, GPIO_PIN_RESET);
 800232e:	2200      	movs	r2, #0
 8002330:	f44f 4106 	mov.w	r1, #34304	@ 0x8600
 8002334:	481d      	ldr	r0, [pc, #116]	@ (80023ac <MX_GPIO_Init+0x110>)
 8002336:	f002 ff7b 	bl	8005230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Out1_1_GPIO_Port, Out1_1_Pin, GPIO_PIN_RESET);
 800233a:	2200      	movs	r2, #0
 800233c:	2108      	movs	r1, #8
 800233e:	481c      	ldr	r0, [pc, #112]	@ (80023b0 <MX_GPIO_Init+0x114>)
 8002340:	f002 ff76 	bl	8005230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002344:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234a:	2301      	movs	r3, #1
 800234c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002352:	2300      	movs	r3, #0
 8002354:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002356:	f107 0314 	add.w	r3, r7, #20
 800235a:	4619      	mov	r1, r3
 800235c:	4812      	ldr	r0, [pc, #72]	@ (80023a8 <MX_GPIO_Init+0x10c>)
 800235e:	f002 fde3 	bl	8004f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : Out2_2_Pin Out2_1_Pin Out1_2_Pin */
  GPIO_InitStruct.Pin = Out2_2_Pin|Out2_1_Pin|Out1_2_Pin;
 8002362:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 8002366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002368:	2301      	movs	r3, #1
 800236a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002370:	2300      	movs	r3, #0
 8002372:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002374:	f107 0314 	add.w	r3, r7, #20
 8002378:	4619      	mov	r1, r3
 800237a:	480c      	ldr	r0, [pc, #48]	@ (80023ac <MX_GPIO_Init+0x110>)
 800237c:	f002 fdd4 	bl	8004f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : Out1_1_Pin */
  GPIO_InitStruct.Pin = Out1_1_Pin;
 8002380:	2308      	movs	r3, #8
 8002382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002384:	2301      	movs	r3, #1
 8002386:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238c:	2300      	movs	r3, #0
 800238e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Out1_1_GPIO_Port, &GPIO_InitStruct);
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	4619      	mov	r1, r3
 8002396:	4806      	ldr	r0, [pc, #24]	@ (80023b0 <MX_GPIO_Init+0x114>)
 8002398:	f002 fdc6 	bl	8004f28 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800239c:	bf00      	nop
 800239e:	3728      	adds	r7, #40	@ 0x28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40020800 	.word	0x40020800
 80023ac:	40020000 	.word	0x40020000
 80023b0:	40020400 	.word	0x40020400

080023b4 <UP_comunicationsTask>:

/* USER CODE BEGIN 4 */
void UP_comunicationsTask(_sDato *datosCom){
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]

	if(datosCom->indexReadRx!=datosCom->indexWriteRx ){
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	791a      	ldrb	r2, [r3, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	78db      	ldrb	r3, [r3, #3]
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d007      	beq.n	80023da <UP_comunicationsTask+0x26>
		UP_decodeHeader(datosCom);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7fe ff12 	bl	80011f4 <UP_decodeHeader>
		datosCom->indexReadRx=datosCom->indexWriteRx;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	78db      	ldrb	r3, [r3, #3]
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	711a      	strb	r2, [r3, #4]
	}

	if(datosCom->indexReadTx!=datosCom->indexWriteTx ){
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	799a      	ldrb	r2, [r3, #6]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	795b      	ldrb	r3, [r3, #5]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d02b      	beq.n	800243e <UP_comunicationsTask+0x8a>

		if(datosCom->indexWriteTx > datosCom->indexReadTx){
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	795a      	ldrb	r2, [r3, #5]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	799b      	ldrb	r3, [r3, #6]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d908      	bls.n	8002404 <UP_comunicationsTask+0x50>
				datosCom->bytesTosend = datosCom->indexWriteTx - datosCom->indexReadTx;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	795a      	ldrb	r2, [r3, #5]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	799b      	ldrb	r3, [r3, #6]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	741a      	strb	r2, [r3, #16]
 8002402:	e006      	b.n	8002412 <UP_comunicationsTask+0x5e>
		    }else{
		    	datosCom->bytesTosend =  sizeof(datosCom->bufferRx) - datosCom->indexReadTx;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	799b      	ldrb	r3, [r3, #6]
 8002408:	f1c3 0304 	rsb	r3, r3, #4
 800240c:	b2da      	uxtb	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	741a      	strb	r2, [r3, #16]
		    }
		    if(CDC_Transmit_FS(&datosCom->bufferTx[datosCom->indexReadTx], datosCom->bytesTosend) == USBD_OK){
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	7992      	ldrb	r2, [r2, #6]
 800241a:	441a      	add	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	7c1b      	ldrb	r3, [r3, #16]
 8002420:	4619      	mov	r1, r3
 8002422:	4610      	mov	r0, r2
 8002424:	f00c fc82 	bl	800ed2c <CDC_Transmit_FS>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d107      	bne.n	800243e <UP_comunicationsTask+0x8a>
		    	datosCom->indexReadTx += datosCom->bytesTosend;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	799a      	ldrb	r2, [r3, #6]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	7c1b      	ldrb	r3, [r3, #16]
 8002436:	4413      	add	r3, r2
 8002438:	b2da      	uxtb	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	719a      	strb	r2, [r3, #6]
		    }
	}
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <I2C_DMA_Transmit>:

uint8_t I2C_DMA_Transmit(uint16_t Dev_Address,uint16_t reg,uint8_t *p_Data, uint16_t _Size){
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af02      	add	r7, sp, #8
 800244e:	60ba      	str	r2, [r7, #8]
 8002450:	461a      	mov	r2, r3
 8002452:	4603      	mov	r3, r0
 8002454:	81fb      	strh	r3, [r7, #14]
 8002456:	460b      	mov	r3, r1
 8002458:	81bb      	strh	r3, [r7, #12]
 800245a:	4613      	mov	r3, r2
 800245c:	80fb      	strh	r3, [r7, #6]

	HAL_I2C_Mem_Write_DMA(&hi2c1, Dev_Address, reg, 1, p_Data, _Size);
 800245e:	89ba      	ldrh	r2, [r7, #12]
 8002460:	89f9      	ldrh	r1, [r7, #14]
 8002462:	88fb      	ldrh	r3, [r7, #6]
 8002464:	9301      	str	r3, [sp, #4]
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	2301      	movs	r3, #1
 800246c:	4803      	ldr	r0, [pc, #12]	@ (800247c <I2C_DMA_Transmit+0x34>)
 800246e:	f003 fc97 	bl	8005da0 <HAL_I2C_Mem_Write_DMA>
	return 1;
 8002472:	2301      	movs	r3, #1
}
 8002474:	4618      	mov	r0, r3
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	200003ac 	.word	0x200003ac

08002480 <I2C_1_Abstract_Master_Transmit_Blocking>:

uint8_t I2C_1_Abstract_Master_Transmit_Blocking(uint16_t Dev_Address, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af02      	add	r7, sp, #8
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	607b      	str	r3, [r7, #4]
 800248a:	4603      	mov	r3, r0
 800248c:	81fb      	strh	r3, [r7, #14]
 800248e:	4613      	mov	r3, r2
 8002490:	81bb      	strh	r3, [r7, #12]
	return (uint8_t)HAL_I2C_Master_Transmit(&hi2c1, Dev_Address, p_Data, _Size, _Timeout);
 8002492:	89ba      	ldrh	r2, [r7, #12]
 8002494:	89f9      	ldrh	r1, [r7, #14]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	4613      	mov	r3, r2
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	4804      	ldr	r0, [pc, #16]	@ (80024b0 <I2C_1_Abstract_Master_Transmit_Blocking+0x30>)
 80024a0:	f003 f854 	bl	800554c <HAL_I2C_Master_Transmit>
 80024a4:	4603      	mov	r3, r0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	200003ac 	.word	0x200003ac

080024b4 <I2C_1_Abstract_Mem_Write_Blocking>:

uint8_t I2C_1_Abstract_Mem_Write_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af04      	add	r7, sp, #16
 80024ba:	603b      	str	r3, [r7, #0]
 80024bc:	4603      	mov	r3, r0
 80024be:	80fb      	strh	r3, [r7, #6]
 80024c0:	460b      	mov	r3, r1
 80024c2:	717b      	strb	r3, [r7, #5]
 80024c4:	4613      	mov	r3, r2
 80024c6:	713b      	strb	r3, [r7, #4]
	return (uint8_t)HAL_I2C_Mem_Write(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 80024c8:	797b      	ldrb	r3, [r7, #5]
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	793b      	ldrb	r3, [r7, #4]
 80024ce:	b298      	uxth	r0, r3
 80024d0:	88f9      	ldrh	r1, [r7, #6]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	9302      	str	r3, [sp, #8]
 80024d6:	8a3b      	ldrh	r3, [r7, #16]
 80024d8:	9301      	str	r3, [sp, #4]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	4603      	mov	r3, r0
 80024e0:	4803      	ldr	r0, [pc, #12]	@ (80024f0 <I2C_1_Abstract_Mem_Write_Blocking+0x3c>)
 80024e2:	f003 f931 	bl	8005748 <HAL_I2C_Mem_Write>
 80024e6:	4603      	mov	r3, r0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	200003ac 	.word	0x200003ac

080024f4 <I2C_DMA_Recive>:

uint8_t I2C_DMA_Recive(uint16_t Dev_Address,uint16_t reg,uint8_t *p_Data, uint16_t _Size){
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af02      	add	r7, sp, #8
 80024fa:	60ba      	str	r2, [r7, #8]
 80024fc:	461a      	mov	r2, r3
 80024fe:	4603      	mov	r3, r0
 8002500:	81fb      	strh	r3, [r7, #14]
 8002502:	460b      	mov	r3, r1
 8002504:	81bb      	strh	r3, [r7, #12]
 8002506:	4613      	mov	r3, r2
 8002508:	80fb      	strh	r3, [r7, #6]
	HAL_I2C_Mem_Read_DMA(&hi2c1, Dev_Address, reg, 1, p_Data, _Size);
 800250a:	89ba      	ldrh	r2, [r7, #12]
 800250c:	89f9      	ldrh	r1, [r7, #14]
 800250e:	88fb      	ldrh	r3, [r7, #6]
 8002510:	9301      	str	r3, [sp, #4]
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	2301      	movs	r3, #1
 8002518:	4803      	ldr	r0, [pc, #12]	@ (8002528 <I2C_DMA_Recive+0x34>)
 800251a:	f003 fd9f 	bl	800605c <HAL_I2C_Mem_Read_DMA>
	return 1;
 800251e:	2301      	movs	r3, #1
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	200003ac 	.word	0x200003ac

0800252c <I2C_RBlocking>:

uint8_t I2C_RBlocking(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size){
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af04      	add	r7, sp, #16
 8002532:	607b      	str	r3, [r7, #4]
 8002534:	4603      	mov	r3, r0
 8002536:	81fb      	strh	r3, [r7, #14]
 8002538:	460b      	mov	r3, r1
 800253a:	81bb      	strh	r3, [r7, #12]
 800253c:	4613      	mov	r3, r2
 800253e:	817b      	strh	r3, [r7, #10]

	HAL_I2C_Mem_Read(&hi2c1, DevAddress, MemAddress, MemAddSize, pData, Size,1000);
 8002540:	8978      	ldrh	r0, [r7, #10]
 8002542:	89ba      	ldrh	r2, [r7, #12]
 8002544:	89f9      	ldrh	r1, [r7, #14]
 8002546:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800254a:	9302      	str	r3, [sp, #8]
 800254c:	8b3b      	ldrh	r3, [r7, #24]
 800254e:	9301      	str	r3, [sp, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	4603      	mov	r3, r0
 8002556:	4804      	ldr	r0, [pc, #16]	@ (8002568 <I2C_RBlocking+0x3c>)
 8002558:	f003 f9f0 	bl	800593c <HAL_I2C_Mem_Read>
	return 1;
 800255c:	2301      	movs	r3, #1

}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	200003ac 	.word	0x200003ac

0800256c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002570:	b672      	cpsid	i
}
 8002572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002574:	bf00      	nop
 8002576:	e7fd      	b.n	8002574 <Error_Handler+0x8>

08002578 <MPU6050_Init>:
static uint8_t (*I2C_Recive)(uint16_t DevAddress,uint16_t reg,uint8_t *pData, uint16_t Size);
static uint8_t (*I2C_Transmit)(uint16_t DevAddress,uint16_t reg,uint8_t *pData, uint16_t Size);
static uint8_t (*I2C_Recive_Blocking)(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size);
static uint8_t (*I2C_Transmit_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);

uint8_t MPU6050_Init(MPU6050_t *MpuData){
 8002578:	b590      	push	{r4, r7, lr}
 800257a:	b087      	sub	sp, #28
 800257c:	af02      	add	r7, sp, #8
 800257e:	6078      	str	r0, [r7, #4]

    uint8_t check;
    uint8_t Data;

    MpuData->DMAREADY=1;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    // check device ID WHO_AM_I

    I2C_Recive_Blocking(MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1);
 8002588:	4b2f      	ldr	r3, [pc, #188]	@ (8002648 <MPU6050_Init+0xd0>)
 800258a:	681c      	ldr	r4, [r3, #0]
 800258c:	f107 030f 	add.w	r3, r7, #15
 8002590:	2201      	movs	r2, #1
 8002592:	9200      	str	r2, [sp, #0]
 8002594:	2201      	movs	r2, #1
 8002596:	2175      	movs	r1, #117	@ 0x75
 8002598:	20d0      	movs	r0, #208	@ 0xd0
 800259a:	47a0      	blx	r4
    if (check == 0x68)  // 0x68 will be returned by the sensor if everything goes well
 800259c:	7bfb      	ldrb	r3, [r7, #15]
 800259e:	2b68      	cmp	r3, #104	@ 0x68
 80025a0:	d14c      	bne.n	800263c <MPU6050_Init+0xc4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0x00;
 80025a2:	2300      	movs	r3, #0
 80025a4:	73bb      	strb	r3, [r7, #14]
        I2C_Transmit_Blocking(MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1,1000);
 80025a6:	4b29      	ldr	r3, [pc, #164]	@ (800264c <MPU6050_Init+0xd4>)
 80025a8:	681c      	ldr	r4, [r3, #0]
 80025aa:	f107 030e 	add.w	r3, r7, #14
 80025ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80025b2:	9201      	str	r2, [sp, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	9200      	str	r2, [sp, #0]
 80025b8:	2201      	movs	r2, #1
 80025ba:	216b      	movs	r1, #107	@ 0x6b
 80025bc:	20d0      	movs	r0, #208	@ 0xd0
 80025be:	47a0      	blx	r4

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80025c0:	2307      	movs	r3, #7
 80025c2:	73bb      	strb	r3, [r7, #14]
        I2C_Transmit_Blocking(MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1,1000);
 80025c4:	4b21      	ldr	r3, [pc, #132]	@ (800264c <MPU6050_Init+0xd4>)
 80025c6:	681c      	ldr	r4, [r3, #0]
 80025c8:	f107 030e 	add.w	r3, r7, #14
 80025cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80025d0:	9201      	str	r2, [sp, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	9200      	str	r2, [sp, #0]
 80025d6:	2201      	movs	r2, #1
 80025d8:	2119      	movs	r1, #25
 80025da:	20d0      	movs	r0, #208	@ 0xd0
 80025dc:	47a0      	blx	r4

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80025de:	2300      	movs	r3, #0
 80025e0:	73bb      	strb	r3, [r7, #14]
        I2C_Transmit_Blocking(MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1,1000);
 80025e2:	4b1a      	ldr	r3, [pc, #104]	@ (800264c <MPU6050_Init+0xd4>)
 80025e4:	681c      	ldr	r4, [r3, #0]
 80025e6:	f107 030e 	add.w	r3, r7, #14
 80025ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80025ee:	9201      	str	r2, [sp, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	9200      	str	r2, [sp, #0]
 80025f4:	2201      	movs	r2, #1
 80025f6:	211c      	movs	r1, #28
 80025f8:	20d0      	movs	r0, #208	@ 0xd0
 80025fa:	47a0      	blx	r4

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80025fc:	2300      	movs	r3, #0
 80025fe:	73bb      	strb	r3, [r7, #14]
        I2C_Transmit_Blocking(MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1,1000);
 8002600:	4b12      	ldr	r3, [pc, #72]	@ (800264c <MPU6050_Init+0xd4>)
 8002602:	681c      	ldr	r4, [r3, #0]
 8002604:	f107 030e 	add.w	r3, r7, #14
 8002608:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800260c:	9201      	str	r2, [sp, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	9200      	str	r2, [sp, #0]
 8002612:	2201      	movs	r2, #1
 8002614:	211b      	movs	r1, #27
 8002616:	20d0      	movs	r0, #208	@ 0xd0
 8002618:	47a0      	blx	r4

        Data = 0x03;
 800261a:	2303      	movs	r3, #3
 800261c:	73bb      	strb	r3, [r7, #14]
        I2C_Transmit_Blocking(MPU6050_ADDR, LOWPASS_CONFIG, 1, &Data, 1,1000);
 800261e:	4b0b      	ldr	r3, [pc, #44]	@ (800264c <MPU6050_Init+0xd4>)
 8002620:	681c      	ldr	r4, [r3, #0]
 8002622:	f107 030e 	add.w	r3, r7, #14
 8002626:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800262a:	9201      	str	r2, [sp, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	9200      	str	r2, [sp, #0]
 8002630:	2201      	movs	r2, #1
 8002632:	211a      	movs	r1, #26
 8002634:	20d0      	movs	r0, #208	@ 0xd0
 8002636:	47a0      	blx	r4

        return 0;
 8002638:	2300      	movs	r3, #0
 800263a:	e000      	b.n	800263e <MPU6050_Init+0xc6>
    }
    return 1;
 800263c:	2301      	movs	r3, #1
}
 800263e:	4618      	mov	r0, r3
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	bd90      	pop	{r4, r7, pc}
 8002646:	bf00      	nop
 8002648:	20000734 	.word	0x20000734
 800264c:	20000738 	.word	0x20000738

08002650 <MPU6050_Read_All>:


void MPU6050_Read_All(MPU6050_t *MpuData) {
 8002650:	b590      	push	{r4, r7, lr}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    if(!MpuData->DMAREADY)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00d      	beq.n	800267e <MPU6050_Read_All+0x2e>
    	return;

    I2C_Recive(MPU6050_ADDR, ACCEL_XOUT_H_REG,MpuData->Rec_Data, 14);
 8002662:	4b09      	ldr	r3, [pc, #36]	@ (8002688 <MPU6050_Read_All+0x38>)
 8002664:	681c      	ldr	r4, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800266c:	230e      	movs	r3, #14
 800266e:	213b      	movs	r1, #59	@ 0x3b
 8002670:	20d0      	movs	r0, #208	@ 0xd0
 8002672:	47a0      	blx	r4
    MpuData->DMAREADY=0;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800267c:	e000      	b.n	8002680 <MPU6050_Read_All+0x30>
    	return;
 800267e:	bf00      	nop

}
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	bd90      	pop	{r4, r7, pc}
 8002686:	bf00      	nop
 8002688:	2000072c 	.word	0x2000072c

0800268c <MPU6050_Calibrate>:

void MPU6050_Calibrate(MPU6050_t *mpu){
 800268c:	b590      	push	{r4, r7, lr}
 800268e:	b08d      	sub	sp, #52	@ 0x34
 8002690:	af02      	add	r7, sp, #8
 8002692:	6078      	str	r0, [r7, #4]
	int32_t temp_raw[6] = {0};
 8002694:	f107 030c 	add.w	r3, r7, #12
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]
 80026a2:	611a      	str	r2, [r3, #16]
 80026a4:	615a      	str	r2, [r3, #20]

	for (uint16_t i=0; i < NUM_SAMPLES; i++){
 80026a6:	2300      	movs	r3, #0
 80026a8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80026aa:	e066      	b.n	800277a <MPU6050_Calibrate+0xee>
		I2C_Recive_Blocking(MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, mpu->Rec_Data, 14);
 80026ac:	4b46      	ldr	r3, [pc, #280]	@ (80027c8 <MPU6050_Calibrate+0x13c>)
 80026ae:	681c      	ldr	r4, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3326      	adds	r3, #38	@ 0x26
 80026b4:	220e      	movs	r2, #14
 80026b6:	9200      	str	r2, [sp, #0]
 80026b8:	2201      	movs	r2, #1
 80026ba:	213b      	movs	r1, #59	@ 0x3b
 80026bc:	20d0      	movs	r0, #208	@ 0xd0
 80026be:	47a0      	blx	r4
		temp_raw[0] += (int16_t)((mpu->Rec_Data[0] << 8) | mpu->Rec_Data[1]);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	f892 2026 	ldrb.w	r2, [r2, #38]	@ 0x26
 80026c8:	b212      	sxth	r2, r2
 80026ca:	0212      	lsls	r2, r2, #8
 80026cc:	b211      	sxth	r1, r2
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 80026d4:	b212      	sxth	r2, r2
 80026d6:	430a      	orrs	r2, r1
 80026d8:	b212      	sxth	r2, r2
 80026da:	4413      	add	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]
		temp_raw[1] += (int16_t)((mpu->Rec_Data[2] << 8) | mpu->Rec_Data[3]);
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 80026e6:	b212      	sxth	r2, r2
 80026e8:	0212      	lsls	r2, r2, #8
 80026ea:	b211      	sxth	r1, r2
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
 80026f2:	b212      	sxth	r2, r2
 80026f4:	430a      	orrs	r2, r1
 80026f6:	b212      	sxth	r2, r2
 80026f8:	4413      	add	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
		temp_raw[2] += (int16_t)((mpu->Rec_Data[4] << 8) | mpu->Rec_Data[5]);
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 8002704:	b212      	sxth	r2, r2
 8002706:	0212      	lsls	r2, r2, #8
 8002708:	b211      	sxth	r1, r2
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 8002710:	b212      	sxth	r2, r2
 8002712:	430a      	orrs	r2, r1
 8002714:	b212      	sxth	r2, r2
 8002716:	4413      	add	r3, r2
 8002718:	617b      	str	r3, [r7, #20]

		temp_raw[3] += (int16_t)((mpu->Rec_Data[8 ] << 8) | mpu->Rec_Data[9 ]);
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8002722:	b212      	sxth	r2, r2
 8002724:	0212      	lsls	r2, r2, #8
 8002726:	b211      	sxth	r1, r2
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 800272e:	b212      	sxth	r2, r2
 8002730:	430a      	orrs	r2, r1
 8002732:	b212      	sxth	r2, r2
 8002734:	4413      	add	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
		temp_raw[4] += (int16_t)((mpu->Rec_Data[10] << 8) | mpu->Rec_Data[11]);
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 8002740:	b212      	sxth	r2, r2
 8002742:	0212      	lsls	r2, r2, #8
 8002744:	b211      	sxth	r1, r2
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	f892 2031 	ldrb.w	r2, [r2, #49]	@ 0x31
 800274c:	b212      	sxth	r2, r2
 800274e:	430a      	orrs	r2, r1
 8002750:	b212      	sxth	r2, r2
 8002752:	4413      	add	r3, r2
 8002754:	61fb      	str	r3, [r7, #28]
		temp_raw[5] += (int16_t)((mpu->Rec_Data[12] << 8) | mpu->Rec_Data[13]);
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 800275e:	b212      	sxth	r2, r2
 8002760:	0212      	lsls	r2, r2, #8
 8002762:	b211      	sxth	r1, r2
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	f892 2033 	ldrb.w	r2, [r2, #51]	@ 0x33
 800276a:	b212      	sxth	r2, r2
 800276c:	430a      	orrs	r2, r1
 800276e:	b212      	sxth	r2, r2
 8002770:	4413      	add	r3, r2
 8002772:	623b      	str	r3, [r7, #32]
	for (uint16_t i=0; i < NUM_SAMPLES; i++){
 8002774:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002776:	3301      	adds	r3, #1
 8002778:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800277a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800277c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002780:	d394      	bcc.n	80026ac <MPU6050_Calibrate+0x20>
	}

    mpu->Accel.X_Offset = (int16_t)(temp_raw[0] >> NUM_SAMPLES_BITS);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	131b      	asrs	r3, r3, #12
 8002786:	b21a      	sxth	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	83da      	strh	r2, [r3, #30]
    mpu->Accel.Y_Offset = (int16_t)(temp_raw[1] >> NUM_SAMPLES_BITS);
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	131b      	asrs	r3, r3, #12
 8002790:	b21a      	sxth	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	841a      	strh	r2, [r3, #32]
    mpu->Accel.Z_Offset = (int16_t)(temp_raw[2] >> NUM_SAMPLES_BITS)/* - SCALE_FACTOR*/;
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	131b      	asrs	r3, r3, #12
 800279a:	b21a      	sxth	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	845a      	strh	r2, [r3, #34]	@ 0x22

    mpu->Gyro.X_Offset = (int16_t)(temp_raw[3] >> NUM_SAMPLES_BITS);
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	131b      	asrs	r3, r3, #12
 80027a4:	b21a      	sxth	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	819a      	strh	r2, [r3, #12]
	mpu->Gyro.Y_Offset = (int16_t)(temp_raw[4] >> NUM_SAMPLES_BITS);
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	131b      	asrs	r3, r3, #12
 80027ae:	b21a      	sxth	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	81da      	strh	r2, [r3, #14]
	mpu->Gyro.Z_Offset = (int16_t)(temp_raw[5] >> NUM_SAMPLES_BITS);
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	131b      	asrs	r3, r3, #12
 80027b8:	b21a      	sxth	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	821a      	strh	r2, [r3, #16]

	//mpu->Angle.pitch = atan2f(mpu->Acc.offset.y, sqrtf(mpu->Acc.offset.x * mpu->Acc.offset.x + mpu->Acc.offset.z * mpu->Acc.offset.z)) * 180.0f / M_PI;
	//mpu->Angle.roll  = atan2f(-mpu->Acc.offset.x, mpu->Acc.offset.z) * 180.0f / M_PI;
}
 80027be:	bf00      	nop
 80027c0:	372c      	adds	r7, #44	@ 0x2c
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd90      	pop	{r4, r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000734 	.word	0x20000734

080027cc <MPU6050_MAF>:

void MPU6050_MAF(MPU6050_t *mpu){ //Moving Average Filter
 80027cc:	b490      	push	{r4, r7}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
	if(mpu->MAF.isOn){
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 8115 	beq.w	8002a0a <MPU6050_MAF+0x23e>
		mpu->MAF.isOn = 0;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
		for(uint8_t channel = 0; channel < NUM_AXIS; channel++){
 80027e8:	2300      	movs	r3, #0
 80027ea:	73fb      	strb	r3, [r7, #15]
 80027ec:	e057      	b.n	800289e <MPU6050_MAF+0xd2>
			mpu->MAF.sumData[channel] -= mpu->MAF.mediaBuffer[mpu->MAF.index][channel];
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	3310      	adds	r3, #16
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 8002800:	461c      	mov	r4, r3
 8002802:	7bf8      	ldrb	r0, [r7, #15]
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	4623      	mov	r3, r4
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	4423      	add	r3, r4
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	4403      	add	r3, r0
 8002810:	332c      	adds	r3, #44	@ 0x2c
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	440b      	add	r3, r1
 8002816:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800281a:	4619      	mov	r1, r3
 800281c:	7bfb      	ldrb	r3, [r7, #15]
 800281e:	1a52      	subs	r2, r2, r1
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	3310      	adds	r3, #16
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	605a      	str	r2, [r3, #4]
			mpu->MAF.sumData[channel] += mpu->MAF.rawData[channel];
 800282a:	7bfb      	ldrb	r3, [r7, #15]
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	3310      	adds	r3, #16
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	7bf9      	ldrb	r1, [r7, #15]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	311c      	adds	r1, #28
 800283c:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8002840:	4619      	mov	r1, r3
 8002842:	7bfb      	ldrb	r3, [r7, #15]
 8002844:	440a      	add	r2, r1
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	3310      	adds	r3, #16
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	605a      	str	r2, [r3, #4]
			mpu->MAF.mediaBuffer[mpu->MAF.index][channel] = mpu->MAF.rawData[channel];
 8002850:	7bfa      	ldrb	r2, [r7, #15]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 8002858:	4618      	mov	r0, r3
 800285a:	7bf9      	ldrb	r1, [r7, #15]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	321c      	adds	r2, #28
 8002860:	f933 4012 	ldrsh.w	r4, [r3, r2, lsl #1]
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	4603      	mov	r3, r0
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	4403      	add	r3, r0
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	440b      	add	r3, r1
 8002870:	332c      	adds	r3, #44	@ 0x2c
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	4413      	add	r3, r2
 8002876:	4622      	mov	r2, r4
 8002878:	809a      	strh	r2, [r3, #4]
			mpu->MAF.filtredData[channel] = (mpu->MAF.sumData[channel] >> NUM_MAF_BITS);
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	3310      	adds	r3, #16
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	10da      	asrs	r2, r3, #3
 8002888:	7bfb      	ldrb	r3, [r7, #15]
 800288a:	b211      	sxth	r1, r2
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	335c      	adds	r3, #92	@ 0x5c
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	4413      	add	r3, r2
 8002894:	460a      	mov	r2, r1
 8002896:	809a      	strh	r2, [r3, #4]
		for(uint8_t channel = 0; channel < NUM_AXIS; channel++){
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	3301      	adds	r3, #1
 800289c:	73fb      	strb	r3, [r7, #15]
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	2b05      	cmp	r3, #5
 80028a2:	d9a4      	bls.n	80027ee <MPU6050_MAF+0x22>
		}
		mpu->MAF.index++;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 80028aa:	3301      	adds	r3, #1
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
		mpu->MAF.index &= (NUM_MAF - 1);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8

		// ACC: CALCULATE TRUE ACCELERATION

		mpu->MAF.filtredData[0] = mpu->MAF.filtredData[0] - mpu->Accel.X_Offset;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	@ 0xbc
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	b29b      	uxth	r3, r3
 80028da:	b21a      	sxth	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
		mpu->MAF.filtredData[1] = mpu->MAF.filtredData[1] - mpu->Accel.Y_Offset;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	@ 0xbe
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	b21a      	sxth	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
		mpu->MAF.filtredData[2]  = mpu->MAF.filtredData[2] - mpu->Accel.Z_Offset;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	@ 0xc0
 8002904:	b29a      	uxth	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 800290c:	b29b      	uxth	r3, r3
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	b29b      	uxth	r3, r3
 8002912:	b21a      	sxth	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
		// GYR: CALCULATE TRUE ACCELERATION
		mpu->MAF.filtredData[3] = mpu->MAF.filtredData[3] - mpu->Gyro.X_Offset;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	@ 0xc2
 8002920:	b29a      	uxth	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002928:	b29b      	uxth	r3, r3
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	b29b      	uxth	r3, r3
 800292e:	b21a      	sxth	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
		mpu->MAF.filtredData[4] = mpu->MAF.filtredData[4] - mpu->Gyro.Y_Offset;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	@ 0xc4
 800293c:	b29a      	uxth	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002944:	b29b      	uxth	r3, r3
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	b29b      	uxth	r3, r3
 800294a:	b21a      	sxth	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f8a3 20c4 	strh.w	r2, [r3, #196]	@ 0xc4
		mpu->MAF.filtredData[5] = mpu->MAF.filtredData[5] - mpu->Gyro.Z_Offset;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	@ 0xc6
 8002958:	b29a      	uxth	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002960:	b29b      	uxth	r3, r3
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	b29b      	uxth	r3, r3
 8002966:	b21a      	sxth	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6

		mpu->Accel.X_filtered = mpu->MAF.filtredData[0] - mpu->Accel.X_Offset;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	@ 0xbc
 8002974:	b29a      	uxth	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800297c:	b29b      	uxth	r3, r3
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	b29b      	uxth	r3, r3
 8002982:	b21a      	sxth	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	831a      	strh	r2, [r3, #24]
		mpu->Accel.Y_filtered = mpu->MAF.filtredData[1] - mpu->Accel.Y_Offset;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	@ 0xbe
 800298e:	b29a      	uxth	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002996:	b29b      	uxth	r3, r3
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	b29b      	uxth	r3, r3
 800299c:	b21a      	sxth	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	835a      	strh	r2, [r3, #26]
		mpu->Accel.Z_filtered  = mpu->MAF.filtredData[2] - mpu->Accel.Z_Offset;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	@ 0xc0
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	b21a      	sxth	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	839a      	strh	r2, [r3, #28]
		// GYR: CALCULATE TRUE ACCELERATION
		mpu->Gyro.X_filtered = mpu->MAF.filtredData[3] - mpu->Gyro.X_Offset;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	@ 0xc2
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	b21a      	sxth	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	80da      	strh	r2, [r3, #6]
		mpu->Gyro.Y_filtered = mpu->MAF.filtredData[4] - mpu->Gyro.Y_Offset;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	@ 0xc4
 80029dc:	b29a      	uxth	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	b21a      	sxth	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	811a      	strh	r2, [r3, #8]
		mpu->Gyro.Z_filtered = mpu->MAF.filtredData[5] - mpu->Gyro.Z_Offset;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	@ 0xc6
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	b21a      	sxth	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	815a      	strh	r2, [r3, #10]
	}
}
 8002a0a:	bf00      	nop
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc90      	pop	{r4, r7}
 8002a12:	4770      	bx	lr

08002a14 <MPU6050_NonBlocking_DMA>:

void MPU6050_NonBlocking_DMA(uint8_t (*Master_Transmit)(uint16_t DevAddress,uint16_t reg,uint8_t *pData, uint16_t Size),uint8_t (*Master_Recive)(uint16_t DevAddress,uint16_t reg,uint8_t *pData, uint16_t Size)){
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
	I2C_Transmit = Master_Transmit;
 8002a1e:	4a06      	ldr	r2, [pc, #24]	@ (8002a38 <MPU6050_NonBlocking_DMA+0x24>)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6013      	str	r3, [r2, #0]
	I2C_Recive = Master_Recive;
 8002a24:	4a05      	ldr	r2, [pc, #20]	@ (8002a3c <MPU6050_NonBlocking_DMA+0x28>)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	6013      	str	r3, [r2, #0]
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	20000730 	.word	0x20000730
 8002a3c:	2000072c 	.word	0x2000072c

08002a40 <MPU6050_I2C_Blocking>:
void MPU6050_I2C_Blocking(uint8_t (*Recive_Blocking)(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size),uint8_t (*Transmit_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout)){
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
	I2C_Recive_Blocking = Recive_Blocking;
 8002a4a:	4a06      	ldr	r2, [pc, #24]	@ (8002a64 <MPU6050_I2C_Blocking+0x24>)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6013      	str	r3, [r2, #0]
	I2C_Transmit_Blocking = Transmit_Blocking;
 8002a50:	4a05      	ldr	r2, [pc, #20]	@ (8002a68 <MPU6050_I2C_Blocking+0x28>)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	6013      	str	r3, [r2, #0]
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	20000734 	.word	0x20000734
 8002a68:	20000738 	.word	0x20000738

08002a6c <SSD1306_DrawBitmap>:
	if(i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
	else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
}

void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60ba      	str	r2, [r7, #8]
 8002a74:	461a      	mov	r2, r3
 8002a76:	4603      	mov	r3, r0
 8002a78:	81fb      	strh	r3, [r7, #14]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	81bb      	strh	r3, [r7, #12]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	80fb      	strh	r3, [r7, #6]
	int16_t byteWidth = (w + 7) / 8;
 8002a82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a86:	3307      	adds	r3, #7
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	da00      	bge.n	8002a8e <SSD1306_DrawBitmap+0x22>
 8002a8c:	3307      	adds	r3, #7
 8002a8e:	10db      	asrs	r3, r3, #3
 8002a90:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8002a92:	2300      	movs	r3, #0
 8002a94:	75fb      	strb	r3, [r7, #23]
    for(int16_t j=0; j<h; j++, y++)
 8002a96:	2300      	movs	r3, #0
 8002a98:	82bb      	strh	r3, [r7, #20]
 8002a9a:	e044      	b.n	8002b26 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	827b      	strh	r3, [r7, #18]
 8002aa0:	e02f      	b.n	8002b02 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8002aa2:	8a7b      	ldrh	r3, [r7, #18]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8002aac:	7dfb      	ldrb	r3, [r7, #23]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	75fb      	strb	r3, [r7, #23]
 8002ab2:	e012      	b.n	8002ada <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002ab4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002ab8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002abc:	fb03 f202 	mul.w	r2, r3, r2
 8002ac0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	da00      	bge.n	8002aca <SSD1306_DrawBitmap+0x5e>
 8002ac8:	3307      	adds	r3, #7
 8002aca:	10db      	asrs	r3, r3, #3
 8002acc:	b21b      	sxth	r3, r3
 8002ace:	4413      	add	r3, r2
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8002ada:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	da09      	bge.n	8002af6 <SSD1306_DrawBitmap+0x8a>
 8002ae2:	89fa      	ldrh	r2, [r7, #14]
 8002ae4:	8a7b      	ldrh	r3, [r7, #18]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	89b9      	ldrh	r1, [r7, #12]
 8002aec:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 f951 	bl	8002d98 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8002af6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	3301      	adds	r3, #1
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	827b      	strh	r3, [r7, #18]
 8002b02:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002b06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	dbc9      	blt.n	8002aa2 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8002b0e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3301      	adds	r3, #1
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	82bb      	strh	r3, [r7, #20]
 8002b1a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	3301      	adds	r3, #1
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	81bb      	strh	r3, [r7, #12]
 8002b26:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002b2a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	dbb4      	blt.n	8002a9c <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8002b32:	bf00      	nop
 8002b34:	bf00      	nop
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <SSD1306_Init>:

void SSD1306_Init()
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0

	SSD1306_WRITECOMMAND(0xAE);
 8002b40:	22ae      	movs	r2, #174	@ 0xae
 8002b42:	2100      	movs	r1, #0
 8002b44:	2078      	movs	r0, #120	@ 0x78
 8002b46:	f000 fb45 	bl	80031d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	2078      	movs	r0, #120	@ 0x78
 8002b50:	f000 fb40 	bl	80031d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 8002b54:	2210      	movs	r2, #16
 8002b56:	2100      	movs	r1, #0
 8002b58:	2078      	movs	r0, #120	@ 0x78
 8002b5a:	f000 fb3b 	bl	80031d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0);
 8002b5e:	22b0      	movs	r2, #176	@ 0xb0
 8002b60:	2100      	movs	r1, #0
 8002b62:	2078      	movs	r0, #120	@ 0x78
 8002b64:	f000 fb36 	bl	80031d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8);
 8002b68:	22c8      	movs	r2, #200	@ 0xc8
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	2078      	movs	r0, #120	@ 0x78
 8002b6e:	f000 fb31 	bl	80031d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 8002b72:	2200      	movs	r2, #0
 8002b74:	2100      	movs	r1, #0
 8002b76:	2078      	movs	r0, #120	@ 0x78
 8002b78:	f000 fb2c 	bl	80031d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 8002b7c:	2210      	movs	r2, #16
 8002b7e:	2100      	movs	r1, #0
 8002b80:	2078      	movs	r0, #120	@ 0x78
 8002b82:	f000 fb27 	bl	80031d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40);
 8002b86:	2240      	movs	r2, #64	@ 0x40
 8002b88:	2100      	movs	r1, #0
 8002b8a:	2078      	movs	r0, #120	@ 0x78
 8002b8c:	f000 fb22 	bl	80031d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81);
 8002b90:	2281      	movs	r2, #129	@ 0x81
 8002b92:	2100      	movs	r1, #0
 8002b94:	2078      	movs	r0, #120	@ 0x78
 8002b96:	f000 fb1d 	bl	80031d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002b9a:	22ff      	movs	r2, #255	@ 0xff
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	2078      	movs	r0, #120	@ 0x78
 8002ba0:	f000 fb18 	bl	80031d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1);
 8002ba4:	22a1      	movs	r2, #161	@ 0xa1
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	2078      	movs	r0, #120	@ 0x78
 8002baa:	f000 fb13 	bl	80031d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6);
 8002bae:	22a6      	movs	r2, #166	@ 0xa6
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	2078      	movs	r0, #120	@ 0x78
 8002bb4:	f000 fb0e 	bl	80031d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8);
 8002bb8:	22a8      	movs	r2, #168	@ 0xa8
 8002bba:	2100      	movs	r1, #0
 8002bbc:	2078      	movs	r0, #120	@ 0x78
 8002bbe:	f000 fb09 	bl	80031d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F);
 8002bc2:	223f      	movs	r2, #63	@ 0x3f
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	2078      	movs	r0, #120	@ 0x78
 8002bc8:	f000 fb04 	bl	80031d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4);
 8002bcc:	22a4      	movs	r2, #164	@ 0xa4
 8002bce:	2100      	movs	r1, #0
 8002bd0:	2078      	movs	r0, #120	@ 0x78
 8002bd2:	f000 faff 	bl	80031d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3);
 8002bd6:	22d3      	movs	r2, #211	@ 0xd3
 8002bd8:	2100      	movs	r1, #0
 8002bda:	2078      	movs	r0, #120	@ 0x78
 8002bdc:	f000 fafa 	bl	80031d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 8002be0:	2200      	movs	r2, #0
 8002be2:	2100      	movs	r1, #0
 8002be4:	2078      	movs	r0, #120	@ 0x78
 8002be6:	f000 faf5 	bl	80031d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5);
 8002bea:	22d5      	movs	r2, #213	@ 0xd5
 8002bec:	2100      	movs	r1, #0
 8002bee:	2078      	movs	r0, #120	@ 0x78
 8002bf0:	f000 faf0 	bl	80031d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0);
 8002bf4:	22f0      	movs	r2, #240	@ 0xf0
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	2078      	movs	r0, #120	@ 0x78
 8002bfa:	f000 faeb 	bl	80031d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9);
 8002bfe:	22d9      	movs	r2, #217	@ 0xd9
 8002c00:	2100      	movs	r1, #0
 8002c02:	2078      	movs	r0, #120	@ 0x78
 8002c04:	f000 fae6 	bl	80031d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22);
 8002c08:	2222      	movs	r2, #34	@ 0x22
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	2078      	movs	r0, #120	@ 0x78
 8002c0e:	f000 fae1 	bl	80031d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA);
 8002c12:	22da      	movs	r2, #218	@ 0xda
 8002c14:	2100      	movs	r1, #0
 8002c16:	2078      	movs	r0, #120	@ 0x78
 8002c18:	f000 fadc 	bl	80031d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002c1c:	2212      	movs	r2, #18
 8002c1e:	2100      	movs	r1, #0
 8002c20:	2078      	movs	r0, #120	@ 0x78
 8002c22:	f000 fad7 	bl	80031d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB);
 8002c26:	22db      	movs	r2, #219	@ 0xdb
 8002c28:	2100      	movs	r1, #0
 8002c2a:	2078      	movs	r0, #120	@ 0x78
 8002c2c:	f000 fad2 	bl	80031d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 8002c30:	2220      	movs	r2, #32
 8002c32:	2100      	movs	r1, #0
 8002c34:	2078      	movs	r0, #120	@ 0x78
 8002c36:	f000 facd 	bl	80031d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D);
 8002c3a:	228d      	movs	r2, #141	@ 0x8d
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	2078      	movs	r0, #120	@ 0x78
 8002c40:	f000 fac8 	bl	80031d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14);
 8002c44:	2214      	movs	r2, #20
 8002c46:	2100      	movs	r1, #0
 8002c48:	2078      	movs	r0, #120	@ 0x78
 8002c4a:	f000 fac3 	bl	80031d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF);
 8002c4e:	22af      	movs	r2, #175	@ 0xaf
 8002c50:	2100      	movs	r1, #0
 8002c52:	2078      	movs	r0, #120	@ 0x78
 8002c54:	f000 fabe 	bl	80031d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002c58:	222e      	movs	r2, #46	@ 0x2e
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	2078      	movs	r0, #120	@ 0x78
 8002c5e:	f000 fab9 	bl	80031d4 <SSD1306_I2C_Write>

	SSD1306.CurrentX = 0;
 8002c62:	4b0e      	ldr	r3, [pc, #56]	@ (8002c9c <SSD1306_Init+0x160>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002c68:	4b0c      	ldr	r3, [pc, #48]	@ (8002c9c <SSD1306_Init+0x160>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8002c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c9c <SSD1306_Init+0x160>)
 8002c70:	2201      	movs	r2, #1
 8002c72:	715a      	strb	r2, [r3, #5]
	SSD1306.Page=0;
 8002c74:	4b09      	ldr	r3, [pc, #36]	@ (8002c9c <SSD1306_Init+0x160>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	719a      	strb	r2, [r3, #6]
	SSD1306.DMA = CMD;
 8002c7a:	4b08      	ldr	r3, [pc, #32]	@ (8002c9c <SSD1306_Init+0x160>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	71da      	strb	r2, [r3, #7]
	SSD1306.Needtorefresh=1;
 8002c80:	4b06      	ldr	r3, [pc, #24]	@ (8002c9c <SSD1306_Init+0x160>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	741a      	strb	r2, [r3, #16]
	SSD1306.DMAREADY=0;
 8002c86:	4b05      	ldr	r3, [pc, #20]	@ (8002c9c <SSD1306_Init+0x160>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	745a      	strb	r2, [r3, #17]
	SSD1306_Fill(BLACK);
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	f000 f86b 	bl	8002d68 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8002c92:	f000 f805 	bl	8002ca0 <SSD1306_UpdateScreen>

}
 8002c96:	bf00      	nop
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20000b44 	.word	0x20000b44

08002ca0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void)
{
 8002ca0:	b598      	push	{r3, r4, r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
	if(SSD1306.DMAREADY && SSD1306.Needtorefresh){
 8002ca4:	4b2c      	ldr	r3, [pc, #176]	@ (8002d58 <SSD1306_UpdateScreen+0xb8>)
 8002ca6:	7c5b      	ldrb	r3, [r3, #17]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d052      	beq.n	8002d52 <SSD1306_UpdateScreen+0xb2>
 8002cac:	4b2a      	ldr	r3, [pc, #168]	@ (8002d58 <SSD1306_UpdateScreen+0xb8>)
 8002cae:	7c1b      	ldrb	r3, [r3, #16]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d04e      	beq.n	8002d52 <SSD1306_UpdateScreen+0xb2>
		switch(SSD1306.DMA){
 8002cb4:	4b28      	ldr	r3, [pc, #160]	@ (8002d58 <SSD1306_UpdateScreen+0xb8>)
 8002cb6:	79db      	ldrb	r3, [r3, #7]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d01c      	beq.n	8002cf6 <SSD1306_UpdateScreen+0x56>
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d137      	bne.n	8002d30 <SSD1306_UpdateScreen+0x90>
			case Data:
				if(I2C_DMA_Master_Transmit(SSD1306_I2C_ADDR,0x40, &SSD1306_Buffer[SSD1306_WIDTH*SSD1306.Page], SSD1306_WIDTH)==1){
 8002cc0:	4b26      	ldr	r3, [pc, #152]	@ (8002d5c <SSD1306_UpdateScreen+0xbc>)
 8002cc2:	681c      	ldr	r4, [r3, #0]
 8002cc4:	4b24      	ldr	r3, [pc, #144]	@ (8002d58 <SSD1306_UpdateScreen+0xb8>)
 8002cc6:	799b      	ldrb	r3, [r3, #6]
 8002cc8:	01db      	lsls	r3, r3, #7
 8002cca:	4a25      	ldr	r2, [pc, #148]	@ (8002d60 <SSD1306_UpdateScreen+0xc0>)
 8002ccc:	441a      	add	r2, r3
 8002cce:	2380      	movs	r3, #128	@ 0x80
 8002cd0:	2140      	movs	r1, #64	@ 0x40
 8002cd2:	2078      	movs	r0, #120	@ 0x78
 8002cd4:	47a0      	blx	r4
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d12d      	bne.n	8002d38 <SSD1306_UpdateScreen+0x98>
					SSD1306.Page++;
 8002cdc:	4b1e      	ldr	r3, [pc, #120]	@ (8002d58 <SSD1306_UpdateScreen+0xb8>)
 8002cde:	799b      	ldrb	r3, [r3, #6]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8002d58 <SSD1306_UpdateScreen+0xb8>)
 8002ce6:	719a      	strb	r2, [r3, #6]
					SSD1306.DMA=CMD;
 8002ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8002d58 <SSD1306_UpdateScreen+0xb8>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	71da      	strb	r2, [r3, #7]
					SSD1306.DMAREADY=0;
 8002cee:	4b1a      	ldr	r3, [pc, #104]	@ (8002d58 <SSD1306_UpdateScreen+0xb8>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	745a      	strb	r2, [r3, #17]
				}
				break;
 8002cf4:	e020      	b.n	8002d38 <SSD1306_UpdateScreen+0x98>
			case CMD:

				SSD1306.Commands[0]=0xB0 + SSD1306.Page;
 8002cf6:	4b18      	ldr	r3, [pc, #96]	@ (8002d58 <SSD1306_UpdateScreen+0xb8>)
 8002cf8:	799b      	ldrb	r3, [r3, #6]
 8002cfa:	3b50      	subs	r3, #80	@ 0x50
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	4b16      	ldr	r3, [pc, #88]	@ (8002d58 <SSD1306_UpdateScreen+0xb8>)
 8002d00:	721a      	strb	r2, [r3, #8]
				SSD1306.Commands[1]=0x00;
 8002d02:	4b15      	ldr	r3, [pc, #84]	@ (8002d58 <SSD1306_UpdateScreen+0xb8>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	725a      	strb	r2, [r3, #9]
				SSD1306.Commands[2]=0x10;
 8002d08:	4b13      	ldr	r3, [pc, #76]	@ (8002d58 <SSD1306_UpdateScreen+0xb8>)
 8002d0a:	2210      	movs	r2, #16
 8002d0c:	729a      	strb	r2, [r3, #10]

				if(I2C_DMA_Master_Transmit(SSD1306_I2C_ADDR,0x00, &SSD1306.Commands[0],3)==1){
 8002d0e:	4b13      	ldr	r3, [pc, #76]	@ (8002d5c <SSD1306_UpdateScreen+0xbc>)
 8002d10:	681c      	ldr	r4, [r3, #0]
 8002d12:	2303      	movs	r3, #3
 8002d14:	4a13      	ldr	r2, [pc, #76]	@ (8002d64 <SSD1306_UpdateScreen+0xc4>)
 8002d16:	2100      	movs	r1, #0
 8002d18:	2078      	movs	r0, #120	@ 0x78
 8002d1a:	47a0      	blx	r4
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d10c      	bne.n	8002d3c <SSD1306_UpdateScreen+0x9c>
					SSD1306.DMA=Data;
 8002d22:	4b0d      	ldr	r3, [pc, #52]	@ (8002d58 <SSD1306_UpdateScreen+0xb8>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	71da      	strb	r2, [r3, #7]
					SSD1306.DMAREADY=0;
 8002d28:	4b0b      	ldr	r3, [pc, #44]	@ (8002d58 <SSD1306_UpdateScreen+0xb8>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	745a      	strb	r2, [r3, #17]
				}
				break;
 8002d2e:	e005      	b.n	8002d3c <SSD1306_UpdateScreen+0x9c>

			default:
				SSD1306.Page=8;
 8002d30:	4b09      	ldr	r3, [pc, #36]	@ (8002d58 <SSD1306_UpdateScreen+0xb8>)
 8002d32:	2208      	movs	r2, #8
 8002d34:	719a      	strb	r2, [r3, #6]
				break;
 8002d36:	e002      	b.n	8002d3e <SSD1306_UpdateScreen+0x9e>
				break;
 8002d38:	bf00      	nop
 8002d3a:	e000      	b.n	8002d3e <SSD1306_UpdateScreen+0x9e>
				break;
 8002d3c:	bf00      	nop
			}
		if(SSD1306.Page>7){
 8002d3e:	4b06      	ldr	r3, [pc, #24]	@ (8002d58 <SSD1306_UpdateScreen+0xb8>)
 8002d40:	799b      	ldrb	r3, [r3, #6]
 8002d42:	2b07      	cmp	r3, #7
 8002d44:	d905      	bls.n	8002d52 <SSD1306_UpdateScreen+0xb2>
			SSD1306.Page=0;
 8002d46:	4b04      	ldr	r3, [pc, #16]	@ (8002d58 <SSD1306_UpdateScreen+0xb8>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	719a      	strb	r2, [r3, #6]
			SSD1306.Needtorefresh=0;
 8002d4c:	4b02      	ldr	r3, [pc, #8]	@ (8002d58 <SSD1306_UpdateScreen+0xb8>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	741a      	strb	r2, [r3, #16]
		}
	}
}
 8002d52:	bf00      	nop
 8002d54:	bd98      	pop	{r3, r4, r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20000b44 	.word	0x20000b44
 8002d5c:	20000b3c 	.word	0x20000b3c
 8002d60:	2000073c 	.word	0x2000073c
 8002d64:	20000b4c 	.word	0x20000b4c

08002d68 <SSD1306_Fill>:
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	71fb      	strb	r3, [r7, #7]
	memset(SSD1306_Buffer, (color == BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <SSD1306_Fill+0x14>
 8002d78:	2300      	movs	r3, #0
 8002d7a:	e000      	b.n	8002d7e <SSD1306_Fill+0x16>
 8002d7c:	23ff      	movs	r3, #255	@ 0xff
 8002d7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d82:	4619      	mov	r1, r3
 8002d84:	4803      	ldr	r0, [pc, #12]	@ (8002d94 <SSD1306_Fill+0x2c>)
 8002d86:	f00d fc74 	bl	8010672 <memset>
}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	2000073c 	.word	0x2000073c

08002d98 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	80fb      	strh	r3, [r7, #6]
 8002da2:	460b      	mov	r3, r1
 8002da4:	80bb      	strh	r3, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	70fb      	strb	r3, [r7, #3]
	if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT){
 8002daa:	88fb      	ldrh	r3, [r7, #6]
 8002dac:	2b7f      	cmp	r3, #127	@ 0x7f
 8002dae:	d848      	bhi.n	8002e42 <SSD1306_DrawPixel+0xaa>
 8002db0:	88bb      	ldrh	r3, [r7, #4]
 8002db2:	2b3f      	cmp	r3, #63	@ 0x3f
 8002db4:	d845      	bhi.n	8002e42 <SSD1306_DrawPixel+0xaa>
		return;
	}

	if(SSD1306.Inverted){
 8002db6:	4b26      	ldr	r3, [pc, #152]	@ (8002e50 <SSD1306_DrawPixel+0xb8>)
 8002db8:	791b      	ldrb	r3, [r3, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d006      	beq.n	8002dcc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002dbe:	78fb      	ldrb	r3, [r7, #3]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	bf0c      	ite	eq
 8002dc4:	2301      	moveq	r3, #1
 8002dc6:	2300      	movne	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	70fb      	strb	r3, [r7, #3]
	}

	if(color == WHITE){
 8002dcc:	78fb      	ldrb	r3, [r7, #3]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d11a      	bne.n	8002e08 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002dd2:	88fa      	ldrh	r2, [r7, #6]
 8002dd4:	88bb      	ldrh	r3, [r7, #4]
 8002dd6:	08db      	lsrs	r3, r3, #3
 8002dd8:	b298      	uxth	r0, r3
 8002dda:	4603      	mov	r3, r0
 8002ddc:	01db      	lsls	r3, r3, #7
 8002dde:	4413      	add	r3, r2
 8002de0:	4a1c      	ldr	r2, [pc, #112]	@ (8002e54 <SSD1306_DrawPixel+0xbc>)
 8002de2:	5cd3      	ldrb	r3, [r2, r3]
 8002de4:	b25a      	sxtb	r2, r3
 8002de6:	88bb      	ldrh	r3, [r7, #4]
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	2101      	movs	r1, #1
 8002dee:	fa01 f303 	lsl.w	r3, r1, r3
 8002df2:	b25b      	sxtb	r3, r3
 8002df4:	4313      	orrs	r3, r2
 8002df6:	b259      	sxtb	r1, r3
 8002df8:	88fa      	ldrh	r2, [r7, #6]
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	01db      	lsls	r3, r3, #7
 8002dfe:	4413      	add	r3, r2
 8002e00:	b2c9      	uxtb	r1, r1
 8002e02:	4a14      	ldr	r2, [pc, #80]	@ (8002e54 <SSD1306_DrawPixel+0xbc>)
 8002e04:	54d1      	strb	r1, [r2, r3]
 8002e06:	e01d      	b.n	8002e44 <SSD1306_DrawPixel+0xac>
	}else{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002e08:	88fa      	ldrh	r2, [r7, #6]
 8002e0a:	88bb      	ldrh	r3, [r7, #4]
 8002e0c:	08db      	lsrs	r3, r3, #3
 8002e0e:	b298      	uxth	r0, r3
 8002e10:	4603      	mov	r3, r0
 8002e12:	01db      	lsls	r3, r3, #7
 8002e14:	4413      	add	r3, r2
 8002e16:	4a0f      	ldr	r2, [pc, #60]	@ (8002e54 <SSD1306_DrawPixel+0xbc>)
 8002e18:	5cd3      	ldrb	r3, [r2, r3]
 8002e1a:	b25a      	sxtb	r2, r3
 8002e1c:	88bb      	ldrh	r3, [r7, #4]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	2101      	movs	r1, #1
 8002e24:	fa01 f303 	lsl.w	r3, r1, r3
 8002e28:	b25b      	sxtb	r3, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	b25b      	sxtb	r3, r3
 8002e2e:	4013      	ands	r3, r2
 8002e30:	b259      	sxtb	r1, r3
 8002e32:	88fa      	ldrh	r2, [r7, #6]
 8002e34:	4603      	mov	r3, r0
 8002e36:	01db      	lsls	r3, r3, #7
 8002e38:	4413      	add	r3, r2
 8002e3a:	b2c9      	uxtb	r1, r1
 8002e3c:	4a05      	ldr	r2, [pc, #20]	@ (8002e54 <SSD1306_DrawPixel+0xbc>)
 8002e3e:	54d1      	strb	r1, [r2, r3]
 8002e40:	e000      	b.n	8002e44 <SSD1306_DrawPixel+0xac>
		return;
 8002e42:	bf00      	nop
	}
}
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	20000b44 	.word	0x20000b44
 8002e54:	2000073c 	.word	0x2000073c

08002e58 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	460a      	mov	r2, r1
 8002e62:	80fb      	strh	r3, [r7, #6]
 8002e64:	4613      	mov	r3, r2
 8002e66:	80bb      	strh	r3, [r7, #4]
	SSD1306.CurrentX = x;
 8002e68:	4a05      	ldr	r2, [pc, #20]	@ (8002e80 <SSD1306_GotoXY+0x28>)
 8002e6a:	88fb      	ldrh	r3, [r7, #6]
 8002e6c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002e6e:	4a04      	ldr	r2, [pc, #16]	@ (8002e80 <SSD1306_GotoXY+0x28>)
 8002e70:	88bb      	ldrh	r3, [r7, #4]
 8002e72:	8053      	strh	r3, [r2, #2]
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	20000b44 	.word	0x20000b44

08002e84 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	6039      	str	r1, [r7, #0]
 8002e8e:	71fb      	strb	r3, [r7, #7]
 8002e90:	4613      	mov	r3, r2
 8002e92:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	if(SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) || SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)){
 8002e94:	4b39      	ldr	r3, [pc, #228]	@ (8002f7c <SSD1306_Putc+0xf8>)
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	2b7f      	cmp	r3, #127	@ 0x7f
 8002ea2:	dc07      	bgt.n	8002eb4 <SSD1306_Putc+0x30>
 8002ea4:	4b35      	ldr	r3, [pc, #212]	@ (8002f7c <SSD1306_Putc+0xf8>)
 8002ea6:	885b      	ldrh	r3, [r3, #2]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	785b      	ldrb	r3, [r3, #1]
 8002eae:	4413      	add	r3, r2
 8002eb0:	2b3f      	cmp	r3, #63	@ 0x3f
 8002eb2:	dd01      	ble.n	8002eb8 <SSD1306_Putc+0x34>
		return 0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	e05d      	b.n	8002f74 <SSD1306_Putc+0xf0>
	}

	for(i=0; i<Font->FontHeight; i++){
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	e04b      	b.n	8002f56 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	79fb      	ldrb	r3, [r7, #7]
 8002ec4:	3b20      	subs	r3, #32
 8002ec6:	6839      	ldr	r1, [r7, #0]
 8002ec8:	7849      	ldrb	r1, [r1, #1]
 8002eca:	fb01 f303 	mul.w	r3, r1, r3
 8002ece:	4619      	mov	r1, r3
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	440b      	add	r3, r1
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	4413      	add	r3, r2
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	60fb      	str	r3, [r7, #12]
		for(j=0; j<Font->FontWidth; j++){
 8002edc:	2300      	movs	r3, #0
 8002ede:	613b      	str	r3, [r7, #16]
 8002ee0:	e030      	b.n	8002f44 <SSD1306_Putc+0xc0>
			if((b << j) & 0x8000){
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d010      	beq.n	8002f14 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002ef2:	4b22      	ldr	r3, [pc, #136]	@ (8002f7c <SSD1306_Putc+0xf8>)
 8002ef4:	881a      	ldrh	r2, [r3, #0]
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	4413      	add	r3, r2
 8002efc:	b298      	uxth	r0, r3
 8002efe:	4b1f      	ldr	r3, [pc, #124]	@ (8002f7c <SSD1306_Putc+0xf8>)
 8002f00:	885a      	ldrh	r2, [r3, #2]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	4413      	add	r3, r2
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	79ba      	ldrb	r2, [r7, #6]
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	f7ff ff43 	bl	8002d98 <SSD1306_DrawPixel>
 8002f12:	e014      	b.n	8002f3e <SSD1306_Putc+0xba>
			}else{
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002f14:	4b19      	ldr	r3, [pc, #100]	@ (8002f7c <SSD1306_Putc+0xf8>)
 8002f16:	881a      	ldrh	r2, [r3, #0]
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	b298      	uxth	r0, r3
 8002f20:	4b16      	ldr	r3, [pc, #88]	@ (8002f7c <SSD1306_Putc+0xf8>)
 8002f22:	885a      	ldrh	r2, [r3, #2]
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	4413      	add	r3, r2
 8002f2a:	b299      	uxth	r1, r3
 8002f2c:	79bb      	ldrb	r3, [r7, #6]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	bf0c      	ite	eq
 8002f32:	2301      	moveq	r3, #1
 8002f34:	2300      	movne	r3, #0
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	461a      	mov	r2, r3
 8002f3a:	f7ff ff2d 	bl	8002d98 <SSD1306_DrawPixel>
		for(j=0; j<Font->FontWidth; j++){
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	3301      	adds	r3, #1
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d3c8      	bcc.n	8002ee2 <SSD1306_Putc+0x5e>
	for(i=0; i<Font->FontHeight; i++){
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	3301      	adds	r3, #1
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	785b      	ldrb	r3, [r3, #1]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d3ad      	bcc.n	8002ebe <SSD1306_Putc+0x3a>
			}
		}
	}
	SSD1306.CurrentX += Font->FontWidth;
 8002f62:	4b06      	ldr	r3, [pc, #24]	@ (8002f7c <SSD1306_Putc+0xf8>)
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	7812      	ldrb	r2, [r2, #0]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	4b03      	ldr	r3, [pc, #12]	@ (8002f7c <SSD1306_Putc+0xf8>)
 8002f70:	801a      	strh	r2, [r3, #0]
	return ch;
 8002f72:	79fb      	ldrb	r3, [r7, #7]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	20000b44 	.word	0x20000b44

08002f80 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	71fb      	strb	r3, [r7, #7]
	while(*str)
 8002f8e:	e012      	b.n	8002fb6 <SSD1306_Puts+0x36>
	{
		if(SSD1306_Putc(*str, Font, color) != *str){
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	79fa      	ldrb	r2, [r7, #7]
 8002f96:	68b9      	ldr	r1, [r7, #8]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff ff73 	bl	8002e84 <SSD1306_Putc>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d002      	beq.n	8002fb0 <SSD1306_Puts+0x30>
			return *str;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	e008      	b.n	8002fc2 <SSD1306_Puts+0x42>
		}
		str++;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	60fb      	str	r3, [r7, #12]
	while(*str)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1e8      	bne.n	8002f90 <SSD1306_Puts+0x10>
	}
	return *str;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	781b      	ldrb	r3, [r3, #0]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <SSD1306_DrawLine>:

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c)
{
 8002fca:	b590      	push	{r4, r7, lr}
 8002fcc:	b087      	sub	sp, #28
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	4604      	mov	r4, r0
 8002fd2:	4608      	mov	r0, r1
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	4623      	mov	r3, r4
 8002fda:	80fb      	strh	r3, [r7, #6]
 8002fdc:	4603      	mov	r3, r0
 8002fde:	80bb      	strh	r3, [r7, #4]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	807b      	strh	r3, [r7, #2]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	if(x0 >= SSD1306_WIDTH){
 8002fe8:	88fb      	ldrh	r3, [r7, #6]
 8002fea:	2b7f      	cmp	r3, #127	@ 0x7f
 8002fec:	d901      	bls.n	8002ff2 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8002fee:	237f      	movs	r3, #127	@ 0x7f
 8002ff0:	80fb      	strh	r3, [r7, #6]
	}
	if(x1 >= SSD1306_WIDTH){
 8002ff2:	887b      	ldrh	r3, [r7, #2]
 8002ff4:	2b7f      	cmp	r3, #127	@ 0x7f
 8002ff6:	d901      	bls.n	8002ffc <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8002ff8:	237f      	movs	r3, #127	@ 0x7f
 8002ffa:	807b      	strh	r3, [r7, #2]
	}
	if(y0 >= SSD1306_HEIGHT){
 8002ffc:	88bb      	ldrh	r3, [r7, #4]
 8002ffe:	2b3f      	cmp	r3, #63	@ 0x3f
 8003000:	d901      	bls.n	8003006 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8003002:	233f      	movs	r3, #63	@ 0x3f
 8003004:	80bb      	strh	r3, [r7, #4]
	}
	if(y1 >= SSD1306_HEIGHT){
 8003006:	883b      	ldrh	r3, [r7, #0]
 8003008:	2b3f      	cmp	r3, #63	@ 0x3f
 800300a:	d901      	bls.n	8003010 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 800300c:	233f      	movs	r3, #63	@ 0x3f
 800300e:	803b      	strh	r3, [r7, #0]
	}
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8003010:	88fa      	ldrh	r2, [r7, #6]
 8003012:	887b      	ldrh	r3, [r7, #2]
 8003014:	429a      	cmp	r2, r3
 8003016:	d205      	bcs.n	8003024 <SSD1306_DrawLine+0x5a>
 8003018:	887a      	ldrh	r2, [r7, #2]
 800301a:	88fb      	ldrh	r3, [r7, #6]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	b29b      	uxth	r3, r3
 8003020:	b21b      	sxth	r3, r3
 8003022:	e004      	b.n	800302e <SSD1306_DrawLine+0x64>
 8003024:	88fa      	ldrh	r2, [r7, #6]
 8003026:	887b      	ldrh	r3, [r7, #2]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	b29b      	uxth	r3, r3
 800302c:	b21b      	sxth	r3, r3
 800302e:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8003030:	88ba      	ldrh	r2, [r7, #4]
 8003032:	883b      	ldrh	r3, [r7, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d205      	bcs.n	8003044 <SSD1306_DrawLine+0x7a>
 8003038:	883a      	ldrh	r2, [r7, #0]
 800303a:	88bb      	ldrh	r3, [r7, #4]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	b29b      	uxth	r3, r3
 8003040:	b21b      	sxth	r3, r3
 8003042:	e004      	b.n	800304e <SSD1306_DrawLine+0x84>
 8003044:	88ba      	ldrh	r2, [r7, #4]
 8003046:	883b      	ldrh	r3, [r7, #0]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	b29b      	uxth	r3, r3
 800304c:	b21b      	sxth	r3, r3
 800304e:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8003050:	88fa      	ldrh	r2, [r7, #6]
 8003052:	887b      	ldrh	r3, [r7, #2]
 8003054:	429a      	cmp	r2, r3
 8003056:	d201      	bcs.n	800305c <SSD1306_DrawLine+0x92>
 8003058:	2301      	movs	r3, #1
 800305a:	e001      	b.n	8003060 <SSD1306_DrawLine+0x96>
 800305c:	f04f 33ff 	mov.w	r3, #4294967295
 8003060:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 8003062:	88ba      	ldrh	r2, [r7, #4]
 8003064:	883b      	ldrh	r3, [r7, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d201      	bcs.n	800306e <SSD1306_DrawLine+0xa4>
 800306a:	2301      	movs	r3, #1
 800306c:	e001      	b.n	8003072 <SSD1306_DrawLine+0xa8>
 800306e:	f04f 33ff 	mov.w	r3, #4294967295
 8003072:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8003074:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003078:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800307c:	429a      	cmp	r2, r3
 800307e:	dd06      	ble.n	800308e <SSD1306_DrawLine+0xc4>
 8003080:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003084:	0fda      	lsrs	r2, r3, #31
 8003086:	4413      	add	r3, r2
 8003088:	105b      	asrs	r3, r3, #1
 800308a:	b21b      	sxth	r3, r3
 800308c:	e006      	b.n	800309c <SSD1306_DrawLine+0xd2>
 800308e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003092:	0fda      	lsrs	r2, r3, #31
 8003094:	4413      	add	r3, r2
 8003096:	105b      	asrs	r3, r3, #1
 8003098:	425b      	negs	r3, r3
 800309a:	b21b      	sxth	r3, r3
 800309c:	82fb      	strh	r3, [r7, #22]

	if(dx == 0){
 800309e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d129      	bne.n	80030fa <SSD1306_DrawLine+0x130>
		if(y1 < y0){
 80030a6:	883a      	ldrh	r2, [r7, #0]
 80030a8:	88bb      	ldrh	r3, [r7, #4]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d205      	bcs.n	80030ba <SSD1306_DrawLine+0xf0>
			tmp = y1;
 80030ae:	883b      	ldrh	r3, [r7, #0]
 80030b0:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80030b2:	88bb      	ldrh	r3, [r7, #4]
 80030b4:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80030b6:	893b      	ldrh	r3, [r7, #8]
 80030b8:	80bb      	strh	r3, [r7, #4]
		}
		if(x1 < x0){
 80030ba:	887a      	ldrh	r2, [r7, #2]
 80030bc:	88fb      	ldrh	r3, [r7, #6]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d205      	bcs.n	80030ce <SSD1306_DrawLine+0x104>
			tmp = x1;
 80030c2:	887b      	ldrh	r3, [r7, #2]
 80030c4:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80030ca:	893b      	ldrh	r3, [r7, #8]
 80030cc:	80fb      	strh	r3, [r7, #6]
		}
		for(i=y0; i<=y1; i++){
 80030ce:	88bb      	ldrh	r3, [r7, #4]
 80030d0:	82bb      	strh	r3, [r7, #20]
 80030d2:	e00c      	b.n	80030ee <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 80030d4:	8ab9      	ldrh	r1, [r7, #20]
 80030d6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80030da:	88fb      	ldrh	r3, [r7, #6]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff fe5b 	bl	8002d98 <SSD1306_DrawPixel>
		for(i=y0; i<=y1; i++){
 80030e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	3301      	adds	r3, #1
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	82bb      	strh	r3, [r7, #20]
 80030ee:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80030f2:	883b      	ldrh	r3, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	dded      	ble.n	80030d4 <SSD1306_DrawLine+0x10a>
		}
		return;
 80030f8:	e05f      	b.n	80031ba <SSD1306_DrawLine+0x1f0>
	}

	if(dy == 0){
 80030fa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d129      	bne.n	8003156 <SSD1306_DrawLine+0x18c>
		if(y1 < y0){
 8003102:	883a      	ldrh	r2, [r7, #0]
 8003104:	88bb      	ldrh	r3, [r7, #4]
 8003106:	429a      	cmp	r2, r3
 8003108:	d205      	bcs.n	8003116 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 800310a:	883b      	ldrh	r3, [r7, #0]
 800310c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800310e:	88bb      	ldrh	r3, [r7, #4]
 8003110:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8003112:	893b      	ldrh	r3, [r7, #8]
 8003114:	80bb      	strh	r3, [r7, #4]
		}
		if(x1 < x0){
 8003116:	887a      	ldrh	r2, [r7, #2]
 8003118:	88fb      	ldrh	r3, [r7, #6]
 800311a:	429a      	cmp	r2, r3
 800311c:	d205      	bcs.n	800312a <SSD1306_DrawLine+0x160>
			tmp = x1;
 800311e:	887b      	ldrh	r3, [r7, #2]
 8003120:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8003122:	88fb      	ldrh	r3, [r7, #6]
 8003124:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8003126:	893b      	ldrh	r3, [r7, #8]
 8003128:	80fb      	strh	r3, [r7, #6]
		}
		for(i = x0; i <= x1; i++){
 800312a:	88fb      	ldrh	r3, [r7, #6]
 800312c:	82bb      	strh	r3, [r7, #20]
 800312e:	e00c      	b.n	800314a <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8003130:	8abb      	ldrh	r3, [r7, #20]
 8003132:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003136:	88b9      	ldrh	r1, [r7, #4]
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff fe2d 	bl	8002d98 <SSD1306_DrawPixel>
		for(i = x0; i <= x1; i++){
 800313e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003142:	b29b      	uxth	r3, r3
 8003144:	3301      	adds	r3, #1
 8003146:	b29b      	uxth	r3, r3
 8003148:	82bb      	strh	r3, [r7, #20]
 800314a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800314e:	887b      	ldrh	r3, [r7, #2]
 8003150:	429a      	cmp	r2, r3
 8003152:	dded      	ble.n	8003130 <SSD1306_DrawLine+0x166>
		}
		return;
 8003154:	e031      	b.n	80031ba <SSD1306_DrawLine+0x1f0>
	}

	while(1)
	{
		SSD1306_DrawPixel(x0, y0, c);
 8003156:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800315a:	88b9      	ldrh	r1, [r7, #4]
 800315c:	88fb      	ldrh	r3, [r7, #6]
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff fe1a 	bl	8002d98 <SSD1306_DrawPixel>
		if(x0 == x1 && y0 == y1){
 8003164:	88fa      	ldrh	r2, [r7, #6]
 8003166:	887b      	ldrh	r3, [r7, #2]
 8003168:	429a      	cmp	r2, r3
 800316a:	d103      	bne.n	8003174 <SSD1306_DrawLine+0x1aa>
 800316c:	88ba      	ldrh	r2, [r7, #4]
 800316e:	883b      	ldrh	r3, [r7, #0]
 8003170:	429a      	cmp	r2, r3
 8003172:	d021      	beq.n	80031b8 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err;
 8003174:	8afb      	ldrh	r3, [r7, #22]
 8003176:	817b      	strh	r3, [r7, #10]
		if(e2 > -dx){
 8003178:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800317c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003180:	425b      	negs	r3, r3
 8003182:	429a      	cmp	r2, r3
 8003184:	dd08      	ble.n	8003198 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8003186:	8afa      	ldrh	r2, [r7, #22]
 8003188:	8a3b      	ldrh	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	b29b      	uxth	r3, r3
 800318e:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8003190:	89fa      	ldrh	r2, [r7, #14]
 8003192:	88fb      	ldrh	r3, [r7, #6]
 8003194:	4413      	add	r3, r2
 8003196:	80fb      	strh	r3, [r7, #6]
		}
		if(e2 < dy){
 8003198:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800319c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	dad8      	bge.n	8003156 <SSD1306_DrawLine+0x18c>
			err += dx;
 80031a4:	8afa      	ldrh	r2, [r7, #22]
 80031a6:	8a7b      	ldrh	r3, [r7, #18]
 80031a8:	4413      	add	r3, r2
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 80031ae:	89ba      	ldrh	r2, [r7, #12]
 80031b0:	88bb      	ldrh	r3, [r7, #4]
 80031b2:	4413      	add	r3, r2
 80031b4:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 80031b6:	e7ce      	b.n	8003156 <SSD1306_DrawLine+0x18c>
			break;
 80031b8:	bf00      	nop
		}
	}
}
 80031ba:	371c      	adds	r7, #28
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd90      	pop	{r4, r7, pc}

080031c0 <SSD1306_Clear>:
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
    }
}

void SSD1306_Clear(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
	SSD1306_Fill(0);
 80031c4:	2000      	movs	r0, #0
 80031c6:	f7ff fdcf 	bl	8002d68 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80031ca:	f7ff fd69 	bl	8002ca0 <SSD1306_UpdateScreen>
}
 80031ce:	bf00      	nop
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <SSD1306_I2C_Write>:
//uint8_t SSD1306_I2C_WriteMulti(uint8_t address, uint16_t reg, uint8_t* data, uint16_t count) {
//
//	return (uint8_t)I2C_DMA_Master_Transmit(address, reg, data, count);
//}

void SSD1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data){
 80031d4:	b590      	push	{r4, r7, lr}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	71fb      	strb	r3, [r7, #7]
 80031de:	460b      	mov	r3, r1
 80031e0:	71bb      	strb	r3, [r7, #6]
 80031e2:	4613      	mov	r3, r2
 80031e4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80031e6:	79bb      	ldrb	r3, [r7, #6]
 80031e8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80031ea:	797b      	ldrb	r3, [r7, #5]
 80031ec:	737b      	strb	r3, [r7, #13]
	I2C_Master_Transmit_Blocking(address, dt, 2, 10);
 80031ee:	4b06      	ldr	r3, [pc, #24]	@ (8003208 <SSD1306_I2C_Write+0x34>)
 80031f0:	681c      	ldr	r4, [r3, #0]
 80031f2:	79fb      	ldrb	r3, [r7, #7]
 80031f4:	b298      	uxth	r0, r3
 80031f6:	f107 010c 	add.w	r1, r7, #12
 80031fa:	230a      	movs	r3, #10
 80031fc:	2202      	movs	r2, #2
 80031fe:	47a0      	blx	r4
}
 8003200:	bf00      	nop
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	bd90      	pop	{r4, r7, pc}
 8003208:	20000b40 	.word	0x20000b40

0800320c <Display_Set_I2C_Master_Transmit>:

void Display_Set_I2C_Master_Transmit(uint8_t (*Master_Transmit)(uint16_t DevAddress,uint16_t reg, uint8_t *pData, uint16_t Size),uint8_t (*Master_Transmit_Blocking)(uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)){
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
	I2C_DMA_Master_Transmit = Master_Transmit;
 8003216:	4a06      	ldr	r2, [pc, #24]	@ (8003230 <Display_Set_I2C_Master_Transmit+0x24>)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6013      	str	r3, [r2, #0]
	I2C_Master_Transmit_Blocking = Master_Transmit_Blocking;
 800321c:	4a05      	ldr	r2, [pc, #20]	@ (8003234 <Display_Set_I2C_Master_Transmit+0x28>)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	6013      	str	r3, [r2, #0]
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	20000b3c 	.word	0x20000b3c
 8003234:	20000b40 	.word	0x20000b40

08003238 <SSD1306_DMAREADY>:

void SSD1306_DMAREADY(uint8_t val){
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	71fb      	strb	r3, [r7, #7]
	SSD1306.DMAREADY=val;
 8003242:	4a04      	ldr	r2, [pc, #16]	@ (8003254 <SSD1306_DMAREADY+0x1c>)
 8003244:	79fb      	ldrb	r3, [r7, #7]
 8003246:	7453      	strb	r3, [r2, #17]
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	20000b44 	.word	0x20000b44

08003258 <SSD1306_RefreshReady>:

void SSD1306_RefreshReady(){
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
	SSD1306.Needtorefresh=1;
 800325c:	4b03      	ldr	r3, [pc, #12]	@ (800326c <SSD1306_RefreshReady+0x14>)
 800325e:	2201      	movs	r2, #1
 8003260:	741a      	strb	r2, [r3, #16]
}
 8003262:	bf00      	nop
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	20000b44 	.word	0x20000b44

08003270 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	607b      	str	r3, [r7, #4]
 800327a:	4b13      	ldr	r3, [pc, #76]	@ (80032c8 <HAL_MspInit+0x58>)
 800327c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800327e:	4a12      	ldr	r2, [pc, #72]	@ (80032c8 <HAL_MspInit+0x58>)
 8003280:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003284:	6453      	str	r3, [r2, #68]	@ 0x44
 8003286:	4b10      	ldr	r3, [pc, #64]	@ (80032c8 <HAL_MspInit+0x58>)
 8003288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800328e:	607b      	str	r3, [r7, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	603b      	str	r3, [r7, #0]
 8003296:	4b0c      	ldr	r3, [pc, #48]	@ (80032c8 <HAL_MspInit+0x58>)
 8003298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329a:	4a0b      	ldr	r2, [pc, #44]	@ (80032c8 <HAL_MspInit+0x58>)
 800329c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80032a2:	4b09      	ldr	r3, [pc, #36]	@ (80032c8 <HAL_MspInit+0x58>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032aa:	603b      	str	r3, [r7, #0]
 80032ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 80032ae:	2200      	movs	r2, #0
 80032b0:	2100      	movs	r1, #0
 80032b2:	2051      	movs	r0, #81	@ 0x51
 80032b4:	f001 fa55 	bl	8004762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80032b8:	2051      	movs	r0, #81	@ 0x51
 80032ba:	f001 fa6e 	bl	800479a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40023800 	.word	0x40023800

080032cc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08a      	sub	sp, #40	@ 0x28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d4:	f107 0314 	add.w	r3, r7, #20
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	60da      	str	r2, [r3, #12]
 80032e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a3f      	ldr	r2, [pc, #252]	@ (80033e8 <HAL_ADC_MspInit+0x11c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d178      	bne.n	80033e0 <HAL_ADC_MspInit+0x114>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	4b3e      	ldr	r3, [pc, #248]	@ (80033ec <HAL_ADC_MspInit+0x120>)
 80032f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f6:	4a3d      	ldr	r2, [pc, #244]	@ (80033ec <HAL_ADC_MspInit+0x120>)
 80032f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80032fe:	4b3b      	ldr	r3, [pc, #236]	@ (80033ec <HAL_ADC_MspInit+0x120>)
 8003300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003306:	613b      	str	r3, [r7, #16]
 8003308:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800330a:	2300      	movs	r3, #0
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	4b37      	ldr	r3, [pc, #220]	@ (80033ec <HAL_ADC_MspInit+0x120>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003312:	4a36      	ldr	r2, [pc, #216]	@ (80033ec <HAL_ADC_MspInit+0x120>)
 8003314:	f043 0301 	orr.w	r3, r3, #1
 8003318:	6313      	str	r3, [r2, #48]	@ 0x30
 800331a:	4b34      	ldr	r3, [pc, #208]	@ (80033ec <HAL_ADC_MspInit+0x120>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	60fb      	str	r3, [r7, #12]
 8003324:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	4b30      	ldr	r3, [pc, #192]	@ (80033ec <HAL_ADC_MspInit+0x120>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332e:	4a2f      	ldr	r2, [pc, #188]	@ (80033ec <HAL_ADC_MspInit+0x120>)
 8003330:	f043 0302 	orr.w	r3, r3, #2
 8003334:	6313      	str	r3, [r2, #48]	@ 0x30
 8003336:	4b2d      	ldr	r3, [pc, #180]	@ (80033ec <HAL_ADC_MspInit+0x120>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	60bb      	str	r3, [r7, #8]
 8003340:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8003342:	23fe      	movs	r3, #254	@ 0xfe
 8003344:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003346:	2303      	movs	r3, #3
 8003348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334a:	2300      	movs	r3, #0
 800334c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800334e:	f107 0314 	add.w	r3, r7, #20
 8003352:	4619      	mov	r1, r3
 8003354:	4826      	ldr	r0, [pc, #152]	@ (80033f0 <HAL_ADC_MspInit+0x124>)
 8003356:	f001 fde7 	bl	8004f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800335a:	2301      	movs	r3, #1
 800335c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800335e:	2303      	movs	r3, #3
 8003360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003366:	f107 0314 	add.w	r3, r7, #20
 800336a:	4619      	mov	r1, r3
 800336c:	4821      	ldr	r0, [pc, #132]	@ (80033f4 <HAL_ADC_MspInit+0x128>)
 800336e:	f001 fddb 	bl	8004f28 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003372:	4b21      	ldr	r3, [pc, #132]	@ (80033f8 <HAL_ADC_MspInit+0x12c>)
 8003374:	4a21      	ldr	r2, [pc, #132]	@ (80033fc <HAL_ADC_MspInit+0x130>)
 8003376:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003378:	4b1f      	ldr	r3, [pc, #124]	@ (80033f8 <HAL_ADC_MspInit+0x12c>)
 800337a:	2200      	movs	r2, #0
 800337c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800337e:	4b1e      	ldr	r3, [pc, #120]	@ (80033f8 <HAL_ADC_MspInit+0x12c>)
 8003380:	2200      	movs	r2, #0
 8003382:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003384:	4b1c      	ldr	r3, [pc, #112]	@ (80033f8 <HAL_ADC_MspInit+0x12c>)
 8003386:	2200      	movs	r2, #0
 8003388:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800338a:	4b1b      	ldr	r3, [pc, #108]	@ (80033f8 <HAL_ADC_MspInit+0x12c>)
 800338c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003390:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003392:	4b19      	ldr	r3, [pc, #100]	@ (80033f8 <HAL_ADC_MspInit+0x12c>)
 8003394:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003398:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800339a:	4b17      	ldr	r3, [pc, #92]	@ (80033f8 <HAL_ADC_MspInit+0x12c>)
 800339c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80033a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80033a2:	4b15      	ldr	r3, [pc, #84]	@ (80033f8 <HAL_ADC_MspInit+0x12c>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80033a8:	4b13      	ldr	r3, [pc, #76]	@ (80033f8 <HAL_ADC_MspInit+0x12c>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033ae:	4b12      	ldr	r3, [pc, #72]	@ (80033f8 <HAL_ADC_MspInit+0x12c>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80033b4:	4810      	ldr	r0, [pc, #64]	@ (80033f8 <HAL_ADC_MspInit+0x12c>)
 80033b6:	f001 fa0b 	bl	80047d0 <HAL_DMA_Init>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 80033c0:	f7ff f8d4 	bl	800256c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a0c      	ldr	r2, [pc, #48]	@ (80033f8 <HAL_ADC_MspInit+0x12c>)
 80033c8:	639a      	str	r2, [r3, #56]	@ 0x38
 80033ca:	4a0b      	ldr	r2, [pc, #44]	@ (80033f8 <HAL_ADC_MspInit+0x12c>)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80033d0:	2200      	movs	r2, #0
 80033d2:	2100      	movs	r1, #0
 80033d4:	2012      	movs	r0, #18
 80033d6:	f001 f9c4 	bl	8004762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80033da:	2012      	movs	r0, #18
 80033dc:	f001 f9dd 	bl	800479a <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80033e0:	bf00      	nop
 80033e2:	3728      	adds	r7, #40	@ 0x28
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40012000 	.word	0x40012000
 80033ec:	40023800 	.word	0x40023800
 80033f0:	40020000 	.word	0x40020000
 80033f4:	40020400 	.word	0x40020400
 80033f8:	2000034c 	.word	0x2000034c
 80033fc:	40026410 	.word	0x40026410

08003400 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08a      	sub	sp, #40	@ 0x28
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003408:	f107 0314 	add.w	r3, r7, #20
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	60da      	str	r2, [r3, #12]
 8003416:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a4f      	ldr	r2, [pc, #316]	@ (800355c <HAL_I2C_MspInit+0x15c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	f040 8097 	bne.w	8003552 <HAL_I2C_MspInit+0x152>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003424:	2300      	movs	r3, #0
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	4b4d      	ldr	r3, [pc, #308]	@ (8003560 <HAL_I2C_MspInit+0x160>)
 800342a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342c:	4a4c      	ldr	r2, [pc, #304]	@ (8003560 <HAL_I2C_MspInit+0x160>)
 800342e:	f043 0302 	orr.w	r3, r3, #2
 8003432:	6313      	str	r3, [r2, #48]	@ 0x30
 8003434:	4b4a      	ldr	r3, [pc, #296]	@ (8003560 <HAL_I2C_MspInit+0x160>)
 8003436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003440:	23c0      	movs	r3, #192	@ 0xc0
 8003442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003444:	2312      	movs	r3, #18
 8003446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003448:	2300      	movs	r3, #0
 800344a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800344c:	2303      	movs	r3, #3
 800344e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003450:	2304      	movs	r3, #4
 8003452:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003454:	f107 0314 	add.w	r3, r7, #20
 8003458:	4619      	mov	r1, r3
 800345a:	4842      	ldr	r0, [pc, #264]	@ (8003564 <HAL_I2C_MspInit+0x164>)
 800345c:	f001 fd64 	bl	8004f28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003460:	2300      	movs	r3, #0
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	4b3e      	ldr	r3, [pc, #248]	@ (8003560 <HAL_I2C_MspInit+0x160>)
 8003466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003468:	4a3d      	ldr	r2, [pc, #244]	@ (8003560 <HAL_I2C_MspInit+0x160>)
 800346a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800346e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003470:	4b3b      	ldr	r3, [pc, #236]	@ (8003560 <HAL_I2C_MspInit+0x160>)
 8003472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003474:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 800347c:	4b3a      	ldr	r3, [pc, #232]	@ (8003568 <HAL_I2C_MspInit+0x168>)
 800347e:	4a3b      	ldr	r2, [pc, #236]	@ (800356c <HAL_I2C_MspInit+0x16c>)
 8003480:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8003482:	4b39      	ldr	r3, [pc, #228]	@ (8003568 <HAL_I2C_MspInit+0x168>)
 8003484:	2200      	movs	r2, #0
 8003486:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003488:	4b37      	ldr	r3, [pc, #220]	@ (8003568 <HAL_I2C_MspInit+0x168>)
 800348a:	2240      	movs	r2, #64	@ 0x40
 800348c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800348e:	4b36      	ldr	r3, [pc, #216]	@ (8003568 <HAL_I2C_MspInit+0x168>)
 8003490:	2200      	movs	r2, #0
 8003492:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003494:	4b34      	ldr	r3, [pc, #208]	@ (8003568 <HAL_I2C_MspInit+0x168>)
 8003496:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800349a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800349c:	4b32      	ldr	r3, [pc, #200]	@ (8003568 <HAL_I2C_MspInit+0x168>)
 800349e:	2200      	movs	r2, #0
 80034a0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034a2:	4b31      	ldr	r3, [pc, #196]	@ (8003568 <HAL_I2C_MspInit+0x168>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80034a8:	4b2f      	ldr	r3, [pc, #188]	@ (8003568 <HAL_I2C_MspInit+0x168>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80034ae:	4b2e      	ldr	r3, [pc, #184]	@ (8003568 <HAL_I2C_MspInit+0x168>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034b4:	4b2c      	ldr	r3, [pc, #176]	@ (8003568 <HAL_I2C_MspInit+0x168>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80034ba:	482b      	ldr	r0, [pc, #172]	@ (8003568 <HAL_I2C_MspInit+0x168>)
 80034bc:	f001 f988 	bl	80047d0 <HAL_DMA_Init>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 80034c6:	f7ff f851 	bl	800256c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a26      	ldr	r2, [pc, #152]	@ (8003568 <HAL_I2C_MspInit+0x168>)
 80034ce:	635a      	str	r2, [r3, #52]	@ 0x34
 80034d0:	4a25      	ldr	r2, [pc, #148]	@ (8003568 <HAL_I2C_MspInit+0x168>)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80034d6:	4b26      	ldr	r3, [pc, #152]	@ (8003570 <HAL_I2C_MspInit+0x170>)
 80034d8:	4a26      	ldr	r2, [pc, #152]	@ (8003574 <HAL_I2C_MspInit+0x174>)
 80034da:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80034dc:	4b24      	ldr	r3, [pc, #144]	@ (8003570 <HAL_I2C_MspInit+0x170>)
 80034de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034e2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034e4:	4b22      	ldr	r3, [pc, #136]	@ (8003570 <HAL_I2C_MspInit+0x170>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034ea:	4b21      	ldr	r3, [pc, #132]	@ (8003570 <HAL_I2C_MspInit+0x170>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003570 <HAL_I2C_MspInit+0x170>)
 80034f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034f6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003570 <HAL_I2C_MspInit+0x170>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003570 <HAL_I2C_MspInit+0x170>)
 8003500:	2200      	movs	r2, #0
 8003502:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003504:	4b1a      	ldr	r3, [pc, #104]	@ (8003570 <HAL_I2C_MspInit+0x170>)
 8003506:	2200      	movs	r2, #0
 8003508:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800350a:	4b19      	ldr	r3, [pc, #100]	@ (8003570 <HAL_I2C_MspInit+0x170>)
 800350c:	2200      	movs	r2, #0
 800350e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003510:	4b17      	ldr	r3, [pc, #92]	@ (8003570 <HAL_I2C_MspInit+0x170>)
 8003512:	2200      	movs	r2, #0
 8003514:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003516:	4816      	ldr	r0, [pc, #88]	@ (8003570 <HAL_I2C_MspInit+0x170>)
 8003518:	f001 f95a 	bl	80047d0 <HAL_DMA_Init>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 8003522:	f7ff f823 	bl	800256c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a11      	ldr	r2, [pc, #68]	@ (8003570 <HAL_I2C_MspInit+0x170>)
 800352a:	639a      	str	r2, [r3, #56]	@ 0x38
 800352c:	4a10      	ldr	r2, [pc, #64]	@ (8003570 <HAL_I2C_MspInit+0x170>)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003532:	2200      	movs	r2, #0
 8003534:	2100      	movs	r1, #0
 8003536:	201f      	movs	r0, #31
 8003538:	f001 f913 	bl	8004762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800353c:	201f      	movs	r0, #31
 800353e:	f001 f92c 	bl	800479a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003542:	2200      	movs	r2, #0
 8003544:	2100      	movs	r1, #0
 8003546:	2020      	movs	r0, #32
 8003548:	f001 f90b 	bl	8004762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800354c:	2020      	movs	r0, #32
 800354e:	f001 f924 	bl	800479a <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003552:	bf00      	nop
 8003554:	3728      	adds	r7, #40	@ 0x28
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40005400 	.word	0x40005400
 8003560:	40023800 	.word	0x40023800
 8003564:	40020400 	.word	0x40020400
 8003568:	20000400 	.word	0x20000400
 800356c:	40026028 	.word	0x40026028
 8003570:	20000460 	.word	0x20000460
 8003574:	40026010 	.word	0x40026010

08003578 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a38      	ldr	r2, [pc, #224]	@ (8003668 <HAL_TIM_Base_MspInit+0xf0>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d116      	bne.n	80035b8 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	4b37      	ldr	r3, [pc, #220]	@ (800366c <HAL_TIM_Base_MspInit+0xf4>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003592:	4a36      	ldr	r2, [pc, #216]	@ (800366c <HAL_TIM_Base_MspInit+0xf4>)
 8003594:	f043 0302 	orr.w	r3, r3, #2
 8003598:	6413      	str	r3, [r2, #64]	@ 0x40
 800359a:	4b34      	ldr	r3, [pc, #208]	@ (800366c <HAL_TIM_Base_MspInit+0xf4>)
 800359c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80035a6:	2200      	movs	r2, #0
 80035a8:	2100      	movs	r1, #0
 80035aa:	201d      	movs	r0, #29
 80035ac:	f001 f8d9 	bl	8004762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80035b0:	201d      	movs	r0, #29
 80035b2:	f001 f8f2 	bl	800479a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM11_MspInit 1 */

    /* USER CODE END TIM11_MspInit 1 */
  }

}
 80035b6:	e052      	b.n	800365e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM9)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a2c      	ldr	r2, [pc, #176]	@ (8003670 <HAL_TIM_Base_MspInit+0xf8>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d116      	bne.n	80035f0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80035c2:	2300      	movs	r3, #0
 80035c4:	613b      	str	r3, [r7, #16]
 80035c6:	4b29      	ldr	r3, [pc, #164]	@ (800366c <HAL_TIM_Base_MspInit+0xf4>)
 80035c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ca:	4a28      	ldr	r2, [pc, #160]	@ (800366c <HAL_TIM_Base_MspInit+0xf4>)
 80035cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80035d2:	4b26      	ldr	r3, [pc, #152]	@ (800366c <HAL_TIM_Base_MspInit+0xf4>)
 80035d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80035de:	2200      	movs	r2, #0
 80035e0:	2100      	movs	r1, #0
 80035e2:	2018      	movs	r0, #24
 80035e4:	f001 f8bd 	bl	8004762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80035e8:	2018      	movs	r0, #24
 80035ea:	f001 f8d6 	bl	800479a <HAL_NVIC_EnableIRQ>
}
 80035ee:	e036      	b.n	800365e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003674 <HAL_TIM_Base_MspInit+0xfc>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d116      	bne.n	8003628 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80035fa:	2300      	movs	r3, #0
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	4b1b      	ldr	r3, [pc, #108]	@ (800366c <HAL_TIM_Base_MspInit+0xf4>)
 8003600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003602:	4a1a      	ldr	r2, [pc, #104]	@ (800366c <HAL_TIM_Base_MspInit+0xf4>)
 8003604:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003608:	6453      	str	r3, [r2, #68]	@ 0x44
 800360a:	4b18      	ldr	r3, [pc, #96]	@ (800366c <HAL_TIM_Base_MspInit+0xf4>)
 800360c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800360e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003616:	2200      	movs	r2, #0
 8003618:	2100      	movs	r1, #0
 800361a:	2019      	movs	r0, #25
 800361c:	f001 f8a1 	bl	8004762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003620:	2019      	movs	r0, #25
 8003622:	f001 f8ba 	bl	800479a <HAL_NVIC_EnableIRQ>
}
 8003626:	e01a      	b.n	800365e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a12      	ldr	r2, [pc, #72]	@ (8003678 <HAL_TIM_Base_MspInit+0x100>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d115      	bne.n	800365e <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003632:	2300      	movs	r3, #0
 8003634:	60bb      	str	r3, [r7, #8]
 8003636:	4b0d      	ldr	r3, [pc, #52]	@ (800366c <HAL_TIM_Base_MspInit+0xf4>)
 8003638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363a:	4a0c      	ldr	r2, [pc, #48]	@ (800366c <HAL_TIM_Base_MspInit+0xf4>)
 800363c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003640:	6453      	str	r3, [r2, #68]	@ 0x44
 8003642:	4b0a      	ldr	r3, [pc, #40]	@ (800366c <HAL_TIM_Base_MspInit+0xf4>)
 8003644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003646:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800364a:	60bb      	str	r3, [r7, #8]
 800364c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800364e:	2200      	movs	r2, #0
 8003650:	2100      	movs	r1, #0
 8003652:	201a      	movs	r0, #26
 8003654:	f001 f885 	bl	8004762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003658:	201a      	movs	r0, #26
 800365a:	f001 f89e 	bl	800479a <HAL_NVIC_EnableIRQ>
}
 800365e:	bf00      	nop
 8003660:	3718      	adds	r7, #24
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40000400 	.word	0x40000400
 800366c:	40023800 	.word	0x40023800
 8003670:	40014000 	.word	0x40014000
 8003674:	40014400 	.word	0x40014400
 8003678:	40014800 	.word	0x40014800

0800367c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003684:	f107 030c 	add.w	r3, r7, #12
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	605a      	str	r2, [r3, #4]
 800368e:	609a      	str	r2, [r3, #8]
 8003690:	60da      	str	r2, [r3, #12]
 8003692:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a12      	ldr	r2, [pc, #72]	@ (80036e4 <HAL_TIM_MspPostInit+0x68>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d11d      	bne.n	80036da <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800369e:	2300      	movs	r3, #0
 80036a0:	60bb      	str	r3, [r7, #8]
 80036a2:	4b11      	ldr	r3, [pc, #68]	@ (80036e8 <HAL_TIM_MspPostInit+0x6c>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a6:	4a10      	ldr	r2, [pc, #64]	@ (80036e8 <HAL_TIM_MspPostInit+0x6c>)
 80036a8:	f043 0302 	orr.w	r3, r3, #2
 80036ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80036ae:	4b0e      	ldr	r3, [pc, #56]	@ (80036e8 <HAL_TIM_MspPostInit+0x6c>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	60bb      	str	r3, [r7, #8]
 80036b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Eng2PWM_Pin|Eng1PWM_Pin;
 80036ba:	2330      	movs	r3, #48	@ 0x30
 80036bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036be:	2302      	movs	r3, #2
 80036c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80036ca:	2302      	movs	r3, #2
 80036cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ce:	f107 030c 	add.w	r3, r7, #12
 80036d2:	4619      	mov	r1, r3
 80036d4:	4805      	ldr	r0, [pc, #20]	@ (80036ec <HAL_TIM_MspPostInit+0x70>)
 80036d6:	f001 fc27 	bl	8004f28 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80036da:	bf00      	nop
 80036dc:	3720      	adds	r7, #32
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40000400 	.word	0x40000400
 80036e8:	40023800 	.word	0x40023800
 80036ec:	40020400 	.word	0x40020400

080036f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80036f4:	bf00      	nop
 80036f6:	e7fd      	b.n	80036f4 <NMI_Handler+0x4>

080036f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036fc:	bf00      	nop
 80036fe:	e7fd      	b.n	80036fc <HardFault_Handler+0x4>

08003700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003704:	bf00      	nop
 8003706:	e7fd      	b.n	8003704 <MemManage_Handler+0x4>

08003708 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800370c:	bf00      	nop
 800370e:	e7fd      	b.n	800370c <BusFault_Handler+0x4>

08003710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003714:	bf00      	nop
 8003716:	e7fd      	b.n	8003714 <UsageFault_Handler+0x4>

08003718 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800371c:	bf00      	nop
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003726:	b480      	push	{r7}
 8003728:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800372a:	bf00      	nop
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003738:	bf00      	nop
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003746:	f000 f9cd 	bl	8003ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800374a:	bf00      	nop
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003754:	4802      	ldr	r0, [pc, #8]	@ (8003760 <DMA1_Stream0_IRQHandler+0x10>)
 8003756:	f001 f963 	bl	8004a20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800375a:	bf00      	nop
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	20000460 	.word	0x20000460

08003764 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003768:	4802      	ldr	r0, [pc, #8]	@ (8003774 <DMA1_Stream1_IRQHandler+0x10>)
 800376a:	f001 f959 	bl	8004a20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800376e:	bf00      	nop
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	20000400 	.word	0x20000400

08003778 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800377c:	4802      	ldr	r0, [pc, #8]	@ (8003788 <ADC_IRQHandler+0x10>)
 800377e:	f000 fa38 	bl	8003bf2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003782:	bf00      	nop
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	20000304 	.word	0x20000304

0800378c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8003790:	4802      	ldr	r0, [pc, #8]	@ (800379c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8003792:	f007 f87b 	bl	800a88c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003796:	bf00      	nop
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	20000508 	.word	0x20000508

080037a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80037a4:	4802      	ldr	r0, [pc, #8]	@ (80037b0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80037a6:	f007 f871 	bl	800a88c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80037aa:	bf00      	nop
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20000550 	.word	0x20000550

080037b4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80037b8:	4802      	ldr	r0, [pc, #8]	@ (80037c4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80037ba:	f007 f867 	bl	800a88c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80037be:	bf00      	nop
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	20000598 	.word	0x20000598

080037c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80037cc:	4802      	ldr	r0, [pc, #8]	@ (80037d8 <TIM3_IRQHandler+0x10>)
 80037ce:	f007 f85d 	bl	800a88c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80037d2:	bf00      	nop
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	200004c0 	.word	0x200004c0

080037dc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80037e0:	4802      	ldr	r0, [pc, #8]	@ (80037ec <I2C1_EV_IRQHandler+0x10>)
 80037e2:	f002 fdcb 	bl	800637c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80037e6:	bf00      	nop
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	200003ac 	.word	0x200003ac

080037f0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80037f4:	4802      	ldr	r0, [pc, #8]	@ (8003800 <I2C1_ER_IRQHandler+0x10>)
 80037f6:	f002 ff32 	bl	800665e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80037fa:	bf00      	nop
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	200003ac 	.word	0x200003ac

08003804 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003808:	4802      	ldr	r0, [pc, #8]	@ (8003814 <DMA2_Stream0_IRQHandler+0x10>)
 800380a:	f001 f909 	bl	8004a20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800380e:	bf00      	nop
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	2000034c 	.word	0x2000034c

08003818 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800381c:	4802      	ldr	r0, [pc, #8]	@ (8003828 <OTG_FS_IRQHandler+0x10>)
 800381e:	f005 f926 	bl	8008a6e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003822:	bf00      	nop
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	20001444 	.word	0x20001444

0800382c <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8003830:	bf00      	nop
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800383a:	b480      	push	{r7}
 800383c:	af00      	add	r7, sp, #0
  return 1;
 800383e:	2301      	movs	r3, #1
}
 8003840:	4618      	mov	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <_kill>:

int _kill(int pid, int sig)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b082      	sub	sp, #8
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
 8003852:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003854:	f00c ff70 	bl	8010738 <__errno>
 8003858:	4603      	mov	r3, r0
 800385a:	2216      	movs	r2, #22
 800385c:	601a      	str	r2, [r3, #0]
  return -1;
 800385e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003862:	4618      	mov	r0, r3
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <_exit>:

void _exit (int status)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003872:	f04f 31ff 	mov.w	r1, #4294967295
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7ff ffe7 	bl	800384a <_kill>
  while (1) {}    /* Make sure we hang here */
 800387c:	bf00      	nop
 800387e:	e7fd      	b.n	800387c <_exit+0x12>

08003880 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800388c:	2300      	movs	r3, #0
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	e00a      	b.n	80038a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003892:	f3af 8000 	nop.w
 8003896:	4601      	mov	r1, r0
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	1c5a      	adds	r2, r3, #1
 800389c:	60ba      	str	r2, [r7, #8]
 800389e:	b2ca      	uxtb	r2, r1
 80038a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	3301      	adds	r3, #1
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	dbf0      	blt.n	8003892 <_read+0x12>
  }

  return len;
 80038b0:	687b      	ldr	r3, [r7, #4]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3718      	adds	r7, #24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b086      	sub	sp, #24
 80038be:	af00      	add	r7, sp, #0
 80038c0:	60f8      	str	r0, [r7, #12]
 80038c2:	60b9      	str	r1, [r7, #8]
 80038c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038c6:	2300      	movs	r3, #0
 80038c8:	617b      	str	r3, [r7, #20]
 80038ca:	e009      	b.n	80038e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	60ba      	str	r2, [r7, #8]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	3301      	adds	r3, #1
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	dbf1      	blt.n	80038cc <_write+0x12>
  }
  return len;
 80038e8:	687b      	ldr	r3, [r7, #4]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <_close>:

int _close(int file)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80038fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038fe:	4618      	mov	r0, r3
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
 8003912:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800391a:	605a      	str	r2, [r3, #4]
  return 0;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <_isatty>:

int _isatty(int file)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003932:	2301      	movs	r3, #1
}
 8003934:	4618      	mov	r0, r3
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
	...

0800395c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003964:	4a14      	ldr	r2, [pc, #80]	@ (80039b8 <_sbrk+0x5c>)
 8003966:	4b15      	ldr	r3, [pc, #84]	@ (80039bc <_sbrk+0x60>)
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003970:	4b13      	ldr	r3, [pc, #76]	@ (80039c0 <_sbrk+0x64>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d102      	bne.n	800397e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003978:	4b11      	ldr	r3, [pc, #68]	@ (80039c0 <_sbrk+0x64>)
 800397a:	4a12      	ldr	r2, [pc, #72]	@ (80039c4 <_sbrk+0x68>)
 800397c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800397e:	4b10      	ldr	r3, [pc, #64]	@ (80039c0 <_sbrk+0x64>)
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4413      	add	r3, r2
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	429a      	cmp	r2, r3
 800398a:	d207      	bcs.n	800399c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800398c:	f00c fed4 	bl	8010738 <__errno>
 8003990:	4603      	mov	r3, r0
 8003992:	220c      	movs	r2, #12
 8003994:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003996:	f04f 33ff 	mov.w	r3, #4294967295
 800399a:	e009      	b.n	80039b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800399c:	4b08      	ldr	r3, [pc, #32]	@ (80039c0 <_sbrk+0x64>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039a2:	4b07      	ldr	r3, [pc, #28]	@ (80039c0 <_sbrk+0x64>)
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4413      	add	r3, r2
 80039aa:	4a05      	ldr	r2, [pc, #20]	@ (80039c0 <_sbrk+0x64>)
 80039ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039ae:	68fb      	ldr	r3, [r7, #12]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	20020000 	.word	0x20020000
 80039bc:	00000400 	.word	0x00000400
 80039c0:	20000b58 	.word	0x20000b58
 80039c4:	20001c98 	.word	0x20001c98

080039c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039cc:	4b06      	ldr	r3, [pc, #24]	@ (80039e8 <SystemInit+0x20>)
 80039ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d2:	4a05      	ldr	r2, [pc, #20]	@ (80039e8 <SystemInit+0x20>)
 80039d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80039d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039dc:	bf00      	nop
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	e000ed00 	.word	0xe000ed00

080039ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80039ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003a24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80039f0:	f7ff ffea 	bl	80039c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80039f4:	480c      	ldr	r0, [pc, #48]	@ (8003a28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80039f6:	490d      	ldr	r1, [pc, #52]	@ (8003a2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80039f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003a30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80039fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039fc:	e002      	b.n	8003a04 <LoopCopyDataInit>

080039fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a02:	3304      	adds	r3, #4

08003a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a08:	d3f9      	bcc.n	80039fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a0c:	4c0a      	ldr	r4, [pc, #40]	@ (8003a38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a10:	e001      	b.n	8003a16 <LoopFillZerobss>

08003a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a14:	3204      	adds	r2, #4

08003a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a18:	d3fb      	bcc.n	8003a12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a1a:	f00c fe93 	bl	8010744 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a1e:	f7fe f913 	bl	8001c48 <main>
  bx  lr    
 8003a22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003a24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a2c:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8003a30:	0801518c 	.word	0x0801518c
  ldr r2, =_sbss
 8003a34:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 8003a38:	20001c94 	.word	0x20001c94

08003a3c <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a3c:	e7fe      	b.n	8003a3c <DMA1_Stream2_IRQHandler>
	...

08003a40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a44:	4b0e      	ldr	r3, [pc, #56]	@ (8003a80 <HAL_Init+0x40>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a0d      	ldr	r2, [pc, #52]	@ (8003a80 <HAL_Init+0x40>)
 8003a4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a50:	4b0b      	ldr	r3, [pc, #44]	@ (8003a80 <HAL_Init+0x40>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a0a      	ldr	r2, [pc, #40]	@ (8003a80 <HAL_Init+0x40>)
 8003a56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a5c:	4b08      	ldr	r3, [pc, #32]	@ (8003a80 <HAL_Init+0x40>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a07      	ldr	r2, [pc, #28]	@ (8003a80 <HAL_Init+0x40>)
 8003a62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a68:	2003      	movs	r0, #3
 8003a6a:	f000 fe6f 	bl	800474c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a6e:	200f      	movs	r0, #15
 8003a70:	f000 f808 	bl	8003a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a74:	f7ff fbfc 	bl	8003270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40023c00 	.word	0x40023c00

08003a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a8c:	4b12      	ldr	r3, [pc, #72]	@ (8003ad8 <HAL_InitTick+0x54>)
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	4b12      	ldr	r3, [pc, #72]	@ (8003adc <HAL_InitTick+0x58>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	4619      	mov	r1, r3
 8003a96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 fe87 	bl	80047b6 <HAL_SYSTICK_Config>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e00e      	b.n	8003ad0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b0f      	cmp	r3, #15
 8003ab6:	d80a      	bhi.n	8003ace <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ab8:	2200      	movs	r2, #0
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac0:	f000 fe4f 	bl	8004762 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ac4:	4a06      	ldr	r2, [pc, #24]	@ (8003ae0 <HAL_InitTick+0x5c>)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
 8003acc:	e000      	b.n	8003ad0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	20000008 	.word	0x20000008
 8003adc:	20000010 	.word	0x20000010
 8003ae0:	2000000c 	.word	0x2000000c

08003ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ae8:	4b06      	ldr	r3, [pc, #24]	@ (8003b04 <HAL_IncTick+0x20>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	461a      	mov	r2, r3
 8003aee:	4b06      	ldr	r3, [pc, #24]	@ (8003b08 <HAL_IncTick+0x24>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4413      	add	r3, r2
 8003af4:	4a04      	ldr	r2, [pc, #16]	@ (8003b08 <HAL_IncTick+0x24>)
 8003af6:	6013      	str	r3, [r2, #0]
}
 8003af8:	bf00      	nop
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	20000010 	.word	0x20000010
 8003b08:	20000b5c 	.word	0x20000b5c

08003b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8003b10:	4b03      	ldr	r3, [pc, #12]	@ (8003b20 <HAL_GetTick+0x14>)
 8003b12:	681b      	ldr	r3, [r3, #0]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	20000b5c 	.word	0x20000b5c

08003b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b2c:	f7ff ffee 	bl	8003b0c <HAL_GetTick>
 8003b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3c:	d005      	beq.n	8003b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b68 <HAL_Delay+0x44>)
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4413      	add	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b4a:	bf00      	nop
 8003b4c:	f7ff ffde 	bl	8003b0c <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d8f7      	bhi.n	8003b4c <HAL_Delay+0x28>
  {
  }
}
 8003b5c:	bf00      	nop
 8003b5e:	bf00      	nop
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	20000010 	.word	0x20000010

08003b6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b74:	2300      	movs	r3, #0
 8003b76:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e033      	b.n	8003bea <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d109      	bne.n	8003b9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7ff fb9e 	bl	80032cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba2:	f003 0310 	and.w	r3, r3, #16
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d118      	bne.n	8003bdc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003bb2:	f023 0302 	bic.w	r3, r3, #2
 8003bb6:	f043 0202 	orr.w	r2, r3, #2
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 fb6c 	bl	800429c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bce:	f023 0303 	bic.w	r3, r3, #3
 8003bd2:	f043 0201 	orr.w	r2, r3, #1
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	641a      	str	r2, [r3, #64]	@ 0x40
 8003bda:	e001      	b.n	8003be0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b086      	sub	sp, #24
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	617b      	str	r3, [r7, #20]
 8003bfe:	2300      	movs	r3, #0
 8003c00:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	f003 0320 	and.w	r3, r3, #32
 8003c20:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d049      	beq.n	8003cbc <HAL_ADC_IRQHandler+0xca>
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d046      	beq.n	8003cbc <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c32:	f003 0310 	and.w	r3, r3, #16
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d105      	bne.n	8003c46 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d12b      	bne.n	8003cac <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d127      	bne.n	8003cac <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c62:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d006      	beq.n	8003c78 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d119      	bne.n	8003cac <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0220 	bic.w	r2, r2, #32
 8003c86:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d105      	bne.n	8003cac <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca4:	f043 0201 	orr.w	r2, r3, #1
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7fd fcd1 	bl	8001654 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f06f 0212 	mvn.w	r2, #18
 8003cba:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f003 0304 	and.w	r3, r3, #4
 8003cc2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cca:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d057      	beq.n	8003d82 <HAL_ADC_IRQHandler+0x190>
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d054      	beq.n	8003d82 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cdc:	f003 0310 	and.w	r3, r3, #16
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d105      	bne.n	8003cf0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d139      	bne.n	8003d72 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d04:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d006      	beq.n	8003d1a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d12b      	bne.n	8003d72 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d124      	bne.n	8003d72 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d11d      	bne.n	8003d72 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d119      	bne.n	8003d72 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d4c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d52:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d105      	bne.n	8003d72 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6a:	f043 0201 	orr.w	r2, r3, #1
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 fc10 	bl	8004598 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f06f 020c 	mvn.w	r2, #12
 8003d80:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d90:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d017      	beq.n	8003dc8 <HAL_ADC_IRQHandler+0x1d6>
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d014      	beq.n	8003dc8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d10d      	bne.n	8003dc8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f929 	bl	8004010 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f06f 0201 	mvn.w	r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f003 0320 	and.w	r3, r3, #32
 8003dce:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003dd6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d015      	beq.n	8003e0a <HAL_ADC_IRQHandler+0x218>
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d012      	beq.n	8003e0a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de8:	f043 0202 	orr.w	r2, r3, #2
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f06f 0220 	mvn.w	r2, #32
 8003df8:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f912 	bl	8004024 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f06f 0220 	mvn.w	r2, #32
 8003e08:	601a      	str	r2, [r3, #0]
  }
}
 8003e0a:	bf00      	nop
 8003e0c:	3718      	adds	r7, #24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
	...

08003e14 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b088      	sub	sp, #32
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003e20:	2300      	movs	r3, #0
 8003e22:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e24:	2300      	movs	r3, #0
 8003e26:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d101      	bne.n	8003e36 <HAL_ADC_Start_DMA+0x22>
 8003e32:	2302      	movs	r3, #2
 8003e34:	e0d0      	b.n	8003fd8 <HAL_ADC_Start_DMA+0x1c4>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d018      	beq.n	8003e7e <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689a      	ldr	r2, [r3, #8]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0201 	orr.w	r2, r2, #1
 8003e5a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003e5c:	4b60      	ldr	r3, [pc, #384]	@ (8003fe0 <HAL_ADC_Start_DMA+0x1cc>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a60      	ldr	r2, [pc, #384]	@ (8003fe4 <HAL_ADC_Start_DMA+0x1d0>)
 8003e62:	fba2 2303 	umull	r2, r3, r2, r3
 8003e66:	0c9a      	lsrs	r2, r3, #18
 8003e68:	4613      	mov	r3, r2
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	4413      	add	r3, r2
 8003e6e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003e70:	e002      	b.n	8003e78 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	3b01      	subs	r3, #1
 8003e76:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1f9      	bne.n	8003e72 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e8c:	d107      	bne.n	8003e9e <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e9c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	f040 8088 	bne.w	8003fbe <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003eb6:	f023 0301 	bic.w	r3, r3, #1
 8003eba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d007      	beq.n	8003ee0 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003ed8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ee8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eec:	d106      	bne.n	8003efc <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef2:	f023 0206 	bic.w	r2, r3, #6
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	645a      	str	r2, [r3, #68]	@ 0x44
 8003efa:	e002      	b.n	8003f02 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f0a:	4b37      	ldr	r3, [pc, #220]	@ (8003fe8 <HAL_ADC_Start_DMA+0x1d4>)
 8003f0c:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f12:	4a36      	ldr	r2, [pc, #216]	@ (8003fec <HAL_ADC_Start_DMA+0x1d8>)
 8003f14:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f1a:	4a35      	ldr	r2, [pc, #212]	@ (8003ff0 <HAL_ADC_Start_DMA+0x1dc>)
 8003f1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f22:	4a34      	ldr	r2, [pc, #208]	@ (8003ff4 <HAL_ADC_Start_DMA+0x1e0>)
 8003f24:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003f2e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003f3e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f4e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	334c      	adds	r3, #76	@ 0x4c
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f000 fce4 	bl	800492c <HAL_DMA_Start_IT>
 8003f64:	4603      	mov	r3, r0
 8003f66:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f003 031f 	and.w	r3, r3, #31
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10f      	bne.n	8003f94 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d129      	bne.n	8003fd6 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003f90:	609a      	str	r2, [r3, #8]
 8003f92:	e020      	b.n	8003fd6 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a17      	ldr	r2, [pc, #92]	@ (8003ff8 <HAL_ADC_Start_DMA+0x1e4>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d11b      	bne.n	8003fd6 <HAL_ADC_Start_DMA+0x1c2>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d114      	bne.n	8003fd6 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003fba:	609a      	str	r2, [r3, #8]
 8003fbc:	e00b      	b.n	8003fd6 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc2:	f043 0210 	orr.w	r2, r3, #16
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fce:	f043 0201 	orr.w	r2, r3, #1
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8003fd6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3720      	adds	r7, #32
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	20000008 	.word	0x20000008
 8003fe4:	431bde83 	.word	0x431bde83
 8003fe8:	40012300 	.word	0x40012300
 8003fec:	08004495 	.word	0x08004495
 8003ff0:	0800454f 	.word	0x0800454f
 8003ff4:	0800456b 	.word	0x0800456b
 8003ff8:	40012000 	.word	0x40012000

08003ffc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004042:	2300      	movs	r3, #0
 8004044:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800404c:	2b01      	cmp	r3, #1
 800404e:	d101      	bne.n	8004054 <HAL_ADC_ConfigChannel+0x1c>
 8004050:	2302      	movs	r3, #2
 8004052:	e113      	b.n	800427c <HAL_ADC_ConfigChannel+0x244>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b09      	cmp	r3, #9
 8004062:	d925      	bls.n	80040b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68d9      	ldr	r1, [r3, #12]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	b29b      	uxth	r3, r3
 8004070:	461a      	mov	r2, r3
 8004072:	4613      	mov	r3, r2
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	4413      	add	r3, r2
 8004078:	3b1e      	subs	r3, #30
 800407a:	2207      	movs	r2, #7
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	43da      	mvns	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	400a      	ands	r2, r1
 8004088:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68d9      	ldr	r1, [r3, #12]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	b29b      	uxth	r3, r3
 800409a:	4618      	mov	r0, r3
 800409c:	4603      	mov	r3, r0
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	4403      	add	r3, r0
 80040a2:	3b1e      	subs	r3, #30
 80040a4:	409a      	lsls	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	60da      	str	r2, [r3, #12]
 80040ae:	e022      	b.n	80040f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6919      	ldr	r1, [r3, #16]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	461a      	mov	r2, r3
 80040be:	4613      	mov	r3, r2
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	4413      	add	r3, r2
 80040c4:	2207      	movs	r2, #7
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	43da      	mvns	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	400a      	ands	r2, r1
 80040d2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6919      	ldr	r1, [r3, #16]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	4618      	mov	r0, r3
 80040e6:	4603      	mov	r3, r0
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	4403      	add	r3, r0
 80040ec:	409a      	lsls	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2b06      	cmp	r3, #6
 80040fc:	d824      	bhi.n	8004148 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	4613      	mov	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	3b05      	subs	r3, #5
 8004110:	221f      	movs	r2, #31
 8004112:	fa02 f303 	lsl.w	r3, r2, r3
 8004116:	43da      	mvns	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	400a      	ands	r2, r1
 800411e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	b29b      	uxth	r3, r3
 800412c:	4618      	mov	r0, r3
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	4613      	mov	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	3b05      	subs	r3, #5
 800413a:	fa00 f203 	lsl.w	r2, r0, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	635a      	str	r2, [r3, #52]	@ 0x34
 8004146:	e04c      	b.n	80041e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2b0c      	cmp	r3, #12
 800414e:	d824      	bhi.n	800419a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	4613      	mov	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	3b23      	subs	r3, #35	@ 0x23
 8004162:	221f      	movs	r2, #31
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	43da      	mvns	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	400a      	ands	r2, r1
 8004170:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	b29b      	uxth	r3, r3
 800417e:	4618      	mov	r0, r3
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	4613      	mov	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	3b23      	subs	r3, #35	@ 0x23
 800418c:	fa00 f203 	lsl.w	r2, r0, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	631a      	str	r2, [r3, #48]	@ 0x30
 8004198:	e023      	b.n	80041e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	4613      	mov	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4413      	add	r3, r2
 80041aa:	3b41      	subs	r3, #65	@ 0x41
 80041ac:	221f      	movs	r2, #31
 80041ae:	fa02 f303 	lsl.w	r3, r2, r3
 80041b2:	43da      	mvns	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	400a      	ands	r2, r1
 80041ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	4618      	mov	r0, r3
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	4613      	mov	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4413      	add	r3, r2
 80041d4:	3b41      	subs	r3, #65	@ 0x41
 80041d6:	fa00 f203 	lsl.w	r2, r0, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041e2:	4b29      	ldr	r3, [pc, #164]	@ (8004288 <HAL_ADC_ConfigChannel+0x250>)
 80041e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a28      	ldr	r2, [pc, #160]	@ (800428c <HAL_ADC_ConfigChannel+0x254>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d10f      	bne.n	8004210 <HAL_ADC_ConfigChannel+0x1d8>
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b12      	cmp	r3, #18
 80041f6:	d10b      	bne.n	8004210 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a1d      	ldr	r2, [pc, #116]	@ (800428c <HAL_ADC_ConfigChannel+0x254>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d12b      	bne.n	8004272 <HAL_ADC_ConfigChannel+0x23a>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a1c      	ldr	r2, [pc, #112]	@ (8004290 <HAL_ADC_ConfigChannel+0x258>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d003      	beq.n	800422c <HAL_ADC_ConfigChannel+0x1f4>
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b11      	cmp	r3, #17
 800422a:	d122      	bne.n	8004272 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a11      	ldr	r2, [pc, #68]	@ (8004290 <HAL_ADC_ConfigChannel+0x258>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d111      	bne.n	8004272 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800424e:	4b11      	ldr	r3, [pc, #68]	@ (8004294 <HAL_ADC_ConfigChannel+0x25c>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a11      	ldr	r2, [pc, #68]	@ (8004298 <HAL_ADC_ConfigChannel+0x260>)
 8004254:	fba2 2303 	umull	r2, r3, r2, r3
 8004258:	0c9a      	lsrs	r2, r3, #18
 800425a:	4613      	mov	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4413      	add	r3, r2
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004264:	e002      	b.n	800426c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	3b01      	subs	r3, #1
 800426a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1f9      	bne.n	8004266 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	40012300 	.word	0x40012300
 800428c:	40012000 	.word	0x40012000
 8004290:	10000012 	.word	0x10000012
 8004294:	20000008 	.word	0x20000008
 8004298:	431bde83 	.word	0x431bde83

0800429c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042a4:	4b79      	ldr	r3, [pc, #484]	@ (800448c <ADC_Init+0x1f0>)
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	431a      	orrs	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6859      	ldr	r1, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	021a      	lsls	r2, r3, #8
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80042f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6859      	ldr	r1, [r3, #4]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004316:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6899      	ldr	r1, [r3, #8]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800432e:	4a58      	ldr	r2, [pc, #352]	@ (8004490 <ADC_Init+0x1f4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d022      	beq.n	800437a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689a      	ldr	r2, [r3, #8]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004342:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6899      	ldr	r1, [r3, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004364:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6899      	ldr	r1, [r3, #8]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	609a      	str	r2, [r3, #8]
 8004378:	e00f      	b.n	800439a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004388:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689a      	ldr	r2, [r3, #8]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004398:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 0202 	bic.w	r2, r2, #2
 80043a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6899      	ldr	r1, [r3, #8]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	7e1b      	ldrb	r3, [r3, #24]
 80043b4:	005a      	lsls	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d01b      	beq.n	8004400 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043d6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80043e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6859      	ldr	r1, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f2:	3b01      	subs	r3, #1
 80043f4:	035a      	lsls	r2, r3, #13
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	605a      	str	r2, [r3, #4]
 80043fe:	e007      	b.n	8004410 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800440e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800441e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	3b01      	subs	r3, #1
 800442c:	051a      	lsls	r2, r3, #20
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004444:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6899      	ldr	r1, [r3, #8]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004452:	025a      	lsls	r2, r3, #9
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689a      	ldr	r2, [r3, #8]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800446a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6899      	ldr	r1, [r3, #8]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	029a      	lsls	r2, r3, #10
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	609a      	str	r2, [r3, #8]
}
 8004480:	bf00      	nop
 8004482:	3714      	adds	r7, #20
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	40012300 	.word	0x40012300
 8004490:	0f000001 	.word	0x0f000001

08004494 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d13c      	bne.n	8004528 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d12b      	bne.n	8004520 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d127      	bne.n	8004520 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d006      	beq.n	80044ec <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d119      	bne.n	8004520 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685a      	ldr	r2, [r3, #4]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0220 	bic.w	r2, r2, #32
 80044fa:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004500:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d105      	bne.n	8004520 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004518:	f043 0201 	orr.w	r2, r3, #1
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f7fd f897 	bl	8001654 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004526:	e00e      	b.n	8004546 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452c:	f003 0310 	and.w	r3, r3, #16
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f7ff fd75 	bl	8004024 <HAL_ADC_ErrorCallback>
}
 800453a:	e004      	b.n	8004546 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	4798      	blx	r3
}
 8004546:	bf00      	nop
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b084      	sub	sp, #16
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800455a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f7ff fd4d 	bl	8003ffc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004562:	bf00      	nop
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b084      	sub	sp, #16
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004576:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2240      	movs	r2, #64	@ 0x40
 800457c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004582:	f043 0204 	orr.w	r2, r3, #4
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f7ff fd4a 	bl	8004024 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004590:	bf00      	nop
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045bc:	4b0c      	ldr	r3, [pc, #48]	@ (80045f0 <__NVIC_SetPriorityGrouping+0x44>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80045c8:	4013      	ands	r3, r2
 80045ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80045d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045de:	4a04      	ldr	r2, [pc, #16]	@ (80045f0 <__NVIC_SetPriorityGrouping+0x44>)
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	60d3      	str	r3, [r2, #12]
}
 80045e4:	bf00      	nop
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	e000ed00 	.word	0xe000ed00

080045f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045f8:	4b04      	ldr	r3, [pc, #16]	@ (800460c <__NVIC_GetPriorityGrouping+0x18>)
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	0a1b      	lsrs	r3, r3, #8
 80045fe:	f003 0307 	and.w	r3, r3, #7
}
 8004602:	4618      	mov	r0, r3
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	e000ed00 	.word	0xe000ed00

08004610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	4603      	mov	r3, r0
 8004618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800461a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800461e:	2b00      	cmp	r3, #0
 8004620:	db0b      	blt.n	800463a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004622:	79fb      	ldrb	r3, [r7, #7]
 8004624:	f003 021f 	and.w	r2, r3, #31
 8004628:	4907      	ldr	r1, [pc, #28]	@ (8004648 <__NVIC_EnableIRQ+0x38>)
 800462a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800462e:	095b      	lsrs	r3, r3, #5
 8004630:	2001      	movs	r0, #1
 8004632:	fa00 f202 	lsl.w	r2, r0, r2
 8004636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	e000e100 	.word	0xe000e100

0800464c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	4603      	mov	r3, r0
 8004654:	6039      	str	r1, [r7, #0]
 8004656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800465c:	2b00      	cmp	r3, #0
 800465e:	db0a      	blt.n	8004676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	b2da      	uxtb	r2, r3
 8004664:	490c      	ldr	r1, [pc, #48]	@ (8004698 <__NVIC_SetPriority+0x4c>)
 8004666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800466a:	0112      	lsls	r2, r2, #4
 800466c:	b2d2      	uxtb	r2, r2
 800466e:	440b      	add	r3, r1
 8004670:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004674:	e00a      	b.n	800468c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	b2da      	uxtb	r2, r3
 800467a:	4908      	ldr	r1, [pc, #32]	@ (800469c <__NVIC_SetPriority+0x50>)
 800467c:	79fb      	ldrb	r3, [r7, #7]
 800467e:	f003 030f 	and.w	r3, r3, #15
 8004682:	3b04      	subs	r3, #4
 8004684:	0112      	lsls	r2, r2, #4
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	440b      	add	r3, r1
 800468a:	761a      	strb	r2, [r3, #24]
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	e000e100 	.word	0xe000e100
 800469c:	e000ed00 	.word	0xe000ed00

080046a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b089      	sub	sp, #36	@ 0x24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f003 0307 	and.w	r3, r3, #7
 80046b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	f1c3 0307 	rsb	r3, r3, #7
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	bf28      	it	cs
 80046be:	2304      	movcs	r3, #4
 80046c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	3304      	adds	r3, #4
 80046c6:	2b06      	cmp	r3, #6
 80046c8:	d902      	bls.n	80046d0 <NVIC_EncodePriority+0x30>
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	3b03      	subs	r3, #3
 80046ce:	e000      	b.n	80046d2 <NVIC_EncodePriority+0x32>
 80046d0:	2300      	movs	r3, #0
 80046d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046d4:	f04f 32ff 	mov.w	r2, #4294967295
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	43da      	mvns	r2, r3
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	401a      	ands	r2, r3
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046e8:	f04f 31ff 	mov.w	r1, #4294967295
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	fa01 f303 	lsl.w	r3, r1, r3
 80046f2:	43d9      	mvns	r1, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046f8:	4313      	orrs	r3, r2
         );
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3724      	adds	r7, #36	@ 0x24
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
	...

08004708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3b01      	subs	r3, #1
 8004714:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004718:	d301      	bcc.n	800471e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800471a:	2301      	movs	r3, #1
 800471c:	e00f      	b.n	800473e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800471e:	4a0a      	ldr	r2, [pc, #40]	@ (8004748 <SysTick_Config+0x40>)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3b01      	subs	r3, #1
 8004724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004726:	210f      	movs	r1, #15
 8004728:	f04f 30ff 	mov.w	r0, #4294967295
 800472c:	f7ff ff8e 	bl	800464c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004730:	4b05      	ldr	r3, [pc, #20]	@ (8004748 <SysTick_Config+0x40>)
 8004732:	2200      	movs	r2, #0
 8004734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004736:	4b04      	ldr	r3, [pc, #16]	@ (8004748 <SysTick_Config+0x40>)
 8004738:	2207      	movs	r2, #7
 800473a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	e000e010 	.word	0xe000e010

0800474c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7ff ff29 	bl	80045ac <__NVIC_SetPriorityGrouping>
}
 800475a:	bf00      	nop
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004762:	b580      	push	{r7, lr}
 8004764:	b086      	sub	sp, #24
 8004766:	af00      	add	r7, sp, #0
 8004768:	4603      	mov	r3, r0
 800476a:	60b9      	str	r1, [r7, #8]
 800476c:	607a      	str	r2, [r7, #4]
 800476e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004770:	2300      	movs	r3, #0
 8004772:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004774:	f7ff ff3e 	bl	80045f4 <__NVIC_GetPriorityGrouping>
 8004778:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	68b9      	ldr	r1, [r7, #8]
 800477e:	6978      	ldr	r0, [r7, #20]
 8004780:	f7ff ff8e 	bl	80046a0 <NVIC_EncodePriority>
 8004784:	4602      	mov	r2, r0
 8004786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800478a:	4611      	mov	r1, r2
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff ff5d 	bl	800464c <__NVIC_SetPriority>
}
 8004792:	bf00      	nop
 8004794:	3718      	adds	r7, #24
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b082      	sub	sp, #8
 800479e:	af00      	add	r7, sp, #0
 80047a0:	4603      	mov	r3, r0
 80047a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff ff31 	bl	8004610 <__NVIC_EnableIRQ>
}
 80047ae:	bf00      	nop
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b082      	sub	sp, #8
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7ff ffa2 	bl	8004708 <SysTick_Config>
 80047c4:	4603      	mov	r3, r0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
	...

080047d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80047d8:	2300      	movs	r3, #0
 80047da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80047dc:	f7ff f996 	bl	8003b0c <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e099      	b.n	8004920 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0201 	bic.w	r2, r2, #1
 800480a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800480c:	e00f      	b.n	800482e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800480e:	f7ff f97d 	bl	8003b0c <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b05      	cmp	r3, #5
 800481a:	d908      	bls.n	800482e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2220      	movs	r2, #32
 8004820:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2203      	movs	r2, #3
 8004826:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e078      	b.n	8004920 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1e8      	bne.n	800480e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	4b38      	ldr	r3, [pc, #224]	@ (8004928 <HAL_DMA_Init+0x158>)
 8004848:	4013      	ands	r3, r2
 800484a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800485a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004866:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004872:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	4313      	orrs	r3, r2
 800487e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004884:	2b04      	cmp	r3, #4
 8004886:	d107      	bne.n	8004898 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004890:	4313      	orrs	r3, r2
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	4313      	orrs	r3, r2
 8004896:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f023 0307 	bic.w	r3, r3, #7
 80048ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048be:	2b04      	cmp	r3, #4
 80048c0:	d117      	bne.n	80048f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00e      	beq.n	80048f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 faab 	bl	8004e30 <DMA_CheckFifoParam>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d008      	beq.n	80048f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2240      	movs	r2, #64	@ 0x40
 80048e4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80048ee:	2301      	movs	r3, #1
 80048f0:	e016      	b.n	8004920 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 fa62 	bl	8004dc4 <DMA_CalcBaseAndBitshift>
 8004900:	4603      	mov	r3, r0
 8004902:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004908:	223f      	movs	r2, #63	@ 0x3f
 800490a:	409a      	lsls	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	f010803f 	.word	0xf010803f

0800492c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
 8004938:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004942:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800494a:	2b01      	cmp	r3, #1
 800494c:	d101      	bne.n	8004952 <HAL_DMA_Start_IT+0x26>
 800494e:	2302      	movs	r3, #2
 8004950:	e040      	b.n	80049d4 <HAL_DMA_Start_IT+0xa8>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b01      	cmp	r3, #1
 8004964:	d12f      	bne.n	80049c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2202      	movs	r2, #2
 800496a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	68b9      	ldr	r1, [r7, #8]
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 f9f4 	bl	8004d68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004984:	223f      	movs	r2, #63	@ 0x3f
 8004986:	409a      	lsls	r2, r3
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0216 	orr.w	r2, r2, #22
 800499a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d007      	beq.n	80049b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f042 0208 	orr.w	r2, r2, #8
 80049b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0201 	orr.w	r2, r2, #1
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	e005      	b.n	80049d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80049ce:	2302      	movs	r3, #2
 80049d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80049d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3718      	adds	r7, #24
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d004      	beq.n	80049fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2280      	movs	r2, #128	@ 0x80
 80049f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e00c      	b.n	8004a14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2205      	movs	r2, #5
 80049fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0201 	bic.w	r2, r2, #1
 8004a10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a2c:	4b8e      	ldr	r3, [pc, #568]	@ (8004c68 <HAL_DMA_IRQHandler+0x248>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a8e      	ldr	r2, [pc, #568]	@ (8004c6c <HAL_DMA_IRQHandler+0x24c>)
 8004a32:	fba2 2303 	umull	r2, r3, r2, r3
 8004a36:	0a9b      	lsrs	r3, r3, #10
 8004a38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a4a:	2208      	movs	r2, #8
 8004a4c:	409a      	lsls	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	4013      	ands	r3, r2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d01a      	beq.n	8004a8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d013      	beq.n	8004a8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0204 	bic.w	r2, r2, #4
 8004a72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a78:	2208      	movs	r2, #8
 8004a7a:	409a      	lsls	r2, r3
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a84:	f043 0201 	orr.w	r2, r3, #1
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a90:	2201      	movs	r2, #1
 8004a92:	409a      	lsls	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4013      	ands	r3, r2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d012      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00b      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aae:	2201      	movs	r2, #1
 8004ab0:	409a      	lsls	r2, r3
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aba:	f043 0202 	orr.w	r2, r3, #2
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ac6:	2204      	movs	r2, #4
 8004ac8:	409a      	lsls	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4013      	ands	r3, r2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d012      	beq.n	8004af8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00b      	beq.n	8004af8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ae4:	2204      	movs	r2, #4
 8004ae6:	409a      	lsls	r2, r3
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004af0:	f043 0204 	orr.w	r2, r3, #4
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004afc:	2210      	movs	r2, #16
 8004afe:	409a      	lsls	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4013      	ands	r3, r2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d043      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0308 	and.w	r3, r3, #8
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d03c      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b1a:	2210      	movs	r2, #16
 8004b1c:	409a      	lsls	r2, r3
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d018      	beq.n	8004b62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d108      	bne.n	8004b50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d024      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	4798      	blx	r3
 8004b4e:	e01f      	b.n	8004b90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d01b      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	4798      	blx	r3
 8004b60:	e016      	b.n	8004b90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d107      	bne.n	8004b80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0208 	bic.w	r2, r2, #8
 8004b7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d003      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b94:	2220      	movs	r2, #32
 8004b96:	409a      	lsls	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 808f 	beq.w	8004cc0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0310 	and.w	r3, r3, #16
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 8087 	beq.w	8004cc0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	409a      	lsls	r2, r3
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b05      	cmp	r3, #5
 8004bc8:	d136      	bne.n	8004c38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 0216 	bic.w	r2, r2, #22
 8004bd8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695a      	ldr	r2, [r3, #20]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004be8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d103      	bne.n	8004bfa <HAL_DMA_IRQHandler+0x1da>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d007      	beq.n	8004c0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0208 	bic.w	r2, r2, #8
 8004c08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c0e:	223f      	movs	r2, #63	@ 0x3f
 8004c10:	409a      	lsls	r2, r3
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d07e      	beq.n	8004d2c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	4798      	blx	r3
        }
        return;
 8004c36:	e079      	b.n	8004d2c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d01d      	beq.n	8004c82 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10d      	bne.n	8004c70 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d031      	beq.n	8004cc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	4798      	blx	r3
 8004c64:	e02c      	b.n	8004cc0 <HAL_DMA_IRQHandler+0x2a0>
 8004c66:	bf00      	nop
 8004c68:	20000008 	.word	0x20000008
 8004c6c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d023      	beq.n	8004cc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	4798      	blx	r3
 8004c80:	e01e      	b.n	8004cc0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10f      	bne.n	8004cb0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0210 	bic.w	r2, r2, #16
 8004c9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d003      	beq.n	8004cc0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d032      	beq.n	8004d2e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d022      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2205      	movs	r2, #5
 8004cd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 0201 	bic.w	r2, r2, #1
 8004cea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	60bb      	str	r3, [r7, #8]
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d307      	bcc.n	8004d08 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1f2      	bne.n	8004cec <HAL_DMA_IRQHandler+0x2cc>
 8004d06:	e000      	b.n	8004d0a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004d08:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d005      	beq.n	8004d2e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	4798      	blx	r3
 8004d2a:	e000      	b.n	8004d2e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004d2c:	bf00      	nop
    }
  }
}
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d42:	b2db      	uxtb	r3, r3
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004d84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	2b40      	cmp	r3, #64	@ 0x40
 8004d94:	d108      	bne.n	8004da8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004da6:	e007      	b.n	8004db8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	60da      	str	r2, [r3, #12]
}
 8004db8:	bf00      	nop
 8004dba:	3714      	adds	r7, #20
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	3b10      	subs	r3, #16
 8004dd4:	4a14      	ldr	r2, [pc, #80]	@ (8004e28 <DMA_CalcBaseAndBitshift+0x64>)
 8004dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dda:	091b      	lsrs	r3, r3, #4
 8004ddc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004dde:	4a13      	ldr	r2, [pc, #76]	@ (8004e2c <DMA_CalcBaseAndBitshift+0x68>)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	4413      	add	r3, r2
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	461a      	mov	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2b03      	cmp	r3, #3
 8004df0:	d909      	bls.n	8004e06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004dfa:	f023 0303 	bic.w	r3, r3, #3
 8004dfe:	1d1a      	adds	r2, r3, #4
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e04:	e007      	b.n	8004e16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004e0e:	f023 0303 	bic.w	r3, r3, #3
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	aaaaaaab 	.word	0xaaaaaaab
 8004e2c:	08014d4c 	.word	0x08014d4c

08004e30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d11f      	bne.n	8004e8a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	2b03      	cmp	r3, #3
 8004e4e:	d856      	bhi.n	8004efe <DMA_CheckFifoParam+0xce>
 8004e50:	a201      	add	r2, pc, #4	@ (adr r2, 8004e58 <DMA_CheckFifoParam+0x28>)
 8004e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e56:	bf00      	nop
 8004e58:	08004e69 	.word	0x08004e69
 8004e5c:	08004e7b 	.word	0x08004e7b
 8004e60:	08004e69 	.word	0x08004e69
 8004e64:	08004eff 	.word	0x08004eff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d046      	beq.n	8004f02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e78:	e043      	b.n	8004f02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e82:	d140      	bne.n	8004f06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e88:	e03d      	b.n	8004f06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e92:	d121      	bne.n	8004ed8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	2b03      	cmp	r3, #3
 8004e98:	d837      	bhi.n	8004f0a <DMA_CheckFifoParam+0xda>
 8004e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8004ea0 <DMA_CheckFifoParam+0x70>)
 8004e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea0:	08004eb1 	.word	0x08004eb1
 8004ea4:	08004eb7 	.word	0x08004eb7
 8004ea8:	08004eb1 	.word	0x08004eb1
 8004eac:	08004ec9 	.word	0x08004ec9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8004eb4:	e030      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d025      	beq.n	8004f0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ec6:	e022      	b.n	8004f0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ecc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004ed0:	d11f      	bne.n	8004f12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004ed6:	e01c      	b.n	8004f12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d903      	bls.n	8004ee6 <DMA_CheckFifoParam+0xb6>
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	2b03      	cmp	r3, #3
 8004ee2:	d003      	beq.n	8004eec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ee4:	e018      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	73fb      	strb	r3, [r7, #15]
      break;
 8004eea:	e015      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00e      	beq.n	8004f16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	73fb      	strb	r3, [r7, #15]
      break;
 8004efc:	e00b      	b.n	8004f16 <DMA_CheckFifoParam+0xe6>
      break;
 8004efe:	bf00      	nop
 8004f00:	e00a      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>
      break;
 8004f02:	bf00      	nop
 8004f04:	e008      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>
      break;
 8004f06:	bf00      	nop
 8004f08:	e006      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>
      break;
 8004f0a:	bf00      	nop
 8004f0c:	e004      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>
      break;
 8004f0e:	bf00      	nop
 8004f10:	e002      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>
      break;   
 8004f12:	bf00      	nop
 8004f14:	e000      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>
      break;
 8004f16:	bf00      	nop
    }
  } 
  
  return status; 
 8004f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop

08004f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b089      	sub	sp, #36	@ 0x24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f32:	2300      	movs	r3, #0
 8004f34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61fb      	str	r3, [r7, #28]
 8004f42:	e159      	b.n	80051f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f44:	2201      	movs	r2, #1
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	4013      	ands	r3, r2
 8004f56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	f040 8148 	bne.w	80051f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f003 0303 	and.w	r3, r3, #3
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d005      	beq.n	8004f7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d130      	bne.n	8004fdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	2203      	movs	r2, #3
 8004f86:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8a:	43db      	mvns	r3, r3
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	68da      	ldr	r2, [r3, #12]
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	005b      	lsls	r3, r3, #1
 8004f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9e:	69ba      	ldr	r2, [r7, #24]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb8:	43db      	mvns	r3, r3
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	091b      	lsrs	r3, r3, #4
 8004fc6:	f003 0201 	and.w	r2, r3, #1
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f003 0303 	and.w	r3, r3, #3
 8004fe4:	2b03      	cmp	r3, #3
 8004fe6:	d017      	beq.n	8005018 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	2203      	movs	r2, #3
 8004ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	fa02 f303 	lsl.w	r3, r2, r3
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	4313      	orrs	r3, r2
 8005010:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f003 0303 	and.w	r3, r3, #3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d123      	bne.n	800506c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	08da      	lsrs	r2, r3, #3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	3208      	adds	r2, #8
 800502c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005030:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	f003 0307 	and.w	r3, r3, #7
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	220f      	movs	r2, #15
 800503c:	fa02 f303 	lsl.w	r3, r2, r3
 8005040:	43db      	mvns	r3, r3
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	4013      	ands	r3, r2
 8005046:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	691a      	ldr	r2, [r3, #16]
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	f003 0307 	and.w	r3, r3, #7
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	fa02 f303 	lsl.w	r3, r2, r3
 8005058:	69ba      	ldr	r2, [r7, #24]
 800505a:	4313      	orrs	r3, r2
 800505c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	08da      	lsrs	r2, r3, #3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	3208      	adds	r2, #8
 8005066:	69b9      	ldr	r1, [r7, #24]
 8005068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	005b      	lsls	r3, r3, #1
 8005076:	2203      	movs	r2, #3
 8005078:	fa02 f303 	lsl.w	r3, r2, r3
 800507c:	43db      	mvns	r3, r3
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	4013      	ands	r3, r2
 8005082:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f003 0203 	and.w	r2, r3, #3
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	fa02 f303 	lsl.w	r3, r2, r3
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	4313      	orrs	r3, r2
 8005098:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 80a2 	beq.w	80051f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050ae:	2300      	movs	r3, #0
 80050b0:	60fb      	str	r3, [r7, #12]
 80050b2:	4b57      	ldr	r3, [pc, #348]	@ (8005210 <HAL_GPIO_Init+0x2e8>)
 80050b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050b6:	4a56      	ldr	r2, [pc, #344]	@ (8005210 <HAL_GPIO_Init+0x2e8>)
 80050b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80050bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80050be:	4b54      	ldr	r3, [pc, #336]	@ (8005210 <HAL_GPIO_Init+0x2e8>)
 80050c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050ca:	4a52      	ldr	r2, [pc, #328]	@ (8005214 <HAL_GPIO_Init+0x2ec>)
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	089b      	lsrs	r3, r3, #2
 80050d0:	3302      	adds	r3, #2
 80050d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	f003 0303 	and.w	r3, r3, #3
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	220f      	movs	r2, #15
 80050e2:	fa02 f303 	lsl.w	r3, r2, r3
 80050e6:	43db      	mvns	r3, r3
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	4013      	ands	r3, r2
 80050ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a49      	ldr	r2, [pc, #292]	@ (8005218 <HAL_GPIO_Init+0x2f0>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d019      	beq.n	800512a <HAL_GPIO_Init+0x202>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a48      	ldr	r2, [pc, #288]	@ (800521c <HAL_GPIO_Init+0x2f4>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d013      	beq.n	8005126 <HAL_GPIO_Init+0x1fe>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a47      	ldr	r2, [pc, #284]	@ (8005220 <HAL_GPIO_Init+0x2f8>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d00d      	beq.n	8005122 <HAL_GPIO_Init+0x1fa>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a46      	ldr	r2, [pc, #280]	@ (8005224 <HAL_GPIO_Init+0x2fc>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d007      	beq.n	800511e <HAL_GPIO_Init+0x1f6>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a45      	ldr	r2, [pc, #276]	@ (8005228 <HAL_GPIO_Init+0x300>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d101      	bne.n	800511a <HAL_GPIO_Init+0x1f2>
 8005116:	2304      	movs	r3, #4
 8005118:	e008      	b.n	800512c <HAL_GPIO_Init+0x204>
 800511a:	2307      	movs	r3, #7
 800511c:	e006      	b.n	800512c <HAL_GPIO_Init+0x204>
 800511e:	2303      	movs	r3, #3
 8005120:	e004      	b.n	800512c <HAL_GPIO_Init+0x204>
 8005122:	2302      	movs	r3, #2
 8005124:	e002      	b.n	800512c <HAL_GPIO_Init+0x204>
 8005126:	2301      	movs	r3, #1
 8005128:	e000      	b.n	800512c <HAL_GPIO_Init+0x204>
 800512a:	2300      	movs	r3, #0
 800512c:	69fa      	ldr	r2, [r7, #28]
 800512e:	f002 0203 	and.w	r2, r2, #3
 8005132:	0092      	lsls	r2, r2, #2
 8005134:	4093      	lsls	r3, r2
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	4313      	orrs	r3, r2
 800513a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800513c:	4935      	ldr	r1, [pc, #212]	@ (8005214 <HAL_GPIO_Init+0x2ec>)
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	089b      	lsrs	r3, r3, #2
 8005142:	3302      	adds	r3, #2
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800514a:	4b38      	ldr	r3, [pc, #224]	@ (800522c <HAL_GPIO_Init+0x304>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	43db      	mvns	r3, r3
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	4013      	ands	r3, r2
 8005158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	4313      	orrs	r3, r2
 800516c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800516e:	4a2f      	ldr	r2, [pc, #188]	@ (800522c <HAL_GPIO_Init+0x304>)
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005174:	4b2d      	ldr	r3, [pc, #180]	@ (800522c <HAL_GPIO_Init+0x304>)
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	43db      	mvns	r3, r3
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	4013      	ands	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d003      	beq.n	8005198 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	4313      	orrs	r3, r2
 8005196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005198:	4a24      	ldr	r2, [pc, #144]	@ (800522c <HAL_GPIO_Init+0x304>)
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800519e:	4b23      	ldr	r3, [pc, #140]	@ (800522c <HAL_GPIO_Init+0x304>)
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	43db      	mvns	r3, r3
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	4013      	ands	r3, r2
 80051ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	4313      	orrs	r3, r2
 80051c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80051c2:	4a1a      	ldr	r2, [pc, #104]	@ (800522c <HAL_GPIO_Init+0x304>)
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051c8:	4b18      	ldr	r3, [pc, #96]	@ (800522c <HAL_GPIO_Init+0x304>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	43db      	mvns	r3, r3
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	4013      	ands	r3, r2
 80051d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d003      	beq.n	80051ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051ec:	4a0f      	ldr	r2, [pc, #60]	@ (800522c <HAL_GPIO_Init+0x304>)
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	3301      	adds	r3, #1
 80051f6:	61fb      	str	r3, [r7, #28]
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	2b0f      	cmp	r3, #15
 80051fc:	f67f aea2 	bls.w	8004f44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005200:	bf00      	nop
 8005202:	bf00      	nop
 8005204:	3724      	adds	r7, #36	@ 0x24
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	40023800 	.word	0x40023800
 8005214:	40013800 	.word	0x40013800
 8005218:	40020000 	.word	0x40020000
 800521c:	40020400 	.word	0x40020400
 8005220:	40020800 	.word	0x40020800
 8005224:	40020c00 	.word	0x40020c00
 8005228:	40021000 	.word	0x40021000
 800522c:	40013c00 	.word	0x40013c00

08005230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	460b      	mov	r3, r1
 800523a:	807b      	strh	r3, [r7, #2]
 800523c:	4613      	mov	r3, r2
 800523e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005240:	787b      	ldrb	r3, [r7, #1]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005246:	887a      	ldrh	r2, [r7, #2]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800524c:	e003      	b.n	8005256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800524e:	887b      	ldrh	r3, [r7, #2]
 8005250:	041a      	lsls	r2, r3, #16
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	619a      	str	r2, [r3, #24]
}
 8005256:	bf00      	nop
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005262:	b480      	push	{r7}
 8005264:	b085      	sub	sp, #20
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
 800526a:	460b      	mov	r3, r1
 800526c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005274:	887a      	ldrh	r2, [r7, #2]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4013      	ands	r3, r2
 800527a:	041a      	lsls	r2, r3, #16
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	43d9      	mvns	r1, r3
 8005280:	887b      	ldrh	r3, [r7, #2]
 8005282:	400b      	ands	r3, r1
 8005284:	431a      	orrs	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	619a      	str	r2, [r3, #24]
}
 800528a:	bf00      	nop
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
	...

08005298 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e12b      	b.n	8005502 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d106      	bne.n	80052c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7fe f89e 	bl	8003400 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2224      	movs	r2, #36	@ 0x24
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f022 0201 	bic.w	r2, r2, #1
 80052da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80052fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80052fc:	f005 f8f6 	bl	800a4ec <HAL_RCC_GetPCLK1Freq>
 8005300:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	4a81      	ldr	r2, [pc, #516]	@ (800550c <HAL_I2C_Init+0x274>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d807      	bhi.n	800531c <HAL_I2C_Init+0x84>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4a80      	ldr	r2, [pc, #512]	@ (8005510 <HAL_I2C_Init+0x278>)
 8005310:	4293      	cmp	r3, r2
 8005312:	bf94      	ite	ls
 8005314:	2301      	movls	r3, #1
 8005316:	2300      	movhi	r3, #0
 8005318:	b2db      	uxtb	r3, r3
 800531a:	e006      	b.n	800532a <HAL_I2C_Init+0x92>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4a7d      	ldr	r2, [pc, #500]	@ (8005514 <HAL_I2C_Init+0x27c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	bf94      	ite	ls
 8005324:	2301      	movls	r3, #1
 8005326:	2300      	movhi	r3, #0
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e0e7      	b.n	8005502 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	4a78      	ldr	r2, [pc, #480]	@ (8005518 <HAL_I2C_Init+0x280>)
 8005336:	fba2 2303 	umull	r2, r3, r2, r3
 800533a:	0c9b      	lsrs	r3, r3, #18
 800533c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	430a      	orrs	r2, r1
 8005350:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	4a6a      	ldr	r2, [pc, #424]	@ (800550c <HAL_I2C_Init+0x274>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d802      	bhi.n	800536c <HAL_I2C_Init+0xd4>
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	3301      	adds	r3, #1
 800536a:	e009      	b.n	8005380 <HAL_I2C_Init+0xe8>
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005372:	fb02 f303 	mul.w	r3, r2, r3
 8005376:	4a69      	ldr	r2, [pc, #420]	@ (800551c <HAL_I2C_Init+0x284>)
 8005378:	fba2 2303 	umull	r2, r3, r2, r3
 800537c:	099b      	lsrs	r3, r3, #6
 800537e:	3301      	adds	r3, #1
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6812      	ldr	r2, [r2, #0]
 8005384:	430b      	orrs	r3, r1
 8005386:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005392:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	495c      	ldr	r1, [pc, #368]	@ (800550c <HAL_I2C_Init+0x274>)
 800539c:	428b      	cmp	r3, r1
 800539e:	d819      	bhi.n	80053d4 <HAL_I2C_Init+0x13c>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	1e59      	subs	r1, r3, #1
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80053ae:	1c59      	adds	r1, r3, #1
 80053b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80053b4:	400b      	ands	r3, r1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <HAL_I2C_Init+0x138>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	1e59      	subs	r1, r3, #1
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80053c8:	3301      	adds	r3, #1
 80053ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053ce:	e051      	b.n	8005474 <HAL_I2C_Init+0x1dc>
 80053d0:	2304      	movs	r3, #4
 80053d2:	e04f      	b.n	8005474 <HAL_I2C_Init+0x1dc>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d111      	bne.n	8005400 <HAL_I2C_Init+0x168>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	1e58      	subs	r0, r3, #1
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6859      	ldr	r1, [r3, #4]
 80053e4:	460b      	mov	r3, r1
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	440b      	add	r3, r1
 80053ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80053ee:	3301      	adds	r3, #1
 80053f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	bf0c      	ite	eq
 80053f8:	2301      	moveq	r3, #1
 80053fa:	2300      	movne	r3, #0
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	e012      	b.n	8005426 <HAL_I2C_Init+0x18e>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	1e58      	subs	r0, r3, #1
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6859      	ldr	r1, [r3, #4]
 8005408:	460b      	mov	r3, r1
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	440b      	add	r3, r1
 800540e:	0099      	lsls	r1, r3, #2
 8005410:	440b      	add	r3, r1
 8005412:	fbb0 f3f3 	udiv	r3, r0, r3
 8005416:	3301      	adds	r3, #1
 8005418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800541c:	2b00      	cmp	r3, #0
 800541e:	bf0c      	ite	eq
 8005420:	2301      	moveq	r3, #1
 8005422:	2300      	movne	r3, #0
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <HAL_I2C_Init+0x196>
 800542a:	2301      	movs	r3, #1
 800542c:	e022      	b.n	8005474 <HAL_I2C_Init+0x1dc>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10e      	bne.n	8005454 <HAL_I2C_Init+0x1bc>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	1e58      	subs	r0, r3, #1
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6859      	ldr	r1, [r3, #4]
 800543e:	460b      	mov	r3, r1
 8005440:	005b      	lsls	r3, r3, #1
 8005442:	440b      	add	r3, r1
 8005444:	fbb0 f3f3 	udiv	r3, r0, r3
 8005448:	3301      	adds	r3, #1
 800544a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800544e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005452:	e00f      	b.n	8005474 <HAL_I2C_Init+0x1dc>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	1e58      	subs	r0, r3, #1
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6859      	ldr	r1, [r3, #4]
 800545c:	460b      	mov	r3, r1
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	440b      	add	r3, r1
 8005462:	0099      	lsls	r1, r3, #2
 8005464:	440b      	add	r3, r1
 8005466:	fbb0 f3f3 	udiv	r3, r0, r3
 800546a:	3301      	adds	r3, #1
 800546c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005470:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005474:	6879      	ldr	r1, [r7, #4]
 8005476:	6809      	ldr	r1, [r1, #0]
 8005478:	4313      	orrs	r3, r2
 800547a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	69da      	ldr	r2, [r3, #28]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	431a      	orrs	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	430a      	orrs	r2, r1
 8005496:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80054a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	6911      	ldr	r1, [r2, #16]
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	68d2      	ldr	r2, [r2, #12]
 80054ae:	4311      	orrs	r1, r2
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	6812      	ldr	r2, [r2, #0]
 80054b4:	430b      	orrs	r3, r1
 80054b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	695a      	ldr	r2, [r3, #20]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	431a      	orrs	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	430a      	orrs	r2, r1
 80054d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f042 0201 	orr.w	r2, r2, #1
 80054e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2220      	movs	r2, #32
 80054ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	000186a0 	.word	0x000186a0
 8005510:	001e847f 	.word	0x001e847f
 8005514:	003d08ff 	.word	0x003d08ff
 8005518:	431bde83 	.word	0x431bde83
 800551c:	10624dd3 	.word	0x10624dd3

08005520 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005532:	2b80      	cmp	r3, #128	@ 0x80
 8005534:	d103      	bne.n	800553e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2200      	movs	r2, #0
 800553c:	611a      	str	r2, [r3, #16]
  }
}
 800553e:	bf00      	nop
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
	...

0800554c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b088      	sub	sp, #32
 8005550:	af02      	add	r7, sp, #8
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	607a      	str	r2, [r7, #4]
 8005556:	461a      	mov	r2, r3
 8005558:	460b      	mov	r3, r1
 800555a:	817b      	strh	r3, [r7, #10]
 800555c:	4613      	mov	r3, r2
 800555e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005560:	f7fe fad4 	bl	8003b0c <HAL_GetTick>
 8005564:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b20      	cmp	r3, #32
 8005570:	f040 80e0 	bne.w	8005734 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	2319      	movs	r3, #25
 800557a:	2201      	movs	r2, #1
 800557c:	4970      	ldr	r1, [pc, #448]	@ (8005740 <HAL_I2C_Master_Transmit+0x1f4>)
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f002 feae 	bl	80082e0 <I2C_WaitOnFlagUntilTimeout>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800558a:	2302      	movs	r3, #2
 800558c:	e0d3      	b.n	8005736 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005594:	2b01      	cmp	r3, #1
 8005596:	d101      	bne.n	800559c <HAL_I2C_Master_Transmit+0x50>
 8005598:	2302      	movs	r3, #2
 800559a:	e0cc      	b.n	8005736 <HAL_I2C_Master_Transmit+0x1ea>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d007      	beq.n	80055c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f042 0201 	orr.w	r2, r2, #1
 80055c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2221      	movs	r2, #33	@ 0x21
 80055d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2210      	movs	r2, #16
 80055de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	893a      	ldrh	r2, [r7, #8]
 80055f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	4a50      	ldr	r2, [pc, #320]	@ (8005744 <HAL_I2C_Master_Transmit+0x1f8>)
 8005602:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005604:	8979      	ldrh	r1, [r7, #10]
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	6a3a      	ldr	r2, [r7, #32]
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f002 faa4 	bl	8007b58 <I2C_MasterRequestWrite>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e08d      	b.n	8005736 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800561a:	2300      	movs	r3, #0
 800561c:	613b      	str	r3, [r7, #16]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	613b      	str	r3, [r7, #16]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	613b      	str	r3, [r7, #16]
 800562e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005630:	e066      	b.n	8005700 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	6a39      	ldr	r1, [r7, #32]
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f002 ff6c 	bl	8008514 <I2C_WaitOnTXEFlagUntilTimeout>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00d      	beq.n	800565e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005646:	2b04      	cmp	r3, #4
 8005648:	d107      	bne.n	800565a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005658:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e06b      	b.n	8005736 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005662:	781a      	ldrb	r2, [r3, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800566e:	1c5a      	adds	r2, r3, #1
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005678:	b29b      	uxth	r3, r3
 800567a:	3b01      	subs	r3, #1
 800567c:	b29a      	uxth	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005686:	3b01      	subs	r3, #1
 8005688:	b29a      	uxth	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	f003 0304 	and.w	r3, r3, #4
 8005698:	2b04      	cmp	r3, #4
 800569a:	d11b      	bne.n	80056d4 <HAL_I2C_Master_Transmit+0x188>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d017      	beq.n	80056d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a8:	781a      	ldrb	r2, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b4:	1c5a      	adds	r2, r3, #1
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056be:	b29b      	uxth	r3, r3
 80056c0:	3b01      	subs	r3, #1
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056cc:	3b01      	subs	r3, #1
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	6a39      	ldr	r1, [r7, #32]
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f002 ff63 	bl	80085a4 <I2C_WaitOnBTFFlagUntilTimeout>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00d      	beq.n	8005700 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e8:	2b04      	cmp	r3, #4
 80056ea:	d107      	bne.n	80056fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e01a      	b.n	8005736 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005704:	2b00      	cmp	r3, #0
 8005706:	d194      	bne.n	8005632 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005716:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2220      	movs	r2, #32
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005730:	2300      	movs	r3, #0
 8005732:	e000      	b.n	8005736 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005734:	2302      	movs	r3, #2
  }
}
 8005736:	4618      	mov	r0, r3
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	00100002 	.word	0x00100002
 8005744:	ffff0000 	.word	0xffff0000

08005748 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b088      	sub	sp, #32
 800574c:	af02      	add	r7, sp, #8
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	4608      	mov	r0, r1
 8005752:	4611      	mov	r1, r2
 8005754:	461a      	mov	r2, r3
 8005756:	4603      	mov	r3, r0
 8005758:	817b      	strh	r3, [r7, #10]
 800575a:	460b      	mov	r3, r1
 800575c:	813b      	strh	r3, [r7, #8]
 800575e:	4613      	mov	r3, r2
 8005760:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005762:	f7fe f9d3 	bl	8003b0c <HAL_GetTick>
 8005766:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800576e:	b2db      	uxtb	r3, r3
 8005770:	2b20      	cmp	r3, #32
 8005772:	f040 80d9 	bne.w	8005928 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	2319      	movs	r3, #25
 800577c:	2201      	movs	r2, #1
 800577e:	496d      	ldr	r1, [pc, #436]	@ (8005934 <HAL_I2C_Mem_Write+0x1ec>)
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f002 fdad 	bl	80082e0 <I2C_WaitOnFlagUntilTimeout>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d001      	beq.n	8005790 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800578c:	2302      	movs	r3, #2
 800578e:	e0cc      	b.n	800592a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005796:	2b01      	cmp	r3, #1
 8005798:	d101      	bne.n	800579e <HAL_I2C_Mem_Write+0x56>
 800579a:	2302      	movs	r3, #2
 800579c:	e0c5      	b.n	800592a <HAL_I2C_Mem_Write+0x1e2>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d007      	beq.n	80057c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0201 	orr.w	r2, r2, #1
 80057c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2221      	movs	r2, #33	@ 0x21
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2240      	movs	r2, #64	@ 0x40
 80057e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6a3a      	ldr	r2, [r7, #32]
 80057ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80057f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4a4d      	ldr	r2, [pc, #308]	@ (8005938 <HAL_I2C_Mem_Write+0x1f0>)
 8005804:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005806:	88f8      	ldrh	r0, [r7, #6]
 8005808:	893a      	ldrh	r2, [r7, #8]
 800580a:	8979      	ldrh	r1, [r7, #10]
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	9301      	str	r3, [sp, #4]
 8005810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	4603      	mov	r3, r0
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f002 fa20 	bl	8007c5c <I2C_RequestMemoryWrite>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d052      	beq.n	80058c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e081      	b.n	800592a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f002 fe72 	bl	8008514 <I2C_WaitOnTXEFlagUntilTimeout>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00d      	beq.n	8005852 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583a:	2b04      	cmp	r3, #4
 800583c:	d107      	bne.n	800584e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800584c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e06b      	b.n	800592a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005856:	781a      	ldrb	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005862:	1c5a      	adds	r2, r3, #1
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800586c:	3b01      	subs	r3, #1
 800586e:	b29a      	uxth	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005878:	b29b      	uxth	r3, r3
 800587a:	3b01      	subs	r3, #1
 800587c:	b29a      	uxth	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	695b      	ldr	r3, [r3, #20]
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b04      	cmp	r3, #4
 800588e:	d11b      	bne.n	80058c8 <HAL_I2C_Mem_Write+0x180>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005894:	2b00      	cmp	r3, #0
 8005896:	d017      	beq.n	80058c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800589c:	781a      	ldrb	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058b2:	3b01      	subs	r3, #1
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058be:	b29b      	uxth	r3, r3
 80058c0:	3b01      	subs	r3, #1
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1aa      	bne.n	8005826 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f002 fe65 	bl	80085a4 <I2C_WaitOnBTFFlagUntilTimeout>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00d      	beq.n	80058fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e4:	2b04      	cmp	r3, #4
 80058e6:	d107      	bne.n	80058f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e016      	b.n	800592a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800590a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2220      	movs	r2, #32
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005924:	2300      	movs	r3, #0
 8005926:	e000      	b.n	800592a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005928:	2302      	movs	r3, #2
  }
}
 800592a:	4618      	mov	r0, r3
 800592c:	3718      	adds	r7, #24
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	00100002 	.word	0x00100002
 8005938:	ffff0000 	.word	0xffff0000

0800593c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b08c      	sub	sp, #48	@ 0x30
 8005940:	af02      	add	r7, sp, #8
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	4608      	mov	r0, r1
 8005946:	4611      	mov	r1, r2
 8005948:	461a      	mov	r2, r3
 800594a:	4603      	mov	r3, r0
 800594c:	817b      	strh	r3, [r7, #10]
 800594e:	460b      	mov	r3, r1
 8005950:	813b      	strh	r3, [r7, #8]
 8005952:	4613      	mov	r3, r2
 8005954:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005956:	f7fe f8d9 	bl	8003b0c <HAL_GetTick>
 800595a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b20      	cmp	r3, #32
 8005966:	f040 8214 	bne.w	8005d92 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800596a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	2319      	movs	r3, #25
 8005970:	2201      	movs	r2, #1
 8005972:	497b      	ldr	r1, [pc, #492]	@ (8005b60 <HAL_I2C_Mem_Read+0x224>)
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f002 fcb3 	bl	80082e0 <I2C_WaitOnFlagUntilTimeout>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005980:	2302      	movs	r3, #2
 8005982:	e207      	b.n	8005d94 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800598a:	2b01      	cmp	r3, #1
 800598c:	d101      	bne.n	8005992 <HAL_I2C_Mem_Read+0x56>
 800598e:	2302      	movs	r3, #2
 8005990:	e200      	b.n	8005d94 <HAL_I2C_Mem_Read+0x458>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d007      	beq.n	80059b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f042 0201 	orr.w	r2, r2, #1
 80059b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2222      	movs	r2, #34	@ 0x22
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2240      	movs	r2, #64	@ 0x40
 80059d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80059e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4a5b      	ldr	r2, [pc, #364]	@ (8005b64 <HAL_I2C_Mem_Read+0x228>)
 80059f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059fa:	88f8      	ldrh	r0, [r7, #6]
 80059fc:	893a      	ldrh	r2, [r7, #8]
 80059fe:	8979      	ldrh	r1, [r7, #10]
 8005a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a02:	9301      	str	r3, [sp, #4]
 8005a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	4603      	mov	r3, r0
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f002 f9bc 	bl	8007d88 <I2C_RequestMemoryRead>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e1bc      	b.n	8005d94 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d113      	bne.n	8005a4a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a22:	2300      	movs	r3, #0
 8005a24:	623b      	str	r3, [r7, #32]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	623b      	str	r3, [r7, #32]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	623b      	str	r3, [r7, #32]
 8005a36:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a46:	601a      	str	r2, [r3, #0]
 8005a48:	e190      	b.n	8005d6c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d11b      	bne.n	8005a8a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a62:	2300      	movs	r3, #0
 8005a64:	61fb      	str	r3, [r7, #28]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	61fb      	str	r3, [r7, #28]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	61fb      	str	r3, [r7, #28]
 8005a76:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	e170      	b.n	8005d6c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d11b      	bne.n	8005aca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005aa0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ab0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	61bb      	str	r3, [r7, #24]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	61bb      	str	r3, [r7, #24]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	61bb      	str	r3, [r7, #24]
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	e150      	b.n	8005d6c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aca:	2300      	movs	r3, #0
 8005acc:	617b      	str	r3, [r7, #20]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	617b      	str	r3, [r7, #20]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	617b      	str	r3, [r7, #20]
 8005ade:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005ae0:	e144      	b.n	8005d6c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	f200 80f1 	bhi.w	8005cce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d123      	bne.n	8005b3c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005af4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005af6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f002 fdcd 	bl	8008698 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e145      	b.n	8005d94 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	691a      	ldr	r2, [r3, #16]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b12:	b2d2      	uxtb	r2, r2
 8005b14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b1a:	1c5a      	adds	r2, r3, #1
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b24:	3b01      	subs	r3, #1
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	3b01      	subs	r3, #1
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005b3a:	e117      	b.n	8005d6c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d14e      	bne.n	8005be2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	4906      	ldr	r1, [pc, #24]	@ (8005b68 <HAL_I2C_Mem_Read+0x22c>)
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f002 fbc6 	bl	80082e0 <I2C_WaitOnFlagUntilTimeout>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d008      	beq.n	8005b6c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e11a      	b.n	8005d94 <HAL_I2C_Mem_Read+0x458>
 8005b5e:	bf00      	nop
 8005b60:	00100002 	.word	0x00100002
 8005b64:	ffff0000 	.word	0xffff0000
 8005b68:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	691a      	ldr	r2, [r3, #16]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b86:	b2d2      	uxtb	r2, r2
 8005b88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b8e:	1c5a      	adds	r2, r3, #1
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	691a      	ldr	r2, [r3, #16]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb8:	b2d2      	uxtb	r2, r2
 8005bba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc0:	1c5a      	adds	r2, r3, #1
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005be0:	e0c4      	b.n	8005d6c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be4:	9300      	str	r3, [sp, #0]
 8005be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be8:	2200      	movs	r2, #0
 8005bea:	496c      	ldr	r1, [pc, #432]	@ (8005d9c <HAL_I2C_Mem_Read+0x460>)
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f002 fb77 	bl	80082e0 <I2C_WaitOnFlagUntilTimeout>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e0cb      	b.n	8005d94 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	691a      	ldr	r2, [r3, #16]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c16:	b2d2      	uxtb	r2, r2
 8005c18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c1e:	1c5a      	adds	r2, r3, #1
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	3b01      	subs	r3, #1
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c44:	2200      	movs	r2, #0
 8005c46:	4955      	ldr	r1, [pc, #340]	@ (8005d9c <HAL_I2C_Mem_Read+0x460>)
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f002 fb49 	bl	80082e0 <I2C_WaitOnFlagUntilTimeout>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d001      	beq.n	8005c58 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e09d      	b.n	8005d94 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	691a      	ldr	r2, [r3, #16]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c72:	b2d2      	uxtb	r2, r2
 8005c74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7a:	1c5a      	adds	r2, r3, #1
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c84:	3b01      	subs	r3, #1
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	3b01      	subs	r3, #1
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	691a      	ldr	r2, [r3, #16]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca4:	b2d2      	uxtb	r2, r2
 8005ca6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cac:	1c5a      	adds	r2, r3, #1
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005ccc:	e04e      	b.n	8005d6c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cd0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f002 fce0 	bl	8008698 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e058      	b.n	8005d94 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	691a      	ldr	r2, [r3, #16]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cec:	b2d2      	uxtb	r2, r2
 8005cee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf4:	1c5a      	adds	r2, r3, #1
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	f003 0304 	and.w	r3, r3, #4
 8005d1e:	2b04      	cmp	r3, #4
 8005d20:	d124      	bne.n	8005d6c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d26:	2b03      	cmp	r3, #3
 8005d28:	d107      	bne.n	8005d3a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d38:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	691a      	ldr	r2, [r3, #16]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d44:	b2d2      	uxtb	r2, r2
 8005d46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4c:	1c5a      	adds	r2, r3, #1
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d56:	3b01      	subs	r3, #1
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	3b01      	subs	r3, #1
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f47f aeb6 	bne.w	8005ae2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2220      	movs	r2, #32
 8005d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	e000      	b.n	8005d94 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005d92:	2302      	movs	r3, #2
  }
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3728      	adds	r7, #40	@ 0x28
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	00010004 	.word	0x00010004

08005da0 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b08a      	sub	sp, #40	@ 0x28
 8005da4:	af02      	add	r7, sp, #8
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	4608      	mov	r0, r1
 8005daa:	4611      	mov	r1, r2
 8005dac:	461a      	mov	r2, r3
 8005dae:	4603      	mov	r3, r0
 8005db0:	817b      	strh	r3, [r7, #10]
 8005db2:	460b      	mov	r3, r1
 8005db4:	813b      	strh	r3, [r7, #8]
 8005db6:	4613      	mov	r3, r2
 8005db8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005dbe:	f7fd fea5 	bl	8003b0c <HAL_GetTick>
 8005dc2:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b20      	cmp	r3, #32
 8005dce:	f040 8136 	bne.w	800603e <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005dd2:	4b9d      	ldr	r3, [pc, #628]	@ (8006048 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	08db      	lsrs	r3, r3, #3
 8005dd8:	4a9c      	ldr	r2, [pc, #624]	@ (800604c <HAL_I2C_Mem_Write_DMA+0x2ac>)
 8005dda:	fba2 2303 	umull	r2, r3, r2, r3
 8005dde:	0a1a      	lsrs	r2, r3, #8
 8005de0:	4613      	mov	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4413      	add	r3, r2
 8005de6:	009a      	lsls	r2, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	3b01      	subs	r3, #1
 8005df0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d112      	bne.n	8005e1e <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2220      	movs	r2, #32
 8005e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e12:	f043 0220 	orr.w	r2, r3, #32
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	e110      	b.n	8006040 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d0df      	beq.n	8005dec <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d101      	bne.n	8005e3a <HAL_I2C_Mem_Write_DMA+0x9a>
 8005e36:	2302      	movs	r3, #2
 8005e38:	e102      	b.n	8006040 <HAL_I2C_Mem_Write_DMA+0x2a0>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d007      	beq.n	8005e60 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f042 0201 	orr.w	r2, r2, #1
 8005e5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2221      	movs	r2, #33	@ 0x21
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2240      	movs	r2, #64	@ 0x40
 8005e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8005e90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	4a6c      	ldr	r2, [pc, #432]	@ (8006050 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8005ea0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8005ea2:	897a      	ldrh	r2, [r7, #10]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8005ea8:	893a      	ldrh	r2, [r7, #8]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8005eae:	88fa      	ldrh	r2, [r7, #6]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 80a9 	beq.w	8006016 <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d02a      	beq.n	8005f22 <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ed0:	4a60      	ldr	r2, [pc, #384]	@ (8006054 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8005ed2:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ed8:	4a5f      	ldr	r2, [pc, #380]	@ (8006058 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8005eda:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ee8:	2200      	movs	r2, #0
 8005eea:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ef8:	2200      	movs	r2, #0
 8005efa:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f04:	4619      	mov	r1, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	3310      	adds	r3, #16
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f12:	f7fe fd0b 	bl	800492c <HAL_DMA_Start_IT>
 8005f16:	4603      	mov	r3, r0
 8005f18:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005f1a:	7efb      	ldrb	r3, [r7, #27]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d166      	bne.n	8005fee <HAL_I2C_Mem_Write_DMA+0x24e>
 8005f20:	e013      	b.n	8005f4a <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2220      	movs	r2, #32
 8005f26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f36:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e07a      	b.n	8006040 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005f4a:	88f8      	ldrh	r0, [r7, #6]
 8005f4c:	893a      	ldrh	r2, [r7, #8]
 8005f4e:	8979      	ldrh	r1, [r7, #10]
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	9301      	str	r3, [sp, #4]
 8005f54:	2323      	movs	r3, #35	@ 0x23
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	4603      	mov	r3, r0
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f001 fe7e 	bl	8007c5c <I2C_RequestMemoryWrite>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d022      	beq.n	8005fac <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fe fd36 	bl	80049dc <HAL_DMA_Abort_IT>
 8005f70:	4603      	mov	r3, r0
 8005f72:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f78:	2200      	movs	r2, #0
 8005f7a:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f8a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 0201 	bic.w	r2, r2, #1
 8005fa6:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e049      	b.n	8006040 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fac:	2300      	movs	r3, #0
 8005fae:	613b      	str	r3, [r7, #16]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	613b      	str	r3, [r7, #16]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	613b      	str	r3, [r7, #16]
 8005fc0:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fd8:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fe8:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8005fea:	2300      	movs	r3, #0
 8005fec:	e028      	b.n	8006040 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2220      	movs	r2, #32
 8005ff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006002:	f043 0210 	orr.w	r2, r3, #16
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e014      	b.n	8006040 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2220      	movs	r2, #32
 800601a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800602a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e000      	b.n	8006040 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 800603e:	2302      	movs	r3, #2
  }
}
 8006040:	4618      	mov	r0, r3
 8006042:	3720      	adds	r7, #32
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	20000008 	.word	0x20000008
 800604c:	14f8b589 	.word	0x14f8b589
 8006050:	ffff0000 	.word	0xffff0000
 8006054:	08007f59 	.word	0x08007f59
 8006058:	08008117 	.word	0x08008117

0800605c <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b08c      	sub	sp, #48	@ 0x30
 8006060:	af02      	add	r7, sp, #8
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	4608      	mov	r0, r1
 8006066:	4611      	mov	r1, r2
 8006068:	461a      	mov	r2, r3
 800606a:	4603      	mov	r3, r0
 800606c:	817b      	strh	r3, [r7, #10]
 800606e:	460b      	mov	r3, r1
 8006070:	813b      	strh	r3, [r7, #8]
 8006072:	4613      	mov	r3, r2
 8006074:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006076:	f7fd fd49 	bl	8003b0c <HAL_GetTick>
 800607a:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 800607c:	2300      	movs	r3, #0
 800607e:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2b20      	cmp	r3, #32
 800608a:	f040 8172 	bne.w	8006372 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800608e:	4b93      	ldr	r3, [pc, #588]	@ (80062dc <HAL_I2C_Mem_Read_DMA+0x280>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	08db      	lsrs	r3, r3, #3
 8006094:	4a92      	ldr	r2, [pc, #584]	@ (80062e0 <HAL_I2C_Mem_Read_DMA+0x284>)
 8006096:	fba2 2303 	umull	r2, r3, r2, r3
 800609a:	0a1a      	lsrs	r2, r3, #8
 800609c:	4613      	mov	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	009a      	lsls	r2, r3, #2
 80060a4:	4413      	add	r3, r2
 80060a6:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	3b01      	subs	r3, #1
 80060ac:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d112      	bne.n	80060da <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2220      	movs	r2, #32
 80060be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ce:	f043 0220 	orr.w	r2, r3, #32
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80060d6:	2302      	movs	r3, #2
 80060d8:	e14c      	b.n	8006374 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d0df      	beq.n	80060a8 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d101      	bne.n	80060f6 <HAL_I2C_Mem_Read_DMA+0x9a>
 80060f2:	2302      	movs	r3, #2
 80060f4:	e13e      	b.n	8006374 <HAL_I2C_Mem_Read_DMA+0x318>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b01      	cmp	r3, #1
 800610a:	d007      	beq.n	800611c <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f042 0201 	orr.w	r2, r2, #1
 800611a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800612a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2222      	movs	r2, #34	@ 0x22
 8006130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2240      	movs	r2, #64	@ 0x40
 8006138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006146:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800614c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006152:	b29a      	uxth	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	4a62      	ldr	r2, [pc, #392]	@ (80062e4 <HAL_I2C_Mem_Read_DMA+0x288>)
 800615c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800615e:	897a      	ldrh	r2, [r7, #10]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8006164:	893a      	ldrh	r2, [r7, #8]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800616a:	88fa      	ldrh	r2, [r7, #6]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 80cc 	beq.w	8006318 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006184:	2b00      	cmp	r3, #0
 8006186:	d02d      	beq.n	80061e4 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800618c:	4a56      	ldr	r2, [pc, #344]	@ (80062e8 <HAL_I2C_Mem_Read_DMA+0x28c>)
 800618e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006194:	4a55      	ldr	r2, [pc, #340]	@ (80062ec <HAL_I2C_Mem_Read_DMA+0x290>)
 8006196:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800619c:	2200      	movs	r2, #0
 800619e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a4:	2200      	movs	r2, #0
 80061a6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ac:	2200      	movs	r2, #0
 80061ae:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061b4:	2200      	movs	r2, #0
 80061b6:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	3310      	adds	r3, #16
 80061c2:	4619      	mov	r1, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c8:	461a      	mov	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061ce:	f7fe fbad 	bl	800492c <HAL_DMA_Start_IT>
 80061d2:	4603      	mov	r3, r0
 80061d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80061d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f040 8087 	bne.w	80062f0 <HAL_I2C_Mem_Read_DMA+0x294>
 80061e2:	e013      	b.n	800620c <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2220      	movs	r2, #32
 80061e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e0b3      	b.n	8006374 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800620c:	88f8      	ldrh	r0, [r7, #6]
 800620e:	893a      	ldrh	r2, [r7, #8]
 8006210:	8979      	ldrh	r1, [r7, #10]
 8006212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006214:	9301      	str	r3, [sp, #4]
 8006216:	2323      	movs	r3, #35	@ 0x23
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	4603      	mov	r3, r0
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f001 fdb3 	bl	8007d88 <I2C_RequestMemoryRead>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d023      	beq.n	8006270 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622c:	4618      	mov	r0, r3
 800622e:	f7fe fbd5 	bl	80049dc <HAL_DMA_Abort_IT>
 8006232:	4603      	mov	r3, r0
 8006234:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800623c:	2200      	movs	r2, #0
 800623e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800624e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f022 0201 	bic.w	r2, r2, #1
 800626a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e081      	b.n	8006374 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006274:	2b01      	cmp	r3, #1
 8006276:	d108      	bne.n	800628a <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006286:	601a      	str	r2, [r3, #0]
 8006288:	e007      	b.n	800629a <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006298:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800629a:	2300      	movs	r3, #0
 800629c:	61bb      	str	r3, [r7, #24]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	695b      	ldr	r3, [r3, #20]
 80062a4:	61bb      	str	r3, [r7, #24]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	61bb      	str	r3, [r7, #24]
 80062ae:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	685a      	ldr	r2, [r3, #4]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062c6:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062d6:	605a      	str	r2, [r3, #4]
 80062d8:	e049      	b.n	800636e <HAL_I2C_Mem_Read_DMA+0x312>
 80062da:	bf00      	nop
 80062dc:	20000008 	.word	0x20000008
 80062e0:	14f8b589 	.word	0x14f8b589
 80062e4:	ffff0000 	.word	0xffff0000
 80062e8:	08007f59 	.word	0x08007f59
 80062ec:	08008117 	.word	0x08008117
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2220      	movs	r2, #32
 80062f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006304:	f043 0210 	orr.w	r2, r3, #16
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e02d      	b.n	8006374 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006318:	88f8      	ldrh	r0, [r7, #6]
 800631a:	893a      	ldrh	r2, [r7, #8]
 800631c:	8979      	ldrh	r1, [r7, #10]
 800631e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006320:	9301      	str	r3, [sp, #4]
 8006322:	2323      	movs	r3, #35	@ 0x23
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	4603      	mov	r3, r0
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f001 fd2d 	bl	8007d88 <I2C_RequestMemoryRead>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d001      	beq.n	8006338 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e01d      	b.n	8006374 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006338:	2300      	movs	r3, #0
 800633a:	617b      	str	r3, [r7, #20]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	617b      	str	r3, [r7, #20]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	617b      	str	r3, [r7, #20]
 800634c:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800635c:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2220      	movs	r2, #32
 8006362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 800636e:	2300      	movs	r3, #0
 8006370:	e000      	b.n	8006374 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 8006372:	2302      	movs	r3, #2
  }
}
 8006374:	4618      	mov	r0, r3
 8006376:	3728      	adds	r7, #40	@ 0x28
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b088      	sub	sp, #32
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006384:	2300      	movs	r3, #0
 8006386:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006394:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800639c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063a4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80063a6:	7bfb      	ldrb	r3, [r7, #15]
 80063a8:	2b10      	cmp	r3, #16
 80063aa:	d003      	beq.n	80063b4 <HAL_I2C_EV_IRQHandler+0x38>
 80063ac:	7bfb      	ldrb	r3, [r7, #15]
 80063ae:	2b40      	cmp	r3, #64	@ 0x40
 80063b0:	f040 80c1 	bne.w	8006536 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10d      	bne.n	80063ea <HAL_I2C_EV_IRQHandler+0x6e>
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80063d4:	d003      	beq.n	80063de <HAL_I2C_EV_IRQHandler+0x62>
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80063dc:	d101      	bne.n	80063e2 <HAL_I2C_EV_IRQHandler+0x66>
 80063de:	2301      	movs	r3, #1
 80063e0:	e000      	b.n	80063e4 <HAL_I2C_EV_IRQHandler+0x68>
 80063e2:	2300      	movs	r3, #0
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	f000 8132 	beq.w	800664e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00c      	beq.n	800640e <HAL_I2C_EV_IRQHandler+0x92>
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	0a5b      	lsrs	r3, r3, #9
 80063f8:	f003 0301 	and.w	r3, r3, #1
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d006      	beq.n	800640e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f002 f9d5 	bl	80087b0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fd87 	bl	8006f1a <I2C_Master_SB>
 800640c:	e092      	b.n	8006534 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	08db      	lsrs	r3, r3, #3
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	2b00      	cmp	r3, #0
 8006418:	d009      	beq.n	800642e <HAL_I2C_EV_IRQHandler+0xb2>
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	0a5b      	lsrs	r3, r3, #9
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	d003      	beq.n	800642e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fdfd 	bl	8007026 <I2C_Master_ADD10>
 800642c:	e082      	b.n	8006534 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	085b      	lsrs	r3, r3, #1
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d009      	beq.n	800644e <HAL_I2C_EV_IRQHandler+0xd2>
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	0a5b      	lsrs	r3, r3, #9
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fe17 	bl	800707a <I2C_Master_ADDR>
 800644c:	e072      	b.n	8006534 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	089b      	lsrs	r3, r3, #2
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b00      	cmp	r3, #0
 8006458:	d03b      	beq.n	80064d2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006464:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006468:	f000 80f3 	beq.w	8006652 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	09db      	lsrs	r3, r3, #7
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00f      	beq.n	8006498 <HAL_I2C_EV_IRQHandler+0x11c>
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	0a9b      	lsrs	r3, r3, #10
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	2b00      	cmp	r3, #0
 8006482:	d009      	beq.n	8006498 <HAL_I2C_EV_IRQHandler+0x11c>
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	089b      	lsrs	r3, r3, #2
 8006488:	f003 0301 	and.w	r3, r3, #1
 800648c:	2b00      	cmp	r3, #0
 800648e:	d103      	bne.n	8006498 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f9df 	bl	8006854 <I2C_MasterTransmit_TXE>
 8006496:	e04d      	b.n	8006534 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	089b      	lsrs	r3, r3, #2
 800649c:	f003 0301 	and.w	r3, r3, #1
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 80d6 	beq.w	8006652 <HAL_I2C_EV_IRQHandler+0x2d6>
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	0a5b      	lsrs	r3, r3, #9
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 80cf 	beq.w	8006652 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80064b4:	7bbb      	ldrb	r3, [r7, #14]
 80064b6:	2b21      	cmp	r3, #33	@ 0x21
 80064b8:	d103      	bne.n	80064c2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fa66 	bl	800698c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80064c0:	e0c7      	b.n	8006652 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80064c2:	7bfb      	ldrb	r3, [r7, #15]
 80064c4:	2b40      	cmp	r3, #64	@ 0x40
 80064c6:	f040 80c4 	bne.w	8006652 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 fad4 	bl	8006a78 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80064d0:	e0bf      	b.n	8006652 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064e0:	f000 80b7 	beq.w	8006652 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	099b      	lsrs	r3, r3, #6
 80064e8:	f003 0301 	and.w	r3, r3, #1
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00f      	beq.n	8006510 <HAL_I2C_EV_IRQHandler+0x194>
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	0a9b      	lsrs	r3, r3, #10
 80064f4:	f003 0301 	and.w	r3, r3, #1
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d009      	beq.n	8006510 <HAL_I2C_EV_IRQHandler+0x194>
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	089b      	lsrs	r3, r3, #2
 8006500:	f003 0301 	and.w	r3, r3, #1
 8006504:	2b00      	cmp	r3, #0
 8006506:	d103      	bne.n	8006510 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 fb4d 	bl	8006ba8 <I2C_MasterReceive_RXNE>
 800650e:	e011      	b.n	8006534 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	089b      	lsrs	r3, r3, #2
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 809a 	beq.w	8006652 <HAL_I2C_EV_IRQHandler+0x2d6>
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	0a5b      	lsrs	r3, r3, #9
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	2b00      	cmp	r3, #0
 8006528:	f000 8093 	beq.w	8006652 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 fc03 	bl	8006d38 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006532:	e08e      	b.n	8006652 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006534:	e08d      	b.n	8006652 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800653a:	2b00      	cmp	r3, #0
 800653c:	d004      	beq.n	8006548 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	695b      	ldr	r3, [r3, #20]
 8006544:	61fb      	str	r3, [r7, #28]
 8006546:	e007      	b.n	8006558 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	085b      	lsrs	r3, r3, #1
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	2b00      	cmp	r3, #0
 8006562:	d012      	beq.n	800658a <HAL_I2C_EV_IRQHandler+0x20e>
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	0a5b      	lsrs	r3, r3, #9
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00c      	beq.n	800658a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006574:	2b00      	cmp	r3, #0
 8006576:	d003      	beq.n	8006580 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006580:	69b9      	ldr	r1, [r7, #24]
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 ffc8 	bl	8007518 <I2C_Slave_ADDR>
 8006588:	e066      	b.n	8006658 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	091b      	lsrs	r3, r3, #4
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b00      	cmp	r3, #0
 8006594:	d009      	beq.n	80065aa <HAL_I2C_EV_IRQHandler+0x22e>
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	0a5b      	lsrs	r3, r3, #9
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f001 f802 	bl	80075ac <I2C_Slave_STOPF>
 80065a8:	e056      	b.n	8006658 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80065aa:	7bbb      	ldrb	r3, [r7, #14]
 80065ac:	2b21      	cmp	r3, #33	@ 0x21
 80065ae:	d002      	beq.n	80065b6 <HAL_I2C_EV_IRQHandler+0x23a>
 80065b0:	7bbb      	ldrb	r3, [r7, #14]
 80065b2:	2b29      	cmp	r3, #41	@ 0x29
 80065b4:	d125      	bne.n	8006602 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	09db      	lsrs	r3, r3, #7
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00f      	beq.n	80065e2 <HAL_I2C_EV_IRQHandler+0x266>
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	0a9b      	lsrs	r3, r3, #10
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d009      	beq.n	80065e2 <HAL_I2C_EV_IRQHandler+0x266>
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	089b      	lsrs	r3, r3, #2
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d103      	bne.n	80065e2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 fede 	bl	800739c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80065e0:	e039      	b.n	8006656 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	089b      	lsrs	r3, r3, #2
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d033      	beq.n	8006656 <HAL_I2C_EV_IRQHandler+0x2da>
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	0a5b      	lsrs	r3, r3, #9
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d02d      	beq.n	8006656 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 ff0b 	bl	8007416 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006600:	e029      	b.n	8006656 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	099b      	lsrs	r3, r3, #6
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00f      	beq.n	800662e <HAL_I2C_EV_IRQHandler+0x2b2>
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	0a9b      	lsrs	r3, r3, #10
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	2b00      	cmp	r3, #0
 8006618:	d009      	beq.n	800662e <HAL_I2C_EV_IRQHandler+0x2b2>
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	089b      	lsrs	r3, r3, #2
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b00      	cmp	r3, #0
 8006624:	d103      	bne.n	800662e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 ff16 	bl	8007458 <I2C_SlaveReceive_RXNE>
 800662c:	e014      	b.n	8006658 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	089b      	lsrs	r3, r3, #2
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00e      	beq.n	8006658 <HAL_I2C_EV_IRQHandler+0x2dc>
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	0a5b      	lsrs	r3, r3, #9
 800663e:	f003 0301 	and.w	r3, r3, #1
 8006642:	2b00      	cmp	r3, #0
 8006644:	d008      	beq.n	8006658 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 ff44 	bl	80074d4 <I2C_SlaveReceive_BTF>
 800664c:	e004      	b.n	8006658 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800664e:	bf00      	nop
 8006650:	e002      	b.n	8006658 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006652:	bf00      	nop
 8006654:	e000      	b.n	8006658 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006656:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006658:	3720      	adds	r7, #32
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}

0800665e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800665e:	b580      	push	{r7, lr}
 8006660:	b08a      	sub	sp, #40	@ 0x28
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	695b      	ldr	r3, [r3, #20]
 800666c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006676:	2300      	movs	r3, #0
 8006678:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006680:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006682:	6a3b      	ldr	r3, [r7, #32]
 8006684:	0a1b      	lsrs	r3, r3, #8
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00e      	beq.n	80066ac <HAL_I2C_ER_IRQHandler+0x4e>
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	0a1b      	lsrs	r3, r3, #8
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	2b00      	cmp	r3, #0
 8006698:	d008      	beq.n	80066ac <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800669a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669c:	f043 0301 	orr.w	r3, r3, #1
 80066a0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80066aa:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	0a5b      	lsrs	r3, r3, #9
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00e      	beq.n	80066d6 <HAL_I2C_ER_IRQHandler+0x78>
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	0a1b      	lsrs	r3, r3, #8
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d008      	beq.n	80066d6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80066c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c6:	f043 0302 	orr.w	r3, r3, #2
 80066ca:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80066d4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80066d6:	6a3b      	ldr	r3, [r7, #32]
 80066d8:	0a9b      	lsrs	r3, r3, #10
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d03f      	beq.n	8006762 <HAL_I2C_ER_IRQHandler+0x104>
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	0a1b      	lsrs	r3, r3, #8
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d039      	beq.n	8006762 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80066ee:	7efb      	ldrb	r3, [r7, #27]
 80066f0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006700:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006706:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006708:	7ebb      	ldrb	r3, [r7, #26]
 800670a:	2b20      	cmp	r3, #32
 800670c:	d112      	bne.n	8006734 <HAL_I2C_ER_IRQHandler+0xd6>
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10f      	bne.n	8006734 <HAL_I2C_ER_IRQHandler+0xd6>
 8006714:	7cfb      	ldrb	r3, [r7, #19]
 8006716:	2b21      	cmp	r3, #33	@ 0x21
 8006718:	d008      	beq.n	800672c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800671a:	7cfb      	ldrb	r3, [r7, #19]
 800671c:	2b29      	cmp	r3, #41	@ 0x29
 800671e:	d005      	beq.n	800672c <HAL_I2C_ER_IRQHandler+0xce>
 8006720:	7cfb      	ldrb	r3, [r7, #19]
 8006722:	2b28      	cmp	r3, #40	@ 0x28
 8006724:	d106      	bne.n	8006734 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2b21      	cmp	r3, #33	@ 0x21
 800672a:	d103      	bne.n	8006734 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f001 f86d 	bl	800780c <I2C_Slave_AF>
 8006732:	e016      	b.n	8006762 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800673c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800673e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006740:	f043 0304 	orr.w	r3, r3, #4
 8006744:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006746:	7efb      	ldrb	r3, [r7, #27]
 8006748:	2b10      	cmp	r3, #16
 800674a:	d002      	beq.n	8006752 <HAL_I2C_ER_IRQHandler+0xf4>
 800674c:	7efb      	ldrb	r3, [r7, #27]
 800674e:	2b40      	cmp	r3, #64	@ 0x40
 8006750:	d107      	bne.n	8006762 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006760:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006762:	6a3b      	ldr	r3, [r7, #32]
 8006764:	0adb      	lsrs	r3, r3, #11
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00e      	beq.n	800678c <HAL_I2C_ER_IRQHandler+0x12e>
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	0a1b      	lsrs	r3, r3, #8
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	2b00      	cmp	r3, #0
 8006778:	d008      	beq.n	800678c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800677a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677c:	f043 0308 	orr.w	r3, r3, #8
 8006780:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800678a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800678c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678e:	2b00      	cmp	r3, #0
 8006790:	d008      	beq.n	80067a4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006798:	431a      	orrs	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f001 f8a8 	bl	80078f4 <I2C_ITError>
  }
}
 80067a4:	bf00      	nop
 80067a6:	3728      	adds	r7, #40	@ 0x28
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	70fb      	strb	r3, [r7, #3]
 8006808:	4613      	mov	r3, r2
 800680a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006862:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800686a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006870:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006876:	2b00      	cmp	r3, #0
 8006878:	d150      	bne.n	800691c <I2C_MasterTransmit_TXE+0xc8>
 800687a:	7bfb      	ldrb	r3, [r7, #15]
 800687c:	2b21      	cmp	r3, #33	@ 0x21
 800687e:	d14d      	bne.n	800691c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	2b08      	cmp	r3, #8
 8006884:	d01d      	beq.n	80068c2 <I2C_MasterTransmit_TXE+0x6e>
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	2b20      	cmp	r3, #32
 800688a:	d01a      	beq.n	80068c2 <I2C_MasterTransmit_TXE+0x6e>
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006892:	d016      	beq.n	80068c2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	685a      	ldr	r2, [r3, #4]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80068a2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2211      	movs	r2, #17
 80068a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2220      	movs	r2, #32
 80068b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7ff ff76 	bl	80067ac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80068c0:	e060      	b.n	8006984 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80068d0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068e0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2220      	movs	r2, #32
 80068ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b40      	cmp	r3, #64	@ 0x40
 80068fa:	d107      	bne.n	800690c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f7fa fef1 	bl	80016ec <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800690a:	e03b      	b.n	8006984 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f7ff ff49 	bl	80067ac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800691a:	e033      	b.n	8006984 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800691c:	7bfb      	ldrb	r3, [r7, #15]
 800691e:	2b21      	cmp	r3, #33	@ 0x21
 8006920:	d005      	beq.n	800692e <I2C_MasterTransmit_TXE+0xda>
 8006922:	7bbb      	ldrb	r3, [r7, #14]
 8006924:	2b40      	cmp	r3, #64	@ 0x40
 8006926:	d12d      	bne.n	8006984 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006928:	7bfb      	ldrb	r3, [r7, #15]
 800692a:	2b22      	cmp	r3, #34	@ 0x22
 800692c:	d12a      	bne.n	8006984 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006932:	b29b      	uxth	r3, r3
 8006934:	2b00      	cmp	r3, #0
 8006936:	d108      	bne.n	800694a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006946:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006948:	e01c      	b.n	8006984 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b40      	cmp	r3, #64	@ 0x40
 8006954:	d103      	bne.n	800695e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f88e 	bl	8006a78 <I2C_MemoryTransmit_TXE_BTF>
}
 800695c:	e012      	b.n	8006984 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006962:	781a      	ldrb	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800696e:	1c5a      	adds	r2, r3, #1
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006978:	b29b      	uxth	r3, r3
 800697a:	3b01      	subs	r3, #1
 800697c:	b29a      	uxth	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006982:	e7ff      	b.n	8006984 <I2C_MasterTransmit_TXE+0x130>
 8006984:	bf00      	nop
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006998:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b21      	cmp	r3, #33	@ 0x21
 80069a4:	d164      	bne.n	8006a70 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d012      	beq.n	80069d6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b4:	781a      	ldrb	r2, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c0:	1c5a      	adds	r2, r3, #1
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	3b01      	subs	r3, #1
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80069d4:	e04c      	b.n	8006a70 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2b08      	cmp	r3, #8
 80069da:	d01d      	beq.n	8006a18 <I2C_MasterTransmit_BTF+0x8c>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2b20      	cmp	r3, #32
 80069e0:	d01a      	beq.n	8006a18 <I2C_MasterTransmit_BTF+0x8c>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80069e8:	d016      	beq.n	8006a18 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	685a      	ldr	r2, [r3, #4]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80069f8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2211      	movs	r2, #17
 80069fe:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2220      	movs	r2, #32
 8006a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7ff fecb 	bl	80067ac <HAL_I2C_MasterTxCpltCallback>
}
 8006a16:	e02b      	b.n	8006a70 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006a26:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a36:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2220      	movs	r2, #32
 8006a42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b40      	cmp	r3, #64	@ 0x40
 8006a50:	d107      	bne.n	8006a62 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f7fa fe46 	bl	80016ec <HAL_I2C_MemTxCpltCallback>
}
 8006a60:	e006      	b.n	8006a70 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7ff fe9e 	bl	80067ac <HAL_I2C_MasterTxCpltCallback>
}
 8006a70:	bf00      	nop
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a86:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d11d      	bne.n	8006acc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d10b      	bne.n	8006ab0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aa8:	1c9a      	adds	r2, r3, #2
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8006aae:	e077      	b.n	8006ba0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	121b      	asrs	r3, r3, #8
 8006ab8:	b2da      	uxtb	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ac4:	1c5a      	adds	r2, r3, #1
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006aca:	e069      	b.n	8006ba0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d10b      	bne.n	8006aec <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ad8:	b2da      	uxtb	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ae4:	1c5a      	adds	r2, r3, #1
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006aea:	e059      	b.n	8006ba0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d152      	bne.n	8006b9a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006af4:	7bfb      	ldrb	r3, [r7, #15]
 8006af6:	2b22      	cmp	r3, #34	@ 0x22
 8006af8:	d10d      	bne.n	8006b16 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b08:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b0e:	1c5a      	adds	r2, r3, #1
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006b14:	e044      	b.n	8006ba0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d015      	beq.n	8006b4c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006b20:	7bfb      	ldrb	r3, [r7, #15]
 8006b22:	2b21      	cmp	r3, #33	@ 0x21
 8006b24:	d112      	bne.n	8006b4c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b2a:	781a      	ldrb	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b36:	1c5a      	adds	r2, r3, #1
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	3b01      	subs	r3, #1
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006b4a:	e029      	b.n	8006ba0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d124      	bne.n	8006ba0 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8006b56:	7bfb      	ldrb	r3, [r7, #15]
 8006b58:	2b21      	cmp	r3, #33	@ 0x21
 8006b5a:	d121      	bne.n	8006ba0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	685a      	ldr	r2, [r3, #4]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006b6a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b7a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2220      	movs	r2, #32
 8006b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f7fa fdaa 	bl	80016ec <HAL_I2C_MemTxCpltCallback>
}
 8006b98:	e002      	b.n	8006ba0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7fe fcc0 	bl	8005520 <I2C_Flush_DR>
}
 8006ba0:	bf00      	nop
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	2b22      	cmp	r3, #34	@ 0x22
 8006bba:	f040 80b9 	bne.w	8006d30 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc2:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	2b03      	cmp	r3, #3
 8006bd0:	d921      	bls.n	8006c16 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	691a      	ldr	r2, [r3, #16]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bdc:	b2d2      	uxtb	r2, r2
 8006bde:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be4:	1c5a      	adds	r2, r3, #1
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	2b03      	cmp	r3, #3
 8006c00:	f040 8096 	bne.w	8006d30 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	685a      	ldr	r2, [r3, #4]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c12:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006c14:	e08c      	b.n	8006d30 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d07f      	beq.n	8006d1e <I2C_MasterReceive_RXNE+0x176>
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d002      	beq.n	8006c2a <I2C_MasterReceive_RXNE+0x82>
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d179      	bne.n	8006d1e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f001 fd02 	bl	8008634 <I2C_WaitOnSTOPRequestThroughIT>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d14c      	bne.n	8006cd0 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c44:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	685a      	ldr	r2, [r3, #4]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006c54:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	691a      	ldr	r2, [r3, #16]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c60:	b2d2      	uxtb	r2, r2
 8006c62:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c68:	1c5a      	adds	r2, r3, #1
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	3b01      	subs	r3, #1
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2220      	movs	r2, #32
 8006c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	2b40      	cmp	r3, #64	@ 0x40
 8006c8e:	d10a      	bne.n	8006ca6 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7fa fd34 	bl	800170c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006ca4:	e044      	b.n	8006d30 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2b08      	cmp	r3, #8
 8006cb2:	d002      	beq.n	8006cba <I2C_MasterReceive_RXNE+0x112>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2b20      	cmp	r3, #32
 8006cb8:	d103      	bne.n	8006cc2 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	631a      	str	r2, [r3, #48]	@ 0x30
 8006cc0:	e002      	b.n	8006cc8 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2212      	movs	r2, #18
 8006cc6:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f7ff fd79 	bl	80067c0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006cce:	e02f      	b.n	8006d30 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006cde:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	691a      	ldr	r2, [r3, #16]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cea:	b2d2      	uxtb	r2, r2
 8006cec:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf2:	1c5a      	adds	r2, r3, #1
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	b29a      	uxth	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2220      	movs	r2, #32
 8006d0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f7ff fd88 	bl	800682c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006d1c:	e008      	b.n	8006d30 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	685a      	ldr	r2, [r3, #4]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d2c:	605a      	str	r2, [r3, #4]
}
 8006d2e:	e7ff      	b.n	8006d30 <I2C_MasterReceive_RXNE+0x188>
 8006d30:	bf00      	nop
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d44:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	2b04      	cmp	r3, #4
 8006d4e:	d11b      	bne.n	8006d88 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	685a      	ldr	r2, [r3, #4]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d5e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	691a      	ldr	r2, [r3, #16]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d6a:	b2d2      	uxtb	r2, r2
 8006d6c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d72:	1c5a      	adds	r2, r3, #1
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006d86:	e0c4      	b.n	8006f12 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	2b03      	cmp	r3, #3
 8006d90:	d129      	bne.n	8006de6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	685a      	ldr	r2, [r3, #4]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006da0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2b04      	cmp	r3, #4
 8006da6:	d00a      	beq.n	8006dbe <I2C_MasterReceive_BTF+0x86>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d007      	beq.n	8006dbe <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006dbc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	691a      	ldr	r2, [r3, #16]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc8:	b2d2      	uxtb	r2, r2
 8006dca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd0:	1c5a      	adds	r2, r3, #1
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006de4:	e095      	b.n	8006f12 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d17d      	bne.n	8006eec <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d002      	beq.n	8006dfc <I2C_MasterReceive_BTF+0xc4>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2b10      	cmp	r3, #16
 8006dfa:	d108      	bne.n	8006e0e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e0a:	601a      	str	r2, [r3, #0]
 8006e0c:	e016      	b.n	8006e3c <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2b04      	cmp	r3, #4
 8006e12:	d002      	beq.n	8006e1a <I2C_MasterReceive_BTF+0xe2>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d108      	bne.n	8006e2c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006e28:	601a      	str	r2, [r3, #0]
 8006e2a:	e007      	b.n	8006e3c <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e3a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	691a      	ldr	r2, [r3, #16]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e46:	b2d2      	uxtb	r2, r2
 8006e48:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e4e:	1c5a      	adds	r2, r3, #1
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	691a      	ldr	r2, [r3, #16]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e6c:	b2d2      	uxtb	r2, r2
 8006e6e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e74:	1c5a      	adds	r2, r3, #1
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	3b01      	subs	r3, #1
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006e96:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2220      	movs	r2, #32
 8006e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	2b40      	cmp	r3, #64	@ 0x40
 8006eaa:	d10a      	bne.n	8006ec2 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7fa fc26 	bl	800170c <HAL_I2C_MemRxCpltCallback>
}
 8006ec0:	e027      	b.n	8006f12 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2b08      	cmp	r3, #8
 8006ece:	d002      	beq.n	8006ed6 <I2C_MasterReceive_BTF+0x19e>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2b20      	cmp	r3, #32
 8006ed4:	d103      	bne.n	8006ede <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	631a      	str	r2, [r3, #48]	@ 0x30
 8006edc:	e002      	b.n	8006ee4 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2212      	movs	r2, #18
 8006ee2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f7ff fc6b 	bl	80067c0 <HAL_I2C_MasterRxCpltCallback>
}
 8006eea:	e012      	b.n	8006f12 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	691a      	ldr	r2, [r3, #16]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef6:	b2d2      	uxtb	r2, r2
 8006ef8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006efe:	1c5a      	adds	r2, r3, #1
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006f12:	bf00      	nop
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006f1a:	b480      	push	{r7}
 8006f1c:	b083      	sub	sp, #12
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	2b40      	cmp	r3, #64	@ 0x40
 8006f2c:	d117      	bne.n	8006f5e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d109      	bne.n	8006f4a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006f46:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006f48:	e067      	b.n	800701a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	f043 0301 	orr.w	r3, r3, #1
 8006f54:	b2da      	uxtb	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	611a      	str	r2, [r3, #16]
}
 8006f5c:	e05d      	b.n	800701a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f66:	d133      	bne.n	8006fd0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b21      	cmp	r3, #33	@ 0x21
 8006f72:	d109      	bne.n	8006f88 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006f84:	611a      	str	r2, [r3, #16]
 8006f86:	e008      	b.n	8006f9a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	f043 0301 	orr.w	r3, r3, #1
 8006f92:	b2da      	uxtb	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d004      	beq.n	8006fac <I2C_Master_SB+0x92>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d108      	bne.n	8006fbe <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d032      	beq.n	800701a <I2C_Master_SB+0x100>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d02d      	beq.n	800701a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	685a      	ldr	r2, [r3, #4]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006fcc:	605a      	str	r2, [r3, #4]
}
 8006fce:	e024      	b.n	800701a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d10e      	bne.n	8006ff6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	11db      	asrs	r3, r3, #7
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	f003 0306 	and.w	r3, r3, #6
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	f063 030f 	orn	r3, r3, #15
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	611a      	str	r2, [r3, #16]
}
 8006ff4:	e011      	b.n	800701a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d10d      	bne.n	800701a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007002:	b29b      	uxth	r3, r3
 8007004:	11db      	asrs	r3, r3, #7
 8007006:	b2db      	uxtb	r3, r3
 8007008:	f003 0306 	and.w	r3, r3, #6
 800700c:	b2db      	uxtb	r3, r3
 800700e:	f063 030e 	orn	r3, r3, #14
 8007012:	b2da      	uxtb	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	611a      	str	r2, [r3, #16]
}
 800701a:	bf00      	nop
 800701c:	370c      	adds	r7, #12
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr

08007026 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007026:	b480      	push	{r7}
 8007028:	b083      	sub	sp, #12
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007032:	b2da      	uxtb	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800703e:	2b00      	cmp	r3, #0
 8007040:	d004      	beq.n	800704c <I2C_Master_ADD10+0x26>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007048:	2b00      	cmp	r3, #0
 800704a:	d108      	bne.n	800705e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00c      	beq.n	800706e <I2C_Master_ADD10+0x48>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800705a:	2b00      	cmp	r3, #0
 800705c:	d007      	beq.n	800706e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	685a      	ldr	r2, [r3, #4]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800706c:	605a      	str	r2, [r3, #4]
  }
}
 800706e:	bf00      	nop
 8007070:	370c      	adds	r7, #12
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800707a:	b480      	push	{r7}
 800707c:	b091      	sub	sp, #68	@ 0x44
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007088:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007090:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007096:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	2b22      	cmp	r3, #34	@ 0x22
 80070a2:	f040 8169 	bne.w	8007378 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d10f      	bne.n	80070ce <I2C_Master_ADDR+0x54>
 80070ae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80070b2:	2b40      	cmp	r3, #64	@ 0x40
 80070b4:	d10b      	bne.n	80070ce <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070b6:	2300      	movs	r3, #0
 80070b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	695b      	ldr	r3, [r3, #20]
 80070c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	699b      	ldr	r3, [r3, #24]
 80070c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80070ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070cc:	e160      	b.n	8007390 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d11d      	bne.n	8007112 <I2C_Master_ADDR+0x98>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80070de:	d118      	bne.n	8007112 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070e0:	2300      	movs	r3, #0
 80070e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007104:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800710a:	1c5a      	adds	r2, r3, #1
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	651a      	str	r2, [r3, #80]	@ 0x50
 8007110:	e13e      	b.n	8007390 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007116:	b29b      	uxth	r3, r3
 8007118:	2b00      	cmp	r3, #0
 800711a:	d113      	bne.n	8007144 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800711c:	2300      	movs	r3, #0
 800711e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007130:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007140:	601a      	str	r2, [r3, #0]
 8007142:	e115      	b.n	8007370 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007148:	b29b      	uxth	r3, r3
 800714a:	2b01      	cmp	r3, #1
 800714c:	f040 808a 	bne.w	8007264 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007152:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007156:	d137      	bne.n	80071c8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007166:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007172:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007176:	d113      	bne.n	80071a0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007186:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007188:	2300      	movs	r3, #0
 800718a:	627b      	str	r3, [r7, #36]	@ 0x24
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	627b      	str	r3, [r7, #36]	@ 0x24
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	627b      	str	r3, [r7, #36]	@ 0x24
 800719c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719e:	e0e7      	b.n	8007370 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071a0:	2300      	movs	r3, #0
 80071a2:	623b      	str	r3, [r7, #32]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	695b      	ldr	r3, [r3, #20]
 80071aa:	623b      	str	r3, [r7, #32]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	623b      	str	r3, [r7, #32]
 80071b4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071c4:	601a      	str	r2, [r3, #0]
 80071c6:	e0d3      	b.n	8007370 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80071c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ca:	2b08      	cmp	r3, #8
 80071cc:	d02e      	beq.n	800722c <I2C_Master_ADDR+0x1b2>
 80071ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d0:	2b20      	cmp	r3, #32
 80071d2:	d02b      	beq.n	800722c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80071d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071d6:	2b12      	cmp	r3, #18
 80071d8:	d102      	bne.n	80071e0 <I2C_Master_ADDR+0x166>
 80071da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d125      	bne.n	800722c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80071e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e2:	2b04      	cmp	r3, #4
 80071e4:	d00e      	beq.n	8007204 <I2C_Master_ADDR+0x18a>
 80071e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	d00b      	beq.n	8007204 <I2C_Master_ADDR+0x18a>
 80071ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ee:	2b10      	cmp	r3, #16
 80071f0:	d008      	beq.n	8007204 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007200:	601a      	str	r2, [r3, #0]
 8007202:	e007      	b.n	8007214 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007212:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007214:	2300      	movs	r3, #0
 8007216:	61fb      	str	r3, [r7, #28]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	695b      	ldr	r3, [r3, #20]
 800721e:	61fb      	str	r3, [r7, #28]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	61fb      	str	r3, [r7, #28]
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	e0a1      	b.n	8007370 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800723a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800723c:	2300      	movs	r3, #0
 800723e:	61bb      	str	r3, [r7, #24]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	61bb      	str	r3, [r7, #24]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	61bb      	str	r3, [r7, #24]
 8007250:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007260:	601a      	str	r2, [r3, #0]
 8007262:	e085      	b.n	8007370 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007268:	b29b      	uxth	r3, r3
 800726a:	2b02      	cmp	r3, #2
 800726c:	d14d      	bne.n	800730a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800726e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007270:	2b04      	cmp	r3, #4
 8007272:	d016      	beq.n	80072a2 <I2C_Master_ADDR+0x228>
 8007274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007276:	2b02      	cmp	r3, #2
 8007278:	d013      	beq.n	80072a2 <I2C_Master_ADDR+0x228>
 800727a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800727c:	2b10      	cmp	r3, #16
 800727e:	d010      	beq.n	80072a2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800728e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800729e:	601a      	str	r2, [r3, #0]
 80072a0:	e007      	b.n	80072b2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80072b0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072c0:	d117      	bne.n	80072f2 <I2C_Master_ADDR+0x278>
 80072c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80072c8:	d00b      	beq.n	80072e2 <I2C_Master_ADDR+0x268>
 80072ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d008      	beq.n	80072e2 <I2C_Master_ADDR+0x268>
 80072d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d2:	2b08      	cmp	r3, #8
 80072d4:	d005      	beq.n	80072e2 <I2C_Master_ADDR+0x268>
 80072d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d8:	2b10      	cmp	r3, #16
 80072da:	d002      	beq.n	80072e2 <I2C_Master_ADDR+0x268>
 80072dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072de:	2b20      	cmp	r3, #32
 80072e0:	d107      	bne.n	80072f2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	685a      	ldr	r2, [r3, #4]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80072f0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072f2:	2300      	movs	r3, #0
 80072f4:	617b      	str	r3, [r7, #20]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	695b      	ldr	r3, [r3, #20]
 80072fc:	617b      	str	r3, [r7, #20]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	699b      	ldr	r3, [r3, #24]
 8007304:	617b      	str	r3, [r7, #20]
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	e032      	b.n	8007370 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007318:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007324:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007328:	d117      	bne.n	800735a <I2C_Master_ADDR+0x2e0>
 800732a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800732c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007330:	d00b      	beq.n	800734a <I2C_Master_ADDR+0x2d0>
 8007332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007334:	2b01      	cmp	r3, #1
 8007336:	d008      	beq.n	800734a <I2C_Master_ADDR+0x2d0>
 8007338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800733a:	2b08      	cmp	r3, #8
 800733c:	d005      	beq.n	800734a <I2C_Master_ADDR+0x2d0>
 800733e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007340:	2b10      	cmp	r3, #16
 8007342:	d002      	beq.n	800734a <I2C_Master_ADDR+0x2d0>
 8007344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007346:	2b20      	cmp	r3, #32
 8007348:	d107      	bne.n	800735a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	685a      	ldr	r2, [r3, #4]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007358:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800735a:	2300      	movs	r3, #0
 800735c:	613b      	str	r3, [r7, #16]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	695b      	ldr	r3, [r3, #20]
 8007364:	613b      	str	r3, [r7, #16]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	699b      	ldr	r3, [r3, #24]
 800736c:	613b      	str	r3, [r7, #16]
 800736e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007376:	e00b      	b.n	8007390 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007378:	2300      	movs	r3, #0
 800737a:	60fb      	str	r3, [r7, #12]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	60fb      	str	r3, [r7, #12]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	60fb      	str	r3, [r7, #12]
 800738c:	68fb      	ldr	r3, [r7, #12]
}
 800738e:	e7ff      	b.n	8007390 <I2C_Master_ADDR+0x316>
 8007390:	bf00      	nop
 8007392:	3744      	adds	r7, #68	@ 0x44
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073aa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d02b      	beq.n	800740e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ba:	781a      	ldrb	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c6:	1c5a      	adds	r2, r3, #1
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	3b01      	subs	r3, #1
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073de:	b29b      	uxth	r3, r3
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d114      	bne.n	800740e <I2C_SlaveTransmit_TXE+0x72>
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
 80073e6:	2b29      	cmp	r3, #41	@ 0x29
 80073e8:	d111      	bne.n	800740e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	685a      	ldr	r2, [r3, #4]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80073f8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2221      	movs	r2, #33	@ 0x21
 80073fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2228      	movs	r2, #40	@ 0x28
 8007404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f7ff f9e3 	bl	80067d4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800740e:	bf00      	nop
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007416:	b480      	push	{r7}
 8007418:	b083      	sub	sp, #12
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007422:	b29b      	uxth	r3, r3
 8007424:	2b00      	cmp	r3, #0
 8007426:	d011      	beq.n	800744c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800742c:	781a      	ldrb	r2, [r3, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007438:	1c5a      	adds	r2, r3, #1
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007442:	b29b      	uxth	r3, r3
 8007444:	3b01      	subs	r3, #1
 8007446:	b29a      	uxth	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007466:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800746c:	b29b      	uxth	r3, r3
 800746e:	2b00      	cmp	r3, #0
 8007470:	d02c      	beq.n	80074cc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	691a      	ldr	r2, [r3, #16]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800747c:	b2d2      	uxtb	r2, r2
 800747e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007484:	1c5a      	adds	r2, r3, #1
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800748e:	b29b      	uxth	r3, r3
 8007490:	3b01      	subs	r3, #1
 8007492:	b29a      	uxth	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800749c:	b29b      	uxth	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d114      	bne.n	80074cc <I2C_SlaveReceive_RXNE+0x74>
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
 80074a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80074a6:	d111      	bne.n	80074cc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074b6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2222      	movs	r2, #34	@ 0x22
 80074bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2228      	movs	r2, #40	@ 0x28
 80074c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f7ff f98e 	bl	80067e8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80074cc:	bf00      	nop
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d012      	beq.n	800750c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	691a      	ldr	r2, [r3, #16]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f0:	b2d2      	uxtb	r2, r2
 80074f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f8:	1c5a      	adds	r2, r3, #1
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007502:	b29b      	uxth	r3, r3
 8007504:	3b01      	subs	r3, #1
 8007506:	b29a      	uxth	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007522:	2300      	movs	r3, #0
 8007524:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800752c:	b2db      	uxtb	r3, r3
 800752e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007532:	2b28      	cmp	r3, #40	@ 0x28
 8007534:	d127      	bne.n	8007586 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007544:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	089b      	lsrs	r3, r3, #2
 800754a:	f003 0301 	and.w	r3, r3, #1
 800754e:	2b00      	cmp	r3, #0
 8007550:	d101      	bne.n	8007556 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007552:	2301      	movs	r3, #1
 8007554:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	09db      	lsrs	r3, r3, #7
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	2b00      	cmp	r3, #0
 8007560:	d103      	bne.n	800756a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	81bb      	strh	r3, [r7, #12]
 8007568:	e002      	b.n	8007570 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	699b      	ldr	r3, [r3, #24]
 800756e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007578:	89ba      	ldrh	r2, [r7, #12]
 800757a:	7bfb      	ldrb	r3, [r7, #15]
 800757c:	4619      	mov	r1, r3
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f7ff f93c 	bl	80067fc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007584:	e00e      	b.n	80075a4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007586:	2300      	movs	r3, #0
 8007588:	60bb      	str	r3, [r7, #8]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	695b      	ldr	r3, [r3, #20]
 8007590:	60bb      	str	r3, [r7, #8]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	699b      	ldr	r3, [r3, #24]
 8007598:	60bb      	str	r3, [r7, #8]
 800759a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80075a4:	bf00      	nop
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075ba:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	685a      	ldr	r2, [r3, #4]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80075ca:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80075cc:	2300      	movs	r3, #0
 80075ce:	60bb      	str	r3, [r7, #8]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	60bb      	str	r3, [r7, #8]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f042 0201 	orr.w	r2, r2, #1
 80075e6:	601a      	str	r2, [r3, #0]
 80075e8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075f8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007604:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007608:	d172      	bne.n	80076f0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800760a:	7bfb      	ldrb	r3, [r7, #15]
 800760c:	2b22      	cmp	r3, #34	@ 0x22
 800760e:	d002      	beq.n	8007616 <I2C_Slave_STOPF+0x6a>
 8007610:	7bfb      	ldrb	r3, [r7, #15]
 8007612:	2b2a      	cmp	r3, #42	@ 0x2a
 8007614:	d135      	bne.n	8007682 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	b29a      	uxth	r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007628:	b29b      	uxth	r3, r3
 800762a:	2b00      	cmp	r3, #0
 800762c:	d005      	beq.n	800763a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007632:	f043 0204 	orr.w	r2, r3, #4
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	685a      	ldr	r2, [r3, #4]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007648:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800764e:	4618      	mov	r0, r3
 8007650:	f7fd fb70 	bl	8004d34 <HAL_DMA_GetState>
 8007654:	4603      	mov	r3, r0
 8007656:	2b01      	cmp	r3, #1
 8007658:	d049      	beq.n	80076ee <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800765e:	4a69      	ldr	r2, [pc, #420]	@ (8007804 <I2C_Slave_STOPF+0x258>)
 8007660:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007666:	4618      	mov	r0, r3
 8007668:	f7fd f9b8 	bl	80049dc <HAL_DMA_Abort_IT>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d03d      	beq.n	80076ee <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800767c:	4610      	mov	r0, r2
 800767e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007680:	e035      	b.n	80076ee <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	b29a      	uxth	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007694:	b29b      	uxth	r3, r3
 8007696:	2b00      	cmp	r3, #0
 8007698:	d005      	beq.n	80076a6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800769e:	f043 0204 	orr.w	r2, r3, #4
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	685a      	ldr	r2, [r3, #4]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80076b4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7fd fb3a 	bl	8004d34 <HAL_DMA_GetState>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d014      	beq.n	80076f0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076ca:	4a4e      	ldr	r2, [pc, #312]	@ (8007804 <I2C_Slave_STOPF+0x258>)
 80076cc:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7fd f982 	bl	80049dc <HAL_DMA_Abort_IT>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d008      	beq.n	80076f0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80076e8:	4610      	mov	r0, r2
 80076ea:	4798      	blx	r3
 80076ec:	e000      	b.n	80076f0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80076ee:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d03e      	beq.n	8007778 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	f003 0304 	and.w	r3, r3, #4
 8007704:	2b04      	cmp	r3, #4
 8007706:	d112      	bne.n	800772e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	691a      	ldr	r2, [r3, #16]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007712:	b2d2      	uxtb	r2, r2
 8007714:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800771a:	1c5a      	adds	r2, r3, #1
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007724:	b29b      	uxth	r3, r3
 8007726:	3b01      	subs	r3, #1
 8007728:	b29a      	uxth	r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	695b      	ldr	r3, [r3, #20]
 8007734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007738:	2b40      	cmp	r3, #64	@ 0x40
 800773a:	d112      	bne.n	8007762 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	691a      	ldr	r2, [r3, #16]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007746:	b2d2      	uxtb	r2, r2
 8007748:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800774e:	1c5a      	adds	r2, r3, #1
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007758:	b29b      	uxth	r3, r3
 800775a:	3b01      	subs	r3, #1
 800775c:	b29a      	uxth	r2, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007766:	b29b      	uxth	r3, r3
 8007768:	2b00      	cmp	r3, #0
 800776a:	d005      	beq.n	8007778 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007770:	f043 0204 	orr.w	r2, r3, #4
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800777c:	2b00      	cmp	r3, #0
 800777e:	d003      	beq.n	8007788 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 f8b7 	bl	80078f4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007786:	e039      	b.n	80077fc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007788:	7bfb      	ldrb	r3, [r7, #15]
 800778a:	2b2a      	cmp	r3, #42	@ 0x2a
 800778c:	d109      	bne.n	80077a2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2228      	movs	r2, #40	@ 0x28
 8007798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f7ff f823 	bl	80067e8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b28      	cmp	r3, #40	@ 0x28
 80077ac:	d111      	bne.n	80077d2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a15      	ldr	r2, [pc, #84]	@ (8007808 <I2C_Slave_STOPF+0x25c>)
 80077b2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2220      	movs	r2, #32
 80077be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f7ff f824 	bl	8006818 <HAL_I2C_ListenCpltCallback>
}
 80077d0:	e014      	b.n	80077fc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077d6:	2b22      	cmp	r3, #34	@ 0x22
 80077d8:	d002      	beq.n	80077e0 <I2C_Slave_STOPF+0x234>
 80077da:	7bfb      	ldrb	r3, [r7, #15]
 80077dc:	2b22      	cmp	r3, #34	@ 0x22
 80077de:	d10d      	bne.n	80077fc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2220      	movs	r2, #32
 80077ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f7fe fff6 	bl	80067e8 <HAL_I2C_SlaveRxCpltCallback>
}
 80077fc:	bf00      	nop
 80077fe:	3710      	adds	r7, #16
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	08008191 	.word	0x08008191
 8007808:	ffff0000 	.word	0xffff0000

0800780c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800781a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007820:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	2b08      	cmp	r3, #8
 8007826:	d002      	beq.n	800782e <I2C_Slave_AF+0x22>
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	2b20      	cmp	r3, #32
 800782c:	d129      	bne.n	8007882 <I2C_Slave_AF+0x76>
 800782e:	7bfb      	ldrb	r3, [r7, #15]
 8007830:	2b28      	cmp	r3, #40	@ 0x28
 8007832:	d126      	bne.n	8007882 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a2e      	ldr	r2, [pc, #184]	@ (80078f0 <I2C_Slave_AF+0xe4>)
 8007838:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	685a      	ldr	r2, [r3, #4]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007848:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007852:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007862:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2220      	movs	r2, #32
 800786e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7fe ffcc 	bl	8006818 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007880:	e031      	b.n	80078e6 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007882:	7bfb      	ldrb	r3, [r7, #15]
 8007884:	2b21      	cmp	r3, #33	@ 0x21
 8007886:	d129      	bne.n	80078dc <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a19      	ldr	r2, [pc, #100]	@ (80078f0 <I2C_Slave_AF+0xe4>)
 800788c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2221      	movs	r2, #33	@ 0x21
 8007892:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2220      	movs	r2, #32
 8007898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	685a      	ldr	r2, [r3, #4]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80078b2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80078bc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078cc:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7fd fe26 	bl	8005520 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f7fe ff7d 	bl	80067d4 <HAL_I2C_SlaveTxCpltCallback>
}
 80078da:	e004      	b.n	80078e6 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80078e4:	615a      	str	r2, [r3, #20]
}
 80078e6:	bf00      	nop
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	ffff0000 	.word	0xffff0000

080078f4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007902:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800790a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800790c:	7bbb      	ldrb	r3, [r7, #14]
 800790e:	2b10      	cmp	r3, #16
 8007910:	d002      	beq.n	8007918 <I2C_ITError+0x24>
 8007912:	7bbb      	ldrb	r3, [r7, #14]
 8007914:	2b40      	cmp	r3, #64	@ 0x40
 8007916:	d10a      	bne.n	800792e <I2C_ITError+0x3a>
 8007918:	7bfb      	ldrb	r3, [r7, #15]
 800791a:	2b22      	cmp	r3, #34	@ 0x22
 800791c:	d107      	bne.n	800792e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800792c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800792e:	7bfb      	ldrb	r3, [r7, #15]
 8007930:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007934:	2b28      	cmp	r3, #40	@ 0x28
 8007936:	d107      	bne.n	8007948 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2228      	movs	r2, #40	@ 0x28
 8007942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007946:	e015      	b.n	8007974 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007952:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007956:	d00a      	beq.n	800796e <I2C_ITError+0x7a>
 8007958:	7bfb      	ldrb	r3, [r7, #15]
 800795a:	2b60      	cmp	r3, #96	@ 0x60
 800795c:	d007      	beq.n	800796e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2220      	movs	r2, #32
 8007962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800797e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007982:	d162      	bne.n	8007a4a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	685a      	ldr	r2, [r3, #4]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007992:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007998:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800799c:	b2db      	uxtb	r3, r3
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d020      	beq.n	80079e4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079a6:	4a6a      	ldr	r2, [pc, #424]	@ (8007b50 <I2C_ITError+0x25c>)
 80079a8:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7fd f814 	bl	80049dc <HAL_DMA_Abort_IT>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f000 8089 	beq.w	8007ace <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f022 0201 	bic.w	r2, r2, #1
 80079ca:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2220      	movs	r2, #32
 80079d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80079de:	4610      	mov	r0, r2
 80079e0:	4798      	blx	r3
 80079e2:	e074      	b.n	8007ace <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079e8:	4a59      	ldr	r2, [pc, #356]	@ (8007b50 <I2C_ITError+0x25c>)
 80079ea:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7fc fff3 	bl	80049dc <HAL_DMA_Abort_IT>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d068      	beq.n	8007ace <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	695b      	ldr	r3, [r3, #20]
 8007a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a06:	2b40      	cmp	r3, #64	@ 0x40
 8007a08:	d10b      	bne.n	8007a22 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	691a      	ldr	r2, [r3, #16]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a14:	b2d2      	uxtb	r2, r2
 8007a16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a1c:	1c5a      	adds	r2, r3, #1
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f022 0201 	bic.w	r2, r2, #1
 8007a30:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2220      	movs	r2, #32
 8007a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007a44:	4610      	mov	r0, r2
 8007a46:	4798      	blx	r3
 8007a48:	e041      	b.n	8007ace <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b60      	cmp	r3, #96	@ 0x60
 8007a54:	d125      	bne.n	8007aa2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2220      	movs	r2, #32
 8007a5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a6e:	2b40      	cmp	r3, #64	@ 0x40
 8007a70:	d10b      	bne.n	8007a8a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	691a      	ldr	r2, [r3, #16]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a7c:	b2d2      	uxtb	r2, r2
 8007a7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a84:	1c5a      	adds	r2, r3, #1
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f022 0201 	bic.w	r2, r2, #1
 8007a98:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7fe fed0 	bl	8006840 <HAL_I2C_AbortCpltCallback>
 8007aa0:	e015      	b.n	8007ace <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	695b      	ldr	r3, [r3, #20]
 8007aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aac:	2b40      	cmp	r3, #64	@ 0x40
 8007aae:	d10b      	bne.n	8007ac8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	691a      	ldr	r2, [r3, #16]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aba:	b2d2      	uxtb	r2, r2
 8007abc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac2:	1c5a      	adds	r2, r3, #1
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f7fe feaf 	bl	800682c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ad2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	f003 0301 	and.w	r3, r3, #1
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d10e      	bne.n	8007afc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d109      	bne.n	8007afc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d104      	bne.n	8007afc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d007      	beq.n	8007b0c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	685a      	ldr	r2, [r3, #4]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007b0a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b12:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b18:	f003 0304 	and.w	r3, r3, #4
 8007b1c:	2b04      	cmp	r3, #4
 8007b1e:	d113      	bne.n	8007b48 <I2C_ITError+0x254>
 8007b20:	7bfb      	ldrb	r3, [r7, #15]
 8007b22:	2b28      	cmp	r3, #40	@ 0x28
 8007b24:	d110      	bne.n	8007b48 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a0a      	ldr	r2, [pc, #40]	@ (8007b54 <I2C_ITError+0x260>)
 8007b2a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2220      	movs	r2, #32
 8007b36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f7fe fe68 	bl	8006818 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007b48:	bf00      	nop
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	08008191 	.word	0x08008191
 8007b54:	ffff0000 	.word	0xffff0000

08007b58 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b088      	sub	sp, #32
 8007b5c:	af02      	add	r7, sp, #8
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	607a      	str	r2, [r7, #4]
 8007b62:	603b      	str	r3, [r7, #0]
 8007b64:	460b      	mov	r3, r1
 8007b66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b6c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	2b08      	cmp	r3, #8
 8007b72:	d006      	beq.n	8007b82 <I2C_MasterRequestWrite+0x2a>
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d003      	beq.n	8007b82 <I2C_MasterRequestWrite+0x2a>
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007b80:	d108      	bne.n	8007b94 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007b90:	601a      	str	r2, [r3, #0]
 8007b92:	e00b      	b.n	8007bac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b98:	2b12      	cmp	r3, #18
 8007b9a:	d107      	bne.n	8007bac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007baa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	9300      	str	r3, [sp, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	f000 fb91 	bl	80082e0 <I2C_WaitOnFlagUntilTimeout>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00d      	beq.n	8007be0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bd2:	d103      	bne.n	8007bdc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007bda:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	e035      	b.n	8007c4c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007be8:	d108      	bne.n	8007bfc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007bea:	897b      	ldrh	r3, [r7, #10]
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	461a      	mov	r2, r3
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007bf8:	611a      	str	r2, [r3, #16]
 8007bfa:	e01b      	b.n	8007c34 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007bfc:	897b      	ldrh	r3, [r7, #10]
 8007bfe:	11db      	asrs	r3, r3, #7
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	f003 0306 	and.w	r3, r3, #6
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	f063 030f 	orn	r3, r3, #15
 8007c0c:	b2da      	uxtb	r2, r3
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	490e      	ldr	r1, [pc, #56]	@ (8007c54 <I2C_MasterRequestWrite+0xfc>)
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f000 fbda 	bl	80083d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d001      	beq.n	8007c2a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e010      	b.n	8007c4c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007c2a:	897b      	ldrh	r3, [r7, #10]
 8007c2c:	b2da      	uxtb	r2, r3
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	4907      	ldr	r1, [pc, #28]	@ (8007c58 <I2C_MasterRequestWrite+0x100>)
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	f000 fbca 	bl	80083d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d001      	beq.n	8007c4a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e000      	b.n	8007c4c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3718      	adds	r7, #24
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	00010008 	.word	0x00010008
 8007c58:	00010002 	.word	0x00010002

08007c5c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b088      	sub	sp, #32
 8007c60:	af02      	add	r7, sp, #8
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	4608      	mov	r0, r1
 8007c66:	4611      	mov	r1, r2
 8007c68:	461a      	mov	r2, r3
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	817b      	strh	r3, [r7, #10]
 8007c6e:	460b      	mov	r3, r1
 8007c70:	813b      	strh	r3, [r7, #8]
 8007c72:	4613      	mov	r3, r2
 8007c74:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	6a3b      	ldr	r3, [r7, #32]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f000 fb24 	bl	80082e0 <I2C_WaitOnFlagUntilTimeout>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00d      	beq.n	8007cba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ca8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cac:	d103      	bne.n	8007cb6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007cb4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	e05f      	b.n	8007d7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007cba:	897b      	ldrh	r3, [r7, #10]
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007cc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ccc:	6a3a      	ldr	r2, [r7, #32]
 8007cce:	492d      	ldr	r1, [pc, #180]	@ (8007d84 <I2C_RequestMemoryWrite+0x128>)
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f000 fb7f 	bl	80083d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d001      	beq.n	8007ce0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e04c      	b.n	8007d7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	617b      	str	r3, [r7, #20]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	695b      	ldr	r3, [r3, #20]
 8007cea:	617b      	str	r3, [r7, #20]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	699b      	ldr	r3, [r3, #24]
 8007cf2:	617b      	str	r3, [r7, #20]
 8007cf4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cf8:	6a39      	ldr	r1, [r7, #32]
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f000 fc0a 	bl	8008514 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00d      	beq.n	8007d22 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d0a:	2b04      	cmp	r3, #4
 8007d0c:	d107      	bne.n	8007d1e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e02b      	b.n	8007d7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d22:	88fb      	ldrh	r3, [r7, #6]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d105      	bne.n	8007d34 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d28:	893b      	ldrh	r3, [r7, #8]
 8007d2a:	b2da      	uxtb	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	611a      	str	r2, [r3, #16]
 8007d32:	e021      	b.n	8007d78 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007d34:	893b      	ldrh	r3, [r7, #8]
 8007d36:	0a1b      	lsrs	r3, r3, #8
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	b2da      	uxtb	r2, r3
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d44:	6a39      	ldr	r1, [r7, #32]
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	f000 fbe4 	bl	8008514 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00d      	beq.n	8007d6e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d56:	2b04      	cmp	r3, #4
 8007d58:	d107      	bne.n	8007d6a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e005      	b.n	8007d7a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d6e:	893b      	ldrh	r3, [r7, #8]
 8007d70:	b2da      	uxtb	r2, r3
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3718      	adds	r7, #24
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	00010002 	.word	0x00010002

08007d88 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b088      	sub	sp, #32
 8007d8c:	af02      	add	r7, sp, #8
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	4608      	mov	r0, r1
 8007d92:	4611      	mov	r1, r2
 8007d94:	461a      	mov	r2, r3
 8007d96:	4603      	mov	r3, r0
 8007d98:	817b      	strh	r3, [r7, #10]
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	813b      	strh	r3, [r7, #8]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007db0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007dc0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	6a3b      	ldr	r3, [r7, #32]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f000 fa86 	bl	80082e0 <I2C_WaitOnFlagUntilTimeout>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00d      	beq.n	8007df6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007de4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007de8:	d103      	bne.n	8007df2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007df0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e0aa      	b.n	8007f4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007df6:	897b      	ldrh	r3, [r7, #10]
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007e04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e08:	6a3a      	ldr	r2, [r7, #32]
 8007e0a:	4952      	ldr	r1, [pc, #328]	@ (8007f54 <I2C_RequestMemoryRead+0x1cc>)
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f000 fae1 	bl	80083d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d001      	beq.n	8007e1c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e097      	b.n	8007f4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	617b      	str	r3, [r7, #20]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	695b      	ldr	r3, [r3, #20]
 8007e26:	617b      	str	r3, [r7, #20]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	617b      	str	r3, [r7, #20]
 8007e30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e34:	6a39      	ldr	r1, [r7, #32]
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f000 fb6c 	bl	8008514 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00d      	beq.n	8007e5e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e46:	2b04      	cmp	r3, #4
 8007e48:	d107      	bne.n	8007e5a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e076      	b.n	8007f4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007e5e:	88fb      	ldrh	r3, [r7, #6]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d105      	bne.n	8007e70 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007e64:	893b      	ldrh	r3, [r7, #8]
 8007e66:	b2da      	uxtb	r2, r3
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	611a      	str	r2, [r3, #16]
 8007e6e:	e021      	b.n	8007eb4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007e70:	893b      	ldrh	r3, [r7, #8]
 8007e72:	0a1b      	lsrs	r3, r3, #8
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	b2da      	uxtb	r2, r3
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e80:	6a39      	ldr	r1, [r7, #32]
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f000 fb46 	bl	8008514 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00d      	beq.n	8007eaa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e92:	2b04      	cmp	r3, #4
 8007e94:	d107      	bne.n	8007ea6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ea4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e050      	b.n	8007f4c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007eaa:	893b      	ldrh	r3, [r7, #8]
 8007eac:	b2da      	uxtb	r2, r3
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007eb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007eb6:	6a39      	ldr	r1, [r7, #32]
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f000 fb2b 	bl	8008514 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00d      	beq.n	8007ee0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ec8:	2b04      	cmp	r3, #4
 8007eca:	d107      	bne.n	8007edc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007eda:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e035      	b.n	8007f4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007eee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef2:	9300      	str	r3, [sp, #0]
 8007ef4:	6a3b      	ldr	r3, [r7, #32]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f000 f9ef 	bl	80082e0 <I2C_WaitOnFlagUntilTimeout>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d00d      	beq.n	8007f24 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f16:	d103      	bne.n	8007f20 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007f1e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007f20:	2303      	movs	r3, #3
 8007f22:	e013      	b.n	8007f4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007f24:	897b      	ldrh	r3, [r7, #10]
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	f043 0301 	orr.w	r3, r3, #1
 8007f2c:	b2da      	uxtb	r2, r3
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f36:	6a3a      	ldr	r2, [r7, #32]
 8007f38:	4906      	ldr	r1, [pc, #24]	@ (8007f54 <I2C_RequestMemoryRead+0x1cc>)
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f000 fa4a 	bl	80083d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d001      	beq.n	8007f4a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e000      	b.n	8007f4c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3718      	adds	r7, #24
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	00010002 	.word	0x00010002

08007f58 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b086      	sub	sp, #24
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f64:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f6c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f74:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f7a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	685a      	ldr	r2, [r3, #4]
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007f8a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d003      	beq.n	8007f9c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f98:	2200      	movs	r2, #0
 8007f9a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d003      	beq.n	8007fac <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fa8:	2200      	movs	r2, #0
 8007faa:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8007fac:	7cfb      	ldrb	r3, [r7, #19]
 8007fae:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8007fb2:	2b21      	cmp	r3, #33	@ 0x21
 8007fb4:	d007      	beq.n	8007fc6 <I2C_DMAXferCplt+0x6e>
 8007fb6:	7cfb      	ldrb	r3, [r7, #19]
 8007fb8:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8007fbc:	2b22      	cmp	r3, #34	@ 0x22
 8007fbe:	d131      	bne.n	8008024 <I2C_DMAXferCplt+0xcc>
 8007fc0:	7cbb      	ldrb	r3, [r7, #18]
 8007fc2:	2b20      	cmp	r3, #32
 8007fc4:	d12e      	bne.n	8008024 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	685a      	ldr	r2, [r3, #4]
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007fd4:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007fdc:	7cfb      	ldrb	r3, [r7, #19]
 8007fde:	2b29      	cmp	r3, #41	@ 0x29
 8007fe0:	d10a      	bne.n	8007ff8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	2221      	movs	r2, #33	@ 0x21
 8007fe6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	2228      	movs	r2, #40	@ 0x28
 8007fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007ff0:	6978      	ldr	r0, [r7, #20]
 8007ff2:	f7fe fbef 	bl	80067d4 <HAL_I2C_SlaveTxCpltCallback>
 8007ff6:	e00c      	b.n	8008012 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007ff8:	7cfb      	ldrb	r3, [r7, #19]
 8007ffa:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ffc:	d109      	bne.n	8008012 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	2222      	movs	r2, #34	@ 0x22
 8008002:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	2228      	movs	r2, #40	@ 0x28
 8008008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800800c:	6978      	ldr	r0, [r7, #20]
 800800e:	f7fe fbeb 	bl	80067e8 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8008020:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008022:	e074      	b.n	800810e <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800802a:	b2db      	uxtb	r3, r3
 800802c:	2b00      	cmp	r3, #0
 800802e:	d06e      	beq.n	800810e <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008034:	b29b      	uxth	r3, r3
 8008036:	2b01      	cmp	r3, #1
 8008038:	d107      	bne.n	800804a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008048:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	685a      	ldr	r2, [r3, #4]
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8008058:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008060:	d009      	beq.n	8008076 <I2C_DMAXferCplt+0x11e>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2b08      	cmp	r3, #8
 8008066:	d006      	beq.n	8008076 <I2C_DMAXferCplt+0x11e>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800806e:	d002      	beq.n	8008076 <I2C_DMAXferCplt+0x11e>
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2b20      	cmp	r3, #32
 8008074:	d107      	bne.n	8008086 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008084:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	685a      	ldr	r2, [r3, #4]
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008094:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	685a      	ldr	r2, [r3, #4]
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80080a4:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	2200      	movs	r2, #0
 80080aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d003      	beq.n	80080bc <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80080b4:	6978      	ldr	r0, [r7, #20]
 80080b6:	f7fe fbb9 	bl	800682c <HAL_I2C_ErrorCallback>
}
 80080ba:	e028      	b.n	800810e <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	2220      	movs	r2, #32
 80080c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	2b40      	cmp	r3, #64	@ 0x40
 80080ce:	d10a      	bne.n	80080e6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	2200      	movs	r2, #0
 80080dc:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80080de:	6978      	ldr	r0, [r7, #20]
 80080e0:	f7f9 fb14 	bl	800170c <HAL_I2C_MemRxCpltCallback>
}
 80080e4:	e013      	b.n	800810e <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2b08      	cmp	r3, #8
 80080f2:	d002      	beq.n	80080fa <I2C_DMAXferCplt+0x1a2>
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2b20      	cmp	r3, #32
 80080f8:	d103      	bne.n	8008102 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	2200      	movs	r2, #0
 80080fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8008100:	e002      	b.n	8008108 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	2212      	movs	r2, #18
 8008106:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8008108:	6978      	ldr	r0, [r7, #20]
 800810a:	f7fe fb59 	bl	80067c0 <HAL_I2C_MasterRxCpltCallback>
}
 800810e:	bf00      	nop
 8008110:	3718      	adds	r7, #24
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b084      	sub	sp, #16
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008122:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008128:	2b00      	cmp	r3, #0
 800812a:	d003      	beq.n	8008134 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008130:	2200      	movs	r2, #0
 8008132:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008138:	2b00      	cmp	r3, #0
 800813a:	d003      	beq.n	8008144 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008140:	2200      	movs	r2, #0
 8008142:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f7fc fe03 	bl	8004d50 <HAL_DMA_GetError>
 800814a:	4603      	mov	r3, r0
 800814c:	2b02      	cmp	r3, #2
 800814e:	d01b      	beq.n	8008188 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800815e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2200      	movs	r2, #0
 8008164:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2220      	movs	r2, #32
 800816a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2200      	movs	r2, #0
 8008172:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800817a:	f043 0210 	orr.w	r2, r3, #16
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f7fe fb52 	bl	800682c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008188:	bf00      	nop
 800818a:	3710      	adds	r7, #16
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b086      	sub	sp, #24
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008198:	2300      	movs	r3, #0
 800819a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081a0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081a8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80081aa:	4b4b      	ldr	r3, [pc, #300]	@ (80082d8 <I2C_DMAAbort+0x148>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	08db      	lsrs	r3, r3, #3
 80081b0:	4a4a      	ldr	r2, [pc, #296]	@ (80082dc <I2C_DMAAbort+0x14c>)
 80081b2:	fba2 2303 	umull	r2, r3, r2, r3
 80081b6:	0a1a      	lsrs	r2, r3, #8
 80081b8:	4613      	mov	r3, r2
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	4413      	add	r3, r2
 80081be:	00da      	lsls	r2, r3, #3
 80081c0:	1ad3      	subs	r3, r2, r3
 80081c2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d106      	bne.n	80081d8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ce:	f043 0220 	orr.w	r2, r3, #32
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80081d6:	e00a      	b.n	80081ee <I2C_DMAAbort+0x5e>
    }
    count--;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	3b01      	subs	r3, #1
 80081dc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80081e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081ec:	d0ea      	beq.n	80081c4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d003      	beq.n	80081fe <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081fa:	2200      	movs	r2, #0
 80081fc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008202:	2b00      	cmp	r3, #0
 8008204:	d003      	beq.n	800820e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800820a:	2200      	movs	r2, #0
 800820c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800821c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	2200      	movs	r2, #0
 8008222:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008228:	2b00      	cmp	r3, #0
 800822a:	d003      	beq.n	8008234 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008230:	2200      	movs	r2, #0
 8008232:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008238:	2b00      	cmp	r3, #0
 800823a:	d003      	beq.n	8008244 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008240:	2200      	movs	r2, #0
 8008242:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f022 0201 	bic.w	r2, r2, #1
 8008252:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800825a:	b2db      	uxtb	r3, r3
 800825c:	2b60      	cmp	r3, #96	@ 0x60
 800825e:	d10e      	bne.n	800827e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	2220      	movs	r2, #32
 8008264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	2200      	movs	r2, #0
 800826c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	2200      	movs	r2, #0
 8008274:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008276:	6978      	ldr	r0, [r7, #20]
 8008278:	f7fe fae2 	bl	8006840 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800827c:	e027      	b.n	80082ce <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800827e:	7cfb      	ldrb	r3, [r7, #19]
 8008280:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008284:	2b28      	cmp	r3, #40	@ 0x28
 8008286:	d117      	bne.n	80082b8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f042 0201 	orr.w	r2, r2, #1
 8008296:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80082a6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	2200      	movs	r2, #0
 80082ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	2228      	movs	r2, #40	@ 0x28
 80082b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80082b6:	e007      	b.n	80082c8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	2220      	movs	r2, #32
 80082bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80082c8:	6978      	ldr	r0, [r7, #20]
 80082ca:	f7fe faaf 	bl	800682c <HAL_I2C_ErrorCallback>
}
 80082ce:	bf00      	nop
 80082d0:	3718      	adds	r7, #24
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	20000008 	.word	0x20000008
 80082dc:	14f8b589 	.word	0x14f8b589

080082e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	603b      	str	r3, [r7, #0]
 80082ec:	4613      	mov	r3, r2
 80082ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80082f0:	e048      	b.n	8008384 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f8:	d044      	beq.n	8008384 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082fa:	f7fb fc07 	bl	8003b0c <HAL_GetTick>
 80082fe:	4602      	mov	r2, r0
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	683a      	ldr	r2, [r7, #0]
 8008306:	429a      	cmp	r2, r3
 8008308:	d302      	bcc.n	8008310 <I2C_WaitOnFlagUntilTimeout+0x30>
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d139      	bne.n	8008384 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	0c1b      	lsrs	r3, r3, #16
 8008314:	b2db      	uxtb	r3, r3
 8008316:	2b01      	cmp	r3, #1
 8008318:	d10d      	bne.n	8008336 <I2C_WaitOnFlagUntilTimeout+0x56>
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	695b      	ldr	r3, [r3, #20]
 8008320:	43da      	mvns	r2, r3
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	4013      	ands	r3, r2
 8008326:	b29b      	uxth	r3, r3
 8008328:	2b00      	cmp	r3, #0
 800832a:	bf0c      	ite	eq
 800832c:	2301      	moveq	r3, #1
 800832e:	2300      	movne	r3, #0
 8008330:	b2db      	uxtb	r3, r3
 8008332:	461a      	mov	r2, r3
 8008334:	e00c      	b.n	8008350 <I2C_WaitOnFlagUntilTimeout+0x70>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	43da      	mvns	r2, r3
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	4013      	ands	r3, r2
 8008342:	b29b      	uxth	r3, r3
 8008344:	2b00      	cmp	r3, #0
 8008346:	bf0c      	ite	eq
 8008348:	2301      	moveq	r3, #1
 800834a:	2300      	movne	r3, #0
 800834c:	b2db      	uxtb	r3, r3
 800834e:	461a      	mov	r2, r3
 8008350:	79fb      	ldrb	r3, [r7, #7]
 8008352:	429a      	cmp	r2, r3
 8008354:	d116      	bne.n	8008384 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2220      	movs	r2, #32
 8008360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2200      	movs	r2, #0
 8008368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008370:	f043 0220 	orr.w	r2, r3, #32
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2200      	movs	r2, #0
 800837c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	e023      	b.n	80083cc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	0c1b      	lsrs	r3, r3, #16
 8008388:	b2db      	uxtb	r3, r3
 800838a:	2b01      	cmp	r3, #1
 800838c:	d10d      	bne.n	80083aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	695b      	ldr	r3, [r3, #20]
 8008394:	43da      	mvns	r2, r3
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	4013      	ands	r3, r2
 800839a:	b29b      	uxth	r3, r3
 800839c:	2b00      	cmp	r3, #0
 800839e:	bf0c      	ite	eq
 80083a0:	2301      	moveq	r3, #1
 80083a2:	2300      	movne	r3, #0
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	461a      	mov	r2, r3
 80083a8:	e00c      	b.n	80083c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	43da      	mvns	r2, r3
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	4013      	ands	r3, r2
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	bf0c      	ite	eq
 80083bc:	2301      	moveq	r3, #1
 80083be:	2300      	movne	r3, #0
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	461a      	mov	r2, r3
 80083c4:	79fb      	ldrb	r3, [r7, #7]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d093      	beq.n	80082f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	607a      	str	r2, [r7, #4]
 80083e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80083e2:	e071      	b.n	80084c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	695b      	ldr	r3, [r3, #20]
 80083ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083f2:	d123      	bne.n	800843c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008402:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800840c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2200      	movs	r2, #0
 8008412:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2220      	movs	r2, #32
 8008418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2200      	movs	r2, #0
 8008420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008428:	f043 0204 	orr.w	r2, r3, #4
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2200      	movs	r2, #0
 8008434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	e067      	b.n	800850c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008442:	d041      	beq.n	80084c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008444:	f7fb fb62 	bl	8003b0c <HAL_GetTick>
 8008448:	4602      	mov	r2, r0
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	1ad3      	subs	r3, r2, r3
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	429a      	cmp	r2, r3
 8008452:	d302      	bcc.n	800845a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d136      	bne.n	80084c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	0c1b      	lsrs	r3, r3, #16
 800845e:	b2db      	uxtb	r3, r3
 8008460:	2b01      	cmp	r3, #1
 8008462:	d10c      	bne.n	800847e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	43da      	mvns	r2, r3
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	4013      	ands	r3, r2
 8008470:	b29b      	uxth	r3, r3
 8008472:	2b00      	cmp	r3, #0
 8008474:	bf14      	ite	ne
 8008476:	2301      	movne	r3, #1
 8008478:	2300      	moveq	r3, #0
 800847a:	b2db      	uxtb	r3, r3
 800847c:	e00b      	b.n	8008496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	699b      	ldr	r3, [r3, #24]
 8008484:	43da      	mvns	r2, r3
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	4013      	ands	r3, r2
 800848a:	b29b      	uxth	r3, r3
 800848c:	2b00      	cmp	r3, #0
 800848e:	bf14      	ite	ne
 8008490:	2301      	movne	r3, #1
 8008492:	2300      	moveq	r3, #0
 8008494:	b2db      	uxtb	r3, r3
 8008496:	2b00      	cmp	r3, #0
 8008498:	d016      	beq.n	80084c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2220      	movs	r2, #32
 80084a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084b4:	f043 0220 	orr.w	r2, r3, #32
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e021      	b.n	800850c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	0c1b      	lsrs	r3, r3, #16
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d10c      	bne.n	80084ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	695b      	ldr	r3, [r3, #20]
 80084d8:	43da      	mvns	r2, r3
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	4013      	ands	r3, r2
 80084de:	b29b      	uxth	r3, r3
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	bf14      	ite	ne
 80084e4:	2301      	movne	r3, #1
 80084e6:	2300      	moveq	r3, #0
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	e00b      	b.n	8008504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	43da      	mvns	r2, r3
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	4013      	ands	r3, r2
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	bf14      	ite	ne
 80084fe:	2301      	movne	r3, #1
 8008500:	2300      	moveq	r3, #0
 8008502:	b2db      	uxtb	r3, r3
 8008504:	2b00      	cmp	r3, #0
 8008506:	f47f af6d 	bne.w	80083e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3710      	adds	r7, #16
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008520:	e034      	b.n	800858c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f000 f915 	bl	8008752 <I2C_IsAcknowledgeFailed>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d001      	beq.n	8008532 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e034      	b.n	800859c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008538:	d028      	beq.n	800858c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800853a:	f7fb fae7 	bl	8003b0c <HAL_GetTick>
 800853e:	4602      	mov	r2, r0
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	1ad3      	subs	r3, r2, r3
 8008544:	68ba      	ldr	r2, [r7, #8]
 8008546:	429a      	cmp	r2, r3
 8008548:	d302      	bcc.n	8008550 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d11d      	bne.n	800858c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800855a:	2b80      	cmp	r3, #128	@ 0x80
 800855c:	d016      	beq.n	800858c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2220      	movs	r2, #32
 8008568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2200      	movs	r2, #0
 8008570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008578:	f043 0220 	orr.w	r2, r3, #32
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	e007      	b.n	800859c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	695b      	ldr	r3, [r3, #20]
 8008592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008596:	2b80      	cmp	r3, #128	@ 0x80
 8008598:	d1c3      	bne.n	8008522 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80085b0:	e034      	b.n	800861c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80085b2:	68f8      	ldr	r0, [r7, #12]
 80085b4:	f000 f8cd 	bl	8008752 <I2C_IsAcknowledgeFailed>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d001      	beq.n	80085c2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e034      	b.n	800862c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085c8:	d028      	beq.n	800861c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085ca:	f7fb fa9f 	bl	8003b0c <HAL_GetTick>
 80085ce:	4602      	mov	r2, r0
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	1ad3      	subs	r3, r2, r3
 80085d4:	68ba      	ldr	r2, [r7, #8]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d302      	bcc.n	80085e0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d11d      	bne.n	800861c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	695b      	ldr	r3, [r3, #20]
 80085e6:	f003 0304 	and.w	r3, r3, #4
 80085ea:	2b04      	cmp	r3, #4
 80085ec:	d016      	beq.n	800861c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2200      	movs	r2, #0
 80085f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2220      	movs	r2, #32
 80085f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008608:	f043 0220 	orr.w	r2, r3, #32
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2200      	movs	r2, #0
 8008614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	e007      	b.n	800862c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	695b      	ldr	r3, [r3, #20]
 8008622:	f003 0304 	and.w	r3, r3, #4
 8008626:	2b04      	cmp	r3, #4
 8008628:	d1c3      	bne.n	80085b2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008634:	b480      	push	{r7}
 8008636:	b085      	sub	sp, #20
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800863c:	2300      	movs	r3, #0
 800863e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008640:	4b13      	ldr	r3, [pc, #76]	@ (8008690 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	08db      	lsrs	r3, r3, #3
 8008646:	4a13      	ldr	r2, [pc, #76]	@ (8008694 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008648:	fba2 2303 	umull	r2, r3, r2, r3
 800864c:	0a1a      	lsrs	r2, r3, #8
 800864e:	4613      	mov	r3, r2
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	4413      	add	r3, r2
 8008654:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	3b01      	subs	r3, #1
 800865a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d107      	bne.n	8008672 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008666:	f043 0220 	orr.w	r2, r3, #32
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e008      	b.n	8008684 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800867c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008680:	d0e9      	beq.n	8008656 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3714      	adds	r7, #20
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr
 8008690:	20000008 	.word	0x20000008
 8008694:	14f8b589 	.word	0x14f8b589

08008698 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80086a4:	e049      	b.n	800873a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	695b      	ldr	r3, [r3, #20]
 80086ac:	f003 0310 	and.w	r3, r3, #16
 80086b0:	2b10      	cmp	r3, #16
 80086b2:	d119      	bne.n	80086e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f06f 0210 	mvn.w	r2, #16
 80086bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2200      	movs	r2, #0
 80086c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2220      	movs	r2, #32
 80086c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2200      	movs	r2, #0
 80086e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	e030      	b.n	800874a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086e8:	f7fb fa10 	bl	8003b0c <HAL_GetTick>
 80086ec:	4602      	mov	r2, r0
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	1ad3      	subs	r3, r2, r3
 80086f2:	68ba      	ldr	r2, [r7, #8]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d302      	bcc.n	80086fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d11d      	bne.n	800873a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	695b      	ldr	r3, [r3, #20]
 8008704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008708:	2b40      	cmp	r3, #64	@ 0x40
 800870a:	d016      	beq.n	800873a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2220      	movs	r2, #32
 8008716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2200      	movs	r2, #0
 800871e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008726:	f043 0220 	orr.w	r2, r3, #32
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e007      	b.n	800874a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	695b      	ldr	r3, [r3, #20]
 8008740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008744:	2b40      	cmp	r3, #64	@ 0x40
 8008746:	d1ae      	bne.n	80086a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008752:	b480      	push	{r7}
 8008754:	b083      	sub	sp, #12
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	695b      	ldr	r3, [r3, #20]
 8008760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008764:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008768:	d11b      	bne.n	80087a2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008772:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2220      	movs	r2, #32
 800877e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800878e:	f043 0204 	orr.w	r2, r3, #4
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	e000      	b.n	80087a4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087bc:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80087c0:	d103      	bne.n	80087ca <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2201      	movs	r2, #1
 80087c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80087c8:	e007      	b.n	80087da <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ce:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80087d2:	d102      	bne.n	80087da <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2208      	movs	r2, #8
 80087d8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80087da:	bf00      	nop
 80087dc:	370c      	adds	r7, #12
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr

080087e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b086      	sub	sp, #24
 80087ea:	af02      	add	r7, sp, #8
 80087ec:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d101      	bne.n	80087f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	e101      	b.n	80089fc <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8008804:	b2db      	uxtb	r3, r3
 8008806:	2b00      	cmp	r3, #0
 8008808:	d106      	bne.n	8008818 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f006 fbe2 	bl	800efdc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2203      	movs	r2, #3
 800881c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008826:	d102      	bne.n	800882e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4618      	mov	r0, r3
 8008834:	f002 ff37 	bl	800b6a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6818      	ldr	r0, [r3, #0]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	7c1a      	ldrb	r2, [r3, #16]
 8008840:	f88d 2000 	strb.w	r2, [sp]
 8008844:	3304      	adds	r3, #4
 8008846:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008848:	f002 fe16 	bl	800b478 <USB_CoreInit>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d005      	beq.n	800885e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2202      	movs	r2, #2
 8008856:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	e0ce      	b.n	80089fc <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2100      	movs	r1, #0
 8008864:	4618      	mov	r0, r3
 8008866:	f002 ff2f 	bl	800b6c8 <USB_SetCurrentMode>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d005      	beq.n	800887c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2202      	movs	r2, #2
 8008874:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	e0bf      	b.n	80089fc <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800887c:	2300      	movs	r3, #0
 800887e:	73fb      	strb	r3, [r7, #15]
 8008880:	e04a      	b.n	8008918 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008882:	7bfa      	ldrb	r2, [r7, #15]
 8008884:	6879      	ldr	r1, [r7, #4]
 8008886:	4613      	mov	r3, r2
 8008888:	00db      	lsls	r3, r3, #3
 800888a:	4413      	add	r3, r2
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	440b      	add	r3, r1
 8008890:	3315      	adds	r3, #21
 8008892:	2201      	movs	r2, #1
 8008894:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008896:	7bfa      	ldrb	r2, [r7, #15]
 8008898:	6879      	ldr	r1, [r7, #4]
 800889a:	4613      	mov	r3, r2
 800889c:	00db      	lsls	r3, r3, #3
 800889e:	4413      	add	r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	440b      	add	r3, r1
 80088a4:	3314      	adds	r3, #20
 80088a6:	7bfa      	ldrb	r2, [r7, #15]
 80088a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80088aa:	7bfa      	ldrb	r2, [r7, #15]
 80088ac:	7bfb      	ldrb	r3, [r7, #15]
 80088ae:	b298      	uxth	r0, r3
 80088b0:	6879      	ldr	r1, [r7, #4]
 80088b2:	4613      	mov	r3, r2
 80088b4:	00db      	lsls	r3, r3, #3
 80088b6:	4413      	add	r3, r2
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	440b      	add	r3, r1
 80088bc:	332e      	adds	r3, #46	@ 0x2e
 80088be:	4602      	mov	r2, r0
 80088c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80088c2:	7bfa      	ldrb	r2, [r7, #15]
 80088c4:	6879      	ldr	r1, [r7, #4]
 80088c6:	4613      	mov	r3, r2
 80088c8:	00db      	lsls	r3, r3, #3
 80088ca:	4413      	add	r3, r2
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	440b      	add	r3, r1
 80088d0:	3318      	adds	r3, #24
 80088d2:	2200      	movs	r2, #0
 80088d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80088d6:	7bfa      	ldrb	r2, [r7, #15]
 80088d8:	6879      	ldr	r1, [r7, #4]
 80088da:	4613      	mov	r3, r2
 80088dc:	00db      	lsls	r3, r3, #3
 80088de:	4413      	add	r3, r2
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	440b      	add	r3, r1
 80088e4:	331c      	adds	r3, #28
 80088e6:	2200      	movs	r2, #0
 80088e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80088ea:	7bfa      	ldrb	r2, [r7, #15]
 80088ec:	6879      	ldr	r1, [r7, #4]
 80088ee:	4613      	mov	r3, r2
 80088f0:	00db      	lsls	r3, r3, #3
 80088f2:	4413      	add	r3, r2
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	440b      	add	r3, r1
 80088f8:	3320      	adds	r3, #32
 80088fa:	2200      	movs	r2, #0
 80088fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80088fe:	7bfa      	ldrb	r2, [r7, #15]
 8008900:	6879      	ldr	r1, [r7, #4]
 8008902:	4613      	mov	r3, r2
 8008904:	00db      	lsls	r3, r3, #3
 8008906:	4413      	add	r3, r2
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	440b      	add	r3, r1
 800890c:	3324      	adds	r3, #36	@ 0x24
 800890e:	2200      	movs	r2, #0
 8008910:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008912:	7bfb      	ldrb	r3, [r7, #15]
 8008914:	3301      	adds	r3, #1
 8008916:	73fb      	strb	r3, [r7, #15]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	791b      	ldrb	r3, [r3, #4]
 800891c:	7bfa      	ldrb	r2, [r7, #15]
 800891e:	429a      	cmp	r2, r3
 8008920:	d3af      	bcc.n	8008882 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008922:	2300      	movs	r3, #0
 8008924:	73fb      	strb	r3, [r7, #15]
 8008926:	e044      	b.n	80089b2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008928:	7bfa      	ldrb	r2, [r7, #15]
 800892a:	6879      	ldr	r1, [r7, #4]
 800892c:	4613      	mov	r3, r2
 800892e:	00db      	lsls	r3, r3, #3
 8008930:	4413      	add	r3, r2
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	440b      	add	r3, r1
 8008936:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800893a:	2200      	movs	r2, #0
 800893c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800893e:	7bfa      	ldrb	r2, [r7, #15]
 8008940:	6879      	ldr	r1, [r7, #4]
 8008942:	4613      	mov	r3, r2
 8008944:	00db      	lsls	r3, r3, #3
 8008946:	4413      	add	r3, r2
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	440b      	add	r3, r1
 800894c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8008950:	7bfa      	ldrb	r2, [r7, #15]
 8008952:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008954:	7bfa      	ldrb	r2, [r7, #15]
 8008956:	6879      	ldr	r1, [r7, #4]
 8008958:	4613      	mov	r3, r2
 800895a:	00db      	lsls	r3, r3, #3
 800895c:	4413      	add	r3, r2
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	440b      	add	r3, r1
 8008962:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008966:	2200      	movs	r2, #0
 8008968:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800896a:	7bfa      	ldrb	r2, [r7, #15]
 800896c:	6879      	ldr	r1, [r7, #4]
 800896e:	4613      	mov	r3, r2
 8008970:	00db      	lsls	r3, r3, #3
 8008972:	4413      	add	r3, r2
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	440b      	add	r3, r1
 8008978:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800897c:	2200      	movs	r2, #0
 800897e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008980:	7bfa      	ldrb	r2, [r7, #15]
 8008982:	6879      	ldr	r1, [r7, #4]
 8008984:	4613      	mov	r3, r2
 8008986:	00db      	lsls	r3, r3, #3
 8008988:	4413      	add	r3, r2
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	440b      	add	r3, r1
 800898e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008992:	2200      	movs	r2, #0
 8008994:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008996:	7bfa      	ldrb	r2, [r7, #15]
 8008998:	6879      	ldr	r1, [r7, #4]
 800899a:	4613      	mov	r3, r2
 800899c:	00db      	lsls	r3, r3, #3
 800899e:	4413      	add	r3, r2
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	440b      	add	r3, r1
 80089a4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80089a8:	2200      	movs	r2, #0
 80089aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80089ac:	7bfb      	ldrb	r3, [r7, #15]
 80089ae:	3301      	adds	r3, #1
 80089b0:	73fb      	strb	r3, [r7, #15]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	791b      	ldrb	r3, [r3, #4]
 80089b6:	7bfa      	ldrb	r2, [r7, #15]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d3b5      	bcc.n	8008928 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6818      	ldr	r0, [r3, #0]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	7c1a      	ldrb	r2, [r3, #16]
 80089c4:	f88d 2000 	strb.w	r2, [sp]
 80089c8:	3304      	adds	r3, #4
 80089ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80089cc:	f002 fec8 	bl	800b760 <USB_DevInit>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d005      	beq.n	80089e2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2202      	movs	r2, #2
 80089da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	e00c      	b.n	80089fc <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4618      	mov	r0, r3
 80089f6:	f003 ff12 	bl	800c81e <USB_DevDisconnect>

  return HAL_OK;
 80089fa:	2300      	movs	r3, #0
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3710      	adds	r7, #16
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d101      	bne.n	8008a20 <HAL_PCD_Start+0x1c>
 8008a1c:	2302      	movs	r3, #2
 8008a1e:	e022      	b.n	8008a66 <HAL_PCD_Start+0x62>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d009      	beq.n	8008a48 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d105      	bne.n	8008a48 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a40:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f002 fe19 	bl	800b684 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4618      	mov	r0, r3
 8008a58:	f003 fec0 	bl	800c7dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008a6e:	b590      	push	{r4, r7, lr}
 8008a70:	b08d      	sub	sp, #52	@ 0x34
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a7c:	6a3b      	ldr	r3, [r7, #32]
 8008a7e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4618      	mov	r0, r3
 8008a86:	f003 ff7e 	bl	800c986 <USB_GetMode>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f040 848c 	bne.w	80093aa <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4618      	mov	r0, r3
 8008a98:	f003 fee2 	bl	800c860 <USB_ReadInterrupts>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	f000 8482 	beq.w	80093a8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	0a1b      	lsrs	r3, r3, #8
 8008aae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4618      	mov	r0, r3
 8008abe:	f003 fecf 	bl	800c860 <USB_ReadInterrupts>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	f003 0302 	and.w	r3, r3, #2
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	d107      	bne.n	8008adc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	695a      	ldr	r2, [r3, #20]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f002 0202 	and.w	r2, r2, #2
 8008ada:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f003 febd 	bl	800c860 <USB_ReadInterrupts>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	f003 0310 	and.w	r3, r3, #16
 8008aec:	2b10      	cmp	r3, #16
 8008aee:	d161      	bne.n	8008bb4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	699a      	ldr	r2, [r3, #24]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f022 0210 	bic.w	r2, r2, #16
 8008afe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008b00:	6a3b      	ldr	r3, [r7, #32]
 8008b02:	6a1b      	ldr	r3, [r3, #32]
 8008b04:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	f003 020f 	and.w	r2, r3, #15
 8008b0c:	4613      	mov	r3, r2
 8008b0e:	00db      	lsls	r3, r3, #3
 8008b10:	4413      	add	r3, r2
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	3304      	adds	r3, #4
 8008b1e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8008b26:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008b2a:	d124      	bne.n	8008b76 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008b2c:	69ba      	ldr	r2, [r7, #24]
 8008b2e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8008b32:	4013      	ands	r3, r2
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d035      	beq.n	8008ba4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	091b      	lsrs	r3, r3, #4
 8008b40:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008b42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	461a      	mov	r2, r3
 8008b4a:	6a38      	ldr	r0, [r7, #32]
 8008b4c:	f003 fcf4 	bl	800c538 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	68da      	ldr	r2, [r3, #12]
 8008b54:	69bb      	ldr	r3, [r7, #24]
 8008b56:	091b      	lsrs	r3, r3, #4
 8008b58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b5c:	441a      	add	r2, r3
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	695a      	ldr	r2, [r3, #20]
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	091b      	lsrs	r3, r3, #4
 8008b6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b6e:	441a      	add	r2, r3
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	615a      	str	r2, [r3, #20]
 8008b74:	e016      	b.n	8008ba4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8008b7c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008b80:	d110      	bne.n	8008ba4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008b88:	2208      	movs	r2, #8
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	6a38      	ldr	r0, [r7, #32]
 8008b8e:	f003 fcd3 	bl	800c538 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	695a      	ldr	r2, [r3, #20]
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	091b      	lsrs	r3, r3, #4
 8008b9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b9e:	441a      	add	r2, r3
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	699a      	ldr	r2, [r3, #24]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f042 0210 	orr.w	r2, r2, #16
 8008bb2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f003 fe51 	bl	800c860 <USB_ReadInterrupts>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008bc4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008bc8:	f040 80a7 	bne.w	8008d1a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f003 fe56 	bl	800c886 <USB_ReadDevAllOutEpInterrupt>
 8008bda:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8008bdc:	e099      	b.n	8008d12 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be0:	f003 0301 	and.w	r3, r3, #1
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f000 808e 	beq.w	8008d06 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bf0:	b2d2      	uxtb	r2, r2
 8008bf2:	4611      	mov	r1, r2
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f003 fe7a 	bl	800c8ee <USB_ReadDevOutEPInterrupt>
 8008bfa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	f003 0301 	and.w	r3, r3, #1
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d00c      	beq.n	8008c20 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c08:	015a      	lsls	r2, r3, #5
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c12:	461a      	mov	r2, r3
 8008c14:	2301      	movs	r3, #1
 8008c16:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008c18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fea4 	bl	8009968 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	f003 0308 	and.w	r3, r3, #8
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d00c      	beq.n	8008c44 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c2c:	015a      	lsls	r2, r3, #5
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	4413      	add	r3, r2
 8008c32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c36:	461a      	mov	r2, r3
 8008c38:	2308      	movs	r3, #8
 8008c3a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008c3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 ff7a 	bl	8009b38 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	f003 0310 	and.w	r3, r3, #16
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d008      	beq.n	8008c60 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c50:	015a      	lsls	r2, r3, #5
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	4413      	add	r3, r2
 8008c56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	2310      	movs	r3, #16
 8008c5e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	f003 0302 	and.w	r3, r3, #2
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d030      	beq.n	8008ccc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008c6a:	6a3b      	ldr	r3, [r7, #32]
 8008c6c:	695b      	ldr	r3, [r3, #20]
 8008c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c72:	2b80      	cmp	r3, #128	@ 0x80
 8008c74:	d109      	bne.n	8008c8a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	69fa      	ldr	r2, [r7, #28]
 8008c80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008c84:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008c88:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c8c:	4613      	mov	r3, r2
 8008c8e:	00db      	lsls	r3, r3, #3
 8008c90:	4413      	add	r3, r2
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	3304      	adds	r3, #4
 8008c9e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	78db      	ldrb	r3, [r3, #3]
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d108      	bne.n	8008cba <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	2200      	movs	r2, #0
 8008cac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f006 fa8d 	bl	800f1d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cbc:	015a      	lsls	r2, r3, #5
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	2302      	movs	r3, #2
 8008cca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	f003 0320 	and.w	r3, r3, #32
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d008      	beq.n	8008ce8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd8:	015a      	lsls	r2, r3, #5
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	4413      	add	r3, r2
 8008cde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	2320      	movs	r3, #32
 8008ce6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d009      	beq.n	8008d06 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cf4:	015a      	lsls	r2, r3, #5
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cfe:	461a      	mov	r2, r3
 8008d00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008d04:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d08:	3301      	adds	r3, #1
 8008d0a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8008d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d0e:	085b      	lsrs	r3, r3, #1
 8008d10:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8008d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f47f af62 	bne.w	8008bde <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f003 fd9e 	bl	800c860 <USB_ReadInterrupts>
 8008d24:	4603      	mov	r3, r0
 8008d26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008d2a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008d2e:	f040 80db 	bne.w	8008ee8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4618      	mov	r0, r3
 8008d38:	f003 fdbf 	bl	800c8ba <USB_ReadDevAllInEpInterrupt>
 8008d3c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8008d42:	e0cd      	b.n	8008ee0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d46:	f003 0301 	and.w	r3, r3, #1
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	f000 80c2 	beq.w	8008ed4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d56:	b2d2      	uxtb	r2, r2
 8008d58:	4611      	mov	r1, r2
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f003 fde5 	bl	800c92a <USB_ReadDevInEPInterrupt>
 8008d60:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	f003 0301 	and.w	r3, r3, #1
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d057      	beq.n	8008e1c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d6e:	f003 030f 	and.w	r3, r3, #15
 8008d72:	2201      	movs	r2, #1
 8008d74:	fa02 f303 	lsl.w	r3, r2, r3
 8008d78:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	43db      	mvns	r3, r3
 8008d86:	69f9      	ldr	r1, [r7, #28]
 8008d88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d92:	015a      	lsls	r2, r3, #5
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	4413      	add	r3, r2
 8008d98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	2301      	movs	r3, #1
 8008da0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	799b      	ldrb	r3, [r3, #6]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d132      	bne.n	8008e10 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008daa:	6879      	ldr	r1, [r7, #4]
 8008dac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dae:	4613      	mov	r3, r2
 8008db0:	00db      	lsls	r3, r3, #3
 8008db2:	4413      	add	r3, r2
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	440b      	add	r3, r1
 8008db8:	3320      	adds	r3, #32
 8008dba:	6819      	ldr	r1, [r3, #0]
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	00db      	lsls	r3, r3, #3
 8008dc4:	4413      	add	r3, r2
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	4403      	add	r3, r0
 8008dca:	331c      	adds	r3, #28
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4419      	add	r1, r3
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dd4:	4613      	mov	r3, r2
 8008dd6:	00db      	lsls	r3, r3, #3
 8008dd8:	4413      	add	r3, r2
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	4403      	add	r3, r0
 8008dde:	3320      	adds	r3, #32
 8008de0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d113      	bne.n	8008e10 <HAL_PCD_IRQHandler+0x3a2>
 8008de8:	6879      	ldr	r1, [r7, #4]
 8008dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dec:	4613      	mov	r3, r2
 8008dee:	00db      	lsls	r3, r3, #3
 8008df0:	4413      	add	r3, r2
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	440b      	add	r3, r1
 8008df6:	3324      	adds	r3, #36	@ 0x24
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d108      	bne.n	8008e10 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6818      	ldr	r0, [r3, #0]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008e08:	461a      	mov	r2, r3
 8008e0a:	2101      	movs	r1, #1
 8008e0c:	f003 fdec 	bl	800c9e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	4619      	mov	r1, r3
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f006 f961 	bl	800f0de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	f003 0308 	and.w	r3, r3, #8
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d008      	beq.n	8008e38 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e28:	015a      	lsls	r2, r3, #5
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e32:	461a      	mov	r2, r3
 8008e34:	2308      	movs	r3, #8
 8008e36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	f003 0310 	and.w	r3, r3, #16
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d008      	beq.n	8008e54 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e44:	015a      	lsls	r2, r3, #5
 8008e46:	69fb      	ldr	r3, [r7, #28]
 8008e48:	4413      	add	r3, r2
 8008e4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e4e:	461a      	mov	r2, r3
 8008e50:	2310      	movs	r3, #16
 8008e52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d008      	beq.n	8008e70 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e60:	015a      	lsls	r2, r3, #5
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	4413      	add	r3, r2
 8008e66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	2340      	movs	r3, #64	@ 0x40
 8008e6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	f003 0302 	and.w	r3, r3, #2
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d023      	beq.n	8008ec2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008e7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008e7c:	6a38      	ldr	r0, [r7, #32]
 8008e7e:	f002 fdd3 	bl	800ba28 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008e82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e84:	4613      	mov	r3, r2
 8008e86:	00db      	lsls	r3, r3, #3
 8008e88:	4413      	add	r3, r2
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	3310      	adds	r3, #16
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	4413      	add	r3, r2
 8008e92:	3304      	adds	r3, #4
 8008e94:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	78db      	ldrb	r3, [r3, #3]
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d108      	bne.n	8008eb0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f006 f9a4 	bl	800f1f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb2:	015a      	lsls	r2, r3, #5
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	2302      	movs	r3, #2
 8008ec0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d003      	beq.n	8008ed4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008ecc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 fcbd 	bl	800984e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8008eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008edc:	085b      	lsrs	r3, r3, #1
 8008ede:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8008ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	f47f af2e 	bne.w	8008d44 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4618      	mov	r0, r3
 8008eee:	f003 fcb7 	bl	800c860 <USB_ReadInterrupts>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ef8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008efc:	d122      	bne.n	8008f44 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008efe:	69fb      	ldr	r3, [r7, #28]
 8008f00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	69fa      	ldr	r2, [r7, #28]
 8008f08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008f0c:	f023 0301 	bic.w	r3, r3, #1
 8008f10:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d108      	bne.n	8008f2e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008f24:	2100      	movs	r1, #0
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fea4 	bl	8009c74 <HAL_PCDEx_LPM_Callback>
 8008f2c:	e002      	b.n	8008f34 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f006 f942 	bl	800f1b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	695a      	ldr	r2, [r3, #20]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8008f42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f003 fc89 	bl	800c860 <USB_ReadInterrupts>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f58:	d112      	bne.n	8008f80 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	f003 0301 	and.w	r3, r3, #1
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d102      	bne.n	8008f70 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f006 f8fe 	bl	800f16c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	695a      	ldr	r2, [r3, #20]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8008f7e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4618      	mov	r0, r3
 8008f86:	f003 fc6b 	bl	800c860 <USB_ReadInterrupts>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008f90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f94:	f040 80b7 	bne.w	8009106 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008f98:	69fb      	ldr	r3, [r7, #28]
 8008f9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	69fa      	ldr	r2, [r7, #28]
 8008fa2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008fa6:	f023 0301 	bic.w	r3, r3, #1
 8008faa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2110      	movs	r1, #16
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f002 fd38 	bl	800ba28 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008fb8:	2300      	movs	r3, #0
 8008fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008fbc:	e046      	b.n	800904c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fc0:	015a      	lsls	r2, r3, #5
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fca:	461a      	mov	r2, r3
 8008fcc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008fd0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fd4:	015a      	lsls	r2, r3, #5
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	4413      	add	r3, r2
 8008fda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fe2:	0151      	lsls	r1, r2, #5
 8008fe4:	69fa      	ldr	r2, [r7, #28]
 8008fe6:	440a      	add	r2, r1
 8008fe8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008ff0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ff4:	015a      	lsls	r2, r3, #5
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ffe:	461a      	mov	r2, r3
 8009000:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009004:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009008:	015a      	lsls	r2, r3, #5
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	4413      	add	r3, r2
 800900e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009016:	0151      	lsls	r1, r2, #5
 8009018:	69fa      	ldr	r2, [r7, #28]
 800901a:	440a      	add	r2, r1
 800901c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009020:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009024:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009028:	015a      	lsls	r2, r3, #5
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	4413      	add	r3, r2
 800902e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009036:	0151      	lsls	r1, r2, #5
 8009038:	69fa      	ldr	r2, [r7, #28]
 800903a:	440a      	add	r2, r1
 800903c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009040:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009044:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009048:	3301      	adds	r3, #1
 800904a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	791b      	ldrb	r3, [r3, #4]
 8009050:	461a      	mov	r2, r3
 8009052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009054:	4293      	cmp	r3, r2
 8009056:	d3b2      	bcc.n	8008fbe <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800905e:	69db      	ldr	r3, [r3, #28]
 8009060:	69fa      	ldr	r2, [r7, #28]
 8009062:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009066:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800906a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	7bdb      	ldrb	r3, [r3, #15]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d016      	beq.n	80090a2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800907a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800907e:	69fa      	ldr	r2, [r7, #28]
 8009080:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009084:	f043 030b 	orr.w	r3, r3, #11
 8009088:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009094:	69fa      	ldr	r2, [r7, #28]
 8009096:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800909a:	f043 030b 	orr.w	r3, r3, #11
 800909e:	6453      	str	r3, [r2, #68]	@ 0x44
 80090a0:	e015      	b.n	80090ce <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090a8:	695b      	ldr	r3, [r3, #20]
 80090aa:	69fa      	ldr	r2, [r7, #28]
 80090ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80090b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80090b4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80090b8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	69fa      	ldr	r2, [r7, #28]
 80090c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80090c8:	f043 030b 	orr.w	r3, r3, #11
 80090cc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	69fa      	ldr	r2, [r7, #28]
 80090d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80090dc:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80090e0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6818      	ldr	r0, [r3, #0]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80090f0:	461a      	mov	r2, r3
 80090f2:	f003 fc79 	bl	800c9e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	695a      	ldr	r2, [r3, #20]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8009104:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4618      	mov	r0, r3
 800910c:	f003 fba8 	bl	800c860 <USB_ReadInterrupts>
 8009110:	4603      	mov	r3, r0
 8009112:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009116:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800911a:	d123      	bne.n	8009164 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4618      	mov	r0, r3
 8009122:	f003 fc3e 	bl	800c9a2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4618      	mov	r0, r3
 800912c:	f002 fcf5 	bl	800bb1a <USB_GetDevSpeed>
 8009130:	4603      	mov	r3, r0
 8009132:	461a      	mov	r2, r3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681c      	ldr	r4, [r3, #0]
 800913c:	f001 f9ca 	bl	800a4d4 <HAL_RCC_GetHCLKFreq>
 8009140:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009146:	461a      	mov	r2, r3
 8009148:	4620      	mov	r0, r4
 800914a:	f002 f9f9 	bl	800b540 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f005 ffed 	bl	800f12e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	695a      	ldr	r2, [r3, #20]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8009162:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4618      	mov	r0, r3
 800916a:	f003 fb79 	bl	800c860 <USB_ReadInterrupts>
 800916e:	4603      	mov	r3, r0
 8009170:	f003 0308 	and.w	r3, r3, #8
 8009174:	2b08      	cmp	r3, #8
 8009176:	d10a      	bne.n	800918e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f005 ffca 	bl	800f112 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	695a      	ldr	r2, [r3, #20]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f002 0208 	and.w	r2, r2, #8
 800918c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4618      	mov	r0, r3
 8009194:	f003 fb64 	bl	800c860 <USB_ReadInterrupts>
 8009198:	4603      	mov	r3, r0
 800919a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800919e:	2b80      	cmp	r3, #128	@ 0x80
 80091a0:	d123      	bne.n	80091ea <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80091a2:	6a3b      	ldr	r3, [r7, #32]
 80091a4:	699b      	ldr	r3, [r3, #24]
 80091a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80091aa:	6a3b      	ldr	r3, [r7, #32]
 80091ac:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80091ae:	2301      	movs	r3, #1
 80091b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80091b2:	e014      	b.n	80091de <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80091b4:	6879      	ldr	r1, [r7, #4]
 80091b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091b8:	4613      	mov	r3, r2
 80091ba:	00db      	lsls	r3, r3, #3
 80091bc:	4413      	add	r3, r2
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	440b      	add	r3, r1
 80091c2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d105      	bne.n	80091d8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80091cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	4619      	mov	r1, r3
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 fb0a 	bl	80097ec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80091d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091da:	3301      	adds	r3, #1
 80091dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	791b      	ldrb	r3, [r3, #4]
 80091e2:	461a      	mov	r2, r3
 80091e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d3e4      	bcc.n	80091b4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4618      	mov	r0, r3
 80091f0:	f003 fb36 	bl	800c860 <USB_ReadInterrupts>
 80091f4:	4603      	mov	r3, r0
 80091f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80091fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80091fe:	d13c      	bne.n	800927a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009200:	2301      	movs	r3, #1
 8009202:	627b      	str	r3, [r7, #36]	@ 0x24
 8009204:	e02b      	b.n	800925e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009208:	015a      	lsls	r2, r3, #5
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	4413      	add	r3, r2
 800920e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009216:	6879      	ldr	r1, [r7, #4]
 8009218:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800921a:	4613      	mov	r3, r2
 800921c:	00db      	lsls	r3, r3, #3
 800921e:	4413      	add	r3, r2
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	440b      	add	r3, r1
 8009224:	3318      	adds	r3, #24
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	2b01      	cmp	r3, #1
 800922a:	d115      	bne.n	8009258 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800922c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800922e:	2b00      	cmp	r3, #0
 8009230:	da12      	bge.n	8009258 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009232:	6879      	ldr	r1, [r7, #4]
 8009234:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009236:	4613      	mov	r3, r2
 8009238:	00db      	lsls	r3, r3, #3
 800923a:	4413      	add	r3, r2
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	440b      	add	r3, r1
 8009240:	3317      	adds	r3, #23
 8009242:	2201      	movs	r2, #1
 8009244:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009248:	b2db      	uxtb	r3, r3
 800924a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800924e:	b2db      	uxtb	r3, r3
 8009250:	4619      	mov	r1, r3
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 faca 	bl	80097ec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800925a:	3301      	adds	r3, #1
 800925c:	627b      	str	r3, [r7, #36]	@ 0x24
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	791b      	ldrb	r3, [r3, #4]
 8009262:	461a      	mov	r2, r3
 8009264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009266:	4293      	cmp	r3, r2
 8009268:	d3cd      	bcc.n	8009206 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	695a      	ldr	r2, [r3, #20]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8009278:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4618      	mov	r0, r3
 8009280:	f003 faee 	bl	800c860 <USB_ReadInterrupts>
 8009284:	4603      	mov	r3, r0
 8009286:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800928a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800928e:	d156      	bne.n	800933e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009290:	2301      	movs	r3, #1
 8009292:	627b      	str	r3, [r7, #36]	@ 0x24
 8009294:	e045      	b.n	8009322 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009298:	015a      	lsls	r2, r3, #5
 800929a:	69fb      	ldr	r3, [r7, #28]
 800929c:	4413      	add	r3, r2
 800929e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80092a6:	6879      	ldr	r1, [r7, #4]
 80092a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092aa:	4613      	mov	r3, r2
 80092ac:	00db      	lsls	r3, r3, #3
 80092ae:	4413      	add	r3, r2
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	440b      	add	r3, r1
 80092b4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d12e      	bne.n	800931c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80092be:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	da2b      	bge.n	800931c <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	0c1a      	lsrs	r2, r3, #16
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80092ce:	4053      	eors	r3, r2
 80092d0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d121      	bne.n	800931c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80092d8:	6879      	ldr	r1, [r7, #4]
 80092da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092dc:	4613      	mov	r3, r2
 80092de:	00db      	lsls	r3, r3, #3
 80092e0:	4413      	add	r3, r2
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	440b      	add	r3, r1
 80092e6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80092ea:	2201      	movs	r2, #1
 80092ec:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80092ee:	6a3b      	ldr	r3, [r7, #32]
 80092f0:	699b      	ldr	r3, [r3, #24]
 80092f2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80092f6:	6a3b      	ldr	r3, [r7, #32]
 80092f8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80092fa:	6a3b      	ldr	r3, [r7, #32]
 80092fc:	695b      	ldr	r3, [r3, #20]
 80092fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009302:	2b00      	cmp	r3, #0
 8009304:	d10a      	bne.n	800931c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009306:	69fb      	ldr	r3, [r7, #28]
 8009308:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	69fa      	ldr	r2, [r7, #28]
 8009310:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009314:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009318:	6053      	str	r3, [r2, #4]
            break;
 800931a:	e008      	b.n	800932e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800931c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800931e:	3301      	adds	r3, #1
 8009320:	627b      	str	r3, [r7, #36]	@ 0x24
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	791b      	ldrb	r3, [r3, #4]
 8009326:	461a      	mov	r2, r3
 8009328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800932a:	4293      	cmp	r3, r2
 800932c:	d3b3      	bcc.n	8009296 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	695a      	ldr	r2, [r3, #20]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800933c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4618      	mov	r0, r3
 8009344:	f003 fa8c 	bl	800c860 <USB_ReadInterrupts>
 8009348:	4603      	mov	r3, r0
 800934a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800934e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009352:	d10a      	bne.n	800936a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f005 ff61 	bl	800f21c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	695a      	ldr	r2, [r3, #20]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8009368:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4618      	mov	r0, r3
 8009370:	f003 fa76 	bl	800c860 <USB_ReadInterrupts>
 8009374:	4603      	mov	r3, r0
 8009376:	f003 0304 	and.w	r3, r3, #4
 800937a:	2b04      	cmp	r3, #4
 800937c:	d115      	bne.n	80093aa <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	f003 0304 	and.w	r3, r3, #4
 800938c:	2b00      	cmp	r3, #0
 800938e:	d002      	beq.n	8009396 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f005 ff51 	bl	800f238 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	6859      	ldr	r1, [r3, #4]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	69ba      	ldr	r2, [r7, #24]
 80093a2:	430a      	orrs	r2, r1
 80093a4:	605a      	str	r2, [r3, #4]
 80093a6:	e000      	b.n	80093aa <HAL_PCD_IRQHandler+0x93c>
      return;
 80093a8:	bf00      	nop
    }
  }
}
 80093aa:	3734      	adds	r7, #52	@ 0x34
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd90      	pop	{r4, r7, pc}

080093b0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	460b      	mov	r3, r1
 80093ba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d101      	bne.n	80093ca <HAL_PCD_SetAddress+0x1a>
 80093c6:	2302      	movs	r3, #2
 80093c8:	e012      	b.n	80093f0 <HAL_PCD_SetAddress+0x40>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2201      	movs	r2, #1
 80093ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	78fa      	ldrb	r2, [r7, #3]
 80093d6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	78fa      	ldrb	r2, [r7, #3]
 80093de:	4611      	mov	r1, r2
 80093e0:	4618      	mov	r0, r3
 80093e2:	f003 f9d5 	bl	800c790 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3708      	adds	r7, #8
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	4608      	mov	r0, r1
 8009402:	4611      	mov	r1, r2
 8009404:	461a      	mov	r2, r3
 8009406:	4603      	mov	r3, r0
 8009408:	70fb      	strb	r3, [r7, #3]
 800940a:	460b      	mov	r3, r1
 800940c:	803b      	strh	r3, [r7, #0]
 800940e:	4613      	mov	r3, r2
 8009410:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8009412:	2300      	movs	r3, #0
 8009414:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009416:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800941a:	2b00      	cmp	r3, #0
 800941c:	da0f      	bge.n	800943e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800941e:	78fb      	ldrb	r3, [r7, #3]
 8009420:	f003 020f 	and.w	r2, r3, #15
 8009424:	4613      	mov	r3, r2
 8009426:	00db      	lsls	r3, r3, #3
 8009428:	4413      	add	r3, r2
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	3310      	adds	r3, #16
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	4413      	add	r3, r2
 8009432:	3304      	adds	r3, #4
 8009434:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2201      	movs	r2, #1
 800943a:	705a      	strb	r2, [r3, #1]
 800943c:	e00f      	b.n	800945e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800943e:	78fb      	ldrb	r3, [r7, #3]
 8009440:	f003 020f 	and.w	r2, r3, #15
 8009444:	4613      	mov	r3, r2
 8009446:	00db      	lsls	r3, r3, #3
 8009448:	4413      	add	r3, r2
 800944a:	009b      	lsls	r3, r3, #2
 800944c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	4413      	add	r3, r2
 8009454:	3304      	adds	r3, #4
 8009456:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2200      	movs	r2, #0
 800945c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800945e:	78fb      	ldrb	r3, [r7, #3]
 8009460:	f003 030f 	and.w	r3, r3, #15
 8009464:	b2da      	uxtb	r2, r3
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800946a:	883b      	ldrh	r3, [r7, #0]
 800946c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	78ba      	ldrb	r2, [r7, #2]
 8009478:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	785b      	ldrb	r3, [r3, #1]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d004      	beq.n	800948c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	461a      	mov	r2, r3
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800948c:	78bb      	ldrb	r3, [r7, #2]
 800948e:	2b02      	cmp	r3, #2
 8009490:	d102      	bne.n	8009498 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2200      	movs	r2, #0
 8009496:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d101      	bne.n	80094a6 <HAL_PCD_EP_Open+0xae>
 80094a2:	2302      	movs	r3, #2
 80094a4:	e00e      	b.n	80094c4 <HAL_PCD_EP_Open+0xcc>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2201      	movs	r2, #1
 80094aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	68f9      	ldr	r1, [r7, #12]
 80094b4:	4618      	mov	r0, r3
 80094b6:	f002 fb55 	bl	800bb64 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80094c2:	7afb      	ldrb	r3, [r7, #11]
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	460b      	mov	r3, r1
 80094d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80094d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	da0f      	bge.n	8009500 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80094e0:	78fb      	ldrb	r3, [r7, #3]
 80094e2:	f003 020f 	and.w	r2, r3, #15
 80094e6:	4613      	mov	r3, r2
 80094e8:	00db      	lsls	r3, r3, #3
 80094ea:	4413      	add	r3, r2
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	3310      	adds	r3, #16
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	4413      	add	r3, r2
 80094f4:	3304      	adds	r3, #4
 80094f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2201      	movs	r2, #1
 80094fc:	705a      	strb	r2, [r3, #1]
 80094fe:	e00f      	b.n	8009520 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009500:	78fb      	ldrb	r3, [r7, #3]
 8009502:	f003 020f 	and.w	r2, r3, #15
 8009506:	4613      	mov	r3, r2
 8009508:	00db      	lsls	r3, r3, #3
 800950a:	4413      	add	r3, r2
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	4413      	add	r3, r2
 8009516:	3304      	adds	r3, #4
 8009518:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2200      	movs	r2, #0
 800951e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009520:	78fb      	ldrb	r3, [r7, #3]
 8009522:	f003 030f 	and.w	r3, r3, #15
 8009526:	b2da      	uxtb	r2, r3
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009532:	2b01      	cmp	r3, #1
 8009534:	d101      	bne.n	800953a <HAL_PCD_EP_Close+0x6e>
 8009536:	2302      	movs	r3, #2
 8009538:	e00e      	b.n	8009558 <HAL_PCD_EP_Close+0x8c>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2201      	movs	r2, #1
 800953e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	68f9      	ldr	r1, [r7, #12]
 8009548:	4618      	mov	r0, r3
 800954a:	f002 fb93 	bl	800bc74 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2200      	movs	r2, #0
 8009552:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8009556:	2300      	movs	r3, #0
}
 8009558:	4618      	mov	r0, r3
 800955a:	3710      	adds	r7, #16
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b086      	sub	sp, #24
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	607a      	str	r2, [r7, #4]
 800956a:	603b      	str	r3, [r7, #0]
 800956c:	460b      	mov	r3, r1
 800956e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009570:	7afb      	ldrb	r3, [r7, #11]
 8009572:	f003 020f 	and.w	r2, r3, #15
 8009576:	4613      	mov	r3, r2
 8009578:	00db      	lsls	r3, r3, #3
 800957a:	4413      	add	r3, r2
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	4413      	add	r3, r2
 8009586:	3304      	adds	r3, #4
 8009588:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	683a      	ldr	r2, [r7, #0]
 8009594:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	2200      	movs	r2, #0
 800959a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	2200      	movs	r2, #0
 80095a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80095a2:	7afb      	ldrb	r3, [r7, #11]
 80095a4:	f003 030f 	and.w	r3, r3, #15
 80095a8:	b2da      	uxtb	r2, r3
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	799b      	ldrb	r3, [r3, #6]
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d102      	bne.n	80095bc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	6818      	ldr	r0, [r3, #0]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	799b      	ldrb	r3, [r3, #6]
 80095c4:	461a      	mov	r2, r3
 80095c6:	6979      	ldr	r1, [r7, #20]
 80095c8:	f002 fc30 	bl	800be2c <USB_EPStartXfer>

  return HAL_OK;
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3718      	adds	r7, #24
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80095d6:	b480      	push	{r7}
 80095d8:	b083      	sub	sp, #12
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
 80095de:	460b      	mov	r3, r1
 80095e0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80095e2:	78fb      	ldrb	r3, [r7, #3]
 80095e4:	f003 020f 	and.w	r2, r3, #15
 80095e8:	6879      	ldr	r1, [r7, #4]
 80095ea:	4613      	mov	r3, r2
 80095ec:	00db      	lsls	r3, r3, #3
 80095ee:	4413      	add	r3, r2
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	440b      	add	r3, r1
 80095f4:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80095f8:	681b      	ldr	r3, [r3, #0]
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	370c      	adds	r7, #12
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr

08009606 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009606:	b580      	push	{r7, lr}
 8009608:	b086      	sub	sp, #24
 800960a:	af00      	add	r7, sp, #0
 800960c:	60f8      	str	r0, [r7, #12]
 800960e:	607a      	str	r2, [r7, #4]
 8009610:	603b      	str	r3, [r7, #0]
 8009612:	460b      	mov	r3, r1
 8009614:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009616:	7afb      	ldrb	r3, [r7, #11]
 8009618:	f003 020f 	and.w	r2, r3, #15
 800961c:	4613      	mov	r3, r2
 800961e:	00db      	lsls	r3, r3, #3
 8009620:	4413      	add	r3, r2
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	3310      	adds	r3, #16
 8009626:	68fa      	ldr	r2, [r7, #12]
 8009628:	4413      	add	r3, r2
 800962a:	3304      	adds	r3, #4
 800962c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	683a      	ldr	r2, [r7, #0]
 8009638:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	2200      	movs	r2, #0
 800963e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	2201      	movs	r2, #1
 8009644:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009646:	7afb      	ldrb	r3, [r7, #11]
 8009648:	f003 030f 	and.w	r3, r3, #15
 800964c:	b2da      	uxtb	r2, r3
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	799b      	ldrb	r3, [r3, #6]
 8009656:	2b01      	cmp	r3, #1
 8009658:	d102      	bne.n	8009660 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6818      	ldr	r0, [r3, #0]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	799b      	ldrb	r3, [r3, #6]
 8009668:	461a      	mov	r2, r3
 800966a:	6979      	ldr	r1, [r7, #20]
 800966c:	f002 fbde 	bl	800be2c <USB_EPStartXfer>

  return HAL_OK;
 8009670:	2300      	movs	r3, #0
}
 8009672:	4618      	mov	r0, r3
 8009674:	3718      	adds	r7, #24
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b084      	sub	sp, #16
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
 8009682:	460b      	mov	r3, r1
 8009684:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009686:	78fb      	ldrb	r3, [r7, #3]
 8009688:	f003 030f 	and.w	r3, r3, #15
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	7912      	ldrb	r2, [r2, #4]
 8009690:	4293      	cmp	r3, r2
 8009692:	d901      	bls.n	8009698 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009694:	2301      	movs	r3, #1
 8009696:	e04f      	b.n	8009738 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009698:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800969c:	2b00      	cmp	r3, #0
 800969e:	da0f      	bge.n	80096c0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80096a0:	78fb      	ldrb	r3, [r7, #3]
 80096a2:	f003 020f 	and.w	r2, r3, #15
 80096a6:	4613      	mov	r3, r2
 80096a8:	00db      	lsls	r3, r3, #3
 80096aa:	4413      	add	r3, r2
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	3310      	adds	r3, #16
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	4413      	add	r3, r2
 80096b4:	3304      	adds	r3, #4
 80096b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2201      	movs	r2, #1
 80096bc:	705a      	strb	r2, [r3, #1]
 80096be:	e00d      	b.n	80096dc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80096c0:	78fa      	ldrb	r2, [r7, #3]
 80096c2:	4613      	mov	r3, r2
 80096c4:	00db      	lsls	r3, r3, #3
 80096c6:	4413      	add	r3, r2
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	4413      	add	r3, r2
 80096d2:	3304      	adds	r3, #4
 80096d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2200      	movs	r2, #0
 80096da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2201      	movs	r2, #1
 80096e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80096e2:	78fb      	ldrb	r3, [r7, #3]
 80096e4:	f003 030f 	and.w	r3, r3, #15
 80096e8:	b2da      	uxtb	r2, r3
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d101      	bne.n	80096fc <HAL_PCD_EP_SetStall+0x82>
 80096f8:	2302      	movs	r3, #2
 80096fa:	e01d      	b.n	8009738 <HAL_PCD_EP_SetStall+0xbe>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2201      	movs	r2, #1
 8009700:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	68f9      	ldr	r1, [r7, #12]
 800970a:	4618      	mov	r0, r3
 800970c:	f002 ff6c 	bl	800c5e8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009710:	78fb      	ldrb	r3, [r7, #3]
 8009712:	f003 030f 	and.w	r3, r3, #15
 8009716:	2b00      	cmp	r3, #0
 8009718:	d109      	bne.n	800972e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6818      	ldr	r0, [r3, #0]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	7999      	ldrb	r1, [r3, #6]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009728:	461a      	mov	r2, r3
 800972a:	f003 f95d 	bl	800c9e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009736:	2300      	movs	r3, #0
}
 8009738:	4618      	mov	r0, r3
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	460b      	mov	r3, r1
 800974a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800974c:	78fb      	ldrb	r3, [r7, #3]
 800974e:	f003 030f 	and.w	r3, r3, #15
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	7912      	ldrb	r2, [r2, #4]
 8009756:	4293      	cmp	r3, r2
 8009758:	d901      	bls.n	800975e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	e042      	b.n	80097e4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800975e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009762:	2b00      	cmp	r3, #0
 8009764:	da0f      	bge.n	8009786 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009766:	78fb      	ldrb	r3, [r7, #3]
 8009768:	f003 020f 	and.w	r2, r3, #15
 800976c:	4613      	mov	r3, r2
 800976e:	00db      	lsls	r3, r3, #3
 8009770:	4413      	add	r3, r2
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	3310      	adds	r3, #16
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	4413      	add	r3, r2
 800977a:	3304      	adds	r3, #4
 800977c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2201      	movs	r2, #1
 8009782:	705a      	strb	r2, [r3, #1]
 8009784:	e00f      	b.n	80097a6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009786:	78fb      	ldrb	r3, [r7, #3]
 8009788:	f003 020f 	and.w	r2, r3, #15
 800978c:	4613      	mov	r3, r2
 800978e:	00db      	lsls	r3, r3, #3
 8009790:	4413      	add	r3, r2
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	4413      	add	r3, r2
 800979c:	3304      	adds	r3, #4
 800979e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2200      	movs	r2, #0
 80097a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2200      	movs	r2, #0
 80097aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80097ac:	78fb      	ldrb	r3, [r7, #3]
 80097ae:	f003 030f 	and.w	r3, r3, #15
 80097b2:	b2da      	uxtb	r2, r3
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d101      	bne.n	80097c6 <HAL_PCD_EP_ClrStall+0x86>
 80097c2:	2302      	movs	r3, #2
 80097c4:	e00e      	b.n	80097e4 <HAL_PCD_EP_ClrStall+0xa4>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2201      	movs	r2, #1
 80097ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	68f9      	ldr	r1, [r7, #12]
 80097d4:	4618      	mov	r0, r3
 80097d6:	f002 ff75 	bl	800c6c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2200      	movs	r2, #0
 80097de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80097e2:	2300      	movs	r3, #0
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3710      	adds	r7, #16
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	460b      	mov	r3, r1
 80097f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80097f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	da0c      	bge.n	800981a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009800:	78fb      	ldrb	r3, [r7, #3]
 8009802:	f003 020f 	and.w	r2, r3, #15
 8009806:	4613      	mov	r3, r2
 8009808:	00db      	lsls	r3, r3, #3
 800980a:	4413      	add	r3, r2
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	3310      	adds	r3, #16
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	4413      	add	r3, r2
 8009814:	3304      	adds	r3, #4
 8009816:	60fb      	str	r3, [r7, #12]
 8009818:	e00c      	b.n	8009834 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800981a:	78fb      	ldrb	r3, [r7, #3]
 800981c:	f003 020f 	and.w	r2, r3, #15
 8009820:	4613      	mov	r3, r2
 8009822:	00db      	lsls	r3, r3, #3
 8009824:	4413      	add	r3, r2
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	4413      	add	r3, r2
 8009830:	3304      	adds	r3, #4
 8009832:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	68f9      	ldr	r1, [r7, #12]
 800983a:	4618      	mov	r0, r3
 800983c:	f002 fd94 	bl	800c368 <USB_EPStopXfer>
 8009840:	4603      	mov	r3, r0
 8009842:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009844:	7afb      	ldrb	r3, [r7, #11]
}
 8009846:	4618      	mov	r0, r3
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800984e:	b580      	push	{r7, lr}
 8009850:	b08a      	sub	sp, #40	@ 0x28
 8009852:	af02      	add	r7, sp, #8
 8009854:	6078      	str	r0, [r7, #4]
 8009856:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009862:	683a      	ldr	r2, [r7, #0]
 8009864:	4613      	mov	r3, r2
 8009866:	00db      	lsls	r3, r3, #3
 8009868:	4413      	add	r3, r2
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	3310      	adds	r3, #16
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	4413      	add	r3, r2
 8009872:	3304      	adds	r3, #4
 8009874:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	695a      	ldr	r2, [r3, #20]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	691b      	ldr	r3, [r3, #16]
 800987e:	429a      	cmp	r2, r3
 8009880:	d901      	bls.n	8009886 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	e06b      	b.n	800995e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	691a      	ldr	r2, [r3, #16]
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	695b      	ldr	r3, [r3, #20]
 800988e:	1ad3      	subs	r3, r2, r3
 8009890:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	689b      	ldr	r3, [r3, #8]
 8009896:	69fa      	ldr	r2, [r7, #28]
 8009898:	429a      	cmp	r2, r3
 800989a:	d902      	bls.n	80098a2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80098a2:	69fb      	ldr	r3, [r7, #28]
 80098a4:	3303      	adds	r3, #3
 80098a6:	089b      	lsrs	r3, r3, #2
 80098a8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80098aa:	e02a      	b.n	8009902 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	691a      	ldr	r2, [r3, #16]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	695b      	ldr	r3, [r3, #20]
 80098b4:	1ad3      	subs	r3, r2, r3
 80098b6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	69fa      	ldr	r2, [r7, #28]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d902      	bls.n	80098c8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	3303      	adds	r3, #3
 80098cc:	089b      	lsrs	r3, r3, #2
 80098ce:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	68d9      	ldr	r1, [r3, #12]
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	b2da      	uxtb	r2, r3
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80098e0:	9300      	str	r3, [sp, #0]
 80098e2:	4603      	mov	r3, r0
 80098e4:	6978      	ldr	r0, [r7, #20]
 80098e6:	f002 fde9 	bl	800c4bc <USB_WritePacket>

    ep->xfer_buff  += len;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	68da      	ldr	r2, [r3, #12]
 80098ee:	69fb      	ldr	r3, [r7, #28]
 80098f0:	441a      	add	r2, r3
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	695a      	ldr	r2, [r3, #20]
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	441a      	add	r2, r3
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	015a      	lsls	r2, r3, #5
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	4413      	add	r3, r2
 800990a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800990e:	699b      	ldr	r3, [r3, #24]
 8009910:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009912:	69ba      	ldr	r2, [r7, #24]
 8009914:	429a      	cmp	r2, r3
 8009916:	d809      	bhi.n	800992c <PCD_WriteEmptyTxFifo+0xde>
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	695a      	ldr	r2, [r3, #20]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009920:	429a      	cmp	r2, r3
 8009922:	d203      	bcs.n	800992c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	691b      	ldr	r3, [r3, #16]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d1bf      	bne.n	80098ac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	691a      	ldr	r2, [r3, #16]
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	695b      	ldr	r3, [r3, #20]
 8009934:	429a      	cmp	r2, r3
 8009936:	d811      	bhi.n	800995c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	f003 030f 	and.w	r3, r3, #15
 800993e:	2201      	movs	r2, #1
 8009940:	fa02 f303 	lsl.w	r3, r2, r3
 8009944:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800994c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	43db      	mvns	r3, r3
 8009952:	6939      	ldr	r1, [r7, #16]
 8009954:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009958:	4013      	ands	r3, r2
 800995a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3720      	adds	r7, #32
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
	...

08009968 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b088      	sub	sp, #32
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	333c      	adds	r3, #60	@ 0x3c
 8009980:	3304      	adds	r3, #4
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	015a      	lsls	r2, r3, #5
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	4413      	add	r3, r2
 800998e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	799b      	ldrb	r3, [r3, #6]
 800999a:	2b01      	cmp	r3, #1
 800999c:	d17b      	bne.n	8009a96 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	f003 0308 	and.w	r3, r3, #8
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d015      	beq.n	80099d4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	4a61      	ldr	r2, [pc, #388]	@ (8009b30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	f240 80b9 	bls.w	8009b24 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f000 80b3 	beq.w	8009b24 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	015a      	lsls	r2, r3, #5
 80099c2:	69bb      	ldr	r3, [r7, #24]
 80099c4:	4413      	add	r3, r2
 80099c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099ca:	461a      	mov	r2, r3
 80099cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099d0:	6093      	str	r3, [r2, #8]
 80099d2:	e0a7      	b.n	8009b24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	f003 0320 	and.w	r3, r3, #32
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d009      	beq.n	80099f2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	015a      	lsls	r2, r3, #5
 80099e2:	69bb      	ldr	r3, [r7, #24]
 80099e4:	4413      	add	r3, r2
 80099e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099ea:	461a      	mov	r2, r3
 80099ec:	2320      	movs	r3, #32
 80099ee:	6093      	str	r3, [r2, #8]
 80099f0:	e098      	b.n	8009b24 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	f040 8093 	bne.w	8009b24 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	4a4b      	ldr	r2, [pc, #300]	@ (8009b30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d90f      	bls.n	8009a26 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00a      	beq.n	8009a26 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	015a      	lsls	r2, r3, #5
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	4413      	add	r3, r2
 8009a18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a22:	6093      	str	r3, [r2, #8]
 8009a24:	e07e      	b.n	8009b24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009a26:	683a      	ldr	r2, [r7, #0]
 8009a28:	4613      	mov	r3, r2
 8009a2a:	00db      	lsls	r3, r3, #3
 8009a2c:	4413      	add	r3, r2
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	4413      	add	r3, r2
 8009a38:	3304      	adds	r3, #4
 8009a3a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	6a1a      	ldr	r2, [r3, #32]
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	0159      	lsls	r1, r3, #5
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	440b      	add	r3, r1
 8009a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a52:	1ad2      	subs	r2, r2, r3
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d114      	bne.n	8009a88 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	691b      	ldr	r3, [r3, #16]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d109      	bne.n	8009a7a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6818      	ldr	r0, [r3, #0]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009a70:	461a      	mov	r2, r3
 8009a72:	2101      	movs	r1, #1
 8009a74:	f002 ffb8 	bl	800c9e8 <USB_EP0_OutStart>
 8009a78:	e006      	b.n	8009a88 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	68da      	ldr	r2, [r3, #12]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	695b      	ldr	r3, [r3, #20]
 8009a82:	441a      	add	r2, r3
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f005 fb0a 	bl	800f0a8 <HAL_PCD_DataOutStageCallback>
 8009a94:	e046      	b.n	8009b24 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	4a26      	ldr	r2, [pc, #152]	@ (8009b34 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d124      	bne.n	8009ae8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d00a      	beq.n	8009abe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	015a      	lsls	r2, r3, #5
 8009aac:	69bb      	ldr	r3, [r7, #24]
 8009aae:	4413      	add	r3, r2
 8009ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009aba:	6093      	str	r3, [r2, #8]
 8009abc:	e032      	b.n	8009b24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	f003 0320 	and.w	r3, r3, #32
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d008      	beq.n	8009ada <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	015a      	lsls	r2, r3, #5
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	4413      	add	r3, r2
 8009ad0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	2320      	movs	r3, #32
 8009ad8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	4619      	mov	r1, r3
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f005 fae1 	bl	800f0a8 <HAL_PCD_DataOutStageCallback>
 8009ae6:	e01d      	b.n	8009b24 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d114      	bne.n	8009b18 <PCD_EP_OutXfrComplete_int+0x1b0>
 8009aee:	6879      	ldr	r1, [r7, #4]
 8009af0:	683a      	ldr	r2, [r7, #0]
 8009af2:	4613      	mov	r3, r2
 8009af4:	00db      	lsls	r3, r3, #3
 8009af6:	4413      	add	r3, r2
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	440b      	add	r3, r1
 8009afc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d108      	bne.n	8009b18 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6818      	ldr	r0, [r3, #0]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009b10:	461a      	mov	r2, r3
 8009b12:	2100      	movs	r1, #0
 8009b14:	f002 ff68 	bl	800c9e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f005 fac2 	bl	800f0a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009b24:	2300      	movs	r3, #0
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3720      	adds	r7, #32
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	4f54300a 	.word	0x4f54300a
 8009b34:	4f54310a 	.word	0x4f54310a

08009b38 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b086      	sub	sp, #24
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	333c      	adds	r3, #60	@ 0x3c
 8009b50:	3304      	adds	r3, #4
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	015a      	lsls	r2, r3, #5
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b62:	689b      	ldr	r3, [r3, #8]
 8009b64:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	4a15      	ldr	r2, [pc, #84]	@ (8009bc0 <PCD_EP_OutSetupPacket_int+0x88>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d90e      	bls.n	8009b8c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d009      	beq.n	8009b8c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	015a      	lsls	r2, r3, #5
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	4413      	add	r3, r2
 8009b80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b84:	461a      	mov	r2, r3
 8009b86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b8a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f005 fa79 	bl	800f084 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	4a0a      	ldr	r2, [pc, #40]	@ (8009bc0 <PCD_EP_OutSetupPacket_int+0x88>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d90c      	bls.n	8009bb4 <PCD_EP_OutSetupPacket_int+0x7c>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	799b      	ldrb	r3, [r3, #6]
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d108      	bne.n	8009bb4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6818      	ldr	r0, [r3, #0]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009bac:	461a      	mov	r2, r3
 8009bae:	2101      	movs	r1, #1
 8009bb0:	f002 ff1a 	bl	800c9e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009bb4:	2300      	movs	r3, #0
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3718      	adds	r7, #24
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	4f54300a 	.word	0x4f54300a

08009bc4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b085      	sub	sp, #20
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	460b      	mov	r3, r1
 8009bce:	70fb      	strb	r3, [r7, #3]
 8009bd0:	4613      	mov	r3, r2
 8009bd2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bda:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009bdc:	78fb      	ldrb	r3, [r7, #3]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d107      	bne.n	8009bf2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009be2:	883b      	ldrh	r3, [r7, #0]
 8009be4:	0419      	lsls	r1, r3, #16
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	68ba      	ldr	r2, [r7, #8]
 8009bec:	430a      	orrs	r2, r1
 8009bee:	629a      	str	r2, [r3, #40]	@ 0x28
 8009bf0:	e028      	b.n	8009c44 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bf8:	0c1b      	lsrs	r3, r3, #16
 8009bfa:	68ba      	ldr	r2, [r7, #8]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009c00:	2300      	movs	r3, #0
 8009c02:	73fb      	strb	r3, [r7, #15]
 8009c04:	e00d      	b.n	8009c22 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	7bfb      	ldrb	r3, [r7, #15]
 8009c0c:	3340      	adds	r3, #64	@ 0x40
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	4413      	add	r3, r2
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	0c1b      	lsrs	r3, r3, #16
 8009c16:	68ba      	ldr	r2, [r7, #8]
 8009c18:	4413      	add	r3, r2
 8009c1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009c1c:	7bfb      	ldrb	r3, [r7, #15]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	73fb      	strb	r3, [r7, #15]
 8009c22:	7bfa      	ldrb	r2, [r7, #15]
 8009c24:	78fb      	ldrb	r3, [r7, #3]
 8009c26:	3b01      	subs	r3, #1
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d3ec      	bcc.n	8009c06 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009c2c:	883b      	ldrh	r3, [r7, #0]
 8009c2e:	0418      	lsls	r0, r3, #16
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6819      	ldr	r1, [r3, #0]
 8009c34:	78fb      	ldrb	r3, [r7, #3]
 8009c36:	3b01      	subs	r3, #1
 8009c38:	68ba      	ldr	r2, [r7, #8]
 8009c3a:	4302      	orrs	r2, r0
 8009c3c:	3340      	adds	r3, #64	@ 0x40
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	440b      	add	r3, r1
 8009c42:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3714      	adds	r7, #20
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr

08009c52 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009c52:	b480      	push	{r7}
 8009c54:	b083      	sub	sp, #12
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	887a      	ldrh	r2, [r7, #2]
 8009c64:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8009c66:	2300      	movs	r3, #0
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b083      	sub	sp, #12
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009c80:	bf00      	nop
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b086      	sub	sp, #24
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d101      	bne.n	8009c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	e267      	b.n	800a16e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f003 0301 	and.w	r3, r3, #1
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d075      	beq.n	8009d96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009caa:	4b88      	ldr	r3, [pc, #544]	@ (8009ecc <HAL_RCC_OscConfig+0x240>)
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	f003 030c 	and.w	r3, r3, #12
 8009cb2:	2b04      	cmp	r3, #4
 8009cb4:	d00c      	beq.n	8009cd0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009cb6:	4b85      	ldr	r3, [pc, #532]	@ (8009ecc <HAL_RCC_OscConfig+0x240>)
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009cbe:	2b08      	cmp	r3, #8
 8009cc0:	d112      	bne.n	8009ce8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009cc2:	4b82      	ldr	r3, [pc, #520]	@ (8009ecc <HAL_RCC_OscConfig+0x240>)
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009cca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009cce:	d10b      	bne.n	8009ce8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009cd0:	4b7e      	ldr	r3, [pc, #504]	@ (8009ecc <HAL_RCC_OscConfig+0x240>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d05b      	beq.n	8009d94 <HAL_RCC_OscConfig+0x108>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d157      	bne.n	8009d94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	e242      	b.n	800a16e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cf0:	d106      	bne.n	8009d00 <HAL_RCC_OscConfig+0x74>
 8009cf2:	4b76      	ldr	r3, [pc, #472]	@ (8009ecc <HAL_RCC_OscConfig+0x240>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a75      	ldr	r2, [pc, #468]	@ (8009ecc <HAL_RCC_OscConfig+0x240>)
 8009cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009cfc:	6013      	str	r3, [r2, #0]
 8009cfe:	e01d      	b.n	8009d3c <HAL_RCC_OscConfig+0xb0>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009d08:	d10c      	bne.n	8009d24 <HAL_RCC_OscConfig+0x98>
 8009d0a:	4b70      	ldr	r3, [pc, #448]	@ (8009ecc <HAL_RCC_OscConfig+0x240>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a6f      	ldr	r2, [pc, #444]	@ (8009ecc <HAL_RCC_OscConfig+0x240>)
 8009d10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009d14:	6013      	str	r3, [r2, #0]
 8009d16:	4b6d      	ldr	r3, [pc, #436]	@ (8009ecc <HAL_RCC_OscConfig+0x240>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a6c      	ldr	r2, [pc, #432]	@ (8009ecc <HAL_RCC_OscConfig+0x240>)
 8009d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d20:	6013      	str	r3, [r2, #0]
 8009d22:	e00b      	b.n	8009d3c <HAL_RCC_OscConfig+0xb0>
 8009d24:	4b69      	ldr	r3, [pc, #420]	@ (8009ecc <HAL_RCC_OscConfig+0x240>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a68      	ldr	r2, [pc, #416]	@ (8009ecc <HAL_RCC_OscConfig+0x240>)
 8009d2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d2e:	6013      	str	r3, [r2, #0]
 8009d30:	4b66      	ldr	r3, [pc, #408]	@ (8009ecc <HAL_RCC_OscConfig+0x240>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a65      	ldr	r2, [pc, #404]	@ (8009ecc <HAL_RCC_OscConfig+0x240>)
 8009d36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d013      	beq.n	8009d6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d44:	f7f9 fee2 	bl	8003b0c <HAL_GetTick>
 8009d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d4a:	e008      	b.n	8009d5e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d4c:	f7f9 fede 	bl	8003b0c <HAL_GetTick>
 8009d50:	4602      	mov	r2, r0
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	1ad3      	subs	r3, r2, r3
 8009d56:	2b64      	cmp	r3, #100	@ 0x64
 8009d58:	d901      	bls.n	8009d5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009d5a:	2303      	movs	r3, #3
 8009d5c:	e207      	b.n	800a16e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d5e:	4b5b      	ldr	r3, [pc, #364]	@ (8009ecc <HAL_RCC_OscConfig+0x240>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d0f0      	beq.n	8009d4c <HAL_RCC_OscConfig+0xc0>
 8009d6a:	e014      	b.n	8009d96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d6c:	f7f9 fece 	bl	8003b0c <HAL_GetTick>
 8009d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009d72:	e008      	b.n	8009d86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d74:	f7f9 feca 	bl	8003b0c <HAL_GetTick>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	1ad3      	subs	r3, r2, r3
 8009d7e:	2b64      	cmp	r3, #100	@ 0x64
 8009d80:	d901      	bls.n	8009d86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009d82:	2303      	movs	r3, #3
 8009d84:	e1f3      	b.n	800a16e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009d86:	4b51      	ldr	r3, [pc, #324]	@ (8009ecc <HAL_RCC_OscConfig+0x240>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d1f0      	bne.n	8009d74 <HAL_RCC_OscConfig+0xe8>
 8009d92:	e000      	b.n	8009d96 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f003 0302 	and.w	r3, r3, #2
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d063      	beq.n	8009e6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009da2:	4b4a      	ldr	r3, [pc, #296]	@ (8009ecc <HAL_RCC_OscConfig+0x240>)
 8009da4:	689b      	ldr	r3, [r3, #8]
 8009da6:	f003 030c 	and.w	r3, r3, #12
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d00b      	beq.n	8009dc6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009dae:	4b47      	ldr	r3, [pc, #284]	@ (8009ecc <HAL_RCC_OscConfig+0x240>)
 8009db0:	689b      	ldr	r3, [r3, #8]
 8009db2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009db6:	2b08      	cmp	r3, #8
 8009db8:	d11c      	bne.n	8009df4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009dba:	4b44      	ldr	r3, [pc, #272]	@ (8009ecc <HAL_RCC_OscConfig+0x240>)
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d116      	bne.n	8009df4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009dc6:	4b41      	ldr	r3, [pc, #260]	@ (8009ecc <HAL_RCC_OscConfig+0x240>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f003 0302 	and.w	r3, r3, #2
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d005      	beq.n	8009dde <HAL_RCC_OscConfig+0x152>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d001      	beq.n	8009dde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e1c7      	b.n	800a16e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009dde:	4b3b      	ldr	r3, [pc, #236]	@ (8009ecc <HAL_RCC_OscConfig+0x240>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	691b      	ldr	r3, [r3, #16]
 8009dea:	00db      	lsls	r3, r3, #3
 8009dec:	4937      	ldr	r1, [pc, #220]	@ (8009ecc <HAL_RCC_OscConfig+0x240>)
 8009dee:	4313      	orrs	r3, r2
 8009df0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009df2:	e03a      	b.n	8009e6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d020      	beq.n	8009e3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009dfc:	4b34      	ldr	r3, [pc, #208]	@ (8009ed0 <HAL_RCC_OscConfig+0x244>)
 8009dfe:	2201      	movs	r2, #1
 8009e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e02:	f7f9 fe83 	bl	8003b0c <HAL_GetTick>
 8009e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009e08:	e008      	b.n	8009e1c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e0a:	f7f9 fe7f 	bl	8003b0c <HAL_GetTick>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	1ad3      	subs	r3, r2, r3
 8009e14:	2b02      	cmp	r3, #2
 8009e16:	d901      	bls.n	8009e1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	e1a8      	b.n	800a16e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009e1c:	4b2b      	ldr	r3, [pc, #172]	@ (8009ecc <HAL_RCC_OscConfig+0x240>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f003 0302 	and.w	r3, r3, #2
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d0f0      	beq.n	8009e0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e28:	4b28      	ldr	r3, [pc, #160]	@ (8009ecc <HAL_RCC_OscConfig+0x240>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	691b      	ldr	r3, [r3, #16]
 8009e34:	00db      	lsls	r3, r3, #3
 8009e36:	4925      	ldr	r1, [pc, #148]	@ (8009ecc <HAL_RCC_OscConfig+0x240>)
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	600b      	str	r3, [r1, #0]
 8009e3c:	e015      	b.n	8009e6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009e3e:	4b24      	ldr	r3, [pc, #144]	@ (8009ed0 <HAL_RCC_OscConfig+0x244>)
 8009e40:	2200      	movs	r2, #0
 8009e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e44:	f7f9 fe62 	bl	8003b0c <HAL_GetTick>
 8009e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009e4a:	e008      	b.n	8009e5e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e4c:	f7f9 fe5e 	bl	8003b0c <HAL_GetTick>
 8009e50:	4602      	mov	r2, r0
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	1ad3      	subs	r3, r2, r3
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	d901      	bls.n	8009e5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009e5a:	2303      	movs	r3, #3
 8009e5c:	e187      	b.n	800a16e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8009ecc <HAL_RCC_OscConfig+0x240>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f003 0302 	and.w	r3, r3, #2
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d1f0      	bne.n	8009e4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f003 0308 	and.w	r3, r3, #8
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d036      	beq.n	8009ee4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	695b      	ldr	r3, [r3, #20]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d016      	beq.n	8009eac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009e7e:	4b15      	ldr	r3, [pc, #84]	@ (8009ed4 <HAL_RCC_OscConfig+0x248>)
 8009e80:	2201      	movs	r2, #1
 8009e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e84:	f7f9 fe42 	bl	8003b0c <HAL_GetTick>
 8009e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009e8a:	e008      	b.n	8009e9e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009e8c:	f7f9 fe3e 	bl	8003b0c <HAL_GetTick>
 8009e90:	4602      	mov	r2, r0
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	1ad3      	subs	r3, r2, r3
 8009e96:	2b02      	cmp	r3, #2
 8009e98:	d901      	bls.n	8009e9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	e167      	b.n	800a16e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8009ecc <HAL_RCC_OscConfig+0x240>)
 8009ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ea2:	f003 0302 	and.w	r3, r3, #2
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d0f0      	beq.n	8009e8c <HAL_RCC_OscConfig+0x200>
 8009eaa:	e01b      	b.n	8009ee4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009eac:	4b09      	ldr	r3, [pc, #36]	@ (8009ed4 <HAL_RCC_OscConfig+0x248>)
 8009eae:	2200      	movs	r2, #0
 8009eb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009eb2:	f7f9 fe2b 	bl	8003b0c <HAL_GetTick>
 8009eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009eb8:	e00e      	b.n	8009ed8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009eba:	f7f9 fe27 	bl	8003b0c <HAL_GetTick>
 8009ebe:	4602      	mov	r2, r0
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	1ad3      	subs	r3, r2, r3
 8009ec4:	2b02      	cmp	r3, #2
 8009ec6:	d907      	bls.n	8009ed8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009ec8:	2303      	movs	r3, #3
 8009eca:	e150      	b.n	800a16e <HAL_RCC_OscConfig+0x4e2>
 8009ecc:	40023800 	.word	0x40023800
 8009ed0:	42470000 	.word	0x42470000
 8009ed4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009ed8:	4b88      	ldr	r3, [pc, #544]	@ (800a0fc <HAL_RCC_OscConfig+0x470>)
 8009eda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009edc:	f003 0302 	and.w	r3, r3, #2
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d1ea      	bne.n	8009eba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f003 0304 	and.w	r3, r3, #4
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	f000 8097 	beq.w	800a020 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009ef6:	4b81      	ldr	r3, [pc, #516]	@ (800a0fc <HAL_RCC_OscConfig+0x470>)
 8009ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d10f      	bne.n	8009f22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009f02:	2300      	movs	r3, #0
 8009f04:	60bb      	str	r3, [r7, #8]
 8009f06:	4b7d      	ldr	r3, [pc, #500]	@ (800a0fc <HAL_RCC_OscConfig+0x470>)
 8009f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f0a:	4a7c      	ldr	r2, [pc, #496]	@ (800a0fc <HAL_RCC_OscConfig+0x470>)
 8009f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f10:	6413      	str	r3, [r2, #64]	@ 0x40
 8009f12:	4b7a      	ldr	r3, [pc, #488]	@ (800a0fc <HAL_RCC_OscConfig+0x470>)
 8009f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f1a:	60bb      	str	r3, [r7, #8]
 8009f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f22:	4b77      	ldr	r3, [pc, #476]	@ (800a100 <HAL_RCC_OscConfig+0x474>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d118      	bne.n	8009f60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009f2e:	4b74      	ldr	r3, [pc, #464]	@ (800a100 <HAL_RCC_OscConfig+0x474>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a73      	ldr	r2, [pc, #460]	@ (800a100 <HAL_RCC_OscConfig+0x474>)
 8009f34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009f3a:	f7f9 fde7 	bl	8003b0c <HAL_GetTick>
 8009f3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f40:	e008      	b.n	8009f54 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f42:	f7f9 fde3 	bl	8003b0c <HAL_GetTick>
 8009f46:	4602      	mov	r2, r0
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	1ad3      	subs	r3, r2, r3
 8009f4c:	2b02      	cmp	r3, #2
 8009f4e:	d901      	bls.n	8009f54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009f50:	2303      	movs	r3, #3
 8009f52:	e10c      	b.n	800a16e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f54:	4b6a      	ldr	r3, [pc, #424]	@ (800a100 <HAL_RCC_OscConfig+0x474>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d0f0      	beq.n	8009f42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	689b      	ldr	r3, [r3, #8]
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d106      	bne.n	8009f76 <HAL_RCC_OscConfig+0x2ea>
 8009f68:	4b64      	ldr	r3, [pc, #400]	@ (800a0fc <HAL_RCC_OscConfig+0x470>)
 8009f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f6c:	4a63      	ldr	r2, [pc, #396]	@ (800a0fc <HAL_RCC_OscConfig+0x470>)
 8009f6e:	f043 0301 	orr.w	r3, r3, #1
 8009f72:	6713      	str	r3, [r2, #112]	@ 0x70
 8009f74:	e01c      	b.n	8009fb0 <HAL_RCC_OscConfig+0x324>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	689b      	ldr	r3, [r3, #8]
 8009f7a:	2b05      	cmp	r3, #5
 8009f7c:	d10c      	bne.n	8009f98 <HAL_RCC_OscConfig+0x30c>
 8009f7e:	4b5f      	ldr	r3, [pc, #380]	@ (800a0fc <HAL_RCC_OscConfig+0x470>)
 8009f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f82:	4a5e      	ldr	r2, [pc, #376]	@ (800a0fc <HAL_RCC_OscConfig+0x470>)
 8009f84:	f043 0304 	orr.w	r3, r3, #4
 8009f88:	6713      	str	r3, [r2, #112]	@ 0x70
 8009f8a:	4b5c      	ldr	r3, [pc, #368]	@ (800a0fc <HAL_RCC_OscConfig+0x470>)
 8009f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f8e:	4a5b      	ldr	r2, [pc, #364]	@ (800a0fc <HAL_RCC_OscConfig+0x470>)
 8009f90:	f043 0301 	orr.w	r3, r3, #1
 8009f94:	6713      	str	r3, [r2, #112]	@ 0x70
 8009f96:	e00b      	b.n	8009fb0 <HAL_RCC_OscConfig+0x324>
 8009f98:	4b58      	ldr	r3, [pc, #352]	@ (800a0fc <HAL_RCC_OscConfig+0x470>)
 8009f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f9c:	4a57      	ldr	r2, [pc, #348]	@ (800a0fc <HAL_RCC_OscConfig+0x470>)
 8009f9e:	f023 0301 	bic.w	r3, r3, #1
 8009fa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8009fa4:	4b55      	ldr	r3, [pc, #340]	@ (800a0fc <HAL_RCC_OscConfig+0x470>)
 8009fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fa8:	4a54      	ldr	r2, [pc, #336]	@ (800a0fc <HAL_RCC_OscConfig+0x470>)
 8009faa:	f023 0304 	bic.w	r3, r3, #4
 8009fae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d015      	beq.n	8009fe4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fb8:	f7f9 fda8 	bl	8003b0c <HAL_GetTick>
 8009fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009fbe:	e00a      	b.n	8009fd6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009fc0:	f7f9 fda4 	bl	8003b0c <HAL_GetTick>
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	1ad3      	subs	r3, r2, r3
 8009fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d901      	bls.n	8009fd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009fd2:	2303      	movs	r3, #3
 8009fd4:	e0cb      	b.n	800a16e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009fd6:	4b49      	ldr	r3, [pc, #292]	@ (800a0fc <HAL_RCC_OscConfig+0x470>)
 8009fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fda:	f003 0302 	and.w	r3, r3, #2
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d0ee      	beq.n	8009fc0 <HAL_RCC_OscConfig+0x334>
 8009fe2:	e014      	b.n	800a00e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009fe4:	f7f9 fd92 	bl	8003b0c <HAL_GetTick>
 8009fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009fea:	e00a      	b.n	800a002 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009fec:	f7f9 fd8e 	bl	8003b0c <HAL_GetTick>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	1ad3      	subs	r3, r2, r3
 8009ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d901      	bls.n	800a002 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009ffe:	2303      	movs	r3, #3
 800a000:	e0b5      	b.n	800a16e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a002:	4b3e      	ldr	r3, [pc, #248]	@ (800a0fc <HAL_RCC_OscConfig+0x470>)
 800a004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a006:	f003 0302 	and.w	r3, r3, #2
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d1ee      	bne.n	8009fec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a00e:	7dfb      	ldrb	r3, [r7, #23]
 800a010:	2b01      	cmp	r3, #1
 800a012:	d105      	bne.n	800a020 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a014:	4b39      	ldr	r3, [pc, #228]	@ (800a0fc <HAL_RCC_OscConfig+0x470>)
 800a016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a018:	4a38      	ldr	r2, [pc, #224]	@ (800a0fc <HAL_RCC_OscConfig+0x470>)
 800a01a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a01e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	699b      	ldr	r3, [r3, #24]
 800a024:	2b00      	cmp	r3, #0
 800a026:	f000 80a1 	beq.w	800a16c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a02a:	4b34      	ldr	r3, [pc, #208]	@ (800a0fc <HAL_RCC_OscConfig+0x470>)
 800a02c:	689b      	ldr	r3, [r3, #8]
 800a02e:	f003 030c 	and.w	r3, r3, #12
 800a032:	2b08      	cmp	r3, #8
 800a034:	d05c      	beq.n	800a0f0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	699b      	ldr	r3, [r3, #24]
 800a03a:	2b02      	cmp	r3, #2
 800a03c:	d141      	bne.n	800a0c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a03e:	4b31      	ldr	r3, [pc, #196]	@ (800a104 <HAL_RCC_OscConfig+0x478>)
 800a040:	2200      	movs	r2, #0
 800a042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a044:	f7f9 fd62 	bl	8003b0c <HAL_GetTick>
 800a048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a04a:	e008      	b.n	800a05e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a04c:	f7f9 fd5e 	bl	8003b0c <HAL_GetTick>
 800a050:	4602      	mov	r2, r0
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	1ad3      	subs	r3, r2, r3
 800a056:	2b02      	cmp	r3, #2
 800a058:	d901      	bls.n	800a05e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a05a:	2303      	movs	r3, #3
 800a05c:	e087      	b.n	800a16e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a05e:	4b27      	ldr	r3, [pc, #156]	@ (800a0fc <HAL_RCC_OscConfig+0x470>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a066:	2b00      	cmp	r3, #0
 800a068:	d1f0      	bne.n	800a04c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	69da      	ldr	r2, [r3, #28]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6a1b      	ldr	r3, [r3, #32]
 800a072:	431a      	orrs	r2, r3
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a078:	019b      	lsls	r3, r3, #6
 800a07a:	431a      	orrs	r2, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a080:	085b      	lsrs	r3, r3, #1
 800a082:	3b01      	subs	r3, #1
 800a084:	041b      	lsls	r3, r3, #16
 800a086:	431a      	orrs	r2, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a08c:	061b      	lsls	r3, r3, #24
 800a08e:	491b      	ldr	r1, [pc, #108]	@ (800a0fc <HAL_RCC_OscConfig+0x470>)
 800a090:	4313      	orrs	r3, r2
 800a092:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a094:	4b1b      	ldr	r3, [pc, #108]	@ (800a104 <HAL_RCC_OscConfig+0x478>)
 800a096:	2201      	movs	r2, #1
 800a098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a09a:	f7f9 fd37 	bl	8003b0c <HAL_GetTick>
 800a09e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a0a0:	e008      	b.n	800a0b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0a2:	f7f9 fd33 	bl	8003b0c <HAL_GetTick>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	1ad3      	subs	r3, r2, r3
 800a0ac:	2b02      	cmp	r3, #2
 800a0ae:	d901      	bls.n	800a0b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a0b0:	2303      	movs	r3, #3
 800a0b2:	e05c      	b.n	800a16e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a0b4:	4b11      	ldr	r3, [pc, #68]	@ (800a0fc <HAL_RCC_OscConfig+0x470>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d0f0      	beq.n	800a0a2 <HAL_RCC_OscConfig+0x416>
 800a0c0:	e054      	b.n	800a16c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0c2:	4b10      	ldr	r3, [pc, #64]	@ (800a104 <HAL_RCC_OscConfig+0x478>)
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a0c8:	f7f9 fd20 	bl	8003b0c <HAL_GetTick>
 800a0cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a0ce:	e008      	b.n	800a0e2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0d0:	f7f9 fd1c 	bl	8003b0c <HAL_GetTick>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	1ad3      	subs	r3, r2, r3
 800a0da:	2b02      	cmp	r3, #2
 800a0dc:	d901      	bls.n	800a0e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a0de:	2303      	movs	r3, #3
 800a0e0:	e045      	b.n	800a16e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a0e2:	4b06      	ldr	r3, [pc, #24]	@ (800a0fc <HAL_RCC_OscConfig+0x470>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d1f0      	bne.n	800a0d0 <HAL_RCC_OscConfig+0x444>
 800a0ee:	e03d      	b.n	800a16c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	699b      	ldr	r3, [r3, #24]
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d107      	bne.n	800a108 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e038      	b.n	800a16e <HAL_RCC_OscConfig+0x4e2>
 800a0fc:	40023800 	.word	0x40023800
 800a100:	40007000 	.word	0x40007000
 800a104:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a108:	4b1b      	ldr	r3, [pc, #108]	@ (800a178 <HAL_RCC_OscConfig+0x4ec>)
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	699b      	ldr	r3, [r3, #24]
 800a112:	2b01      	cmp	r3, #1
 800a114:	d028      	beq.n	800a168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a120:	429a      	cmp	r2, r3
 800a122:	d121      	bne.n	800a168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a12e:	429a      	cmp	r2, r3
 800a130:	d11a      	bne.n	800a168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a132:	68fa      	ldr	r2, [r7, #12]
 800a134:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a138:	4013      	ands	r3, r2
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a13e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a140:	4293      	cmp	r3, r2
 800a142:	d111      	bne.n	800a168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a14e:	085b      	lsrs	r3, r3, #1
 800a150:	3b01      	subs	r3, #1
 800a152:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a154:	429a      	cmp	r2, r3
 800a156:	d107      	bne.n	800a168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a162:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a164:	429a      	cmp	r2, r3
 800a166:	d001      	beq.n	800a16c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800a168:	2301      	movs	r3, #1
 800a16a:	e000      	b.n	800a16e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a16c:	2300      	movs	r3, #0
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3718      	adds	r7, #24
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop
 800a178:	40023800 	.word	0x40023800

0800a17c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d101      	bne.n	800a190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a18c:	2301      	movs	r3, #1
 800a18e:	e0cc      	b.n	800a32a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a190:	4b68      	ldr	r3, [pc, #416]	@ (800a334 <HAL_RCC_ClockConfig+0x1b8>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f003 0307 	and.w	r3, r3, #7
 800a198:	683a      	ldr	r2, [r7, #0]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d90c      	bls.n	800a1b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a19e:	4b65      	ldr	r3, [pc, #404]	@ (800a334 <HAL_RCC_ClockConfig+0x1b8>)
 800a1a0:	683a      	ldr	r2, [r7, #0]
 800a1a2:	b2d2      	uxtb	r2, r2
 800a1a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1a6:	4b63      	ldr	r3, [pc, #396]	@ (800a334 <HAL_RCC_ClockConfig+0x1b8>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f003 0307 	and.w	r3, r3, #7
 800a1ae:	683a      	ldr	r2, [r7, #0]
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d001      	beq.n	800a1b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	e0b8      	b.n	800a32a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f003 0302 	and.w	r3, r3, #2
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d020      	beq.n	800a206 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f003 0304 	and.w	r3, r3, #4
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d005      	beq.n	800a1dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a1d0:	4b59      	ldr	r3, [pc, #356]	@ (800a338 <HAL_RCC_ClockConfig+0x1bc>)
 800a1d2:	689b      	ldr	r3, [r3, #8]
 800a1d4:	4a58      	ldr	r2, [pc, #352]	@ (800a338 <HAL_RCC_ClockConfig+0x1bc>)
 800a1d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a1da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f003 0308 	and.w	r3, r3, #8
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d005      	beq.n	800a1f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a1e8:	4b53      	ldr	r3, [pc, #332]	@ (800a338 <HAL_RCC_ClockConfig+0x1bc>)
 800a1ea:	689b      	ldr	r3, [r3, #8]
 800a1ec:	4a52      	ldr	r2, [pc, #328]	@ (800a338 <HAL_RCC_ClockConfig+0x1bc>)
 800a1ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a1f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a1f4:	4b50      	ldr	r3, [pc, #320]	@ (800a338 <HAL_RCC_ClockConfig+0x1bc>)
 800a1f6:	689b      	ldr	r3, [r3, #8]
 800a1f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	689b      	ldr	r3, [r3, #8]
 800a200:	494d      	ldr	r1, [pc, #308]	@ (800a338 <HAL_RCC_ClockConfig+0x1bc>)
 800a202:	4313      	orrs	r3, r2
 800a204:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f003 0301 	and.w	r3, r3, #1
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d044      	beq.n	800a29c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	2b01      	cmp	r3, #1
 800a218:	d107      	bne.n	800a22a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a21a:	4b47      	ldr	r3, [pc, #284]	@ (800a338 <HAL_RCC_ClockConfig+0x1bc>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a222:	2b00      	cmp	r3, #0
 800a224:	d119      	bne.n	800a25a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a226:	2301      	movs	r3, #1
 800a228:	e07f      	b.n	800a32a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	2b02      	cmp	r3, #2
 800a230:	d003      	beq.n	800a23a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a236:	2b03      	cmp	r3, #3
 800a238:	d107      	bne.n	800a24a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a23a:	4b3f      	ldr	r3, [pc, #252]	@ (800a338 <HAL_RCC_ClockConfig+0x1bc>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a242:	2b00      	cmp	r3, #0
 800a244:	d109      	bne.n	800a25a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a246:	2301      	movs	r3, #1
 800a248:	e06f      	b.n	800a32a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a24a:	4b3b      	ldr	r3, [pc, #236]	@ (800a338 <HAL_RCC_ClockConfig+0x1bc>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f003 0302 	and.w	r3, r3, #2
 800a252:	2b00      	cmp	r3, #0
 800a254:	d101      	bne.n	800a25a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a256:	2301      	movs	r3, #1
 800a258:	e067      	b.n	800a32a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a25a:	4b37      	ldr	r3, [pc, #220]	@ (800a338 <HAL_RCC_ClockConfig+0x1bc>)
 800a25c:	689b      	ldr	r3, [r3, #8]
 800a25e:	f023 0203 	bic.w	r2, r3, #3
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	4934      	ldr	r1, [pc, #208]	@ (800a338 <HAL_RCC_ClockConfig+0x1bc>)
 800a268:	4313      	orrs	r3, r2
 800a26a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a26c:	f7f9 fc4e 	bl	8003b0c <HAL_GetTick>
 800a270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a272:	e00a      	b.n	800a28a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a274:	f7f9 fc4a 	bl	8003b0c <HAL_GetTick>
 800a278:	4602      	mov	r2, r0
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	1ad3      	subs	r3, r2, r3
 800a27e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a282:	4293      	cmp	r3, r2
 800a284:	d901      	bls.n	800a28a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a286:	2303      	movs	r3, #3
 800a288:	e04f      	b.n	800a32a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a28a:	4b2b      	ldr	r3, [pc, #172]	@ (800a338 <HAL_RCC_ClockConfig+0x1bc>)
 800a28c:	689b      	ldr	r3, [r3, #8]
 800a28e:	f003 020c 	and.w	r2, r3, #12
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	009b      	lsls	r3, r3, #2
 800a298:	429a      	cmp	r2, r3
 800a29a:	d1eb      	bne.n	800a274 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a29c:	4b25      	ldr	r3, [pc, #148]	@ (800a334 <HAL_RCC_ClockConfig+0x1b8>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f003 0307 	and.w	r3, r3, #7
 800a2a4:	683a      	ldr	r2, [r7, #0]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d20c      	bcs.n	800a2c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2aa:	4b22      	ldr	r3, [pc, #136]	@ (800a334 <HAL_RCC_ClockConfig+0x1b8>)
 800a2ac:	683a      	ldr	r2, [r7, #0]
 800a2ae:	b2d2      	uxtb	r2, r2
 800a2b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2b2:	4b20      	ldr	r3, [pc, #128]	@ (800a334 <HAL_RCC_ClockConfig+0x1b8>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f003 0307 	and.w	r3, r3, #7
 800a2ba:	683a      	ldr	r2, [r7, #0]
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d001      	beq.n	800a2c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	e032      	b.n	800a32a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f003 0304 	and.w	r3, r3, #4
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d008      	beq.n	800a2e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a2d0:	4b19      	ldr	r3, [pc, #100]	@ (800a338 <HAL_RCC_ClockConfig+0x1bc>)
 800a2d2:	689b      	ldr	r3, [r3, #8]
 800a2d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	68db      	ldr	r3, [r3, #12]
 800a2dc:	4916      	ldr	r1, [pc, #88]	@ (800a338 <HAL_RCC_ClockConfig+0x1bc>)
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f003 0308 	and.w	r3, r3, #8
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d009      	beq.n	800a302 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a2ee:	4b12      	ldr	r3, [pc, #72]	@ (800a338 <HAL_RCC_ClockConfig+0x1bc>)
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	691b      	ldr	r3, [r3, #16]
 800a2fa:	00db      	lsls	r3, r3, #3
 800a2fc:	490e      	ldr	r1, [pc, #56]	@ (800a338 <HAL_RCC_ClockConfig+0x1bc>)
 800a2fe:	4313      	orrs	r3, r2
 800a300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a302:	f000 f821 	bl	800a348 <HAL_RCC_GetSysClockFreq>
 800a306:	4602      	mov	r2, r0
 800a308:	4b0b      	ldr	r3, [pc, #44]	@ (800a338 <HAL_RCC_ClockConfig+0x1bc>)
 800a30a:	689b      	ldr	r3, [r3, #8]
 800a30c:	091b      	lsrs	r3, r3, #4
 800a30e:	f003 030f 	and.w	r3, r3, #15
 800a312:	490a      	ldr	r1, [pc, #40]	@ (800a33c <HAL_RCC_ClockConfig+0x1c0>)
 800a314:	5ccb      	ldrb	r3, [r1, r3]
 800a316:	fa22 f303 	lsr.w	r3, r2, r3
 800a31a:	4a09      	ldr	r2, [pc, #36]	@ (800a340 <HAL_RCC_ClockConfig+0x1c4>)
 800a31c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800a31e:	4b09      	ldr	r3, [pc, #36]	@ (800a344 <HAL_RCC_ClockConfig+0x1c8>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	4618      	mov	r0, r3
 800a324:	f7f9 fbae 	bl	8003a84 <HAL_InitTick>

  return HAL_OK;
 800a328:	2300      	movs	r3, #0
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3710      	adds	r7, #16
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
 800a332:	bf00      	nop
 800a334:	40023c00 	.word	0x40023c00
 800a338:	40023800 	.word	0x40023800
 800a33c:	08014d34 	.word	0x08014d34
 800a340:	20000008 	.word	0x20000008
 800a344:	2000000c 	.word	0x2000000c

0800a348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a34c:	b090      	sub	sp, #64	@ 0x40
 800a34e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a350:	2300      	movs	r3, #0
 800a352:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800a354:	2300      	movs	r3, #0
 800a356:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800a358:	2300      	movs	r3, #0
 800a35a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800a35c:	2300      	movs	r3, #0
 800a35e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a360:	4b59      	ldr	r3, [pc, #356]	@ (800a4c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	f003 030c 	and.w	r3, r3, #12
 800a368:	2b08      	cmp	r3, #8
 800a36a:	d00d      	beq.n	800a388 <HAL_RCC_GetSysClockFreq+0x40>
 800a36c:	2b08      	cmp	r3, #8
 800a36e:	f200 80a1 	bhi.w	800a4b4 <HAL_RCC_GetSysClockFreq+0x16c>
 800a372:	2b00      	cmp	r3, #0
 800a374:	d002      	beq.n	800a37c <HAL_RCC_GetSysClockFreq+0x34>
 800a376:	2b04      	cmp	r3, #4
 800a378:	d003      	beq.n	800a382 <HAL_RCC_GetSysClockFreq+0x3a>
 800a37a:	e09b      	b.n	800a4b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a37c:	4b53      	ldr	r3, [pc, #332]	@ (800a4cc <HAL_RCC_GetSysClockFreq+0x184>)
 800a37e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a380:	e09b      	b.n	800a4ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a382:	4b53      	ldr	r3, [pc, #332]	@ (800a4d0 <HAL_RCC_GetSysClockFreq+0x188>)
 800a384:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a386:	e098      	b.n	800a4ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a388:	4b4f      	ldr	r3, [pc, #316]	@ (800a4c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a390:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a392:	4b4d      	ldr	r3, [pc, #308]	@ (800a4c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d028      	beq.n	800a3f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a39e:	4b4a      	ldr	r3, [pc, #296]	@ (800a4c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	099b      	lsrs	r3, r3, #6
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	623b      	str	r3, [r7, #32]
 800a3a8:	627a      	str	r2, [r7, #36]	@ 0x24
 800a3aa:	6a3b      	ldr	r3, [r7, #32]
 800a3ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	4b47      	ldr	r3, [pc, #284]	@ (800a4d0 <HAL_RCC_GetSysClockFreq+0x188>)
 800a3b4:	fb03 f201 	mul.w	r2, r3, r1
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	fb00 f303 	mul.w	r3, r0, r3
 800a3be:	4413      	add	r3, r2
 800a3c0:	4a43      	ldr	r2, [pc, #268]	@ (800a4d0 <HAL_RCC_GetSysClockFreq+0x188>)
 800a3c2:	fba0 1202 	umull	r1, r2, r0, r2
 800a3c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a3c8:	460a      	mov	r2, r1
 800a3ca:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a3cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3ce:	4413      	add	r3, r2
 800a3d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a3d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	61bb      	str	r3, [r7, #24]
 800a3d8:	61fa      	str	r2, [r7, #28]
 800a3da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a3de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a3e2:	f7f6 fc59 	bl	8000c98 <__aeabi_uldivmod>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	4613      	mov	r3, r2
 800a3ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3ee:	e053      	b.n	800a498 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a3f0:	4b35      	ldr	r3, [pc, #212]	@ (800a4c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	099b      	lsrs	r3, r3, #6
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	613b      	str	r3, [r7, #16]
 800a3fa:	617a      	str	r2, [r7, #20]
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a402:	f04f 0b00 	mov.w	fp, #0
 800a406:	4652      	mov	r2, sl
 800a408:	465b      	mov	r3, fp
 800a40a:	f04f 0000 	mov.w	r0, #0
 800a40e:	f04f 0100 	mov.w	r1, #0
 800a412:	0159      	lsls	r1, r3, #5
 800a414:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a418:	0150      	lsls	r0, r2, #5
 800a41a:	4602      	mov	r2, r0
 800a41c:	460b      	mov	r3, r1
 800a41e:	ebb2 080a 	subs.w	r8, r2, sl
 800a422:	eb63 090b 	sbc.w	r9, r3, fp
 800a426:	f04f 0200 	mov.w	r2, #0
 800a42a:	f04f 0300 	mov.w	r3, #0
 800a42e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a432:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a436:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a43a:	ebb2 0408 	subs.w	r4, r2, r8
 800a43e:	eb63 0509 	sbc.w	r5, r3, r9
 800a442:	f04f 0200 	mov.w	r2, #0
 800a446:	f04f 0300 	mov.w	r3, #0
 800a44a:	00eb      	lsls	r3, r5, #3
 800a44c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a450:	00e2      	lsls	r2, r4, #3
 800a452:	4614      	mov	r4, r2
 800a454:	461d      	mov	r5, r3
 800a456:	eb14 030a 	adds.w	r3, r4, sl
 800a45a:	603b      	str	r3, [r7, #0]
 800a45c:	eb45 030b 	adc.w	r3, r5, fp
 800a460:	607b      	str	r3, [r7, #4]
 800a462:	f04f 0200 	mov.w	r2, #0
 800a466:	f04f 0300 	mov.w	r3, #0
 800a46a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a46e:	4629      	mov	r1, r5
 800a470:	028b      	lsls	r3, r1, #10
 800a472:	4621      	mov	r1, r4
 800a474:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a478:	4621      	mov	r1, r4
 800a47a:	028a      	lsls	r2, r1, #10
 800a47c:	4610      	mov	r0, r2
 800a47e:	4619      	mov	r1, r3
 800a480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a482:	2200      	movs	r2, #0
 800a484:	60bb      	str	r3, [r7, #8]
 800a486:	60fa      	str	r2, [r7, #12]
 800a488:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a48c:	f7f6 fc04 	bl	8000c98 <__aeabi_uldivmod>
 800a490:	4602      	mov	r2, r0
 800a492:	460b      	mov	r3, r1
 800a494:	4613      	mov	r3, r2
 800a496:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800a498:	4b0b      	ldr	r3, [pc, #44]	@ (800a4c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	0c1b      	lsrs	r3, r3, #16
 800a49e:	f003 0303 	and.w	r3, r3, #3
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	005b      	lsls	r3, r3, #1
 800a4a6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800a4a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a4b2:	e002      	b.n	800a4ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a4b4:	4b05      	ldr	r3, [pc, #20]	@ (800a4cc <HAL_RCC_GetSysClockFreq+0x184>)
 800a4b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a4b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3740      	adds	r7, #64	@ 0x40
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a4c6:	bf00      	nop
 800a4c8:	40023800 	.word	0x40023800
 800a4cc:	00f42400 	.word	0x00f42400
 800a4d0:	017d7840 	.word	0x017d7840

0800a4d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a4d8:	4b03      	ldr	r3, [pc, #12]	@ (800a4e8 <HAL_RCC_GetHCLKFreq+0x14>)
 800a4da:	681b      	ldr	r3, [r3, #0]
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr
 800a4e6:	bf00      	nop
 800a4e8:	20000008 	.word	0x20000008

0800a4ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a4f0:	f7ff fff0 	bl	800a4d4 <HAL_RCC_GetHCLKFreq>
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	4b05      	ldr	r3, [pc, #20]	@ (800a50c <HAL_RCC_GetPCLK1Freq+0x20>)
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	0a9b      	lsrs	r3, r3, #10
 800a4fc:	f003 0307 	and.w	r3, r3, #7
 800a500:	4903      	ldr	r1, [pc, #12]	@ (800a510 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a502:	5ccb      	ldrb	r3, [r1, r3]
 800a504:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a508:	4618      	mov	r0, r3
 800a50a:	bd80      	pop	{r7, pc}
 800a50c:	40023800 	.word	0x40023800
 800a510:	08014d44 	.word	0x08014d44

0800a514 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d101      	bne.n	800a526 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a522:	2301      	movs	r3, #1
 800a524:	e041      	b.n	800a5aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d106      	bne.n	800a540 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2200      	movs	r2, #0
 800a536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f7f9 f81c 	bl	8003578 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2202      	movs	r2, #2
 800a544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	3304      	adds	r3, #4
 800a550:	4619      	mov	r1, r3
 800a552:	4610      	mov	r0, r2
 800a554:	f000 fc3c 	bl	800add0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2201      	movs	r2, #1
 800a55c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2201      	movs	r2, #1
 800a56c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2201      	movs	r2, #1
 800a57c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2201      	movs	r2, #1
 800a584:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2201      	movs	r2, #1
 800a594:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2201      	movs	r2, #1
 800a59c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a5a8:	2300      	movs	r3, #0
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3708      	adds	r7, #8
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
	...

0800a5b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b085      	sub	sp, #20
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d001      	beq.n	800a5cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	e044      	b.n	800a656 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2202      	movs	r2, #2
 800a5d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	68da      	ldr	r2, [r3, #12]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f042 0201 	orr.w	r2, r2, #1
 800a5e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a1e      	ldr	r2, [pc, #120]	@ (800a664 <HAL_TIM_Base_Start_IT+0xb0>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d018      	beq.n	800a620 <HAL_TIM_Base_Start_IT+0x6c>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5f6:	d013      	beq.n	800a620 <HAL_TIM_Base_Start_IT+0x6c>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a1a      	ldr	r2, [pc, #104]	@ (800a668 <HAL_TIM_Base_Start_IT+0xb4>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d00e      	beq.n	800a620 <HAL_TIM_Base_Start_IT+0x6c>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4a19      	ldr	r2, [pc, #100]	@ (800a66c <HAL_TIM_Base_Start_IT+0xb8>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d009      	beq.n	800a620 <HAL_TIM_Base_Start_IT+0x6c>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a17      	ldr	r2, [pc, #92]	@ (800a670 <HAL_TIM_Base_Start_IT+0xbc>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d004      	beq.n	800a620 <HAL_TIM_Base_Start_IT+0x6c>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a16      	ldr	r2, [pc, #88]	@ (800a674 <HAL_TIM_Base_Start_IT+0xc0>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d111      	bne.n	800a644 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	689b      	ldr	r3, [r3, #8]
 800a626:	f003 0307 	and.w	r3, r3, #7
 800a62a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2b06      	cmp	r3, #6
 800a630:	d010      	beq.n	800a654 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f042 0201 	orr.w	r2, r2, #1
 800a640:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a642:	e007      	b.n	800a654 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f042 0201 	orr.w	r2, r2, #1
 800a652:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a654:	2300      	movs	r3, #0
}
 800a656:	4618      	mov	r0, r3
 800a658:	3714      	adds	r7, #20
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr
 800a662:	bf00      	nop
 800a664:	40010000 	.word	0x40010000
 800a668:	40000400 	.word	0x40000400
 800a66c:	40000800 	.word	0x40000800
 800a670:	40000c00 	.word	0x40000c00
 800a674:	40014000 	.word	0x40014000

0800a678 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d101      	bne.n	800a68a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a686:	2301      	movs	r3, #1
 800a688:	e041      	b.n	800a70e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a690:	b2db      	uxtb	r3, r3
 800a692:	2b00      	cmp	r3, #0
 800a694:	d106      	bne.n	800a6a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2200      	movs	r2, #0
 800a69a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 f839 	bl	800a716 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2202      	movs	r2, #2
 800a6a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681a      	ldr	r2, [r3, #0]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	3304      	adds	r3, #4
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	4610      	mov	r0, r2
 800a6b8:	f000 fb8a 	bl	800add0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2201      	movs	r2, #1
 800a6c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2201      	movs	r2, #1
 800a700:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2201      	movs	r2, #1
 800a708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a70c:	2300      	movs	r3, #0
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3708      	adds	r7, #8
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}

0800a716 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a716:	b480      	push	{r7}
 800a718:	b083      	sub	sp, #12
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a71e:	bf00      	nop
 800a720:	370c      	adds	r7, #12
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr
	...

0800a72c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d109      	bne.n	800a750 <HAL_TIM_PWM_Start+0x24>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a742:	b2db      	uxtb	r3, r3
 800a744:	2b01      	cmp	r3, #1
 800a746:	bf14      	ite	ne
 800a748:	2301      	movne	r3, #1
 800a74a:	2300      	moveq	r3, #0
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	e022      	b.n	800a796 <HAL_TIM_PWM_Start+0x6a>
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	2b04      	cmp	r3, #4
 800a754:	d109      	bne.n	800a76a <HAL_TIM_PWM_Start+0x3e>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	2b01      	cmp	r3, #1
 800a760:	bf14      	ite	ne
 800a762:	2301      	movne	r3, #1
 800a764:	2300      	moveq	r3, #0
 800a766:	b2db      	uxtb	r3, r3
 800a768:	e015      	b.n	800a796 <HAL_TIM_PWM_Start+0x6a>
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	2b08      	cmp	r3, #8
 800a76e:	d109      	bne.n	800a784 <HAL_TIM_PWM_Start+0x58>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a776:	b2db      	uxtb	r3, r3
 800a778:	2b01      	cmp	r3, #1
 800a77a:	bf14      	ite	ne
 800a77c:	2301      	movne	r3, #1
 800a77e:	2300      	moveq	r3, #0
 800a780:	b2db      	uxtb	r3, r3
 800a782:	e008      	b.n	800a796 <HAL_TIM_PWM_Start+0x6a>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a78a:	b2db      	uxtb	r3, r3
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	bf14      	ite	ne
 800a790:	2301      	movne	r3, #1
 800a792:	2300      	moveq	r3, #0
 800a794:	b2db      	uxtb	r3, r3
 800a796:	2b00      	cmp	r3, #0
 800a798:	d001      	beq.n	800a79e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a79a:	2301      	movs	r3, #1
 800a79c:	e068      	b.n	800a870 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d104      	bne.n	800a7ae <HAL_TIM_PWM_Start+0x82>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2202      	movs	r2, #2
 800a7a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a7ac:	e013      	b.n	800a7d6 <HAL_TIM_PWM_Start+0xaa>
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	2b04      	cmp	r3, #4
 800a7b2:	d104      	bne.n	800a7be <HAL_TIM_PWM_Start+0x92>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2202      	movs	r2, #2
 800a7b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a7bc:	e00b      	b.n	800a7d6 <HAL_TIM_PWM_Start+0xaa>
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	2b08      	cmp	r3, #8
 800a7c2:	d104      	bne.n	800a7ce <HAL_TIM_PWM_Start+0xa2>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2202      	movs	r2, #2
 800a7c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a7cc:	e003      	b.n	800a7d6 <HAL_TIM_PWM_Start+0xaa>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2202      	movs	r2, #2
 800a7d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	6839      	ldr	r1, [r7, #0]
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f000 fda2 	bl	800b328 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4a23      	ldr	r2, [pc, #140]	@ (800a878 <HAL_TIM_PWM_Start+0x14c>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d107      	bne.n	800a7fe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a7fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4a1d      	ldr	r2, [pc, #116]	@ (800a878 <HAL_TIM_PWM_Start+0x14c>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d018      	beq.n	800a83a <HAL_TIM_PWM_Start+0x10e>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a810:	d013      	beq.n	800a83a <HAL_TIM_PWM_Start+0x10e>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4a19      	ldr	r2, [pc, #100]	@ (800a87c <HAL_TIM_PWM_Start+0x150>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d00e      	beq.n	800a83a <HAL_TIM_PWM_Start+0x10e>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	4a17      	ldr	r2, [pc, #92]	@ (800a880 <HAL_TIM_PWM_Start+0x154>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d009      	beq.n	800a83a <HAL_TIM_PWM_Start+0x10e>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a16      	ldr	r2, [pc, #88]	@ (800a884 <HAL_TIM_PWM_Start+0x158>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d004      	beq.n	800a83a <HAL_TIM_PWM_Start+0x10e>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a14      	ldr	r2, [pc, #80]	@ (800a888 <HAL_TIM_PWM_Start+0x15c>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d111      	bne.n	800a85e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	689b      	ldr	r3, [r3, #8]
 800a840:	f003 0307 	and.w	r3, r3, #7
 800a844:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2b06      	cmp	r3, #6
 800a84a:	d010      	beq.n	800a86e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f042 0201 	orr.w	r2, r2, #1
 800a85a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a85c:	e007      	b.n	800a86e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f042 0201 	orr.w	r2, r2, #1
 800a86c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a86e:	2300      	movs	r3, #0
}
 800a870:	4618      	mov	r0, r3
 800a872:	3710      	adds	r7, #16
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}
 800a878:	40010000 	.word	0x40010000
 800a87c:	40000400 	.word	0x40000400
 800a880:	40000800 	.word	0x40000800
 800a884:	40000c00 	.word	0x40000c00
 800a888:	40014000 	.word	0x40014000

0800a88c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	68db      	ldr	r3, [r3, #12]
 800a89a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	691b      	ldr	r3, [r3, #16]
 800a8a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	f003 0302 	and.w	r3, r3, #2
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d020      	beq.n	800a8f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f003 0302 	and.w	r3, r3, #2
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d01b      	beq.n	800a8f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f06f 0202 	mvn.w	r2, #2
 800a8c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	699b      	ldr	r3, [r3, #24]
 800a8ce:	f003 0303 	and.w	r3, r3, #3
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d003      	beq.n	800a8de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 fa5b 	bl	800ad92 <HAL_TIM_IC_CaptureCallback>
 800a8dc:	e005      	b.n	800a8ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 fa4d 	bl	800ad7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 fa5e 	bl	800ada6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	f003 0304 	and.w	r3, r3, #4
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d020      	beq.n	800a93c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f003 0304 	and.w	r3, r3, #4
 800a900:	2b00      	cmp	r3, #0
 800a902:	d01b      	beq.n	800a93c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f06f 0204 	mvn.w	r2, #4
 800a90c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2202      	movs	r2, #2
 800a912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	699b      	ldr	r3, [r3, #24]
 800a91a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d003      	beq.n	800a92a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 fa35 	bl	800ad92 <HAL_TIM_IC_CaptureCallback>
 800a928:	e005      	b.n	800a936 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 fa27 	bl	800ad7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 fa38 	bl	800ada6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	f003 0308 	and.w	r3, r3, #8
 800a942:	2b00      	cmp	r3, #0
 800a944:	d020      	beq.n	800a988 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f003 0308 	and.w	r3, r3, #8
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d01b      	beq.n	800a988 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f06f 0208 	mvn.w	r2, #8
 800a958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2204      	movs	r2, #4
 800a95e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	69db      	ldr	r3, [r3, #28]
 800a966:	f003 0303 	and.w	r3, r3, #3
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d003      	beq.n	800a976 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 fa0f 	bl	800ad92 <HAL_TIM_IC_CaptureCallback>
 800a974:	e005      	b.n	800a982 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 fa01 	bl	800ad7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 fa12 	bl	800ada6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2200      	movs	r2, #0
 800a986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	f003 0310 	and.w	r3, r3, #16
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d020      	beq.n	800a9d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f003 0310 	and.w	r3, r3, #16
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d01b      	beq.n	800a9d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f06f 0210 	mvn.w	r2, #16
 800a9a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2208      	movs	r2, #8
 800a9aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	69db      	ldr	r3, [r3, #28]
 800a9b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d003      	beq.n	800a9c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f000 f9e9 	bl	800ad92 <HAL_TIM_IC_CaptureCallback>
 800a9c0:	e005      	b.n	800a9ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 f9db 	bl	800ad7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 f9ec 	bl	800ada6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	f003 0301 	and.w	r3, r3, #1
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d00c      	beq.n	800a9f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f003 0301 	and.w	r3, r3, #1
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d007      	beq.n	800a9f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f06f 0201 	mvn.w	r2, #1
 800a9f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f7f6 fe40 	bl	8001678 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d00c      	beq.n	800aa1c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d007      	beq.n	800aa1c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800aa14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 fd24 	bl	800b464 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d00c      	beq.n	800aa40 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d007      	beq.n	800aa40 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800aa38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f000 f9bd 	bl	800adba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	f003 0320 	and.w	r3, r3, #32
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d00c      	beq.n	800aa64 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f003 0320 	and.w	r3, r3, #32
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d007      	beq.n	800aa64 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f06f 0220 	mvn.w	r2, #32
 800aa5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 fcf6 	bl	800b450 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa64:	bf00      	nop
 800aa66:	3710      	adds	r7, #16
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b086      	sub	sp, #24
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	60f8      	str	r0, [r7, #12]
 800aa74:	60b9      	str	r1, [r7, #8]
 800aa76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	d101      	bne.n	800aa8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aa86:	2302      	movs	r3, #2
 800aa88:	e0ae      	b.n	800abe8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2201      	movs	r2, #1
 800aa8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2b0c      	cmp	r3, #12
 800aa96:	f200 809f 	bhi.w	800abd8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800aa9a:	a201      	add	r2, pc, #4	@ (adr r2, 800aaa0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aa9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaa0:	0800aad5 	.word	0x0800aad5
 800aaa4:	0800abd9 	.word	0x0800abd9
 800aaa8:	0800abd9 	.word	0x0800abd9
 800aaac:	0800abd9 	.word	0x0800abd9
 800aab0:	0800ab15 	.word	0x0800ab15
 800aab4:	0800abd9 	.word	0x0800abd9
 800aab8:	0800abd9 	.word	0x0800abd9
 800aabc:	0800abd9 	.word	0x0800abd9
 800aac0:	0800ab57 	.word	0x0800ab57
 800aac4:	0800abd9 	.word	0x0800abd9
 800aac8:	0800abd9 	.word	0x0800abd9
 800aacc:	0800abd9 	.word	0x0800abd9
 800aad0:	0800ab97 	.word	0x0800ab97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	68b9      	ldr	r1, [r7, #8]
 800aada:	4618      	mov	r0, r3
 800aadc:	f000 f9fe 	bl	800aedc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	699a      	ldr	r2, [r3, #24]
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f042 0208 	orr.w	r2, r2, #8
 800aaee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	699a      	ldr	r2, [r3, #24]
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f022 0204 	bic.w	r2, r2, #4
 800aafe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	6999      	ldr	r1, [r3, #24]
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	691a      	ldr	r2, [r3, #16]
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	430a      	orrs	r2, r1
 800ab10:	619a      	str	r2, [r3, #24]
      break;
 800ab12:	e064      	b.n	800abde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	68b9      	ldr	r1, [r7, #8]
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f000 fa44 	bl	800afa8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	699a      	ldr	r2, [r3, #24]
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ab2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	699a      	ldr	r2, [r3, #24]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ab3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	6999      	ldr	r1, [r3, #24]
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	691b      	ldr	r3, [r3, #16]
 800ab4a:	021a      	lsls	r2, r3, #8
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	430a      	orrs	r2, r1
 800ab52:	619a      	str	r2, [r3, #24]
      break;
 800ab54:	e043      	b.n	800abde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	68b9      	ldr	r1, [r7, #8]
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f000 fa8f 	bl	800b080 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	69da      	ldr	r2, [r3, #28]
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f042 0208 	orr.w	r2, r2, #8
 800ab70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	69da      	ldr	r2, [r3, #28]
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f022 0204 	bic.w	r2, r2, #4
 800ab80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	69d9      	ldr	r1, [r3, #28]
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	691a      	ldr	r2, [r3, #16]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	430a      	orrs	r2, r1
 800ab92:	61da      	str	r2, [r3, #28]
      break;
 800ab94:	e023      	b.n	800abde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	68b9      	ldr	r1, [r7, #8]
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f000 fad9 	bl	800b154 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	69da      	ldr	r2, [r3, #28]
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800abb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	69da      	ldr	r2, [r3, #28]
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800abc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	69d9      	ldr	r1, [r3, #28]
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	691b      	ldr	r3, [r3, #16]
 800abcc:	021a      	lsls	r2, r3, #8
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	430a      	orrs	r2, r1
 800abd4:	61da      	str	r2, [r3, #28]
      break;
 800abd6:	e002      	b.n	800abde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800abd8:	2301      	movs	r3, #1
 800abda:	75fb      	strb	r3, [r7, #23]
      break;
 800abdc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2200      	movs	r2, #0
 800abe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800abe6:	7dfb      	ldrb	r3, [r7, #23]
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3718      	adds	r7, #24
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800abfa:	2300      	movs	r3, #0
 800abfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	d101      	bne.n	800ac0c <HAL_TIM_ConfigClockSource+0x1c>
 800ac08:	2302      	movs	r3, #2
 800ac0a:	e0b4      	b.n	800ad76 <HAL_TIM_ConfigClockSource+0x186>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2201      	movs	r2, #1
 800ac10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2202      	movs	r2, #2
 800ac18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	689b      	ldr	r3, [r3, #8]
 800ac22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ac2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ac32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	68ba      	ldr	r2, [r7, #8]
 800ac3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac44:	d03e      	beq.n	800acc4 <HAL_TIM_ConfigClockSource+0xd4>
 800ac46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac4a:	f200 8087 	bhi.w	800ad5c <HAL_TIM_ConfigClockSource+0x16c>
 800ac4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac52:	f000 8086 	beq.w	800ad62 <HAL_TIM_ConfigClockSource+0x172>
 800ac56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac5a:	d87f      	bhi.n	800ad5c <HAL_TIM_ConfigClockSource+0x16c>
 800ac5c:	2b70      	cmp	r3, #112	@ 0x70
 800ac5e:	d01a      	beq.n	800ac96 <HAL_TIM_ConfigClockSource+0xa6>
 800ac60:	2b70      	cmp	r3, #112	@ 0x70
 800ac62:	d87b      	bhi.n	800ad5c <HAL_TIM_ConfigClockSource+0x16c>
 800ac64:	2b60      	cmp	r3, #96	@ 0x60
 800ac66:	d050      	beq.n	800ad0a <HAL_TIM_ConfigClockSource+0x11a>
 800ac68:	2b60      	cmp	r3, #96	@ 0x60
 800ac6a:	d877      	bhi.n	800ad5c <HAL_TIM_ConfigClockSource+0x16c>
 800ac6c:	2b50      	cmp	r3, #80	@ 0x50
 800ac6e:	d03c      	beq.n	800acea <HAL_TIM_ConfigClockSource+0xfa>
 800ac70:	2b50      	cmp	r3, #80	@ 0x50
 800ac72:	d873      	bhi.n	800ad5c <HAL_TIM_ConfigClockSource+0x16c>
 800ac74:	2b40      	cmp	r3, #64	@ 0x40
 800ac76:	d058      	beq.n	800ad2a <HAL_TIM_ConfigClockSource+0x13a>
 800ac78:	2b40      	cmp	r3, #64	@ 0x40
 800ac7a:	d86f      	bhi.n	800ad5c <HAL_TIM_ConfigClockSource+0x16c>
 800ac7c:	2b30      	cmp	r3, #48	@ 0x30
 800ac7e:	d064      	beq.n	800ad4a <HAL_TIM_ConfigClockSource+0x15a>
 800ac80:	2b30      	cmp	r3, #48	@ 0x30
 800ac82:	d86b      	bhi.n	800ad5c <HAL_TIM_ConfigClockSource+0x16c>
 800ac84:	2b20      	cmp	r3, #32
 800ac86:	d060      	beq.n	800ad4a <HAL_TIM_ConfigClockSource+0x15a>
 800ac88:	2b20      	cmp	r3, #32
 800ac8a:	d867      	bhi.n	800ad5c <HAL_TIM_ConfigClockSource+0x16c>
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d05c      	beq.n	800ad4a <HAL_TIM_ConfigClockSource+0x15a>
 800ac90:	2b10      	cmp	r3, #16
 800ac92:	d05a      	beq.n	800ad4a <HAL_TIM_ConfigClockSource+0x15a>
 800ac94:	e062      	b.n	800ad5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aca6:	f000 fb1f 	bl	800b2e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	689b      	ldr	r3, [r3, #8]
 800acb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800acb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	68ba      	ldr	r2, [r7, #8]
 800acc0:	609a      	str	r2, [r3, #8]
      break;
 800acc2:	e04f      	b.n	800ad64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800acd4:	f000 fb08 	bl	800b2e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	689a      	ldr	r2, [r3, #8]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ace6:	609a      	str	r2, [r3, #8]
      break;
 800ace8:	e03c      	b.n	800ad64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800acf6:	461a      	mov	r2, r3
 800acf8:	f000 fa7c 	bl	800b1f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2150      	movs	r1, #80	@ 0x50
 800ad02:	4618      	mov	r0, r3
 800ad04:	f000 fad5 	bl	800b2b2 <TIM_ITRx_SetConfig>
      break;
 800ad08:	e02c      	b.n	800ad64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad16:	461a      	mov	r2, r3
 800ad18:	f000 fa9b 	bl	800b252 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	2160      	movs	r1, #96	@ 0x60
 800ad22:	4618      	mov	r0, r3
 800ad24:	f000 fac5 	bl	800b2b2 <TIM_ITRx_SetConfig>
      break;
 800ad28:	e01c      	b.n	800ad64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad36:	461a      	mov	r2, r3
 800ad38:	f000 fa5c 	bl	800b1f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	2140      	movs	r1, #64	@ 0x40
 800ad42:	4618      	mov	r0, r3
 800ad44:	f000 fab5 	bl	800b2b2 <TIM_ITRx_SetConfig>
      break;
 800ad48:	e00c      	b.n	800ad64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681a      	ldr	r2, [r3, #0]
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4619      	mov	r1, r3
 800ad54:	4610      	mov	r0, r2
 800ad56:	f000 faac 	bl	800b2b2 <TIM_ITRx_SetConfig>
      break;
 800ad5a:	e003      	b.n	800ad64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	73fb      	strb	r3, [r7, #15]
      break;
 800ad60:	e000      	b.n	800ad64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ad62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2201      	movs	r2, #1
 800ad68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ad74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3710      	adds	r7, #16
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}

0800ad7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ad7e:	b480      	push	{r7}
 800ad80:	b083      	sub	sp, #12
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ad86:	bf00      	nop
 800ad88:	370c      	adds	r7, #12
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr

0800ad92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ad92:	b480      	push	{r7}
 800ad94:	b083      	sub	sp, #12
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ad9a:	bf00      	nop
 800ad9c:	370c      	adds	r7, #12
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr

0800ada6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ada6:	b480      	push	{r7}
 800ada8:	b083      	sub	sp, #12
 800adaa:	af00      	add	r7, sp, #0
 800adac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800adae:	bf00      	nop
 800adb0:	370c      	adds	r7, #12
 800adb2:	46bd      	mov	sp, r7
 800adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb8:	4770      	bx	lr

0800adba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800adba:	b480      	push	{r7}
 800adbc:	b083      	sub	sp, #12
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800adc2:	bf00      	nop
 800adc4:	370c      	adds	r7, #12
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr
	...

0800add0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800add0:	b480      	push	{r7}
 800add2:	b085      	sub	sp, #20
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	4a37      	ldr	r2, [pc, #220]	@ (800aec0 <TIM_Base_SetConfig+0xf0>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d00f      	beq.n	800ae08 <TIM_Base_SetConfig+0x38>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adee:	d00b      	beq.n	800ae08 <TIM_Base_SetConfig+0x38>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	4a34      	ldr	r2, [pc, #208]	@ (800aec4 <TIM_Base_SetConfig+0xf4>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d007      	beq.n	800ae08 <TIM_Base_SetConfig+0x38>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	4a33      	ldr	r2, [pc, #204]	@ (800aec8 <TIM_Base_SetConfig+0xf8>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d003      	beq.n	800ae08 <TIM_Base_SetConfig+0x38>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	4a32      	ldr	r2, [pc, #200]	@ (800aecc <TIM_Base_SetConfig+0xfc>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d108      	bne.n	800ae1a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	68fa      	ldr	r2, [r7, #12]
 800ae16:	4313      	orrs	r3, r2
 800ae18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	4a28      	ldr	r2, [pc, #160]	@ (800aec0 <TIM_Base_SetConfig+0xf0>)
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	d01b      	beq.n	800ae5a <TIM_Base_SetConfig+0x8a>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae28:	d017      	beq.n	800ae5a <TIM_Base_SetConfig+0x8a>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	4a25      	ldr	r2, [pc, #148]	@ (800aec4 <TIM_Base_SetConfig+0xf4>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d013      	beq.n	800ae5a <TIM_Base_SetConfig+0x8a>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	4a24      	ldr	r2, [pc, #144]	@ (800aec8 <TIM_Base_SetConfig+0xf8>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d00f      	beq.n	800ae5a <TIM_Base_SetConfig+0x8a>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	4a23      	ldr	r2, [pc, #140]	@ (800aecc <TIM_Base_SetConfig+0xfc>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d00b      	beq.n	800ae5a <TIM_Base_SetConfig+0x8a>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	4a22      	ldr	r2, [pc, #136]	@ (800aed0 <TIM_Base_SetConfig+0x100>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d007      	beq.n	800ae5a <TIM_Base_SetConfig+0x8a>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	4a21      	ldr	r2, [pc, #132]	@ (800aed4 <TIM_Base_SetConfig+0x104>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d003      	beq.n	800ae5a <TIM_Base_SetConfig+0x8a>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	4a20      	ldr	r2, [pc, #128]	@ (800aed8 <TIM_Base_SetConfig+0x108>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d108      	bne.n	800ae6c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	68db      	ldr	r3, [r3, #12]
 800ae66:	68fa      	ldr	r2, [r7, #12]
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	695b      	ldr	r3, [r3, #20]
 800ae76:	4313      	orrs	r3, r2
 800ae78:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	689a      	ldr	r2, [r3, #8]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	681a      	ldr	r2, [r3, #0]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	4a0c      	ldr	r2, [pc, #48]	@ (800aec0 <TIM_Base_SetConfig+0xf0>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d103      	bne.n	800ae9a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	691a      	ldr	r2, [r3, #16]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f043 0204 	orr.w	r2, r3, #4
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2201      	movs	r2, #1
 800aeaa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	68fa      	ldr	r2, [r7, #12]
 800aeb0:	601a      	str	r2, [r3, #0]
}
 800aeb2:	bf00      	nop
 800aeb4:	3714      	adds	r7, #20
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr
 800aebe:	bf00      	nop
 800aec0:	40010000 	.word	0x40010000
 800aec4:	40000400 	.word	0x40000400
 800aec8:	40000800 	.word	0x40000800
 800aecc:	40000c00 	.word	0x40000c00
 800aed0:	40014000 	.word	0x40014000
 800aed4:	40014400 	.word	0x40014400
 800aed8:	40014800 	.word	0x40014800

0800aedc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aedc:	b480      	push	{r7}
 800aede:	b087      	sub	sp, #28
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6a1b      	ldr	r3, [r3, #32]
 800aeea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6a1b      	ldr	r3, [r3, #32]
 800aef0:	f023 0201 	bic.w	r2, r3, #1
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	699b      	ldr	r3, [r3, #24]
 800af02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f023 0303 	bic.w	r3, r3, #3
 800af12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	68fa      	ldr	r2, [r7, #12]
 800af1a:	4313      	orrs	r3, r2
 800af1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	f023 0302 	bic.w	r3, r3, #2
 800af24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	689b      	ldr	r3, [r3, #8]
 800af2a:	697a      	ldr	r2, [r7, #20]
 800af2c:	4313      	orrs	r3, r2
 800af2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	4a1c      	ldr	r2, [pc, #112]	@ (800afa4 <TIM_OC1_SetConfig+0xc8>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d10c      	bne.n	800af52 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	f023 0308 	bic.w	r3, r3, #8
 800af3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	68db      	ldr	r3, [r3, #12]
 800af44:	697a      	ldr	r2, [r7, #20]
 800af46:	4313      	orrs	r3, r2
 800af48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	f023 0304 	bic.w	r3, r3, #4
 800af50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	4a13      	ldr	r2, [pc, #76]	@ (800afa4 <TIM_OC1_SetConfig+0xc8>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d111      	bne.n	800af7e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800af60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800af68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	695b      	ldr	r3, [r3, #20]
 800af6e:	693a      	ldr	r2, [r7, #16]
 800af70:	4313      	orrs	r3, r2
 800af72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	699b      	ldr	r3, [r3, #24]
 800af78:	693a      	ldr	r2, [r7, #16]
 800af7a:	4313      	orrs	r3, r2
 800af7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	693a      	ldr	r2, [r7, #16]
 800af82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	68fa      	ldr	r2, [r7, #12]
 800af88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	685a      	ldr	r2, [r3, #4]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	697a      	ldr	r2, [r7, #20]
 800af96:	621a      	str	r2, [r3, #32]
}
 800af98:	bf00      	nop
 800af9a:	371c      	adds	r7, #28
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr
 800afa4:	40010000 	.word	0x40010000

0800afa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b087      	sub	sp, #28
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6a1b      	ldr	r3, [r3, #32]
 800afb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6a1b      	ldr	r3, [r3, #32]
 800afbc:	f023 0210 	bic.w	r2, r3, #16
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	699b      	ldr	r3, [r3, #24]
 800afce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800afd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800afde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	021b      	lsls	r3, r3, #8
 800afe6:	68fa      	ldr	r2, [r7, #12]
 800afe8:	4313      	orrs	r3, r2
 800afea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	f023 0320 	bic.w	r3, r3, #32
 800aff2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	689b      	ldr	r3, [r3, #8]
 800aff8:	011b      	lsls	r3, r3, #4
 800affa:	697a      	ldr	r2, [r7, #20]
 800affc:	4313      	orrs	r3, r2
 800affe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	4a1e      	ldr	r2, [pc, #120]	@ (800b07c <TIM_OC2_SetConfig+0xd4>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d10d      	bne.n	800b024 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b00e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	68db      	ldr	r3, [r3, #12]
 800b014:	011b      	lsls	r3, r3, #4
 800b016:	697a      	ldr	r2, [r7, #20]
 800b018:	4313      	orrs	r3, r2
 800b01a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b022:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	4a15      	ldr	r2, [pc, #84]	@ (800b07c <TIM_OC2_SetConfig+0xd4>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d113      	bne.n	800b054 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b032:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b03a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	695b      	ldr	r3, [r3, #20]
 800b040:	009b      	lsls	r3, r3, #2
 800b042:	693a      	ldr	r2, [r7, #16]
 800b044:	4313      	orrs	r3, r2
 800b046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	699b      	ldr	r3, [r3, #24]
 800b04c:	009b      	lsls	r3, r3, #2
 800b04e:	693a      	ldr	r2, [r7, #16]
 800b050:	4313      	orrs	r3, r2
 800b052:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	693a      	ldr	r2, [r7, #16]
 800b058:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	68fa      	ldr	r2, [r7, #12]
 800b05e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	685a      	ldr	r2, [r3, #4]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	697a      	ldr	r2, [r7, #20]
 800b06c:	621a      	str	r2, [r3, #32]
}
 800b06e:	bf00      	nop
 800b070:	371c      	adds	r7, #28
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr
 800b07a:	bf00      	nop
 800b07c:	40010000 	.word	0x40010000

0800b080 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b080:	b480      	push	{r7}
 800b082:	b087      	sub	sp, #28
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6a1b      	ldr	r3, [r3, #32]
 800b08e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6a1b      	ldr	r3, [r3, #32]
 800b094:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	69db      	ldr	r3, [r3, #28]
 800b0a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f023 0303 	bic.w	r3, r3, #3
 800b0b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	68fa      	ldr	r2, [r7, #12]
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b0c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	689b      	ldr	r3, [r3, #8]
 800b0ce:	021b      	lsls	r3, r3, #8
 800b0d0:	697a      	ldr	r2, [r7, #20]
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	4a1d      	ldr	r2, [pc, #116]	@ (800b150 <TIM_OC3_SetConfig+0xd0>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d10d      	bne.n	800b0fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b0e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	68db      	ldr	r3, [r3, #12]
 800b0ea:	021b      	lsls	r3, r3, #8
 800b0ec:	697a      	ldr	r2, [r7, #20]
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b0f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	4a14      	ldr	r2, [pc, #80]	@ (800b150 <TIM_OC3_SetConfig+0xd0>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d113      	bne.n	800b12a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b108:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b110:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	695b      	ldr	r3, [r3, #20]
 800b116:	011b      	lsls	r3, r3, #4
 800b118:	693a      	ldr	r2, [r7, #16]
 800b11a:	4313      	orrs	r3, r2
 800b11c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	699b      	ldr	r3, [r3, #24]
 800b122:	011b      	lsls	r3, r3, #4
 800b124:	693a      	ldr	r2, [r7, #16]
 800b126:	4313      	orrs	r3, r2
 800b128:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	693a      	ldr	r2, [r7, #16]
 800b12e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	68fa      	ldr	r2, [r7, #12]
 800b134:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	685a      	ldr	r2, [r3, #4]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	697a      	ldr	r2, [r7, #20]
 800b142:	621a      	str	r2, [r3, #32]
}
 800b144:	bf00      	nop
 800b146:	371c      	adds	r7, #28
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr
 800b150:	40010000 	.word	0x40010000

0800b154 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b154:	b480      	push	{r7}
 800b156:	b087      	sub	sp, #28
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6a1b      	ldr	r3, [r3, #32]
 800b162:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6a1b      	ldr	r3, [r3, #32]
 800b168:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	69db      	ldr	r3, [r3, #28]
 800b17a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b18a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	021b      	lsls	r3, r3, #8
 800b192:	68fa      	ldr	r2, [r7, #12]
 800b194:	4313      	orrs	r3, r2
 800b196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b19e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	689b      	ldr	r3, [r3, #8]
 800b1a4:	031b      	lsls	r3, r3, #12
 800b1a6:	693a      	ldr	r2, [r7, #16]
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	4a10      	ldr	r2, [pc, #64]	@ (800b1f0 <TIM_OC4_SetConfig+0x9c>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d109      	bne.n	800b1c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b1ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	695b      	ldr	r3, [r3, #20]
 800b1c0:	019b      	lsls	r3, r3, #6
 800b1c2:	697a      	ldr	r2, [r7, #20]
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	697a      	ldr	r2, [r7, #20]
 800b1cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	68fa      	ldr	r2, [r7, #12]
 800b1d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	685a      	ldr	r2, [r3, #4]
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	693a      	ldr	r2, [r7, #16]
 800b1e0:	621a      	str	r2, [r3, #32]
}
 800b1e2:	bf00      	nop
 800b1e4:	371c      	adds	r7, #28
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ec:	4770      	bx	lr
 800b1ee:	bf00      	nop
 800b1f0:	40010000 	.word	0x40010000

0800b1f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b087      	sub	sp, #28
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	60f8      	str	r0, [r7, #12]
 800b1fc:	60b9      	str	r1, [r7, #8]
 800b1fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	6a1b      	ldr	r3, [r3, #32]
 800b204:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	6a1b      	ldr	r3, [r3, #32]
 800b20a:	f023 0201 	bic.w	r2, r3, #1
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	699b      	ldr	r3, [r3, #24]
 800b216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b21e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	011b      	lsls	r3, r3, #4
 800b224:	693a      	ldr	r2, [r7, #16]
 800b226:	4313      	orrs	r3, r2
 800b228:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	f023 030a 	bic.w	r3, r3, #10
 800b230:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b232:	697a      	ldr	r2, [r7, #20]
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	4313      	orrs	r3, r2
 800b238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	693a      	ldr	r2, [r7, #16]
 800b23e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	697a      	ldr	r2, [r7, #20]
 800b244:	621a      	str	r2, [r3, #32]
}
 800b246:	bf00      	nop
 800b248:	371c      	adds	r7, #28
 800b24a:	46bd      	mov	sp, r7
 800b24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b250:	4770      	bx	lr

0800b252 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b252:	b480      	push	{r7}
 800b254:	b087      	sub	sp, #28
 800b256:	af00      	add	r7, sp, #0
 800b258:	60f8      	str	r0, [r7, #12]
 800b25a:	60b9      	str	r1, [r7, #8]
 800b25c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	6a1b      	ldr	r3, [r3, #32]
 800b262:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	6a1b      	ldr	r3, [r3, #32]
 800b268:	f023 0210 	bic.w	r2, r3, #16
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	699b      	ldr	r3, [r3, #24]
 800b274:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b27c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	031b      	lsls	r3, r3, #12
 800b282:	693a      	ldr	r2, [r7, #16]
 800b284:	4313      	orrs	r3, r2
 800b286:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b28e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	011b      	lsls	r3, r3, #4
 800b294:	697a      	ldr	r2, [r7, #20]
 800b296:	4313      	orrs	r3, r2
 800b298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	693a      	ldr	r2, [r7, #16]
 800b29e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	697a      	ldr	r2, [r7, #20]
 800b2a4:	621a      	str	r2, [r3, #32]
}
 800b2a6:	bf00      	nop
 800b2a8:	371c      	adds	r7, #28
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr

0800b2b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b2b2:	b480      	push	{r7}
 800b2b4:	b085      	sub	sp, #20
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	6078      	str	r0, [r7, #4]
 800b2ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	689b      	ldr	r3, [r3, #8]
 800b2c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b2ca:	683a      	ldr	r2, [r7, #0]
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	f043 0307 	orr.w	r3, r3, #7
 800b2d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	68fa      	ldr	r2, [r7, #12]
 800b2da:	609a      	str	r2, [r3, #8]
}
 800b2dc:	bf00      	nop
 800b2de:	3714      	adds	r7, #20
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b087      	sub	sp, #28
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	60f8      	str	r0, [r7, #12]
 800b2f0:	60b9      	str	r1, [r7, #8]
 800b2f2:	607a      	str	r2, [r7, #4]
 800b2f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	689b      	ldr	r3, [r3, #8]
 800b2fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b302:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	021a      	lsls	r2, r3, #8
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	431a      	orrs	r2, r3
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	4313      	orrs	r3, r2
 800b310:	697a      	ldr	r2, [r7, #20]
 800b312:	4313      	orrs	r3, r2
 800b314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	697a      	ldr	r2, [r7, #20]
 800b31a:	609a      	str	r2, [r3, #8]
}
 800b31c:	bf00      	nop
 800b31e:	371c      	adds	r7, #28
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr

0800b328 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b328:	b480      	push	{r7}
 800b32a:	b087      	sub	sp, #28
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	60f8      	str	r0, [r7, #12]
 800b330:	60b9      	str	r1, [r7, #8]
 800b332:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	f003 031f 	and.w	r3, r3, #31
 800b33a:	2201      	movs	r2, #1
 800b33c:	fa02 f303 	lsl.w	r3, r2, r3
 800b340:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	6a1a      	ldr	r2, [r3, #32]
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	43db      	mvns	r3, r3
 800b34a:	401a      	ands	r2, r3
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	6a1a      	ldr	r2, [r3, #32]
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	f003 031f 	and.w	r3, r3, #31
 800b35a:	6879      	ldr	r1, [r7, #4]
 800b35c:	fa01 f303 	lsl.w	r3, r1, r3
 800b360:	431a      	orrs	r2, r3
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	621a      	str	r2, [r3, #32]
}
 800b366:	bf00      	nop
 800b368:	371c      	adds	r7, #28
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr
	...

0800b374 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b374:	b480      	push	{r7}
 800b376:	b085      	sub	sp, #20
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b384:	2b01      	cmp	r3, #1
 800b386:	d101      	bne.n	800b38c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b388:	2302      	movs	r3, #2
 800b38a:	e050      	b.n	800b42e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2201      	movs	r2, #1
 800b390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2202      	movs	r2, #2
 800b398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	689b      	ldr	r3, [r3, #8]
 800b3aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	68fa      	ldr	r2, [r7, #12]
 800b3ba:	4313      	orrs	r3, r2
 800b3bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	68fa      	ldr	r2, [r7, #12]
 800b3c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4a1c      	ldr	r2, [pc, #112]	@ (800b43c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d018      	beq.n	800b402 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3d8:	d013      	beq.n	800b402 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4a18      	ldr	r2, [pc, #96]	@ (800b440 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d00e      	beq.n	800b402 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	4a16      	ldr	r2, [pc, #88]	@ (800b444 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d009      	beq.n	800b402 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	4a15      	ldr	r2, [pc, #84]	@ (800b448 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d004      	beq.n	800b402 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	4a13      	ldr	r2, [pc, #76]	@ (800b44c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d10c      	bne.n	800b41c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b408:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	68ba      	ldr	r2, [r7, #8]
 800b410:	4313      	orrs	r3, r2
 800b412:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	68ba      	ldr	r2, [r7, #8]
 800b41a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2201      	movs	r2, #1
 800b420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2200      	movs	r2, #0
 800b428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b42c:	2300      	movs	r3, #0
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3714      	adds	r7, #20
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr
 800b43a:	bf00      	nop
 800b43c:	40010000 	.word	0x40010000
 800b440:	40000400 	.word	0x40000400
 800b444:	40000800 	.word	0x40000800
 800b448:	40000c00 	.word	0x40000c00
 800b44c:	40014000 	.word	0x40014000

0800b450 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b450:	b480      	push	{r7}
 800b452:	b083      	sub	sp, #12
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b458:	bf00      	nop
 800b45a:	370c      	adds	r7, #12
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr

0800b464 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b464:	b480      	push	{r7}
 800b466:	b083      	sub	sp, #12
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b46c:	bf00      	nop
 800b46e:	370c      	adds	r7, #12
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr

0800b478 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b478:	b084      	sub	sp, #16
 800b47a:	b580      	push	{r7, lr}
 800b47c:	b084      	sub	sp, #16
 800b47e:	af00      	add	r7, sp, #0
 800b480:	6078      	str	r0, [r7, #4]
 800b482:	f107 001c 	add.w	r0, r7, #28
 800b486:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b48a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d123      	bne.n	800b4da <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b496:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	68db      	ldr	r3, [r3, #12]
 800b4a2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800b4a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b4aa:	687a      	ldr	r2, [r7, #4]
 800b4ac:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	68db      	ldr	r3, [r3, #12]
 800b4b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b4ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b4be:	2b01      	cmp	r3, #1
 800b4c0:	d105      	bne.n	800b4ce <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	68db      	ldr	r3, [r3, #12]
 800b4c6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f001 fae8 	bl	800caa4 <USB_CoreReset>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	73fb      	strb	r3, [r7, #15]
 800b4d8:	e01b      	b.n	800b512 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	68db      	ldr	r3, [r3, #12]
 800b4de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f001 fadc 	bl	800caa4 <USB_CoreReset>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b4f0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d106      	bne.n	800b506 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	639a      	str	r2, [r3, #56]	@ 0x38
 800b504:	e005      	b.n	800b512 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b50a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b512:	7fbb      	ldrb	r3, [r7, #30]
 800b514:	2b01      	cmp	r3, #1
 800b516:	d10b      	bne.n	800b530 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	689b      	ldr	r3, [r3, #8]
 800b51c:	f043 0206 	orr.w	r2, r3, #6
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	689b      	ldr	r3, [r3, #8]
 800b528:	f043 0220 	orr.w	r2, r3, #32
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b530:	7bfb      	ldrb	r3, [r7, #15]
}
 800b532:	4618      	mov	r0, r3
 800b534:	3710      	adds	r7, #16
 800b536:	46bd      	mov	sp, r7
 800b538:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b53c:	b004      	add	sp, #16
 800b53e:	4770      	bx	lr

0800b540 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b540:	b480      	push	{r7}
 800b542:	b087      	sub	sp, #28
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	4613      	mov	r3, r2
 800b54c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b54e:	79fb      	ldrb	r3, [r7, #7]
 800b550:	2b02      	cmp	r3, #2
 800b552:	d165      	bne.n	800b620 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	4a41      	ldr	r2, [pc, #260]	@ (800b65c <USB_SetTurnaroundTime+0x11c>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d906      	bls.n	800b56a <USB_SetTurnaroundTime+0x2a>
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	4a40      	ldr	r2, [pc, #256]	@ (800b660 <USB_SetTurnaroundTime+0x120>)
 800b560:	4293      	cmp	r3, r2
 800b562:	d202      	bcs.n	800b56a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b564:	230f      	movs	r3, #15
 800b566:	617b      	str	r3, [r7, #20]
 800b568:	e062      	b.n	800b630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	4a3c      	ldr	r2, [pc, #240]	@ (800b660 <USB_SetTurnaroundTime+0x120>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d306      	bcc.n	800b580 <USB_SetTurnaroundTime+0x40>
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	4a3b      	ldr	r2, [pc, #236]	@ (800b664 <USB_SetTurnaroundTime+0x124>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d202      	bcs.n	800b580 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b57a:	230e      	movs	r3, #14
 800b57c:	617b      	str	r3, [r7, #20]
 800b57e:	e057      	b.n	800b630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	4a38      	ldr	r2, [pc, #224]	@ (800b664 <USB_SetTurnaroundTime+0x124>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d306      	bcc.n	800b596 <USB_SetTurnaroundTime+0x56>
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	4a37      	ldr	r2, [pc, #220]	@ (800b668 <USB_SetTurnaroundTime+0x128>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d202      	bcs.n	800b596 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b590:	230d      	movs	r3, #13
 800b592:	617b      	str	r3, [r7, #20]
 800b594:	e04c      	b.n	800b630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	4a33      	ldr	r2, [pc, #204]	@ (800b668 <USB_SetTurnaroundTime+0x128>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d306      	bcc.n	800b5ac <USB_SetTurnaroundTime+0x6c>
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	4a32      	ldr	r2, [pc, #200]	@ (800b66c <USB_SetTurnaroundTime+0x12c>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d802      	bhi.n	800b5ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b5a6:	230c      	movs	r3, #12
 800b5a8:	617b      	str	r3, [r7, #20]
 800b5aa:	e041      	b.n	800b630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	4a2f      	ldr	r2, [pc, #188]	@ (800b66c <USB_SetTurnaroundTime+0x12c>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d906      	bls.n	800b5c2 <USB_SetTurnaroundTime+0x82>
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	4a2e      	ldr	r2, [pc, #184]	@ (800b670 <USB_SetTurnaroundTime+0x130>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d802      	bhi.n	800b5c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b5bc:	230b      	movs	r3, #11
 800b5be:	617b      	str	r3, [r7, #20]
 800b5c0:	e036      	b.n	800b630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	4a2a      	ldr	r2, [pc, #168]	@ (800b670 <USB_SetTurnaroundTime+0x130>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d906      	bls.n	800b5d8 <USB_SetTurnaroundTime+0x98>
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	4a29      	ldr	r2, [pc, #164]	@ (800b674 <USB_SetTurnaroundTime+0x134>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d802      	bhi.n	800b5d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b5d2:	230a      	movs	r3, #10
 800b5d4:	617b      	str	r3, [r7, #20]
 800b5d6:	e02b      	b.n	800b630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	4a26      	ldr	r2, [pc, #152]	@ (800b674 <USB_SetTurnaroundTime+0x134>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d906      	bls.n	800b5ee <USB_SetTurnaroundTime+0xae>
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	4a25      	ldr	r2, [pc, #148]	@ (800b678 <USB_SetTurnaroundTime+0x138>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d202      	bcs.n	800b5ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b5e8:	2309      	movs	r3, #9
 800b5ea:	617b      	str	r3, [r7, #20]
 800b5ec:	e020      	b.n	800b630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	4a21      	ldr	r2, [pc, #132]	@ (800b678 <USB_SetTurnaroundTime+0x138>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d306      	bcc.n	800b604 <USB_SetTurnaroundTime+0xc4>
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	4a20      	ldr	r2, [pc, #128]	@ (800b67c <USB_SetTurnaroundTime+0x13c>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d802      	bhi.n	800b604 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b5fe:	2308      	movs	r3, #8
 800b600:	617b      	str	r3, [r7, #20]
 800b602:	e015      	b.n	800b630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	4a1d      	ldr	r2, [pc, #116]	@ (800b67c <USB_SetTurnaroundTime+0x13c>)
 800b608:	4293      	cmp	r3, r2
 800b60a:	d906      	bls.n	800b61a <USB_SetTurnaroundTime+0xda>
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	4a1c      	ldr	r2, [pc, #112]	@ (800b680 <USB_SetTurnaroundTime+0x140>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d202      	bcs.n	800b61a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b614:	2307      	movs	r3, #7
 800b616:	617b      	str	r3, [r7, #20]
 800b618:	e00a      	b.n	800b630 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b61a:	2306      	movs	r3, #6
 800b61c:	617b      	str	r3, [r7, #20]
 800b61e:	e007      	b.n	800b630 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b620:	79fb      	ldrb	r3, [r7, #7]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d102      	bne.n	800b62c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b626:	2309      	movs	r3, #9
 800b628:	617b      	str	r3, [r7, #20]
 800b62a:	e001      	b.n	800b630 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b62c:	2309      	movs	r3, #9
 800b62e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	68db      	ldr	r3, [r3, #12]
 800b634:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	68da      	ldr	r2, [r3, #12]
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	029b      	lsls	r3, r3, #10
 800b644:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800b648:	431a      	orrs	r2, r3
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b64e:	2300      	movs	r3, #0
}
 800b650:	4618      	mov	r0, r3
 800b652:	371c      	adds	r7, #28
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr
 800b65c:	00d8acbf 	.word	0x00d8acbf
 800b660:	00e4e1c0 	.word	0x00e4e1c0
 800b664:	00f42400 	.word	0x00f42400
 800b668:	01067380 	.word	0x01067380
 800b66c:	011a499f 	.word	0x011a499f
 800b670:	01312cff 	.word	0x01312cff
 800b674:	014ca43f 	.word	0x014ca43f
 800b678:	016e3600 	.word	0x016e3600
 800b67c:	01a6ab1f 	.word	0x01a6ab1f
 800b680:	01e84800 	.word	0x01e84800

0800b684 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b684:	b480      	push	{r7}
 800b686:	b083      	sub	sp, #12
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	689b      	ldr	r3, [r3, #8]
 800b690:	f043 0201 	orr.w	r2, r3, #1
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b698:	2300      	movs	r3, #0
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	370c      	adds	r7, #12
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr

0800b6a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b6a6:	b480      	push	{r7}
 800b6a8:	b083      	sub	sp, #12
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	689b      	ldr	r3, [r3, #8]
 800b6b2:	f023 0201 	bic.w	r2, r3, #1
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b6ba:	2300      	movs	r3, #0
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	370c      	adds	r7, #12
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr

0800b6c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	460b      	mov	r3, r1
 800b6d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b6e4:	78fb      	ldrb	r3, [r7, #3]
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	d115      	bne.n	800b716 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	68db      	ldr	r3, [r3, #12]
 800b6ee:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b6f6:	200a      	movs	r0, #10
 800b6f8:	f7f8 fa14 	bl	8003b24 <HAL_Delay>
      ms += 10U;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	330a      	adds	r3, #10
 800b700:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f001 f93f 	bl	800c986 <USB_GetMode>
 800b708:	4603      	mov	r3, r0
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d01e      	beq.n	800b74c <USB_SetCurrentMode+0x84>
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	2bc7      	cmp	r3, #199	@ 0xc7
 800b712:	d9f0      	bls.n	800b6f6 <USB_SetCurrentMode+0x2e>
 800b714:	e01a      	b.n	800b74c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b716:	78fb      	ldrb	r3, [r7, #3]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d115      	bne.n	800b748 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	68db      	ldr	r3, [r3, #12]
 800b720:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b728:	200a      	movs	r0, #10
 800b72a:	f7f8 f9fb 	bl	8003b24 <HAL_Delay>
      ms += 10U;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	330a      	adds	r3, #10
 800b732:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f001 f926 	bl	800c986 <USB_GetMode>
 800b73a:	4603      	mov	r3, r0
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d005      	beq.n	800b74c <USB_SetCurrentMode+0x84>
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2bc7      	cmp	r3, #199	@ 0xc7
 800b744:	d9f0      	bls.n	800b728 <USB_SetCurrentMode+0x60>
 800b746:	e001      	b.n	800b74c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b748:	2301      	movs	r3, #1
 800b74a:	e005      	b.n	800b758 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2bc8      	cmp	r3, #200	@ 0xc8
 800b750:	d101      	bne.n	800b756 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b752:	2301      	movs	r3, #1
 800b754:	e000      	b.n	800b758 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b756:	2300      	movs	r3, #0
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3710      	adds	r7, #16
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b760:	b084      	sub	sp, #16
 800b762:	b580      	push	{r7, lr}
 800b764:	b086      	sub	sp, #24
 800b766:	af00      	add	r7, sp, #0
 800b768:	6078      	str	r0, [r7, #4]
 800b76a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b76e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b772:	2300      	movs	r3, #0
 800b774:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b77a:	2300      	movs	r3, #0
 800b77c:	613b      	str	r3, [r7, #16]
 800b77e:	e009      	b.n	800b794 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b780:	687a      	ldr	r2, [r7, #4]
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	3340      	adds	r3, #64	@ 0x40
 800b786:	009b      	lsls	r3, r3, #2
 800b788:	4413      	add	r3, r2
 800b78a:	2200      	movs	r2, #0
 800b78c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	3301      	adds	r3, #1
 800b792:	613b      	str	r3, [r7, #16]
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	2b0e      	cmp	r3, #14
 800b798:	d9f2      	bls.n	800b780 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b79a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d11c      	bne.n	800b7dc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	68fa      	ldr	r2, [r7, #12]
 800b7ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b7b0:	f043 0302 	orr.w	r3, r3, #2
 800b7b4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7ba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7c6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7d2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	639a      	str	r2, [r3, #56]	@ 0x38
 800b7da:	e00b      	b.n	800b7f4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7e0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7ec:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b800:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b804:	2b01      	cmp	r3, #1
 800b806:	d10d      	bne.n	800b824 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b808:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d104      	bne.n	800b81a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b810:	2100      	movs	r1, #0
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f000 f968 	bl	800bae8 <USB_SetDevSpeed>
 800b818:	e008      	b.n	800b82c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b81a:	2101      	movs	r1, #1
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f000 f963 	bl	800bae8 <USB_SetDevSpeed>
 800b822:	e003      	b.n	800b82c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b824:	2103      	movs	r1, #3
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 f95e 	bl	800bae8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b82c:	2110      	movs	r1, #16
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 f8fa 	bl	800ba28 <USB_FlushTxFifo>
 800b834:	4603      	mov	r3, r0
 800b836:	2b00      	cmp	r3, #0
 800b838:	d001      	beq.n	800b83e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800b83a:	2301      	movs	r3, #1
 800b83c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 f924 	bl	800ba8c <USB_FlushRxFifo>
 800b844:	4603      	mov	r3, r0
 800b846:	2b00      	cmp	r3, #0
 800b848:	d001      	beq.n	800b84e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800b84a:	2301      	movs	r3, #1
 800b84c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b854:	461a      	mov	r2, r3
 800b856:	2300      	movs	r3, #0
 800b858:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b860:	461a      	mov	r2, r3
 800b862:	2300      	movs	r3, #0
 800b864:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b86c:	461a      	mov	r2, r3
 800b86e:	2300      	movs	r3, #0
 800b870:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b872:	2300      	movs	r3, #0
 800b874:	613b      	str	r3, [r7, #16]
 800b876:	e043      	b.n	800b900 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	015a      	lsls	r2, r3, #5
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	4413      	add	r3, r2
 800b880:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b88a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b88e:	d118      	bne.n	800b8c2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d10a      	bne.n	800b8ac <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	015a      	lsls	r2, r3, #5
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	4413      	add	r3, r2
 800b89e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b8a8:	6013      	str	r3, [r2, #0]
 800b8aa:	e013      	b.n	800b8d4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	015a      	lsls	r2, r3, #5
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	4413      	add	r3, r2
 800b8b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b8be:	6013      	str	r3, [r2, #0]
 800b8c0:	e008      	b.n	800b8d4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	015a      	lsls	r2, r3, #5
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	4413      	add	r3, r2
 800b8ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	015a      	lsls	r2, r3, #5
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	4413      	add	r3, r2
 800b8dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b8e0:	461a      	mov	r2, r3
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	015a      	lsls	r2, r3, #5
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	4413      	add	r3, r2
 800b8ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b8f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	613b      	str	r3, [r7, #16]
 800b900:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b904:	461a      	mov	r2, r3
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	4293      	cmp	r3, r2
 800b90a:	d3b5      	bcc.n	800b878 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b90c:	2300      	movs	r3, #0
 800b90e:	613b      	str	r3, [r7, #16]
 800b910:	e043      	b.n	800b99a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	015a      	lsls	r2, r3, #5
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	4413      	add	r3, r2
 800b91a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b924:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b928:	d118      	bne.n	800b95c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d10a      	bne.n	800b946 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	015a      	lsls	r2, r3, #5
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	4413      	add	r3, r2
 800b938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b93c:	461a      	mov	r2, r3
 800b93e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b942:	6013      	str	r3, [r2, #0]
 800b944:	e013      	b.n	800b96e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	015a      	lsls	r2, r3, #5
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	4413      	add	r3, r2
 800b94e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b952:	461a      	mov	r2, r3
 800b954:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b958:	6013      	str	r3, [r2, #0]
 800b95a:	e008      	b.n	800b96e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	015a      	lsls	r2, r3, #5
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	4413      	add	r3, r2
 800b964:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b968:	461a      	mov	r2, r3
 800b96a:	2300      	movs	r3, #0
 800b96c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	015a      	lsls	r2, r3, #5
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	4413      	add	r3, r2
 800b976:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b97a:	461a      	mov	r2, r3
 800b97c:	2300      	movs	r3, #0
 800b97e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	015a      	lsls	r2, r3, #5
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	4413      	add	r3, r2
 800b988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b98c:	461a      	mov	r2, r3
 800b98e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b992:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	3301      	adds	r3, #1
 800b998:	613b      	str	r3, [r7, #16]
 800b99a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b99e:	461a      	mov	r2, r3
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d3b5      	bcc.n	800b912 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9ac:	691b      	ldr	r3, [r3, #16]
 800b9ae:	68fa      	ldr	r2, [r7, #12]
 800b9b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b9b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b9b8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b9c6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b9c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d105      	bne.n	800b9dc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	699b      	ldr	r3, [r3, #24]
 800b9d4:	f043 0210 	orr.w	r2, r3, #16
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	699a      	ldr	r2, [r3, #24]
 800b9e0:	4b10      	ldr	r3, [pc, #64]	@ (800ba24 <USB_DevInit+0x2c4>)
 800b9e2:	4313      	orrs	r3, r2
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b9e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d005      	beq.n	800b9fc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	699b      	ldr	r3, [r3, #24]
 800b9f4:	f043 0208 	orr.w	r2, r3, #8
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b9fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	d107      	bne.n	800ba14 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	699b      	ldr	r3, [r3, #24]
 800ba08:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ba0c:	f043 0304 	orr.w	r3, r3, #4
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ba14:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3718      	adds	r7, #24
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ba20:	b004      	add	sp, #16
 800ba22:	4770      	bx	lr
 800ba24:	803c3800 	.word	0x803c3800

0800ba28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b085      	sub	sp, #20
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ba32:	2300      	movs	r3, #0
 800ba34:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	3301      	adds	r3, #1
 800ba3a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ba42:	d901      	bls.n	800ba48 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ba44:	2303      	movs	r3, #3
 800ba46:	e01b      	b.n	800ba80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	691b      	ldr	r3, [r3, #16]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	daf2      	bge.n	800ba36 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ba50:	2300      	movs	r3, #0
 800ba52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	019b      	lsls	r3, r3, #6
 800ba58:	f043 0220 	orr.w	r2, r3, #32
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	3301      	adds	r3, #1
 800ba64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ba6c:	d901      	bls.n	800ba72 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ba6e:	2303      	movs	r3, #3
 800ba70:	e006      	b.n	800ba80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	691b      	ldr	r3, [r3, #16]
 800ba76:	f003 0320 	and.w	r3, r3, #32
 800ba7a:	2b20      	cmp	r3, #32
 800ba7c:	d0f0      	beq.n	800ba60 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ba7e:	2300      	movs	r3, #0
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3714      	adds	r7, #20
 800ba84:	46bd      	mov	sp, r7
 800ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8a:	4770      	bx	lr

0800ba8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b085      	sub	sp, #20
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ba94:	2300      	movs	r3, #0
 800ba96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800baa4:	d901      	bls.n	800baaa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800baa6:	2303      	movs	r3, #3
 800baa8:	e018      	b.n	800badc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	691b      	ldr	r3, [r3, #16]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	daf2      	bge.n	800ba98 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bab2:	2300      	movs	r3, #0
 800bab4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2210      	movs	r2, #16
 800baba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	3301      	adds	r3, #1
 800bac0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bac8:	d901      	bls.n	800bace <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800baca:	2303      	movs	r3, #3
 800bacc:	e006      	b.n	800badc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	691b      	ldr	r3, [r3, #16]
 800bad2:	f003 0310 	and.w	r3, r3, #16
 800bad6:	2b10      	cmp	r3, #16
 800bad8:	d0f0      	beq.n	800babc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bada:	2300      	movs	r3, #0
}
 800badc:	4618      	mov	r0, r3
 800bade:	3714      	adds	r7, #20
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr

0800bae8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bae8:	b480      	push	{r7}
 800baea:	b085      	sub	sp, #20
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	460b      	mov	r3, r1
 800baf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bafe:	681a      	ldr	r2, [r3, #0]
 800bb00:	78fb      	ldrb	r3, [r7, #3]
 800bb02:	68f9      	ldr	r1, [r7, #12]
 800bb04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bb0c:	2300      	movs	r3, #0
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3714      	adds	r7, #20
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr

0800bb1a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800bb1a:	b480      	push	{r7}
 800bb1c:	b087      	sub	sp, #28
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb2c:	689b      	ldr	r3, [r3, #8]
 800bb2e:	f003 0306 	and.w	r3, r3, #6
 800bb32:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d102      	bne.n	800bb40 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	75fb      	strb	r3, [r7, #23]
 800bb3e:	e00a      	b.n	800bb56 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2b02      	cmp	r3, #2
 800bb44:	d002      	beq.n	800bb4c <USB_GetDevSpeed+0x32>
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2b06      	cmp	r3, #6
 800bb4a:	d102      	bne.n	800bb52 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bb4c:	2302      	movs	r3, #2
 800bb4e:	75fb      	strb	r3, [r7, #23]
 800bb50:	e001      	b.n	800bb56 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bb52:	230f      	movs	r3, #15
 800bb54:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bb56:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	371c      	adds	r7, #28
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb62:	4770      	bx	lr

0800bb64 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b085      	sub	sp, #20
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	781b      	ldrb	r3, [r3, #0]
 800bb76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	785b      	ldrb	r3, [r3, #1]
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d13a      	bne.n	800bbf6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb86:	69da      	ldr	r2, [r3, #28]
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	f003 030f 	and.w	r3, r3, #15
 800bb90:	2101      	movs	r1, #1
 800bb92:	fa01 f303 	lsl.w	r3, r1, r3
 800bb96:	b29b      	uxth	r3, r3
 800bb98:	68f9      	ldr	r1, [r7, #12]
 800bb9a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	015a      	lsls	r2, r3, #5
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	4413      	add	r3, r2
 800bbaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d155      	bne.n	800bc64 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	015a      	lsls	r2, r3, #5
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	4413      	add	r3, r2
 800bbc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbc4:	681a      	ldr	r2, [r3, #0]
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	689b      	ldr	r3, [r3, #8]
 800bbca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	791b      	ldrb	r3, [r3, #4]
 800bbd2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bbd4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	059b      	lsls	r3, r3, #22
 800bbda:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bbdc:	4313      	orrs	r3, r2
 800bbde:	68ba      	ldr	r2, [r7, #8]
 800bbe0:	0151      	lsls	r1, r2, #5
 800bbe2:	68fa      	ldr	r2, [r7, #12]
 800bbe4:	440a      	add	r2, r1
 800bbe6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bbea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bbee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bbf2:	6013      	str	r3, [r2, #0]
 800bbf4:	e036      	b.n	800bc64 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbfc:	69da      	ldr	r2, [r3, #28]
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	f003 030f 	and.w	r3, r3, #15
 800bc06:	2101      	movs	r1, #1
 800bc08:	fa01 f303 	lsl.w	r3, r1, r3
 800bc0c:	041b      	lsls	r3, r3, #16
 800bc0e:	68f9      	ldr	r1, [r7, #12]
 800bc10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bc14:	4313      	orrs	r3, r2
 800bc16:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	015a      	lsls	r2, r3, #5
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	4413      	add	r3, r2
 800bc20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d11a      	bne.n	800bc64 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	015a      	lsls	r2, r3, #5
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	4413      	add	r3, r2
 800bc36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	689b      	ldr	r3, [r3, #8]
 800bc40:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	791b      	ldrb	r3, [r3, #4]
 800bc48:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bc4a:	430b      	orrs	r3, r1
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	68ba      	ldr	r2, [r7, #8]
 800bc50:	0151      	lsls	r1, r2, #5
 800bc52:	68fa      	ldr	r2, [r7, #12]
 800bc54:	440a      	add	r2, r1
 800bc56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bc5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bc5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc62:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bc64:	2300      	movs	r3, #0
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3714      	adds	r7, #20
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr
	...

0800bc74 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b085      	sub	sp, #20
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	785b      	ldrb	r3, [r3, #1]
 800bc8c:	2b01      	cmp	r3, #1
 800bc8e:	d161      	bne.n	800bd54 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	015a      	lsls	r2, r3, #5
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	4413      	add	r3, r2
 800bc98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bca2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bca6:	d11f      	bne.n	800bce8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	015a      	lsls	r2, r3, #5
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	4413      	add	r3, r2
 800bcb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	68ba      	ldr	r2, [r7, #8]
 800bcb8:	0151      	lsls	r1, r2, #5
 800bcba:	68fa      	ldr	r2, [r7, #12]
 800bcbc:	440a      	add	r2, r1
 800bcbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bcc2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bcc6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	015a      	lsls	r2, r3, #5
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	4413      	add	r3, r2
 800bcd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	68ba      	ldr	r2, [r7, #8]
 800bcd8:	0151      	lsls	r1, r2, #5
 800bcda:	68fa      	ldr	r2, [r7, #12]
 800bcdc:	440a      	add	r2, r1
 800bcde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bce2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bce6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bcee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	781b      	ldrb	r3, [r3, #0]
 800bcf4:	f003 030f 	and.w	r3, r3, #15
 800bcf8:	2101      	movs	r1, #1
 800bcfa:	fa01 f303 	lsl.w	r3, r1, r3
 800bcfe:	b29b      	uxth	r3, r3
 800bd00:	43db      	mvns	r3, r3
 800bd02:	68f9      	ldr	r1, [r7, #12]
 800bd04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bd08:	4013      	ands	r3, r2
 800bd0a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd12:	69da      	ldr	r2, [r3, #28]
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	f003 030f 	and.w	r3, r3, #15
 800bd1c:	2101      	movs	r1, #1
 800bd1e:	fa01 f303 	lsl.w	r3, r1, r3
 800bd22:	b29b      	uxth	r3, r3
 800bd24:	43db      	mvns	r3, r3
 800bd26:	68f9      	ldr	r1, [r7, #12]
 800bd28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bd2c:	4013      	ands	r3, r2
 800bd2e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	015a      	lsls	r2, r3, #5
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	4413      	add	r3, r2
 800bd38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd3c:	681a      	ldr	r2, [r3, #0]
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	0159      	lsls	r1, r3, #5
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	440b      	add	r3, r1
 800bd46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	4b35      	ldr	r3, [pc, #212]	@ (800be24 <USB_DeactivateEndpoint+0x1b0>)
 800bd4e:	4013      	ands	r3, r2
 800bd50:	600b      	str	r3, [r1, #0]
 800bd52:	e060      	b.n	800be16 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	015a      	lsls	r2, r3, #5
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	4413      	add	r3, r2
 800bd5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bd66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bd6a:	d11f      	bne.n	800bdac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	015a      	lsls	r2, r3, #5
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	4413      	add	r3, r2
 800bd74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	68ba      	ldr	r2, [r7, #8]
 800bd7c:	0151      	lsls	r1, r2, #5
 800bd7e:	68fa      	ldr	r2, [r7, #12]
 800bd80:	440a      	add	r2, r1
 800bd82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bd86:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bd8a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	015a      	lsls	r2, r3, #5
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	4413      	add	r3, r2
 800bd94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	68ba      	ldr	r2, [r7, #8]
 800bd9c:	0151      	lsls	r1, r2, #5
 800bd9e:	68fa      	ldr	r2, [r7, #12]
 800bda0:	440a      	add	r2, r1
 800bda2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bda6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bdaa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	f003 030f 	and.w	r3, r3, #15
 800bdbc:	2101      	movs	r1, #1
 800bdbe:	fa01 f303 	lsl.w	r3, r1, r3
 800bdc2:	041b      	lsls	r3, r3, #16
 800bdc4:	43db      	mvns	r3, r3
 800bdc6:	68f9      	ldr	r1, [r7, #12]
 800bdc8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bdcc:	4013      	ands	r3, r2
 800bdce:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdd6:	69da      	ldr	r2, [r3, #28]
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	781b      	ldrb	r3, [r3, #0]
 800bddc:	f003 030f 	and.w	r3, r3, #15
 800bde0:	2101      	movs	r1, #1
 800bde2:	fa01 f303 	lsl.w	r3, r1, r3
 800bde6:	041b      	lsls	r3, r3, #16
 800bde8:	43db      	mvns	r3, r3
 800bdea:	68f9      	ldr	r1, [r7, #12]
 800bdec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bdf0:	4013      	ands	r3, r2
 800bdf2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	015a      	lsls	r2, r3, #5
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	4413      	add	r3, r2
 800bdfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be00:	681a      	ldr	r2, [r3, #0]
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	0159      	lsls	r1, r3, #5
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	440b      	add	r3, r1
 800be0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be0e:	4619      	mov	r1, r3
 800be10:	4b05      	ldr	r3, [pc, #20]	@ (800be28 <USB_DeactivateEndpoint+0x1b4>)
 800be12:	4013      	ands	r3, r2
 800be14:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800be16:	2300      	movs	r3, #0
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3714      	adds	r7, #20
 800be1c:	46bd      	mov	sp, r7
 800be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be22:	4770      	bx	lr
 800be24:	ec337800 	.word	0xec337800
 800be28:	eff37800 	.word	0xeff37800

0800be2c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b08a      	sub	sp, #40	@ 0x28
 800be30:	af02      	add	r7, sp, #8
 800be32:	60f8      	str	r0, [r7, #12]
 800be34:	60b9      	str	r1, [r7, #8]
 800be36:	4613      	mov	r3, r2
 800be38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	785b      	ldrb	r3, [r3, #1]
 800be48:	2b01      	cmp	r3, #1
 800be4a:	f040 817f 	bne.w	800c14c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	691b      	ldr	r3, [r3, #16]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d132      	bne.n	800bebc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800be56:	69bb      	ldr	r3, [r7, #24]
 800be58:	015a      	lsls	r2, r3, #5
 800be5a:	69fb      	ldr	r3, [r7, #28]
 800be5c:	4413      	add	r3, r2
 800be5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be62:	691b      	ldr	r3, [r3, #16]
 800be64:	69ba      	ldr	r2, [r7, #24]
 800be66:	0151      	lsls	r1, r2, #5
 800be68:	69fa      	ldr	r2, [r7, #28]
 800be6a:	440a      	add	r2, r1
 800be6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800be70:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800be74:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800be78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800be7a:	69bb      	ldr	r3, [r7, #24]
 800be7c:	015a      	lsls	r2, r3, #5
 800be7e:	69fb      	ldr	r3, [r7, #28]
 800be80:	4413      	add	r3, r2
 800be82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be86:	691b      	ldr	r3, [r3, #16]
 800be88:	69ba      	ldr	r2, [r7, #24]
 800be8a:	0151      	lsls	r1, r2, #5
 800be8c:	69fa      	ldr	r2, [r7, #28]
 800be8e:	440a      	add	r2, r1
 800be90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800be94:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800be98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800be9a:	69bb      	ldr	r3, [r7, #24]
 800be9c:	015a      	lsls	r2, r3, #5
 800be9e:	69fb      	ldr	r3, [r7, #28]
 800bea0:	4413      	add	r3, r2
 800bea2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bea6:	691b      	ldr	r3, [r3, #16]
 800bea8:	69ba      	ldr	r2, [r7, #24]
 800beaa:	0151      	lsls	r1, r2, #5
 800beac:	69fa      	ldr	r2, [r7, #28]
 800beae:	440a      	add	r2, r1
 800beb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800beb4:	0cdb      	lsrs	r3, r3, #19
 800beb6:	04db      	lsls	r3, r3, #19
 800beb8:	6113      	str	r3, [r2, #16]
 800beba:	e097      	b.n	800bfec <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bebc:	69bb      	ldr	r3, [r7, #24]
 800bebe:	015a      	lsls	r2, r3, #5
 800bec0:	69fb      	ldr	r3, [r7, #28]
 800bec2:	4413      	add	r3, r2
 800bec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bec8:	691b      	ldr	r3, [r3, #16]
 800beca:	69ba      	ldr	r2, [r7, #24]
 800becc:	0151      	lsls	r1, r2, #5
 800bece:	69fa      	ldr	r2, [r7, #28]
 800bed0:	440a      	add	r2, r1
 800bed2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bed6:	0cdb      	lsrs	r3, r3, #19
 800bed8:	04db      	lsls	r3, r3, #19
 800beda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bedc:	69bb      	ldr	r3, [r7, #24]
 800bede:	015a      	lsls	r2, r3, #5
 800bee0:	69fb      	ldr	r3, [r7, #28]
 800bee2:	4413      	add	r3, r2
 800bee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bee8:	691b      	ldr	r3, [r3, #16]
 800beea:	69ba      	ldr	r2, [r7, #24]
 800beec:	0151      	lsls	r1, r2, #5
 800beee:	69fa      	ldr	r2, [r7, #28]
 800bef0:	440a      	add	r2, r1
 800bef2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bef6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800befa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800befe:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800bf00:	69bb      	ldr	r3, [r7, #24]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d11a      	bne.n	800bf3c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	691a      	ldr	r2, [r3, #16]
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	689b      	ldr	r3, [r3, #8]
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d903      	bls.n	800bf1a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	689a      	ldr	r2, [r3, #8]
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bf1a:	69bb      	ldr	r3, [r7, #24]
 800bf1c:	015a      	lsls	r2, r3, #5
 800bf1e:	69fb      	ldr	r3, [r7, #28]
 800bf20:	4413      	add	r3, r2
 800bf22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf26:	691b      	ldr	r3, [r3, #16]
 800bf28:	69ba      	ldr	r2, [r7, #24]
 800bf2a:	0151      	lsls	r1, r2, #5
 800bf2c:	69fa      	ldr	r2, [r7, #28]
 800bf2e:	440a      	add	r2, r1
 800bf30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bf34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bf38:	6113      	str	r3, [r2, #16]
 800bf3a:	e044      	b.n	800bfc6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	691a      	ldr	r2, [r3, #16]
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	689b      	ldr	r3, [r3, #8]
 800bf44:	4413      	add	r3, r2
 800bf46:	1e5a      	subs	r2, r3, #1
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	689b      	ldr	r3, [r3, #8]
 800bf4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf50:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800bf52:	69bb      	ldr	r3, [r7, #24]
 800bf54:	015a      	lsls	r2, r3, #5
 800bf56:	69fb      	ldr	r3, [r7, #28]
 800bf58:	4413      	add	r3, r2
 800bf5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf5e:	691a      	ldr	r2, [r3, #16]
 800bf60:	8afb      	ldrh	r3, [r7, #22]
 800bf62:	04d9      	lsls	r1, r3, #19
 800bf64:	4ba4      	ldr	r3, [pc, #656]	@ (800c1f8 <USB_EPStartXfer+0x3cc>)
 800bf66:	400b      	ands	r3, r1
 800bf68:	69b9      	ldr	r1, [r7, #24]
 800bf6a:	0148      	lsls	r0, r1, #5
 800bf6c:	69f9      	ldr	r1, [r7, #28]
 800bf6e:	4401      	add	r1, r0
 800bf70:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800bf74:	4313      	orrs	r3, r2
 800bf76:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	791b      	ldrb	r3, [r3, #4]
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	d122      	bne.n	800bfc6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	015a      	lsls	r2, r3, #5
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	4413      	add	r3, r2
 800bf88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf8c:	691b      	ldr	r3, [r3, #16]
 800bf8e:	69ba      	ldr	r2, [r7, #24]
 800bf90:	0151      	lsls	r1, r2, #5
 800bf92:	69fa      	ldr	r2, [r7, #28]
 800bf94:	440a      	add	r2, r1
 800bf96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bf9a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800bf9e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800bfa0:	69bb      	ldr	r3, [r7, #24]
 800bfa2:	015a      	lsls	r2, r3, #5
 800bfa4:	69fb      	ldr	r3, [r7, #28]
 800bfa6:	4413      	add	r3, r2
 800bfa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bfac:	691a      	ldr	r2, [r3, #16]
 800bfae:	8afb      	ldrh	r3, [r7, #22]
 800bfb0:	075b      	lsls	r3, r3, #29
 800bfb2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800bfb6:	69b9      	ldr	r1, [r7, #24]
 800bfb8:	0148      	lsls	r0, r1, #5
 800bfba:	69f9      	ldr	r1, [r7, #28]
 800bfbc:	4401      	add	r1, r0
 800bfbe:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bfc6:	69bb      	ldr	r3, [r7, #24]
 800bfc8:	015a      	lsls	r2, r3, #5
 800bfca:	69fb      	ldr	r3, [r7, #28]
 800bfcc:	4413      	add	r3, r2
 800bfce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bfd2:	691a      	ldr	r2, [r3, #16]
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	691b      	ldr	r3, [r3, #16]
 800bfd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bfdc:	69b9      	ldr	r1, [r7, #24]
 800bfde:	0148      	lsls	r0, r1, #5
 800bfe0:	69f9      	ldr	r1, [r7, #28]
 800bfe2:	4401      	add	r1, r0
 800bfe4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800bfe8:	4313      	orrs	r3, r2
 800bfea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bfec:	79fb      	ldrb	r3, [r7, #7]
 800bfee:	2b01      	cmp	r3, #1
 800bff0:	d14b      	bne.n	800c08a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	69db      	ldr	r3, [r3, #28]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d009      	beq.n	800c00e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bffa:	69bb      	ldr	r3, [r7, #24]
 800bffc:	015a      	lsls	r2, r3, #5
 800bffe:	69fb      	ldr	r3, [r7, #28]
 800c000:	4413      	add	r3, r2
 800c002:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c006:	461a      	mov	r2, r3
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	69db      	ldr	r3, [r3, #28]
 800c00c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	791b      	ldrb	r3, [r3, #4]
 800c012:	2b01      	cmp	r3, #1
 800c014:	d128      	bne.n	800c068 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c016:	69fb      	ldr	r3, [r7, #28]
 800c018:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c01c:	689b      	ldr	r3, [r3, #8]
 800c01e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c022:	2b00      	cmp	r3, #0
 800c024:	d110      	bne.n	800c048 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c026:	69bb      	ldr	r3, [r7, #24]
 800c028:	015a      	lsls	r2, r3, #5
 800c02a:	69fb      	ldr	r3, [r7, #28]
 800c02c:	4413      	add	r3, r2
 800c02e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	69ba      	ldr	r2, [r7, #24]
 800c036:	0151      	lsls	r1, r2, #5
 800c038:	69fa      	ldr	r2, [r7, #28]
 800c03a:	440a      	add	r2, r1
 800c03c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c040:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c044:	6013      	str	r3, [r2, #0]
 800c046:	e00f      	b.n	800c068 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c048:	69bb      	ldr	r3, [r7, #24]
 800c04a:	015a      	lsls	r2, r3, #5
 800c04c:	69fb      	ldr	r3, [r7, #28]
 800c04e:	4413      	add	r3, r2
 800c050:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	69ba      	ldr	r2, [r7, #24]
 800c058:	0151      	lsls	r1, r2, #5
 800c05a:	69fa      	ldr	r2, [r7, #28]
 800c05c:	440a      	add	r2, r1
 800c05e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c062:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c066:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c068:	69bb      	ldr	r3, [r7, #24]
 800c06a:	015a      	lsls	r2, r3, #5
 800c06c:	69fb      	ldr	r3, [r7, #28]
 800c06e:	4413      	add	r3, r2
 800c070:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	69ba      	ldr	r2, [r7, #24]
 800c078:	0151      	lsls	r1, r2, #5
 800c07a:	69fa      	ldr	r2, [r7, #28]
 800c07c:	440a      	add	r2, r1
 800c07e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c082:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c086:	6013      	str	r3, [r2, #0]
 800c088:	e166      	b.n	800c358 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c08a:	69bb      	ldr	r3, [r7, #24]
 800c08c:	015a      	lsls	r2, r3, #5
 800c08e:	69fb      	ldr	r3, [r7, #28]
 800c090:	4413      	add	r3, r2
 800c092:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	69ba      	ldr	r2, [r7, #24]
 800c09a:	0151      	lsls	r1, r2, #5
 800c09c:	69fa      	ldr	r2, [r7, #28]
 800c09e:	440a      	add	r2, r1
 800c0a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c0a4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c0a8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	791b      	ldrb	r3, [r3, #4]
 800c0ae:	2b01      	cmp	r3, #1
 800c0b0:	d015      	beq.n	800c0de <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	691b      	ldr	r3, [r3, #16]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	f000 814e 	beq.w	800c358 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c0bc:	69fb      	ldr	r3, [r7, #28]
 800c0be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c0c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	781b      	ldrb	r3, [r3, #0]
 800c0c8:	f003 030f 	and.w	r3, r3, #15
 800c0cc:	2101      	movs	r1, #1
 800c0ce:	fa01 f303 	lsl.w	r3, r1, r3
 800c0d2:	69f9      	ldr	r1, [r7, #28]
 800c0d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	634b      	str	r3, [r1, #52]	@ 0x34
 800c0dc:	e13c      	b.n	800c358 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c0de:	69fb      	ldr	r3, [r7, #28]
 800c0e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c0e4:	689b      	ldr	r3, [r3, #8]
 800c0e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d110      	bne.n	800c110 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c0ee:	69bb      	ldr	r3, [r7, #24]
 800c0f0:	015a      	lsls	r2, r3, #5
 800c0f2:	69fb      	ldr	r3, [r7, #28]
 800c0f4:	4413      	add	r3, r2
 800c0f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	69ba      	ldr	r2, [r7, #24]
 800c0fe:	0151      	lsls	r1, r2, #5
 800c100:	69fa      	ldr	r2, [r7, #28]
 800c102:	440a      	add	r2, r1
 800c104:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c108:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c10c:	6013      	str	r3, [r2, #0]
 800c10e:	e00f      	b.n	800c130 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c110:	69bb      	ldr	r3, [r7, #24]
 800c112:	015a      	lsls	r2, r3, #5
 800c114:	69fb      	ldr	r3, [r7, #28]
 800c116:	4413      	add	r3, r2
 800c118:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	69ba      	ldr	r2, [r7, #24]
 800c120:	0151      	lsls	r1, r2, #5
 800c122:	69fa      	ldr	r2, [r7, #28]
 800c124:	440a      	add	r2, r1
 800c126:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c12a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c12e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	68d9      	ldr	r1, [r3, #12]
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	781a      	ldrb	r2, [r3, #0]
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	691b      	ldr	r3, [r3, #16]
 800c13c:	b298      	uxth	r0, r3
 800c13e:	79fb      	ldrb	r3, [r7, #7]
 800c140:	9300      	str	r3, [sp, #0]
 800c142:	4603      	mov	r3, r0
 800c144:	68f8      	ldr	r0, [r7, #12]
 800c146:	f000 f9b9 	bl	800c4bc <USB_WritePacket>
 800c14a:	e105      	b.n	800c358 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c14c:	69bb      	ldr	r3, [r7, #24]
 800c14e:	015a      	lsls	r2, r3, #5
 800c150:	69fb      	ldr	r3, [r7, #28]
 800c152:	4413      	add	r3, r2
 800c154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c158:	691b      	ldr	r3, [r3, #16]
 800c15a:	69ba      	ldr	r2, [r7, #24]
 800c15c:	0151      	lsls	r1, r2, #5
 800c15e:	69fa      	ldr	r2, [r7, #28]
 800c160:	440a      	add	r2, r1
 800c162:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c166:	0cdb      	lsrs	r3, r3, #19
 800c168:	04db      	lsls	r3, r3, #19
 800c16a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c16c:	69bb      	ldr	r3, [r7, #24]
 800c16e:	015a      	lsls	r2, r3, #5
 800c170:	69fb      	ldr	r3, [r7, #28]
 800c172:	4413      	add	r3, r2
 800c174:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c178:	691b      	ldr	r3, [r3, #16]
 800c17a:	69ba      	ldr	r2, [r7, #24]
 800c17c:	0151      	lsls	r1, r2, #5
 800c17e:	69fa      	ldr	r2, [r7, #28]
 800c180:	440a      	add	r2, r1
 800c182:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c186:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800c18a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800c18e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800c190:	69bb      	ldr	r3, [r7, #24]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d132      	bne.n	800c1fc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	691b      	ldr	r3, [r3, #16]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d003      	beq.n	800c1a6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	689a      	ldr	r2, [r3, #8]
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	689a      	ldr	r2, [r3, #8]
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c1ae:	69bb      	ldr	r3, [r7, #24]
 800c1b0:	015a      	lsls	r2, r3, #5
 800c1b2:	69fb      	ldr	r3, [r7, #28]
 800c1b4:	4413      	add	r3, r2
 800c1b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c1ba:	691a      	ldr	r2, [r3, #16]
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	6a1b      	ldr	r3, [r3, #32]
 800c1c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c1c4:	69b9      	ldr	r1, [r7, #24]
 800c1c6:	0148      	lsls	r0, r1, #5
 800c1c8:	69f9      	ldr	r1, [r7, #28]
 800c1ca:	4401      	add	r1, r0
 800c1cc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c1d0:	4313      	orrs	r3, r2
 800c1d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c1d4:	69bb      	ldr	r3, [r7, #24]
 800c1d6:	015a      	lsls	r2, r3, #5
 800c1d8:	69fb      	ldr	r3, [r7, #28]
 800c1da:	4413      	add	r3, r2
 800c1dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c1e0:	691b      	ldr	r3, [r3, #16]
 800c1e2:	69ba      	ldr	r2, [r7, #24]
 800c1e4:	0151      	lsls	r1, r2, #5
 800c1e6:	69fa      	ldr	r2, [r7, #28]
 800c1e8:	440a      	add	r2, r1
 800c1ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c1ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c1f2:	6113      	str	r3, [r2, #16]
 800c1f4:	e062      	b.n	800c2bc <USB_EPStartXfer+0x490>
 800c1f6:	bf00      	nop
 800c1f8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	691b      	ldr	r3, [r3, #16]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d123      	bne.n	800c24c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c204:	69bb      	ldr	r3, [r7, #24]
 800c206:	015a      	lsls	r2, r3, #5
 800c208:	69fb      	ldr	r3, [r7, #28]
 800c20a:	4413      	add	r3, r2
 800c20c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c210:	691a      	ldr	r2, [r3, #16]
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	689b      	ldr	r3, [r3, #8]
 800c216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c21a:	69b9      	ldr	r1, [r7, #24]
 800c21c:	0148      	lsls	r0, r1, #5
 800c21e:	69f9      	ldr	r1, [r7, #28]
 800c220:	4401      	add	r1, r0
 800c222:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c226:	4313      	orrs	r3, r2
 800c228:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c22a:	69bb      	ldr	r3, [r7, #24]
 800c22c:	015a      	lsls	r2, r3, #5
 800c22e:	69fb      	ldr	r3, [r7, #28]
 800c230:	4413      	add	r3, r2
 800c232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c236:	691b      	ldr	r3, [r3, #16]
 800c238:	69ba      	ldr	r2, [r7, #24]
 800c23a:	0151      	lsls	r1, r2, #5
 800c23c:	69fa      	ldr	r2, [r7, #28]
 800c23e:	440a      	add	r2, r1
 800c240:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c244:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c248:	6113      	str	r3, [r2, #16]
 800c24a:	e037      	b.n	800c2bc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	691a      	ldr	r2, [r3, #16]
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	689b      	ldr	r3, [r3, #8]
 800c254:	4413      	add	r3, r2
 800c256:	1e5a      	subs	r2, r3, #1
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	689b      	ldr	r3, [r3, #8]
 800c25c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c260:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	689b      	ldr	r3, [r3, #8]
 800c266:	8afa      	ldrh	r2, [r7, #22]
 800c268:	fb03 f202 	mul.w	r2, r3, r2
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c270:	69bb      	ldr	r3, [r7, #24]
 800c272:	015a      	lsls	r2, r3, #5
 800c274:	69fb      	ldr	r3, [r7, #28]
 800c276:	4413      	add	r3, r2
 800c278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c27c:	691a      	ldr	r2, [r3, #16]
 800c27e:	8afb      	ldrh	r3, [r7, #22]
 800c280:	04d9      	lsls	r1, r3, #19
 800c282:	4b38      	ldr	r3, [pc, #224]	@ (800c364 <USB_EPStartXfer+0x538>)
 800c284:	400b      	ands	r3, r1
 800c286:	69b9      	ldr	r1, [r7, #24]
 800c288:	0148      	lsls	r0, r1, #5
 800c28a:	69f9      	ldr	r1, [r7, #28]
 800c28c:	4401      	add	r1, r0
 800c28e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c292:	4313      	orrs	r3, r2
 800c294:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c296:	69bb      	ldr	r3, [r7, #24]
 800c298:	015a      	lsls	r2, r3, #5
 800c29a:	69fb      	ldr	r3, [r7, #28]
 800c29c:	4413      	add	r3, r2
 800c29e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2a2:	691a      	ldr	r2, [r3, #16]
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	6a1b      	ldr	r3, [r3, #32]
 800c2a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c2ac:	69b9      	ldr	r1, [r7, #24]
 800c2ae:	0148      	lsls	r0, r1, #5
 800c2b0:	69f9      	ldr	r1, [r7, #28]
 800c2b2:	4401      	add	r1, r0
 800c2b4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c2b8:	4313      	orrs	r3, r2
 800c2ba:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800c2bc:	79fb      	ldrb	r3, [r7, #7]
 800c2be:	2b01      	cmp	r3, #1
 800c2c0:	d10d      	bne.n	800c2de <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	68db      	ldr	r3, [r3, #12]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d009      	beq.n	800c2de <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	68d9      	ldr	r1, [r3, #12]
 800c2ce:	69bb      	ldr	r3, [r7, #24]
 800c2d0:	015a      	lsls	r2, r3, #5
 800c2d2:	69fb      	ldr	r3, [r7, #28]
 800c2d4:	4413      	add	r3, r2
 800c2d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2da:	460a      	mov	r2, r1
 800c2dc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	791b      	ldrb	r3, [r3, #4]
 800c2e2:	2b01      	cmp	r3, #1
 800c2e4:	d128      	bne.n	800c338 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c2e6:	69fb      	ldr	r3, [r7, #28]
 800c2e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c2ec:	689b      	ldr	r3, [r3, #8]
 800c2ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d110      	bne.n	800c318 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c2f6:	69bb      	ldr	r3, [r7, #24]
 800c2f8:	015a      	lsls	r2, r3, #5
 800c2fa:	69fb      	ldr	r3, [r7, #28]
 800c2fc:	4413      	add	r3, r2
 800c2fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	69ba      	ldr	r2, [r7, #24]
 800c306:	0151      	lsls	r1, r2, #5
 800c308:	69fa      	ldr	r2, [r7, #28]
 800c30a:	440a      	add	r2, r1
 800c30c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c310:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c314:	6013      	str	r3, [r2, #0]
 800c316:	e00f      	b.n	800c338 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c318:	69bb      	ldr	r3, [r7, #24]
 800c31a:	015a      	lsls	r2, r3, #5
 800c31c:	69fb      	ldr	r3, [r7, #28]
 800c31e:	4413      	add	r3, r2
 800c320:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	69ba      	ldr	r2, [r7, #24]
 800c328:	0151      	lsls	r1, r2, #5
 800c32a:	69fa      	ldr	r2, [r7, #28]
 800c32c:	440a      	add	r2, r1
 800c32e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c332:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c336:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c338:	69bb      	ldr	r3, [r7, #24]
 800c33a:	015a      	lsls	r2, r3, #5
 800c33c:	69fb      	ldr	r3, [r7, #28]
 800c33e:	4413      	add	r3, r2
 800c340:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	69ba      	ldr	r2, [r7, #24]
 800c348:	0151      	lsls	r1, r2, #5
 800c34a:	69fa      	ldr	r2, [r7, #28]
 800c34c:	440a      	add	r2, r1
 800c34e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c352:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c356:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c358:	2300      	movs	r3, #0
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3720      	adds	r7, #32
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}
 800c362:	bf00      	nop
 800c364:	1ff80000 	.word	0x1ff80000

0800c368 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c368:	b480      	push	{r7}
 800c36a:	b087      	sub	sp, #28
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c372:	2300      	movs	r3, #0
 800c374:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c376:	2300      	movs	r3, #0
 800c378:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	785b      	ldrb	r3, [r3, #1]
 800c382:	2b01      	cmp	r3, #1
 800c384:	d14a      	bne.n	800c41c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	781b      	ldrb	r3, [r3, #0]
 800c38a:	015a      	lsls	r2, r3, #5
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	4413      	add	r3, r2
 800c390:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c39a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c39e:	f040 8086 	bne.w	800c4ae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	015a      	lsls	r2, r3, #5
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	4413      	add	r3, r2
 800c3ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	683a      	ldr	r2, [r7, #0]
 800c3b4:	7812      	ldrb	r2, [r2, #0]
 800c3b6:	0151      	lsls	r1, r2, #5
 800c3b8:	693a      	ldr	r2, [r7, #16]
 800c3ba:	440a      	add	r2, r1
 800c3bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c3c0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c3c4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	781b      	ldrb	r3, [r3, #0]
 800c3ca:	015a      	lsls	r2, r3, #5
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	4413      	add	r3, r2
 800c3d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	683a      	ldr	r2, [r7, #0]
 800c3d8:	7812      	ldrb	r2, [r2, #0]
 800c3da:	0151      	lsls	r1, r2, #5
 800c3dc:	693a      	ldr	r2, [r7, #16]
 800c3de:	440a      	add	r2, r1
 800c3e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c3e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c3e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	3301      	adds	r3, #1
 800c3ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d902      	bls.n	800c400 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	75fb      	strb	r3, [r7, #23]
          break;
 800c3fe:	e056      	b.n	800c4ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	781b      	ldrb	r3, [r3, #0]
 800c404:	015a      	lsls	r2, r3, #5
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	4413      	add	r3, r2
 800c40a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c414:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c418:	d0e7      	beq.n	800c3ea <USB_EPStopXfer+0x82>
 800c41a:	e048      	b.n	800c4ae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	015a      	lsls	r2, r3, #5
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	4413      	add	r3, r2
 800c426:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c430:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c434:	d13b      	bne.n	800c4ae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	015a      	lsls	r2, r3, #5
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	4413      	add	r3, r2
 800c440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	683a      	ldr	r2, [r7, #0]
 800c448:	7812      	ldrb	r2, [r2, #0]
 800c44a:	0151      	lsls	r1, r2, #5
 800c44c:	693a      	ldr	r2, [r7, #16]
 800c44e:	440a      	add	r2, r1
 800c450:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c454:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c458:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	781b      	ldrb	r3, [r3, #0]
 800c45e:	015a      	lsls	r2, r3, #5
 800c460:	693b      	ldr	r3, [r7, #16]
 800c462:	4413      	add	r3, r2
 800c464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	683a      	ldr	r2, [r7, #0]
 800c46c:	7812      	ldrb	r2, [r2, #0]
 800c46e:	0151      	lsls	r1, r2, #5
 800c470:	693a      	ldr	r2, [r7, #16]
 800c472:	440a      	add	r2, r1
 800c474:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c478:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c47c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	3301      	adds	r3, #1
 800c482:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d902      	bls.n	800c494 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c48e:	2301      	movs	r3, #1
 800c490:	75fb      	strb	r3, [r7, #23]
          break;
 800c492:	e00c      	b.n	800c4ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	015a      	lsls	r2, r3, #5
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	4413      	add	r3, r2
 800c49e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c4a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c4ac:	d0e7      	beq.n	800c47e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c4ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	371c      	adds	r7, #28
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr

0800c4bc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b089      	sub	sp, #36	@ 0x24
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	60f8      	str	r0, [r7, #12]
 800c4c4:	60b9      	str	r1, [r7, #8]
 800c4c6:	4611      	mov	r1, r2
 800c4c8:	461a      	mov	r2, r3
 800c4ca:	460b      	mov	r3, r1
 800c4cc:	71fb      	strb	r3, [r7, #7]
 800c4ce:	4613      	mov	r3, r2
 800c4d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c4da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d123      	bne.n	800c52a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c4e2:	88bb      	ldrh	r3, [r7, #4]
 800c4e4:	3303      	adds	r3, #3
 800c4e6:	089b      	lsrs	r3, r3, #2
 800c4e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	61bb      	str	r3, [r7, #24]
 800c4ee:	e018      	b.n	800c522 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c4f0:	79fb      	ldrb	r3, [r7, #7]
 800c4f2:	031a      	lsls	r2, r3, #12
 800c4f4:	697b      	ldr	r3, [r7, #20]
 800c4f6:	4413      	add	r3, r2
 800c4f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c4fc:	461a      	mov	r2, r3
 800c4fe:	69fb      	ldr	r3, [r7, #28]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c504:	69fb      	ldr	r3, [r7, #28]
 800c506:	3301      	adds	r3, #1
 800c508:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c50a:	69fb      	ldr	r3, [r7, #28]
 800c50c:	3301      	adds	r3, #1
 800c50e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c510:	69fb      	ldr	r3, [r7, #28]
 800c512:	3301      	adds	r3, #1
 800c514:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c516:	69fb      	ldr	r3, [r7, #28]
 800c518:	3301      	adds	r3, #1
 800c51a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c51c:	69bb      	ldr	r3, [r7, #24]
 800c51e:	3301      	adds	r3, #1
 800c520:	61bb      	str	r3, [r7, #24]
 800c522:	69ba      	ldr	r2, [r7, #24]
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	429a      	cmp	r2, r3
 800c528:	d3e2      	bcc.n	800c4f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c52a:	2300      	movs	r3, #0
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3724      	adds	r7, #36	@ 0x24
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr

0800c538 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c538:	b480      	push	{r7}
 800c53a:	b08b      	sub	sp, #44	@ 0x2c
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	60f8      	str	r0, [r7, #12]
 800c540:	60b9      	str	r1, [r7, #8]
 800c542:	4613      	mov	r3, r2
 800c544:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c54e:	88fb      	ldrh	r3, [r7, #6]
 800c550:	089b      	lsrs	r3, r3, #2
 800c552:	b29b      	uxth	r3, r3
 800c554:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c556:	88fb      	ldrh	r3, [r7, #6]
 800c558:	f003 0303 	and.w	r3, r3, #3
 800c55c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c55e:	2300      	movs	r3, #0
 800c560:	623b      	str	r3, [r7, #32]
 800c562:	e014      	b.n	800c58e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c564:	69bb      	ldr	r3, [r7, #24]
 800c566:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c56a:	681a      	ldr	r2, [r3, #0]
 800c56c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c56e:	601a      	str	r2, [r3, #0]
    pDest++;
 800c570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c572:	3301      	adds	r3, #1
 800c574:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c578:	3301      	adds	r3, #1
 800c57a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c57c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c57e:	3301      	adds	r3, #1
 800c580:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c584:	3301      	adds	r3, #1
 800c586:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800c588:	6a3b      	ldr	r3, [r7, #32]
 800c58a:	3301      	adds	r3, #1
 800c58c:	623b      	str	r3, [r7, #32]
 800c58e:	6a3a      	ldr	r2, [r7, #32]
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	429a      	cmp	r2, r3
 800c594:	d3e6      	bcc.n	800c564 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c596:	8bfb      	ldrh	r3, [r7, #30]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d01e      	beq.n	800c5da <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c59c:	2300      	movs	r3, #0
 800c59e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c5a0:	69bb      	ldr	r3, [r7, #24]
 800c5a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c5a6:	461a      	mov	r2, r3
 800c5a8:	f107 0310 	add.w	r3, r7, #16
 800c5ac:	6812      	ldr	r2, [r2, #0]
 800c5ae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c5b0:	693a      	ldr	r2, [r7, #16]
 800c5b2:	6a3b      	ldr	r3, [r7, #32]
 800c5b4:	b2db      	uxtb	r3, r3
 800c5b6:	00db      	lsls	r3, r3, #3
 800c5b8:	fa22 f303 	lsr.w	r3, r2, r3
 800c5bc:	b2da      	uxtb	r2, r3
 800c5be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c0:	701a      	strb	r2, [r3, #0]
      i++;
 800c5c2:	6a3b      	ldr	r3, [r7, #32]
 800c5c4:	3301      	adds	r3, #1
 800c5c6:	623b      	str	r3, [r7, #32]
      pDest++;
 800c5c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ca:	3301      	adds	r3, #1
 800c5cc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800c5ce:	8bfb      	ldrh	r3, [r7, #30]
 800c5d0:	3b01      	subs	r3, #1
 800c5d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c5d4:	8bfb      	ldrh	r3, [r7, #30]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d1ea      	bne.n	800c5b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	372c      	adds	r7, #44	@ 0x2c
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e6:	4770      	bx	lr

0800c5e8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b085      	sub	sp, #20
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	781b      	ldrb	r3, [r3, #0]
 800c5fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	785b      	ldrb	r3, [r3, #1]
 800c600:	2b01      	cmp	r3, #1
 800c602:	d12c      	bne.n	800c65e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	015a      	lsls	r2, r3, #5
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	4413      	add	r3, r2
 800c60c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	2b00      	cmp	r3, #0
 800c614:	db12      	blt.n	800c63c <USB_EPSetStall+0x54>
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d00f      	beq.n	800c63c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	015a      	lsls	r2, r3, #5
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	4413      	add	r3, r2
 800c624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	68ba      	ldr	r2, [r7, #8]
 800c62c:	0151      	lsls	r1, r2, #5
 800c62e:	68fa      	ldr	r2, [r7, #12]
 800c630:	440a      	add	r2, r1
 800c632:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c636:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c63a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	015a      	lsls	r2, r3, #5
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	4413      	add	r3, r2
 800c644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	68ba      	ldr	r2, [r7, #8]
 800c64c:	0151      	lsls	r1, r2, #5
 800c64e:	68fa      	ldr	r2, [r7, #12]
 800c650:	440a      	add	r2, r1
 800c652:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c656:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c65a:	6013      	str	r3, [r2, #0]
 800c65c:	e02b      	b.n	800c6b6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	015a      	lsls	r2, r3, #5
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	4413      	add	r3, r2
 800c666:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	db12      	blt.n	800c696 <USB_EPSetStall+0xae>
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d00f      	beq.n	800c696 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	015a      	lsls	r2, r3, #5
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	4413      	add	r3, r2
 800c67e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	68ba      	ldr	r2, [r7, #8]
 800c686:	0151      	lsls	r1, r2, #5
 800c688:	68fa      	ldr	r2, [r7, #12]
 800c68a:	440a      	add	r2, r1
 800c68c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c690:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c694:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	015a      	lsls	r2, r3, #5
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	4413      	add	r3, r2
 800c69e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	68ba      	ldr	r2, [r7, #8]
 800c6a6:	0151      	lsls	r1, r2, #5
 800c6a8:	68fa      	ldr	r2, [r7, #12]
 800c6aa:	440a      	add	r2, r1
 800c6ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c6b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c6b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c6b6:	2300      	movs	r3, #0
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	3714      	adds	r7, #20
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr

0800c6c4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b085      	sub	sp, #20
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	781b      	ldrb	r3, [r3, #0]
 800c6d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	785b      	ldrb	r3, [r3, #1]
 800c6dc:	2b01      	cmp	r3, #1
 800c6de:	d128      	bne.n	800c732 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	015a      	lsls	r2, r3, #5
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	4413      	add	r3, r2
 800c6e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	68ba      	ldr	r2, [r7, #8]
 800c6f0:	0151      	lsls	r1, r2, #5
 800c6f2:	68fa      	ldr	r2, [r7, #12]
 800c6f4:	440a      	add	r2, r1
 800c6f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c6fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c6fe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	791b      	ldrb	r3, [r3, #4]
 800c704:	2b03      	cmp	r3, #3
 800c706:	d003      	beq.n	800c710 <USB_EPClearStall+0x4c>
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	791b      	ldrb	r3, [r3, #4]
 800c70c:	2b02      	cmp	r3, #2
 800c70e:	d138      	bne.n	800c782 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	015a      	lsls	r2, r3, #5
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	4413      	add	r3, r2
 800c718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	68ba      	ldr	r2, [r7, #8]
 800c720:	0151      	lsls	r1, r2, #5
 800c722:	68fa      	ldr	r2, [r7, #12]
 800c724:	440a      	add	r2, r1
 800c726:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c72a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c72e:	6013      	str	r3, [r2, #0]
 800c730:	e027      	b.n	800c782 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	015a      	lsls	r2, r3, #5
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	4413      	add	r3, r2
 800c73a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	68ba      	ldr	r2, [r7, #8]
 800c742:	0151      	lsls	r1, r2, #5
 800c744:	68fa      	ldr	r2, [r7, #12]
 800c746:	440a      	add	r2, r1
 800c748:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c74c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c750:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	791b      	ldrb	r3, [r3, #4]
 800c756:	2b03      	cmp	r3, #3
 800c758:	d003      	beq.n	800c762 <USB_EPClearStall+0x9e>
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	791b      	ldrb	r3, [r3, #4]
 800c75e:	2b02      	cmp	r3, #2
 800c760:	d10f      	bne.n	800c782 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	015a      	lsls	r2, r3, #5
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	4413      	add	r3, r2
 800c76a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	68ba      	ldr	r2, [r7, #8]
 800c772:	0151      	lsls	r1, r2, #5
 800c774:	68fa      	ldr	r2, [r7, #12]
 800c776:	440a      	add	r2, r1
 800c778:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c77c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c780:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c782:	2300      	movs	r3, #0
}
 800c784:	4618      	mov	r0, r3
 800c786:	3714      	adds	r7, #20
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr

0800c790 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c790:	b480      	push	{r7}
 800c792:	b085      	sub	sp, #20
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
 800c798:	460b      	mov	r3, r1
 800c79a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	68fa      	ldr	r2, [r7, #12]
 800c7aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c7ae:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c7b2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c7ba:	681a      	ldr	r2, [r3, #0]
 800c7bc:	78fb      	ldrb	r3, [r7, #3]
 800c7be:	011b      	lsls	r3, r3, #4
 800c7c0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800c7c4:	68f9      	ldr	r1, [r7, #12]
 800c7c6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c7ca:	4313      	orrs	r3, r2
 800c7cc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c7ce:	2300      	movs	r3, #0
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	3714      	adds	r7, #20
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7da:	4770      	bx	lr

0800c7dc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b085      	sub	sp, #20
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	68fa      	ldr	r2, [r7, #12]
 800c7f2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c7f6:	f023 0303 	bic.w	r3, r3, #3
 800c7fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c802:	685b      	ldr	r3, [r3, #4]
 800c804:	68fa      	ldr	r2, [r7, #12]
 800c806:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c80a:	f023 0302 	bic.w	r3, r3, #2
 800c80e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c810:	2300      	movs	r3, #0
}
 800c812:	4618      	mov	r0, r3
 800c814:	3714      	adds	r7, #20
 800c816:	46bd      	mov	sp, r7
 800c818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81c:	4770      	bx	lr

0800c81e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c81e:	b480      	push	{r7}
 800c820:	b085      	sub	sp, #20
 800c822:	af00      	add	r7, sp, #0
 800c824:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	68fa      	ldr	r2, [r7, #12]
 800c834:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c838:	f023 0303 	bic.w	r3, r3, #3
 800c83c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c844:	685b      	ldr	r3, [r3, #4]
 800c846:	68fa      	ldr	r2, [r7, #12]
 800c848:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c84c:	f043 0302 	orr.w	r3, r3, #2
 800c850:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c852:	2300      	movs	r3, #0
}
 800c854:	4618      	mov	r0, r3
 800c856:	3714      	adds	r7, #20
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr

0800c860 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800c860:	b480      	push	{r7}
 800c862:	b085      	sub	sp, #20
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	695b      	ldr	r3, [r3, #20]
 800c86c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	699b      	ldr	r3, [r3, #24]
 800c872:	68fa      	ldr	r2, [r7, #12]
 800c874:	4013      	ands	r3, r2
 800c876:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c878:	68fb      	ldr	r3, [r7, #12]
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3714      	adds	r7, #20
 800c87e:	46bd      	mov	sp, r7
 800c880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c884:	4770      	bx	lr

0800c886 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c886:	b480      	push	{r7}
 800c888:	b085      	sub	sp, #20
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c898:	699b      	ldr	r3, [r3, #24]
 800c89a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c8a2:	69db      	ldr	r3, [r3, #28]
 800c8a4:	68ba      	ldr	r2, [r7, #8]
 800c8a6:	4013      	ands	r3, r2
 800c8a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	0c1b      	lsrs	r3, r3, #16
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3714      	adds	r7, #20
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b8:	4770      	bx	lr

0800c8ba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c8ba:	b480      	push	{r7}
 800c8bc:	b085      	sub	sp, #20
 800c8be:	af00      	add	r7, sp, #0
 800c8c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c8cc:	699b      	ldr	r3, [r3, #24]
 800c8ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c8d6:	69db      	ldr	r3, [r3, #28]
 800c8d8:	68ba      	ldr	r2, [r7, #8]
 800c8da:	4013      	ands	r3, r2
 800c8dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	b29b      	uxth	r3, r3
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	3714      	adds	r7, #20
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ec:	4770      	bx	lr

0800c8ee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c8ee:	b480      	push	{r7}
 800c8f0:	b085      	sub	sp, #20
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	6078      	str	r0, [r7, #4]
 800c8f6:	460b      	mov	r3, r1
 800c8f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c8fe:	78fb      	ldrb	r3, [r7, #3]
 800c900:	015a      	lsls	r2, r3, #5
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	4413      	add	r3, r2
 800c906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c90a:	689b      	ldr	r3, [r3, #8]
 800c90c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c914:	695b      	ldr	r3, [r3, #20]
 800c916:	68ba      	ldr	r2, [r7, #8]
 800c918:	4013      	ands	r3, r2
 800c91a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c91c:	68bb      	ldr	r3, [r7, #8]
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3714      	adds	r7, #20
 800c922:	46bd      	mov	sp, r7
 800c924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c928:	4770      	bx	lr

0800c92a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c92a:	b480      	push	{r7}
 800c92c:	b087      	sub	sp, #28
 800c92e:	af00      	add	r7, sp, #0
 800c930:	6078      	str	r0, [r7, #4]
 800c932:	460b      	mov	r3, r1
 800c934:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c940:	691b      	ldr	r3, [r3, #16]
 800c942:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c944:	697b      	ldr	r3, [r7, #20]
 800c946:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c94a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c94c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c94e:	78fb      	ldrb	r3, [r7, #3]
 800c950:	f003 030f 	and.w	r3, r3, #15
 800c954:	68fa      	ldr	r2, [r7, #12]
 800c956:	fa22 f303 	lsr.w	r3, r2, r3
 800c95a:	01db      	lsls	r3, r3, #7
 800c95c:	b2db      	uxtb	r3, r3
 800c95e:	693a      	ldr	r2, [r7, #16]
 800c960:	4313      	orrs	r3, r2
 800c962:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c964:	78fb      	ldrb	r3, [r7, #3]
 800c966:	015a      	lsls	r2, r3, #5
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	4413      	add	r3, r2
 800c96c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c970:	689b      	ldr	r3, [r3, #8]
 800c972:	693a      	ldr	r2, [r7, #16]
 800c974:	4013      	ands	r3, r2
 800c976:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c978:	68bb      	ldr	r3, [r7, #8]
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	371c      	adds	r7, #28
 800c97e:	46bd      	mov	sp, r7
 800c980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c984:	4770      	bx	lr

0800c986 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800c986:	b480      	push	{r7}
 800c988:	b083      	sub	sp, #12
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	695b      	ldr	r3, [r3, #20]
 800c992:	f003 0301 	and.w	r3, r3, #1
}
 800c996:	4618      	mov	r0, r3
 800c998:	370c      	adds	r7, #12
 800c99a:	46bd      	mov	sp, r7
 800c99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a0:	4770      	bx	lr

0800c9a2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800c9a2:	b480      	push	{r7}
 800c9a4:	b085      	sub	sp, #20
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	68fa      	ldr	r2, [r7, #12]
 800c9b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c9bc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800c9c0:	f023 0307 	bic.w	r3, r3, #7
 800c9c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c9cc:	685b      	ldr	r3, [r3, #4]
 800c9ce:	68fa      	ldr	r2, [r7, #12]
 800c9d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c9d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c9d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c9da:	2300      	movs	r3, #0
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3714      	adds	r7, #20
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b087      	sub	sp, #28
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	60f8      	str	r0, [r7, #12]
 800c9f0:	460b      	mov	r3, r1
 800c9f2:	607a      	str	r2, [r7, #4]
 800c9f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	333c      	adds	r3, #60	@ 0x3c
 800c9fe:	3304      	adds	r3, #4
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	4a26      	ldr	r2, [pc, #152]	@ (800caa0 <USB_EP0_OutStart+0xb8>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d90a      	bls.n	800ca22 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ca18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ca1c:	d101      	bne.n	800ca22 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	e037      	b.n	800ca92 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca28:	461a      	mov	r2, r3
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca34:	691b      	ldr	r3, [r3, #16]
 800ca36:	697a      	ldr	r2, [r7, #20]
 800ca38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ca3c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ca40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ca42:	697b      	ldr	r3, [r7, #20]
 800ca44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca48:	691b      	ldr	r3, [r3, #16]
 800ca4a:	697a      	ldr	r2, [r7, #20]
 800ca4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ca50:	f043 0318 	orr.w	r3, r3, #24
 800ca54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca5c:	691b      	ldr	r3, [r3, #16]
 800ca5e:	697a      	ldr	r2, [r7, #20]
 800ca60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ca64:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ca68:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ca6a:	7afb      	ldrb	r3, [r7, #11]
 800ca6c:	2b01      	cmp	r3, #1
 800ca6e:	d10f      	bne.n	800ca90 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca76:	461a      	mov	r2, r3
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	697a      	ldr	r2, [r7, #20]
 800ca86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ca8a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800ca8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ca90:	2300      	movs	r3, #0
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	371c      	adds	r7, #28
 800ca96:	46bd      	mov	sp, r7
 800ca98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9c:	4770      	bx	lr
 800ca9e:	bf00      	nop
 800caa0:	4f54300a 	.word	0x4f54300a

0800caa4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800caa4:	b480      	push	{r7}
 800caa6:	b085      	sub	sp, #20
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800caac:	2300      	movs	r3, #0
 800caae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	3301      	adds	r3, #1
 800cab4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cabc:	d901      	bls.n	800cac2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cabe:	2303      	movs	r3, #3
 800cac0:	e022      	b.n	800cb08 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	691b      	ldr	r3, [r3, #16]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	daf2      	bge.n	800cab0 <USB_CoreReset+0xc>

  count = 10U;
 800caca:	230a      	movs	r3, #10
 800cacc:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800cace:	e002      	b.n	800cad6 <USB_CoreReset+0x32>
  {
    count--;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	3b01      	subs	r3, #1
 800cad4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d1f9      	bne.n	800cad0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	691b      	ldr	r3, [r3, #16]
 800cae0:	f043 0201 	orr.w	r2, r3, #1
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	3301      	adds	r3, #1
 800caec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800caf4:	d901      	bls.n	800cafa <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800caf6:	2303      	movs	r3, #3
 800caf8:	e006      	b.n	800cb08 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	691b      	ldr	r3, [r3, #16]
 800cafe:	f003 0301 	and.w	r3, r3, #1
 800cb02:	2b01      	cmp	r3, #1
 800cb04:	d0f0      	beq.n	800cae8 <USB_CoreReset+0x44>

  return HAL_OK;
 800cb06:	2300      	movs	r3, #0
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3714      	adds	r7, #20
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb12:	4770      	bx	lr

0800cb14 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b084      	sub	sp, #16
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
 800cb1c:	460b      	mov	r3, r1
 800cb1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cb20:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800cb24:	f002 fd20 	bl	800f568 <USBD_static_malloc>
 800cb28:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d109      	bne.n	800cb44 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	32b0      	adds	r2, #176	@ 0xb0
 800cb3a:	2100      	movs	r1, #0
 800cb3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800cb40:	2302      	movs	r3, #2
 800cb42:	e0d4      	b.n	800ccee <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800cb44:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800cb48:	2100      	movs	r1, #0
 800cb4a:	68f8      	ldr	r0, [r7, #12]
 800cb4c:	f003 fd91 	bl	8010672 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	32b0      	adds	r2, #176	@ 0xb0
 800cb5a:	68f9      	ldr	r1, [r7, #12]
 800cb5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	32b0      	adds	r2, #176	@ 0xb0
 800cb6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	7c1b      	ldrb	r3, [r3, #16]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d138      	bne.n	800cbee <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cb7c:	4b5e      	ldr	r3, [pc, #376]	@ (800ccf8 <USBD_CDC_Init+0x1e4>)
 800cb7e:	7819      	ldrb	r1, [r3, #0]
 800cb80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cb84:	2202      	movs	r2, #2
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f002 fbcb 	bl	800f322 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cb8c:	4b5a      	ldr	r3, [pc, #360]	@ (800ccf8 <USBD_CDC_Init+0x1e4>)
 800cb8e:	781b      	ldrb	r3, [r3, #0]
 800cb90:	f003 020f 	and.w	r2, r3, #15
 800cb94:	6879      	ldr	r1, [r7, #4]
 800cb96:	4613      	mov	r3, r2
 800cb98:	009b      	lsls	r3, r3, #2
 800cb9a:	4413      	add	r3, r2
 800cb9c:	009b      	lsls	r3, r3, #2
 800cb9e:	440b      	add	r3, r1
 800cba0:	3323      	adds	r3, #35	@ 0x23
 800cba2:	2201      	movs	r2, #1
 800cba4:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cba6:	4b55      	ldr	r3, [pc, #340]	@ (800ccfc <USBD_CDC_Init+0x1e8>)
 800cba8:	7819      	ldrb	r1, [r3, #0]
 800cbaa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cbae:	2202      	movs	r2, #2
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f002 fbb6 	bl	800f322 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cbb6:	4b51      	ldr	r3, [pc, #324]	@ (800ccfc <USBD_CDC_Init+0x1e8>)
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	f003 020f 	and.w	r2, r3, #15
 800cbbe:	6879      	ldr	r1, [r7, #4]
 800cbc0:	4613      	mov	r3, r2
 800cbc2:	009b      	lsls	r3, r3, #2
 800cbc4:	4413      	add	r3, r2
 800cbc6:	009b      	lsls	r3, r3, #2
 800cbc8:	440b      	add	r3, r1
 800cbca:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800cbce:	2201      	movs	r2, #1
 800cbd0:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cbd2:	4b4b      	ldr	r3, [pc, #300]	@ (800cd00 <USBD_CDC_Init+0x1ec>)
 800cbd4:	781b      	ldrb	r3, [r3, #0]
 800cbd6:	f003 020f 	and.w	r2, r3, #15
 800cbda:	6879      	ldr	r1, [r7, #4]
 800cbdc:	4613      	mov	r3, r2
 800cbde:	009b      	lsls	r3, r3, #2
 800cbe0:	4413      	add	r3, r2
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	440b      	add	r3, r1
 800cbe6:	331c      	adds	r3, #28
 800cbe8:	2210      	movs	r2, #16
 800cbea:	601a      	str	r2, [r3, #0]
 800cbec:	e035      	b.n	800cc5a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cbee:	4b42      	ldr	r3, [pc, #264]	@ (800ccf8 <USBD_CDC_Init+0x1e4>)
 800cbf0:	7819      	ldrb	r1, [r3, #0]
 800cbf2:	2340      	movs	r3, #64	@ 0x40
 800cbf4:	2202      	movs	r2, #2
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f002 fb93 	bl	800f322 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cbfc:	4b3e      	ldr	r3, [pc, #248]	@ (800ccf8 <USBD_CDC_Init+0x1e4>)
 800cbfe:	781b      	ldrb	r3, [r3, #0]
 800cc00:	f003 020f 	and.w	r2, r3, #15
 800cc04:	6879      	ldr	r1, [r7, #4]
 800cc06:	4613      	mov	r3, r2
 800cc08:	009b      	lsls	r3, r3, #2
 800cc0a:	4413      	add	r3, r2
 800cc0c:	009b      	lsls	r3, r3, #2
 800cc0e:	440b      	add	r3, r1
 800cc10:	3323      	adds	r3, #35	@ 0x23
 800cc12:	2201      	movs	r2, #1
 800cc14:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cc16:	4b39      	ldr	r3, [pc, #228]	@ (800ccfc <USBD_CDC_Init+0x1e8>)
 800cc18:	7819      	ldrb	r1, [r3, #0]
 800cc1a:	2340      	movs	r3, #64	@ 0x40
 800cc1c:	2202      	movs	r2, #2
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f002 fb7f 	bl	800f322 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cc24:	4b35      	ldr	r3, [pc, #212]	@ (800ccfc <USBD_CDC_Init+0x1e8>)
 800cc26:	781b      	ldrb	r3, [r3, #0]
 800cc28:	f003 020f 	and.w	r2, r3, #15
 800cc2c:	6879      	ldr	r1, [r7, #4]
 800cc2e:	4613      	mov	r3, r2
 800cc30:	009b      	lsls	r3, r3, #2
 800cc32:	4413      	add	r3, r2
 800cc34:	009b      	lsls	r3, r3, #2
 800cc36:	440b      	add	r3, r1
 800cc38:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800cc3c:	2201      	movs	r2, #1
 800cc3e:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cc40:	4b2f      	ldr	r3, [pc, #188]	@ (800cd00 <USBD_CDC_Init+0x1ec>)
 800cc42:	781b      	ldrb	r3, [r3, #0]
 800cc44:	f003 020f 	and.w	r2, r3, #15
 800cc48:	6879      	ldr	r1, [r7, #4]
 800cc4a:	4613      	mov	r3, r2
 800cc4c:	009b      	lsls	r3, r3, #2
 800cc4e:	4413      	add	r3, r2
 800cc50:	009b      	lsls	r3, r3, #2
 800cc52:	440b      	add	r3, r1
 800cc54:	331c      	adds	r3, #28
 800cc56:	2210      	movs	r2, #16
 800cc58:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cc5a:	4b29      	ldr	r3, [pc, #164]	@ (800cd00 <USBD_CDC_Init+0x1ec>)
 800cc5c:	7819      	ldrb	r1, [r3, #0]
 800cc5e:	2308      	movs	r3, #8
 800cc60:	2203      	movs	r2, #3
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f002 fb5d 	bl	800f322 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800cc68:	4b25      	ldr	r3, [pc, #148]	@ (800cd00 <USBD_CDC_Init+0x1ec>)
 800cc6a:	781b      	ldrb	r3, [r3, #0]
 800cc6c:	f003 020f 	and.w	r2, r3, #15
 800cc70:	6879      	ldr	r1, [r7, #4]
 800cc72:	4613      	mov	r3, r2
 800cc74:	009b      	lsls	r3, r3, #2
 800cc76:	4413      	add	r3, r2
 800cc78:	009b      	lsls	r3, r3, #2
 800cc7a:	440b      	add	r3, r1
 800cc7c:	3323      	adds	r3, #35	@ 0x23
 800cc7e:	2201      	movs	r2, #1
 800cc80:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	2200      	movs	r2, #0
 800cc86:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cc90:	687a      	ldr	r2, [r7, #4]
 800cc92:	33b0      	adds	r3, #176	@ 0xb0
 800cc94:	009b      	lsls	r3, r3, #2
 800cc96:	4413      	add	r3, r2
 800cc98:	685b      	ldr	r3, [r3, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	2200      	movs	r2, #0
 800cca2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	2200      	movs	r2, #0
 800ccaa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d101      	bne.n	800ccbc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ccb8:	2302      	movs	r3, #2
 800ccba:	e018      	b.n	800ccee <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	7c1b      	ldrb	r3, [r3, #16]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d10a      	bne.n	800ccda <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ccc4:	4b0d      	ldr	r3, [pc, #52]	@ (800ccfc <USBD_CDC_Init+0x1e8>)
 800ccc6:	7819      	ldrb	r1, [r3, #0]
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ccce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f002 fc14 	bl	800f500 <USBD_LL_PrepareReceive>
 800ccd8:	e008      	b.n	800ccec <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ccda:	4b08      	ldr	r3, [pc, #32]	@ (800ccfc <USBD_CDC_Init+0x1e8>)
 800ccdc:	7819      	ldrb	r1, [r3, #0]
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cce4:	2340      	movs	r3, #64	@ 0x40
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f002 fc0a 	bl	800f500 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ccec:	2300      	movs	r3, #0
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3710      	adds	r7, #16
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}
 800ccf6:	bf00      	nop
 800ccf8:	2000009b 	.word	0x2000009b
 800ccfc:	2000009c 	.word	0x2000009c
 800cd00:	2000009d 	.word	0x2000009d

0800cd04 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b082      	sub	sp, #8
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	460b      	mov	r3, r1
 800cd0e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800cd10:	4b3a      	ldr	r3, [pc, #232]	@ (800cdfc <USBD_CDC_DeInit+0xf8>)
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	4619      	mov	r1, r3
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f002 fb29 	bl	800f36e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800cd1c:	4b37      	ldr	r3, [pc, #220]	@ (800cdfc <USBD_CDC_DeInit+0xf8>)
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	f003 020f 	and.w	r2, r3, #15
 800cd24:	6879      	ldr	r1, [r7, #4]
 800cd26:	4613      	mov	r3, r2
 800cd28:	009b      	lsls	r3, r3, #2
 800cd2a:	4413      	add	r3, r2
 800cd2c:	009b      	lsls	r3, r3, #2
 800cd2e:	440b      	add	r3, r1
 800cd30:	3323      	adds	r3, #35	@ 0x23
 800cd32:	2200      	movs	r2, #0
 800cd34:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800cd36:	4b32      	ldr	r3, [pc, #200]	@ (800ce00 <USBD_CDC_DeInit+0xfc>)
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	4619      	mov	r1, r3
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f002 fb16 	bl	800f36e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800cd42:	4b2f      	ldr	r3, [pc, #188]	@ (800ce00 <USBD_CDC_DeInit+0xfc>)
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	f003 020f 	and.w	r2, r3, #15
 800cd4a:	6879      	ldr	r1, [r7, #4]
 800cd4c:	4613      	mov	r3, r2
 800cd4e:	009b      	lsls	r3, r3, #2
 800cd50:	4413      	add	r3, r2
 800cd52:	009b      	lsls	r3, r3, #2
 800cd54:	440b      	add	r3, r1
 800cd56:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800cd5e:	4b29      	ldr	r3, [pc, #164]	@ (800ce04 <USBD_CDC_DeInit+0x100>)
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	4619      	mov	r1, r3
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f002 fb02 	bl	800f36e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800cd6a:	4b26      	ldr	r3, [pc, #152]	@ (800ce04 <USBD_CDC_DeInit+0x100>)
 800cd6c:	781b      	ldrb	r3, [r3, #0]
 800cd6e:	f003 020f 	and.w	r2, r3, #15
 800cd72:	6879      	ldr	r1, [r7, #4]
 800cd74:	4613      	mov	r3, r2
 800cd76:	009b      	lsls	r3, r3, #2
 800cd78:	4413      	add	r3, r2
 800cd7a:	009b      	lsls	r3, r3, #2
 800cd7c:	440b      	add	r3, r1
 800cd7e:	3323      	adds	r3, #35	@ 0x23
 800cd80:	2200      	movs	r2, #0
 800cd82:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800cd84:	4b1f      	ldr	r3, [pc, #124]	@ (800ce04 <USBD_CDC_DeInit+0x100>)
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	f003 020f 	and.w	r2, r3, #15
 800cd8c:	6879      	ldr	r1, [r7, #4]
 800cd8e:	4613      	mov	r3, r2
 800cd90:	009b      	lsls	r3, r3, #2
 800cd92:	4413      	add	r3, r2
 800cd94:	009b      	lsls	r3, r3, #2
 800cd96:	440b      	add	r3, r1
 800cd98:	331c      	adds	r3, #28
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	32b0      	adds	r2, #176	@ 0xb0
 800cda8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d01f      	beq.n	800cdf0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cdb6:	687a      	ldr	r2, [r7, #4]
 800cdb8:	33b0      	adds	r3, #176	@ 0xb0
 800cdba:	009b      	lsls	r3, r3, #2
 800cdbc:	4413      	add	r3, r2
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	685b      	ldr	r3, [r3, #4]
 800cdc2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	32b0      	adds	r2, #176	@ 0xb0
 800cdce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f002 fbd6 	bl	800f584 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	32b0      	adds	r2, #176	@ 0xb0
 800cde2:	2100      	movs	r1, #0
 800cde4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2200      	movs	r2, #0
 800cdec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cdf0:	2300      	movs	r3, #0
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	3708      	adds	r7, #8
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}
 800cdfa:	bf00      	nop
 800cdfc:	2000009b 	.word	0x2000009b
 800ce00:	2000009c 	.word	0x2000009c
 800ce04:	2000009d 	.word	0x2000009d

0800ce08 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b086      	sub	sp, #24
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	32b0      	adds	r2, #176	@ 0xb0
 800ce1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce20:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ce22:	2300      	movs	r3, #0
 800ce24:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ce26:	2300      	movs	r3, #0
 800ce28:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d101      	bne.n	800ce38 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ce34:	2303      	movs	r3, #3
 800ce36:	e0bf      	b.n	800cfb8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d050      	beq.n	800cee6 <USBD_CDC_Setup+0xde>
 800ce44:	2b20      	cmp	r3, #32
 800ce46:	f040 80af 	bne.w	800cfa8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	88db      	ldrh	r3, [r3, #6]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d03a      	beq.n	800cec8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	781b      	ldrb	r3, [r3, #0]
 800ce56:	b25b      	sxtb	r3, r3
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	da1b      	bge.n	800ce94 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ce62:	687a      	ldr	r2, [r7, #4]
 800ce64:	33b0      	adds	r3, #176	@ 0xb0
 800ce66:	009b      	lsls	r3, r3, #2
 800ce68:	4413      	add	r3, r2
 800ce6a:	685b      	ldr	r3, [r3, #4]
 800ce6c:	689b      	ldr	r3, [r3, #8]
 800ce6e:	683a      	ldr	r2, [r7, #0]
 800ce70:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ce72:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ce74:	683a      	ldr	r2, [r7, #0]
 800ce76:	88d2      	ldrh	r2, [r2, #6]
 800ce78:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	88db      	ldrh	r3, [r3, #6]
 800ce7e:	2b07      	cmp	r3, #7
 800ce80:	bf28      	it	cs
 800ce82:	2307      	movcs	r3, #7
 800ce84:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	89fa      	ldrh	r2, [r7, #14]
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f001 fda9 	bl	800e9e4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ce92:	e090      	b.n	800cfb6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	785a      	ldrb	r2, [r3, #1]
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	88db      	ldrh	r3, [r3, #6]
 800cea2:	2b3f      	cmp	r3, #63	@ 0x3f
 800cea4:	d803      	bhi.n	800ceae <USBD_CDC_Setup+0xa6>
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	88db      	ldrh	r3, [r3, #6]
 800ceaa:	b2da      	uxtb	r2, r3
 800ceac:	e000      	b.n	800ceb0 <USBD_CDC_Setup+0xa8>
 800ceae:	2240      	movs	r2, #64	@ 0x40
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ceb6:	6939      	ldr	r1, [r7, #16]
 800ceb8:	693b      	ldr	r3, [r7, #16]
 800ceba:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800cebe:	461a      	mov	r2, r3
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f001 fdbe 	bl	800ea42 <USBD_CtlPrepareRx>
      break;
 800cec6:	e076      	b.n	800cfb6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cece:	687a      	ldr	r2, [r7, #4]
 800ced0:	33b0      	adds	r3, #176	@ 0xb0
 800ced2:	009b      	lsls	r3, r3, #2
 800ced4:	4413      	add	r3, r2
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	689b      	ldr	r3, [r3, #8]
 800ceda:	683a      	ldr	r2, [r7, #0]
 800cedc:	7850      	ldrb	r0, [r2, #1]
 800cede:	2200      	movs	r2, #0
 800cee0:	6839      	ldr	r1, [r7, #0]
 800cee2:	4798      	blx	r3
      break;
 800cee4:	e067      	b.n	800cfb6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	785b      	ldrb	r3, [r3, #1]
 800ceea:	2b0b      	cmp	r3, #11
 800ceec:	d851      	bhi.n	800cf92 <USBD_CDC_Setup+0x18a>
 800ceee:	a201      	add	r2, pc, #4	@ (adr r2, 800cef4 <USBD_CDC_Setup+0xec>)
 800cef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cef4:	0800cf25 	.word	0x0800cf25
 800cef8:	0800cfa1 	.word	0x0800cfa1
 800cefc:	0800cf93 	.word	0x0800cf93
 800cf00:	0800cf93 	.word	0x0800cf93
 800cf04:	0800cf93 	.word	0x0800cf93
 800cf08:	0800cf93 	.word	0x0800cf93
 800cf0c:	0800cf93 	.word	0x0800cf93
 800cf10:	0800cf93 	.word	0x0800cf93
 800cf14:	0800cf93 	.word	0x0800cf93
 800cf18:	0800cf93 	.word	0x0800cf93
 800cf1c:	0800cf4f 	.word	0x0800cf4f
 800cf20:	0800cf79 	.word	0x0800cf79
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf2a:	b2db      	uxtb	r3, r3
 800cf2c:	2b03      	cmp	r3, #3
 800cf2e:	d107      	bne.n	800cf40 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cf30:	f107 030a 	add.w	r3, r7, #10
 800cf34:	2202      	movs	r2, #2
 800cf36:	4619      	mov	r1, r3
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f001 fd53 	bl	800e9e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cf3e:	e032      	b.n	800cfa6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cf40:	6839      	ldr	r1, [r7, #0]
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f001 fcd1 	bl	800e8ea <USBD_CtlError>
            ret = USBD_FAIL;
 800cf48:	2303      	movs	r3, #3
 800cf4a:	75fb      	strb	r3, [r7, #23]
          break;
 800cf4c:	e02b      	b.n	800cfa6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf54:	b2db      	uxtb	r3, r3
 800cf56:	2b03      	cmp	r3, #3
 800cf58:	d107      	bne.n	800cf6a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800cf5a:	f107 030d 	add.w	r3, r7, #13
 800cf5e:	2201      	movs	r2, #1
 800cf60:	4619      	mov	r1, r3
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f001 fd3e 	bl	800e9e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cf68:	e01d      	b.n	800cfa6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cf6a:	6839      	ldr	r1, [r7, #0]
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f001 fcbc 	bl	800e8ea <USBD_CtlError>
            ret = USBD_FAIL;
 800cf72:	2303      	movs	r3, #3
 800cf74:	75fb      	strb	r3, [r7, #23]
          break;
 800cf76:	e016      	b.n	800cfa6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf7e:	b2db      	uxtb	r3, r3
 800cf80:	2b03      	cmp	r3, #3
 800cf82:	d00f      	beq.n	800cfa4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800cf84:	6839      	ldr	r1, [r7, #0]
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f001 fcaf 	bl	800e8ea <USBD_CtlError>
            ret = USBD_FAIL;
 800cf8c:	2303      	movs	r3, #3
 800cf8e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cf90:	e008      	b.n	800cfa4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cf92:	6839      	ldr	r1, [r7, #0]
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f001 fca8 	bl	800e8ea <USBD_CtlError>
          ret = USBD_FAIL;
 800cf9a:	2303      	movs	r3, #3
 800cf9c:	75fb      	strb	r3, [r7, #23]
          break;
 800cf9e:	e002      	b.n	800cfa6 <USBD_CDC_Setup+0x19e>
          break;
 800cfa0:	bf00      	nop
 800cfa2:	e008      	b.n	800cfb6 <USBD_CDC_Setup+0x1ae>
          break;
 800cfa4:	bf00      	nop
      }
      break;
 800cfa6:	e006      	b.n	800cfb6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800cfa8:	6839      	ldr	r1, [r7, #0]
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f001 fc9d 	bl	800e8ea <USBD_CtlError>
      ret = USBD_FAIL;
 800cfb0:	2303      	movs	r3, #3
 800cfb2:	75fb      	strb	r3, [r7, #23]
      break;
 800cfb4:	bf00      	nop
  }

  return (uint8_t)ret;
 800cfb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	3718      	adds	r7, #24
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}

0800cfc0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b084      	sub	sp, #16
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	460b      	mov	r3, r1
 800cfca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cfd2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	32b0      	adds	r2, #176	@ 0xb0
 800cfde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d101      	bne.n	800cfea <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800cfe6:	2303      	movs	r3, #3
 800cfe8:	e065      	b.n	800d0b6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	32b0      	adds	r2, #176	@ 0xb0
 800cff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cff8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cffa:	78fb      	ldrb	r3, [r7, #3]
 800cffc:	f003 020f 	and.w	r2, r3, #15
 800d000:	6879      	ldr	r1, [r7, #4]
 800d002:	4613      	mov	r3, r2
 800d004:	009b      	lsls	r3, r3, #2
 800d006:	4413      	add	r3, r2
 800d008:	009b      	lsls	r3, r3, #2
 800d00a:	440b      	add	r3, r1
 800d00c:	3314      	adds	r3, #20
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d02f      	beq.n	800d074 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d014:	78fb      	ldrb	r3, [r7, #3]
 800d016:	f003 020f 	and.w	r2, r3, #15
 800d01a:	6879      	ldr	r1, [r7, #4]
 800d01c:	4613      	mov	r3, r2
 800d01e:	009b      	lsls	r3, r3, #2
 800d020:	4413      	add	r3, r2
 800d022:	009b      	lsls	r3, r3, #2
 800d024:	440b      	add	r3, r1
 800d026:	3314      	adds	r3, #20
 800d028:	681a      	ldr	r2, [r3, #0]
 800d02a:	78fb      	ldrb	r3, [r7, #3]
 800d02c:	f003 010f 	and.w	r1, r3, #15
 800d030:	68f8      	ldr	r0, [r7, #12]
 800d032:	460b      	mov	r3, r1
 800d034:	00db      	lsls	r3, r3, #3
 800d036:	440b      	add	r3, r1
 800d038:	009b      	lsls	r3, r3, #2
 800d03a:	4403      	add	r3, r0
 800d03c:	331c      	adds	r3, #28
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	fbb2 f1f3 	udiv	r1, r2, r3
 800d044:	fb01 f303 	mul.w	r3, r1, r3
 800d048:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d112      	bne.n	800d074 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d04e:	78fb      	ldrb	r3, [r7, #3]
 800d050:	f003 020f 	and.w	r2, r3, #15
 800d054:	6879      	ldr	r1, [r7, #4]
 800d056:	4613      	mov	r3, r2
 800d058:	009b      	lsls	r3, r3, #2
 800d05a:	4413      	add	r3, r2
 800d05c:	009b      	lsls	r3, r3, #2
 800d05e:	440b      	add	r3, r1
 800d060:	3314      	adds	r3, #20
 800d062:	2200      	movs	r2, #0
 800d064:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d066:	78f9      	ldrb	r1, [r7, #3]
 800d068:	2300      	movs	r3, #0
 800d06a:	2200      	movs	r2, #0
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f002 fa26 	bl	800f4be <USBD_LL_Transmit>
 800d072:	e01f      	b.n	800d0b4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	2200      	movs	r2, #0
 800d078:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d082:	687a      	ldr	r2, [r7, #4]
 800d084:	33b0      	adds	r3, #176	@ 0xb0
 800d086:	009b      	lsls	r3, r3, #2
 800d088:	4413      	add	r3, r2
 800d08a:	685b      	ldr	r3, [r3, #4]
 800d08c:	691b      	ldr	r3, [r3, #16]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d010      	beq.n	800d0b4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d098:	687a      	ldr	r2, [r7, #4]
 800d09a:	33b0      	adds	r3, #176	@ 0xb0
 800d09c:	009b      	lsls	r3, r3, #2
 800d09e:	4413      	add	r3, r2
 800d0a0:	685b      	ldr	r3, [r3, #4]
 800d0a2:	691b      	ldr	r3, [r3, #16]
 800d0a4:	68ba      	ldr	r2, [r7, #8]
 800d0a6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d0aa:	68ba      	ldr	r2, [r7, #8]
 800d0ac:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d0b0:	78fa      	ldrb	r2, [r7, #3]
 800d0b2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d0b4:	2300      	movs	r3, #0
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3710      	adds	r7, #16
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}

0800d0be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d0be:	b580      	push	{r7, lr}
 800d0c0:	b084      	sub	sp, #16
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
 800d0c6:	460b      	mov	r3, r1
 800d0c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	32b0      	adds	r2, #176	@ 0xb0
 800d0d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0d8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	32b0      	adds	r2, #176	@ 0xb0
 800d0e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d101      	bne.n	800d0f0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d0ec:	2303      	movs	r3, #3
 800d0ee:	e01a      	b.n	800d126 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d0f0:	78fb      	ldrb	r3, [r7, #3]
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f002 fa24 	bl	800f542 <USBD_LL_GetRxDataSize>
 800d0fa:	4602      	mov	r2, r0
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d108:	687a      	ldr	r2, [r7, #4]
 800d10a:	33b0      	adds	r3, #176	@ 0xb0
 800d10c:	009b      	lsls	r3, r3, #2
 800d10e:	4413      	add	r3, r2
 800d110:	685b      	ldr	r3, [r3, #4]
 800d112:	68db      	ldr	r3, [r3, #12]
 800d114:	68fa      	ldr	r2, [r7, #12]
 800d116:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d11a:	68fa      	ldr	r2, [r7, #12]
 800d11c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d120:	4611      	mov	r1, r2
 800d122:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d124:	2300      	movs	r3, #0
}
 800d126:	4618      	mov	r0, r3
 800d128:	3710      	adds	r7, #16
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}

0800d12e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d12e:	b580      	push	{r7, lr}
 800d130:	b084      	sub	sp, #16
 800d132:	af00      	add	r7, sp, #0
 800d134:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	32b0      	adds	r2, #176	@ 0xb0
 800d140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d144:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d101      	bne.n	800d150 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d14c:	2303      	movs	r3, #3
 800d14e:	e024      	b.n	800d19a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d156:	687a      	ldr	r2, [r7, #4]
 800d158:	33b0      	adds	r3, #176	@ 0xb0
 800d15a:	009b      	lsls	r3, r3, #2
 800d15c:	4413      	add	r3, r2
 800d15e:	685b      	ldr	r3, [r3, #4]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d019      	beq.n	800d198 <USBD_CDC_EP0_RxReady+0x6a>
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d16a:	2bff      	cmp	r3, #255	@ 0xff
 800d16c:	d014      	beq.n	800d198 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d174:	687a      	ldr	r2, [r7, #4]
 800d176:	33b0      	adds	r3, #176	@ 0xb0
 800d178:	009b      	lsls	r3, r3, #2
 800d17a:	4413      	add	r3, r2
 800d17c:	685b      	ldr	r3, [r3, #4]
 800d17e:	689b      	ldr	r3, [r3, #8]
 800d180:	68fa      	ldr	r2, [r7, #12]
 800d182:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800d186:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d188:	68fa      	ldr	r2, [r7, #12]
 800d18a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d18e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	22ff      	movs	r2, #255	@ 0xff
 800d194:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800d198:	2300      	movs	r3, #0
}
 800d19a:	4618      	mov	r0, r3
 800d19c:	3710      	adds	r7, #16
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}
	...

0800d1a4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b086      	sub	sp, #24
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d1ac:	2182      	movs	r1, #130	@ 0x82
 800d1ae:	4818      	ldr	r0, [pc, #96]	@ (800d210 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d1b0:	f000 fd62 	bl	800dc78 <USBD_GetEpDesc>
 800d1b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d1b6:	2101      	movs	r1, #1
 800d1b8:	4815      	ldr	r0, [pc, #84]	@ (800d210 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d1ba:	f000 fd5d 	bl	800dc78 <USBD_GetEpDesc>
 800d1be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d1c0:	2181      	movs	r1, #129	@ 0x81
 800d1c2:	4813      	ldr	r0, [pc, #76]	@ (800d210 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d1c4:	f000 fd58 	bl	800dc78 <USBD_GetEpDesc>
 800d1c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d002      	beq.n	800d1d6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	2210      	movs	r2, #16
 800d1d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d006      	beq.n	800d1ea <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d1e4:	711a      	strb	r2, [r3, #4]
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d006      	beq.n	800d1fe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d1f8:	711a      	strb	r2, [r3, #4]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2243      	movs	r2, #67	@ 0x43
 800d202:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d204:	4b02      	ldr	r3, [pc, #8]	@ (800d210 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d206:	4618      	mov	r0, r3
 800d208:	3718      	adds	r7, #24
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}
 800d20e:	bf00      	nop
 800d210:	20000058 	.word	0x20000058

0800d214 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b086      	sub	sp, #24
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d21c:	2182      	movs	r1, #130	@ 0x82
 800d21e:	4818      	ldr	r0, [pc, #96]	@ (800d280 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d220:	f000 fd2a 	bl	800dc78 <USBD_GetEpDesc>
 800d224:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d226:	2101      	movs	r1, #1
 800d228:	4815      	ldr	r0, [pc, #84]	@ (800d280 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d22a:	f000 fd25 	bl	800dc78 <USBD_GetEpDesc>
 800d22e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d230:	2181      	movs	r1, #129	@ 0x81
 800d232:	4813      	ldr	r0, [pc, #76]	@ (800d280 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d234:	f000 fd20 	bl	800dc78 <USBD_GetEpDesc>
 800d238:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d002      	beq.n	800d246 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	2210      	movs	r2, #16
 800d244:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d006      	beq.n	800d25a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	2200      	movs	r2, #0
 800d250:	711a      	strb	r2, [r3, #4]
 800d252:	2200      	movs	r2, #0
 800d254:	f042 0202 	orr.w	r2, r2, #2
 800d258:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d006      	beq.n	800d26e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	2200      	movs	r2, #0
 800d264:	711a      	strb	r2, [r3, #4]
 800d266:	2200      	movs	r2, #0
 800d268:	f042 0202 	orr.w	r2, r2, #2
 800d26c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2243      	movs	r2, #67	@ 0x43
 800d272:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d274:	4b02      	ldr	r3, [pc, #8]	@ (800d280 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d276:	4618      	mov	r0, r3
 800d278:	3718      	adds	r7, #24
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}
 800d27e:	bf00      	nop
 800d280:	20000058 	.word	0x20000058

0800d284 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b086      	sub	sp, #24
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d28c:	2182      	movs	r1, #130	@ 0x82
 800d28e:	4818      	ldr	r0, [pc, #96]	@ (800d2f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d290:	f000 fcf2 	bl	800dc78 <USBD_GetEpDesc>
 800d294:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d296:	2101      	movs	r1, #1
 800d298:	4815      	ldr	r0, [pc, #84]	@ (800d2f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d29a:	f000 fced 	bl	800dc78 <USBD_GetEpDesc>
 800d29e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d2a0:	2181      	movs	r1, #129	@ 0x81
 800d2a2:	4813      	ldr	r0, [pc, #76]	@ (800d2f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d2a4:	f000 fce8 	bl	800dc78 <USBD_GetEpDesc>
 800d2a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d002      	beq.n	800d2b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d2b0:	697b      	ldr	r3, [r7, #20]
 800d2b2:	2210      	movs	r2, #16
 800d2b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d006      	beq.n	800d2ca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d2c4:	711a      	strb	r2, [r3, #4]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d006      	beq.n	800d2de <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d2d8:	711a      	strb	r2, [r3, #4]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2243      	movs	r2, #67	@ 0x43
 800d2e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d2e4:	4b02      	ldr	r3, [pc, #8]	@ (800d2f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3718      	adds	r7, #24
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}
 800d2ee:	bf00      	nop
 800d2f0:	20000058 	.word	0x20000058

0800d2f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d2f4:	b480      	push	{r7}
 800d2f6:	b083      	sub	sp, #12
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	220a      	movs	r2, #10
 800d300:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d302:	4b03      	ldr	r3, [pc, #12]	@ (800d310 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d304:	4618      	mov	r0, r3
 800d306:	370c      	adds	r7, #12
 800d308:	46bd      	mov	sp, r7
 800d30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30e:	4770      	bx	lr
 800d310:	20000014 	.word	0x20000014

0800d314 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d314:	b480      	push	{r7}
 800d316:	b083      	sub	sp, #12
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d101      	bne.n	800d328 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d324:	2303      	movs	r3, #3
 800d326:	e009      	b.n	800d33c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d32e:	687a      	ldr	r2, [r7, #4]
 800d330:	33b0      	adds	r3, #176	@ 0xb0
 800d332:	009b      	lsls	r3, r3, #2
 800d334:	4413      	add	r3, r2
 800d336:	683a      	ldr	r2, [r7, #0]
 800d338:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d33a:	2300      	movs	r3, #0
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	370c      	adds	r7, #12
 800d340:	46bd      	mov	sp, r7
 800d342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d346:	4770      	bx	lr

0800d348 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d348:	b480      	push	{r7}
 800d34a:	b087      	sub	sp, #28
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	60f8      	str	r0, [r7, #12]
 800d350:	60b9      	str	r1, [r7, #8]
 800d352:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	32b0      	adds	r2, #176	@ 0xb0
 800d35e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d362:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d364:	697b      	ldr	r3, [r7, #20]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d101      	bne.n	800d36e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d36a:	2303      	movs	r3, #3
 800d36c:	e008      	b.n	800d380 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	68ba      	ldr	r2, [r7, #8]
 800d372:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	687a      	ldr	r2, [r7, #4]
 800d37a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d37e:	2300      	movs	r3, #0
}
 800d380:	4618      	mov	r0, r3
 800d382:	371c      	adds	r7, #28
 800d384:	46bd      	mov	sp, r7
 800d386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38a:	4770      	bx	lr

0800d38c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b085      	sub	sp, #20
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
 800d394:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	32b0      	adds	r2, #176	@ 0xb0
 800d3a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d101      	bne.n	800d3b0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d3ac:	2303      	movs	r3, #3
 800d3ae:	e004      	b.n	800d3ba <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	683a      	ldr	r2, [r7, #0]
 800d3b4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800d3b8:	2300      	movs	r3, #0
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	3714      	adds	r7, #20
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c4:	4770      	bx	lr
	...

0800d3c8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b084      	sub	sp, #16
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	32b0      	adds	r2, #176	@ 0xb0
 800d3da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3de:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d101      	bne.n	800d3ee <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d3ea:	2303      	movs	r3, #3
 800d3ec:	e025      	b.n	800d43a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d11f      	bne.n	800d438 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	2201      	movs	r2, #1
 800d3fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d400:	4b10      	ldr	r3, [pc, #64]	@ (800d444 <USBD_CDC_TransmitPacket+0x7c>)
 800d402:	781b      	ldrb	r3, [r3, #0]
 800d404:	f003 020f 	and.w	r2, r3, #15
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	4613      	mov	r3, r2
 800d412:	009b      	lsls	r3, r3, #2
 800d414:	4413      	add	r3, r2
 800d416:	009b      	lsls	r3, r3, #2
 800d418:	4403      	add	r3, r0
 800d41a:	3314      	adds	r3, #20
 800d41c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d41e:	4b09      	ldr	r3, [pc, #36]	@ (800d444 <USBD_CDC_TransmitPacket+0x7c>)
 800d420:	7819      	ldrb	r1, [r3, #0]
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f002 f845 	bl	800f4be <USBD_LL_Transmit>

    ret = USBD_OK;
 800d434:	2300      	movs	r3, #0
 800d436:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d438:	7bfb      	ldrb	r3, [r7, #15]
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	3710      	adds	r7, #16
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}
 800d442:	bf00      	nop
 800d444:	2000009b 	.word	0x2000009b

0800d448 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b084      	sub	sp, #16
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	32b0      	adds	r2, #176	@ 0xb0
 800d45a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d45e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	32b0      	adds	r2, #176	@ 0xb0
 800d46a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d101      	bne.n	800d476 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d472:	2303      	movs	r3, #3
 800d474:	e018      	b.n	800d4a8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	7c1b      	ldrb	r3, [r3, #16]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d10a      	bne.n	800d494 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d47e:	4b0c      	ldr	r3, [pc, #48]	@ (800d4b0 <USBD_CDC_ReceivePacket+0x68>)
 800d480:	7819      	ldrb	r1, [r3, #0]
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d488:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f002 f837 	bl	800f500 <USBD_LL_PrepareReceive>
 800d492:	e008      	b.n	800d4a6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d494:	4b06      	ldr	r3, [pc, #24]	@ (800d4b0 <USBD_CDC_ReceivePacket+0x68>)
 800d496:	7819      	ldrb	r1, [r3, #0]
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d49e:	2340      	movs	r3, #64	@ 0x40
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f002 f82d 	bl	800f500 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d4a6:	2300      	movs	r3, #0
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3710      	adds	r7, #16
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}
 800d4b0:	2000009c 	.word	0x2000009c

0800d4b4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b086      	sub	sp, #24
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	60f8      	str	r0, [r7, #12]
 800d4bc:	60b9      	str	r1, [r7, #8]
 800d4be:	4613      	mov	r3, r2
 800d4c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d101      	bne.n	800d4cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d4c8:	2303      	movs	r3, #3
 800d4ca:	e01f      	b.n	800d50c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d003      	beq.n	800d4f2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	68ba      	ldr	r2, [r7, #8]
 800d4ee:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	2201      	movs	r2, #1
 800d4f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	79fa      	ldrb	r2, [r7, #7]
 800d4fe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d500:	68f8      	ldr	r0, [r7, #12]
 800d502:	f001 fea7 	bl	800f254 <USBD_LL_Init>
 800d506:	4603      	mov	r3, r0
 800d508:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d50a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3718      	adds	r7, #24
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}

0800d514 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b084      	sub	sp, #16
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d51e:	2300      	movs	r3, #0
 800d520:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d101      	bne.n	800d52c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d528:	2303      	movs	r3, #3
 800d52a:	e025      	b.n	800d578 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	683a      	ldr	r2, [r7, #0]
 800d530:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	32ae      	adds	r2, #174	@ 0xae
 800d53e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d544:	2b00      	cmp	r3, #0
 800d546:	d00f      	beq.n	800d568 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	32ae      	adds	r2, #174	@ 0xae
 800d552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d558:	f107 020e 	add.w	r2, r7, #14
 800d55c:	4610      	mov	r0, r2
 800d55e:	4798      	blx	r3
 800d560:	4602      	mov	r2, r0
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d56e:	1c5a      	adds	r2, r3, #1
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800d576:	2300      	movs	r3, #0
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3710      	adds	r7, #16
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}

0800d580 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b082      	sub	sp, #8
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f001 feaf 	bl	800f2ec <USBD_LL_Start>
 800d58e:	4603      	mov	r3, r0
}
 800d590:	4618      	mov	r0, r3
 800d592:	3708      	adds	r7, #8
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}

0800d598 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d598:	b480      	push	{r7}
 800d59a:	b083      	sub	sp, #12
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d5a0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	370c      	adds	r7, #12
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ac:	4770      	bx	lr

0800d5ae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d5ae:	b580      	push	{r7, lr}
 800d5b0:	b084      	sub	sp, #16
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	6078      	str	r0, [r7, #4]
 800d5b6:	460b      	mov	r3, r1
 800d5b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d009      	beq.n	800d5dc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	78fa      	ldrb	r2, [r7, #3]
 800d5d2:	4611      	mov	r1, r2
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	4798      	blx	r3
 800d5d8:	4603      	mov	r3, r0
 800d5da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d5dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3710      	adds	r7, #16
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}

0800d5e6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d5e6:	b580      	push	{r7, lr}
 800d5e8:	b084      	sub	sp, #16
 800d5ea:	af00      	add	r7, sp, #0
 800d5ec:	6078      	str	r0, [r7, #4]
 800d5ee:	460b      	mov	r3, r1
 800d5f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d5fc:	685b      	ldr	r3, [r3, #4]
 800d5fe:	78fa      	ldrb	r2, [r7, #3]
 800d600:	4611      	mov	r1, r2
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	4798      	blx	r3
 800d606:	4603      	mov	r3, r0
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d001      	beq.n	800d610 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d60c:	2303      	movs	r3, #3
 800d60e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d610:	7bfb      	ldrb	r3, [r7, #15]
}
 800d612:	4618      	mov	r0, r3
 800d614:	3710      	adds	r7, #16
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}

0800d61a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d61a:	b580      	push	{r7, lr}
 800d61c:	b084      	sub	sp, #16
 800d61e:	af00      	add	r7, sp, #0
 800d620:	6078      	str	r0, [r7, #4]
 800d622:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d62a:	6839      	ldr	r1, [r7, #0]
 800d62c:	4618      	mov	r0, r3
 800d62e:	f001 f922 	bl	800e876 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2201      	movs	r2, #1
 800d636:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d640:	461a      	mov	r2, r3
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d64e:	f003 031f 	and.w	r3, r3, #31
 800d652:	2b02      	cmp	r3, #2
 800d654:	d01a      	beq.n	800d68c <USBD_LL_SetupStage+0x72>
 800d656:	2b02      	cmp	r3, #2
 800d658:	d822      	bhi.n	800d6a0 <USBD_LL_SetupStage+0x86>
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d002      	beq.n	800d664 <USBD_LL_SetupStage+0x4a>
 800d65e:	2b01      	cmp	r3, #1
 800d660:	d00a      	beq.n	800d678 <USBD_LL_SetupStage+0x5e>
 800d662:	e01d      	b.n	800d6a0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d66a:	4619      	mov	r1, r3
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f000 fb77 	bl	800dd60 <USBD_StdDevReq>
 800d672:	4603      	mov	r3, r0
 800d674:	73fb      	strb	r3, [r7, #15]
      break;
 800d676:	e020      	b.n	800d6ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d67e:	4619      	mov	r1, r3
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f000 fbdf 	bl	800de44 <USBD_StdItfReq>
 800d686:	4603      	mov	r3, r0
 800d688:	73fb      	strb	r3, [r7, #15]
      break;
 800d68a:	e016      	b.n	800d6ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d692:	4619      	mov	r1, r3
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f000 fc41 	bl	800df1c <USBD_StdEPReq>
 800d69a:	4603      	mov	r3, r0
 800d69c:	73fb      	strb	r3, [r7, #15]
      break;
 800d69e:	e00c      	b.n	800d6ba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d6a6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d6aa:	b2db      	uxtb	r3, r3
 800d6ac:	4619      	mov	r1, r3
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f001 fe7c 	bl	800f3ac <USBD_LL_StallEP>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	73fb      	strb	r3, [r7, #15]
      break;
 800d6b8:	bf00      	nop
  }

  return ret;
 800d6ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3710      	adds	r7, #16
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}

0800d6c4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b086      	sub	sp, #24
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	60f8      	str	r0, [r7, #12]
 800d6cc:	460b      	mov	r3, r1
 800d6ce:	607a      	str	r2, [r7, #4]
 800d6d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800d6d6:	7afb      	ldrb	r3, [r7, #11]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d177      	bne.n	800d7cc <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d6e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d6ea:	2b03      	cmp	r3, #3
 800d6ec:	f040 80a1 	bne.w	800d832 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800d6f0:	693b      	ldr	r3, [r7, #16]
 800d6f2:	685b      	ldr	r3, [r3, #4]
 800d6f4:	693a      	ldr	r2, [r7, #16]
 800d6f6:	8992      	ldrh	r2, [r2, #12]
 800d6f8:	4293      	cmp	r3, r2
 800d6fa:	d91c      	bls.n	800d736 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800d6fc:	693b      	ldr	r3, [r7, #16]
 800d6fe:	685b      	ldr	r3, [r3, #4]
 800d700:	693a      	ldr	r2, [r7, #16]
 800d702:	8992      	ldrh	r2, [r2, #12]
 800d704:	1a9a      	subs	r2, r3, r2
 800d706:	693b      	ldr	r3, [r7, #16]
 800d708:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	691b      	ldr	r3, [r3, #16]
 800d70e:	693a      	ldr	r2, [r7, #16]
 800d710:	8992      	ldrh	r2, [r2, #12]
 800d712:	441a      	add	r2, r3
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	6919      	ldr	r1, [r3, #16]
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	899b      	ldrh	r3, [r3, #12]
 800d720:	461a      	mov	r2, r3
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	685b      	ldr	r3, [r3, #4]
 800d726:	4293      	cmp	r3, r2
 800d728:	bf38      	it	cc
 800d72a:	4613      	movcc	r3, r2
 800d72c:	461a      	mov	r2, r3
 800d72e:	68f8      	ldr	r0, [r7, #12]
 800d730:	f001 f9a8 	bl	800ea84 <USBD_CtlContinueRx>
 800d734:	e07d      	b.n	800d832 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d73c:	f003 031f 	and.w	r3, r3, #31
 800d740:	2b02      	cmp	r3, #2
 800d742:	d014      	beq.n	800d76e <USBD_LL_DataOutStage+0xaa>
 800d744:	2b02      	cmp	r3, #2
 800d746:	d81d      	bhi.n	800d784 <USBD_LL_DataOutStage+0xc0>
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d002      	beq.n	800d752 <USBD_LL_DataOutStage+0x8e>
 800d74c:	2b01      	cmp	r3, #1
 800d74e:	d003      	beq.n	800d758 <USBD_LL_DataOutStage+0x94>
 800d750:	e018      	b.n	800d784 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d752:	2300      	movs	r3, #0
 800d754:	75bb      	strb	r3, [r7, #22]
            break;
 800d756:	e018      	b.n	800d78a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d75e:	b2db      	uxtb	r3, r3
 800d760:	4619      	mov	r1, r3
 800d762:	68f8      	ldr	r0, [r7, #12]
 800d764:	f000 fa6e 	bl	800dc44 <USBD_CoreFindIF>
 800d768:	4603      	mov	r3, r0
 800d76a:	75bb      	strb	r3, [r7, #22]
            break;
 800d76c:	e00d      	b.n	800d78a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d774:	b2db      	uxtb	r3, r3
 800d776:	4619      	mov	r1, r3
 800d778:	68f8      	ldr	r0, [r7, #12]
 800d77a:	f000 fa70 	bl	800dc5e <USBD_CoreFindEP>
 800d77e:	4603      	mov	r3, r0
 800d780:	75bb      	strb	r3, [r7, #22]
            break;
 800d782:	e002      	b.n	800d78a <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d784:	2300      	movs	r3, #0
 800d786:	75bb      	strb	r3, [r7, #22]
            break;
 800d788:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d78a:	7dbb      	ldrb	r3, [r7, #22]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d119      	bne.n	800d7c4 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d796:	b2db      	uxtb	r3, r3
 800d798:	2b03      	cmp	r3, #3
 800d79a:	d113      	bne.n	800d7c4 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d79c:	7dba      	ldrb	r2, [r7, #22]
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	32ae      	adds	r2, #174	@ 0xae
 800d7a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7a6:	691b      	ldr	r3, [r3, #16]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d00b      	beq.n	800d7c4 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800d7ac:	7dba      	ldrb	r2, [r7, #22]
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d7b4:	7dba      	ldrb	r2, [r7, #22]
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	32ae      	adds	r2, #174	@ 0xae
 800d7ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7be:	691b      	ldr	r3, [r3, #16]
 800d7c0:	68f8      	ldr	r0, [r7, #12]
 800d7c2:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d7c4:	68f8      	ldr	r0, [r7, #12]
 800d7c6:	f001 f96e 	bl	800eaa6 <USBD_CtlSendStatus>
 800d7ca:	e032      	b.n	800d832 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d7cc:	7afb      	ldrb	r3, [r7, #11]
 800d7ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d7d2:	b2db      	uxtb	r3, r3
 800d7d4:	4619      	mov	r1, r3
 800d7d6:	68f8      	ldr	r0, [r7, #12]
 800d7d8:	f000 fa41 	bl	800dc5e <USBD_CoreFindEP>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d7e0:	7dbb      	ldrb	r3, [r7, #22]
 800d7e2:	2bff      	cmp	r3, #255	@ 0xff
 800d7e4:	d025      	beq.n	800d832 <USBD_LL_DataOutStage+0x16e>
 800d7e6:	7dbb      	ldrb	r3, [r7, #22]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d122      	bne.n	800d832 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d7f2:	b2db      	uxtb	r3, r3
 800d7f4:	2b03      	cmp	r3, #3
 800d7f6:	d117      	bne.n	800d828 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d7f8:	7dba      	ldrb	r2, [r7, #22]
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	32ae      	adds	r2, #174	@ 0xae
 800d7fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d802:	699b      	ldr	r3, [r3, #24]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d00f      	beq.n	800d828 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800d808:	7dba      	ldrb	r2, [r7, #22]
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d810:	7dba      	ldrb	r2, [r7, #22]
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	32ae      	adds	r2, #174	@ 0xae
 800d816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d81a:	699b      	ldr	r3, [r3, #24]
 800d81c:	7afa      	ldrb	r2, [r7, #11]
 800d81e:	4611      	mov	r1, r2
 800d820:	68f8      	ldr	r0, [r7, #12]
 800d822:	4798      	blx	r3
 800d824:	4603      	mov	r3, r0
 800d826:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d828:	7dfb      	ldrb	r3, [r7, #23]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d001      	beq.n	800d832 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800d82e:	7dfb      	ldrb	r3, [r7, #23]
 800d830:	e000      	b.n	800d834 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800d832:	2300      	movs	r3, #0
}
 800d834:	4618      	mov	r0, r3
 800d836:	3718      	adds	r7, #24
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}

0800d83c <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b086      	sub	sp, #24
 800d840:	af00      	add	r7, sp, #0
 800d842:	60f8      	str	r0, [r7, #12]
 800d844:	460b      	mov	r3, r1
 800d846:	607a      	str	r2, [r7, #4]
 800d848:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800d84a:	7afb      	ldrb	r3, [r7, #11]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d178      	bne.n	800d942 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	3314      	adds	r3, #20
 800d854:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d85c:	2b02      	cmp	r3, #2
 800d85e:	d163      	bne.n	800d928 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	685b      	ldr	r3, [r3, #4]
 800d864:	693a      	ldr	r2, [r7, #16]
 800d866:	8992      	ldrh	r2, [r2, #12]
 800d868:	4293      	cmp	r3, r2
 800d86a:	d91c      	bls.n	800d8a6 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800d86c:	693b      	ldr	r3, [r7, #16]
 800d86e:	685b      	ldr	r3, [r3, #4]
 800d870:	693a      	ldr	r2, [r7, #16]
 800d872:	8992      	ldrh	r2, [r2, #12]
 800d874:	1a9a      	subs	r2, r3, r2
 800d876:	693b      	ldr	r3, [r7, #16]
 800d878:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800d87a:	693b      	ldr	r3, [r7, #16]
 800d87c:	691b      	ldr	r3, [r3, #16]
 800d87e:	693a      	ldr	r2, [r7, #16]
 800d880:	8992      	ldrh	r2, [r2, #12]
 800d882:	441a      	add	r2, r3
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800d888:	693b      	ldr	r3, [r7, #16]
 800d88a:	6919      	ldr	r1, [r3, #16]
 800d88c:	693b      	ldr	r3, [r7, #16]
 800d88e:	685b      	ldr	r3, [r3, #4]
 800d890:	461a      	mov	r2, r3
 800d892:	68f8      	ldr	r0, [r7, #12]
 800d894:	f001 f8c4 	bl	800ea20 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d898:	2300      	movs	r3, #0
 800d89a:	2200      	movs	r2, #0
 800d89c:	2100      	movs	r1, #0
 800d89e:	68f8      	ldr	r0, [r7, #12]
 800d8a0:	f001 fe2e 	bl	800f500 <USBD_LL_PrepareReceive>
 800d8a4:	e040      	b.n	800d928 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	899b      	ldrh	r3, [r3, #12]
 800d8aa:	461a      	mov	r2, r3
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	685b      	ldr	r3, [r3, #4]
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d11c      	bne.n	800d8ee <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	693a      	ldr	r2, [r7, #16]
 800d8ba:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d8bc:	4293      	cmp	r3, r2
 800d8be:	d316      	bcc.n	800d8ee <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800d8c0:	693b      	ldr	r3, [r7, #16]
 800d8c2:	681a      	ldr	r2, [r3, #0]
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	d20f      	bcs.n	800d8ee <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	2100      	movs	r1, #0
 800d8d2:	68f8      	ldr	r0, [r7, #12]
 800d8d4:	f001 f8a4 	bl	800ea20 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	2200      	movs	r2, #0
 800d8dc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	2100      	movs	r1, #0
 800d8e6:	68f8      	ldr	r0, [r7, #12]
 800d8e8:	f001 fe0a 	bl	800f500 <USBD_LL_PrepareReceive>
 800d8ec:	e01c      	b.n	800d928 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d8f4:	b2db      	uxtb	r3, r3
 800d8f6:	2b03      	cmp	r3, #3
 800d8f8:	d10f      	bne.n	800d91a <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d900:	68db      	ldr	r3, [r3, #12]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d009      	beq.n	800d91a <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	2200      	movs	r2, #0
 800d90a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d914:	68db      	ldr	r3, [r3, #12]
 800d916:	68f8      	ldr	r0, [r7, #12]
 800d918:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d91a:	2180      	movs	r1, #128	@ 0x80
 800d91c:	68f8      	ldr	r0, [r7, #12]
 800d91e:	f001 fd45 	bl	800f3ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d922:	68f8      	ldr	r0, [r7, #12]
 800d924:	f001 f8d2 	bl	800eacc <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d03a      	beq.n	800d9a8 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800d932:	68f8      	ldr	r0, [r7, #12]
 800d934:	f7ff fe30 	bl	800d598 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2200      	movs	r2, #0
 800d93c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d940:	e032      	b.n	800d9a8 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d942:	7afb      	ldrb	r3, [r7, #11]
 800d944:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d948:	b2db      	uxtb	r3, r3
 800d94a:	4619      	mov	r1, r3
 800d94c:	68f8      	ldr	r0, [r7, #12]
 800d94e:	f000 f986 	bl	800dc5e <USBD_CoreFindEP>
 800d952:	4603      	mov	r3, r0
 800d954:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d956:	7dfb      	ldrb	r3, [r7, #23]
 800d958:	2bff      	cmp	r3, #255	@ 0xff
 800d95a:	d025      	beq.n	800d9a8 <USBD_LL_DataInStage+0x16c>
 800d95c:	7dfb      	ldrb	r3, [r7, #23]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d122      	bne.n	800d9a8 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d968:	b2db      	uxtb	r3, r3
 800d96a:	2b03      	cmp	r3, #3
 800d96c:	d11c      	bne.n	800d9a8 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d96e:	7dfa      	ldrb	r2, [r7, #23]
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	32ae      	adds	r2, #174	@ 0xae
 800d974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d978:	695b      	ldr	r3, [r3, #20]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d014      	beq.n	800d9a8 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800d97e:	7dfa      	ldrb	r2, [r7, #23]
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d986:	7dfa      	ldrb	r2, [r7, #23]
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	32ae      	adds	r2, #174	@ 0xae
 800d98c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d990:	695b      	ldr	r3, [r3, #20]
 800d992:	7afa      	ldrb	r2, [r7, #11]
 800d994:	4611      	mov	r1, r2
 800d996:	68f8      	ldr	r0, [r7, #12]
 800d998:	4798      	blx	r3
 800d99a:	4603      	mov	r3, r0
 800d99c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d99e:	7dbb      	ldrb	r3, [r7, #22]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d001      	beq.n	800d9a8 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800d9a4:	7dbb      	ldrb	r3, [r7, #22]
 800d9a6:	e000      	b.n	800d9aa <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800d9a8:	2300      	movs	r3, #0
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	3718      	adds	r7, #24
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}

0800d9b2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d9b2:	b580      	push	{r7, lr}
 800d9b4:	b084      	sub	sp, #16
 800d9b6:	af00      	add	r7, sp, #0
 800d9b8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2201      	movs	r2, #1
 800d9c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2200      	movs	r2, #0
 800d9e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d014      	beq.n	800da18 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d9f4:	685b      	ldr	r3, [r3, #4]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d00e      	beq.n	800da18 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da00:	685b      	ldr	r3, [r3, #4]
 800da02:	687a      	ldr	r2, [r7, #4]
 800da04:	6852      	ldr	r2, [r2, #4]
 800da06:	b2d2      	uxtb	r2, r2
 800da08:	4611      	mov	r1, r2
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	4798      	blx	r3
 800da0e:	4603      	mov	r3, r0
 800da10:	2b00      	cmp	r3, #0
 800da12:	d001      	beq.n	800da18 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800da14:	2303      	movs	r3, #3
 800da16:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800da18:	2340      	movs	r3, #64	@ 0x40
 800da1a:	2200      	movs	r2, #0
 800da1c:	2100      	movs	r1, #0
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f001 fc7f 	bl	800f322 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2201      	movs	r2, #1
 800da28:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2240      	movs	r2, #64	@ 0x40
 800da30:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800da34:	2340      	movs	r3, #64	@ 0x40
 800da36:	2200      	movs	r2, #0
 800da38:	2180      	movs	r1, #128	@ 0x80
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f001 fc71 	bl	800f322 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2201      	movs	r2, #1
 800da44:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2240      	movs	r2, #64	@ 0x40
 800da4c:	841a      	strh	r2, [r3, #32]

  return ret;
 800da4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800da50:	4618      	mov	r0, r3
 800da52:	3710      	adds	r7, #16
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}

0800da58 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800da58:	b480      	push	{r7}
 800da5a:	b083      	sub	sp, #12
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
 800da60:	460b      	mov	r3, r1
 800da62:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	78fa      	ldrb	r2, [r7, #3]
 800da68:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800da6a:	2300      	movs	r3, #0
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	370c      	adds	r7, #12
 800da70:	46bd      	mov	sp, r7
 800da72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da76:	4770      	bx	lr

0800da78 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800da78:	b480      	push	{r7}
 800da7a:	b083      	sub	sp, #12
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da86:	b2db      	uxtb	r3, r3
 800da88:	2b04      	cmp	r3, #4
 800da8a:	d006      	beq.n	800da9a <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da92:	b2da      	uxtb	r2, r3
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2204      	movs	r2, #4
 800da9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800daa2:	2300      	movs	r3, #0
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	370c      	adds	r7, #12
 800daa8:	46bd      	mov	sp, r7
 800daaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daae:	4770      	bx	lr

0800dab0 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800dab0:	b480      	push	{r7}
 800dab2:	b083      	sub	sp, #12
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dabe:	b2db      	uxtb	r3, r3
 800dac0:	2b04      	cmp	r3, #4
 800dac2:	d106      	bne.n	800dad2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800daca:	b2da      	uxtb	r2, r3
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800dad2:	2300      	movs	r3, #0
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	370c      	adds	r7, #12
 800dad8:	46bd      	mov	sp, r7
 800dada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dade:	4770      	bx	lr

0800dae0 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b082      	sub	sp, #8
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800daee:	b2db      	uxtb	r3, r3
 800daf0:	2b03      	cmp	r3, #3
 800daf2:	d110      	bne.n	800db16 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d00b      	beq.n	800db16 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db04:	69db      	ldr	r3, [r3, #28]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d005      	beq.n	800db16 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db10:	69db      	ldr	r3, [r3, #28]
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800db16:	2300      	movs	r3, #0
}
 800db18:	4618      	mov	r0, r3
 800db1a:	3708      	adds	r7, #8
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}

0800db20 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b082      	sub	sp, #8
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
 800db28:	460b      	mov	r3, r1
 800db2a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	32ae      	adds	r2, #174	@ 0xae
 800db36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d101      	bne.n	800db42 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800db3e:	2303      	movs	r3, #3
 800db40:	e01c      	b.n	800db7c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db48:	b2db      	uxtb	r3, r3
 800db4a:	2b03      	cmp	r3, #3
 800db4c:	d115      	bne.n	800db7a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	32ae      	adds	r2, #174	@ 0xae
 800db58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db5c:	6a1b      	ldr	r3, [r3, #32]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d00b      	beq.n	800db7a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	32ae      	adds	r2, #174	@ 0xae
 800db6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db70:	6a1b      	ldr	r3, [r3, #32]
 800db72:	78fa      	ldrb	r2, [r7, #3]
 800db74:	4611      	mov	r1, r2
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800db7a:	2300      	movs	r3, #0
}
 800db7c:	4618      	mov	r0, r3
 800db7e:	3708      	adds	r7, #8
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}

0800db84 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b082      	sub	sp, #8
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
 800db8c:	460b      	mov	r3, r1
 800db8e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	32ae      	adds	r2, #174	@ 0xae
 800db9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d101      	bne.n	800dba6 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800dba2:	2303      	movs	r3, #3
 800dba4:	e01c      	b.n	800dbe0 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbac:	b2db      	uxtb	r3, r3
 800dbae:	2b03      	cmp	r3, #3
 800dbb0:	d115      	bne.n	800dbde <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	32ae      	adds	r2, #174	@ 0xae
 800dbbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d00b      	beq.n	800dbde <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	32ae      	adds	r2, #174	@ 0xae
 800dbd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbd6:	78fa      	ldrb	r2, [r7, #3]
 800dbd8:	4611      	mov	r1, r2
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dbde:	2300      	movs	r3, #0
}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	3708      	adds	r7, #8
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}

0800dbe8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800dbe8:	b480      	push	{r7}
 800dbea:	b083      	sub	sp, #12
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dbf0:	2300      	movs	r3, #0
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	370c      	adds	r7, #12
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfc:	4770      	bx	lr

0800dbfe <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800dbfe:	b580      	push	{r7, lr}
 800dc00:	b084      	sub	sp, #16
 800dc02:	af00      	add	r7, sp, #0
 800dc04:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800dc06:	2300      	movs	r3, #0
 800dc08:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2201      	movs	r2, #1
 800dc0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d00e      	beq.n	800dc3a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc22:	685b      	ldr	r3, [r3, #4]
 800dc24:	687a      	ldr	r2, [r7, #4]
 800dc26:	6852      	ldr	r2, [r2, #4]
 800dc28:	b2d2      	uxtb	r2, r2
 800dc2a:	4611      	mov	r1, r2
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	4798      	blx	r3
 800dc30:	4603      	mov	r3, r0
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d001      	beq.n	800dc3a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800dc36:	2303      	movs	r3, #3
 800dc38:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dc3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	3710      	adds	r7, #16
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}

0800dc44 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dc44:	b480      	push	{r7}
 800dc46:	b083      	sub	sp, #12
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
 800dc4c:	460b      	mov	r3, r1
 800dc4e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dc50:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	370c      	adds	r7, #12
 800dc56:	46bd      	mov	sp, r7
 800dc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5c:	4770      	bx	lr

0800dc5e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dc5e:	b480      	push	{r7}
 800dc60:	b083      	sub	sp, #12
 800dc62:	af00      	add	r7, sp, #0
 800dc64:	6078      	str	r0, [r7, #4]
 800dc66:	460b      	mov	r3, r1
 800dc68:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dc6a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	370c      	adds	r7, #12
 800dc70:	46bd      	mov	sp, r7
 800dc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc76:	4770      	bx	lr

0800dc78 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b086      	sub	sp, #24
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
 800dc80:	460b      	mov	r3, r1
 800dc82:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	885b      	ldrh	r3, [r3, #2]
 800dc94:	b29b      	uxth	r3, r3
 800dc96:	68fa      	ldr	r2, [r7, #12]
 800dc98:	7812      	ldrb	r2, [r2, #0]
 800dc9a:	4293      	cmp	r3, r2
 800dc9c:	d91f      	bls.n	800dcde <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	781b      	ldrb	r3, [r3, #0]
 800dca2:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800dca4:	e013      	b.n	800dcce <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800dca6:	f107 030a 	add.w	r3, r7, #10
 800dcaa:	4619      	mov	r1, r3
 800dcac:	6978      	ldr	r0, [r7, #20]
 800dcae:	f000 f81b 	bl	800dce8 <USBD_GetNextDesc>
 800dcb2:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800dcb4:	697b      	ldr	r3, [r7, #20]
 800dcb6:	785b      	ldrb	r3, [r3, #1]
 800dcb8:	2b05      	cmp	r3, #5
 800dcba:	d108      	bne.n	800dcce <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800dcbc:	697b      	ldr	r3, [r7, #20]
 800dcbe:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	789b      	ldrb	r3, [r3, #2]
 800dcc4:	78fa      	ldrb	r2, [r7, #3]
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d008      	beq.n	800dcdc <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800dcca:	2300      	movs	r3, #0
 800dccc:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	885b      	ldrh	r3, [r3, #2]
 800dcd2:	b29a      	uxth	r2, r3
 800dcd4:	897b      	ldrh	r3, [r7, #10]
 800dcd6:	429a      	cmp	r2, r3
 800dcd8:	d8e5      	bhi.n	800dca6 <USBD_GetEpDesc+0x2e>
 800dcda:	e000      	b.n	800dcde <USBD_GetEpDesc+0x66>
          break;
 800dcdc:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800dcde:	693b      	ldr	r3, [r7, #16]
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3718      	adds	r7, #24
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}

0800dce8 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800dce8:	b480      	push	{r7}
 800dcea:	b085      	sub	sp, #20
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
 800dcf0:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	881b      	ldrh	r3, [r3, #0]
 800dcfa:	68fa      	ldr	r2, [r7, #12]
 800dcfc:	7812      	ldrb	r2, [r2, #0]
 800dcfe:	4413      	add	r3, r2
 800dd00:	b29a      	uxth	r2, r3
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	781b      	ldrb	r3, [r3, #0]
 800dd0a:	461a      	mov	r2, r3
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	4413      	add	r3, r2
 800dd10:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800dd12:	68fb      	ldr	r3, [r7, #12]
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	3714      	adds	r7, #20
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1e:	4770      	bx	lr

0800dd20 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800dd20:	b480      	push	{r7}
 800dd22:	b087      	sub	sp, #28
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	781b      	ldrb	r3, [r3, #0]
 800dd30:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	3301      	adds	r3, #1
 800dd36:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dd38:	697b      	ldr	r3, [r7, #20]
 800dd3a:	781b      	ldrb	r3, [r3, #0]
 800dd3c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dd3e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800dd42:	021b      	lsls	r3, r3, #8
 800dd44:	b21a      	sxth	r2, r3
 800dd46:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dd4a:	4313      	orrs	r3, r2
 800dd4c:	b21b      	sxth	r3, r3
 800dd4e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dd50:	89fb      	ldrh	r3, [r7, #14]
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	371c      	adds	r7, #28
 800dd56:	46bd      	mov	sp, r7
 800dd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5c:	4770      	bx	lr
	...

0800dd60 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b084      	sub	sp, #16
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
 800dd68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	781b      	ldrb	r3, [r3, #0]
 800dd72:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dd76:	2b40      	cmp	r3, #64	@ 0x40
 800dd78:	d005      	beq.n	800dd86 <USBD_StdDevReq+0x26>
 800dd7a:	2b40      	cmp	r3, #64	@ 0x40
 800dd7c:	d857      	bhi.n	800de2e <USBD_StdDevReq+0xce>
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d00f      	beq.n	800dda2 <USBD_StdDevReq+0x42>
 800dd82:	2b20      	cmp	r3, #32
 800dd84:	d153      	bne.n	800de2e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	32ae      	adds	r2, #174	@ 0xae
 800dd90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd94:	689b      	ldr	r3, [r3, #8]
 800dd96:	6839      	ldr	r1, [r7, #0]
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	4798      	blx	r3
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	73fb      	strb	r3, [r7, #15]
      break;
 800dda0:	e04a      	b.n	800de38 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	785b      	ldrb	r3, [r3, #1]
 800dda6:	2b09      	cmp	r3, #9
 800dda8:	d83b      	bhi.n	800de22 <USBD_StdDevReq+0xc2>
 800ddaa:	a201      	add	r2, pc, #4	@ (adr r2, 800ddb0 <USBD_StdDevReq+0x50>)
 800ddac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddb0:	0800de05 	.word	0x0800de05
 800ddb4:	0800de19 	.word	0x0800de19
 800ddb8:	0800de23 	.word	0x0800de23
 800ddbc:	0800de0f 	.word	0x0800de0f
 800ddc0:	0800de23 	.word	0x0800de23
 800ddc4:	0800dde3 	.word	0x0800dde3
 800ddc8:	0800ddd9 	.word	0x0800ddd9
 800ddcc:	0800de23 	.word	0x0800de23
 800ddd0:	0800ddfb 	.word	0x0800ddfb
 800ddd4:	0800dded 	.word	0x0800dded
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ddd8:	6839      	ldr	r1, [r7, #0]
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f000 fa3e 	bl	800e25c <USBD_GetDescriptor>
          break;
 800dde0:	e024      	b.n	800de2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dde2:	6839      	ldr	r1, [r7, #0]
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f000 fba3 	bl	800e530 <USBD_SetAddress>
          break;
 800ddea:	e01f      	b.n	800de2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ddec:	6839      	ldr	r1, [r7, #0]
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f000 fbe2 	bl	800e5b8 <USBD_SetConfig>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	73fb      	strb	r3, [r7, #15]
          break;
 800ddf8:	e018      	b.n	800de2c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ddfa:	6839      	ldr	r1, [r7, #0]
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f000 fc85 	bl	800e70c <USBD_GetConfig>
          break;
 800de02:	e013      	b.n	800de2c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800de04:	6839      	ldr	r1, [r7, #0]
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f000 fcb6 	bl	800e778 <USBD_GetStatus>
          break;
 800de0c:	e00e      	b.n	800de2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800de0e:	6839      	ldr	r1, [r7, #0]
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f000 fce5 	bl	800e7e0 <USBD_SetFeature>
          break;
 800de16:	e009      	b.n	800de2c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800de18:	6839      	ldr	r1, [r7, #0]
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	f000 fd09 	bl	800e832 <USBD_ClrFeature>
          break;
 800de20:	e004      	b.n	800de2c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800de22:	6839      	ldr	r1, [r7, #0]
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f000 fd60 	bl	800e8ea <USBD_CtlError>
          break;
 800de2a:	bf00      	nop
      }
      break;
 800de2c:	e004      	b.n	800de38 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800de2e:	6839      	ldr	r1, [r7, #0]
 800de30:	6878      	ldr	r0, [r7, #4]
 800de32:	f000 fd5a 	bl	800e8ea <USBD_CtlError>
      break;
 800de36:	bf00      	nop
  }

  return ret;
 800de38:	7bfb      	ldrb	r3, [r7, #15]
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	3710      	adds	r7, #16
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}
 800de42:	bf00      	nop

0800de44 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b084      	sub	sp, #16
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
 800de4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800de4e:	2300      	movs	r3, #0
 800de50:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800de5a:	2b40      	cmp	r3, #64	@ 0x40
 800de5c:	d005      	beq.n	800de6a <USBD_StdItfReq+0x26>
 800de5e:	2b40      	cmp	r3, #64	@ 0x40
 800de60:	d852      	bhi.n	800df08 <USBD_StdItfReq+0xc4>
 800de62:	2b00      	cmp	r3, #0
 800de64:	d001      	beq.n	800de6a <USBD_StdItfReq+0x26>
 800de66:	2b20      	cmp	r3, #32
 800de68:	d14e      	bne.n	800df08 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de70:	b2db      	uxtb	r3, r3
 800de72:	3b01      	subs	r3, #1
 800de74:	2b02      	cmp	r3, #2
 800de76:	d840      	bhi.n	800defa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	889b      	ldrh	r3, [r3, #4]
 800de7c:	b2db      	uxtb	r3, r3
 800de7e:	2b01      	cmp	r3, #1
 800de80:	d836      	bhi.n	800def0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	889b      	ldrh	r3, [r3, #4]
 800de86:	b2db      	uxtb	r3, r3
 800de88:	4619      	mov	r1, r3
 800de8a:	6878      	ldr	r0, [r7, #4]
 800de8c:	f7ff feda 	bl	800dc44 <USBD_CoreFindIF>
 800de90:	4603      	mov	r3, r0
 800de92:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800de94:	7bbb      	ldrb	r3, [r7, #14]
 800de96:	2bff      	cmp	r3, #255	@ 0xff
 800de98:	d01d      	beq.n	800ded6 <USBD_StdItfReq+0x92>
 800de9a:	7bbb      	ldrb	r3, [r7, #14]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d11a      	bne.n	800ded6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800dea0:	7bba      	ldrb	r2, [r7, #14]
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	32ae      	adds	r2, #174	@ 0xae
 800dea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800deaa:	689b      	ldr	r3, [r3, #8]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d00f      	beq.n	800ded0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800deb0:	7bba      	ldrb	r2, [r7, #14]
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800deb8:	7bba      	ldrb	r2, [r7, #14]
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	32ae      	adds	r2, #174	@ 0xae
 800debe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dec2:	689b      	ldr	r3, [r3, #8]
 800dec4:	6839      	ldr	r1, [r7, #0]
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	4798      	blx	r3
 800deca:	4603      	mov	r3, r0
 800decc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dece:	e004      	b.n	800deda <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ded0:	2303      	movs	r3, #3
 800ded2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ded4:	e001      	b.n	800deda <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ded6:	2303      	movs	r3, #3
 800ded8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	88db      	ldrh	r3, [r3, #6]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d110      	bne.n	800df04 <USBD_StdItfReq+0xc0>
 800dee2:	7bfb      	ldrb	r3, [r7, #15]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d10d      	bne.n	800df04 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f000 fddc 	bl	800eaa6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800deee:	e009      	b.n	800df04 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800def0:	6839      	ldr	r1, [r7, #0]
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	f000 fcf9 	bl	800e8ea <USBD_CtlError>
          break;
 800def8:	e004      	b.n	800df04 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800defa:	6839      	ldr	r1, [r7, #0]
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f000 fcf4 	bl	800e8ea <USBD_CtlError>
          break;
 800df02:	e000      	b.n	800df06 <USBD_StdItfReq+0xc2>
          break;
 800df04:	bf00      	nop
      }
      break;
 800df06:	e004      	b.n	800df12 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800df08:	6839      	ldr	r1, [r7, #0]
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f000 fced 	bl	800e8ea <USBD_CtlError>
      break;
 800df10:	bf00      	nop
  }

  return ret;
 800df12:	7bfb      	ldrb	r3, [r7, #15]
}
 800df14:	4618      	mov	r0, r3
 800df16:	3710      	adds	r7, #16
 800df18:	46bd      	mov	sp, r7
 800df1a:	bd80      	pop	{r7, pc}

0800df1c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b084      	sub	sp, #16
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
 800df24:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800df26:	2300      	movs	r3, #0
 800df28:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	889b      	ldrh	r3, [r3, #4]
 800df2e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	781b      	ldrb	r3, [r3, #0]
 800df34:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800df38:	2b40      	cmp	r3, #64	@ 0x40
 800df3a:	d007      	beq.n	800df4c <USBD_StdEPReq+0x30>
 800df3c:	2b40      	cmp	r3, #64	@ 0x40
 800df3e:	f200 8181 	bhi.w	800e244 <USBD_StdEPReq+0x328>
 800df42:	2b00      	cmp	r3, #0
 800df44:	d02a      	beq.n	800df9c <USBD_StdEPReq+0x80>
 800df46:	2b20      	cmp	r3, #32
 800df48:	f040 817c 	bne.w	800e244 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800df4c:	7bbb      	ldrb	r3, [r7, #14]
 800df4e:	4619      	mov	r1, r3
 800df50:	6878      	ldr	r0, [r7, #4]
 800df52:	f7ff fe84 	bl	800dc5e <USBD_CoreFindEP>
 800df56:	4603      	mov	r3, r0
 800df58:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800df5a:	7b7b      	ldrb	r3, [r7, #13]
 800df5c:	2bff      	cmp	r3, #255	@ 0xff
 800df5e:	f000 8176 	beq.w	800e24e <USBD_StdEPReq+0x332>
 800df62:	7b7b      	ldrb	r3, [r7, #13]
 800df64:	2b00      	cmp	r3, #0
 800df66:	f040 8172 	bne.w	800e24e <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800df6a:	7b7a      	ldrb	r2, [r7, #13]
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800df72:	7b7a      	ldrb	r2, [r7, #13]
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	32ae      	adds	r2, #174	@ 0xae
 800df78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df7c:	689b      	ldr	r3, [r3, #8]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	f000 8165 	beq.w	800e24e <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800df84:	7b7a      	ldrb	r2, [r7, #13]
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	32ae      	adds	r2, #174	@ 0xae
 800df8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df8e:	689b      	ldr	r3, [r3, #8]
 800df90:	6839      	ldr	r1, [r7, #0]
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	4798      	blx	r3
 800df96:	4603      	mov	r3, r0
 800df98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800df9a:	e158      	b.n	800e24e <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	785b      	ldrb	r3, [r3, #1]
 800dfa0:	2b03      	cmp	r3, #3
 800dfa2:	d008      	beq.n	800dfb6 <USBD_StdEPReq+0x9a>
 800dfa4:	2b03      	cmp	r3, #3
 800dfa6:	f300 8147 	bgt.w	800e238 <USBD_StdEPReq+0x31c>
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	f000 809b 	beq.w	800e0e6 <USBD_StdEPReq+0x1ca>
 800dfb0:	2b01      	cmp	r3, #1
 800dfb2:	d03c      	beq.n	800e02e <USBD_StdEPReq+0x112>
 800dfb4:	e140      	b.n	800e238 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dfbc:	b2db      	uxtb	r3, r3
 800dfbe:	2b02      	cmp	r3, #2
 800dfc0:	d002      	beq.n	800dfc8 <USBD_StdEPReq+0xac>
 800dfc2:	2b03      	cmp	r3, #3
 800dfc4:	d016      	beq.n	800dff4 <USBD_StdEPReq+0xd8>
 800dfc6:	e02c      	b.n	800e022 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dfc8:	7bbb      	ldrb	r3, [r7, #14]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d00d      	beq.n	800dfea <USBD_StdEPReq+0xce>
 800dfce:	7bbb      	ldrb	r3, [r7, #14]
 800dfd0:	2b80      	cmp	r3, #128	@ 0x80
 800dfd2:	d00a      	beq.n	800dfea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dfd4:	7bbb      	ldrb	r3, [r7, #14]
 800dfd6:	4619      	mov	r1, r3
 800dfd8:	6878      	ldr	r0, [r7, #4]
 800dfda:	f001 f9e7 	bl	800f3ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dfde:	2180      	movs	r1, #128	@ 0x80
 800dfe0:	6878      	ldr	r0, [r7, #4]
 800dfe2:	f001 f9e3 	bl	800f3ac <USBD_LL_StallEP>
 800dfe6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dfe8:	e020      	b.n	800e02c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800dfea:	6839      	ldr	r1, [r7, #0]
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	f000 fc7c 	bl	800e8ea <USBD_CtlError>
              break;
 800dff2:	e01b      	b.n	800e02c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	885b      	ldrh	r3, [r3, #2]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d10e      	bne.n	800e01a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dffc:	7bbb      	ldrb	r3, [r7, #14]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d00b      	beq.n	800e01a <USBD_StdEPReq+0xfe>
 800e002:	7bbb      	ldrb	r3, [r7, #14]
 800e004:	2b80      	cmp	r3, #128	@ 0x80
 800e006:	d008      	beq.n	800e01a <USBD_StdEPReq+0xfe>
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	88db      	ldrh	r3, [r3, #6]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d104      	bne.n	800e01a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e010:	7bbb      	ldrb	r3, [r7, #14]
 800e012:	4619      	mov	r1, r3
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f001 f9c9 	bl	800f3ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f000 fd43 	bl	800eaa6 <USBD_CtlSendStatus>

              break;
 800e020:	e004      	b.n	800e02c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e022:	6839      	ldr	r1, [r7, #0]
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f000 fc60 	bl	800e8ea <USBD_CtlError>
              break;
 800e02a:	bf00      	nop
          }
          break;
 800e02c:	e109      	b.n	800e242 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e034:	b2db      	uxtb	r3, r3
 800e036:	2b02      	cmp	r3, #2
 800e038:	d002      	beq.n	800e040 <USBD_StdEPReq+0x124>
 800e03a:	2b03      	cmp	r3, #3
 800e03c:	d016      	beq.n	800e06c <USBD_StdEPReq+0x150>
 800e03e:	e04b      	b.n	800e0d8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e040:	7bbb      	ldrb	r3, [r7, #14]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d00d      	beq.n	800e062 <USBD_StdEPReq+0x146>
 800e046:	7bbb      	ldrb	r3, [r7, #14]
 800e048:	2b80      	cmp	r3, #128	@ 0x80
 800e04a:	d00a      	beq.n	800e062 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e04c:	7bbb      	ldrb	r3, [r7, #14]
 800e04e:	4619      	mov	r1, r3
 800e050:	6878      	ldr	r0, [r7, #4]
 800e052:	f001 f9ab 	bl	800f3ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e056:	2180      	movs	r1, #128	@ 0x80
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f001 f9a7 	bl	800f3ac <USBD_LL_StallEP>
 800e05e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e060:	e040      	b.n	800e0e4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e062:	6839      	ldr	r1, [r7, #0]
 800e064:	6878      	ldr	r0, [r7, #4]
 800e066:	f000 fc40 	bl	800e8ea <USBD_CtlError>
              break;
 800e06a:	e03b      	b.n	800e0e4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	885b      	ldrh	r3, [r3, #2]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d136      	bne.n	800e0e2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e074:	7bbb      	ldrb	r3, [r7, #14]
 800e076:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d004      	beq.n	800e088 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e07e:	7bbb      	ldrb	r3, [r7, #14]
 800e080:	4619      	mov	r1, r3
 800e082:	6878      	ldr	r0, [r7, #4]
 800e084:	f001 f9b1 	bl	800f3ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f000 fd0c 	bl	800eaa6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e08e:	7bbb      	ldrb	r3, [r7, #14]
 800e090:	4619      	mov	r1, r3
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	f7ff fde3 	bl	800dc5e <USBD_CoreFindEP>
 800e098:	4603      	mov	r3, r0
 800e09a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e09c:	7b7b      	ldrb	r3, [r7, #13]
 800e09e:	2bff      	cmp	r3, #255	@ 0xff
 800e0a0:	d01f      	beq.n	800e0e2 <USBD_StdEPReq+0x1c6>
 800e0a2:	7b7b      	ldrb	r3, [r7, #13]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d11c      	bne.n	800e0e2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e0a8:	7b7a      	ldrb	r2, [r7, #13]
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e0b0:	7b7a      	ldrb	r2, [r7, #13]
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	32ae      	adds	r2, #174	@ 0xae
 800e0b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0ba:	689b      	ldr	r3, [r3, #8]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d010      	beq.n	800e0e2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e0c0:	7b7a      	ldrb	r2, [r7, #13]
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	32ae      	adds	r2, #174	@ 0xae
 800e0c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0ca:	689b      	ldr	r3, [r3, #8]
 800e0cc:	6839      	ldr	r1, [r7, #0]
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	4798      	blx	r3
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e0d6:	e004      	b.n	800e0e2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e0d8:	6839      	ldr	r1, [r7, #0]
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f000 fc05 	bl	800e8ea <USBD_CtlError>
              break;
 800e0e0:	e000      	b.n	800e0e4 <USBD_StdEPReq+0x1c8>
              break;
 800e0e2:	bf00      	nop
          }
          break;
 800e0e4:	e0ad      	b.n	800e242 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e0ec:	b2db      	uxtb	r3, r3
 800e0ee:	2b02      	cmp	r3, #2
 800e0f0:	d002      	beq.n	800e0f8 <USBD_StdEPReq+0x1dc>
 800e0f2:	2b03      	cmp	r3, #3
 800e0f4:	d033      	beq.n	800e15e <USBD_StdEPReq+0x242>
 800e0f6:	e099      	b.n	800e22c <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e0f8:	7bbb      	ldrb	r3, [r7, #14]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d007      	beq.n	800e10e <USBD_StdEPReq+0x1f2>
 800e0fe:	7bbb      	ldrb	r3, [r7, #14]
 800e100:	2b80      	cmp	r3, #128	@ 0x80
 800e102:	d004      	beq.n	800e10e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e104:	6839      	ldr	r1, [r7, #0]
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f000 fbef 	bl	800e8ea <USBD_CtlError>
                break;
 800e10c:	e093      	b.n	800e236 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e10e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e112:	2b00      	cmp	r3, #0
 800e114:	da0b      	bge.n	800e12e <USBD_StdEPReq+0x212>
 800e116:	7bbb      	ldrb	r3, [r7, #14]
 800e118:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e11c:	4613      	mov	r3, r2
 800e11e:	009b      	lsls	r3, r3, #2
 800e120:	4413      	add	r3, r2
 800e122:	009b      	lsls	r3, r3, #2
 800e124:	3310      	adds	r3, #16
 800e126:	687a      	ldr	r2, [r7, #4]
 800e128:	4413      	add	r3, r2
 800e12a:	3304      	adds	r3, #4
 800e12c:	e00b      	b.n	800e146 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e12e:	7bbb      	ldrb	r3, [r7, #14]
 800e130:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e134:	4613      	mov	r3, r2
 800e136:	009b      	lsls	r3, r3, #2
 800e138:	4413      	add	r3, r2
 800e13a:	009b      	lsls	r3, r3, #2
 800e13c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e140:	687a      	ldr	r2, [r7, #4]
 800e142:	4413      	add	r3, r2
 800e144:	3304      	adds	r3, #4
 800e146:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e148:	68bb      	ldr	r3, [r7, #8]
 800e14a:	2200      	movs	r2, #0
 800e14c:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	330e      	adds	r3, #14
 800e152:	2202      	movs	r2, #2
 800e154:	4619      	mov	r1, r3
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f000 fc44 	bl	800e9e4 <USBD_CtlSendData>
              break;
 800e15c:	e06b      	b.n	800e236 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e15e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e162:	2b00      	cmp	r3, #0
 800e164:	da11      	bge.n	800e18a <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e166:	7bbb      	ldrb	r3, [r7, #14]
 800e168:	f003 020f 	and.w	r2, r3, #15
 800e16c:	6879      	ldr	r1, [r7, #4]
 800e16e:	4613      	mov	r3, r2
 800e170:	009b      	lsls	r3, r3, #2
 800e172:	4413      	add	r3, r2
 800e174:	009b      	lsls	r3, r3, #2
 800e176:	440b      	add	r3, r1
 800e178:	3323      	adds	r3, #35	@ 0x23
 800e17a:	781b      	ldrb	r3, [r3, #0]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d117      	bne.n	800e1b0 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800e180:	6839      	ldr	r1, [r7, #0]
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f000 fbb1 	bl	800e8ea <USBD_CtlError>
                  break;
 800e188:	e055      	b.n	800e236 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e18a:	7bbb      	ldrb	r3, [r7, #14]
 800e18c:	f003 020f 	and.w	r2, r3, #15
 800e190:	6879      	ldr	r1, [r7, #4]
 800e192:	4613      	mov	r3, r2
 800e194:	009b      	lsls	r3, r3, #2
 800e196:	4413      	add	r3, r2
 800e198:	009b      	lsls	r3, r3, #2
 800e19a:	440b      	add	r3, r1
 800e19c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800e1a0:	781b      	ldrb	r3, [r3, #0]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d104      	bne.n	800e1b0 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800e1a6:	6839      	ldr	r1, [r7, #0]
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	f000 fb9e 	bl	800e8ea <USBD_CtlError>
                  break;
 800e1ae:	e042      	b.n	800e236 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e1b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	da0b      	bge.n	800e1d0 <USBD_StdEPReq+0x2b4>
 800e1b8:	7bbb      	ldrb	r3, [r7, #14]
 800e1ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e1be:	4613      	mov	r3, r2
 800e1c0:	009b      	lsls	r3, r3, #2
 800e1c2:	4413      	add	r3, r2
 800e1c4:	009b      	lsls	r3, r3, #2
 800e1c6:	3310      	adds	r3, #16
 800e1c8:	687a      	ldr	r2, [r7, #4]
 800e1ca:	4413      	add	r3, r2
 800e1cc:	3304      	adds	r3, #4
 800e1ce:	e00b      	b.n	800e1e8 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e1d0:	7bbb      	ldrb	r3, [r7, #14]
 800e1d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e1d6:	4613      	mov	r3, r2
 800e1d8:	009b      	lsls	r3, r3, #2
 800e1da:	4413      	add	r3, r2
 800e1dc:	009b      	lsls	r3, r3, #2
 800e1de:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e1e2:	687a      	ldr	r2, [r7, #4]
 800e1e4:	4413      	add	r3, r2
 800e1e6:	3304      	adds	r3, #4
 800e1e8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e1ea:	7bbb      	ldrb	r3, [r7, #14]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d002      	beq.n	800e1f6 <USBD_StdEPReq+0x2da>
 800e1f0:	7bbb      	ldrb	r3, [r7, #14]
 800e1f2:	2b80      	cmp	r3, #128	@ 0x80
 800e1f4:	d103      	bne.n	800e1fe <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	739a      	strb	r2, [r3, #14]
 800e1fc:	e00e      	b.n	800e21c <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e1fe:	7bbb      	ldrb	r3, [r7, #14]
 800e200:	4619      	mov	r1, r3
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	f001 f910 	bl	800f428 <USBD_LL_IsStallEP>
 800e208:	4603      	mov	r3, r0
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d003      	beq.n	800e216 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800e20e:	68bb      	ldr	r3, [r7, #8]
 800e210:	2201      	movs	r2, #1
 800e212:	739a      	strb	r2, [r3, #14]
 800e214:	e002      	b.n	800e21c <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800e216:	68bb      	ldr	r3, [r7, #8]
 800e218:	2200      	movs	r2, #0
 800e21a:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	330e      	adds	r3, #14
 800e220:	2202      	movs	r2, #2
 800e222:	4619      	mov	r1, r3
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f000 fbdd 	bl	800e9e4 <USBD_CtlSendData>
              break;
 800e22a:	e004      	b.n	800e236 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800e22c:	6839      	ldr	r1, [r7, #0]
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f000 fb5b 	bl	800e8ea <USBD_CtlError>
              break;
 800e234:	bf00      	nop
          }
          break;
 800e236:	e004      	b.n	800e242 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800e238:	6839      	ldr	r1, [r7, #0]
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f000 fb55 	bl	800e8ea <USBD_CtlError>
          break;
 800e240:	bf00      	nop
      }
      break;
 800e242:	e005      	b.n	800e250 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800e244:	6839      	ldr	r1, [r7, #0]
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f000 fb4f 	bl	800e8ea <USBD_CtlError>
      break;
 800e24c:	e000      	b.n	800e250 <USBD_StdEPReq+0x334>
      break;
 800e24e:	bf00      	nop
  }

  return ret;
 800e250:	7bfb      	ldrb	r3, [r7, #15]
}
 800e252:	4618      	mov	r0, r3
 800e254:	3710      	adds	r7, #16
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}
	...

0800e25c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b084      	sub	sp, #16
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
 800e264:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e266:	2300      	movs	r3, #0
 800e268:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e26a:	2300      	movs	r3, #0
 800e26c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e26e:	2300      	movs	r3, #0
 800e270:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	885b      	ldrh	r3, [r3, #2]
 800e276:	0a1b      	lsrs	r3, r3, #8
 800e278:	b29b      	uxth	r3, r3
 800e27a:	3b01      	subs	r3, #1
 800e27c:	2b06      	cmp	r3, #6
 800e27e:	f200 8128 	bhi.w	800e4d2 <USBD_GetDescriptor+0x276>
 800e282:	a201      	add	r2, pc, #4	@ (adr r2, 800e288 <USBD_GetDescriptor+0x2c>)
 800e284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e288:	0800e2a5 	.word	0x0800e2a5
 800e28c:	0800e2bd 	.word	0x0800e2bd
 800e290:	0800e2fd 	.word	0x0800e2fd
 800e294:	0800e4d3 	.word	0x0800e4d3
 800e298:	0800e4d3 	.word	0x0800e4d3
 800e29c:	0800e473 	.word	0x0800e473
 800e2a0:	0800e49f 	.word	0x0800e49f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	687a      	ldr	r2, [r7, #4]
 800e2ae:	7c12      	ldrb	r2, [r2, #16]
 800e2b0:	f107 0108 	add.w	r1, r7, #8
 800e2b4:	4610      	mov	r0, r2
 800e2b6:	4798      	blx	r3
 800e2b8:	60f8      	str	r0, [r7, #12]
      break;
 800e2ba:	e112      	b.n	800e4e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	7c1b      	ldrb	r3, [r3, #16]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d10d      	bne.n	800e2e0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e2ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2cc:	f107 0208 	add.w	r2, r7, #8
 800e2d0:	4610      	mov	r0, r2
 800e2d2:	4798      	blx	r3
 800e2d4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	3301      	adds	r3, #1
 800e2da:	2202      	movs	r2, #2
 800e2dc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e2de:	e100      	b.n	800e4e2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e2e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2e8:	f107 0208 	add.w	r2, r7, #8
 800e2ec:	4610      	mov	r0, r2
 800e2ee:	4798      	blx	r3
 800e2f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	3301      	adds	r3, #1
 800e2f6:	2202      	movs	r2, #2
 800e2f8:	701a      	strb	r2, [r3, #0]
      break;
 800e2fa:	e0f2      	b.n	800e4e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	885b      	ldrh	r3, [r3, #2]
 800e300:	b2db      	uxtb	r3, r3
 800e302:	2b05      	cmp	r3, #5
 800e304:	f200 80ac 	bhi.w	800e460 <USBD_GetDescriptor+0x204>
 800e308:	a201      	add	r2, pc, #4	@ (adr r2, 800e310 <USBD_GetDescriptor+0xb4>)
 800e30a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e30e:	bf00      	nop
 800e310:	0800e329 	.word	0x0800e329
 800e314:	0800e35d 	.word	0x0800e35d
 800e318:	0800e391 	.word	0x0800e391
 800e31c:	0800e3c5 	.word	0x0800e3c5
 800e320:	0800e3f9 	.word	0x0800e3f9
 800e324:	0800e42d 	.word	0x0800e42d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e32e:	685b      	ldr	r3, [r3, #4]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d00b      	beq.n	800e34c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e33a:	685b      	ldr	r3, [r3, #4]
 800e33c:	687a      	ldr	r2, [r7, #4]
 800e33e:	7c12      	ldrb	r2, [r2, #16]
 800e340:	f107 0108 	add.w	r1, r7, #8
 800e344:	4610      	mov	r0, r2
 800e346:	4798      	blx	r3
 800e348:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e34a:	e091      	b.n	800e470 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e34c:	6839      	ldr	r1, [r7, #0]
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f000 facb 	bl	800e8ea <USBD_CtlError>
            err++;
 800e354:	7afb      	ldrb	r3, [r7, #11]
 800e356:	3301      	adds	r3, #1
 800e358:	72fb      	strb	r3, [r7, #11]
          break;
 800e35a:	e089      	b.n	800e470 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e362:	689b      	ldr	r3, [r3, #8]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d00b      	beq.n	800e380 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e36e:	689b      	ldr	r3, [r3, #8]
 800e370:	687a      	ldr	r2, [r7, #4]
 800e372:	7c12      	ldrb	r2, [r2, #16]
 800e374:	f107 0108 	add.w	r1, r7, #8
 800e378:	4610      	mov	r0, r2
 800e37a:	4798      	blx	r3
 800e37c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e37e:	e077      	b.n	800e470 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e380:	6839      	ldr	r1, [r7, #0]
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f000 fab1 	bl	800e8ea <USBD_CtlError>
            err++;
 800e388:	7afb      	ldrb	r3, [r7, #11]
 800e38a:	3301      	adds	r3, #1
 800e38c:	72fb      	strb	r3, [r7, #11]
          break;
 800e38e:	e06f      	b.n	800e470 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e396:	68db      	ldr	r3, [r3, #12]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d00b      	beq.n	800e3b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e3a2:	68db      	ldr	r3, [r3, #12]
 800e3a4:	687a      	ldr	r2, [r7, #4]
 800e3a6:	7c12      	ldrb	r2, [r2, #16]
 800e3a8:	f107 0108 	add.w	r1, r7, #8
 800e3ac:	4610      	mov	r0, r2
 800e3ae:	4798      	blx	r3
 800e3b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e3b2:	e05d      	b.n	800e470 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e3b4:	6839      	ldr	r1, [r7, #0]
 800e3b6:	6878      	ldr	r0, [r7, #4]
 800e3b8:	f000 fa97 	bl	800e8ea <USBD_CtlError>
            err++;
 800e3bc:	7afb      	ldrb	r3, [r7, #11]
 800e3be:	3301      	adds	r3, #1
 800e3c0:	72fb      	strb	r3, [r7, #11]
          break;
 800e3c2:	e055      	b.n	800e470 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e3ca:	691b      	ldr	r3, [r3, #16]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d00b      	beq.n	800e3e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e3d6:	691b      	ldr	r3, [r3, #16]
 800e3d8:	687a      	ldr	r2, [r7, #4]
 800e3da:	7c12      	ldrb	r2, [r2, #16]
 800e3dc:	f107 0108 	add.w	r1, r7, #8
 800e3e0:	4610      	mov	r0, r2
 800e3e2:	4798      	blx	r3
 800e3e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e3e6:	e043      	b.n	800e470 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e3e8:	6839      	ldr	r1, [r7, #0]
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f000 fa7d 	bl	800e8ea <USBD_CtlError>
            err++;
 800e3f0:	7afb      	ldrb	r3, [r7, #11]
 800e3f2:	3301      	adds	r3, #1
 800e3f4:	72fb      	strb	r3, [r7, #11]
          break;
 800e3f6:	e03b      	b.n	800e470 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e3fe:	695b      	ldr	r3, [r3, #20]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d00b      	beq.n	800e41c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e40a:	695b      	ldr	r3, [r3, #20]
 800e40c:	687a      	ldr	r2, [r7, #4]
 800e40e:	7c12      	ldrb	r2, [r2, #16]
 800e410:	f107 0108 	add.w	r1, r7, #8
 800e414:	4610      	mov	r0, r2
 800e416:	4798      	blx	r3
 800e418:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e41a:	e029      	b.n	800e470 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e41c:	6839      	ldr	r1, [r7, #0]
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f000 fa63 	bl	800e8ea <USBD_CtlError>
            err++;
 800e424:	7afb      	ldrb	r3, [r7, #11]
 800e426:	3301      	adds	r3, #1
 800e428:	72fb      	strb	r3, [r7, #11]
          break;
 800e42a:	e021      	b.n	800e470 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e432:	699b      	ldr	r3, [r3, #24]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d00b      	beq.n	800e450 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e43e:	699b      	ldr	r3, [r3, #24]
 800e440:	687a      	ldr	r2, [r7, #4]
 800e442:	7c12      	ldrb	r2, [r2, #16]
 800e444:	f107 0108 	add.w	r1, r7, #8
 800e448:	4610      	mov	r0, r2
 800e44a:	4798      	blx	r3
 800e44c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e44e:	e00f      	b.n	800e470 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e450:	6839      	ldr	r1, [r7, #0]
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f000 fa49 	bl	800e8ea <USBD_CtlError>
            err++;
 800e458:	7afb      	ldrb	r3, [r7, #11]
 800e45a:	3301      	adds	r3, #1
 800e45c:	72fb      	strb	r3, [r7, #11]
          break;
 800e45e:	e007      	b.n	800e470 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e460:	6839      	ldr	r1, [r7, #0]
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f000 fa41 	bl	800e8ea <USBD_CtlError>
          err++;
 800e468:	7afb      	ldrb	r3, [r7, #11]
 800e46a:	3301      	adds	r3, #1
 800e46c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e46e:	bf00      	nop
      }
      break;
 800e470:	e037      	b.n	800e4e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	7c1b      	ldrb	r3, [r3, #16]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d109      	bne.n	800e48e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e482:	f107 0208 	add.w	r2, r7, #8
 800e486:	4610      	mov	r0, r2
 800e488:	4798      	blx	r3
 800e48a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e48c:	e029      	b.n	800e4e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e48e:	6839      	ldr	r1, [r7, #0]
 800e490:	6878      	ldr	r0, [r7, #4]
 800e492:	f000 fa2a 	bl	800e8ea <USBD_CtlError>
        err++;
 800e496:	7afb      	ldrb	r3, [r7, #11]
 800e498:	3301      	adds	r3, #1
 800e49a:	72fb      	strb	r3, [r7, #11]
      break;
 800e49c:	e021      	b.n	800e4e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	7c1b      	ldrb	r3, [r3, #16]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d10d      	bne.n	800e4c2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e4ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e4ae:	f107 0208 	add.w	r2, r7, #8
 800e4b2:	4610      	mov	r0, r2
 800e4b4:	4798      	blx	r3
 800e4b6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	3301      	adds	r3, #1
 800e4bc:	2207      	movs	r2, #7
 800e4be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e4c0:	e00f      	b.n	800e4e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e4c2:	6839      	ldr	r1, [r7, #0]
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f000 fa10 	bl	800e8ea <USBD_CtlError>
        err++;
 800e4ca:	7afb      	ldrb	r3, [r7, #11]
 800e4cc:	3301      	adds	r3, #1
 800e4ce:	72fb      	strb	r3, [r7, #11]
      break;
 800e4d0:	e007      	b.n	800e4e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e4d2:	6839      	ldr	r1, [r7, #0]
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f000 fa08 	bl	800e8ea <USBD_CtlError>
      err++;
 800e4da:	7afb      	ldrb	r3, [r7, #11]
 800e4dc:	3301      	adds	r3, #1
 800e4de:	72fb      	strb	r3, [r7, #11]
      break;
 800e4e0:	bf00      	nop
  }

  if (err != 0U)
 800e4e2:	7afb      	ldrb	r3, [r7, #11]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d11e      	bne.n	800e526 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	88db      	ldrh	r3, [r3, #6]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d016      	beq.n	800e51e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e4f0:	893b      	ldrh	r3, [r7, #8]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d00e      	beq.n	800e514 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	88da      	ldrh	r2, [r3, #6]
 800e4fa:	893b      	ldrh	r3, [r7, #8]
 800e4fc:	4293      	cmp	r3, r2
 800e4fe:	bf28      	it	cs
 800e500:	4613      	movcs	r3, r2
 800e502:	b29b      	uxth	r3, r3
 800e504:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e506:	893b      	ldrh	r3, [r7, #8]
 800e508:	461a      	mov	r2, r3
 800e50a:	68f9      	ldr	r1, [r7, #12]
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f000 fa69 	bl	800e9e4 <USBD_CtlSendData>
 800e512:	e009      	b.n	800e528 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e514:	6839      	ldr	r1, [r7, #0]
 800e516:	6878      	ldr	r0, [r7, #4]
 800e518:	f000 f9e7 	bl	800e8ea <USBD_CtlError>
 800e51c:	e004      	b.n	800e528 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	f000 fac1 	bl	800eaa6 <USBD_CtlSendStatus>
 800e524:	e000      	b.n	800e528 <USBD_GetDescriptor+0x2cc>
    return;
 800e526:	bf00      	nop
  }
}
 800e528:	3710      	adds	r7, #16
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}
 800e52e:	bf00      	nop

0800e530 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b084      	sub	sp, #16
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	889b      	ldrh	r3, [r3, #4]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d131      	bne.n	800e5a6 <USBD_SetAddress+0x76>
 800e542:	683b      	ldr	r3, [r7, #0]
 800e544:	88db      	ldrh	r3, [r3, #6]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d12d      	bne.n	800e5a6 <USBD_SetAddress+0x76>
 800e54a:	683b      	ldr	r3, [r7, #0]
 800e54c:	885b      	ldrh	r3, [r3, #2]
 800e54e:	2b7f      	cmp	r3, #127	@ 0x7f
 800e550:	d829      	bhi.n	800e5a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	885b      	ldrh	r3, [r3, #2]
 800e556:	b2db      	uxtb	r3, r3
 800e558:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e55c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e564:	b2db      	uxtb	r3, r3
 800e566:	2b03      	cmp	r3, #3
 800e568:	d104      	bne.n	800e574 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e56a:	6839      	ldr	r1, [r7, #0]
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	f000 f9bc 	bl	800e8ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e572:	e01d      	b.n	800e5b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	7bfa      	ldrb	r2, [r7, #15]
 800e578:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e57c:	7bfb      	ldrb	r3, [r7, #15]
 800e57e:	4619      	mov	r1, r3
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f000 ff7d 	bl	800f480 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	f000 fa8d 	bl	800eaa6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e58c:	7bfb      	ldrb	r3, [r7, #15]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d004      	beq.n	800e59c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2202      	movs	r2, #2
 800e596:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e59a:	e009      	b.n	800e5b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2201      	movs	r2, #1
 800e5a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e5a4:	e004      	b.n	800e5b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e5a6:	6839      	ldr	r1, [r7, #0]
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f000 f99e 	bl	800e8ea <USBD_CtlError>
  }
}
 800e5ae:	bf00      	nop
 800e5b0:	bf00      	nop
 800e5b2:	3710      	adds	r7, #16
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}

0800e5b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b084      	sub	sp, #16
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
 800e5c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	885b      	ldrh	r3, [r3, #2]
 800e5ca:	b2da      	uxtb	r2, r3
 800e5cc:	4b4e      	ldr	r3, [pc, #312]	@ (800e708 <USBD_SetConfig+0x150>)
 800e5ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e5d0:	4b4d      	ldr	r3, [pc, #308]	@ (800e708 <USBD_SetConfig+0x150>)
 800e5d2:	781b      	ldrb	r3, [r3, #0]
 800e5d4:	2b01      	cmp	r3, #1
 800e5d6:	d905      	bls.n	800e5e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e5d8:	6839      	ldr	r1, [r7, #0]
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f000 f985 	bl	800e8ea <USBD_CtlError>
    return USBD_FAIL;
 800e5e0:	2303      	movs	r3, #3
 800e5e2:	e08c      	b.n	800e6fe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e5ea:	b2db      	uxtb	r3, r3
 800e5ec:	2b02      	cmp	r3, #2
 800e5ee:	d002      	beq.n	800e5f6 <USBD_SetConfig+0x3e>
 800e5f0:	2b03      	cmp	r3, #3
 800e5f2:	d029      	beq.n	800e648 <USBD_SetConfig+0x90>
 800e5f4:	e075      	b.n	800e6e2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e5f6:	4b44      	ldr	r3, [pc, #272]	@ (800e708 <USBD_SetConfig+0x150>)
 800e5f8:	781b      	ldrb	r3, [r3, #0]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d020      	beq.n	800e640 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e5fe:	4b42      	ldr	r3, [pc, #264]	@ (800e708 <USBD_SetConfig+0x150>)
 800e600:	781b      	ldrb	r3, [r3, #0]
 800e602:	461a      	mov	r2, r3
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e608:	4b3f      	ldr	r3, [pc, #252]	@ (800e708 <USBD_SetConfig+0x150>)
 800e60a:	781b      	ldrb	r3, [r3, #0]
 800e60c:	4619      	mov	r1, r3
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f7fe ffcd 	bl	800d5ae <USBD_SetClassConfig>
 800e614:	4603      	mov	r3, r0
 800e616:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e618:	7bfb      	ldrb	r3, [r7, #15]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d008      	beq.n	800e630 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e61e:	6839      	ldr	r1, [r7, #0]
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f000 f962 	bl	800e8ea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2202      	movs	r2, #2
 800e62a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e62e:	e065      	b.n	800e6fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f000 fa38 	bl	800eaa6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2203      	movs	r2, #3
 800e63a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e63e:	e05d      	b.n	800e6fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f000 fa30 	bl	800eaa6 <USBD_CtlSendStatus>
      break;
 800e646:	e059      	b.n	800e6fc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e648:	4b2f      	ldr	r3, [pc, #188]	@ (800e708 <USBD_SetConfig+0x150>)
 800e64a:	781b      	ldrb	r3, [r3, #0]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d112      	bne.n	800e676 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2202      	movs	r2, #2
 800e654:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e658:	4b2b      	ldr	r3, [pc, #172]	@ (800e708 <USBD_SetConfig+0x150>)
 800e65a:	781b      	ldrb	r3, [r3, #0]
 800e65c:	461a      	mov	r2, r3
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e662:	4b29      	ldr	r3, [pc, #164]	@ (800e708 <USBD_SetConfig+0x150>)
 800e664:	781b      	ldrb	r3, [r3, #0]
 800e666:	4619      	mov	r1, r3
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	f7fe ffbc 	bl	800d5e6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	f000 fa19 	bl	800eaa6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e674:	e042      	b.n	800e6fc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e676:	4b24      	ldr	r3, [pc, #144]	@ (800e708 <USBD_SetConfig+0x150>)
 800e678:	781b      	ldrb	r3, [r3, #0]
 800e67a:	461a      	mov	r2, r3
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	685b      	ldr	r3, [r3, #4]
 800e680:	429a      	cmp	r2, r3
 800e682:	d02a      	beq.n	800e6da <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	685b      	ldr	r3, [r3, #4]
 800e688:	b2db      	uxtb	r3, r3
 800e68a:	4619      	mov	r1, r3
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f7fe ffaa 	bl	800d5e6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e692:	4b1d      	ldr	r3, [pc, #116]	@ (800e708 <USBD_SetConfig+0x150>)
 800e694:	781b      	ldrb	r3, [r3, #0]
 800e696:	461a      	mov	r2, r3
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e69c:	4b1a      	ldr	r3, [pc, #104]	@ (800e708 <USBD_SetConfig+0x150>)
 800e69e:	781b      	ldrb	r3, [r3, #0]
 800e6a0:	4619      	mov	r1, r3
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f7fe ff83 	bl	800d5ae <USBD_SetClassConfig>
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e6ac:	7bfb      	ldrb	r3, [r7, #15]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d00f      	beq.n	800e6d2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e6b2:	6839      	ldr	r1, [r7, #0]
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f000 f918 	bl	800e8ea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	685b      	ldr	r3, [r3, #4]
 800e6be:	b2db      	uxtb	r3, r3
 800e6c0:	4619      	mov	r1, r3
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f7fe ff8f 	bl	800d5e6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2202      	movs	r2, #2
 800e6cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e6d0:	e014      	b.n	800e6fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f000 f9e7 	bl	800eaa6 <USBD_CtlSendStatus>
      break;
 800e6d8:	e010      	b.n	800e6fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f000 f9e3 	bl	800eaa6 <USBD_CtlSendStatus>
      break;
 800e6e0:	e00c      	b.n	800e6fc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e6e2:	6839      	ldr	r1, [r7, #0]
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	f000 f900 	bl	800e8ea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e6ea:	4b07      	ldr	r3, [pc, #28]	@ (800e708 <USBD_SetConfig+0x150>)
 800e6ec:	781b      	ldrb	r3, [r3, #0]
 800e6ee:	4619      	mov	r1, r3
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f7fe ff78 	bl	800d5e6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e6f6:	2303      	movs	r3, #3
 800e6f8:	73fb      	strb	r3, [r7, #15]
      break;
 800e6fa:	bf00      	nop
  }

  return ret;
 800e6fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6fe:	4618      	mov	r0, r3
 800e700:	3710      	adds	r7, #16
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}
 800e706:	bf00      	nop
 800e708:	20000b60 	.word	0x20000b60

0800e70c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b082      	sub	sp, #8
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
 800e714:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	88db      	ldrh	r3, [r3, #6]
 800e71a:	2b01      	cmp	r3, #1
 800e71c:	d004      	beq.n	800e728 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e71e:	6839      	ldr	r1, [r7, #0]
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f000 f8e2 	bl	800e8ea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e726:	e023      	b.n	800e770 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e72e:	b2db      	uxtb	r3, r3
 800e730:	2b02      	cmp	r3, #2
 800e732:	dc02      	bgt.n	800e73a <USBD_GetConfig+0x2e>
 800e734:	2b00      	cmp	r3, #0
 800e736:	dc03      	bgt.n	800e740 <USBD_GetConfig+0x34>
 800e738:	e015      	b.n	800e766 <USBD_GetConfig+0x5a>
 800e73a:	2b03      	cmp	r3, #3
 800e73c:	d00b      	beq.n	800e756 <USBD_GetConfig+0x4a>
 800e73e:	e012      	b.n	800e766 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2200      	movs	r2, #0
 800e744:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	3308      	adds	r3, #8
 800e74a:	2201      	movs	r2, #1
 800e74c:	4619      	mov	r1, r3
 800e74e:	6878      	ldr	r0, [r7, #4]
 800e750:	f000 f948 	bl	800e9e4 <USBD_CtlSendData>
        break;
 800e754:	e00c      	b.n	800e770 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	3304      	adds	r3, #4
 800e75a:	2201      	movs	r2, #1
 800e75c:	4619      	mov	r1, r3
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f000 f940 	bl	800e9e4 <USBD_CtlSendData>
        break;
 800e764:	e004      	b.n	800e770 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e766:	6839      	ldr	r1, [r7, #0]
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f000 f8be 	bl	800e8ea <USBD_CtlError>
        break;
 800e76e:	bf00      	nop
}
 800e770:	bf00      	nop
 800e772:	3708      	adds	r7, #8
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}

0800e778 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b082      	sub	sp, #8
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
 800e780:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e788:	b2db      	uxtb	r3, r3
 800e78a:	3b01      	subs	r3, #1
 800e78c:	2b02      	cmp	r3, #2
 800e78e:	d81e      	bhi.n	800e7ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	88db      	ldrh	r3, [r3, #6]
 800e794:	2b02      	cmp	r3, #2
 800e796:	d004      	beq.n	800e7a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e798:	6839      	ldr	r1, [r7, #0]
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f000 f8a5 	bl	800e8ea <USBD_CtlError>
        break;
 800e7a0:	e01a      	b.n	800e7d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	2201      	movs	r2, #1
 800e7a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d005      	beq.n	800e7be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	68db      	ldr	r3, [r3, #12]
 800e7b6:	f043 0202 	orr.w	r2, r3, #2
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	330c      	adds	r3, #12
 800e7c2:	2202      	movs	r2, #2
 800e7c4:	4619      	mov	r1, r3
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	f000 f90c 	bl	800e9e4 <USBD_CtlSendData>
      break;
 800e7cc:	e004      	b.n	800e7d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e7ce:	6839      	ldr	r1, [r7, #0]
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f000 f88a 	bl	800e8ea <USBD_CtlError>
      break;
 800e7d6:	bf00      	nop
  }
}
 800e7d8:	bf00      	nop
 800e7da:	3708      	adds	r7, #8
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}

0800e7e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b082      	sub	sp, #8
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e7ea:	683b      	ldr	r3, [r7, #0]
 800e7ec:	885b      	ldrh	r3, [r3, #2]
 800e7ee:	2b01      	cmp	r3, #1
 800e7f0:	d107      	bne.n	800e802 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2201      	movs	r2, #1
 800e7f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e7fa:	6878      	ldr	r0, [r7, #4]
 800e7fc:	f000 f953 	bl	800eaa6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e800:	e013      	b.n	800e82a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	885b      	ldrh	r3, [r3, #2]
 800e806:	2b02      	cmp	r3, #2
 800e808:	d10b      	bne.n	800e822 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	889b      	ldrh	r3, [r3, #4]
 800e80e:	0a1b      	lsrs	r3, r3, #8
 800e810:	b29b      	uxth	r3, r3
 800e812:	b2da      	uxtb	r2, r3
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f000 f943 	bl	800eaa6 <USBD_CtlSendStatus>
}
 800e820:	e003      	b.n	800e82a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e822:	6839      	ldr	r1, [r7, #0]
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f000 f860 	bl	800e8ea <USBD_CtlError>
}
 800e82a:	bf00      	nop
 800e82c:	3708      	adds	r7, #8
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}

0800e832 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e832:	b580      	push	{r7, lr}
 800e834:	b082      	sub	sp, #8
 800e836:	af00      	add	r7, sp, #0
 800e838:	6078      	str	r0, [r7, #4]
 800e83a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e842:	b2db      	uxtb	r3, r3
 800e844:	3b01      	subs	r3, #1
 800e846:	2b02      	cmp	r3, #2
 800e848:	d80b      	bhi.n	800e862 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	885b      	ldrh	r3, [r3, #2]
 800e84e:	2b01      	cmp	r3, #1
 800e850:	d10c      	bne.n	800e86c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2200      	movs	r2, #0
 800e856:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f000 f923 	bl	800eaa6 <USBD_CtlSendStatus>
      }
      break;
 800e860:	e004      	b.n	800e86c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e862:	6839      	ldr	r1, [r7, #0]
 800e864:	6878      	ldr	r0, [r7, #4]
 800e866:	f000 f840 	bl	800e8ea <USBD_CtlError>
      break;
 800e86a:	e000      	b.n	800e86e <USBD_ClrFeature+0x3c>
      break;
 800e86c:	bf00      	nop
  }
}
 800e86e:	bf00      	nop
 800e870:	3708      	adds	r7, #8
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}

0800e876 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e876:	b580      	push	{r7, lr}
 800e878:	b084      	sub	sp, #16
 800e87a:	af00      	add	r7, sp, #0
 800e87c:	6078      	str	r0, [r7, #4]
 800e87e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	781a      	ldrb	r2, [r3, #0]
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	3301      	adds	r3, #1
 800e890:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	781a      	ldrb	r2, [r3, #0]
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	3301      	adds	r3, #1
 800e89e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e8a0:	68f8      	ldr	r0, [r7, #12]
 800e8a2:	f7ff fa3d 	bl	800dd20 <SWAPBYTE>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	461a      	mov	r2, r3
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	3301      	adds	r3, #1
 800e8b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	3301      	adds	r3, #1
 800e8b8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e8ba:	68f8      	ldr	r0, [r7, #12]
 800e8bc:	f7ff fa30 	bl	800dd20 <SWAPBYTE>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	461a      	mov	r2, r3
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	3301      	adds	r3, #1
 800e8cc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	3301      	adds	r3, #1
 800e8d2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e8d4:	68f8      	ldr	r0, [r7, #12]
 800e8d6:	f7ff fa23 	bl	800dd20 <SWAPBYTE>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	461a      	mov	r2, r3
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	80da      	strh	r2, [r3, #6]
}
 800e8e2:	bf00      	nop
 800e8e4:	3710      	adds	r7, #16
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}

0800e8ea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e8ea:	b580      	push	{r7, lr}
 800e8ec:	b082      	sub	sp, #8
 800e8ee:	af00      	add	r7, sp, #0
 800e8f0:	6078      	str	r0, [r7, #4]
 800e8f2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e8f4:	2180      	movs	r1, #128	@ 0x80
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f000 fd58 	bl	800f3ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e8fc:	2100      	movs	r1, #0
 800e8fe:	6878      	ldr	r0, [r7, #4]
 800e900:	f000 fd54 	bl	800f3ac <USBD_LL_StallEP>
}
 800e904:	bf00      	nop
 800e906:	3708      	adds	r7, #8
 800e908:	46bd      	mov	sp, r7
 800e90a:	bd80      	pop	{r7, pc}

0800e90c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b086      	sub	sp, #24
 800e910:	af00      	add	r7, sp, #0
 800e912:	60f8      	str	r0, [r7, #12]
 800e914:	60b9      	str	r1, [r7, #8]
 800e916:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e918:	2300      	movs	r3, #0
 800e91a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d042      	beq.n	800e9a8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800e926:	6938      	ldr	r0, [r7, #16]
 800e928:	f000 f842 	bl	800e9b0 <USBD_GetLen>
 800e92c:	4603      	mov	r3, r0
 800e92e:	3301      	adds	r3, #1
 800e930:	005b      	lsls	r3, r3, #1
 800e932:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e936:	d808      	bhi.n	800e94a <USBD_GetString+0x3e>
 800e938:	6938      	ldr	r0, [r7, #16]
 800e93a:	f000 f839 	bl	800e9b0 <USBD_GetLen>
 800e93e:	4603      	mov	r3, r0
 800e940:	3301      	adds	r3, #1
 800e942:	b29b      	uxth	r3, r3
 800e944:	005b      	lsls	r3, r3, #1
 800e946:	b29a      	uxth	r2, r3
 800e948:	e001      	b.n	800e94e <USBD_GetString+0x42>
 800e94a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e952:	7dfb      	ldrb	r3, [r7, #23]
 800e954:	68ba      	ldr	r2, [r7, #8]
 800e956:	4413      	add	r3, r2
 800e958:	687a      	ldr	r2, [r7, #4]
 800e95a:	7812      	ldrb	r2, [r2, #0]
 800e95c:	701a      	strb	r2, [r3, #0]
  idx++;
 800e95e:	7dfb      	ldrb	r3, [r7, #23]
 800e960:	3301      	adds	r3, #1
 800e962:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e964:	7dfb      	ldrb	r3, [r7, #23]
 800e966:	68ba      	ldr	r2, [r7, #8]
 800e968:	4413      	add	r3, r2
 800e96a:	2203      	movs	r2, #3
 800e96c:	701a      	strb	r2, [r3, #0]
  idx++;
 800e96e:	7dfb      	ldrb	r3, [r7, #23]
 800e970:	3301      	adds	r3, #1
 800e972:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e974:	e013      	b.n	800e99e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800e976:	7dfb      	ldrb	r3, [r7, #23]
 800e978:	68ba      	ldr	r2, [r7, #8]
 800e97a:	4413      	add	r3, r2
 800e97c:	693a      	ldr	r2, [r7, #16]
 800e97e:	7812      	ldrb	r2, [r2, #0]
 800e980:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e982:	693b      	ldr	r3, [r7, #16]
 800e984:	3301      	adds	r3, #1
 800e986:	613b      	str	r3, [r7, #16]
    idx++;
 800e988:	7dfb      	ldrb	r3, [r7, #23]
 800e98a:	3301      	adds	r3, #1
 800e98c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e98e:	7dfb      	ldrb	r3, [r7, #23]
 800e990:	68ba      	ldr	r2, [r7, #8]
 800e992:	4413      	add	r3, r2
 800e994:	2200      	movs	r2, #0
 800e996:	701a      	strb	r2, [r3, #0]
    idx++;
 800e998:	7dfb      	ldrb	r3, [r7, #23]
 800e99a:	3301      	adds	r3, #1
 800e99c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e99e:	693b      	ldr	r3, [r7, #16]
 800e9a0:	781b      	ldrb	r3, [r3, #0]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d1e7      	bne.n	800e976 <USBD_GetString+0x6a>
 800e9a6:	e000      	b.n	800e9aa <USBD_GetString+0x9e>
    return;
 800e9a8:	bf00      	nop
  }
}
 800e9aa:	3718      	adds	r7, #24
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}

0800e9b0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e9b0:	b480      	push	{r7}
 800e9b2:	b085      	sub	sp, #20
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e9c0:	e005      	b.n	800e9ce <USBD_GetLen+0x1e>
  {
    len++;
 800e9c2:	7bfb      	ldrb	r3, [r7, #15]
 800e9c4:	3301      	adds	r3, #1
 800e9c6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	3301      	adds	r3, #1
 800e9cc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e9ce:	68bb      	ldr	r3, [r7, #8]
 800e9d0:	781b      	ldrb	r3, [r3, #0]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d1f5      	bne.n	800e9c2 <USBD_GetLen+0x12>
  }

  return len;
 800e9d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	3714      	adds	r7, #20
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e2:	4770      	bx	lr

0800e9e4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b084      	sub	sp, #16
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	60f8      	str	r0, [r7, #12]
 800e9ec:	60b9      	str	r1, [r7, #8]
 800e9ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	2202      	movs	r2, #2
 800e9f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	687a      	ldr	r2, [r7, #4]
 800e9fc:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	68ba      	ldr	r2, [r7, #8]
 800ea02:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	687a      	ldr	r2, [r7, #4]
 800ea08:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	68ba      	ldr	r2, [r7, #8]
 800ea0e:	2100      	movs	r1, #0
 800ea10:	68f8      	ldr	r0, [r7, #12]
 800ea12:	f000 fd54 	bl	800f4be <USBD_LL_Transmit>

  return USBD_OK;
 800ea16:	2300      	movs	r3, #0
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	3710      	adds	r7, #16
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}

0800ea20 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b084      	sub	sp, #16
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	60f8      	str	r0, [r7, #12]
 800ea28:	60b9      	str	r1, [r7, #8]
 800ea2a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	68ba      	ldr	r2, [r7, #8]
 800ea30:	2100      	movs	r1, #0
 800ea32:	68f8      	ldr	r0, [r7, #12]
 800ea34:	f000 fd43 	bl	800f4be <USBD_LL_Transmit>

  return USBD_OK;
 800ea38:	2300      	movs	r3, #0
}
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	3710      	adds	r7, #16
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd80      	pop	{r7, pc}

0800ea42 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ea42:	b580      	push	{r7, lr}
 800ea44:	b084      	sub	sp, #16
 800ea46:	af00      	add	r7, sp, #0
 800ea48:	60f8      	str	r0, [r7, #12]
 800ea4a:	60b9      	str	r1, [r7, #8]
 800ea4c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	2203      	movs	r2, #3
 800ea52:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	687a      	ldr	r2, [r7, #4]
 800ea5a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	68ba      	ldr	r2, [r7, #8]
 800ea62:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	687a      	ldr	r2, [r7, #4]
 800ea6a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	68ba      	ldr	r2, [r7, #8]
 800ea72:	2100      	movs	r1, #0
 800ea74:	68f8      	ldr	r0, [r7, #12]
 800ea76:	f000 fd43 	bl	800f500 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ea7a:	2300      	movs	r3, #0
}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	3710      	adds	r7, #16
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd80      	pop	{r7, pc}

0800ea84 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b084      	sub	sp, #16
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	60f8      	str	r0, [r7, #12]
 800ea8c:	60b9      	str	r1, [r7, #8]
 800ea8e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	68ba      	ldr	r2, [r7, #8]
 800ea94:	2100      	movs	r1, #0
 800ea96:	68f8      	ldr	r0, [r7, #12]
 800ea98:	f000 fd32 	bl	800f500 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ea9c:	2300      	movs	r3, #0
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	3710      	adds	r7, #16
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}

0800eaa6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800eaa6:	b580      	push	{r7, lr}
 800eaa8:	b082      	sub	sp, #8
 800eaaa:	af00      	add	r7, sp, #0
 800eaac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2204      	movs	r2, #4
 800eab2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800eab6:	2300      	movs	r3, #0
 800eab8:	2200      	movs	r2, #0
 800eaba:	2100      	movs	r1, #0
 800eabc:	6878      	ldr	r0, [r7, #4]
 800eabe:	f000 fcfe 	bl	800f4be <USBD_LL_Transmit>

  return USBD_OK;
 800eac2:	2300      	movs	r3, #0
}
 800eac4:	4618      	mov	r0, r3
 800eac6:	3708      	adds	r7, #8
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd80      	pop	{r7, pc}

0800eacc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b082      	sub	sp, #8
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2205      	movs	r2, #5
 800ead8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eadc:	2300      	movs	r3, #0
 800eade:	2200      	movs	r2, #0
 800eae0:	2100      	movs	r1, #0
 800eae2:	6878      	ldr	r0, [r7, #4]
 800eae4:	f000 fd0c 	bl	800f500 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eae8:	2300      	movs	r3, #0
}
 800eaea:	4618      	mov	r0, r3
 800eaec:	3708      	adds	r7, #8
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}
	...

0800eaf4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800eaf8:	2200      	movs	r2, #0
 800eafa:	4912      	ldr	r1, [pc, #72]	@ (800eb44 <MX_USB_DEVICE_Init+0x50>)
 800eafc:	4812      	ldr	r0, [pc, #72]	@ (800eb48 <MX_USB_DEVICE_Init+0x54>)
 800eafe:	f7fe fcd9 	bl	800d4b4 <USBD_Init>
 800eb02:	4603      	mov	r3, r0
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d001      	beq.n	800eb0c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800eb08:	f7f3 fd30 	bl	800256c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800eb0c:	490f      	ldr	r1, [pc, #60]	@ (800eb4c <MX_USB_DEVICE_Init+0x58>)
 800eb0e:	480e      	ldr	r0, [pc, #56]	@ (800eb48 <MX_USB_DEVICE_Init+0x54>)
 800eb10:	f7fe fd00 	bl	800d514 <USBD_RegisterClass>
 800eb14:	4603      	mov	r3, r0
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d001      	beq.n	800eb1e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800eb1a:	f7f3 fd27 	bl	800256c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800eb1e:	490c      	ldr	r1, [pc, #48]	@ (800eb50 <MX_USB_DEVICE_Init+0x5c>)
 800eb20:	4809      	ldr	r0, [pc, #36]	@ (800eb48 <MX_USB_DEVICE_Init+0x54>)
 800eb22:	f7fe fbf7 	bl	800d314 <USBD_CDC_RegisterInterface>
 800eb26:	4603      	mov	r3, r0
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d001      	beq.n	800eb30 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800eb2c:	f7f3 fd1e 	bl	800256c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800eb30:	4805      	ldr	r0, [pc, #20]	@ (800eb48 <MX_USB_DEVICE_Init+0x54>)
 800eb32:	f7fe fd25 	bl	800d580 <USBD_Start>
 800eb36:	4603      	mov	r3, r0
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d001      	beq.n	800eb40 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800eb3c:	f7f3 fd16 	bl	800256c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800eb40:	bf00      	nop
 800eb42:	bd80      	pop	{r7, pc}
 800eb44:	200000bc 	.word	0x200000bc
 800eb48:	20000b64 	.word	0x20000b64
 800eb4c:	20000020 	.word	0x20000020
 800eb50:	200000a8 	.word	0x200000a8

0800eb54 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800eb58:	2200      	movs	r2, #0
 800eb5a:	4905      	ldr	r1, [pc, #20]	@ (800eb70 <CDC_Init_FS+0x1c>)
 800eb5c:	4805      	ldr	r0, [pc, #20]	@ (800eb74 <CDC_Init_FS+0x20>)
 800eb5e:	f7fe fbf3 	bl	800d348 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800eb62:	4905      	ldr	r1, [pc, #20]	@ (800eb78 <CDC_Init_FS+0x24>)
 800eb64:	4803      	ldr	r0, [pc, #12]	@ (800eb74 <CDC_Init_FS+0x20>)
 800eb66:	f7fe fc11 	bl	800d38c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800eb6a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	bd80      	pop	{r7, pc}
 800eb70:	20001040 	.word	0x20001040
 800eb74:	20000b64 	.word	0x20000b64
 800eb78:	20000e40 	.word	0x20000e40

0800eb7c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800eb80:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800eb82:	4618      	mov	r0, r3
 800eb84:	46bd      	mov	sp, r7
 800eb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8a:	4770      	bx	lr

0800eb8c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800eb8c:	b480      	push	{r7}
 800eb8e:	b083      	sub	sp, #12
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	4603      	mov	r3, r0
 800eb94:	6039      	str	r1, [r7, #0]
 800eb96:	71fb      	strb	r3, [r7, #7]
 800eb98:	4613      	mov	r3, r2
 800eb9a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800eb9c:	79fb      	ldrb	r3, [r7, #7]
 800eb9e:	2b23      	cmp	r3, #35	@ 0x23
 800eba0:	f200 8098 	bhi.w	800ecd4 <CDC_Control_FS+0x148>
 800eba4:	a201      	add	r2, pc, #4	@ (adr r2, 800ebac <CDC_Control_FS+0x20>)
 800eba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebaa:	bf00      	nop
 800ebac:	0800ecd5 	.word	0x0800ecd5
 800ebb0:	0800ecd5 	.word	0x0800ecd5
 800ebb4:	0800ecd5 	.word	0x0800ecd5
 800ebb8:	0800ecd5 	.word	0x0800ecd5
 800ebbc:	0800ecd5 	.word	0x0800ecd5
 800ebc0:	0800ecd5 	.word	0x0800ecd5
 800ebc4:	0800ecd5 	.word	0x0800ecd5
 800ebc8:	0800ecd5 	.word	0x0800ecd5
 800ebcc:	0800ecd5 	.word	0x0800ecd5
 800ebd0:	0800ecd5 	.word	0x0800ecd5
 800ebd4:	0800ecd5 	.word	0x0800ecd5
 800ebd8:	0800ecd5 	.word	0x0800ecd5
 800ebdc:	0800ecd5 	.word	0x0800ecd5
 800ebe0:	0800ecd5 	.word	0x0800ecd5
 800ebe4:	0800ecd5 	.word	0x0800ecd5
 800ebe8:	0800ecd5 	.word	0x0800ecd5
 800ebec:	0800ecd5 	.word	0x0800ecd5
 800ebf0:	0800ecd5 	.word	0x0800ecd5
 800ebf4:	0800ecd5 	.word	0x0800ecd5
 800ebf8:	0800ecd5 	.word	0x0800ecd5
 800ebfc:	0800ecd5 	.word	0x0800ecd5
 800ec00:	0800ecd5 	.word	0x0800ecd5
 800ec04:	0800ecd5 	.word	0x0800ecd5
 800ec08:	0800ecd5 	.word	0x0800ecd5
 800ec0c:	0800ecd5 	.word	0x0800ecd5
 800ec10:	0800ecd5 	.word	0x0800ecd5
 800ec14:	0800ecd5 	.word	0x0800ecd5
 800ec18:	0800ecd5 	.word	0x0800ecd5
 800ec1c:	0800ecd5 	.word	0x0800ecd5
 800ec20:	0800ecd5 	.word	0x0800ecd5
 800ec24:	0800ecd5 	.word	0x0800ecd5
 800ec28:	0800ecd5 	.word	0x0800ecd5
 800ec2c:	0800ec3d 	.word	0x0800ec3d
 800ec30:	0800ec81 	.word	0x0800ec81
 800ec34:	0800ecd5 	.word	0x0800ecd5
 800ec38:	0800ecd5 	.word	0x0800ecd5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
     	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2]<<16) | (pbuf[3]<<24));
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	781b      	ldrb	r3, [r3, #0]
 800ec40:	461a      	mov	r2, r3
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	3301      	adds	r3, #1
 800ec46:	781b      	ldrb	r3, [r3, #0]
 800ec48:	021b      	lsls	r3, r3, #8
 800ec4a:	431a      	orrs	r2, r3
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	3302      	adds	r3, #2
 800ec50:	781b      	ldrb	r3, [r3, #0]
 800ec52:	041b      	lsls	r3, r3, #16
 800ec54:	431a      	orrs	r2, r3
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	3303      	adds	r3, #3
 800ec5a:	781b      	ldrb	r3, [r3, #0]
 800ec5c:	061b      	lsls	r3, r3, #24
 800ec5e:	4313      	orrs	r3, r2
 800ec60:	461a      	mov	r2, r3
 800ec62:	4b20      	ldr	r3, [pc, #128]	@ (800ece4 <CDC_Control_FS+0x158>)
 800ec64:	601a      	str	r2, [r3, #0]
     	LineCoding.format = pbuf[4];
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	791a      	ldrb	r2, [r3, #4]
 800ec6a:	4b1e      	ldr	r3, [pc, #120]	@ (800ece4 <CDC_Control_FS+0x158>)
 800ec6c:	711a      	strb	r2, [r3, #4]
     	LineCoding.paritytype = pbuf[5];
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	795a      	ldrb	r2, [r3, #5]
 800ec72:	4b1c      	ldr	r3, [pc, #112]	@ (800ece4 <CDC_Control_FS+0x158>)
 800ec74:	715a      	strb	r2, [r3, #5]
     	LineCoding.datatype = pbuf[6];
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	799a      	ldrb	r2, [r3, #6]
 800ec7a:	4b1a      	ldr	r3, [pc, #104]	@ (800ece4 <CDC_Control_FS+0x158>)
 800ec7c:	719a      	strb	r2, [r3, #6]
     break;
 800ec7e:	e02a      	b.n	800ecd6 <CDC_Control_FS+0x14a>

     case CDC_GET_LINE_CODING:
     	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800ec80:	4b18      	ldr	r3, [pc, #96]	@ (800ece4 <CDC_Control_FS+0x158>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	b2da      	uxtb	r2, r3
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	701a      	strb	r2, [r3, #0]
     	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800ec8a:	4b16      	ldr	r3, [pc, #88]	@ (800ece4 <CDC_Control_FS+0x158>)
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	0a1a      	lsrs	r2, r3, #8
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	3301      	adds	r3, #1
 800ec94:	b2d2      	uxtb	r2, r2
 800ec96:	701a      	strb	r2, [r3, #0]
     	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800ec98:	4b12      	ldr	r3, [pc, #72]	@ (800ece4 <CDC_Control_FS+0x158>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	0c1a      	lsrs	r2, r3, #16
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	3302      	adds	r3, #2
 800eca2:	b2d2      	uxtb	r2, r2
 800eca4:	701a      	strb	r2, [r3, #0]
     	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800eca6:	4b0f      	ldr	r3, [pc, #60]	@ (800ece4 <CDC_Control_FS+0x158>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	0e1a      	lsrs	r2, r3, #24
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	3303      	adds	r3, #3
 800ecb0:	b2d2      	uxtb	r2, r2
 800ecb2:	701a      	strb	r2, [r3, #0]
     	pbuf[4] = LineCoding.format;
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	3304      	adds	r3, #4
 800ecb8:	4a0a      	ldr	r2, [pc, #40]	@ (800ece4 <CDC_Control_FS+0x158>)
 800ecba:	7912      	ldrb	r2, [r2, #4]
 800ecbc:	701a      	strb	r2, [r3, #0]
     	pbuf[5] = LineCoding.paritytype;
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	3305      	adds	r3, #5
 800ecc2:	4a08      	ldr	r2, [pc, #32]	@ (800ece4 <CDC_Control_FS+0x158>)
 800ecc4:	7952      	ldrb	r2, [r2, #5]
 800ecc6:	701a      	strb	r2, [r3, #0]
     	pbuf[6] = LineCoding.datatype;
 800ecc8:	683b      	ldr	r3, [r7, #0]
 800ecca:	3306      	adds	r3, #6
 800eccc:	4a05      	ldr	r2, [pc, #20]	@ (800ece4 <CDC_Control_FS+0x158>)
 800ecce:	7992      	ldrb	r2, [r2, #6]
 800ecd0:	701a      	strb	r2, [r3, #0]
     break;
 800ecd2:	e000      	b.n	800ecd6 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ecd4:	bf00      	nop
  }

  return (USBD_OK);
 800ecd6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	370c      	adds	r7, #12
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece2:	4770      	bx	lr
 800ece4:	200000a0 	.word	0x200000a0

0800ece8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b082      	sub	sp, #8
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
 800ecf0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 if(aPtrFunRx != NULL)
 800ecf2:	4b0c      	ldr	r3, [pc, #48]	@ (800ed24 <CDC_Receive_FS+0x3c>)
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d007      	beq.n	800ed0a <CDC_Receive_FS+0x22>
			aPtrFunRx(Buf, *Len);
 800ecfa:	4b0a      	ldr	r3, [pc, #40]	@ (800ed24 <CDC_Receive_FS+0x3c>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	683a      	ldr	r2, [r7, #0]
 800ed00:	6812      	ldr	r2, [r2, #0]
 800ed02:	b292      	uxth	r2, r2
 800ed04:	4611      	mov	r1, r2
 800ed06:	6878      	ldr	r0, [r7, #4]
 800ed08:	4798      	blx	r3
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ed0a:	6879      	ldr	r1, [r7, #4]
 800ed0c:	4806      	ldr	r0, [pc, #24]	@ (800ed28 <CDC_Receive_FS+0x40>)
 800ed0e:	f7fe fb3d 	bl	800d38c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ed12:	4805      	ldr	r0, [pc, #20]	@ (800ed28 <CDC_Receive_FS+0x40>)
 800ed14:	f7fe fb98 	bl	800d448 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ed18:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	3708      	adds	r7, #8
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}
 800ed22:	bf00      	nop
 800ed24:	20001240 	.word	0x20001240
 800ed28:	20000b64 	.word	0x20000b64

0800ed2c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b084      	sub	sp, #16
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
 800ed34:	460b      	mov	r3, r1
 800ed36:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ed3c:	4b0d      	ldr	r3, [pc, #52]	@ (800ed74 <CDC_Transmit_FS+0x48>)
 800ed3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ed42:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d001      	beq.n	800ed52 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ed4e:	2301      	movs	r3, #1
 800ed50:	e00b      	b.n	800ed6a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ed52:	887b      	ldrh	r3, [r7, #2]
 800ed54:	461a      	mov	r2, r3
 800ed56:	6879      	ldr	r1, [r7, #4]
 800ed58:	4806      	ldr	r0, [pc, #24]	@ (800ed74 <CDC_Transmit_FS+0x48>)
 800ed5a:	f7fe faf5 	bl	800d348 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ed5e:	4805      	ldr	r0, [pc, #20]	@ (800ed74 <CDC_Transmit_FS+0x48>)
 800ed60:	f7fe fb32 	bl	800d3c8 <USBD_CDC_TransmitPacket>
 800ed64:	4603      	mov	r3, r0
 800ed66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ed68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3710      	adds	r7, #16
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}
 800ed72:	bf00      	nop
 800ed74:	20000b64 	.word	0x20000b64

0800ed78 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ed78:	b480      	push	{r7}
 800ed7a:	b087      	sub	sp, #28
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	60f8      	str	r0, [r7, #12]
 800ed80:	60b9      	str	r1, [r7, #8]
 800ed82:	4613      	mov	r3, r2
 800ed84:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ed86:	2300      	movs	r3, #0
 800ed88:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ed8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ed8e:	4618      	mov	r0, r3
 800ed90:	371c      	adds	r7, #28
 800ed92:	46bd      	mov	sp, r7
 800ed94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed98:	4770      	bx	lr
	...

0800ed9c <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 800ed9c:	b480      	push	{r7}
 800ed9e:	b083      	sub	sp, #12
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 800eda4:	4a04      	ldr	r2, [pc, #16]	@ (800edb8 <CDC_AttachRxData+0x1c>)
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	6013      	str	r3, [r2, #0]
}
 800edaa:	bf00      	nop
 800edac:	370c      	adds	r7, #12
 800edae:	46bd      	mov	sp, r7
 800edb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb4:	4770      	bx	lr
 800edb6:	bf00      	nop
 800edb8:	20001240 	.word	0x20001240

0800edbc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800edbc:	b480      	push	{r7}
 800edbe:	b083      	sub	sp, #12
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	4603      	mov	r3, r0
 800edc4:	6039      	str	r1, [r7, #0]
 800edc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	2212      	movs	r2, #18
 800edcc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800edce:	4b03      	ldr	r3, [pc, #12]	@ (800eddc <USBD_FS_DeviceDescriptor+0x20>)
}
 800edd0:	4618      	mov	r0, r3
 800edd2:	370c      	adds	r7, #12
 800edd4:	46bd      	mov	sp, r7
 800edd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edda:	4770      	bx	lr
 800eddc:	200000d8 	.word	0x200000d8

0800ede0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ede0:	b480      	push	{r7}
 800ede2:	b083      	sub	sp, #12
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	4603      	mov	r3, r0
 800ede8:	6039      	str	r1, [r7, #0]
 800edea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	2204      	movs	r2, #4
 800edf0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800edf2:	4b03      	ldr	r3, [pc, #12]	@ (800ee00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800edf4:	4618      	mov	r0, r3
 800edf6:	370c      	adds	r7, #12
 800edf8:	46bd      	mov	sp, r7
 800edfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfe:	4770      	bx	lr
 800ee00:	200000ec 	.word	0x200000ec

0800ee04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b082      	sub	sp, #8
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	6039      	str	r1, [r7, #0]
 800ee0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ee10:	79fb      	ldrb	r3, [r7, #7]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d105      	bne.n	800ee22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ee16:	683a      	ldr	r2, [r7, #0]
 800ee18:	4907      	ldr	r1, [pc, #28]	@ (800ee38 <USBD_FS_ProductStrDescriptor+0x34>)
 800ee1a:	4808      	ldr	r0, [pc, #32]	@ (800ee3c <USBD_FS_ProductStrDescriptor+0x38>)
 800ee1c:	f7ff fd76 	bl	800e90c <USBD_GetString>
 800ee20:	e004      	b.n	800ee2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ee22:	683a      	ldr	r2, [r7, #0]
 800ee24:	4904      	ldr	r1, [pc, #16]	@ (800ee38 <USBD_FS_ProductStrDescriptor+0x34>)
 800ee26:	4805      	ldr	r0, [pc, #20]	@ (800ee3c <USBD_FS_ProductStrDescriptor+0x38>)
 800ee28:	f7ff fd70 	bl	800e90c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ee2c:	4b02      	ldr	r3, [pc, #8]	@ (800ee38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ee2e:	4618      	mov	r0, r3
 800ee30:	3708      	adds	r7, #8
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}
 800ee36:	bf00      	nop
 800ee38:	20001244 	.word	0x20001244
 800ee3c:	08013d08 	.word	0x08013d08

0800ee40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b082      	sub	sp, #8
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	4603      	mov	r3, r0
 800ee48:	6039      	str	r1, [r7, #0]
 800ee4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ee4c:	683a      	ldr	r2, [r7, #0]
 800ee4e:	4904      	ldr	r1, [pc, #16]	@ (800ee60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ee50:	4804      	ldr	r0, [pc, #16]	@ (800ee64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ee52:	f7ff fd5b 	bl	800e90c <USBD_GetString>
  return USBD_StrDesc;
 800ee56:	4b02      	ldr	r3, [pc, #8]	@ (800ee60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3708      	adds	r7, #8
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}
 800ee60:	20001244 	.word	0x20001244
 800ee64:	08013d20 	.word	0x08013d20

0800ee68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b082      	sub	sp, #8
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	4603      	mov	r3, r0
 800ee70:	6039      	str	r1, [r7, #0]
 800ee72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ee74:	683b      	ldr	r3, [r7, #0]
 800ee76:	221a      	movs	r2, #26
 800ee78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ee7a:	f000 f843 	bl	800ef04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ee7e:	4b02      	ldr	r3, [pc, #8]	@ (800ee88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ee80:	4618      	mov	r0, r3
 800ee82:	3708      	adds	r7, #8
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}
 800ee88:	200000f0 	.word	0x200000f0

0800ee8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b082      	sub	sp, #8
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	4603      	mov	r3, r0
 800ee94:	6039      	str	r1, [r7, #0]
 800ee96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ee98:	79fb      	ldrb	r3, [r7, #7]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d105      	bne.n	800eeaa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ee9e:	683a      	ldr	r2, [r7, #0]
 800eea0:	4907      	ldr	r1, [pc, #28]	@ (800eec0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800eea2:	4808      	ldr	r0, [pc, #32]	@ (800eec4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eea4:	f7ff fd32 	bl	800e90c <USBD_GetString>
 800eea8:	e004      	b.n	800eeb4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eeaa:	683a      	ldr	r2, [r7, #0]
 800eeac:	4904      	ldr	r1, [pc, #16]	@ (800eec0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800eeae:	4805      	ldr	r0, [pc, #20]	@ (800eec4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eeb0:	f7ff fd2c 	bl	800e90c <USBD_GetString>
  }
  return USBD_StrDesc;
 800eeb4:	4b02      	ldr	r3, [pc, #8]	@ (800eec0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	3708      	adds	r7, #8
 800eeba:	46bd      	mov	sp, r7
 800eebc:	bd80      	pop	{r7, pc}
 800eebe:	bf00      	nop
 800eec0:	20001244 	.word	0x20001244
 800eec4:	08013d34 	.word	0x08013d34

0800eec8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b082      	sub	sp, #8
 800eecc:	af00      	add	r7, sp, #0
 800eece:	4603      	mov	r3, r0
 800eed0:	6039      	str	r1, [r7, #0]
 800eed2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eed4:	79fb      	ldrb	r3, [r7, #7]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d105      	bne.n	800eee6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eeda:	683a      	ldr	r2, [r7, #0]
 800eedc:	4907      	ldr	r1, [pc, #28]	@ (800eefc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800eede:	4808      	ldr	r0, [pc, #32]	@ (800ef00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800eee0:	f7ff fd14 	bl	800e90c <USBD_GetString>
 800eee4:	e004      	b.n	800eef0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eee6:	683a      	ldr	r2, [r7, #0]
 800eee8:	4904      	ldr	r1, [pc, #16]	@ (800eefc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800eeea:	4805      	ldr	r0, [pc, #20]	@ (800ef00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800eeec:	f7ff fd0e 	bl	800e90c <USBD_GetString>
  }
  return USBD_StrDesc;
 800eef0:	4b02      	ldr	r3, [pc, #8]	@ (800eefc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800eef2:	4618      	mov	r0, r3
 800eef4:	3708      	adds	r7, #8
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}
 800eefa:	bf00      	nop
 800eefc:	20001244 	.word	0x20001244
 800ef00:	08013d40 	.word	0x08013d40

0800ef04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b084      	sub	sp, #16
 800ef08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ef0a:	4b0f      	ldr	r3, [pc, #60]	@ (800ef48 <Get_SerialNum+0x44>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ef10:	4b0e      	ldr	r3, [pc, #56]	@ (800ef4c <Get_SerialNum+0x48>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ef16:	4b0e      	ldr	r3, [pc, #56]	@ (800ef50 <Get_SerialNum+0x4c>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ef1c:	68fa      	ldr	r2, [r7, #12]
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	4413      	add	r3, r2
 800ef22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d009      	beq.n	800ef3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ef2a:	2208      	movs	r2, #8
 800ef2c:	4909      	ldr	r1, [pc, #36]	@ (800ef54 <Get_SerialNum+0x50>)
 800ef2e:	68f8      	ldr	r0, [r7, #12]
 800ef30:	f000 f814 	bl	800ef5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ef34:	2204      	movs	r2, #4
 800ef36:	4908      	ldr	r1, [pc, #32]	@ (800ef58 <Get_SerialNum+0x54>)
 800ef38:	68b8      	ldr	r0, [r7, #8]
 800ef3a:	f000 f80f 	bl	800ef5c <IntToUnicode>
  }
}
 800ef3e:	bf00      	nop
 800ef40:	3710      	adds	r7, #16
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}
 800ef46:	bf00      	nop
 800ef48:	1fff7a10 	.word	0x1fff7a10
 800ef4c:	1fff7a14 	.word	0x1fff7a14
 800ef50:	1fff7a18 	.word	0x1fff7a18
 800ef54:	200000f2 	.word	0x200000f2
 800ef58:	20000102 	.word	0x20000102

0800ef5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ef5c:	b480      	push	{r7}
 800ef5e:	b087      	sub	sp, #28
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	60f8      	str	r0, [r7, #12]
 800ef64:	60b9      	str	r1, [r7, #8]
 800ef66:	4613      	mov	r3, r2
 800ef68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ef6e:	2300      	movs	r3, #0
 800ef70:	75fb      	strb	r3, [r7, #23]
 800ef72:	e027      	b.n	800efc4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	0f1b      	lsrs	r3, r3, #28
 800ef78:	2b09      	cmp	r3, #9
 800ef7a:	d80b      	bhi.n	800ef94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	0f1b      	lsrs	r3, r3, #28
 800ef80:	b2da      	uxtb	r2, r3
 800ef82:	7dfb      	ldrb	r3, [r7, #23]
 800ef84:	005b      	lsls	r3, r3, #1
 800ef86:	4619      	mov	r1, r3
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	440b      	add	r3, r1
 800ef8c:	3230      	adds	r2, #48	@ 0x30
 800ef8e:	b2d2      	uxtb	r2, r2
 800ef90:	701a      	strb	r2, [r3, #0]
 800ef92:	e00a      	b.n	800efaa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	0f1b      	lsrs	r3, r3, #28
 800ef98:	b2da      	uxtb	r2, r3
 800ef9a:	7dfb      	ldrb	r3, [r7, #23]
 800ef9c:	005b      	lsls	r3, r3, #1
 800ef9e:	4619      	mov	r1, r3
 800efa0:	68bb      	ldr	r3, [r7, #8]
 800efa2:	440b      	add	r3, r1
 800efa4:	3237      	adds	r2, #55	@ 0x37
 800efa6:	b2d2      	uxtb	r2, r2
 800efa8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	011b      	lsls	r3, r3, #4
 800efae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800efb0:	7dfb      	ldrb	r3, [r7, #23]
 800efb2:	005b      	lsls	r3, r3, #1
 800efb4:	3301      	adds	r3, #1
 800efb6:	68ba      	ldr	r2, [r7, #8]
 800efb8:	4413      	add	r3, r2
 800efba:	2200      	movs	r2, #0
 800efbc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800efbe:	7dfb      	ldrb	r3, [r7, #23]
 800efc0:	3301      	adds	r3, #1
 800efc2:	75fb      	strb	r3, [r7, #23]
 800efc4:	7dfa      	ldrb	r2, [r7, #23]
 800efc6:	79fb      	ldrb	r3, [r7, #7]
 800efc8:	429a      	cmp	r2, r3
 800efca:	d3d3      	bcc.n	800ef74 <IntToUnicode+0x18>
  }
}
 800efcc:	bf00      	nop
 800efce:	bf00      	nop
 800efd0:	371c      	adds	r7, #28
 800efd2:	46bd      	mov	sp, r7
 800efd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd8:	4770      	bx	lr
	...

0800efdc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b08a      	sub	sp, #40	@ 0x28
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800efe4:	f107 0314 	add.w	r3, r7, #20
 800efe8:	2200      	movs	r2, #0
 800efea:	601a      	str	r2, [r3, #0]
 800efec:	605a      	str	r2, [r3, #4]
 800efee:	609a      	str	r2, [r3, #8]
 800eff0:	60da      	str	r2, [r3, #12]
 800eff2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800effc:	d13a      	bne.n	800f074 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800effe:	2300      	movs	r3, #0
 800f000:	613b      	str	r3, [r7, #16]
 800f002:	4b1e      	ldr	r3, [pc, #120]	@ (800f07c <HAL_PCD_MspInit+0xa0>)
 800f004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f006:	4a1d      	ldr	r2, [pc, #116]	@ (800f07c <HAL_PCD_MspInit+0xa0>)
 800f008:	f043 0301 	orr.w	r3, r3, #1
 800f00c:	6313      	str	r3, [r2, #48]	@ 0x30
 800f00e:	4b1b      	ldr	r3, [pc, #108]	@ (800f07c <HAL_PCD_MspInit+0xa0>)
 800f010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f012:	f003 0301 	and.w	r3, r3, #1
 800f016:	613b      	str	r3, [r7, #16]
 800f018:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f01a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800f01e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f020:	2302      	movs	r3, #2
 800f022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f024:	2300      	movs	r3, #0
 800f026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f028:	2303      	movs	r3, #3
 800f02a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f02c:	230a      	movs	r3, #10
 800f02e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f030:	f107 0314 	add.w	r3, r7, #20
 800f034:	4619      	mov	r1, r3
 800f036:	4812      	ldr	r0, [pc, #72]	@ (800f080 <HAL_PCD_MspInit+0xa4>)
 800f038:	f7f5 ff76 	bl	8004f28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f03c:	4b0f      	ldr	r3, [pc, #60]	@ (800f07c <HAL_PCD_MspInit+0xa0>)
 800f03e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f040:	4a0e      	ldr	r2, [pc, #56]	@ (800f07c <HAL_PCD_MspInit+0xa0>)
 800f042:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f046:	6353      	str	r3, [r2, #52]	@ 0x34
 800f048:	2300      	movs	r3, #0
 800f04a:	60fb      	str	r3, [r7, #12]
 800f04c:	4b0b      	ldr	r3, [pc, #44]	@ (800f07c <HAL_PCD_MspInit+0xa0>)
 800f04e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f050:	4a0a      	ldr	r2, [pc, #40]	@ (800f07c <HAL_PCD_MspInit+0xa0>)
 800f052:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f056:	6453      	str	r3, [r2, #68]	@ 0x44
 800f058:	4b08      	ldr	r3, [pc, #32]	@ (800f07c <HAL_PCD_MspInit+0xa0>)
 800f05a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f05c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f060:	60fb      	str	r3, [r7, #12]
 800f062:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f064:	2200      	movs	r2, #0
 800f066:	2100      	movs	r1, #0
 800f068:	2043      	movs	r0, #67	@ 0x43
 800f06a:	f7f5 fb7a 	bl	8004762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f06e:	2043      	movs	r0, #67	@ 0x43
 800f070:	f7f5 fb93 	bl	800479a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f074:	bf00      	nop
 800f076:	3728      	adds	r7, #40	@ 0x28
 800f078:	46bd      	mov	sp, r7
 800f07a:	bd80      	pop	{r7, pc}
 800f07c:	40023800 	.word	0x40023800
 800f080:	40020000 	.word	0x40020000

0800f084 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b082      	sub	sp, #8
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800f098:	4619      	mov	r1, r3
 800f09a:	4610      	mov	r0, r2
 800f09c:	f7fe fabd 	bl	800d61a <USBD_LL_SetupStage>
}
 800f0a0:	bf00      	nop
 800f0a2:	3708      	adds	r7, #8
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	bd80      	pop	{r7, pc}

0800f0a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b082      	sub	sp, #8
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
 800f0b0:	460b      	mov	r3, r1
 800f0b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f0ba:	78fa      	ldrb	r2, [r7, #3]
 800f0bc:	6879      	ldr	r1, [r7, #4]
 800f0be:	4613      	mov	r3, r2
 800f0c0:	00db      	lsls	r3, r3, #3
 800f0c2:	4413      	add	r3, r2
 800f0c4:	009b      	lsls	r3, r3, #2
 800f0c6:	440b      	add	r3, r1
 800f0c8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f0cc:	681a      	ldr	r2, [r3, #0]
 800f0ce:	78fb      	ldrb	r3, [r7, #3]
 800f0d0:	4619      	mov	r1, r3
 800f0d2:	f7fe faf7 	bl	800d6c4 <USBD_LL_DataOutStage>
}
 800f0d6:	bf00      	nop
 800f0d8:	3708      	adds	r7, #8
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	bd80      	pop	{r7, pc}

0800f0de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f0de:	b580      	push	{r7, lr}
 800f0e0:	b082      	sub	sp, #8
 800f0e2:	af00      	add	r7, sp, #0
 800f0e4:	6078      	str	r0, [r7, #4]
 800f0e6:	460b      	mov	r3, r1
 800f0e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f0f0:	78fa      	ldrb	r2, [r7, #3]
 800f0f2:	6879      	ldr	r1, [r7, #4]
 800f0f4:	4613      	mov	r3, r2
 800f0f6:	00db      	lsls	r3, r3, #3
 800f0f8:	4413      	add	r3, r2
 800f0fa:	009b      	lsls	r3, r3, #2
 800f0fc:	440b      	add	r3, r1
 800f0fe:	3320      	adds	r3, #32
 800f100:	681a      	ldr	r2, [r3, #0]
 800f102:	78fb      	ldrb	r3, [r7, #3]
 800f104:	4619      	mov	r1, r3
 800f106:	f7fe fb99 	bl	800d83c <USBD_LL_DataInStage>
}
 800f10a:	bf00      	nop
 800f10c:	3708      	adds	r7, #8
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}

0800f112 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f112:	b580      	push	{r7, lr}
 800f114:	b082      	sub	sp, #8
 800f116:	af00      	add	r7, sp, #0
 800f118:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f120:	4618      	mov	r0, r3
 800f122:	f7fe fcdd 	bl	800dae0 <USBD_LL_SOF>
}
 800f126:	bf00      	nop
 800f128:	3708      	adds	r7, #8
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}

0800f12e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f12e:	b580      	push	{r7, lr}
 800f130:	b084      	sub	sp, #16
 800f132:	af00      	add	r7, sp, #0
 800f134:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f136:	2301      	movs	r3, #1
 800f138:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	79db      	ldrb	r3, [r3, #7]
 800f13e:	2b02      	cmp	r3, #2
 800f140:	d001      	beq.n	800f146 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f142:	f7f3 fa13 	bl	800256c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f14c:	7bfa      	ldrb	r2, [r7, #15]
 800f14e:	4611      	mov	r1, r2
 800f150:	4618      	mov	r0, r3
 800f152:	f7fe fc81 	bl	800da58 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f15c:	4618      	mov	r0, r3
 800f15e:	f7fe fc28 	bl	800d9b2 <USBD_LL_Reset>
}
 800f162:	bf00      	nop
 800f164:	3710      	adds	r7, #16
 800f166:	46bd      	mov	sp, r7
 800f168:	bd80      	pop	{r7, pc}
	...

0800f16c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b082      	sub	sp, #8
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f17a:	4618      	mov	r0, r3
 800f17c:	f7fe fc7c 	bl	800da78 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	687a      	ldr	r2, [r7, #4]
 800f18c:	6812      	ldr	r2, [r2, #0]
 800f18e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f192:	f043 0301 	orr.w	r3, r3, #1
 800f196:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	7adb      	ldrb	r3, [r3, #11]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d005      	beq.n	800f1ac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f1a0:	4b04      	ldr	r3, [pc, #16]	@ (800f1b4 <HAL_PCD_SuspendCallback+0x48>)
 800f1a2:	691b      	ldr	r3, [r3, #16]
 800f1a4:	4a03      	ldr	r2, [pc, #12]	@ (800f1b4 <HAL_PCD_SuspendCallback+0x48>)
 800f1a6:	f043 0306 	orr.w	r3, r3, #6
 800f1aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f1ac:	bf00      	nop
 800f1ae:	3708      	adds	r7, #8
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}
 800f1b4:	e000ed00 	.word	0xe000ed00

0800f1b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b082      	sub	sp, #8
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	f7fe fc72 	bl	800dab0 <USBD_LL_Resume>
}
 800f1cc:	bf00      	nop
 800f1ce:	3708      	adds	r7, #8
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	bd80      	pop	{r7, pc}

0800f1d4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b082      	sub	sp, #8
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
 800f1dc:	460b      	mov	r3, r1
 800f1de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f1e6:	78fa      	ldrb	r2, [r7, #3]
 800f1e8:	4611      	mov	r1, r2
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f7fe fcca 	bl	800db84 <USBD_LL_IsoOUTIncomplete>
}
 800f1f0:	bf00      	nop
 800f1f2:	3708      	adds	r7, #8
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	bd80      	pop	{r7, pc}

0800f1f8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b082      	sub	sp, #8
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
 800f200:	460b      	mov	r3, r1
 800f202:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f20a:	78fa      	ldrb	r2, [r7, #3]
 800f20c:	4611      	mov	r1, r2
 800f20e:	4618      	mov	r0, r3
 800f210:	f7fe fc86 	bl	800db20 <USBD_LL_IsoINIncomplete>
}
 800f214:	bf00      	nop
 800f216:	3708      	adds	r7, #8
 800f218:	46bd      	mov	sp, r7
 800f21a:	bd80      	pop	{r7, pc}

0800f21c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b082      	sub	sp, #8
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f22a:	4618      	mov	r0, r3
 800f22c:	f7fe fcdc 	bl	800dbe8 <USBD_LL_DevConnected>
}
 800f230:	bf00      	nop
 800f232:	3708      	adds	r7, #8
 800f234:	46bd      	mov	sp, r7
 800f236:	bd80      	pop	{r7, pc}

0800f238 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b082      	sub	sp, #8
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f246:	4618      	mov	r0, r3
 800f248:	f7fe fcd9 	bl	800dbfe <USBD_LL_DevDisconnected>
}
 800f24c:	bf00      	nop
 800f24e:	3708      	adds	r7, #8
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}

0800f254 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b082      	sub	sp, #8
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	781b      	ldrb	r3, [r3, #0]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d13c      	bne.n	800f2de <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f264:	4a20      	ldr	r2, [pc, #128]	@ (800f2e8 <USBD_LL_Init+0x94>)
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	4a1e      	ldr	r2, [pc, #120]	@ (800f2e8 <USBD_LL_Init+0x94>)
 800f270:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f274:	4b1c      	ldr	r3, [pc, #112]	@ (800f2e8 <USBD_LL_Init+0x94>)
 800f276:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800f27a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f27c:	4b1a      	ldr	r3, [pc, #104]	@ (800f2e8 <USBD_LL_Init+0x94>)
 800f27e:	2204      	movs	r2, #4
 800f280:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f282:	4b19      	ldr	r3, [pc, #100]	@ (800f2e8 <USBD_LL_Init+0x94>)
 800f284:	2202      	movs	r2, #2
 800f286:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f288:	4b17      	ldr	r3, [pc, #92]	@ (800f2e8 <USBD_LL_Init+0x94>)
 800f28a:	2200      	movs	r2, #0
 800f28c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f28e:	4b16      	ldr	r3, [pc, #88]	@ (800f2e8 <USBD_LL_Init+0x94>)
 800f290:	2202      	movs	r2, #2
 800f292:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f294:	4b14      	ldr	r3, [pc, #80]	@ (800f2e8 <USBD_LL_Init+0x94>)
 800f296:	2200      	movs	r2, #0
 800f298:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f29a:	4b13      	ldr	r3, [pc, #76]	@ (800f2e8 <USBD_LL_Init+0x94>)
 800f29c:	2200      	movs	r2, #0
 800f29e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f2a0:	4b11      	ldr	r3, [pc, #68]	@ (800f2e8 <USBD_LL_Init+0x94>)
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f2a6:	4b10      	ldr	r3, [pc, #64]	@ (800f2e8 <USBD_LL_Init+0x94>)
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f2ac:	4b0e      	ldr	r3, [pc, #56]	@ (800f2e8 <USBD_LL_Init+0x94>)
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f2b2:	480d      	ldr	r0, [pc, #52]	@ (800f2e8 <USBD_LL_Init+0x94>)
 800f2b4:	f7f9 fa97 	bl	80087e6 <HAL_PCD_Init>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d001      	beq.n	800f2c2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f2be:	f7f3 f955 	bl	800256c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f2c2:	2180      	movs	r1, #128	@ 0x80
 800f2c4:	4808      	ldr	r0, [pc, #32]	@ (800f2e8 <USBD_LL_Init+0x94>)
 800f2c6:	f7fa fcc4 	bl	8009c52 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f2ca:	2240      	movs	r2, #64	@ 0x40
 800f2cc:	2100      	movs	r1, #0
 800f2ce:	4806      	ldr	r0, [pc, #24]	@ (800f2e8 <USBD_LL_Init+0x94>)
 800f2d0:	f7fa fc78 	bl	8009bc4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f2d4:	2280      	movs	r2, #128	@ 0x80
 800f2d6:	2101      	movs	r1, #1
 800f2d8:	4803      	ldr	r0, [pc, #12]	@ (800f2e8 <USBD_LL_Init+0x94>)
 800f2da:	f7fa fc73 	bl	8009bc4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f2de:	2300      	movs	r3, #0
}
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	3708      	adds	r7, #8
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd80      	pop	{r7, pc}
 800f2e8:	20001444 	.word	0x20001444

0800f2ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b084      	sub	sp, #16
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f302:	4618      	mov	r0, r3
 800f304:	f7f9 fb7e 	bl	8008a04 <HAL_PCD_Start>
 800f308:	4603      	mov	r3, r0
 800f30a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f30c:	7bfb      	ldrb	r3, [r7, #15]
 800f30e:	4618      	mov	r0, r3
 800f310:	f000 f942 	bl	800f598 <USBD_Get_USB_Status>
 800f314:	4603      	mov	r3, r0
 800f316:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f318:	7bbb      	ldrb	r3, [r7, #14]
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3710      	adds	r7, #16
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}

0800f322 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f322:	b580      	push	{r7, lr}
 800f324:	b084      	sub	sp, #16
 800f326:	af00      	add	r7, sp, #0
 800f328:	6078      	str	r0, [r7, #4]
 800f32a:	4608      	mov	r0, r1
 800f32c:	4611      	mov	r1, r2
 800f32e:	461a      	mov	r2, r3
 800f330:	4603      	mov	r3, r0
 800f332:	70fb      	strb	r3, [r7, #3]
 800f334:	460b      	mov	r3, r1
 800f336:	70bb      	strb	r3, [r7, #2]
 800f338:	4613      	mov	r3, r2
 800f33a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f33c:	2300      	movs	r3, #0
 800f33e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f340:	2300      	movs	r3, #0
 800f342:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f34a:	78bb      	ldrb	r3, [r7, #2]
 800f34c:	883a      	ldrh	r2, [r7, #0]
 800f34e:	78f9      	ldrb	r1, [r7, #3]
 800f350:	f7fa f852 	bl	80093f8 <HAL_PCD_EP_Open>
 800f354:	4603      	mov	r3, r0
 800f356:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f358:	7bfb      	ldrb	r3, [r7, #15]
 800f35a:	4618      	mov	r0, r3
 800f35c:	f000 f91c 	bl	800f598 <USBD_Get_USB_Status>
 800f360:	4603      	mov	r3, r0
 800f362:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f364:	7bbb      	ldrb	r3, [r7, #14]
}
 800f366:	4618      	mov	r0, r3
 800f368:	3710      	adds	r7, #16
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bd80      	pop	{r7, pc}

0800f36e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f36e:	b580      	push	{r7, lr}
 800f370:	b084      	sub	sp, #16
 800f372:	af00      	add	r7, sp, #0
 800f374:	6078      	str	r0, [r7, #4]
 800f376:	460b      	mov	r3, r1
 800f378:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f37a:	2300      	movs	r3, #0
 800f37c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f37e:	2300      	movs	r3, #0
 800f380:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f388:	78fa      	ldrb	r2, [r7, #3]
 800f38a:	4611      	mov	r1, r2
 800f38c:	4618      	mov	r0, r3
 800f38e:	f7fa f89d 	bl	80094cc <HAL_PCD_EP_Close>
 800f392:	4603      	mov	r3, r0
 800f394:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f396:	7bfb      	ldrb	r3, [r7, #15]
 800f398:	4618      	mov	r0, r3
 800f39a:	f000 f8fd 	bl	800f598 <USBD_Get_USB_Status>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f3a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	3710      	adds	r7, #16
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd80      	pop	{r7, pc}

0800f3ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b084      	sub	sp, #16
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
 800f3b4:	460b      	mov	r3, r1
 800f3b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f3bc:	2300      	movs	r3, #0
 800f3be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f3c6:	78fa      	ldrb	r2, [r7, #3]
 800f3c8:	4611      	mov	r1, r2
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f7fa f955 	bl	800967a <HAL_PCD_EP_SetStall>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f3d4:	7bfb      	ldrb	r3, [r7, #15]
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f000 f8de 	bl	800f598 <USBD_Get_USB_Status>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f3e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	3710      	adds	r7, #16
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	bd80      	pop	{r7, pc}

0800f3ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f3ea:	b580      	push	{r7, lr}
 800f3ec:	b084      	sub	sp, #16
 800f3ee:	af00      	add	r7, sp, #0
 800f3f0:	6078      	str	r0, [r7, #4]
 800f3f2:	460b      	mov	r3, r1
 800f3f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f404:	78fa      	ldrb	r2, [r7, #3]
 800f406:	4611      	mov	r1, r2
 800f408:	4618      	mov	r0, r3
 800f40a:	f7fa f999 	bl	8009740 <HAL_PCD_EP_ClrStall>
 800f40e:	4603      	mov	r3, r0
 800f410:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f412:	7bfb      	ldrb	r3, [r7, #15]
 800f414:	4618      	mov	r0, r3
 800f416:	f000 f8bf 	bl	800f598 <USBD_Get_USB_Status>
 800f41a:	4603      	mov	r3, r0
 800f41c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f41e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f420:	4618      	mov	r0, r3
 800f422:	3710      	adds	r7, #16
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}

0800f428 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f428:	b480      	push	{r7}
 800f42a:	b085      	sub	sp, #20
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
 800f430:	460b      	mov	r3, r1
 800f432:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f43a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f43c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f440:	2b00      	cmp	r3, #0
 800f442:	da0b      	bge.n	800f45c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f444:	78fb      	ldrb	r3, [r7, #3]
 800f446:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f44a:	68f9      	ldr	r1, [r7, #12]
 800f44c:	4613      	mov	r3, r2
 800f44e:	00db      	lsls	r3, r3, #3
 800f450:	4413      	add	r3, r2
 800f452:	009b      	lsls	r3, r3, #2
 800f454:	440b      	add	r3, r1
 800f456:	3316      	adds	r3, #22
 800f458:	781b      	ldrb	r3, [r3, #0]
 800f45a:	e00b      	b.n	800f474 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f45c:	78fb      	ldrb	r3, [r7, #3]
 800f45e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f462:	68f9      	ldr	r1, [r7, #12]
 800f464:	4613      	mov	r3, r2
 800f466:	00db      	lsls	r3, r3, #3
 800f468:	4413      	add	r3, r2
 800f46a:	009b      	lsls	r3, r3, #2
 800f46c:	440b      	add	r3, r1
 800f46e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800f472:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f474:	4618      	mov	r0, r3
 800f476:	3714      	adds	r7, #20
 800f478:	46bd      	mov	sp, r7
 800f47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47e:	4770      	bx	lr

0800f480 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b084      	sub	sp, #16
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
 800f488:	460b      	mov	r3, r1
 800f48a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f48c:	2300      	movs	r3, #0
 800f48e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f490:	2300      	movs	r3, #0
 800f492:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f49a:	78fa      	ldrb	r2, [r7, #3]
 800f49c:	4611      	mov	r1, r2
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f7f9 ff86 	bl	80093b0 <HAL_PCD_SetAddress>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4a8:	7bfb      	ldrb	r3, [r7, #15]
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f000 f874 	bl	800f598 <USBD_Get_USB_Status>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	3710      	adds	r7, #16
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}

0800f4be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f4be:	b580      	push	{r7, lr}
 800f4c0:	b086      	sub	sp, #24
 800f4c2:	af00      	add	r7, sp, #0
 800f4c4:	60f8      	str	r0, [r7, #12]
 800f4c6:	607a      	str	r2, [r7, #4]
 800f4c8:	603b      	str	r3, [r7, #0]
 800f4ca:	460b      	mov	r3, r1
 800f4cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f4dc:	7af9      	ldrb	r1, [r7, #11]
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	687a      	ldr	r2, [r7, #4]
 800f4e2:	f7fa f890 	bl	8009606 <HAL_PCD_EP_Transmit>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4ea:	7dfb      	ldrb	r3, [r7, #23]
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	f000 f853 	bl	800f598 <USBD_Get_USB_Status>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f4f6:	7dbb      	ldrb	r3, [r7, #22]
}
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	3718      	adds	r7, #24
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}

0800f500 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b086      	sub	sp, #24
 800f504:	af00      	add	r7, sp, #0
 800f506:	60f8      	str	r0, [r7, #12]
 800f508:	607a      	str	r2, [r7, #4]
 800f50a:	603b      	str	r3, [r7, #0]
 800f50c:	460b      	mov	r3, r1
 800f50e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f510:	2300      	movs	r3, #0
 800f512:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f514:	2300      	movs	r3, #0
 800f516:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f51e:	7af9      	ldrb	r1, [r7, #11]
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	687a      	ldr	r2, [r7, #4]
 800f524:	f7fa f81c 	bl	8009560 <HAL_PCD_EP_Receive>
 800f528:	4603      	mov	r3, r0
 800f52a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f52c:	7dfb      	ldrb	r3, [r7, #23]
 800f52e:	4618      	mov	r0, r3
 800f530:	f000 f832 	bl	800f598 <USBD_Get_USB_Status>
 800f534:	4603      	mov	r3, r0
 800f536:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f538:	7dbb      	ldrb	r3, [r7, #22]
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	3718      	adds	r7, #24
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd80      	pop	{r7, pc}

0800f542 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f542:	b580      	push	{r7, lr}
 800f544:	b082      	sub	sp, #8
 800f546:	af00      	add	r7, sp, #0
 800f548:	6078      	str	r0, [r7, #4]
 800f54a:	460b      	mov	r3, r1
 800f54c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f554:	78fa      	ldrb	r2, [r7, #3]
 800f556:	4611      	mov	r1, r2
 800f558:	4618      	mov	r0, r3
 800f55a:	f7fa f83c 	bl	80095d6 <HAL_PCD_EP_GetRxCount>
 800f55e:	4603      	mov	r3, r0
}
 800f560:	4618      	mov	r0, r3
 800f562:	3708      	adds	r7, #8
 800f564:	46bd      	mov	sp, r7
 800f566:	bd80      	pop	{r7, pc}

0800f568 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f568:	b480      	push	{r7}
 800f56a:	b083      	sub	sp, #12
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f570:	4b03      	ldr	r3, [pc, #12]	@ (800f580 <USBD_static_malloc+0x18>)
}
 800f572:	4618      	mov	r0, r3
 800f574:	370c      	adds	r7, #12
 800f576:	46bd      	mov	sp, r7
 800f578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57c:	4770      	bx	lr
 800f57e:	bf00      	nop
 800f580:	20001928 	.word	0x20001928

0800f584 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f584:	b480      	push	{r7}
 800f586:	b083      	sub	sp, #12
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]

}
 800f58c:	bf00      	nop
 800f58e:	370c      	adds	r7, #12
 800f590:	46bd      	mov	sp, r7
 800f592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f596:	4770      	bx	lr

0800f598 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f598:	b480      	push	{r7}
 800f59a:	b085      	sub	sp, #20
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	4603      	mov	r3, r0
 800f5a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f5a6:	79fb      	ldrb	r3, [r7, #7]
 800f5a8:	2b03      	cmp	r3, #3
 800f5aa:	d817      	bhi.n	800f5dc <USBD_Get_USB_Status+0x44>
 800f5ac:	a201      	add	r2, pc, #4	@ (adr r2, 800f5b4 <USBD_Get_USB_Status+0x1c>)
 800f5ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5b2:	bf00      	nop
 800f5b4:	0800f5c5 	.word	0x0800f5c5
 800f5b8:	0800f5cb 	.word	0x0800f5cb
 800f5bc:	0800f5d1 	.word	0x0800f5d1
 800f5c0:	0800f5d7 	.word	0x0800f5d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	73fb      	strb	r3, [r7, #15]
    break;
 800f5c8:	e00b      	b.n	800f5e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f5ca:	2303      	movs	r3, #3
 800f5cc:	73fb      	strb	r3, [r7, #15]
    break;
 800f5ce:	e008      	b.n	800f5e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f5d0:	2301      	movs	r3, #1
 800f5d2:	73fb      	strb	r3, [r7, #15]
    break;
 800f5d4:	e005      	b.n	800f5e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f5d6:	2303      	movs	r3, #3
 800f5d8:	73fb      	strb	r3, [r7, #15]
    break;
 800f5da:	e002      	b.n	800f5e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f5dc:	2303      	movs	r3, #3
 800f5de:	73fb      	strb	r3, [r7, #15]
    break;
 800f5e0:	bf00      	nop
  }
  return usb_status;
 800f5e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	3714      	adds	r7, #20
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ee:	4770      	bx	lr

0800f5f0 <malloc>:
 800f5f0:	4b02      	ldr	r3, [pc, #8]	@ (800f5fc <malloc+0xc>)
 800f5f2:	4601      	mov	r1, r0
 800f5f4:	6818      	ldr	r0, [r3, #0]
 800f5f6:	f000 b825 	b.w	800f644 <_malloc_r>
 800f5fa:	bf00      	nop
 800f5fc:	20000118 	.word	0x20000118

0800f600 <sbrk_aligned>:
 800f600:	b570      	push	{r4, r5, r6, lr}
 800f602:	4e0f      	ldr	r6, [pc, #60]	@ (800f640 <sbrk_aligned+0x40>)
 800f604:	460c      	mov	r4, r1
 800f606:	6831      	ldr	r1, [r6, #0]
 800f608:	4605      	mov	r5, r0
 800f60a:	b911      	cbnz	r1, 800f612 <sbrk_aligned+0x12>
 800f60c:	f001 f872 	bl	80106f4 <_sbrk_r>
 800f610:	6030      	str	r0, [r6, #0]
 800f612:	4621      	mov	r1, r4
 800f614:	4628      	mov	r0, r5
 800f616:	f001 f86d 	bl	80106f4 <_sbrk_r>
 800f61a:	1c43      	adds	r3, r0, #1
 800f61c:	d103      	bne.n	800f626 <sbrk_aligned+0x26>
 800f61e:	f04f 34ff 	mov.w	r4, #4294967295
 800f622:	4620      	mov	r0, r4
 800f624:	bd70      	pop	{r4, r5, r6, pc}
 800f626:	1cc4      	adds	r4, r0, #3
 800f628:	f024 0403 	bic.w	r4, r4, #3
 800f62c:	42a0      	cmp	r0, r4
 800f62e:	d0f8      	beq.n	800f622 <sbrk_aligned+0x22>
 800f630:	1a21      	subs	r1, r4, r0
 800f632:	4628      	mov	r0, r5
 800f634:	f001 f85e 	bl	80106f4 <_sbrk_r>
 800f638:	3001      	adds	r0, #1
 800f63a:	d1f2      	bne.n	800f622 <sbrk_aligned+0x22>
 800f63c:	e7ef      	b.n	800f61e <sbrk_aligned+0x1e>
 800f63e:	bf00      	nop
 800f640:	20001b48 	.word	0x20001b48

0800f644 <_malloc_r>:
 800f644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f648:	1ccd      	adds	r5, r1, #3
 800f64a:	f025 0503 	bic.w	r5, r5, #3
 800f64e:	3508      	adds	r5, #8
 800f650:	2d0c      	cmp	r5, #12
 800f652:	bf38      	it	cc
 800f654:	250c      	movcc	r5, #12
 800f656:	2d00      	cmp	r5, #0
 800f658:	4606      	mov	r6, r0
 800f65a:	db01      	blt.n	800f660 <_malloc_r+0x1c>
 800f65c:	42a9      	cmp	r1, r5
 800f65e:	d904      	bls.n	800f66a <_malloc_r+0x26>
 800f660:	230c      	movs	r3, #12
 800f662:	6033      	str	r3, [r6, #0]
 800f664:	2000      	movs	r0, #0
 800f666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f66a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f740 <_malloc_r+0xfc>
 800f66e:	f000 f869 	bl	800f744 <__malloc_lock>
 800f672:	f8d8 3000 	ldr.w	r3, [r8]
 800f676:	461c      	mov	r4, r3
 800f678:	bb44      	cbnz	r4, 800f6cc <_malloc_r+0x88>
 800f67a:	4629      	mov	r1, r5
 800f67c:	4630      	mov	r0, r6
 800f67e:	f7ff ffbf 	bl	800f600 <sbrk_aligned>
 800f682:	1c43      	adds	r3, r0, #1
 800f684:	4604      	mov	r4, r0
 800f686:	d158      	bne.n	800f73a <_malloc_r+0xf6>
 800f688:	f8d8 4000 	ldr.w	r4, [r8]
 800f68c:	4627      	mov	r7, r4
 800f68e:	2f00      	cmp	r7, #0
 800f690:	d143      	bne.n	800f71a <_malloc_r+0xd6>
 800f692:	2c00      	cmp	r4, #0
 800f694:	d04b      	beq.n	800f72e <_malloc_r+0xea>
 800f696:	6823      	ldr	r3, [r4, #0]
 800f698:	4639      	mov	r1, r7
 800f69a:	4630      	mov	r0, r6
 800f69c:	eb04 0903 	add.w	r9, r4, r3
 800f6a0:	f001 f828 	bl	80106f4 <_sbrk_r>
 800f6a4:	4581      	cmp	r9, r0
 800f6a6:	d142      	bne.n	800f72e <_malloc_r+0xea>
 800f6a8:	6821      	ldr	r1, [r4, #0]
 800f6aa:	1a6d      	subs	r5, r5, r1
 800f6ac:	4629      	mov	r1, r5
 800f6ae:	4630      	mov	r0, r6
 800f6b0:	f7ff ffa6 	bl	800f600 <sbrk_aligned>
 800f6b4:	3001      	adds	r0, #1
 800f6b6:	d03a      	beq.n	800f72e <_malloc_r+0xea>
 800f6b8:	6823      	ldr	r3, [r4, #0]
 800f6ba:	442b      	add	r3, r5
 800f6bc:	6023      	str	r3, [r4, #0]
 800f6be:	f8d8 3000 	ldr.w	r3, [r8]
 800f6c2:	685a      	ldr	r2, [r3, #4]
 800f6c4:	bb62      	cbnz	r2, 800f720 <_malloc_r+0xdc>
 800f6c6:	f8c8 7000 	str.w	r7, [r8]
 800f6ca:	e00f      	b.n	800f6ec <_malloc_r+0xa8>
 800f6cc:	6822      	ldr	r2, [r4, #0]
 800f6ce:	1b52      	subs	r2, r2, r5
 800f6d0:	d420      	bmi.n	800f714 <_malloc_r+0xd0>
 800f6d2:	2a0b      	cmp	r2, #11
 800f6d4:	d917      	bls.n	800f706 <_malloc_r+0xc2>
 800f6d6:	1961      	adds	r1, r4, r5
 800f6d8:	42a3      	cmp	r3, r4
 800f6da:	6025      	str	r5, [r4, #0]
 800f6dc:	bf18      	it	ne
 800f6de:	6059      	strne	r1, [r3, #4]
 800f6e0:	6863      	ldr	r3, [r4, #4]
 800f6e2:	bf08      	it	eq
 800f6e4:	f8c8 1000 	streq.w	r1, [r8]
 800f6e8:	5162      	str	r2, [r4, r5]
 800f6ea:	604b      	str	r3, [r1, #4]
 800f6ec:	4630      	mov	r0, r6
 800f6ee:	f000 f82f 	bl	800f750 <__malloc_unlock>
 800f6f2:	f104 000b 	add.w	r0, r4, #11
 800f6f6:	1d23      	adds	r3, r4, #4
 800f6f8:	f020 0007 	bic.w	r0, r0, #7
 800f6fc:	1ac2      	subs	r2, r0, r3
 800f6fe:	bf1c      	itt	ne
 800f700:	1a1b      	subne	r3, r3, r0
 800f702:	50a3      	strne	r3, [r4, r2]
 800f704:	e7af      	b.n	800f666 <_malloc_r+0x22>
 800f706:	6862      	ldr	r2, [r4, #4]
 800f708:	42a3      	cmp	r3, r4
 800f70a:	bf0c      	ite	eq
 800f70c:	f8c8 2000 	streq.w	r2, [r8]
 800f710:	605a      	strne	r2, [r3, #4]
 800f712:	e7eb      	b.n	800f6ec <_malloc_r+0xa8>
 800f714:	4623      	mov	r3, r4
 800f716:	6864      	ldr	r4, [r4, #4]
 800f718:	e7ae      	b.n	800f678 <_malloc_r+0x34>
 800f71a:	463c      	mov	r4, r7
 800f71c:	687f      	ldr	r7, [r7, #4]
 800f71e:	e7b6      	b.n	800f68e <_malloc_r+0x4a>
 800f720:	461a      	mov	r2, r3
 800f722:	685b      	ldr	r3, [r3, #4]
 800f724:	42a3      	cmp	r3, r4
 800f726:	d1fb      	bne.n	800f720 <_malloc_r+0xdc>
 800f728:	2300      	movs	r3, #0
 800f72a:	6053      	str	r3, [r2, #4]
 800f72c:	e7de      	b.n	800f6ec <_malloc_r+0xa8>
 800f72e:	230c      	movs	r3, #12
 800f730:	6033      	str	r3, [r6, #0]
 800f732:	4630      	mov	r0, r6
 800f734:	f000 f80c 	bl	800f750 <__malloc_unlock>
 800f738:	e794      	b.n	800f664 <_malloc_r+0x20>
 800f73a:	6005      	str	r5, [r0, #0]
 800f73c:	e7d6      	b.n	800f6ec <_malloc_r+0xa8>
 800f73e:	bf00      	nop
 800f740:	20001b4c 	.word	0x20001b4c

0800f744 <__malloc_lock>:
 800f744:	4801      	ldr	r0, [pc, #4]	@ (800f74c <__malloc_lock+0x8>)
 800f746:	f001 b822 	b.w	801078e <__retarget_lock_acquire_recursive>
 800f74a:	bf00      	nop
 800f74c:	20001c90 	.word	0x20001c90

0800f750 <__malloc_unlock>:
 800f750:	4801      	ldr	r0, [pc, #4]	@ (800f758 <__malloc_unlock+0x8>)
 800f752:	f001 b81d 	b.w	8010790 <__retarget_lock_release_recursive>
 800f756:	bf00      	nop
 800f758:	20001c90 	.word	0x20001c90

0800f75c <__cvt>:
 800f75c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f760:	ec57 6b10 	vmov	r6, r7, d0
 800f764:	2f00      	cmp	r7, #0
 800f766:	460c      	mov	r4, r1
 800f768:	4619      	mov	r1, r3
 800f76a:	463b      	mov	r3, r7
 800f76c:	bfbb      	ittet	lt
 800f76e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f772:	461f      	movlt	r7, r3
 800f774:	2300      	movge	r3, #0
 800f776:	232d      	movlt	r3, #45	@ 0x2d
 800f778:	700b      	strb	r3, [r1, #0]
 800f77a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f77c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f780:	4691      	mov	r9, r2
 800f782:	f023 0820 	bic.w	r8, r3, #32
 800f786:	bfbc      	itt	lt
 800f788:	4632      	movlt	r2, r6
 800f78a:	4616      	movlt	r6, r2
 800f78c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f790:	d005      	beq.n	800f79e <__cvt+0x42>
 800f792:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f796:	d100      	bne.n	800f79a <__cvt+0x3e>
 800f798:	3401      	adds	r4, #1
 800f79a:	2102      	movs	r1, #2
 800f79c:	e000      	b.n	800f7a0 <__cvt+0x44>
 800f79e:	2103      	movs	r1, #3
 800f7a0:	ab03      	add	r3, sp, #12
 800f7a2:	9301      	str	r3, [sp, #4]
 800f7a4:	ab02      	add	r3, sp, #8
 800f7a6:	9300      	str	r3, [sp, #0]
 800f7a8:	ec47 6b10 	vmov	d0, r6, r7
 800f7ac:	4653      	mov	r3, sl
 800f7ae:	4622      	mov	r2, r4
 800f7b0:	f001 f87e 	bl	80108b0 <_dtoa_r>
 800f7b4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f7b8:	4605      	mov	r5, r0
 800f7ba:	d119      	bne.n	800f7f0 <__cvt+0x94>
 800f7bc:	f019 0f01 	tst.w	r9, #1
 800f7c0:	d00e      	beq.n	800f7e0 <__cvt+0x84>
 800f7c2:	eb00 0904 	add.w	r9, r0, r4
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	4630      	mov	r0, r6
 800f7cc:	4639      	mov	r1, r7
 800f7ce:	f7f1 f983 	bl	8000ad8 <__aeabi_dcmpeq>
 800f7d2:	b108      	cbz	r0, 800f7d8 <__cvt+0x7c>
 800f7d4:	f8cd 900c 	str.w	r9, [sp, #12]
 800f7d8:	2230      	movs	r2, #48	@ 0x30
 800f7da:	9b03      	ldr	r3, [sp, #12]
 800f7dc:	454b      	cmp	r3, r9
 800f7de:	d31e      	bcc.n	800f81e <__cvt+0xc2>
 800f7e0:	9b03      	ldr	r3, [sp, #12]
 800f7e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f7e4:	1b5b      	subs	r3, r3, r5
 800f7e6:	4628      	mov	r0, r5
 800f7e8:	6013      	str	r3, [r2, #0]
 800f7ea:	b004      	add	sp, #16
 800f7ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f7f4:	eb00 0904 	add.w	r9, r0, r4
 800f7f8:	d1e5      	bne.n	800f7c6 <__cvt+0x6a>
 800f7fa:	7803      	ldrb	r3, [r0, #0]
 800f7fc:	2b30      	cmp	r3, #48	@ 0x30
 800f7fe:	d10a      	bne.n	800f816 <__cvt+0xba>
 800f800:	2200      	movs	r2, #0
 800f802:	2300      	movs	r3, #0
 800f804:	4630      	mov	r0, r6
 800f806:	4639      	mov	r1, r7
 800f808:	f7f1 f966 	bl	8000ad8 <__aeabi_dcmpeq>
 800f80c:	b918      	cbnz	r0, 800f816 <__cvt+0xba>
 800f80e:	f1c4 0401 	rsb	r4, r4, #1
 800f812:	f8ca 4000 	str.w	r4, [sl]
 800f816:	f8da 3000 	ldr.w	r3, [sl]
 800f81a:	4499      	add	r9, r3
 800f81c:	e7d3      	b.n	800f7c6 <__cvt+0x6a>
 800f81e:	1c59      	adds	r1, r3, #1
 800f820:	9103      	str	r1, [sp, #12]
 800f822:	701a      	strb	r2, [r3, #0]
 800f824:	e7d9      	b.n	800f7da <__cvt+0x7e>

0800f826 <__exponent>:
 800f826:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f828:	2900      	cmp	r1, #0
 800f82a:	bfba      	itte	lt
 800f82c:	4249      	neglt	r1, r1
 800f82e:	232d      	movlt	r3, #45	@ 0x2d
 800f830:	232b      	movge	r3, #43	@ 0x2b
 800f832:	2909      	cmp	r1, #9
 800f834:	7002      	strb	r2, [r0, #0]
 800f836:	7043      	strb	r3, [r0, #1]
 800f838:	dd29      	ble.n	800f88e <__exponent+0x68>
 800f83a:	f10d 0307 	add.w	r3, sp, #7
 800f83e:	461d      	mov	r5, r3
 800f840:	270a      	movs	r7, #10
 800f842:	461a      	mov	r2, r3
 800f844:	fbb1 f6f7 	udiv	r6, r1, r7
 800f848:	fb07 1416 	mls	r4, r7, r6, r1
 800f84c:	3430      	adds	r4, #48	@ 0x30
 800f84e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f852:	460c      	mov	r4, r1
 800f854:	2c63      	cmp	r4, #99	@ 0x63
 800f856:	f103 33ff 	add.w	r3, r3, #4294967295
 800f85a:	4631      	mov	r1, r6
 800f85c:	dcf1      	bgt.n	800f842 <__exponent+0x1c>
 800f85e:	3130      	adds	r1, #48	@ 0x30
 800f860:	1e94      	subs	r4, r2, #2
 800f862:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f866:	1c41      	adds	r1, r0, #1
 800f868:	4623      	mov	r3, r4
 800f86a:	42ab      	cmp	r3, r5
 800f86c:	d30a      	bcc.n	800f884 <__exponent+0x5e>
 800f86e:	f10d 0309 	add.w	r3, sp, #9
 800f872:	1a9b      	subs	r3, r3, r2
 800f874:	42ac      	cmp	r4, r5
 800f876:	bf88      	it	hi
 800f878:	2300      	movhi	r3, #0
 800f87a:	3302      	adds	r3, #2
 800f87c:	4403      	add	r3, r0
 800f87e:	1a18      	subs	r0, r3, r0
 800f880:	b003      	add	sp, #12
 800f882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f884:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f888:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f88c:	e7ed      	b.n	800f86a <__exponent+0x44>
 800f88e:	2330      	movs	r3, #48	@ 0x30
 800f890:	3130      	adds	r1, #48	@ 0x30
 800f892:	7083      	strb	r3, [r0, #2]
 800f894:	70c1      	strb	r1, [r0, #3]
 800f896:	1d03      	adds	r3, r0, #4
 800f898:	e7f1      	b.n	800f87e <__exponent+0x58>
	...

0800f89c <_printf_float>:
 800f89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8a0:	b08d      	sub	sp, #52	@ 0x34
 800f8a2:	460c      	mov	r4, r1
 800f8a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f8a8:	4616      	mov	r6, r2
 800f8aa:	461f      	mov	r7, r3
 800f8ac:	4605      	mov	r5, r0
 800f8ae:	f000 fee9 	bl	8010684 <_localeconv_r>
 800f8b2:	6803      	ldr	r3, [r0, #0]
 800f8b4:	9304      	str	r3, [sp, #16]
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f7f0 fce2 	bl	8000280 <strlen>
 800f8bc:	2300      	movs	r3, #0
 800f8be:	930a      	str	r3, [sp, #40]	@ 0x28
 800f8c0:	f8d8 3000 	ldr.w	r3, [r8]
 800f8c4:	9005      	str	r0, [sp, #20]
 800f8c6:	3307      	adds	r3, #7
 800f8c8:	f023 0307 	bic.w	r3, r3, #7
 800f8cc:	f103 0208 	add.w	r2, r3, #8
 800f8d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f8d4:	f8d4 b000 	ldr.w	fp, [r4]
 800f8d8:	f8c8 2000 	str.w	r2, [r8]
 800f8dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f8e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f8e4:	9307      	str	r3, [sp, #28]
 800f8e6:	f8cd 8018 	str.w	r8, [sp, #24]
 800f8ea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f8ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f8f2:	4b9c      	ldr	r3, [pc, #624]	@ (800fb64 <_printf_float+0x2c8>)
 800f8f4:	f04f 32ff 	mov.w	r2, #4294967295
 800f8f8:	f7f1 f920 	bl	8000b3c <__aeabi_dcmpun>
 800f8fc:	bb70      	cbnz	r0, 800f95c <_printf_float+0xc0>
 800f8fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f902:	4b98      	ldr	r3, [pc, #608]	@ (800fb64 <_printf_float+0x2c8>)
 800f904:	f04f 32ff 	mov.w	r2, #4294967295
 800f908:	f7f1 f8fa 	bl	8000b00 <__aeabi_dcmple>
 800f90c:	bb30      	cbnz	r0, 800f95c <_printf_float+0xc0>
 800f90e:	2200      	movs	r2, #0
 800f910:	2300      	movs	r3, #0
 800f912:	4640      	mov	r0, r8
 800f914:	4649      	mov	r1, r9
 800f916:	f7f1 f8e9 	bl	8000aec <__aeabi_dcmplt>
 800f91a:	b110      	cbz	r0, 800f922 <_printf_float+0x86>
 800f91c:	232d      	movs	r3, #45	@ 0x2d
 800f91e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f922:	4a91      	ldr	r2, [pc, #580]	@ (800fb68 <_printf_float+0x2cc>)
 800f924:	4b91      	ldr	r3, [pc, #580]	@ (800fb6c <_printf_float+0x2d0>)
 800f926:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f92a:	bf8c      	ite	hi
 800f92c:	4690      	movhi	r8, r2
 800f92e:	4698      	movls	r8, r3
 800f930:	2303      	movs	r3, #3
 800f932:	6123      	str	r3, [r4, #16]
 800f934:	f02b 0304 	bic.w	r3, fp, #4
 800f938:	6023      	str	r3, [r4, #0]
 800f93a:	f04f 0900 	mov.w	r9, #0
 800f93e:	9700      	str	r7, [sp, #0]
 800f940:	4633      	mov	r3, r6
 800f942:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f944:	4621      	mov	r1, r4
 800f946:	4628      	mov	r0, r5
 800f948:	f000 f9d2 	bl	800fcf0 <_printf_common>
 800f94c:	3001      	adds	r0, #1
 800f94e:	f040 808d 	bne.w	800fa6c <_printf_float+0x1d0>
 800f952:	f04f 30ff 	mov.w	r0, #4294967295
 800f956:	b00d      	add	sp, #52	@ 0x34
 800f958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f95c:	4642      	mov	r2, r8
 800f95e:	464b      	mov	r3, r9
 800f960:	4640      	mov	r0, r8
 800f962:	4649      	mov	r1, r9
 800f964:	f7f1 f8ea 	bl	8000b3c <__aeabi_dcmpun>
 800f968:	b140      	cbz	r0, 800f97c <_printf_float+0xe0>
 800f96a:	464b      	mov	r3, r9
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	bfbc      	itt	lt
 800f970:	232d      	movlt	r3, #45	@ 0x2d
 800f972:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f976:	4a7e      	ldr	r2, [pc, #504]	@ (800fb70 <_printf_float+0x2d4>)
 800f978:	4b7e      	ldr	r3, [pc, #504]	@ (800fb74 <_printf_float+0x2d8>)
 800f97a:	e7d4      	b.n	800f926 <_printf_float+0x8a>
 800f97c:	6863      	ldr	r3, [r4, #4]
 800f97e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f982:	9206      	str	r2, [sp, #24]
 800f984:	1c5a      	adds	r2, r3, #1
 800f986:	d13b      	bne.n	800fa00 <_printf_float+0x164>
 800f988:	2306      	movs	r3, #6
 800f98a:	6063      	str	r3, [r4, #4]
 800f98c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f990:	2300      	movs	r3, #0
 800f992:	6022      	str	r2, [r4, #0]
 800f994:	9303      	str	r3, [sp, #12]
 800f996:	ab0a      	add	r3, sp, #40	@ 0x28
 800f998:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f99c:	ab09      	add	r3, sp, #36	@ 0x24
 800f99e:	9300      	str	r3, [sp, #0]
 800f9a0:	6861      	ldr	r1, [r4, #4]
 800f9a2:	ec49 8b10 	vmov	d0, r8, r9
 800f9a6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f9aa:	4628      	mov	r0, r5
 800f9ac:	f7ff fed6 	bl	800f75c <__cvt>
 800f9b0:	9b06      	ldr	r3, [sp, #24]
 800f9b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f9b4:	2b47      	cmp	r3, #71	@ 0x47
 800f9b6:	4680      	mov	r8, r0
 800f9b8:	d129      	bne.n	800fa0e <_printf_float+0x172>
 800f9ba:	1cc8      	adds	r0, r1, #3
 800f9bc:	db02      	blt.n	800f9c4 <_printf_float+0x128>
 800f9be:	6863      	ldr	r3, [r4, #4]
 800f9c0:	4299      	cmp	r1, r3
 800f9c2:	dd41      	ble.n	800fa48 <_printf_float+0x1ac>
 800f9c4:	f1aa 0a02 	sub.w	sl, sl, #2
 800f9c8:	fa5f fa8a 	uxtb.w	sl, sl
 800f9cc:	3901      	subs	r1, #1
 800f9ce:	4652      	mov	r2, sl
 800f9d0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f9d4:	9109      	str	r1, [sp, #36]	@ 0x24
 800f9d6:	f7ff ff26 	bl	800f826 <__exponent>
 800f9da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f9dc:	1813      	adds	r3, r2, r0
 800f9de:	2a01      	cmp	r2, #1
 800f9e0:	4681      	mov	r9, r0
 800f9e2:	6123      	str	r3, [r4, #16]
 800f9e4:	dc02      	bgt.n	800f9ec <_printf_float+0x150>
 800f9e6:	6822      	ldr	r2, [r4, #0]
 800f9e8:	07d2      	lsls	r2, r2, #31
 800f9ea:	d501      	bpl.n	800f9f0 <_printf_float+0x154>
 800f9ec:	3301      	adds	r3, #1
 800f9ee:	6123      	str	r3, [r4, #16]
 800f9f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d0a2      	beq.n	800f93e <_printf_float+0xa2>
 800f9f8:	232d      	movs	r3, #45	@ 0x2d
 800f9fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f9fe:	e79e      	b.n	800f93e <_printf_float+0xa2>
 800fa00:	9a06      	ldr	r2, [sp, #24]
 800fa02:	2a47      	cmp	r2, #71	@ 0x47
 800fa04:	d1c2      	bne.n	800f98c <_printf_float+0xf0>
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d1c0      	bne.n	800f98c <_printf_float+0xf0>
 800fa0a:	2301      	movs	r3, #1
 800fa0c:	e7bd      	b.n	800f98a <_printf_float+0xee>
 800fa0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fa12:	d9db      	bls.n	800f9cc <_printf_float+0x130>
 800fa14:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800fa18:	d118      	bne.n	800fa4c <_printf_float+0x1b0>
 800fa1a:	2900      	cmp	r1, #0
 800fa1c:	6863      	ldr	r3, [r4, #4]
 800fa1e:	dd0b      	ble.n	800fa38 <_printf_float+0x19c>
 800fa20:	6121      	str	r1, [r4, #16]
 800fa22:	b913      	cbnz	r3, 800fa2a <_printf_float+0x18e>
 800fa24:	6822      	ldr	r2, [r4, #0]
 800fa26:	07d0      	lsls	r0, r2, #31
 800fa28:	d502      	bpl.n	800fa30 <_printf_float+0x194>
 800fa2a:	3301      	adds	r3, #1
 800fa2c:	440b      	add	r3, r1
 800fa2e:	6123      	str	r3, [r4, #16]
 800fa30:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fa32:	f04f 0900 	mov.w	r9, #0
 800fa36:	e7db      	b.n	800f9f0 <_printf_float+0x154>
 800fa38:	b913      	cbnz	r3, 800fa40 <_printf_float+0x1a4>
 800fa3a:	6822      	ldr	r2, [r4, #0]
 800fa3c:	07d2      	lsls	r2, r2, #31
 800fa3e:	d501      	bpl.n	800fa44 <_printf_float+0x1a8>
 800fa40:	3302      	adds	r3, #2
 800fa42:	e7f4      	b.n	800fa2e <_printf_float+0x192>
 800fa44:	2301      	movs	r3, #1
 800fa46:	e7f2      	b.n	800fa2e <_printf_float+0x192>
 800fa48:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800fa4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa4e:	4299      	cmp	r1, r3
 800fa50:	db05      	blt.n	800fa5e <_printf_float+0x1c2>
 800fa52:	6823      	ldr	r3, [r4, #0]
 800fa54:	6121      	str	r1, [r4, #16]
 800fa56:	07d8      	lsls	r0, r3, #31
 800fa58:	d5ea      	bpl.n	800fa30 <_printf_float+0x194>
 800fa5a:	1c4b      	adds	r3, r1, #1
 800fa5c:	e7e7      	b.n	800fa2e <_printf_float+0x192>
 800fa5e:	2900      	cmp	r1, #0
 800fa60:	bfd4      	ite	le
 800fa62:	f1c1 0202 	rsble	r2, r1, #2
 800fa66:	2201      	movgt	r2, #1
 800fa68:	4413      	add	r3, r2
 800fa6a:	e7e0      	b.n	800fa2e <_printf_float+0x192>
 800fa6c:	6823      	ldr	r3, [r4, #0]
 800fa6e:	055a      	lsls	r2, r3, #21
 800fa70:	d407      	bmi.n	800fa82 <_printf_float+0x1e6>
 800fa72:	6923      	ldr	r3, [r4, #16]
 800fa74:	4642      	mov	r2, r8
 800fa76:	4631      	mov	r1, r6
 800fa78:	4628      	mov	r0, r5
 800fa7a:	47b8      	blx	r7
 800fa7c:	3001      	adds	r0, #1
 800fa7e:	d12b      	bne.n	800fad8 <_printf_float+0x23c>
 800fa80:	e767      	b.n	800f952 <_printf_float+0xb6>
 800fa82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fa86:	f240 80dd 	bls.w	800fc44 <_printf_float+0x3a8>
 800fa8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fa8e:	2200      	movs	r2, #0
 800fa90:	2300      	movs	r3, #0
 800fa92:	f7f1 f821 	bl	8000ad8 <__aeabi_dcmpeq>
 800fa96:	2800      	cmp	r0, #0
 800fa98:	d033      	beq.n	800fb02 <_printf_float+0x266>
 800fa9a:	4a37      	ldr	r2, [pc, #220]	@ (800fb78 <_printf_float+0x2dc>)
 800fa9c:	2301      	movs	r3, #1
 800fa9e:	4631      	mov	r1, r6
 800faa0:	4628      	mov	r0, r5
 800faa2:	47b8      	blx	r7
 800faa4:	3001      	adds	r0, #1
 800faa6:	f43f af54 	beq.w	800f952 <_printf_float+0xb6>
 800faaa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800faae:	4543      	cmp	r3, r8
 800fab0:	db02      	blt.n	800fab8 <_printf_float+0x21c>
 800fab2:	6823      	ldr	r3, [r4, #0]
 800fab4:	07d8      	lsls	r0, r3, #31
 800fab6:	d50f      	bpl.n	800fad8 <_printf_float+0x23c>
 800fab8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fabc:	4631      	mov	r1, r6
 800fabe:	4628      	mov	r0, r5
 800fac0:	47b8      	blx	r7
 800fac2:	3001      	adds	r0, #1
 800fac4:	f43f af45 	beq.w	800f952 <_printf_float+0xb6>
 800fac8:	f04f 0900 	mov.w	r9, #0
 800facc:	f108 38ff 	add.w	r8, r8, #4294967295
 800fad0:	f104 0a1a 	add.w	sl, r4, #26
 800fad4:	45c8      	cmp	r8, r9
 800fad6:	dc09      	bgt.n	800faec <_printf_float+0x250>
 800fad8:	6823      	ldr	r3, [r4, #0]
 800fada:	079b      	lsls	r3, r3, #30
 800fadc:	f100 8103 	bmi.w	800fce6 <_printf_float+0x44a>
 800fae0:	68e0      	ldr	r0, [r4, #12]
 800fae2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fae4:	4298      	cmp	r0, r3
 800fae6:	bfb8      	it	lt
 800fae8:	4618      	movlt	r0, r3
 800faea:	e734      	b.n	800f956 <_printf_float+0xba>
 800faec:	2301      	movs	r3, #1
 800faee:	4652      	mov	r2, sl
 800faf0:	4631      	mov	r1, r6
 800faf2:	4628      	mov	r0, r5
 800faf4:	47b8      	blx	r7
 800faf6:	3001      	adds	r0, #1
 800faf8:	f43f af2b 	beq.w	800f952 <_printf_float+0xb6>
 800fafc:	f109 0901 	add.w	r9, r9, #1
 800fb00:	e7e8      	b.n	800fad4 <_printf_float+0x238>
 800fb02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	dc39      	bgt.n	800fb7c <_printf_float+0x2e0>
 800fb08:	4a1b      	ldr	r2, [pc, #108]	@ (800fb78 <_printf_float+0x2dc>)
 800fb0a:	2301      	movs	r3, #1
 800fb0c:	4631      	mov	r1, r6
 800fb0e:	4628      	mov	r0, r5
 800fb10:	47b8      	blx	r7
 800fb12:	3001      	adds	r0, #1
 800fb14:	f43f af1d 	beq.w	800f952 <_printf_float+0xb6>
 800fb18:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fb1c:	ea59 0303 	orrs.w	r3, r9, r3
 800fb20:	d102      	bne.n	800fb28 <_printf_float+0x28c>
 800fb22:	6823      	ldr	r3, [r4, #0]
 800fb24:	07d9      	lsls	r1, r3, #31
 800fb26:	d5d7      	bpl.n	800fad8 <_printf_float+0x23c>
 800fb28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fb2c:	4631      	mov	r1, r6
 800fb2e:	4628      	mov	r0, r5
 800fb30:	47b8      	blx	r7
 800fb32:	3001      	adds	r0, #1
 800fb34:	f43f af0d 	beq.w	800f952 <_printf_float+0xb6>
 800fb38:	f04f 0a00 	mov.w	sl, #0
 800fb3c:	f104 0b1a 	add.w	fp, r4, #26
 800fb40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb42:	425b      	negs	r3, r3
 800fb44:	4553      	cmp	r3, sl
 800fb46:	dc01      	bgt.n	800fb4c <_printf_float+0x2b0>
 800fb48:	464b      	mov	r3, r9
 800fb4a:	e793      	b.n	800fa74 <_printf_float+0x1d8>
 800fb4c:	2301      	movs	r3, #1
 800fb4e:	465a      	mov	r2, fp
 800fb50:	4631      	mov	r1, r6
 800fb52:	4628      	mov	r0, r5
 800fb54:	47b8      	blx	r7
 800fb56:	3001      	adds	r0, #1
 800fb58:	f43f aefb 	beq.w	800f952 <_printf_float+0xb6>
 800fb5c:	f10a 0a01 	add.w	sl, sl, #1
 800fb60:	e7ee      	b.n	800fb40 <_printf_float+0x2a4>
 800fb62:	bf00      	nop
 800fb64:	7fefffff 	.word	0x7fefffff
 800fb68:	08014d58 	.word	0x08014d58
 800fb6c:	08014d54 	.word	0x08014d54
 800fb70:	08014d60 	.word	0x08014d60
 800fb74:	08014d5c 	.word	0x08014d5c
 800fb78:	08014d64 	.word	0x08014d64
 800fb7c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fb7e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fb82:	4553      	cmp	r3, sl
 800fb84:	bfa8      	it	ge
 800fb86:	4653      	movge	r3, sl
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	4699      	mov	r9, r3
 800fb8c:	dc36      	bgt.n	800fbfc <_printf_float+0x360>
 800fb8e:	f04f 0b00 	mov.w	fp, #0
 800fb92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fb96:	f104 021a 	add.w	r2, r4, #26
 800fb9a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fb9c:	9306      	str	r3, [sp, #24]
 800fb9e:	eba3 0309 	sub.w	r3, r3, r9
 800fba2:	455b      	cmp	r3, fp
 800fba4:	dc31      	bgt.n	800fc0a <_printf_float+0x36e>
 800fba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fba8:	459a      	cmp	sl, r3
 800fbaa:	dc3a      	bgt.n	800fc22 <_printf_float+0x386>
 800fbac:	6823      	ldr	r3, [r4, #0]
 800fbae:	07da      	lsls	r2, r3, #31
 800fbb0:	d437      	bmi.n	800fc22 <_printf_float+0x386>
 800fbb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbb4:	ebaa 0903 	sub.w	r9, sl, r3
 800fbb8:	9b06      	ldr	r3, [sp, #24]
 800fbba:	ebaa 0303 	sub.w	r3, sl, r3
 800fbbe:	4599      	cmp	r9, r3
 800fbc0:	bfa8      	it	ge
 800fbc2:	4699      	movge	r9, r3
 800fbc4:	f1b9 0f00 	cmp.w	r9, #0
 800fbc8:	dc33      	bgt.n	800fc32 <_printf_float+0x396>
 800fbca:	f04f 0800 	mov.w	r8, #0
 800fbce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fbd2:	f104 0b1a 	add.w	fp, r4, #26
 800fbd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbd8:	ebaa 0303 	sub.w	r3, sl, r3
 800fbdc:	eba3 0309 	sub.w	r3, r3, r9
 800fbe0:	4543      	cmp	r3, r8
 800fbe2:	f77f af79 	ble.w	800fad8 <_printf_float+0x23c>
 800fbe6:	2301      	movs	r3, #1
 800fbe8:	465a      	mov	r2, fp
 800fbea:	4631      	mov	r1, r6
 800fbec:	4628      	mov	r0, r5
 800fbee:	47b8      	blx	r7
 800fbf0:	3001      	adds	r0, #1
 800fbf2:	f43f aeae 	beq.w	800f952 <_printf_float+0xb6>
 800fbf6:	f108 0801 	add.w	r8, r8, #1
 800fbfa:	e7ec      	b.n	800fbd6 <_printf_float+0x33a>
 800fbfc:	4642      	mov	r2, r8
 800fbfe:	4631      	mov	r1, r6
 800fc00:	4628      	mov	r0, r5
 800fc02:	47b8      	blx	r7
 800fc04:	3001      	adds	r0, #1
 800fc06:	d1c2      	bne.n	800fb8e <_printf_float+0x2f2>
 800fc08:	e6a3      	b.n	800f952 <_printf_float+0xb6>
 800fc0a:	2301      	movs	r3, #1
 800fc0c:	4631      	mov	r1, r6
 800fc0e:	4628      	mov	r0, r5
 800fc10:	9206      	str	r2, [sp, #24]
 800fc12:	47b8      	blx	r7
 800fc14:	3001      	adds	r0, #1
 800fc16:	f43f ae9c 	beq.w	800f952 <_printf_float+0xb6>
 800fc1a:	9a06      	ldr	r2, [sp, #24]
 800fc1c:	f10b 0b01 	add.w	fp, fp, #1
 800fc20:	e7bb      	b.n	800fb9a <_printf_float+0x2fe>
 800fc22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc26:	4631      	mov	r1, r6
 800fc28:	4628      	mov	r0, r5
 800fc2a:	47b8      	blx	r7
 800fc2c:	3001      	adds	r0, #1
 800fc2e:	d1c0      	bne.n	800fbb2 <_printf_float+0x316>
 800fc30:	e68f      	b.n	800f952 <_printf_float+0xb6>
 800fc32:	9a06      	ldr	r2, [sp, #24]
 800fc34:	464b      	mov	r3, r9
 800fc36:	4442      	add	r2, r8
 800fc38:	4631      	mov	r1, r6
 800fc3a:	4628      	mov	r0, r5
 800fc3c:	47b8      	blx	r7
 800fc3e:	3001      	adds	r0, #1
 800fc40:	d1c3      	bne.n	800fbca <_printf_float+0x32e>
 800fc42:	e686      	b.n	800f952 <_printf_float+0xb6>
 800fc44:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fc48:	f1ba 0f01 	cmp.w	sl, #1
 800fc4c:	dc01      	bgt.n	800fc52 <_printf_float+0x3b6>
 800fc4e:	07db      	lsls	r3, r3, #31
 800fc50:	d536      	bpl.n	800fcc0 <_printf_float+0x424>
 800fc52:	2301      	movs	r3, #1
 800fc54:	4642      	mov	r2, r8
 800fc56:	4631      	mov	r1, r6
 800fc58:	4628      	mov	r0, r5
 800fc5a:	47b8      	blx	r7
 800fc5c:	3001      	adds	r0, #1
 800fc5e:	f43f ae78 	beq.w	800f952 <_printf_float+0xb6>
 800fc62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc66:	4631      	mov	r1, r6
 800fc68:	4628      	mov	r0, r5
 800fc6a:	47b8      	blx	r7
 800fc6c:	3001      	adds	r0, #1
 800fc6e:	f43f ae70 	beq.w	800f952 <_printf_float+0xb6>
 800fc72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fc76:	2200      	movs	r2, #0
 800fc78:	2300      	movs	r3, #0
 800fc7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fc7e:	f7f0 ff2b 	bl	8000ad8 <__aeabi_dcmpeq>
 800fc82:	b9c0      	cbnz	r0, 800fcb6 <_printf_float+0x41a>
 800fc84:	4653      	mov	r3, sl
 800fc86:	f108 0201 	add.w	r2, r8, #1
 800fc8a:	4631      	mov	r1, r6
 800fc8c:	4628      	mov	r0, r5
 800fc8e:	47b8      	blx	r7
 800fc90:	3001      	adds	r0, #1
 800fc92:	d10c      	bne.n	800fcae <_printf_float+0x412>
 800fc94:	e65d      	b.n	800f952 <_printf_float+0xb6>
 800fc96:	2301      	movs	r3, #1
 800fc98:	465a      	mov	r2, fp
 800fc9a:	4631      	mov	r1, r6
 800fc9c:	4628      	mov	r0, r5
 800fc9e:	47b8      	blx	r7
 800fca0:	3001      	adds	r0, #1
 800fca2:	f43f ae56 	beq.w	800f952 <_printf_float+0xb6>
 800fca6:	f108 0801 	add.w	r8, r8, #1
 800fcaa:	45d0      	cmp	r8, sl
 800fcac:	dbf3      	blt.n	800fc96 <_printf_float+0x3fa>
 800fcae:	464b      	mov	r3, r9
 800fcb0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800fcb4:	e6df      	b.n	800fa76 <_printf_float+0x1da>
 800fcb6:	f04f 0800 	mov.w	r8, #0
 800fcba:	f104 0b1a 	add.w	fp, r4, #26
 800fcbe:	e7f4      	b.n	800fcaa <_printf_float+0x40e>
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	4642      	mov	r2, r8
 800fcc4:	e7e1      	b.n	800fc8a <_printf_float+0x3ee>
 800fcc6:	2301      	movs	r3, #1
 800fcc8:	464a      	mov	r2, r9
 800fcca:	4631      	mov	r1, r6
 800fccc:	4628      	mov	r0, r5
 800fcce:	47b8      	blx	r7
 800fcd0:	3001      	adds	r0, #1
 800fcd2:	f43f ae3e 	beq.w	800f952 <_printf_float+0xb6>
 800fcd6:	f108 0801 	add.w	r8, r8, #1
 800fcda:	68e3      	ldr	r3, [r4, #12]
 800fcdc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fcde:	1a5b      	subs	r3, r3, r1
 800fce0:	4543      	cmp	r3, r8
 800fce2:	dcf0      	bgt.n	800fcc6 <_printf_float+0x42a>
 800fce4:	e6fc      	b.n	800fae0 <_printf_float+0x244>
 800fce6:	f04f 0800 	mov.w	r8, #0
 800fcea:	f104 0919 	add.w	r9, r4, #25
 800fcee:	e7f4      	b.n	800fcda <_printf_float+0x43e>

0800fcf0 <_printf_common>:
 800fcf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcf4:	4616      	mov	r6, r2
 800fcf6:	4698      	mov	r8, r3
 800fcf8:	688a      	ldr	r2, [r1, #8]
 800fcfa:	690b      	ldr	r3, [r1, #16]
 800fcfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fd00:	4293      	cmp	r3, r2
 800fd02:	bfb8      	it	lt
 800fd04:	4613      	movlt	r3, r2
 800fd06:	6033      	str	r3, [r6, #0]
 800fd08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fd0c:	4607      	mov	r7, r0
 800fd0e:	460c      	mov	r4, r1
 800fd10:	b10a      	cbz	r2, 800fd16 <_printf_common+0x26>
 800fd12:	3301      	adds	r3, #1
 800fd14:	6033      	str	r3, [r6, #0]
 800fd16:	6823      	ldr	r3, [r4, #0]
 800fd18:	0699      	lsls	r1, r3, #26
 800fd1a:	bf42      	ittt	mi
 800fd1c:	6833      	ldrmi	r3, [r6, #0]
 800fd1e:	3302      	addmi	r3, #2
 800fd20:	6033      	strmi	r3, [r6, #0]
 800fd22:	6825      	ldr	r5, [r4, #0]
 800fd24:	f015 0506 	ands.w	r5, r5, #6
 800fd28:	d106      	bne.n	800fd38 <_printf_common+0x48>
 800fd2a:	f104 0a19 	add.w	sl, r4, #25
 800fd2e:	68e3      	ldr	r3, [r4, #12]
 800fd30:	6832      	ldr	r2, [r6, #0]
 800fd32:	1a9b      	subs	r3, r3, r2
 800fd34:	42ab      	cmp	r3, r5
 800fd36:	dc26      	bgt.n	800fd86 <_printf_common+0x96>
 800fd38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fd3c:	6822      	ldr	r2, [r4, #0]
 800fd3e:	3b00      	subs	r3, #0
 800fd40:	bf18      	it	ne
 800fd42:	2301      	movne	r3, #1
 800fd44:	0692      	lsls	r2, r2, #26
 800fd46:	d42b      	bmi.n	800fda0 <_printf_common+0xb0>
 800fd48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fd4c:	4641      	mov	r1, r8
 800fd4e:	4638      	mov	r0, r7
 800fd50:	47c8      	blx	r9
 800fd52:	3001      	adds	r0, #1
 800fd54:	d01e      	beq.n	800fd94 <_printf_common+0xa4>
 800fd56:	6823      	ldr	r3, [r4, #0]
 800fd58:	6922      	ldr	r2, [r4, #16]
 800fd5a:	f003 0306 	and.w	r3, r3, #6
 800fd5e:	2b04      	cmp	r3, #4
 800fd60:	bf02      	ittt	eq
 800fd62:	68e5      	ldreq	r5, [r4, #12]
 800fd64:	6833      	ldreq	r3, [r6, #0]
 800fd66:	1aed      	subeq	r5, r5, r3
 800fd68:	68a3      	ldr	r3, [r4, #8]
 800fd6a:	bf0c      	ite	eq
 800fd6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fd70:	2500      	movne	r5, #0
 800fd72:	4293      	cmp	r3, r2
 800fd74:	bfc4      	itt	gt
 800fd76:	1a9b      	subgt	r3, r3, r2
 800fd78:	18ed      	addgt	r5, r5, r3
 800fd7a:	2600      	movs	r6, #0
 800fd7c:	341a      	adds	r4, #26
 800fd7e:	42b5      	cmp	r5, r6
 800fd80:	d11a      	bne.n	800fdb8 <_printf_common+0xc8>
 800fd82:	2000      	movs	r0, #0
 800fd84:	e008      	b.n	800fd98 <_printf_common+0xa8>
 800fd86:	2301      	movs	r3, #1
 800fd88:	4652      	mov	r2, sl
 800fd8a:	4641      	mov	r1, r8
 800fd8c:	4638      	mov	r0, r7
 800fd8e:	47c8      	blx	r9
 800fd90:	3001      	adds	r0, #1
 800fd92:	d103      	bne.n	800fd9c <_printf_common+0xac>
 800fd94:	f04f 30ff 	mov.w	r0, #4294967295
 800fd98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd9c:	3501      	adds	r5, #1
 800fd9e:	e7c6      	b.n	800fd2e <_printf_common+0x3e>
 800fda0:	18e1      	adds	r1, r4, r3
 800fda2:	1c5a      	adds	r2, r3, #1
 800fda4:	2030      	movs	r0, #48	@ 0x30
 800fda6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fdaa:	4422      	add	r2, r4
 800fdac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fdb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fdb4:	3302      	adds	r3, #2
 800fdb6:	e7c7      	b.n	800fd48 <_printf_common+0x58>
 800fdb8:	2301      	movs	r3, #1
 800fdba:	4622      	mov	r2, r4
 800fdbc:	4641      	mov	r1, r8
 800fdbe:	4638      	mov	r0, r7
 800fdc0:	47c8      	blx	r9
 800fdc2:	3001      	adds	r0, #1
 800fdc4:	d0e6      	beq.n	800fd94 <_printf_common+0xa4>
 800fdc6:	3601      	adds	r6, #1
 800fdc8:	e7d9      	b.n	800fd7e <_printf_common+0x8e>
	...

0800fdcc <_printf_i>:
 800fdcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fdd0:	7e0f      	ldrb	r7, [r1, #24]
 800fdd2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fdd4:	2f78      	cmp	r7, #120	@ 0x78
 800fdd6:	4691      	mov	r9, r2
 800fdd8:	4680      	mov	r8, r0
 800fdda:	460c      	mov	r4, r1
 800fddc:	469a      	mov	sl, r3
 800fdde:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fde2:	d807      	bhi.n	800fdf4 <_printf_i+0x28>
 800fde4:	2f62      	cmp	r7, #98	@ 0x62
 800fde6:	d80a      	bhi.n	800fdfe <_printf_i+0x32>
 800fde8:	2f00      	cmp	r7, #0
 800fdea:	f000 80d1 	beq.w	800ff90 <_printf_i+0x1c4>
 800fdee:	2f58      	cmp	r7, #88	@ 0x58
 800fdf0:	f000 80b8 	beq.w	800ff64 <_printf_i+0x198>
 800fdf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fdf8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fdfc:	e03a      	b.n	800fe74 <_printf_i+0xa8>
 800fdfe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fe02:	2b15      	cmp	r3, #21
 800fe04:	d8f6      	bhi.n	800fdf4 <_printf_i+0x28>
 800fe06:	a101      	add	r1, pc, #4	@ (adr r1, 800fe0c <_printf_i+0x40>)
 800fe08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fe0c:	0800fe65 	.word	0x0800fe65
 800fe10:	0800fe79 	.word	0x0800fe79
 800fe14:	0800fdf5 	.word	0x0800fdf5
 800fe18:	0800fdf5 	.word	0x0800fdf5
 800fe1c:	0800fdf5 	.word	0x0800fdf5
 800fe20:	0800fdf5 	.word	0x0800fdf5
 800fe24:	0800fe79 	.word	0x0800fe79
 800fe28:	0800fdf5 	.word	0x0800fdf5
 800fe2c:	0800fdf5 	.word	0x0800fdf5
 800fe30:	0800fdf5 	.word	0x0800fdf5
 800fe34:	0800fdf5 	.word	0x0800fdf5
 800fe38:	0800ff77 	.word	0x0800ff77
 800fe3c:	0800fea3 	.word	0x0800fea3
 800fe40:	0800ff31 	.word	0x0800ff31
 800fe44:	0800fdf5 	.word	0x0800fdf5
 800fe48:	0800fdf5 	.word	0x0800fdf5
 800fe4c:	0800ff99 	.word	0x0800ff99
 800fe50:	0800fdf5 	.word	0x0800fdf5
 800fe54:	0800fea3 	.word	0x0800fea3
 800fe58:	0800fdf5 	.word	0x0800fdf5
 800fe5c:	0800fdf5 	.word	0x0800fdf5
 800fe60:	0800ff39 	.word	0x0800ff39
 800fe64:	6833      	ldr	r3, [r6, #0]
 800fe66:	1d1a      	adds	r2, r3, #4
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	6032      	str	r2, [r6, #0]
 800fe6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fe70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fe74:	2301      	movs	r3, #1
 800fe76:	e09c      	b.n	800ffb2 <_printf_i+0x1e6>
 800fe78:	6833      	ldr	r3, [r6, #0]
 800fe7a:	6820      	ldr	r0, [r4, #0]
 800fe7c:	1d19      	adds	r1, r3, #4
 800fe7e:	6031      	str	r1, [r6, #0]
 800fe80:	0606      	lsls	r6, r0, #24
 800fe82:	d501      	bpl.n	800fe88 <_printf_i+0xbc>
 800fe84:	681d      	ldr	r5, [r3, #0]
 800fe86:	e003      	b.n	800fe90 <_printf_i+0xc4>
 800fe88:	0645      	lsls	r5, r0, #25
 800fe8a:	d5fb      	bpl.n	800fe84 <_printf_i+0xb8>
 800fe8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fe90:	2d00      	cmp	r5, #0
 800fe92:	da03      	bge.n	800fe9c <_printf_i+0xd0>
 800fe94:	232d      	movs	r3, #45	@ 0x2d
 800fe96:	426d      	negs	r5, r5
 800fe98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fe9c:	4858      	ldr	r0, [pc, #352]	@ (8010000 <_printf_i+0x234>)
 800fe9e:	230a      	movs	r3, #10
 800fea0:	e011      	b.n	800fec6 <_printf_i+0xfa>
 800fea2:	6821      	ldr	r1, [r4, #0]
 800fea4:	6833      	ldr	r3, [r6, #0]
 800fea6:	0608      	lsls	r0, r1, #24
 800fea8:	f853 5b04 	ldr.w	r5, [r3], #4
 800feac:	d402      	bmi.n	800feb4 <_printf_i+0xe8>
 800feae:	0649      	lsls	r1, r1, #25
 800feb0:	bf48      	it	mi
 800feb2:	b2ad      	uxthmi	r5, r5
 800feb4:	2f6f      	cmp	r7, #111	@ 0x6f
 800feb6:	4852      	ldr	r0, [pc, #328]	@ (8010000 <_printf_i+0x234>)
 800feb8:	6033      	str	r3, [r6, #0]
 800feba:	bf14      	ite	ne
 800febc:	230a      	movne	r3, #10
 800febe:	2308      	moveq	r3, #8
 800fec0:	2100      	movs	r1, #0
 800fec2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fec6:	6866      	ldr	r6, [r4, #4]
 800fec8:	60a6      	str	r6, [r4, #8]
 800feca:	2e00      	cmp	r6, #0
 800fecc:	db05      	blt.n	800feda <_printf_i+0x10e>
 800fece:	6821      	ldr	r1, [r4, #0]
 800fed0:	432e      	orrs	r6, r5
 800fed2:	f021 0104 	bic.w	r1, r1, #4
 800fed6:	6021      	str	r1, [r4, #0]
 800fed8:	d04b      	beq.n	800ff72 <_printf_i+0x1a6>
 800feda:	4616      	mov	r6, r2
 800fedc:	fbb5 f1f3 	udiv	r1, r5, r3
 800fee0:	fb03 5711 	mls	r7, r3, r1, r5
 800fee4:	5dc7      	ldrb	r7, [r0, r7]
 800fee6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800feea:	462f      	mov	r7, r5
 800feec:	42bb      	cmp	r3, r7
 800feee:	460d      	mov	r5, r1
 800fef0:	d9f4      	bls.n	800fedc <_printf_i+0x110>
 800fef2:	2b08      	cmp	r3, #8
 800fef4:	d10b      	bne.n	800ff0e <_printf_i+0x142>
 800fef6:	6823      	ldr	r3, [r4, #0]
 800fef8:	07df      	lsls	r7, r3, #31
 800fefa:	d508      	bpl.n	800ff0e <_printf_i+0x142>
 800fefc:	6923      	ldr	r3, [r4, #16]
 800fefe:	6861      	ldr	r1, [r4, #4]
 800ff00:	4299      	cmp	r1, r3
 800ff02:	bfde      	ittt	le
 800ff04:	2330      	movle	r3, #48	@ 0x30
 800ff06:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ff0a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ff0e:	1b92      	subs	r2, r2, r6
 800ff10:	6122      	str	r2, [r4, #16]
 800ff12:	f8cd a000 	str.w	sl, [sp]
 800ff16:	464b      	mov	r3, r9
 800ff18:	aa03      	add	r2, sp, #12
 800ff1a:	4621      	mov	r1, r4
 800ff1c:	4640      	mov	r0, r8
 800ff1e:	f7ff fee7 	bl	800fcf0 <_printf_common>
 800ff22:	3001      	adds	r0, #1
 800ff24:	d14a      	bne.n	800ffbc <_printf_i+0x1f0>
 800ff26:	f04f 30ff 	mov.w	r0, #4294967295
 800ff2a:	b004      	add	sp, #16
 800ff2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff30:	6823      	ldr	r3, [r4, #0]
 800ff32:	f043 0320 	orr.w	r3, r3, #32
 800ff36:	6023      	str	r3, [r4, #0]
 800ff38:	4832      	ldr	r0, [pc, #200]	@ (8010004 <_printf_i+0x238>)
 800ff3a:	2778      	movs	r7, #120	@ 0x78
 800ff3c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ff40:	6823      	ldr	r3, [r4, #0]
 800ff42:	6831      	ldr	r1, [r6, #0]
 800ff44:	061f      	lsls	r7, r3, #24
 800ff46:	f851 5b04 	ldr.w	r5, [r1], #4
 800ff4a:	d402      	bmi.n	800ff52 <_printf_i+0x186>
 800ff4c:	065f      	lsls	r7, r3, #25
 800ff4e:	bf48      	it	mi
 800ff50:	b2ad      	uxthmi	r5, r5
 800ff52:	6031      	str	r1, [r6, #0]
 800ff54:	07d9      	lsls	r1, r3, #31
 800ff56:	bf44      	itt	mi
 800ff58:	f043 0320 	orrmi.w	r3, r3, #32
 800ff5c:	6023      	strmi	r3, [r4, #0]
 800ff5e:	b11d      	cbz	r5, 800ff68 <_printf_i+0x19c>
 800ff60:	2310      	movs	r3, #16
 800ff62:	e7ad      	b.n	800fec0 <_printf_i+0xf4>
 800ff64:	4826      	ldr	r0, [pc, #152]	@ (8010000 <_printf_i+0x234>)
 800ff66:	e7e9      	b.n	800ff3c <_printf_i+0x170>
 800ff68:	6823      	ldr	r3, [r4, #0]
 800ff6a:	f023 0320 	bic.w	r3, r3, #32
 800ff6e:	6023      	str	r3, [r4, #0]
 800ff70:	e7f6      	b.n	800ff60 <_printf_i+0x194>
 800ff72:	4616      	mov	r6, r2
 800ff74:	e7bd      	b.n	800fef2 <_printf_i+0x126>
 800ff76:	6833      	ldr	r3, [r6, #0]
 800ff78:	6825      	ldr	r5, [r4, #0]
 800ff7a:	6961      	ldr	r1, [r4, #20]
 800ff7c:	1d18      	adds	r0, r3, #4
 800ff7e:	6030      	str	r0, [r6, #0]
 800ff80:	062e      	lsls	r6, r5, #24
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	d501      	bpl.n	800ff8a <_printf_i+0x1be>
 800ff86:	6019      	str	r1, [r3, #0]
 800ff88:	e002      	b.n	800ff90 <_printf_i+0x1c4>
 800ff8a:	0668      	lsls	r0, r5, #25
 800ff8c:	d5fb      	bpl.n	800ff86 <_printf_i+0x1ba>
 800ff8e:	8019      	strh	r1, [r3, #0]
 800ff90:	2300      	movs	r3, #0
 800ff92:	6123      	str	r3, [r4, #16]
 800ff94:	4616      	mov	r6, r2
 800ff96:	e7bc      	b.n	800ff12 <_printf_i+0x146>
 800ff98:	6833      	ldr	r3, [r6, #0]
 800ff9a:	1d1a      	adds	r2, r3, #4
 800ff9c:	6032      	str	r2, [r6, #0]
 800ff9e:	681e      	ldr	r6, [r3, #0]
 800ffa0:	6862      	ldr	r2, [r4, #4]
 800ffa2:	2100      	movs	r1, #0
 800ffa4:	4630      	mov	r0, r6
 800ffa6:	f7f0 f91b 	bl	80001e0 <memchr>
 800ffaa:	b108      	cbz	r0, 800ffb0 <_printf_i+0x1e4>
 800ffac:	1b80      	subs	r0, r0, r6
 800ffae:	6060      	str	r0, [r4, #4]
 800ffb0:	6863      	ldr	r3, [r4, #4]
 800ffb2:	6123      	str	r3, [r4, #16]
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ffba:	e7aa      	b.n	800ff12 <_printf_i+0x146>
 800ffbc:	6923      	ldr	r3, [r4, #16]
 800ffbe:	4632      	mov	r2, r6
 800ffc0:	4649      	mov	r1, r9
 800ffc2:	4640      	mov	r0, r8
 800ffc4:	47d0      	blx	sl
 800ffc6:	3001      	adds	r0, #1
 800ffc8:	d0ad      	beq.n	800ff26 <_printf_i+0x15a>
 800ffca:	6823      	ldr	r3, [r4, #0]
 800ffcc:	079b      	lsls	r3, r3, #30
 800ffce:	d413      	bmi.n	800fff8 <_printf_i+0x22c>
 800ffd0:	68e0      	ldr	r0, [r4, #12]
 800ffd2:	9b03      	ldr	r3, [sp, #12]
 800ffd4:	4298      	cmp	r0, r3
 800ffd6:	bfb8      	it	lt
 800ffd8:	4618      	movlt	r0, r3
 800ffda:	e7a6      	b.n	800ff2a <_printf_i+0x15e>
 800ffdc:	2301      	movs	r3, #1
 800ffde:	4632      	mov	r2, r6
 800ffe0:	4649      	mov	r1, r9
 800ffe2:	4640      	mov	r0, r8
 800ffe4:	47d0      	blx	sl
 800ffe6:	3001      	adds	r0, #1
 800ffe8:	d09d      	beq.n	800ff26 <_printf_i+0x15a>
 800ffea:	3501      	adds	r5, #1
 800ffec:	68e3      	ldr	r3, [r4, #12]
 800ffee:	9903      	ldr	r1, [sp, #12]
 800fff0:	1a5b      	subs	r3, r3, r1
 800fff2:	42ab      	cmp	r3, r5
 800fff4:	dcf2      	bgt.n	800ffdc <_printf_i+0x210>
 800fff6:	e7eb      	b.n	800ffd0 <_printf_i+0x204>
 800fff8:	2500      	movs	r5, #0
 800fffa:	f104 0619 	add.w	r6, r4, #25
 800fffe:	e7f5      	b.n	800ffec <_printf_i+0x220>
 8010000:	08014d66 	.word	0x08014d66
 8010004:	08014d77 	.word	0x08014d77

08010008 <_scanf_float>:
 8010008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801000c:	b087      	sub	sp, #28
 801000e:	4691      	mov	r9, r2
 8010010:	9303      	str	r3, [sp, #12]
 8010012:	688b      	ldr	r3, [r1, #8]
 8010014:	1e5a      	subs	r2, r3, #1
 8010016:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801001a:	bf81      	itttt	hi
 801001c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8010020:	eb03 0b05 	addhi.w	fp, r3, r5
 8010024:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8010028:	608b      	strhi	r3, [r1, #8]
 801002a:	680b      	ldr	r3, [r1, #0]
 801002c:	460a      	mov	r2, r1
 801002e:	f04f 0500 	mov.w	r5, #0
 8010032:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8010036:	f842 3b1c 	str.w	r3, [r2], #28
 801003a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801003e:	4680      	mov	r8, r0
 8010040:	460c      	mov	r4, r1
 8010042:	bf98      	it	ls
 8010044:	f04f 0b00 	movls.w	fp, #0
 8010048:	9201      	str	r2, [sp, #4]
 801004a:	4616      	mov	r6, r2
 801004c:	46aa      	mov	sl, r5
 801004e:	462f      	mov	r7, r5
 8010050:	9502      	str	r5, [sp, #8]
 8010052:	68a2      	ldr	r2, [r4, #8]
 8010054:	b15a      	cbz	r2, 801006e <_scanf_float+0x66>
 8010056:	f8d9 3000 	ldr.w	r3, [r9]
 801005a:	781b      	ldrb	r3, [r3, #0]
 801005c:	2b4e      	cmp	r3, #78	@ 0x4e
 801005e:	d863      	bhi.n	8010128 <_scanf_float+0x120>
 8010060:	2b40      	cmp	r3, #64	@ 0x40
 8010062:	d83b      	bhi.n	80100dc <_scanf_float+0xd4>
 8010064:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8010068:	b2c8      	uxtb	r0, r1
 801006a:	280e      	cmp	r0, #14
 801006c:	d939      	bls.n	80100e2 <_scanf_float+0xda>
 801006e:	b11f      	cbz	r7, 8010078 <_scanf_float+0x70>
 8010070:	6823      	ldr	r3, [r4, #0]
 8010072:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010076:	6023      	str	r3, [r4, #0]
 8010078:	f10a 3aff 	add.w	sl, sl, #4294967295
 801007c:	f1ba 0f01 	cmp.w	sl, #1
 8010080:	f200 8114 	bhi.w	80102ac <_scanf_float+0x2a4>
 8010084:	9b01      	ldr	r3, [sp, #4]
 8010086:	429e      	cmp	r6, r3
 8010088:	f200 8105 	bhi.w	8010296 <_scanf_float+0x28e>
 801008c:	2001      	movs	r0, #1
 801008e:	b007      	add	sp, #28
 8010090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010094:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8010098:	2a0d      	cmp	r2, #13
 801009a:	d8e8      	bhi.n	801006e <_scanf_float+0x66>
 801009c:	a101      	add	r1, pc, #4	@ (adr r1, 80100a4 <_scanf_float+0x9c>)
 801009e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80100a2:	bf00      	nop
 80100a4:	080101ed 	.word	0x080101ed
 80100a8:	0801006f 	.word	0x0801006f
 80100ac:	0801006f 	.word	0x0801006f
 80100b0:	0801006f 	.word	0x0801006f
 80100b4:	08010249 	.word	0x08010249
 80100b8:	08010223 	.word	0x08010223
 80100bc:	0801006f 	.word	0x0801006f
 80100c0:	0801006f 	.word	0x0801006f
 80100c4:	080101fb 	.word	0x080101fb
 80100c8:	0801006f 	.word	0x0801006f
 80100cc:	0801006f 	.word	0x0801006f
 80100d0:	0801006f 	.word	0x0801006f
 80100d4:	0801006f 	.word	0x0801006f
 80100d8:	080101b7 	.word	0x080101b7
 80100dc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80100e0:	e7da      	b.n	8010098 <_scanf_float+0x90>
 80100e2:	290e      	cmp	r1, #14
 80100e4:	d8c3      	bhi.n	801006e <_scanf_float+0x66>
 80100e6:	a001      	add	r0, pc, #4	@ (adr r0, 80100ec <_scanf_float+0xe4>)
 80100e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80100ec:	080101a7 	.word	0x080101a7
 80100f0:	0801006f 	.word	0x0801006f
 80100f4:	080101a7 	.word	0x080101a7
 80100f8:	08010237 	.word	0x08010237
 80100fc:	0801006f 	.word	0x0801006f
 8010100:	08010149 	.word	0x08010149
 8010104:	0801018d 	.word	0x0801018d
 8010108:	0801018d 	.word	0x0801018d
 801010c:	0801018d 	.word	0x0801018d
 8010110:	0801018d 	.word	0x0801018d
 8010114:	0801018d 	.word	0x0801018d
 8010118:	0801018d 	.word	0x0801018d
 801011c:	0801018d 	.word	0x0801018d
 8010120:	0801018d 	.word	0x0801018d
 8010124:	0801018d 	.word	0x0801018d
 8010128:	2b6e      	cmp	r3, #110	@ 0x6e
 801012a:	d809      	bhi.n	8010140 <_scanf_float+0x138>
 801012c:	2b60      	cmp	r3, #96	@ 0x60
 801012e:	d8b1      	bhi.n	8010094 <_scanf_float+0x8c>
 8010130:	2b54      	cmp	r3, #84	@ 0x54
 8010132:	d07b      	beq.n	801022c <_scanf_float+0x224>
 8010134:	2b59      	cmp	r3, #89	@ 0x59
 8010136:	d19a      	bne.n	801006e <_scanf_float+0x66>
 8010138:	2d07      	cmp	r5, #7
 801013a:	d198      	bne.n	801006e <_scanf_float+0x66>
 801013c:	2508      	movs	r5, #8
 801013e:	e02f      	b.n	80101a0 <_scanf_float+0x198>
 8010140:	2b74      	cmp	r3, #116	@ 0x74
 8010142:	d073      	beq.n	801022c <_scanf_float+0x224>
 8010144:	2b79      	cmp	r3, #121	@ 0x79
 8010146:	e7f6      	b.n	8010136 <_scanf_float+0x12e>
 8010148:	6821      	ldr	r1, [r4, #0]
 801014a:	05c8      	lsls	r0, r1, #23
 801014c:	d51e      	bpl.n	801018c <_scanf_float+0x184>
 801014e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8010152:	6021      	str	r1, [r4, #0]
 8010154:	3701      	adds	r7, #1
 8010156:	f1bb 0f00 	cmp.w	fp, #0
 801015a:	d003      	beq.n	8010164 <_scanf_float+0x15c>
 801015c:	3201      	adds	r2, #1
 801015e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010162:	60a2      	str	r2, [r4, #8]
 8010164:	68a3      	ldr	r3, [r4, #8]
 8010166:	3b01      	subs	r3, #1
 8010168:	60a3      	str	r3, [r4, #8]
 801016a:	6923      	ldr	r3, [r4, #16]
 801016c:	3301      	adds	r3, #1
 801016e:	6123      	str	r3, [r4, #16]
 8010170:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8010174:	3b01      	subs	r3, #1
 8010176:	2b00      	cmp	r3, #0
 8010178:	f8c9 3004 	str.w	r3, [r9, #4]
 801017c:	f340 8082 	ble.w	8010284 <_scanf_float+0x27c>
 8010180:	f8d9 3000 	ldr.w	r3, [r9]
 8010184:	3301      	adds	r3, #1
 8010186:	f8c9 3000 	str.w	r3, [r9]
 801018a:	e762      	b.n	8010052 <_scanf_float+0x4a>
 801018c:	eb1a 0105 	adds.w	r1, sl, r5
 8010190:	f47f af6d 	bne.w	801006e <_scanf_float+0x66>
 8010194:	6822      	ldr	r2, [r4, #0]
 8010196:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801019a:	6022      	str	r2, [r4, #0]
 801019c:	460d      	mov	r5, r1
 801019e:	468a      	mov	sl, r1
 80101a0:	f806 3b01 	strb.w	r3, [r6], #1
 80101a4:	e7de      	b.n	8010164 <_scanf_float+0x15c>
 80101a6:	6822      	ldr	r2, [r4, #0]
 80101a8:	0610      	lsls	r0, r2, #24
 80101aa:	f57f af60 	bpl.w	801006e <_scanf_float+0x66>
 80101ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80101b2:	6022      	str	r2, [r4, #0]
 80101b4:	e7f4      	b.n	80101a0 <_scanf_float+0x198>
 80101b6:	f1ba 0f00 	cmp.w	sl, #0
 80101ba:	d10c      	bne.n	80101d6 <_scanf_float+0x1ce>
 80101bc:	b977      	cbnz	r7, 80101dc <_scanf_float+0x1d4>
 80101be:	6822      	ldr	r2, [r4, #0]
 80101c0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80101c4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80101c8:	d108      	bne.n	80101dc <_scanf_float+0x1d4>
 80101ca:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80101ce:	6022      	str	r2, [r4, #0]
 80101d0:	f04f 0a01 	mov.w	sl, #1
 80101d4:	e7e4      	b.n	80101a0 <_scanf_float+0x198>
 80101d6:	f1ba 0f02 	cmp.w	sl, #2
 80101da:	d050      	beq.n	801027e <_scanf_float+0x276>
 80101dc:	2d01      	cmp	r5, #1
 80101de:	d002      	beq.n	80101e6 <_scanf_float+0x1de>
 80101e0:	2d04      	cmp	r5, #4
 80101e2:	f47f af44 	bne.w	801006e <_scanf_float+0x66>
 80101e6:	3501      	adds	r5, #1
 80101e8:	b2ed      	uxtb	r5, r5
 80101ea:	e7d9      	b.n	80101a0 <_scanf_float+0x198>
 80101ec:	f1ba 0f01 	cmp.w	sl, #1
 80101f0:	f47f af3d 	bne.w	801006e <_scanf_float+0x66>
 80101f4:	f04f 0a02 	mov.w	sl, #2
 80101f8:	e7d2      	b.n	80101a0 <_scanf_float+0x198>
 80101fa:	b975      	cbnz	r5, 801021a <_scanf_float+0x212>
 80101fc:	2f00      	cmp	r7, #0
 80101fe:	f47f af37 	bne.w	8010070 <_scanf_float+0x68>
 8010202:	6822      	ldr	r2, [r4, #0]
 8010204:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010208:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801020c:	f040 8103 	bne.w	8010416 <_scanf_float+0x40e>
 8010210:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010214:	6022      	str	r2, [r4, #0]
 8010216:	2501      	movs	r5, #1
 8010218:	e7c2      	b.n	80101a0 <_scanf_float+0x198>
 801021a:	2d03      	cmp	r5, #3
 801021c:	d0e3      	beq.n	80101e6 <_scanf_float+0x1de>
 801021e:	2d05      	cmp	r5, #5
 8010220:	e7df      	b.n	80101e2 <_scanf_float+0x1da>
 8010222:	2d02      	cmp	r5, #2
 8010224:	f47f af23 	bne.w	801006e <_scanf_float+0x66>
 8010228:	2503      	movs	r5, #3
 801022a:	e7b9      	b.n	80101a0 <_scanf_float+0x198>
 801022c:	2d06      	cmp	r5, #6
 801022e:	f47f af1e 	bne.w	801006e <_scanf_float+0x66>
 8010232:	2507      	movs	r5, #7
 8010234:	e7b4      	b.n	80101a0 <_scanf_float+0x198>
 8010236:	6822      	ldr	r2, [r4, #0]
 8010238:	0591      	lsls	r1, r2, #22
 801023a:	f57f af18 	bpl.w	801006e <_scanf_float+0x66>
 801023e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8010242:	6022      	str	r2, [r4, #0]
 8010244:	9702      	str	r7, [sp, #8]
 8010246:	e7ab      	b.n	80101a0 <_scanf_float+0x198>
 8010248:	6822      	ldr	r2, [r4, #0]
 801024a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801024e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8010252:	d005      	beq.n	8010260 <_scanf_float+0x258>
 8010254:	0550      	lsls	r0, r2, #21
 8010256:	f57f af0a 	bpl.w	801006e <_scanf_float+0x66>
 801025a:	2f00      	cmp	r7, #0
 801025c:	f000 80db 	beq.w	8010416 <_scanf_float+0x40e>
 8010260:	0591      	lsls	r1, r2, #22
 8010262:	bf58      	it	pl
 8010264:	9902      	ldrpl	r1, [sp, #8]
 8010266:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801026a:	bf58      	it	pl
 801026c:	1a79      	subpl	r1, r7, r1
 801026e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8010272:	bf58      	it	pl
 8010274:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010278:	6022      	str	r2, [r4, #0]
 801027a:	2700      	movs	r7, #0
 801027c:	e790      	b.n	80101a0 <_scanf_float+0x198>
 801027e:	f04f 0a03 	mov.w	sl, #3
 8010282:	e78d      	b.n	80101a0 <_scanf_float+0x198>
 8010284:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010288:	4649      	mov	r1, r9
 801028a:	4640      	mov	r0, r8
 801028c:	4798      	blx	r3
 801028e:	2800      	cmp	r0, #0
 8010290:	f43f aedf 	beq.w	8010052 <_scanf_float+0x4a>
 8010294:	e6eb      	b.n	801006e <_scanf_float+0x66>
 8010296:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801029a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801029e:	464a      	mov	r2, r9
 80102a0:	4640      	mov	r0, r8
 80102a2:	4798      	blx	r3
 80102a4:	6923      	ldr	r3, [r4, #16]
 80102a6:	3b01      	subs	r3, #1
 80102a8:	6123      	str	r3, [r4, #16]
 80102aa:	e6eb      	b.n	8010084 <_scanf_float+0x7c>
 80102ac:	1e6b      	subs	r3, r5, #1
 80102ae:	2b06      	cmp	r3, #6
 80102b0:	d824      	bhi.n	80102fc <_scanf_float+0x2f4>
 80102b2:	2d02      	cmp	r5, #2
 80102b4:	d836      	bhi.n	8010324 <_scanf_float+0x31c>
 80102b6:	9b01      	ldr	r3, [sp, #4]
 80102b8:	429e      	cmp	r6, r3
 80102ba:	f67f aee7 	bls.w	801008c <_scanf_float+0x84>
 80102be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80102c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80102c6:	464a      	mov	r2, r9
 80102c8:	4640      	mov	r0, r8
 80102ca:	4798      	blx	r3
 80102cc:	6923      	ldr	r3, [r4, #16]
 80102ce:	3b01      	subs	r3, #1
 80102d0:	6123      	str	r3, [r4, #16]
 80102d2:	e7f0      	b.n	80102b6 <_scanf_float+0x2ae>
 80102d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80102d8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80102dc:	464a      	mov	r2, r9
 80102de:	4640      	mov	r0, r8
 80102e0:	4798      	blx	r3
 80102e2:	6923      	ldr	r3, [r4, #16]
 80102e4:	3b01      	subs	r3, #1
 80102e6:	6123      	str	r3, [r4, #16]
 80102e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80102ec:	fa5f fa8a 	uxtb.w	sl, sl
 80102f0:	f1ba 0f02 	cmp.w	sl, #2
 80102f4:	d1ee      	bne.n	80102d4 <_scanf_float+0x2cc>
 80102f6:	3d03      	subs	r5, #3
 80102f8:	b2ed      	uxtb	r5, r5
 80102fa:	1b76      	subs	r6, r6, r5
 80102fc:	6823      	ldr	r3, [r4, #0]
 80102fe:	05da      	lsls	r2, r3, #23
 8010300:	d530      	bpl.n	8010364 <_scanf_float+0x35c>
 8010302:	055b      	lsls	r3, r3, #21
 8010304:	d511      	bpl.n	801032a <_scanf_float+0x322>
 8010306:	9b01      	ldr	r3, [sp, #4]
 8010308:	429e      	cmp	r6, r3
 801030a:	f67f aebf 	bls.w	801008c <_scanf_float+0x84>
 801030e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010312:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010316:	464a      	mov	r2, r9
 8010318:	4640      	mov	r0, r8
 801031a:	4798      	blx	r3
 801031c:	6923      	ldr	r3, [r4, #16]
 801031e:	3b01      	subs	r3, #1
 8010320:	6123      	str	r3, [r4, #16]
 8010322:	e7f0      	b.n	8010306 <_scanf_float+0x2fe>
 8010324:	46aa      	mov	sl, r5
 8010326:	46b3      	mov	fp, r6
 8010328:	e7de      	b.n	80102e8 <_scanf_float+0x2e0>
 801032a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801032e:	6923      	ldr	r3, [r4, #16]
 8010330:	2965      	cmp	r1, #101	@ 0x65
 8010332:	f103 33ff 	add.w	r3, r3, #4294967295
 8010336:	f106 35ff 	add.w	r5, r6, #4294967295
 801033a:	6123      	str	r3, [r4, #16]
 801033c:	d00c      	beq.n	8010358 <_scanf_float+0x350>
 801033e:	2945      	cmp	r1, #69	@ 0x45
 8010340:	d00a      	beq.n	8010358 <_scanf_float+0x350>
 8010342:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010346:	464a      	mov	r2, r9
 8010348:	4640      	mov	r0, r8
 801034a:	4798      	blx	r3
 801034c:	6923      	ldr	r3, [r4, #16]
 801034e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010352:	3b01      	subs	r3, #1
 8010354:	1eb5      	subs	r5, r6, #2
 8010356:	6123      	str	r3, [r4, #16]
 8010358:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801035c:	464a      	mov	r2, r9
 801035e:	4640      	mov	r0, r8
 8010360:	4798      	blx	r3
 8010362:	462e      	mov	r6, r5
 8010364:	6822      	ldr	r2, [r4, #0]
 8010366:	f012 0210 	ands.w	r2, r2, #16
 801036a:	d001      	beq.n	8010370 <_scanf_float+0x368>
 801036c:	2000      	movs	r0, #0
 801036e:	e68e      	b.n	801008e <_scanf_float+0x86>
 8010370:	7032      	strb	r2, [r6, #0]
 8010372:	6823      	ldr	r3, [r4, #0]
 8010374:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8010378:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801037c:	d125      	bne.n	80103ca <_scanf_float+0x3c2>
 801037e:	9b02      	ldr	r3, [sp, #8]
 8010380:	429f      	cmp	r7, r3
 8010382:	d00a      	beq.n	801039a <_scanf_float+0x392>
 8010384:	1bda      	subs	r2, r3, r7
 8010386:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801038a:	429e      	cmp	r6, r3
 801038c:	bf28      	it	cs
 801038e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8010392:	4922      	ldr	r1, [pc, #136]	@ (801041c <_scanf_float+0x414>)
 8010394:	4630      	mov	r0, r6
 8010396:	f000 f907 	bl	80105a8 <siprintf>
 801039a:	9901      	ldr	r1, [sp, #4]
 801039c:	2200      	movs	r2, #0
 801039e:	4640      	mov	r0, r8
 80103a0:	f002 fb4e 	bl	8012a40 <_strtod_r>
 80103a4:	9b03      	ldr	r3, [sp, #12]
 80103a6:	6821      	ldr	r1, [r4, #0]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	f011 0f02 	tst.w	r1, #2
 80103ae:	ec57 6b10 	vmov	r6, r7, d0
 80103b2:	f103 0204 	add.w	r2, r3, #4
 80103b6:	d015      	beq.n	80103e4 <_scanf_float+0x3dc>
 80103b8:	9903      	ldr	r1, [sp, #12]
 80103ba:	600a      	str	r2, [r1, #0]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	e9c3 6700 	strd	r6, r7, [r3]
 80103c2:	68e3      	ldr	r3, [r4, #12]
 80103c4:	3301      	adds	r3, #1
 80103c6:	60e3      	str	r3, [r4, #12]
 80103c8:	e7d0      	b.n	801036c <_scanf_float+0x364>
 80103ca:	9b04      	ldr	r3, [sp, #16]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d0e4      	beq.n	801039a <_scanf_float+0x392>
 80103d0:	9905      	ldr	r1, [sp, #20]
 80103d2:	230a      	movs	r3, #10
 80103d4:	3101      	adds	r1, #1
 80103d6:	4640      	mov	r0, r8
 80103d8:	f002 fbb2 	bl	8012b40 <_strtol_r>
 80103dc:	9b04      	ldr	r3, [sp, #16]
 80103de:	9e05      	ldr	r6, [sp, #20]
 80103e0:	1ac2      	subs	r2, r0, r3
 80103e2:	e7d0      	b.n	8010386 <_scanf_float+0x37e>
 80103e4:	f011 0f04 	tst.w	r1, #4
 80103e8:	9903      	ldr	r1, [sp, #12]
 80103ea:	600a      	str	r2, [r1, #0]
 80103ec:	d1e6      	bne.n	80103bc <_scanf_float+0x3b4>
 80103ee:	681d      	ldr	r5, [r3, #0]
 80103f0:	4632      	mov	r2, r6
 80103f2:	463b      	mov	r3, r7
 80103f4:	4630      	mov	r0, r6
 80103f6:	4639      	mov	r1, r7
 80103f8:	f7f0 fba0 	bl	8000b3c <__aeabi_dcmpun>
 80103fc:	b128      	cbz	r0, 801040a <_scanf_float+0x402>
 80103fe:	4808      	ldr	r0, [pc, #32]	@ (8010420 <_scanf_float+0x418>)
 8010400:	f000 f9c8 	bl	8010794 <nanf>
 8010404:	ed85 0a00 	vstr	s0, [r5]
 8010408:	e7db      	b.n	80103c2 <_scanf_float+0x3ba>
 801040a:	4630      	mov	r0, r6
 801040c:	4639      	mov	r1, r7
 801040e:	f7f0 fbf3 	bl	8000bf8 <__aeabi_d2f>
 8010412:	6028      	str	r0, [r5, #0]
 8010414:	e7d5      	b.n	80103c2 <_scanf_float+0x3ba>
 8010416:	2700      	movs	r7, #0
 8010418:	e62e      	b.n	8010078 <_scanf_float+0x70>
 801041a:	bf00      	nop
 801041c:	08014d88 	.word	0x08014d88
 8010420:	08014ec9 	.word	0x08014ec9

08010424 <std>:
 8010424:	2300      	movs	r3, #0
 8010426:	b510      	push	{r4, lr}
 8010428:	4604      	mov	r4, r0
 801042a:	e9c0 3300 	strd	r3, r3, [r0]
 801042e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010432:	6083      	str	r3, [r0, #8]
 8010434:	8181      	strh	r1, [r0, #12]
 8010436:	6643      	str	r3, [r0, #100]	@ 0x64
 8010438:	81c2      	strh	r2, [r0, #14]
 801043a:	6183      	str	r3, [r0, #24]
 801043c:	4619      	mov	r1, r3
 801043e:	2208      	movs	r2, #8
 8010440:	305c      	adds	r0, #92	@ 0x5c
 8010442:	f000 f916 	bl	8010672 <memset>
 8010446:	4b0d      	ldr	r3, [pc, #52]	@ (801047c <std+0x58>)
 8010448:	6263      	str	r3, [r4, #36]	@ 0x24
 801044a:	4b0d      	ldr	r3, [pc, #52]	@ (8010480 <std+0x5c>)
 801044c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801044e:	4b0d      	ldr	r3, [pc, #52]	@ (8010484 <std+0x60>)
 8010450:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010452:	4b0d      	ldr	r3, [pc, #52]	@ (8010488 <std+0x64>)
 8010454:	6323      	str	r3, [r4, #48]	@ 0x30
 8010456:	4b0d      	ldr	r3, [pc, #52]	@ (801048c <std+0x68>)
 8010458:	6224      	str	r4, [r4, #32]
 801045a:	429c      	cmp	r4, r3
 801045c:	d006      	beq.n	801046c <std+0x48>
 801045e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010462:	4294      	cmp	r4, r2
 8010464:	d002      	beq.n	801046c <std+0x48>
 8010466:	33d0      	adds	r3, #208	@ 0xd0
 8010468:	429c      	cmp	r4, r3
 801046a:	d105      	bne.n	8010478 <std+0x54>
 801046c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010474:	f000 b98a 	b.w	801078c <__retarget_lock_init_recursive>
 8010478:	bd10      	pop	{r4, pc}
 801047a:	bf00      	nop
 801047c:	080105ed 	.word	0x080105ed
 8010480:	0801060f 	.word	0x0801060f
 8010484:	08010647 	.word	0x08010647
 8010488:	0801066b 	.word	0x0801066b
 801048c:	20001b50 	.word	0x20001b50

08010490 <stdio_exit_handler>:
 8010490:	4a02      	ldr	r2, [pc, #8]	@ (801049c <stdio_exit_handler+0xc>)
 8010492:	4903      	ldr	r1, [pc, #12]	@ (80104a0 <stdio_exit_handler+0x10>)
 8010494:	4803      	ldr	r0, [pc, #12]	@ (80104a4 <stdio_exit_handler+0x14>)
 8010496:	f000 b869 	b.w	801056c <_fwalk_sglue>
 801049a:	bf00      	nop
 801049c:	2000010c 	.word	0x2000010c
 80104a0:	08012efd 	.word	0x08012efd
 80104a4:	2000011c 	.word	0x2000011c

080104a8 <cleanup_stdio>:
 80104a8:	6841      	ldr	r1, [r0, #4]
 80104aa:	4b0c      	ldr	r3, [pc, #48]	@ (80104dc <cleanup_stdio+0x34>)
 80104ac:	4299      	cmp	r1, r3
 80104ae:	b510      	push	{r4, lr}
 80104b0:	4604      	mov	r4, r0
 80104b2:	d001      	beq.n	80104b8 <cleanup_stdio+0x10>
 80104b4:	f002 fd22 	bl	8012efc <_fflush_r>
 80104b8:	68a1      	ldr	r1, [r4, #8]
 80104ba:	4b09      	ldr	r3, [pc, #36]	@ (80104e0 <cleanup_stdio+0x38>)
 80104bc:	4299      	cmp	r1, r3
 80104be:	d002      	beq.n	80104c6 <cleanup_stdio+0x1e>
 80104c0:	4620      	mov	r0, r4
 80104c2:	f002 fd1b 	bl	8012efc <_fflush_r>
 80104c6:	68e1      	ldr	r1, [r4, #12]
 80104c8:	4b06      	ldr	r3, [pc, #24]	@ (80104e4 <cleanup_stdio+0x3c>)
 80104ca:	4299      	cmp	r1, r3
 80104cc:	d004      	beq.n	80104d8 <cleanup_stdio+0x30>
 80104ce:	4620      	mov	r0, r4
 80104d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104d4:	f002 bd12 	b.w	8012efc <_fflush_r>
 80104d8:	bd10      	pop	{r4, pc}
 80104da:	bf00      	nop
 80104dc:	20001b50 	.word	0x20001b50
 80104e0:	20001bb8 	.word	0x20001bb8
 80104e4:	20001c20 	.word	0x20001c20

080104e8 <global_stdio_init.part.0>:
 80104e8:	b510      	push	{r4, lr}
 80104ea:	4b0b      	ldr	r3, [pc, #44]	@ (8010518 <global_stdio_init.part.0+0x30>)
 80104ec:	4c0b      	ldr	r4, [pc, #44]	@ (801051c <global_stdio_init.part.0+0x34>)
 80104ee:	4a0c      	ldr	r2, [pc, #48]	@ (8010520 <global_stdio_init.part.0+0x38>)
 80104f0:	601a      	str	r2, [r3, #0]
 80104f2:	4620      	mov	r0, r4
 80104f4:	2200      	movs	r2, #0
 80104f6:	2104      	movs	r1, #4
 80104f8:	f7ff ff94 	bl	8010424 <std>
 80104fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010500:	2201      	movs	r2, #1
 8010502:	2109      	movs	r1, #9
 8010504:	f7ff ff8e 	bl	8010424 <std>
 8010508:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801050c:	2202      	movs	r2, #2
 801050e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010512:	2112      	movs	r1, #18
 8010514:	f7ff bf86 	b.w	8010424 <std>
 8010518:	20001c88 	.word	0x20001c88
 801051c:	20001b50 	.word	0x20001b50
 8010520:	08010491 	.word	0x08010491

08010524 <__sfp_lock_acquire>:
 8010524:	4801      	ldr	r0, [pc, #4]	@ (801052c <__sfp_lock_acquire+0x8>)
 8010526:	f000 b932 	b.w	801078e <__retarget_lock_acquire_recursive>
 801052a:	bf00      	nop
 801052c:	20001c91 	.word	0x20001c91

08010530 <__sfp_lock_release>:
 8010530:	4801      	ldr	r0, [pc, #4]	@ (8010538 <__sfp_lock_release+0x8>)
 8010532:	f000 b92d 	b.w	8010790 <__retarget_lock_release_recursive>
 8010536:	bf00      	nop
 8010538:	20001c91 	.word	0x20001c91

0801053c <__sinit>:
 801053c:	b510      	push	{r4, lr}
 801053e:	4604      	mov	r4, r0
 8010540:	f7ff fff0 	bl	8010524 <__sfp_lock_acquire>
 8010544:	6a23      	ldr	r3, [r4, #32]
 8010546:	b11b      	cbz	r3, 8010550 <__sinit+0x14>
 8010548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801054c:	f7ff bff0 	b.w	8010530 <__sfp_lock_release>
 8010550:	4b04      	ldr	r3, [pc, #16]	@ (8010564 <__sinit+0x28>)
 8010552:	6223      	str	r3, [r4, #32]
 8010554:	4b04      	ldr	r3, [pc, #16]	@ (8010568 <__sinit+0x2c>)
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d1f5      	bne.n	8010548 <__sinit+0xc>
 801055c:	f7ff ffc4 	bl	80104e8 <global_stdio_init.part.0>
 8010560:	e7f2      	b.n	8010548 <__sinit+0xc>
 8010562:	bf00      	nop
 8010564:	080104a9 	.word	0x080104a9
 8010568:	20001c88 	.word	0x20001c88

0801056c <_fwalk_sglue>:
 801056c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010570:	4607      	mov	r7, r0
 8010572:	4688      	mov	r8, r1
 8010574:	4614      	mov	r4, r2
 8010576:	2600      	movs	r6, #0
 8010578:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801057c:	f1b9 0901 	subs.w	r9, r9, #1
 8010580:	d505      	bpl.n	801058e <_fwalk_sglue+0x22>
 8010582:	6824      	ldr	r4, [r4, #0]
 8010584:	2c00      	cmp	r4, #0
 8010586:	d1f7      	bne.n	8010578 <_fwalk_sglue+0xc>
 8010588:	4630      	mov	r0, r6
 801058a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801058e:	89ab      	ldrh	r3, [r5, #12]
 8010590:	2b01      	cmp	r3, #1
 8010592:	d907      	bls.n	80105a4 <_fwalk_sglue+0x38>
 8010594:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010598:	3301      	adds	r3, #1
 801059a:	d003      	beq.n	80105a4 <_fwalk_sglue+0x38>
 801059c:	4629      	mov	r1, r5
 801059e:	4638      	mov	r0, r7
 80105a0:	47c0      	blx	r8
 80105a2:	4306      	orrs	r6, r0
 80105a4:	3568      	adds	r5, #104	@ 0x68
 80105a6:	e7e9      	b.n	801057c <_fwalk_sglue+0x10>

080105a8 <siprintf>:
 80105a8:	b40e      	push	{r1, r2, r3}
 80105aa:	b510      	push	{r4, lr}
 80105ac:	b09d      	sub	sp, #116	@ 0x74
 80105ae:	ab1f      	add	r3, sp, #124	@ 0x7c
 80105b0:	9002      	str	r0, [sp, #8]
 80105b2:	9006      	str	r0, [sp, #24]
 80105b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80105b8:	480a      	ldr	r0, [pc, #40]	@ (80105e4 <siprintf+0x3c>)
 80105ba:	9107      	str	r1, [sp, #28]
 80105bc:	9104      	str	r1, [sp, #16]
 80105be:	490a      	ldr	r1, [pc, #40]	@ (80105e8 <siprintf+0x40>)
 80105c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80105c4:	9105      	str	r1, [sp, #20]
 80105c6:	2400      	movs	r4, #0
 80105c8:	a902      	add	r1, sp, #8
 80105ca:	6800      	ldr	r0, [r0, #0]
 80105cc:	9301      	str	r3, [sp, #4]
 80105ce:	941b      	str	r4, [sp, #108]	@ 0x6c
 80105d0:	f002 fb14 	bl	8012bfc <_svfiprintf_r>
 80105d4:	9b02      	ldr	r3, [sp, #8]
 80105d6:	701c      	strb	r4, [r3, #0]
 80105d8:	b01d      	add	sp, #116	@ 0x74
 80105da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105de:	b003      	add	sp, #12
 80105e0:	4770      	bx	lr
 80105e2:	bf00      	nop
 80105e4:	20000118 	.word	0x20000118
 80105e8:	ffff0208 	.word	0xffff0208

080105ec <__sread>:
 80105ec:	b510      	push	{r4, lr}
 80105ee:	460c      	mov	r4, r1
 80105f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105f4:	f000 f86c 	bl	80106d0 <_read_r>
 80105f8:	2800      	cmp	r0, #0
 80105fa:	bfab      	itete	ge
 80105fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80105fe:	89a3      	ldrhlt	r3, [r4, #12]
 8010600:	181b      	addge	r3, r3, r0
 8010602:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010606:	bfac      	ite	ge
 8010608:	6563      	strge	r3, [r4, #84]	@ 0x54
 801060a:	81a3      	strhlt	r3, [r4, #12]
 801060c:	bd10      	pop	{r4, pc}

0801060e <__swrite>:
 801060e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010612:	461f      	mov	r7, r3
 8010614:	898b      	ldrh	r3, [r1, #12]
 8010616:	05db      	lsls	r3, r3, #23
 8010618:	4605      	mov	r5, r0
 801061a:	460c      	mov	r4, r1
 801061c:	4616      	mov	r6, r2
 801061e:	d505      	bpl.n	801062c <__swrite+0x1e>
 8010620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010624:	2302      	movs	r3, #2
 8010626:	2200      	movs	r2, #0
 8010628:	f000 f840 	bl	80106ac <_lseek_r>
 801062c:	89a3      	ldrh	r3, [r4, #12]
 801062e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010632:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010636:	81a3      	strh	r3, [r4, #12]
 8010638:	4632      	mov	r2, r6
 801063a:	463b      	mov	r3, r7
 801063c:	4628      	mov	r0, r5
 801063e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010642:	f000 b867 	b.w	8010714 <_write_r>

08010646 <__sseek>:
 8010646:	b510      	push	{r4, lr}
 8010648:	460c      	mov	r4, r1
 801064a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801064e:	f000 f82d 	bl	80106ac <_lseek_r>
 8010652:	1c43      	adds	r3, r0, #1
 8010654:	89a3      	ldrh	r3, [r4, #12]
 8010656:	bf15      	itete	ne
 8010658:	6560      	strne	r0, [r4, #84]	@ 0x54
 801065a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801065e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010662:	81a3      	strheq	r3, [r4, #12]
 8010664:	bf18      	it	ne
 8010666:	81a3      	strhne	r3, [r4, #12]
 8010668:	bd10      	pop	{r4, pc}

0801066a <__sclose>:
 801066a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801066e:	f000 b80d 	b.w	801068c <_close_r>

08010672 <memset>:
 8010672:	4402      	add	r2, r0
 8010674:	4603      	mov	r3, r0
 8010676:	4293      	cmp	r3, r2
 8010678:	d100      	bne.n	801067c <memset+0xa>
 801067a:	4770      	bx	lr
 801067c:	f803 1b01 	strb.w	r1, [r3], #1
 8010680:	e7f9      	b.n	8010676 <memset+0x4>
	...

08010684 <_localeconv_r>:
 8010684:	4800      	ldr	r0, [pc, #0]	@ (8010688 <_localeconv_r+0x4>)
 8010686:	4770      	bx	lr
 8010688:	20000258 	.word	0x20000258

0801068c <_close_r>:
 801068c:	b538      	push	{r3, r4, r5, lr}
 801068e:	4d06      	ldr	r5, [pc, #24]	@ (80106a8 <_close_r+0x1c>)
 8010690:	2300      	movs	r3, #0
 8010692:	4604      	mov	r4, r0
 8010694:	4608      	mov	r0, r1
 8010696:	602b      	str	r3, [r5, #0]
 8010698:	f7f3 f92b 	bl	80038f2 <_close>
 801069c:	1c43      	adds	r3, r0, #1
 801069e:	d102      	bne.n	80106a6 <_close_r+0x1a>
 80106a0:	682b      	ldr	r3, [r5, #0]
 80106a2:	b103      	cbz	r3, 80106a6 <_close_r+0x1a>
 80106a4:	6023      	str	r3, [r4, #0]
 80106a6:	bd38      	pop	{r3, r4, r5, pc}
 80106a8:	20001c8c 	.word	0x20001c8c

080106ac <_lseek_r>:
 80106ac:	b538      	push	{r3, r4, r5, lr}
 80106ae:	4d07      	ldr	r5, [pc, #28]	@ (80106cc <_lseek_r+0x20>)
 80106b0:	4604      	mov	r4, r0
 80106b2:	4608      	mov	r0, r1
 80106b4:	4611      	mov	r1, r2
 80106b6:	2200      	movs	r2, #0
 80106b8:	602a      	str	r2, [r5, #0]
 80106ba:	461a      	mov	r2, r3
 80106bc:	f7f3 f940 	bl	8003940 <_lseek>
 80106c0:	1c43      	adds	r3, r0, #1
 80106c2:	d102      	bne.n	80106ca <_lseek_r+0x1e>
 80106c4:	682b      	ldr	r3, [r5, #0]
 80106c6:	b103      	cbz	r3, 80106ca <_lseek_r+0x1e>
 80106c8:	6023      	str	r3, [r4, #0]
 80106ca:	bd38      	pop	{r3, r4, r5, pc}
 80106cc:	20001c8c 	.word	0x20001c8c

080106d0 <_read_r>:
 80106d0:	b538      	push	{r3, r4, r5, lr}
 80106d2:	4d07      	ldr	r5, [pc, #28]	@ (80106f0 <_read_r+0x20>)
 80106d4:	4604      	mov	r4, r0
 80106d6:	4608      	mov	r0, r1
 80106d8:	4611      	mov	r1, r2
 80106da:	2200      	movs	r2, #0
 80106dc:	602a      	str	r2, [r5, #0]
 80106de:	461a      	mov	r2, r3
 80106e0:	f7f3 f8ce 	bl	8003880 <_read>
 80106e4:	1c43      	adds	r3, r0, #1
 80106e6:	d102      	bne.n	80106ee <_read_r+0x1e>
 80106e8:	682b      	ldr	r3, [r5, #0]
 80106ea:	b103      	cbz	r3, 80106ee <_read_r+0x1e>
 80106ec:	6023      	str	r3, [r4, #0]
 80106ee:	bd38      	pop	{r3, r4, r5, pc}
 80106f0:	20001c8c 	.word	0x20001c8c

080106f4 <_sbrk_r>:
 80106f4:	b538      	push	{r3, r4, r5, lr}
 80106f6:	4d06      	ldr	r5, [pc, #24]	@ (8010710 <_sbrk_r+0x1c>)
 80106f8:	2300      	movs	r3, #0
 80106fa:	4604      	mov	r4, r0
 80106fc:	4608      	mov	r0, r1
 80106fe:	602b      	str	r3, [r5, #0]
 8010700:	f7f3 f92c 	bl	800395c <_sbrk>
 8010704:	1c43      	adds	r3, r0, #1
 8010706:	d102      	bne.n	801070e <_sbrk_r+0x1a>
 8010708:	682b      	ldr	r3, [r5, #0]
 801070a:	b103      	cbz	r3, 801070e <_sbrk_r+0x1a>
 801070c:	6023      	str	r3, [r4, #0]
 801070e:	bd38      	pop	{r3, r4, r5, pc}
 8010710:	20001c8c 	.word	0x20001c8c

08010714 <_write_r>:
 8010714:	b538      	push	{r3, r4, r5, lr}
 8010716:	4d07      	ldr	r5, [pc, #28]	@ (8010734 <_write_r+0x20>)
 8010718:	4604      	mov	r4, r0
 801071a:	4608      	mov	r0, r1
 801071c:	4611      	mov	r1, r2
 801071e:	2200      	movs	r2, #0
 8010720:	602a      	str	r2, [r5, #0]
 8010722:	461a      	mov	r2, r3
 8010724:	f7f3 f8c9 	bl	80038ba <_write>
 8010728:	1c43      	adds	r3, r0, #1
 801072a:	d102      	bne.n	8010732 <_write_r+0x1e>
 801072c:	682b      	ldr	r3, [r5, #0]
 801072e:	b103      	cbz	r3, 8010732 <_write_r+0x1e>
 8010730:	6023      	str	r3, [r4, #0]
 8010732:	bd38      	pop	{r3, r4, r5, pc}
 8010734:	20001c8c 	.word	0x20001c8c

08010738 <__errno>:
 8010738:	4b01      	ldr	r3, [pc, #4]	@ (8010740 <__errno+0x8>)
 801073a:	6818      	ldr	r0, [r3, #0]
 801073c:	4770      	bx	lr
 801073e:	bf00      	nop
 8010740:	20000118 	.word	0x20000118

08010744 <__libc_init_array>:
 8010744:	b570      	push	{r4, r5, r6, lr}
 8010746:	4d0d      	ldr	r5, [pc, #52]	@ (801077c <__libc_init_array+0x38>)
 8010748:	4c0d      	ldr	r4, [pc, #52]	@ (8010780 <__libc_init_array+0x3c>)
 801074a:	1b64      	subs	r4, r4, r5
 801074c:	10a4      	asrs	r4, r4, #2
 801074e:	2600      	movs	r6, #0
 8010750:	42a6      	cmp	r6, r4
 8010752:	d109      	bne.n	8010768 <__libc_init_array+0x24>
 8010754:	4d0b      	ldr	r5, [pc, #44]	@ (8010784 <__libc_init_array+0x40>)
 8010756:	4c0c      	ldr	r4, [pc, #48]	@ (8010788 <__libc_init_array+0x44>)
 8010758:	f003 fab0 	bl	8013cbc <_init>
 801075c:	1b64      	subs	r4, r4, r5
 801075e:	10a4      	asrs	r4, r4, #2
 8010760:	2600      	movs	r6, #0
 8010762:	42a6      	cmp	r6, r4
 8010764:	d105      	bne.n	8010772 <__libc_init_array+0x2e>
 8010766:	bd70      	pop	{r4, r5, r6, pc}
 8010768:	f855 3b04 	ldr.w	r3, [r5], #4
 801076c:	4798      	blx	r3
 801076e:	3601      	adds	r6, #1
 8010770:	e7ee      	b.n	8010750 <__libc_init_array+0xc>
 8010772:	f855 3b04 	ldr.w	r3, [r5], #4
 8010776:	4798      	blx	r3
 8010778:	3601      	adds	r6, #1
 801077a:	e7f2      	b.n	8010762 <__libc_init_array+0x1e>
 801077c:	08015184 	.word	0x08015184
 8010780:	08015184 	.word	0x08015184
 8010784:	08015184 	.word	0x08015184
 8010788:	08015188 	.word	0x08015188

0801078c <__retarget_lock_init_recursive>:
 801078c:	4770      	bx	lr

0801078e <__retarget_lock_acquire_recursive>:
 801078e:	4770      	bx	lr

08010790 <__retarget_lock_release_recursive>:
 8010790:	4770      	bx	lr
	...

08010794 <nanf>:
 8010794:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801079c <nanf+0x8>
 8010798:	4770      	bx	lr
 801079a:	bf00      	nop
 801079c:	7fc00000 	.word	0x7fc00000

080107a0 <quorem>:
 80107a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107a4:	6903      	ldr	r3, [r0, #16]
 80107a6:	690c      	ldr	r4, [r1, #16]
 80107a8:	42a3      	cmp	r3, r4
 80107aa:	4607      	mov	r7, r0
 80107ac:	db7e      	blt.n	80108ac <quorem+0x10c>
 80107ae:	3c01      	subs	r4, #1
 80107b0:	f101 0814 	add.w	r8, r1, #20
 80107b4:	00a3      	lsls	r3, r4, #2
 80107b6:	f100 0514 	add.w	r5, r0, #20
 80107ba:	9300      	str	r3, [sp, #0]
 80107bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80107c0:	9301      	str	r3, [sp, #4]
 80107c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80107c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80107ca:	3301      	adds	r3, #1
 80107cc:	429a      	cmp	r2, r3
 80107ce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80107d2:	fbb2 f6f3 	udiv	r6, r2, r3
 80107d6:	d32e      	bcc.n	8010836 <quorem+0x96>
 80107d8:	f04f 0a00 	mov.w	sl, #0
 80107dc:	46c4      	mov	ip, r8
 80107de:	46ae      	mov	lr, r5
 80107e0:	46d3      	mov	fp, sl
 80107e2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80107e6:	b298      	uxth	r0, r3
 80107e8:	fb06 a000 	mla	r0, r6, r0, sl
 80107ec:	0c02      	lsrs	r2, r0, #16
 80107ee:	0c1b      	lsrs	r3, r3, #16
 80107f0:	fb06 2303 	mla	r3, r6, r3, r2
 80107f4:	f8de 2000 	ldr.w	r2, [lr]
 80107f8:	b280      	uxth	r0, r0
 80107fa:	b292      	uxth	r2, r2
 80107fc:	1a12      	subs	r2, r2, r0
 80107fe:	445a      	add	r2, fp
 8010800:	f8de 0000 	ldr.w	r0, [lr]
 8010804:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010808:	b29b      	uxth	r3, r3
 801080a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801080e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010812:	b292      	uxth	r2, r2
 8010814:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010818:	45e1      	cmp	r9, ip
 801081a:	f84e 2b04 	str.w	r2, [lr], #4
 801081e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010822:	d2de      	bcs.n	80107e2 <quorem+0x42>
 8010824:	9b00      	ldr	r3, [sp, #0]
 8010826:	58eb      	ldr	r3, [r5, r3]
 8010828:	b92b      	cbnz	r3, 8010836 <quorem+0x96>
 801082a:	9b01      	ldr	r3, [sp, #4]
 801082c:	3b04      	subs	r3, #4
 801082e:	429d      	cmp	r5, r3
 8010830:	461a      	mov	r2, r3
 8010832:	d32f      	bcc.n	8010894 <quorem+0xf4>
 8010834:	613c      	str	r4, [r7, #16]
 8010836:	4638      	mov	r0, r7
 8010838:	f001 f910 	bl	8011a5c <__mcmp>
 801083c:	2800      	cmp	r0, #0
 801083e:	db25      	blt.n	801088c <quorem+0xec>
 8010840:	4629      	mov	r1, r5
 8010842:	2000      	movs	r0, #0
 8010844:	f858 2b04 	ldr.w	r2, [r8], #4
 8010848:	f8d1 c000 	ldr.w	ip, [r1]
 801084c:	fa1f fe82 	uxth.w	lr, r2
 8010850:	fa1f f38c 	uxth.w	r3, ip
 8010854:	eba3 030e 	sub.w	r3, r3, lr
 8010858:	4403      	add	r3, r0
 801085a:	0c12      	lsrs	r2, r2, #16
 801085c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010860:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010864:	b29b      	uxth	r3, r3
 8010866:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801086a:	45c1      	cmp	r9, r8
 801086c:	f841 3b04 	str.w	r3, [r1], #4
 8010870:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010874:	d2e6      	bcs.n	8010844 <quorem+0xa4>
 8010876:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801087a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801087e:	b922      	cbnz	r2, 801088a <quorem+0xea>
 8010880:	3b04      	subs	r3, #4
 8010882:	429d      	cmp	r5, r3
 8010884:	461a      	mov	r2, r3
 8010886:	d30b      	bcc.n	80108a0 <quorem+0x100>
 8010888:	613c      	str	r4, [r7, #16]
 801088a:	3601      	adds	r6, #1
 801088c:	4630      	mov	r0, r6
 801088e:	b003      	add	sp, #12
 8010890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010894:	6812      	ldr	r2, [r2, #0]
 8010896:	3b04      	subs	r3, #4
 8010898:	2a00      	cmp	r2, #0
 801089a:	d1cb      	bne.n	8010834 <quorem+0x94>
 801089c:	3c01      	subs	r4, #1
 801089e:	e7c6      	b.n	801082e <quorem+0x8e>
 80108a0:	6812      	ldr	r2, [r2, #0]
 80108a2:	3b04      	subs	r3, #4
 80108a4:	2a00      	cmp	r2, #0
 80108a6:	d1ef      	bne.n	8010888 <quorem+0xe8>
 80108a8:	3c01      	subs	r4, #1
 80108aa:	e7ea      	b.n	8010882 <quorem+0xe2>
 80108ac:	2000      	movs	r0, #0
 80108ae:	e7ee      	b.n	801088e <quorem+0xee>

080108b0 <_dtoa_r>:
 80108b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108b4:	69c7      	ldr	r7, [r0, #28]
 80108b6:	b097      	sub	sp, #92	@ 0x5c
 80108b8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80108bc:	ec55 4b10 	vmov	r4, r5, d0
 80108c0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80108c2:	9107      	str	r1, [sp, #28]
 80108c4:	4681      	mov	r9, r0
 80108c6:	920c      	str	r2, [sp, #48]	@ 0x30
 80108c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80108ca:	b97f      	cbnz	r7, 80108ec <_dtoa_r+0x3c>
 80108cc:	2010      	movs	r0, #16
 80108ce:	f7fe fe8f 	bl	800f5f0 <malloc>
 80108d2:	4602      	mov	r2, r0
 80108d4:	f8c9 001c 	str.w	r0, [r9, #28]
 80108d8:	b920      	cbnz	r0, 80108e4 <_dtoa_r+0x34>
 80108da:	4ba9      	ldr	r3, [pc, #676]	@ (8010b80 <_dtoa_r+0x2d0>)
 80108dc:	21ef      	movs	r1, #239	@ 0xef
 80108de:	48a9      	ldr	r0, [pc, #676]	@ (8010b84 <_dtoa_r+0x2d4>)
 80108e0:	f002 fb76 	bl	8012fd0 <__assert_func>
 80108e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80108e8:	6007      	str	r7, [r0, #0]
 80108ea:	60c7      	str	r7, [r0, #12]
 80108ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80108f0:	6819      	ldr	r1, [r3, #0]
 80108f2:	b159      	cbz	r1, 801090c <_dtoa_r+0x5c>
 80108f4:	685a      	ldr	r2, [r3, #4]
 80108f6:	604a      	str	r2, [r1, #4]
 80108f8:	2301      	movs	r3, #1
 80108fa:	4093      	lsls	r3, r2
 80108fc:	608b      	str	r3, [r1, #8]
 80108fe:	4648      	mov	r0, r9
 8010900:	f000 fe30 	bl	8011564 <_Bfree>
 8010904:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010908:	2200      	movs	r2, #0
 801090a:	601a      	str	r2, [r3, #0]
 801090c:	1e2b      	subs	r3, r5, #0
 801090e:	bfb9      	ittee	lt
 8010910:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010914:	9305      	strlt	r3, [sp, #20]
 8010916:	2300      	movge	r3, #0
 8010918:	6033      	strge	r3, [r6, #0]
 801091a:	9f05      	ldr	r7, [sp, #20]
 801091c:	4b9a      	ldr	r3, [pc, #616]	@ (8010b88 <_dtoa_r+0x2d8>)
 801091e:	bfbc      	itt	lt
 8010920:	2201      	movlt	r2, #1
 8010922:	6032      	strlt	r2, [r6, #0]
 8010924:	43bb      	bics	r3, r7
 8010926:	d112      	bne.n	801094e <_dtoa_r+0x9e>
 8010928:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801092a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801092e:	6013      	str	r3, [r2, #0]
 8010930:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010934:	4323      	orrs	r3, r4
 8010936:	f000 855a 	beq.w	80113ee <_dtoa_r+0xb3e>
 801093a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801093c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8010b9c <_dtoa_r+0x2ec>
 8010940:	2b00      	cmp	r3, #0
 8010942:	f000 855c 	beq.w	80113fe <_dtoa_r+0xb4e>
 8010946:	f10a 0303 	add.w	r3, sl, #3
 801094a:	f000 bd56 	b.w	80113fa <_dtoa_r+0xb4a>
 801094e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010952:	2200      	movs	r2, #0
 8010954:	ec51 0b17 	vmov	r0, r1, d7
 8010958:	2300      	movs	r3, #0
 801095a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801095e:	f7f0 f8bb 	bl	8000ad8 <__aeabi_dcmpeq>
 8010962:	4680      	mov	r8, r0
 8010964:	b158      	cbz	r0, 801097e <_dtoa_r+0xce>
 8010966:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010968:	2301      	movs	r3, #1
 801096a:	6013      	str	r3, [r2, #0]
 801096c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801096e:	b113      	cbz	r3, 8010976 <_dtoa_r+0xc6>
 8010970:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010972:	4b86      	ldr	r3, [pc, #536]	@ (8010b8c <_dtoa_r+0x2dc>)
 8010974:	6013      	str	r3, [r2, #0]
 8010976:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8010ba0 <_dtoa_r+0x2f0>
 801097a:	f000 bd40 	b.w	80113fe <_dtoa_r+0xb4e>
 801097e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8010982:	aa14      	add	r2, sp, #80	@ 0x50
 8010984:	a915      	add	r1, sp, #84	@ 0x54
 8010986:	4648      	mov	r0, r9
 8010988:	f001 f988 	bl	8011c9c <__d2b>
 801098c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010990:	9002      	str	r0, [sp, #8]
 8010992:	2e00      	cmp	r6, #0
 8010994:	d078      	beq.n	8010a88 <_dtoa_r+0x1d8>
 8010996:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010998:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801099c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80109a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80109a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80109a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80109ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80109b0:	4619      	mov	r1, r3
 80109b2:	2200      	movs	r2, #0
 80109b4:	4b76      	ldr	r3, [pc, #472]	@ (8010b90 <_dtoa_r+0x2e0>)
 80109b6:	f7ef fc6f 	bl	8000298 <__aeabi_dsub>
 80109ba:	a36b      	add	r3, pc, #428	@ (adr r3, 8010b68 <_dtoa_r+0x2b8>)
 80109bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109c0:	f7ef fe22 	bl	8000608 <__aeabi_dmul>
 80109c4:	a36a      	add	r3, pc, #424	@ (adr r3, 8010b70 <_dtoa_r+0x2c0>)
 80109c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ca:	f7ef fc67 	bl	800029c <__adddf3>
 80109ce:	4604      	mov	r4, r0
 80109d0:	4630      	mov	r0, r6
 80109d2:	460d      	mov	r5, r1
 80109d4:	f7ef fdae 	bl	8000534 <__aeabi_i2d>
 80109d8:	a367      	add	r3, pc, #412	@ (adr r3, 8010b78 <_dtoa_r+0x2c8>)
 80109da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109de:	f7ef fe13 	bl	8000608 <__aeabi_dmul>
 80109e2:	4602      	mov	r2, r0
 80109e4:	460b      	mov	r3, r1
 80109e6:	4620      	mov	r0, r4
 80109e8:	4629      	mov	r1, r5
 80109ea:	f7ef fc57 	bl	800029c <__adddf3>
 80109ee:	4604      	mov	r4, r0
 80109f0:	460d      	mov	r5, r1
 80109f2:	f7f0 f8b9 	bl	8000b68 <__aeabi_d2iz>
 80109f6:	2200      	movs	r2, #0
 80109f8:	4607      	mov	r7, r0
 80109fa:	2300      	movs	r3, #0
 80109fc:	4620      	mov	r0, r4
 80109fe:	4629      	mov	r1, r5
 8010a00:	f7f0 f874 	bl	8000aec <__aeabi_dcmplt>
 8010a04:	b140      	cbz	r0, 8010a18 <_dtoa_r+0x168>
 8010a06:	4638      	mov	r0, r7
 8010a08:	f7ef fd94 	bl	8000534 <__aeabi_i2d>
 8010a0c:	4622      	mov	r2, r4
 8010a0e:	462b      	mov	r3, r5
 8010a10:	f7f0 f862 	bl	8000ad8 <__aeabi_dcmpeq>
 8010a14:	b900      	cbnz	r0, 8010a18 <_dtoa_r+0x168>
 8010a16:	3f01      	subs	r7, #1
 8010a18:	2f16      	cmp	r7, #22
 8010a1a:	d852      	bhi.n	8010ac2 <_dtoa_r+0x212>
 8010a1c:	4b5d      	ldr	r3, [pc, #372]	@ (8010b94 <_dtoa_r+0x2e4>)
 8010a1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010a2a:	f7f0 f85f 	bl	8000aec <__aeabi_dcmplt>
 8010a2e:	2800      	cmp	r0, #0
 8010a30:	d049      	beq.n	8010ac6 <_dtoa_r+0x216>
 8010a32:	3f01      	subs	r7, #1
 8010a34:	2300      	movs	r3, #0
 8010a36:	9310      	str	r3, [sp, #64]	@ 0x40
 8010a38:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010a3a:	1b9b      	subs	r3, r3, r6
 8010a3c:	1e5a      	subs	r2, r3, #1
 8010a3e:	bf45      	ittet	mi
 8010a40:	f1c3 0301 	rsbmi	r3, r3, #1
 8010a44:	9300      	strmi	r3, [sp, #0]
 8010a46:	2300      	movpl	r3, #0
 8010a48:	2300      	movmi	r3, #0
 8010a4a:	9206      	str	r2, [sp, #24]
 8010a4c:	bf54      	ite	pl
 8010a4e:	9300      	strpl	r3, [sp, #0]
 8010a50:	9306      	strmi	r3, [sp, #24]
 8010a52:	2f00      	cmp	r7, #0
 8010a54:	db39      	blt.n	8010aca <_dtoa_r+0x21a>
 8010a56:	9b06      	ldr	r3, [sp, #24]
 8010a58:	970d      	str	r7, [sp, #52]	@ 0x34
 8010a5a:	443b      	add	r3, r7
 8010a5c:	9306      	str	r3, [sp, #24]
 8010a5e:	2300      	movs	r3, #0
 8010a60:	9308      	str	r3, [sp, #32]
 8010a62:	9b07      	ldr	r3, [sp, #28]
 8010a64:	2b09      	cmp	r3, #9
 8010a66:	d863      	bhi.n	8010b30 <_dtoa_r+0x280>
 8010a68:	2b05      	cmp	r3, #5
 8010a6a:	bfc4      	itt	gt
 8010a6c:	3b04      	subgt	r3, #4
 8010a6e:	9307      	strgt	r3, [sp, #28]
 8010a70:	9b07      	ldr	r3, [sp, #28]
 8010a72:	f1a3 0302 	sub.w	r3, r3, #2
 8010a76:	bfcc      	ite	gt
 8010a78:	2400      	movgt	r4, #0
 8010a7a:	2401      	movle	r4, #1
 8010a7c:	2b03      	cmp	r3, #3
 8010a7e:	d863      	bhi.n	8010b48 <_dtoa_r+0x298>
 8010a80:	e8df f003 	tbb	[pc, r3]
 8010a84:	2b375452 	.word	0x2b375452
 8010a88:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8010a8c:	441e      	add	r6, r3
 8010a8e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010a92:	2b20      	cmp	r3, #32
 8010a94:	bfc1      	itttt	gt
 8010a96:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010a9a:	409f      	lslgt	r7, r3
 8010a9c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010aa0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010aa4:	bfd6      	itet	le
 8010aa6:	f1c3 0320 	rsble	r3, r3, #32
 8010aaa:	ea47 0003 	orrgt.w	r0, r7, r3
 8010aae:	fa04 f003 	lslle.w	r0, r4, r3
 8010ab2:	f7ef fd2f 	bl	8000514 <__aeabi_ui2d>
 8010ab6:	2201      	movs	r2, #1
 8010ab8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010abc:	3e01      	subs	r6, #1
 8010abe:	9212      	str	r2, [sp, #72]	@ 0x48
 8010ac0:	e776      	b.n	80109b0 <_dtoa_r+0x100>
 8010ac2:	2301      	movs	r3, #1
 8010ac4:	e7b7      	b.n	8010a36 <_dtoa_r+0x186>
 8010ac6:	9010      	str	r0, [sp, #64]	@ 0x40
 8010ac8:	e7b6      	b.n	8010a38 <_dtoa_r+0x188>
 8010aca:	9b00      	ldr	r3, [sp, #0]
 8010acc:	1bdb      	subs	r3, r3, r7
 8010ace:	9300      	str	r3, [sp, #0]
 8010ad0:	427b      	negs	r3, r7
 8010ad2:	9308      	str	r3, [sp, #32]
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	930d      	str	r3, [sp, #52]	@ 0x34
 8010ad8:	e7c3      	b.n	8010a62 <_dtoa_r+0x1b2>
 8010ada:	2301      	movs	r3, #1
 8010adc:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ade:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010ae0:	eb07 0b03 	add.w	fp, r7, r3
 8010ae4:	f10b 0301 	add.w	r3, fp, #1
 8010ae8:	2b01      	cmp	r3, #1
 8010aea:	9303      	str	r3, [sp, #12]
 8010aec:	bfb8      	it	lt
 8010aee:	2301      	movlt	r3, #1
 8010af0:	e006      	b.n	8010b00 <_dtoa_r+0x250>
 8010af2:	2301      	movs	r3, #1
 8010af4:	9309      	str	r3, [sp, #36]	@ 0x24
 8010af6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	dd28      	ble.n	8010b4e <_dtoa_r+0x29e>
 8010afc:	469b      	mov	fp, r3
 8010afe:	9303      	str	r3, [sp, #12]
 8010b00:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8010b04:	2100      	movs	r1, #0
 8010b06:	2204      	movs	r2, #4
 8010b08:	f102 0514 	add.w	r5, r2, #20
 8010b0c:	429d      	cmp	r5, r3
 8010b0e:	d926      	bls.n	8010b5e <_dtoa_r+0x2ae>
 8010b10:	6041      	str	r1, [r0, #4]
 8010b12:	4648      	mov	r0, r9
 8010b14:	f000 fce6 	bl	80114e4 <_Balloc>
 8010b18:	4682      	mov	sl, r0
 8010b1a:	2800      	cmp	r0, #0
 8010b1c:	d142      	bne.n	8010ba4 <_dtoa_r+0x2f4>
 8010b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8010b98 <_dtoa_r+0x2e8>)
 8010b20:	4602      	mov	r2, r0
 8010b22:	f240 11af 	movw	r1, #431	@ 0x1af
 8010b26:	e6da      	b.n	80108de <_dtoa_r+0x2e>
 8010b28:	2300      	movs	r3, #0
 8010b2a:	e7e3      	b.n	8010af4 <_dtoa_r+0x244>
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	e7d5      	b.n	8010adc <_dtoa_r+0x22c>
 8010b30:	2401      	movs	r4, #1
 8010b32:	2300      	movs	r3, #0
 8010b34:	9307      	str	r3, [sp, #28]
 8010b36:	9409      	str	r4, [sp, #36]	@ 0x24
 8010b38:	f04f 3bff 	mov.w	fp, #4294967295
 8010b3c:	2200      	movs	r2, #0
 8010b3e:	f8cd b00c 	str.w	fp, [sp, #12]
 8010b42:	2312      	movs	r3, #18
 8010b44:	920c      	str	r2, [sp, #48]	@ 0x30
 8010b46:	e7db      	b.n	8010b00 <_dtoa_r+0x250>
 8010b48:	2301      	movs	r3, #1
 8010b4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b4c:	e7f4      	b.n	8010b38 <_dtoa_r+0x288>
 8010b4e:	f04f 0b01 	mov.w	fp, #1
 8010b52:	f8cd b00c 	str.w	fp, [sp, #12]
 8010b56:	465b      	mov	r3, fp
 8010b58:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8010b5c:	e7d0      	b.n	8010b00 <_dtoa_r+0x250>
 8010b5e:	3101      	adds	r1, #1
 8010b60:	0052      	lsls	r2, r2, #1
 8010b62:	e7d1      	b.n	8010b08 <_dtoa_r+0x258>
 8010b64:	f3af 8000 	nop.w
 8010b68:	636f4361 	.word	0x636f4361
 8010b6c:	3fd287a7 	.word	0x3fd287a7
 8010b70:	8b60c8b3 	.word	0x8b60c8b3
 8010b74:	3fc68a28 	.word	0x3fc68a28
 8010b78:	509f79fb 	.word	0x509f79fb
 8010b7c:	3fd34413 	.word	0x3fd34413
 8010b80:	08014d9a 	.word	0x08014d9a
 8010b84:	08014db1 	.word	0x08014db1
 8010b88:	7ff00000 	.word	0x7ff00000
 8010b8c:	08014d65 	.word	0x08014d65
 8010b90:	3ff80000 	.word	0x3ff80000
 8010b94:	08014f60 	.word	0x08014f60
 8010b98:	08014e09 	.word	0x08014e09
 8010b9c:	08014d96 	.word	0x08014d96
 8010ba0:	08014d64 	.word	0x08014d64
 8010ba4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010ba8:	6018      	str	r0, [r3, #0]
 8010baa:	9b03      	ldr	r3, [sp, #12]
 8010bac:	2b0e      	cmp	r3, #14
 8010bae:	f200 80a1 	bhi.w	8010cf4 <_dtoa_r+0x444>
 8010bb2:	2c00      	cmp	r4, #0
 8010bb4:	f000 809e 	beq.w	8010cf4 <_dtoa_r+0x444>
 8010bb8:	2f00      	cmp	r7, #0
 8010bba:	dd33      	ble.n	8010c24 <_dtoa_r+0x374>
 8010bbc:	4b9c      	ldr	r3, [pc, #624]	@ (8010e30 <_dtoa_r+0x580>)
 8010bbe:	f007 020f 	and.w	r2, r7, #15
 8010bc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010bc6:	ed93 7b00 	vldr	d7, [r3]
 8010bca:	05f8      	lsls	r0, r7, #23
 8010bcc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8010bd0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010bd4:	d516      	bpl.n	8010c04 <_dtoa_r+0x354>
 8010bd6:	4b97      	ldr	r3, [pc, #604]	@ (8010e34 <_dtoa_r+0x584>)
 8010bd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010bdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010be0:	f7ef fe3c 	bl	800085c <__aeabi_ddiv>
 8010be4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010be8:	f004 040f 	and.w	r4, r4, #15
 8010bec:	2603      	movs	r6, #3
 8010bee:	4d91      	ldr	r5, [pc, #580]	@ (8010e34 <_dtoa_r+0x584>)
 8010bf0:	b954      	cbnz	r4, 8010c08 <_dtoa_r+0x358>
 8010bf2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010bf6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010bfa:	f7ef fe2f 	bl	800085c <__aeabi_ddiv>
 8010bfe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010c02:	e028      	b.n	8010c56 <_dtoa_r+0x3a6>
 8010c04:	2602      	movs	r6, #2
 8010c06:	e7f2      	b.n	8010bee <_dtoa_r+0x33e>
 8010c08:	07e1      	lsls	r1, r4, #31
 8010c0a:	d508      	bpl.n	8010c1e <_dtoa_r+0x36e>
 8010c0c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010c10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010c14:	f7ef fcf8 	bl	8000608 <__aeabi_dmul>
 8010c18:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010c1c:	3601      	adds	r6, #1
 8010c1e:	1064      	asrs	r4, r4, #1
 8010c20:	3508      	adds	r5, #8
 8010c22:	e7e5      	b.n	8010bf0 <_dtoa_r+0x340>
 8010c24:	f000 80af 	beq.w	8010d86 <_dtoa_r+0x4d6>
 8010c28:	427c      	negs	r4, r7
 8010c2a:	4b81      	ldr	r3, [pc, #516]	@ (8010e30 <_dtoa_r+0x580>)
 8010c2c:	4d81      	ldr	r5, [pc, #516]	@ (8010e34 <_dtoa_r+0x584>)
 8010c2e:	f004 020f 	and.w	r2, r4, #15
 8010c32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010c3e:	f7ef fce3 	bl	8000608 <__aeabi_dmul>
 8010c42:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010c46:	1124      	asrs	r4, r4, #4
 8010c48:	2300      	movs	r3, #0
 8010c4a:	2602      	movs	r6, #2
 8010c4c:	2c00      	cmp	r4, #0
 8010c4e:	f040 808f 	bne.w	8010d70 <_dtoa_r+0x4c0>
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d1d3      	bne.n	8010bfe <_dtoa_r+0x34e>
 8010c56:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010c58:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	f000 8094 	beq.w	8010d8a <_dtoa_r+0x4da>
 8010c62:	4b75      	ldr	r3, [pc, #468]	@ (8010e38 <_dtoa_r+0x588>)
 8010c64:	2200      	movs	r2, #0
 8010c66:	4620      	mov	r0, r4
 8010c68:	4629      	mov	r1, r5
 8010c6a:	f7ef ff3f 	bl	8000aec <__aeabi_dcmplt>
 8010c6e:	2800      	cmp	r0, #0
 8010c70:	f000 808b 	beq.w	8010d8a <_dtoa_r+0x4da>
 8010c74:	9b03      	ldr	r3, [sp, #12]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	f000 8087 	beq.w	8010d8a <_dtoa_r+0x4da>
 8010c7c:	f1bb 0f00 	cmp.w	fp, #0
 8010c80:	dd34      	ble.n	8010cec <_dtoa_r+0x43c>
 8010c82:	4620      	mov	r0, r4
 8010c84:	4b6d      	ldr	r3, [pc, #436]	@ (8010e3c <_dtoa_r+0x58c>)
 8010c86:	2200      	movs	r2, #0
 8010c88:	4629      	mov	r1, r5
 8010c8a:	f7ef fcbd 	bl	8000608 <__aeabi_dmul>
 8010c8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010c92:	f107 38ff 	add.w	r8, r7, #4294967295
 8010c96:	3601      	adds	r6, #1
 8010c98:	465c      	mov	r4, fp
 8010c9a:	4630      	mov	r0, r6
 8010c9c:	f7ef fc4a 	bl	8000534 <__aeabi_i2d>
 8010ca0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010ca4:	f7ef fcb0 	bl	8000608 <__aeabi_dmul>
 8010ca8:	4b65      	ldr	r3, [pc, #404]	@ (8010e40 <_dtoa_r+0x590>)
 8010caa:	2200      	movs	r2, #0
 8010cac:	f7ef faf6 	bl	800029c <__adddf3>
 8010cb0:	4605      	mov	r5, r0
 8010cb2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010cb6:	2c00      	cmp	r4, #0
 8010cb8:	d16a      	bne.n	8010d90 <_dtoa_r+0x4e0>
 8010cba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010cbe:	4b61      	ldr	r3, [pc, #388]	@ (8010e44 <_dtoa_r+0x594>)
 8010cc0:	2200      	movs	r2, #0
 8010cc2:	f7ef fae9 	bl	8000298 <__aeabi_dsub>
 8010cc6:	4602      	mov	r2, r0
 8010cc8:	460b      	mov	r3, r1
 8010cca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010cce:	462a      	mov	r2, r5
 8010cd0:	4633      	mov	r3, r6
 8010cd2:	f7ef ff29 	bl	8000b28 <__aeabi_dcmpgt>
 8010cd6:	2800      	cmp	r0, #0
 8010cd8:	f040 8298 	bne.w	801120c <_dtoa_r+0x95c>
 8010cdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010ce0:	462a      	mov	r2, r5
 8010ce2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010ce6:	f7ef ff01 	bl	8000aec <__aeabi_dcmplt>
 8010cea:	bb38      	cbnz	r0, 8010d3c <_dtoa_r+0x48c>
 8010cec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8010cf0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8010cf4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	f2c0 8157 	blt.w	8010faa <_dtoa_r+0x6fa>
 8010cfc:	2f0e      	cmp	r7, #14
 8010cfe:	f300 8154 	bgt.w	8010faa <_dtoa_r+0x6fa>
 8010d02:	4b4b      	ldr	r3, [pc, #300]	@ (8010e30 <_dtoa_r+0x580>)
 8010d04:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010d08:	ed93 7b00 	vldr	d7, [r3]
 8010d0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	ed8d 7b00 	vstr	d7, [sp]
 8010d14:	f280 80e5 	bge.w	8010ee2 <_dtoa_r+0x632>
 8010d18:	9b03      	ldr	r3, [sp, #12]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	f300 80e1 	bgt.w	8010ee2 <_dtoa_r+0x632>
 8010d20:	d10c      	bne.n	8010d3c <_dtoa_r+0x48c>
 8010d22:	4b48      	ldr	r3, [pc, #288]	@ (8010e44 <_dtoa_r+0x594>)
 8010d24:	2200      	movs	r2, #0
 8010d26:	ec51 0b17 	vmov	r0, r1, d7
 8010d2a:	f7ef fc6d 	bl	8000608 <__aeabi_dmul>
 8010d2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010d32:	f7ef feef 	bl	8000b14 <__aeabi_dcmpge>
 8010d36:	2800      	cmp	r0, #0
 8010d38:	f000 8266 	beq.w	8011208 <_dtoa_r+0x958>
 8010d3c:	2400      	movs	r4, #0
 8010d3e:	4625      	mov	r5, r4
 8010d40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010d42:	4656      	mov	r6, sl
 8010d44:	ea6f 0803 	mvn.w	r8, r3
 8010d48:	2700      	movs	r7, #0
 8010d4a:	4621      	mov	r1, r4
 8010d4c:	4648      	mov	r0, r9
 8010d4e:	f000 fc09 	bl	8011564 <_Bfree>
 8010d52:	2d00      	cmp	r5, #0
 8010d54:	f000 80bd 	beq.w	8010ed2 <_dtoa_r+0x622>
 8010d58:	b12f      	cbz	r7, 8010d66 <_dtoa_r+0x4b6>
 8010d5a:	42af      	cmp	r7, r5
 8010d5c:	d003      	beq.n	8010d66 <_dtoa_r+0x4b6>
 8010d5e:	4639      	mov	r1, r7
 8010d60:	4648      	mov	r0, r9
 8010d62:	f000 fbff 	bl	8011564 <_Bfree>
 8010d66:	4629      	mov	r1, r5
 8010d68:	4648      	mov	r0, r9
 8010d6a:	f000 fbfb 	bl	8011564 <_Bfree>
 8010d6e:	e0b0      	b.n	8010ed2 <_dtoa_r+0x622>
 8010d70:	07e2      	lsls	r2, r4, #31
 8010d72:	d505      	bpl.n	8010d80 <_dtoa_r+0x4d0>
 8010d74:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010d78:	f7ef fc46 	bl	8000608 <__aeabi_dmul>
 8010d7c:	3601      	adds	r6, #1
 8010d7e:	2301      	movs	r3, #1
 8010d80:	1064      	asrs	r4, r4, #1
 8010d82:	3508      	adds	r5, #8
 8010d84:	e762      	b.n	8010c4c <_dtoa_r+0x39c>
 8010d86:	2602      	movs	r6, #2
 8010d88:	e765      	b.n	8010c56 <_dtoa_r+0x3a6>
 8010d8a:	9c03      	ldr	r4, [sp, #12]
 8010d8c:	46b8      	mov	r8, r7
 8010d8e:	e784      	b.n	8010c9a <_dtoa_r+0x3ea>
 8010d90:	4b27      	ldr	r3, [pc, #156]	@ (8010e30 <_dtoa_r+0x580>)
 8010d92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010d94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010d98:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010d9c:	4454      	add	r4, sl
 8010d9e:	2900      	cmp	r1, #0
 8010da0:	d054      	beq.n	8010e4c <_dtoa_r+0x59c>
 8010da2:	4929      	ldr	r1, [pc, #164]	@ (8010e48 <_dtoa_r+0x598>)
 8010da4:	2000      	movs	r0, #0
 8010da6:	f7ef fd59 	bl	800085c <__aeabi_ddiv>
 8010daa:	4633      	mov	r3, r6
 8010dac:	462a      	mov	r2, r5
 8010dae:	f7ef fa73 	bl	8000298 <__aeabi_dsub>
 8010db2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010db6:	4656      	mov	r6, sl
 8010db8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010dbc:	f7ef fed4 	bl	8000b68 <__aeabi_d2iz>
 8010dc0:	4605      	mov	r5, r0
 8010dc2:	f7ef fbb7 	bl	8000534 <__aeabi_i2d>
 8010dc6:	4602      	mov	r2, r0
 8010dc8:	460b      	mov	r3, r1
 8010dca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010dce:	f7ef fa63 	bl	8000298 <__aeabi_dsub>
 8010dd2:	3530      	adds	r5, #48	@ 0x30
 8010dd4:	4602      	mov	r2, r0
 8010dd6:	460b      	mov	r3, r1
 8010dd8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010ddc:	f806 5b01 	strb.w	r5, [r6], #1
 8010de0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010de4:	f7ef fe82 	bl	8000aec <__aeabi_dcmplt>
 8010de8:	2800      	cmp	r0, #0
 8010dea:	d172      	bne.n	8010ed2 <_dtoa_r+0x622>
 8010dec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010df0:	4911      	ldr	r1, [pc, #68]	@ (8010e38 <_dtoa_r+0x588>)
 8010df2:	2000      	movs	r0, #0
 8010df4:	f7ef fa50 	bl	8000298 <__aeabi_dsub>
 8010df8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010dfc:	f7ef fe76 	bl	8000aec <__aeabi_dcmplt>
 8010e00:	2800      	cmp	r0, #0
 8010e02:	f040 80b4 	bne.w	8010f6e <_dtoa_r+0x6be>
 8010e06:	42a6      	cmp	r6, r4
 8010e08:	f43f af70 	beq.w	8010cec <_dtoa_r+0x43c>
 8010e0c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010e10:	4b0a      	ldr	r3, [pc, #40]	@ (8010e3c <_dtoa_r+0x58c>)
 8010e12:	2200      	movs	r2, #0
 8010e14:	f7ef fbf8 	bl	8000608 <__aeabi_dmul>
 8010e18:	4b08      	ldr	r3, [pc, #32]	@ (8010e3c <_dtoa_r+0x58c>)
 8010e1a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010e1e:	2200      	movs	r2, #0
 8010e20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010e24:	f7ef fbf0 	bl	8000608 <__aeabi_dmul>
 8010e28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010e2c:	e7c4      	b.n	8010db8 <_dtoa_r+0x508>
 8010e2e:	bf00      	nop
 8010e30:	08014f60 	.word	0x08014f60
 8010e34:	08014f38 	.word	0x08014f38
 8010e38:	3ff00000 	.word	0x3ff00000
 8010e3c:	40240000 	.word	0x40240000
 8010e40:	401c0000 	.word	0x401c0000
 8010e44:	40140000 	.word	0x40140000
 8010e48:	3fe00000 	.word	0x3fe00000
 8010e4c:	4631      	mov	r1, r6
 8010e4e:	4628      	mov	r0, r5
 8010e50:	f7ef fbda 	bl	8000608 <__aeabi_dmul>
 8010e54:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010e58:	9413      	str	r4, [sp, #76]	@ 0x4c
 8010e5a:	4656      	mov	r6, sl
 8010e5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010e60:	f7ef fe82 	bl	8000b68 <__aeabi_d2iz>
 8010e64:	4605      	mov	r5, r0
 8010e66:	f7ef fb65 	bl	8000534 <__aeabi_i2d>
 8010e6a:	4602      	mov	r2, r0
 8010e6c:	460b      	mov	r3, r1
 8010e6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010e72:	f7ef fa11 	bl	8000298 <__aeabi_dsub>
 8010e76:	3530      	adds	r5, #48	@ 0x30
 8010e78:	f806 5b01 	strb.w	r5, [r6], #1
 8010e7c:	4602      	mov	r2, r0
 8010e7e:	460b      	mov	r3, r1
 8010e80:	42a6      	cmp	r6, r4
 8010e82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010e86:	f04f 0200 	mov.w	r2, #0
 8010e8a:	d124      	bne.n	8010ed6 <_dtoa_r+0x626>
 8010e8c:	4baf      	ldr	r3, [pc, #700]	@ (801114c <_dtoa_r+0x89c>)
 8010e8e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010e92:	f7ef fa03 	bl	800029c <__adddf3>
 8010e96:	4602      	mov	r2, r0
 8010e98:	460b      	mov	r3, r1
 8010e9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010e9e:	f7ef fe43 	bl	8000b28 <__aeabi_dcmpgt>
 8010ea2:	2800      	cmp	r0, #0
 8010ea4:	d163      	bne.n	8010f6e <_dtoa_r+0x6be>
 8010ea6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010eaa:	49a8      	ldr	r1, [pc, #672]	@ (801114c <_dtoa_r+0x89c>)
 8010eac:	2000      	movs	r0, #0
 8010eae:	f7ef f9f3 	bl	8000298 <__aeabi_dsub>
 8010eb2:	4602      	mov	r2, r0
 8010eb4:	460b      	mov	r3, r1
 8010eb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010eba:	f7ef fe17 	bl	8000aec <__aeabi_dcmplt>
 8010ebe:	2800      	cmp	r0, #0
 8010ec0:	f43f af14 	beq.w	8010cec <_dtoa_r+0x43c>
 8010ec4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8010ec6:	1e73      	subs	r3, r6, #1
 8010ec8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010eca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010ece:	2b30      	cmp	r3, #48	@ 0x30
 8010ed0:	d0f8      	beq.n	8010ec4 <_dtoa_r+0x614>
 8010ed2:	4647      	mov	r7, r8
 8010ed4:	e03b      	b.n	8010f4e <_dtoa_r+0x69e>
 8010ed6:	4b9e      	ldr	r3, [pc, #632]	@ (8011150 <_dtoa_r+0x8a0>)
 8010ed8:	f7ef fb96 	bl	8000608 <__aeabi_dmul>
 8010edc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010ee0:	e7bc      	b.n	8010e5c <_dtoa_r+0x5ac>
 8010ee2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010ee6:	4656      	mov	r6, sl
 8010ee8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010eec:	4620      	mov	r0, r4
 8010eee:	4629      	mov	r1, r5
 8010ef0:	f7ef fcb4 	bl	800085c <__aeabi_ddiv>
 8010ef4:	f7ef fe38 	bl	8000b68 <__aeabi_d2iz>
 8010ef8:	4680      	mov	r8, r0
 8010efa:	f7ef fb1b 	bl	8000534 <__aeabi_i2d>
 8010efe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f02:	f7ef fb81 	bl	8000608 <__aeabi_dmul>
 8010f06:	4602      	mov	r2, r0
 8010f08:	460b      	mov	r3, r1
 8010f0a:	4620      	mov	r0, r4
 8010f0c:	4629      	mov	r1, r5
 8010f0e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010f12:	f7ef f9c1 	bl	8000298 <__aeabi_dsub>
 8010f16:	f806 4b01 	strb.w	r4, [r6], #1
 8010f1a:	9d03      	ldr	r5, [sp, #12]
 8010f1c:	eba6 040a 	sub.w	r4, r6, sl
 8010f20:	42a5      	cmp	r5, r4
 8010f22:	4602      	mov	r2, r0
 8010f24:	460b      	mov	r3, r1
 8010f26:	d133      	bne.n	8010f90 <_dtoa_r+0x6e0>
 8010f28:	f7ef f9b8 	bl	800029c <__adddf3>
 8010f2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f30:	4604      	mov	r4, r0
 8010f32:	460d      	mov	r5, r1
 8010f34:	f7ef fdf8 	bl	8000b28 <__aeabi_dcmpgt>
 8010f38:	b9c0      	cbnz	r0, 8010f6c <_dtoa_r+0x6bc>
 8010f3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f3e:	4620      	mov	r0, r4
 8010f40:	4629      	mov	r1, r5
 8010f42:	f7ef fdc9 	bl	8000ad8 <__aeabi_dcmpeq>
 8010f46:	b110      	cbz	r0, 8010f4e <_dtoa_r+0x69e>
 8010f48:	f018 0f01 	tst.w	r8, #1
 8010f4c:	d10e      	bne.n	8010f6c <_dtoa_r+0x6bc>
 8010f4e:	9902      	ldr	r1, [sp, #8]
 8010f50:	4648      	mov	r0, r9
 8010f52:	f000 fb07 	bl	8011564 <_Bfree>
 8010f56:	2300      	movs	r3, #0
 8010f58:	7033      	strb	r3, [r6, #0]
 8010f5a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010f5c:	3701      	adds	r7, #1
 8010f5e:	601f      	str	r7, [r3, #0]
 8010f60:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	f000 824b 	beq.w	80113fe <_dtoa_r+0xb4e>
 8010f68:	601e      	str	r6, [r3, #0]
 8010f6a:	e248      	b.n	80113fe <_dtoa_r+0xb4e>
 8010f6c:	46b8      	mov	r8, r7
 8010f6e:	4633      	mov	r3, r6
 8010f70:	461e      	mov	r6, r3
 8010f72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010f76:	2a39      	cmp	r2, #57	@ 0x39
 8010f78:	d106      	bne.n	8010f88 <_dtoa_r+0x6d8>
 8010f7a:	459a      	cmp	sl, r3
 8010f7c:	d1f8      	bne.n	8010f70 <_dtoa_r+0x6c0>
 8010f7e:	2230      	movs	r2, #48	@ 0x30
 8010f80:	f108 0801 	add.w	r8, r8, #1
 8010f84:	f88a 2000 	strb.w	r2, [sl]
 8010f88:	781a      	ldrb	r2, [r3, #0]
 8010f8a:	3201      	adds	r2, #1
 8010f8c:	701a      	strb	r2, [r3, #0]
 8010f8e:	e7a0      	b.n	8010ed2 <_dtoa_r+0x622>
 8010f90:	4b6f      	ldr	r3, [pc, #444]	@ (8011150 <_dtoa_r+0x8a0>)
 8010f92:	2200      	movs	r2, #0
 8010f94:	f7ef fb38 	bl	8000608 <__aeabi_dmul>
 8010f98:	2200      	movs	r2, #0
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	4604      	mov	r4, r0
 8010f9e:	460d      	mov	r5, r1
 8010fa0:	f7ef fd9a 	bl	8000ad8 <__aeabi_dcmpeq>
 8010fa4:	2800      	cmp	r0, #0
 8010fa6:	d09f      	beq.n	8010ee8 <_dtoa_r+0x638>
 8010fa8:	e7d1      	b.n	8010f4e <_dtoa_r+0x69e>
 8010faa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010fac:	2a00      	cmp	r2, #0
 8010fae:	f000 80ea 	beq.w	8011186 <_dtoa_r+0x8d6>
 8010fb2:	9a07      	ldr	r2, [sp, #28]
 8010fb4:	2a01      	cmp	r2, #1
 8010fb6:	f300 80cd 	bgt.w	8011154 <_dtoa_r+0x8a4>
 8010fba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010fbc:	2a00      	cmp	r2, #0
 8010fbe:	f000 80c1 	beq.w	8011144 <_dtoa_r+0x894>
 8010fc2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010fc6:	9c08      	ldr	r4, [sp, #32]
 8010fc8:	9e00      	ldr	r6, [sp, #0]
 8010fca:	9a00      	ldr	r2, [sp, #0]
 8010fcc:	441a      	add	r2, r3
 8010fce:	9200      	str	r2, [sp, #0]
 8010fd0:	9a06      	ldr	r2, [sp, #24]
 8010fd2:	2101      	movs	r1, #1
 8010fd4:	441a      	add	r2, r3
 8010fd6:	4648      	mov	r0, r9
 8010fd8:	9206      	str	r2, [sp, #24]
 8010fda:	f000 fbc1 	bl	8011760 <__i2b>
 8010fde:	4605      	mov	r5, r0
 8010fe0:	b166      	cbz	r6, 8010ffc <_dtoa_r+0x74c>
 8010fe2:	9b06      	ldr	r3, [sp, #24]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	dd09      	ble.n	8010ffc <_dtoa_r+0x74c>
 8010fe8:	42b3      	cmp	r3, r6
 8010fea:	9a00      	ldr	r2, [sp, #0]
 8010fec:	bfa8      	it	ge
 8010fee:	4633      	movge	r3, r6
 8010ff0:	1ad2      	subs	r2, r2, r3
 8010ff2:	9200      	str	r2, [sp, #0]
 8010ff4:	9a06      	ldr	r2, [sp, #24]
 8010ff6:	1af6      	subs	r6, r6, r3
 8010ff8:	1ad3      	subs	r3, r2, r3
 8010ffa:	9306      	str	r3, [sp, #24]
 8010ffc:	9b08      	ldr	r3, [sp, #32]
 8010ffe:	b30b      	cbz	r3, 8011044 <_dtoa_r+0x794>
 8011000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011002:	2b00      	cmp	r3, #0
 8011004:	f000 80c6 	beq.w	8011194 <_dtoa_r+0x8e4>
 8011008:	2c00      	cmp	r4, #0
 801100a:	f000 80c0 	beq.w	801118e <_dtoa_r+0x8de>
 801100e:	4629      	mov	r1, r5
 8011010:	4622      	mov	r2, r4
 8011012:	4648      	mov	r0, r9
 8011014:	f000 fc5c 	bl	80118d0 <__pow5mult>
 8011018:	9a02      	ldr	r2, [sp, #8]
 801101a:	4601      	mov	r1, r0
 801101c:	4605      	mov	r5, r0
 801101e:	4648      	mov	r0, r9
 8011020:	f000 fbb4 	bl	801178c <__multiply>
 8011024:	9902      	ldr	r1, [sp, #8]
 8011026:	4680      	mov	r8, r0
 8011028:	4648      	mov	r0, r9
 801102a:	f000 fa9b 	bl	8011564 <_Bfree>
 801102e:	9b08      	ldr	r3, [sp, #32]
 8011030:	1b1b      	subs	r3, r3, r4
 8011032:	9308      	str	r3, [sp, #32]
 8011034:	f000 80b1 	beq.w	801119a <_dtoa_r+0x8ea>
 8011038:	9a08      	ldr	r2, [sp, #32]
 801103a:	4641      	mov	r1, r8
 801103c:	4648      	mov	r0, r9
 801103e:	f000 fc47 	bl	80118d0 <__pow5mult>
 8011042:	9002      	str	r0, [sp, #8]
 8011044:	2101      	movs	r1, #1
 8011046:	4648      	mov	r0, r9
 8011048:	f000 fb8a 	bl	8011760 <__i2b>
 801104c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801104e:	4604      	mov	r4, r0
 8011050:	2b00      	cmp	r3, #0
 8011052:	f000 81d8 	beq.w	8011406 <_dtoa_r+0xb56>
 8011056:	461a      	mov	r2, r3
 8011058:	4601      	mov	r1, r0
 801105a:	4648      	mov	r0, r9
 801105c:	f000 fc38 	bl	80118d0 <__pow5mult>
 8011060:	9b07      	ldr	r3, [sp, #28]
 8011062:	2b01      	cmp	r3, #1
 8011064:	4604      	mov	r4, r0
 8011066:	f300 809f 	bgt.w	80111a8 <_dtoa_r+0x8f8>
 801106a:	9b04      	ldr	r3, [sp, #16]
 801106c:	2b00      	cmp	r3, #0
 801106e:	f040 8097 	bne.w	80111a0 <_dtoa_r+0x8f0>
 8011072:	9b05      	ldr	r3, [sp, #20]
 8011074:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011078:	2b00      	cmp	r3, #0
 801107a:	f040 8093 	bne.w	80111a4 <_dtoa_r+0x8f4>
 801107e:	9b05      	ldr	r3, [sp, #20]
 8011080:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011084:	0d1b      	lsrs	r3, r3, #20
 8011086:	051b      	lsls	r3, r3, #20
 8011088:	b133      	cbz	r3, 8011098 <_dtoa_r+0x7e8>
 801108a:	9b00      	ldr	r3, [sp, #0]
 801108c:	3301      	adds	r3, #1
 801108e:	9300      	str	r3, [sp, #0]
 8011090:	9b06      	ldr	r3, [sp, #24]
 8011092:	3301      	adds	r3, #1
 8011094:	9306      	str	r3, [sp, #24]
 8011096:	2301      	movs	r3, #1
 8011098:	9308      	str	r3, [sp, #32]
 801109a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801109c:	2b00      	cmp	r3, #0
 801109e:	f000 81b8 	beq.w	8011412 <_dtoa_r+0xb62>
 80110a2:	6923      	ldr	r3, [r4, #16]
 80110a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80110a8:	6918      	ldr	r0, [r3, #16]
 80110aa:	f000 fb0d 	bl	80116c8 <__hi0bits>
 80110ae:	f1c0 0020 	rsb	r0, r0, #32
 80110b2:	9b06      	ldr	r3, [sp, #24]
 80110b4:	4418      	add	r0, r3
 80110b6:	f010 001f 	ands.w	r0, r0, #31
 80110ba:	f000 8082 	beq.w	80111c2 <_dtoa_r+0x912>
 80110be:	f1c0 0320 	rsb	r3, r0, #32
 80110c2:	2b04      	cmp	r3, #4
 80110c4:	dd73      	ble.n	80111ae <_dtoa_r+0x8fe>
 80110c6:	9b00      	ldr	r3, [sp, #0]
 80110c8:	f1c0 001c 	rsb	r0, r0, #28
 80110cc:	4403      	add	r3, r0
 80110ce:	9300      	str	r3, [sp, #0]
 80110d0:	9b06      	ldr	r3, [sp, #24]
 80110d2:	4403      	add	r3, r0
 80110d4:	4406      	add	r6, r0
 80110d6:	9306      	str	r3, [sp, #24]
 80110d8:	9b00      	ldr	r3, [sp, #0]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	dd05      	ble.n	80110ea <_dtoa_r+0x83a>
 80110de:	9902      	ldr	r1, [sp, #8]
 80110e0:	461a      	mov	r2, r3
 80110e2:	4648      	mov	r0, r9
 80110e4:	f000 fc4e 	bl	8011984 <__lshift>
 80110e8:	9002      	str	r0, [sp, #8]
 80110ea:	9b06      	ldr	r3, [sp, #24]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	dd05      	ble.n	80110fc <_dtoa_r+0x84c>
 80110f0:	4621      	mov	r1, r4
 80110f2:	461a      	mov	r2, r3
 80110f4:	4648      	mov	r0, r9
 80110f6:	f000 fc45 	bl	8011984 <__lshift>
 80110fa:	4604      	mov	r4, r0
 80110fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d061      	beq.n	80111c6 <_dtoa_r+0x916>
 8011102:	9802      	ldr	r0, [sp, #8]
 8011104:	4621      	mov	r1, r4
 8011106:	f000 fca9 	bl	8011a5c <__mcmp>
 801110a:	2800      	cmp	r0, #0
 801110c:	da5b      	bge.n	80111c6 <_dtoa_r+0x916>
 801110e:	2300      	movs	r3, #0
 8011110:	9902      	ldr	r1, [sp, #8]
 8011112:	220a      	movs	r2, #10
 8011114:	4648      	mov	r0, r9
 8011116:	f000 fa47 	bl	80115a8 <__multadd>
 801111a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801111c:	9002      	str	r0, [sp, #8]
 801111e:	f107 38ff 	add.w	r8, r7, #4294967295
 8011122:	2b00      	cmp	r3, #0
 8011124:	f000 8177 	beq.w	8011416 <_dtoa_r+0xb66>
 8011128:	4629      	mov	r1, r5
 801112a:	2300      	movs	r3, #0
 801112c:	220a      	movs	r2, #10
 801112e:	4648      	mov	r0, r9
 8011130:	f000 fa3a 	bl	80115a8 <__multadd>
 8011134:	f1bb 0f00 	cmp.w	fp, #0
 8011138:	4605      	mov	r5, r0
 801113a:	dc6f      	bgt.n	801121c <_dtoa_r+0x96c>
 801113c:	9b07      	ldr	r3, [sp, #28]
 801113e:	2b02      	cmp	r3, #2
 8011140:	dc49      	bgt.n	80111d6 <_dtoa_r+0x926>
 8011142:	e06b      	b.n	801121c <_dtoa_r+0x96c>
 8011144:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011146:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801114a:	e73c      	b.n	8010fc6 <_dtoa_r+0x716>
 801114c:	3fe00000 	.word	0x3fe00000
 8011150:	40240000 	.word	0x40240000
 8011154:	9b03      	ldr	r3, [sp, #12]
 8011156:	1e5c      	subs	r4, r3, #1
 8011158:	9b08      	ldr	r3, [sp, #32]
 801115a:	42a3      	cmp	r3, r4
 801115c:	db09      	blt.n	8011172 <_dtoa_r+0x8c2>
 801115e:	1b1c      	subs	r4, r3, r4
 8011160:	9b03      	ldr	r3, [sp, #12]
 8011162:	2b00      	cmp	r3, #0
 8011164:	f6bf af30 	bge.w	8010fc8 <_dtoa_r+0x718>
 8011168:	9b00      	ldr	r3, [sp, #0]
 801116a:	9a03      	ldr	r2, [sp, #12]
 801116c:	1a9e      	subs	r6, r3, r2
 801116e:	2300      	movs	r3, #0
 8011170:	e72b      	b.n	8010fca <_dtoa_r+0x71a>
 8011172:	9b08      	ldr	r3, [sp, #32]
 8011174:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011176:	9408      	str	r4, [sp, #32]
 8011178:	1ae3      	subs	r3, r4, r3
 801117a:	441a      	add	r2, r3
 801117c:	9e00      	ldr	r6, [sp, #0]
 801117e:	9b03      	ldr	r3, [sp, #12]
 8011180:	920d      	str	r2, [sp, #52]	@ 0x34
 8011182:	2400      	movs	r4, #0
 8011184:	e721      	b.n	8010fca <_dtoa_r+0x71a>
 8011186:	9c08      	ldr	r4, [sp, #32]
 8011188:	9e00      	ldr	r6, [sp, #0]
 801118a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801118c:	e728      	b.n	8010fe0 <_dtoa_r+0x730>
 801118e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011192:	e751      	b.n	8011038 <_dtoa_r+0x788>
 8011194:	9a08      	ldr	r2, [sp, #32]
 8011196:	9902      	ldr	r1, [sp, #8]
 8011198:	e750      	b.n	801103c <_dtoa_r+0x78c>
 801119a:	f8cd 8008 	str.w	r8, [sp, #8]
 801119e:	e751      	b.n	8011044 <_dtoa_r+0x794>
 80111a0:	2300      	movs	r3, #0
 80111a2:	e779      	b.n	8011098 <_dtoa_r+0x7e8>
 80111a4:	9b04      	ldr	r3, [sp, #16]
 80111a6:	e777      	b.n	8011098 <_dtoa_r+0x7e8>
 80111a8:	2300      	movs	r3, #0
 80111aa:	9308      	str	r3, [sp, #32]
 80111ac:	e779      	b.n	80110a2 <_dtoa_r+0x7f2>
 80111ae:	d093      	beq.n	80110d8 <_dtoa_r+0x828>
 80111b0:	9a00      	ldr	r2, [sp, #0]
 80111b2:	331c      	adds	r3, #28
 80111b4:	441a      	add	r2, r3
 80111b6:	9200      	str	r2, [sp, #0]
 80111b8:	9a06      	ldr	r2, [sp, #24]
 80111ba:	441a      	add	r2, r3
 80111bc:	441e      	add	r6, r3
 80111be:	9206      	str	r2, [sp, #24]
 80111c0:	e78a      	b.n	80110d8 <_dtoa_r+0x828>
 80111c2:	4603      	mov	r3, r0
 80111c4:	e7f4      	b.n	80111b0 <_dtoa_r+0x900>
 80111c6:	9b03      	ldr	r3, [sp, #12]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	46b8      	mov	r8, r7
 80111cc:	dc20      	bgt.n	8011210 <_dtoa_r+0x960>
 80111ce:	469b      	mov	fp, r3
 80111d0:	9b07      	ldr	r3, [sp, #28]
 80111d2:	2b02      	cmp	r3, #2
 80111d4:	dd1e      	ble.n	8011214 <_dtoa_r+0x964>
 80111d6:	f1bb 0f00 	cmp.w	fp, #0
 80111da:	f47f adb1 	bne.w	8010d40 <_dtoa_r+0x490>
 80111de:	4621      	mov	r1, r4
 80111e0:	465b      	mov	r3, fp
 80111e2:	2205      	movs	r2, #5
 80111e4:	4648      	mov	r0, r9
 80111e6:	f000 f9df 	bl	80115a8 <__multadd>
 80111ea:	4601      	mov	r1, r0
 80111ec:	4604      	mov	r4, r0
 80111ee:	9802      	ldr	r0, [sp, #8]
 80111f0:	f000 fc34 	bl	8011a5c <__mcmp>
 80111f4:	2800      	cmp	r0, #0
 80111f6:	f77f ada3 	ble.w	8010d40 <_dtoa_r+0x490>
 80111fa:	4656      	mov	r6, sl
 80111fc:	2331      	movs	r3, #49	@ 0x31
 80111fe:	f806 3b01 	strb.w	r3, [r6], #1
 8011202:	f108 0801 	add.w	r8, r8, #1
 8011206:	e59f      	b.n	8010d48 <_dtoa_r+0x498>
 8011208:	9c03      	ldr	r4, [sp, #12]
 801120a:	46b8      	mov	r8, r7
 801120c:	4625      	mov	r5, r4
 801120e:	e7f4      	b.n	80111fa <_dtoa_r+0x94a>
 8011210:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8011214:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011216:	2b00      	cmp	r3, #0
 8011218:	f000 8101 	beq.w	801141e <_dtoa_r+0xb6e>
 801121c:	2e00      	cmp	r6, #0
 801121e:	dd05      	ble.n	801122c <_dtoa_r+0x97c>
 8011220:	4629      	mov	r1, r5
 8011222:	4632      	mov	r2, r6
 8011224:	4648      	mov	r0, r9
 8011226:	f000 fbad 	bl	8011984 <__lshift>
 801122a:	4605      	mov	r5, r0
 801122c:	9b08      	ldr	r3, [sp, #32]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d05c      	beq.n	80112ec <_dtoa_r+0xa3c>
 8011232:	6869      	ldr	r1, [r5, #4]
 8011234:	4648      	mov	r0, r9
 8011236:	f000 f955 	bl	80114e4 <_Balloc>
 801123a:	4606      	mov	r6, r0
 801123c:	b928      	cbnz	r0, 801124a <_dtoa_r+0x99a>
 801123e:	4b82      	ldr	r3, [pc, #520]	@ (8011448 <_dtoa_r+0xb98>)
 8011240:	4602      	mov	r2, r0
 8011242:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011246:	f7ff bb4a 	b.w	80108de <_dtoa_r+0x2e>
 801124a:	692a      	ldr	r2, [r5, #16]
 801124c:	3202      	adds	r2, #2
 801124e:	0092      	lsls	r2, r2, #2
 8011250:	f105 010c 	add.w	r1, r5, #12
 8011254:	300c      	adds	r0, #12
 8011256:	f001 fea5 	bl	8012fa4 <memcpy>
 801125a:	2201      	movs	r2, #1
 801125c:	4631      	mov	r1, r6
 801125e:	4648      	mov	r0, r9
 8011260:	f000 fb90 	bl	8011984 <__lshift>
 8011264:	f10a 0301 	add.w	r3, sl, #1
 8011268:	9300      	str	r3, [sp, #0]
 801126a:	eb0a 030b 	add.w	r3, sl, fp
 801126e:	9308      	str	r3, [sp, #32]
 8011270:	9b04      	ldr	r3, [sp, #16]
 8011272:	f003 0301 	and.w	r3, r3, #1
 8011276:	462f      	mov	r7, r5
 8011278:	9306      	str	r3, [sp, #24]
 801127a:	4605      	mov	r5, r0
 801127c:	9b00      	ldr	r3, [sp, #0]
 801127e:	9802      	ldr	r0, [sp, #8]
 8011280:	4621      	mov	r1, r4
 8011282:	f103 3bff 	add.w	fp, r3, #4294967295
 8011286:	f7ff fa8b 	bl	80107a0 <quorem>
 801128a:	4603      	mov	r3, r0
 801128c:	3330      	adds	r3, #48	@ 0x30
 801128e:	9003      	str	r0, [sp, #12]
 8011290:	4639      	mov	r1, r7
 8011292:	9802      	ldr	r0, [sp, #8]
 8011294:	9309      	str	r3, [sp, #36]	@ 0x24
 8011296:	f000 fbe1 	bl	8011a5c <__mcmp>
 801129a:	462a      	mov	r2, r5
 801129c:	9004      	str	r0, [sp, #16]
 801129e:	4621      	mov	r1, r4
 80112a0:	4648      	mov	r0, r9
 80112a2:	f000 fbf7 	bl	8011a94 <__mdiff>
 80112a6:	68c2      	ldr	r2, [r0, #12]
 80112a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112aa:	4606      	mov	r6, r0
 80112ac:	bb02      	cbnz	r2, 80112f0 <_dtoa_r+0xa40>
 80112ae:	4601      	mov	r1, r0
 80112b0:	9802      	ldr	r0, [sp, #8]
 80112b2:	f000 fbd3 	bl	8011a5c <__mcmp>
 80112b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112b8:	4602      	mov	r2, r0
 80112ba:	4631      	mov	r1, r6
 80112bc:	4648      	mov	r0, r9
 80112be:	920c      	str	r2, [sp, #48]	@ 0x30
 80112c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80112c2:	f000 f94f 	bl	8011564 <_Bfree>
 80112c6:	9b07      	ldr	r3, [sp, #28]
 80112c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80112ca:	9e00      	ldr	r6, [sp, #0]
 80112cc:	ea42 0103 	orr.w	r1, r2, r3
 80112d0:	9b06      	ldr	r3, [sp, #24]
 80112d2:	4319      	orrs	r1, r3
 80112d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112d6:	d10d      	bne.n	80112f4 <_dtoa_r+0xa44>
 80112d8:	2b39      	cmp	r3, #57	@ 0x39
 80112da:	d027      	beq.n	801132c <_dtoa_r+0xa7c>
 80112dc:	9a04      	ldr	r2, [sp, #16]
 80112de:	2a00      	cmp	r2, #0
 80112e0:	dd01      	ble.n	80112e6 <_dtoa_r+0xa36>
 80112e2:	9b03      	ldr	r3, [sp, #12]
 80112e4:	3331      	adds	r3, #49	@ 0x31
 80112e6:	f88b 3000 	strb.w	r3, [fp]
 80112ea:	e52e      	b.n	8010d4a <_dtoa_r+0x49a>
 80112ec:	4628      	mov	r0, r5
 80112ee:	e7b9      	b.n	8011264 <_dtoa_r+0x9b4>
 80112f0:	2201      	movs	r2, #1
 80112f2:	e7e2      	b.n	80112ba <_dtoa_r+0xa0a>
 80112f4:	9904      	ldr	r1, [sp, #16]
 80112f6:	2900      	cmp	r1, #0
 80112f8:	db04      	blt.n	8011304 <_dtoa_r+0xa54>
 80112fa:	9807      	ldr	r0, [sp, #28]
 80112fc:	4301      	orrs	r1, r0
 80112fe:	9806      	ldr	r0, [sp, #24]
 8011300:	4301      	orrs	r1, r0
 8011302:	d120      	bne.n	8011346 <_dtoa_r+0xa96>
 8011304:	2a00      	cmp	r2, #0
 8011306:	ddee      	ble.n	80112e6 <_dtoa_r+0xa36>
 8011308:	9902      	ldr	r1, [sp, #8]
 801130a:	9300      	str	r3, [sp, #0]
 801130c:	2201      	movs	r2, #1
 801130e:	4648      	mov	r0, r9
 8011310:	f000 fb38 	bl	8011984 <__lshift>
 8011314:	4621      	mov	r1, r4
 8011316:	9002      	str	r0, [sp, #8]
 8011318:	f000 fba0 	bl	8011a5c <__mcmp>
 801131c:	2800      	cmp	r0, #0
 801131e:	9b00      	ldr	r3, [sp, #0]
 8011320:	dc02      	bgt.n	8011328 <_dtoa_r+0xa78>
 8011322:	d1e0      	bne.n	80112e6 <_dtoa_r+0xa36>
 8011324:	07da      	lsls	r2, r3, #31
 8011326:	d5de      	bpl.n	80112e6 <_dtoa_r+0xa36>
 8011328:	2b39      	cmp	r3, #57	@ 0x39
 801132a:	d1da      	bne.n	80112e2 <_dtoa_r+0xa32>
 801132c:	2339      	movs	r3, #57	@ 0x39
 801132e:	f88b 3000 	strb.w	r3, [fp]
 8011332:	4633      	mov	r3, r6
 8011334:	461e      	mov	r6, r3
 8011336:	3b01      	subs	r3, #1
 8011338:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801133c:	2a39      	cmp	r2, #57	@ 0x39
 801133e:	d04e      	beq.n	80113de <_dtoa_r+0xb2e>
 8011340:	3201      	adds	r2, #1
 8011342:	701a      	strb	r2, [r3, #0]
 8011344:	e501      	b.n	8010d4a <_dtoa_r+0x49a>
 8011346:	2a00      	cmp	r2, #0
 8011348:	dd03      	ble.n	8011352 <_dtoa_r+0xaa2>
 801134a:	2b39      	cmp	r3, #57	@ 0x39
 801134c:	d0ee      	beq.n	801132c <_dtoa_r+0xa7c>
 801134e:	3301      	adds	r3, #1
 8011350:	e7c9      	b.n	80112e6 <_dtoa_r+0xa36>
 8011352:	9a00      	ldr	r2, [sp, #0]
 8011354:	9908      	ldr	r1, [sp, #32]
 8011356:	f802 3c01 	strb.w	r3, [r2, #-1]
 801135a:	428a      	cmp	r2, r1
 801135c:	d028      	beq.n	80113b0 <_dtoa_r+0xb00>
 801135e:	9902      	ldr	r1, [sp, #8]
 8011360:	2300      	movs	r3, #0
 8011362:	220a      	movs	r2, #10
 8011364:	4648      	mov	r0, r9
 8011366:	f000 f91f 	bl	80115a8 <__multadd>
 801136a:	42af      	cmp	r7, r5
 801136c:	9002      	str	r0, [sp, #8]
 801136e:	f04f 0300 	mov.w	r3, #0
 8011372:	f04f 020a 	mov.w	r2, #10
 8011376:	4639      	mov	r1, r7
 8011378:	4648      	mov	r0, r9
 801137a:	d107      	bne.n	801138c <_dtoa_r+0xadc>
 801137c:	f000 f914 	bl	80115a8 <__multadd>
 8011380:	4607      	mov	r7, r0
 8011382:	4605      	mov	r5, r0
 8011384:	9b00      	ldr	r3, [sp, #0]
 8011386:	3301      	adds	r3, #1
 8011388:	9300      	str	r3, [sp, #0]
 801138a:	e777      	b.n	801127c <_dtoa_r+0x9cc>
 801138c:	f000 f90c 	bl	80115a8 <__multadd>
 8011390:	4629      	mov	r1, r5
 8011392:	4607      	mov	r7, r0
 8011394:	2300      	movs	r3, #0
 8011396:	220a      	movs	r2, #10
 8011398:	4648      	mov	r0, r9
 801139a:	f000 f905 	bl	80115a8 <__multadd>
 801139e:	4605      	mov	r5, r0
 80113a0:	e7f0      	b.n	8011384 <_dtoa_r+0xad4>
 80113a2:	f1bb 0f00 	cmp.w	fp, #0
 80113a6:	bfcc      	ite	gt
 80113a8:	465e      	movgt	r6, fp
 80113aa:	2601      	movle	r6, #1
 80113ac:	4456      	add	r6, sl
 80113ae:	2700      	movs	r7, #0
 80113b0:	9902      	ldr	r1, [sp, #8]
 80113b2:	9300      	str	r3, [sp, #0]
 80113b4:	2201      	movs	r2, #1
 80113b6:	4648      	mov	r0, r9
 80113b8:	f000 fae4 	bl	8011984 <__lshift>
 80113bc:	4621      	mov	r1, r4
 80113be:	9002      	str	r0, [sp, #8]
 80113c0:	f000 fb4c 	bl	8011a5c <__mcmp>
 80113c4:	2800      	cmp	r0, #0
 80113c6:	dcb4      	bgt.n	8011332 <_dtoa_r+0xa82>
 80113c8:	d102      	bne.n	80113d0 <_dtoa_r+0xb20>
 80113ca:	9b00      	ldr	r3, [sp, #0]
 80113cc:	07db      	lsls	r3, r3, #31
 80113ce:	d4b0      	bmi.n	8011332 <_dtoa_r+0xa82>
 80113d0:	4633      	mov	r3, r6
 80113d2:	461e      	mov	r6, r3
 80113d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80113d8:	2a30      	cmp	r2, #48	@ 0x30
 80113da:	d0fa      	beq.n	80113d2 <_dtoa_r+0xb22>
 80113dc:	e4b5      	b.n	8010d4a <_dtoa_r+0x49a>
 80113de:	459a      	cmp	sl, r3
 80113e0:	d1a8      	bne.n	8011334 <_dtoa_r+0xa84>
 80113e2:	2331      	movs	r3, #49	@ 0x31
 80113e4:	f108 0801 	add.w	r8, r8, #1
 80113e8:	f88a 3000 	strb.w	r3, [sl]
 80113ec:	e4ad      	b.n	8010d4a <_dtoa_r+0x49a>
 80113ee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80113f0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801144c <_dtoa_r+0xb9c>
 80113f4:	b11b      	cbz	r3, 80113fe <_dtoa_r+0xb4e>
 80113f6:	f10a 0308 	add.w	r3, sl, #8
 80113fa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80113fc:	6013      	str	r3, [r2, #0]
 80113fe:	4650      	mov	r0, sl
 8011400:	b017      	add	sp, #92	@ 0x5c
 8011402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011406:	9b07      	ldr	r3, [sp, #28]
 8011408:	2b01      	cmp	r3, #1
 801140a:	f77f ae2e 	ble.w	801106a <_dtoa_r+0x7ba>
 801140e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011410:	9308      	str	r3, [sp, #32]
 8011412:	2001      	movs	r0, #1
 8011414:	e64d      	b.n	80110b2 <_dtoa_r+0x802>
 8011416:	f1bb 0f00 	cmp.w	fp, #0
 801141a:	f77f aed9 	ble.w	80111d0 <_dtoa_r+0x920>
 801141e:	4656      	mov	r6, sl
 8011420:	9802      	ldr	r0, [sp, #8]
 8011422:	4621      	mov	r1, r4
 8011424:	f7ff f9bc 	bl	80107a0 <quorem>
 8011428:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801142c:	f806 3b01 	strb.w	r3, [r6], #1
 8011430:	eba6 020a 	sub.w	r2, r6, sl
 8011434:	4593      	cmp	fp, r2
 8011436:	ddb4      	ble.n	80113a2 <_dtoa_r+0xaf2>
 8011438:	9902      	ldr	r1, [sp, #8]
 801143a:	2300      	movs	r3, #0
 801143c:	220a      	movs	r2, #10
 801143e:	4648      	mov	r0, r9
 8011440:	f000 f8b2 	bl	80115a8 <__multadd>
 8011444:	9002      	str	r0, [sp, #8]
 8011446:	e7eb      	b.n	8011420 <_dtoa_r+0xb70>
 8011448:	08014e09 	.word	0x08014e09
 801144c:	08014d8d 	.word	0x08014d8d

08011450 <_free_r>:
 8011450:	b538      	push	{r3, r4, r5, lr}
 8011452:	4605      	mov	r5, r0
 8011454:	2900      	cmp	r1, #0
 8011456:	d041      	beq.n	80114dc <_free_r+0x8c>
 8011458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801145c:	1f0c      	subs	r4, r1, #4
 801145e:	2b00      	cmp	r3, #0
 8011460:	bfb8      	it	lt
 8011462:	18e4      	addlt	r4, r4, r3
 8011464:	f7fe f96e 	bl	800f744 <__malloc_lock>
 8011468:	4a1d      	ldr	r2, [pc, #116]	@ (80114e0 <_free_r+0x90>)
 801146a:	6813      	ldr	r3, [r2, #0]
 801146c:	b933      	cbnz	r3, 801147c <_free_r+0x2c>
 801146e:	6063      	str	r3, [r4, #4]
 8011470:	6014      	str	r4, [r2, #0]
 8011472:	4628      	mov	r0, r5
 8011474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011478:	f7fe b96a 	b.w	800f750 <__malloc_unlock>
 801147c:	42a3      	cmp	r3, r4
 801147e:	d908      	bls.n	8011492 <_free_r+0x42>
 8011480:	6820      	ldr	r0, [r4, #0]
 8011482:	1821      	adds	r1, r4, r0
 8011484:	428b      	cmp	r3, r1
 8011486:	bf01      	itttt	eq
 8011488:	6819      	ldreq	r1, [r3, #0]
 801148a:	685b      	ldreq	r3, [r3, #4]
 801148c:	1809      	addeq	r1, r1, r0
 801148e:	6021      	streq	r1, [r4, #0]
 8011490:	e7ed      	b.n	801146e <_free_r+0x1e>
 8011492:	461a      	mov	r2, r3
 8011494:	685b      	ldr	r3, [r3, #4]
 8011496:	b10b      	cbz	r3, 801149c <_free_r+0x4c>
 8011498:	42a3      	cmp	r3, r4
 801149a:	d9fa      	bls.n	8011492 <_free_r+0x42>
 801149c:	6811      	ldr	r1, [r2, #0]
 801149e:	1850      	adds	r0, r2, r1
 80114a0:	42a0      	cmp	r0, r4
 80114a2:	d10b      	bne.n	80114bc <_free_r+0x6c>
 80114a4:	6820      	ldr	r0, [r4, #0]
 80114a6:	4401      	add	r1, r0
 80114a8:	1850      	adds	r0, r2, r1
 80114aa:	4283      	cmp	r3, r0
 80114ac:	6011      	str	r1, [r2, #0]
 80114ae:	d1e0      	bne.n	8011472 <_free_r+0x22>
 80114b0:	6818      	ldr	r0, [r3, #0]
 80114b2:	685b      	ldr	r3, [r3, #4]
 80114b4:	6053      	str	r3, [r2, #4]
 80114b6:	4408      	add	r0, r1
 80114b8:	6010      	str	r0, [r2, #0]
 80114ba:	e7da      	b.n	8011472 <_free_r+0x22>
 80114bc:	d902      	bls.n	80114c4 <_free_r+0x74>
 80114be:	230c      	movs	r3, #12
 80114c0:	602b      	str	r3, [r5, #0]
 80114c2:	e7d6      	b.n	8011472 <_free_r+0x22>
 80114c4:	6820      	ldr	r0, [r4, #0]
 80114c6:	1821      	adds	r1, r4, r0
 80114c8:	428b      	cmp	r3, r1
 80114ca:	bf04      	itt	eq
 80114cc:	6819      	ldreq	r1, [r3, #0]
 80114ce:	685b      	ldreq	r3, [r3, #4]
 80114d0:	6063      	str	r3, [r4, #4]
 80114d2:	bf04      	itt	eq
 80114d4:	1809      	addeq	r1, r1, r0
 80114d6:	6021      	streq	r1, [r4, #0]
 80114d8:	6054      	str	r4, [r2, #4]
 80114da:	e7ca      	b.n	8011472 <_free_r+0x22>
 80114dc:	bd38      	pop	{r3, r4, r5, pc}
 80114de:	bf00      	nop
 80114e0:	20001b4c 	.word	0x20001b4c

080114e4 <_Balloc>:
 80114e4:	b570      	push	{r4, r5, r6, lr}
 80114e6:	69c6      	ldr	r6, [r0, #28]
 80114e8:	4604      	mov	r4, r0
 80114ea:	460d      	mov	r5, r1
 80114ec:	b976      	cbnz	r6, 801150c <_Balloc+0x28>
 80114ee:	2010      	movs	r0, #16
 80114f0:	f7fe f87e 	bl	800f5f0 <malloc>
 80114f4:	4602      	mov	r2, r0
 80114f6:	61e0      	str	r0, [r4, #28]
 80114f8:	b920      	cbnz	r0, 8011504 <_Balloc+0x20>
 80114fa:	4b18      	ldr	r3, [pc, #96]	@ (801155c <_Balloc+0x78>)
 80114fc:	4818      	ldr	r0, [pc, #96]	@ (8011560 <_Balloc+0x7c>)
 80114fe:	216b      	movs	r1, #107	@ 0x6b
 8011500:	f001 fd66 	bl	8012fd0 <__assert_func>
 8011504:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011508:	6006      	str	r6, [r0, #0]
 801150a:	60c6      	str	r6, [r0, #12]
 801150c:	69e6      	ldr	r6, [r4, #28]
 801150e:	68f3      	ldr	r3, [r6, #12]
 8011510:	b183      	cbz	r3, 8011534 <_Balloc+0x50>
 8011512:	69e3      	ldr	r3, [r4, #28]
 8011514:	68db      	ldr	r3, [r3, #12]
 8011516:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801151a:	b9b8      	cbnz	r0, 801154c <_Balloc+0x68>
 801151c:	2101      	movs	r1, #1
 801151e:	fa01 f605 	lsl.w	r6, r1, r5
 8011522:	1d72      	adds	r2, r6, #5
 8011524:	0092      	lsls	r2, r2, #2
 8011526:	4620      	mov	r0, r4
 8011528:	f001 fd70 	bl	801300c <_calloc_r>
 801152c:	b160      	cbz	r0, 8011548 <_Balloc+0x64>
 801152e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011532:	e00e      	b.n	8011552 <_Balloc+0x6e>
 8011534:	2221      	movs	r2, #33	@ 0x21
 8011536:	2104      	movs	r1, #4
 8011538:	4620      	mov	r0, r4
 801153a:	f001 fd67 	bl	801300c <_calloc_r>
 801153e:	69e3      	ldr	r3, [r4, #28]
 8011540:	60f0      	str	r0, [r6, #12]
 8011542:	68db      	ldr	r3, [r3, #12]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d1e4      	bne.n	8011512 <_Balloc+0x2e>
 8011548:	2000      	movs	r0, #0
 801154a:	bd70      	pop	{r4, r5, r6, pc}
 801154c:	6802      	ldr	r2, [r0, #0]
 801154e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011552:	2300      	movs	r3, #0
 8011554:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011558:	e7f7      	b.n	801154a <_Balloc+0x66>
 801155a:	bf00      	nop
 801155c:	08014d9a 	.word	0x08014d9a
 8011560:	08014e1a 	.word	0x08014e1a

08011564 <_Bfree>:
 8011564:	b570      	push	{r4, r5, r6, lr}
 8011566:	69c6      	ldr	r6, [r0, #28]
 8011568:	4605      	mov	r5, r0
 801156a:	460c      	mov	r4, r1
 801156c:	b976      	cbnz	r6, 801158c <_Bfree+0x28>
 801156e:	2010      	movs	r0, #16
 8011570:	f7fe f83e 	bl	800f5f0 <malloc>
 8011574:	4602      	mov	r2, r0
 8011576:	61e8      	str	r0, [r5, #28]
 8011578:	b920      	cbnz	r0, 8011584 <_Bfree+0x20>
 801157a:	4b09      	ldr	r3, [pc, #36]	@ (80115a0 <_Bfree+0x3c>)
 801157c:	4809      	ldr	r0, [pc, #36]	@ (80115a4 <_Bfree+0x40>)
 801157e:	218f      	movs	r1, #143	@ 0x8f
 8011580:	f001 fd26 	bl	8012fd0 <__assert_func>
 8011584:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011588:	6006      	str	r6, [r0, #0]
 801158a:	60c6      	str	r6, [r0, #12]
 801158c:	b13c      	cbz	r4, 801159e <_Bfree+0x3a>
 801158e:	69eb      	ldr	r3, [r5, #28]
 8011590:	6862      	ldr	r2, [r4, #4]
 8011592:	68db      	ldr	r3, [r3, #12]
 8011594:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011598:	6021      	str	r1, [r4, #0]
 801159a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801159e:	bd70      	pop	{r4, r5, r6, pc}
 80115a0:	08014d9a 	.word	0x08014d9a
 80115a4:	08014e1a 	.word	0x08014e1a

080115a8 <__multadd>:
 80115a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115ac:	690d      	ldr	r5, [r1, #16]
 80115ae:	4607      	mov	r7, r0
 80115b0:	460c      	mov	r4, r1
 80115b2:	461e      	mov	r6, r3
 80115b4:	f101 0c14 	add.w	ip, r1, #20
 80115b8:	2000      	movs	r0, #0
 80115ba:	f8dc 3000 	ldr.w	r3, [ip]
 80115be:	b299      	uxth	r1, r3
 80115c0:	fb02 6101 	mla	r1, r2, r1, r6
 80115c4:	0c1e      	lsrs	r6, r3, #16
 80115c6:	0c0b      	lsrs	r3, r1, #16
 80115c8:	fb02 3306 	mla	r3, r2, r6, r3
 80115cc:	b289      	uxth	r1, r1
 80115ce:	3001      	adds	r0, #1
 80115d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80115d4:	4285      	cmp	r5, r0
 80115d6:	f84c 1b04 	str.w	r1, [ip], #4
 80115da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80115de:	dcec      	bgt.n	80115ba <__multadd+0x12>
 80115e0:	b30e      	cbz	r6, 8011626 <__multadd+0x7e>
 80115e2:	68a3      	ldr	r3, [r4, #8]
 80115e4:	42ab      	cmp	r3, r5
 80115e6:	dc19      	bgt.n	801161c <__multadd+0x74>
 80115e8:	6861      	ldr	r1, [r4, #4]
 80115ea:	4638      	mov	r0, r7
 80115ec:	3101      	adds	r1, #1
 80115ee:	f7ff ff79 	bl	80114e4 <_Balloc>
 80115f2:	4680      	mov	r8, r0
 80115f4:	b928      	cbnz	r0, 8011602 <__multadd+0x5a>
 80115f6:	4602      	mov	r2, r0
 80115f8:	4b0c      	ldr	r3, [pc, #48]	@ (801162c <__multadd+0x84>)
 80115fa:	480d      	ldr	r0, [pc, #52]	@ (8011630 <__multadd+0x88>)
 80115fc:	21ba      	movs	r1, #186	@ 0xba
 80115fe:	f001 fce7 	bl	8012fd0 <__assert_func>
 8011602:	6922      	ldr	r2, [r4, #16]
 8011604:	3202      	adds	r2, #2
 8011606:	f104 010c 	add.w	r1, r4, #12
 801160a:	0092      	lsls	r2, r2, #2
 801160c:	300c      	adds	r0, #12
 801160e:	f001 fcc9 	bl	8012fa4 <memcpy>
 8011612:	4621      	mov	r1, r4
 8011614:	4638      	mov	r0, r7
 8011616:	f7ff ffa5 	bl	8011564 <_Bfree>
 801161a:	4644      	mov	r4, r8
 801161c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011620:	3501      	adds	r5, #1
 8011622:	615e      	str	r6, [r3, #20]
 8011624:	6125      	str	r5, [r4, #16]
 8011626:	4620      	mov	r0, r4
 8011628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801162c:	08014e09 	.word	0x08014e09
 8011630:	08014e1a 	.word	0x08014e1a

08011634 <__s2b>:
 8011634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011638:	460c      	mov	r4, r1
 801163a:	4615      	mov	r5, r2
 801163c:	461f      	mov	r7, r3
 801163e:	2209      	movs	r2, #9
 8011640:	3308      	adds	r3, #8
 8011642:	4606      	mov	r6, r0
 8011644:	fb93 f3f2 	sdiv	r3, r3, r2
 8011648:	2100      	movs	r1, #0
 801164a:	2201      	movs	r2, #1
 801164c:	429a      	cmp	r2, r3
 801164e:	db09      	blt.n	8011664 <__s2b+0x30>
 8011650:	4630      	mov	r0, r6
 8011652:	f7ff ff47 	bl	80114e4 <_Balloc>
 8011656:	b940      	cbnz	r0, 801166a <__s2b+0x36>
 8011658:	4602      	mov	r2, r0
 801165a:	4b19      	ldr	r3, [pc, #100]	@ (80116c0 <__s2b+0x8c>)
 801165c:	4819      	ldr	r0, [pc, #100]	@ (80116c4 <__s2b+0x90>)
 801165e:	21d3      	movs	r1, #211	@ 0xd3
 8011660:	f001 fcb6 	bl	8012fd0 <__assert_func>
 8011664:	0052      	lsls	r2, r2, #1
 8011666:	3101      	adds	r1, #1
 8011668:	e7f0      	b.n	801164c <__s2b+0x18>
 801166a:	9b08      	ldr	r3, [sp, #32]
 801166c:	6143      	str	r3, [r0, #20]
 801166e:	2d09      	cmp	r5, #9
 8011670:	f04f 0301 	mov.w	r3, #1
 8011674:	6103      	str	r3, [r0, #16]
 8011676:	dd16      	ble.n	80116a6 <__s2b+0x72>
 8011678:	f104 0909 	add.w	r9, r4, #9
 801167c:	46c8      	mov	r8, r9
 801167e:	442c      	add	r4, r5
 8011680:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011684:	4601      	mov	r1, r0
 8011686:	3b30      	subs	r3, #48	@ 0x30
 8011688:	220a      	movs	r2, #10
 801168a:	4630      	mov	r0, r6
 801168c:	f7ff ff8c 	bl	80115a8 <__multadd>
 8011690:	45a0      	cmp	r8, r4
 8011692:	d1f5      	bne.n	8011680 <__s2b+0x4c>
 8011694:	f1a5 0408 	sub.w	r4, r5, #8
 8011698:	444c      	add	r4, r9
 801169a:	1b2d      	subs	r5, r5, r4
 801169c:	1963      	adds	r3, r4, r5
 801169e:	42bb      	cmp	r3, r7
 80116a0:	db04      	blt.n	80116ac <__s2b+0x78>
 80116a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116a6:	340a      	adds	r4, #10
 80116a8:	2509      	movs	r5, #9
 80116aa:	e7f6      	b.n	801169a <__s2b+0x66>
 80116ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80116b0:	4601      	mov	r1, r0
 80116b2:	3b30      	subs	r3, #48	@ 0x30
 80116b4:	220a      	movs	r2, #10
 80116b6:	4630      	mov	r0, r6
 80116b8:	f7ff ff76 	bl	80115a8 <__multadd>
 80116bc:	e7ee      	b.n	801169c <__s2b+0x68>
 80116be:	bf00      	nop
 80116c0:	08014e09 	.word	0x08014e09
 80116c4:	08014e1a 	.word	0x08014e1a

080116c8 <__hi0bits>:
 80116c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80116cc:	4603      	mov	r3, r0
 80116ce:	bf36      	itet	cc
 80116d0:	0403      	lslcc	r3, r0, #16
 80116d2:	2000      	movcs	r0, #0
 80116d4:	2010      	movcc	r0, #16
 80116d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80116da:	bf3c      	itt	cc
 80116dc:	021b      	lslcc	r3, r3, #8
 80116de:	3008      	addcc	r0, #8
 80116e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80116e4:	bf3c      	itt	cc
 80116e6:	011b      	lslcc	r3, r3, #4
 80116e8:	3004      	addcc	r0, #4
 80116ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80116ee:	bf3c      	itt	cc
 80116f0:	009b      	lslcc	r3, r3, #2
 80116f2:	3002      	addcc	r0, #2
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	db05      	blt.n	8011704 <__hi0bits+0x3c>
 80116f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80116fc:	f100 0001 	add.w	r0, r0, #1
 8011700:	bf08      	it	eq
 8011702:	2020      	moveq	r0, #32
 8011704:	4770      	bx	lr

08011706 <__lo0bits>:
 8011706:	6803      	ldr	r3, [r0, #0]
 8011708:	4602      	mov	r2, r0
 801170a:	f013 0007 	ands.w	r0, r3, #7
 801170e:	d00b      	beq.n	8011728 <__lo0bits+0x22>
 8011710:	07d9      	lsls	r1, r3, #31
 8011712:	d421      	bmi.n	8011758 <__lo0bits+0x52>
 8011714:	0798      	lsls	r0, r3, #30
 8011716:	bf49      	itett	mi
 8011718:	085b      	lsrmi	r3, r3, #1
 801171a:	089b      	lsrpl	r3, r3, #2
 801171c:	2001      	movmi	r0, #1
 801171e:	6013      	strmi	r3, [r2, #0]
 8011720:	bf5c      	itt	pl
 8011722:	6013      	strpl	r3, [r2, #0]
 8011724:	2002      	movpl	r0, #2
 8011726:	4770      	bx	lr
 8011728:	b299      	uxth	r1, r3
 801172a:	b909      	cbnz	r1, 8011730 <__lo0bits+0x2a>
 801172c:	0c1b      	lsrs	r3, r3, #16
 801172e:	2010      	movs	r0, #16
 8011730:	b2d9      	uxtb	r1, r3
 8011732:	b909      	cbnz	r1, 8011738 <__lo0bits+0x32>
 8011734:	3008      	adds	r0, #8
 8011736:	0a1b      	lsrs	r3, r3, #8
 8011738:	0719      	lsls	r1, r3, #28
 801173a:	bf04      	itt	eq
 801173c:	091b      	lsreq	r3, r3, #4
 801173e:	3004      	addeq	r0, #4
 8011740:	0799      	lsls	r1, r3, #30
 8011742:	bf04      	itt	eq
 8011744:	089b      	lsreq	r3, r3, #2
 8011746:	3002      	addeq	r0, #2
 8011748:	07d9      	lsls	r1, r3, #31
 801174a:	d403      	bmi.n	8011754 <__lo0bits+0x4e>
 801174c:	085b      	lsrs	r3, r3, #1
 801174e:	f100 0001 	add.w	r0, r0, #1
 8011752:	d003      	beq.n	801175c <__lo0bits+0x56>
 8011754:	6013      	str	r3, [r2, #0]
 8011756:	4770      	bx	lr
 8011758:	2000      	movs	r0, #0
 801175a:	4770      	bx	lr
 801175c:	2020      	movs	r0, #32
 801175e:	4770      	bx	lr

08011760 <__i2b>:
 8011760:	b510      	push	{r4, lr}
 8011762:	460c      	mov	r4, r1
 8011764:	2101      	movs	r1, #1
 8011766:	f7ff febd 	bl	80114e4 <_Balloc>
 801176a:	4602      	mov	r2, r0
 801176c:	b928      	cbnz	r0, 801177a <__i2b+0x1a>
 801176e:	4b05      	ldr	r3, [pc, #20]	@ (8011784 <__i2b+0x24>)
 8011770:	4805      	ldr	r0, [pc, #20]	@ (8011788 <__i2b+0x28>)
 8011772:	f240 1145 	movw	r1, #325	@ 0x145
 8011776:	f001 fc2b 	bl	8012fd0 <__assert_func>
 801177a:	2301      	movs	r3, #1
 801177c:	6144      	str	r4, [r0, #20]
 801177e:	6103      	str	r3, [r0, #16]
 8011780:	bd10      	pop	{r4, pc}
 8011782:	bf00      	nop
 8011784:	08014e09 	.word	0x08014e09
 8011788:	08014e1a 	.word	0x08014e1a

0801178c <__multiply>:
 801178c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011790:	4617      	mov	r7, r2
 8011792:	690a      	ldr	r2, [r1, #16]
 8011794:	693b      	ldr	r3, [r7, #16]
 8011796:	429a      	cmp	r2, r3
 8011798:	bfa8      	it	ge
 801179a:	463b      	movge	r3, r7
 801179c:	4689      	mov	r9, r1
 801179e:	bfa4      	itt	ge
 80117a0:	460f      	movge	r7, r1
 80117a2:	4699      	movge	r9, r3
 80117a4:	693d      	ldr	r5, [r7, #16]
 80117a6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80117aa:	68bb      	ldr	r3, [r7, #8]
 80117ac:	6879      	ldr	r1, [r7, #4]
 80117ae:	eb05 060a 	add.w	r6, r5, sl
 80117b2:	42b3      	cmp	r3, r6
 80117b4:	b085      	sub	sp, #20
 80117b6:	bfb8      	it	lt
 80117b8:	3101      	addlt	r1, #1
 80117ba:	f7ff fe93 	bl	80114e4 <_Balloc>
 80117be:	b930      	cbnz	r0, 80117ce <__multiply+0x42>
 80117c0:	4602      	mov	r2, r0
 80117c2:	4b41      	ldr	r3, [pc, #260]	@ (80118c8 <__multiply+0x13c>)
 80117c4:	4841      	ldr	r0, [pc, #260]	@ (80118cc <__multiply+0x140>)
 80117c6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80117ca:	f001 fc01 	bl	8012fd0 <__assert_func>
 80117ce:	f100 0414 	add.w	r4, r0, #20
 80117d2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80117d6:	4623      	mov	r3, r4
 80117d8:	2200      	movs	r2, #0
 80117da:	4573      	cmp	r3, lr
 80117dc:	d320      	bcc.n	8011820 <__multiply+0x94>
 80117de:	f107 0814 	add.w	r8, r7, #20
 80117e2:	f109 0114 	add.w	r1, r9, #20
 80117e6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80117ea:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80117ee:	9302      	str	r3, [sp, #8]
 80117f0:	1beb      	subs	r3, r5, r7
 80117f2:	3b15      	subs	r3, #21
 80117f4:	f023 0303 	bic.w	r3, r3, #3
 80117f8:	3304      	adds	r3, #4
 80117fa:	3715      	adds	r7, #21
 80117fc:	42bd      	cmp	r5, r7
 80117fe:	bf38      	it	cc
 8011800:	2304      	movcc	r3, #4
 8011802:	9301      	str	r3, [sp, #4]
 8011804:	9b02      	ldr	r3, [sp, #8]
 8011806:	9103      	str	r1, [sp, #12]
 8011808:	428b      	cmp	r3, r1
 801180a:	d80c      	bhi.n	8011826 <__multiply+0x9a>
 801180c:	2e00      	cmp	r6, #0
 801180e:	dd03      	ble.n	8011818 <__multiply+0x8c>
 8011810:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011814:	2b00      	cmp	r3, #0
 8011816:	d055      	beq.n	80118c4 <__multiply+0x138>
 8011818:	6106      	str	r6, [r0, #16]
 801181a:	b005      	add	sp, #20
 801181c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011820:	f843 2b04 	str.w	r2, [r3], #4
 8011824:	e7d9      	b.n	80117da <__multiply+0x4e>
 8011826:	f8b1 a000 	ldrh.w	sl, [r1]
 801182a:	f1ba 0f00 	cmp.w	sl, #0
 801182e:	d01f      	beq.n	8011870 <__multiply+0xe4>
 8011830:	46c4      	mov	ip, r8
 8011832:	46a1      	mov	r9, r4
 8011834:	2700      	movs	r7, #0
 8011836:	f85c 2b04 	ldr.w	r2, [ip], #4
 801183a:	f8d9 3000 	ldr.w	r3, [r9]
 801183e:	fa1f fb82 	uxth.w	fp, r2
 8011842:	b29b      	uxth	r3, r3
 8011844:	fb0a 330b 	mla	r3, sl, fp, r3
 8011848:	443b      	add	r3, r7
 801184a:	f8d9 7000 	ldr.w	r7, [r9]
 801184e:	0c12      	lsrs	r2, r2, #16
 8011850:	0c3f      	lsrs	r7, r7, #16
 8011852:	fb0a 7202 	mla	r2, sl, r2, r7
 8011856:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801185a:	b29b      	uxth	r3, r3
 801185c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011860:	4565      	cmp	r5, ip
 8011862:	f849 3b04 	str.w	r3, [r9], #4
 8011866:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801186a:	d8e4      	bhi.n	8011836 <__multiply+0xaa>
 801186c:	9b01      	ldr	r3, [sp, #4]
 801186e:	50e7      	str	r7, [r4, r3]
 8011870:	9b03      	ldr	r3, [sp, #12]
 8011872:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011876:	3104      	adds	r1, #4
 8011878:	f1b9 0f00 	cmp.w	r9, #0
 801187c:	d020      	beq.n	80118c0 <__multiply+0x134>
 801187e:	6823      	ldr	r3, [r4, #0]
 8011880:	4647      	mov	r7, r8
 8011882:	46a4      	mov	ip, r4
 8011884:	f04f 0a00 	mov.w	sl, #0
 8011888:	f8b7 b000 	ldrh.w	fp, [r7]
 801188c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8011890:	fb09 220b 	mla	r2, r9, fp, r2
 8011894:	4452      	add	r2, sl
 8011896:	b29b      	uxth	r3, r3
 8011898:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801189c:	f84c 3b04 	str.w	r3, [ip], #4
 80118a0:	f857 3b04 	ldr.w	r3, [r7], #4
 80118a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80118a8:	f8bc 3000 	ldrh.w	r3, [ip]
 80118ac:	fb09 330a 	mla	r3, r9, sl, r3
 80118b0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80118b4:	42bd      	cmp	r5, r7
 80118b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80118ba:	d8e5      	bhi.n	8011888 <__multiply+0xfc>
 80118bc:	9a01      	ldr	r2, [sp, #4]
 80118be:	50a3      	str	r3, [r4, r2]
 80118c0:	3404      	adds	r4, #4
 80118c2:	e79f      	b.n	8011804 <__multiply+0x78>
 80118c4:	3e01      	subs	r6, #1
 80118c6:	e7a1      	b.n	801180c <__multiply+0x80>
 80118c8:	08014e09 	.word	0x08014e09
 80118cc:	08014e1a 	.word	0x08014e1a

080118d0 <__pow5mult>:
 80118d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118d4:	4615      	mov	r5, r2
 80118d6:	f012 0203 	ands.w	r2, r2, #3
 80118da:	4607      	mov	r7, r0
 80118dc:	460e      	mov	r6, r1
 80118de:	d007      	beq.n	80118f0 <__pow5mult+0x20>
 80118e0:	4c25      	ldr	r4, [pc, #148]	@ (8011978 <__pow5mult+0xa8>)
 80118e2:	3a01      	subs	r2, #1
 80118e4:	2300      	movs	r3, #0
 80118e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80118ea:	f7ff fe5d 	bl	80115a8 <__multadd>
 80118ee:	4606      	mov	r6, r0
 80118f0:	10ad      	asrs	r5, r5, #2
 80118f2:	d03d      	beq.n	8011970 <__pow5mult+0xa0>
 80118f4:	69fc      	ldr	r4, [r7, #28]
 80118f6:	b97c      	cbnz	r4, 8011918 <__pow5mult+0x48>
 80118f8:	2010      	movs	r0, #16
 80118fa:	f7fd fe79 	bl	800f5f0 <malloc>
 80118fe:	4602      	mov	r2, r0
 8011900:	61f8      	str	r0, [r7, #28]
 8011902:	b928      	cbnz	r0, 8011910 <__pow5mult+0x40>
 8011904:	4b1d      	ldr	r3, [pc, #116]	@ (801197c <__pow5mult+0xac>)
 8011906:	481e      	ldr	r0, [pc, #120]	@ (8011980 <__pow5mult+0xb0>)
 8011908:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801190c:	f001 fb60 	bl	8012fd0 <__assert_func>
 8011910:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011914:	6004      	str	r4, [r0, #0]
 8011916:	60c4      	str	r4, [r0, #12]
 8011918:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801191c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011920:	b94c      	cbnz	r4, 8011936 <__pow5mult+0x66>
 8011922:	f240 2171 	movw	r1, #625	@ 0x271
 8011926:	4638      	mov	r0, r7
 8011928:	f7ff ff1a 	bl	8011760 <__i2b>
 801192c:	2300      	movs	r3, #0
 801192e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011932:	4604      	mov	r4, r0
 8011934:	6003      	str	r3, [r0, #0]
 8011936:	f04f 0900 	mov.w	r9, #0
 801193a:	07eb      	lsls	r3, r5, #31
 801193c:	d50a      	bpl.n	8011954 <__pow5mult+0x84>
 801193e:	4631      	mov	r1, r6
 8011940:	4622      	mov	r2, r4
 8011942:	4638      	mov	r0, r7
 8011944:	f7ff ff22 	bl	801178c <__multiply>
 8011948:	4631      	mov	r1, r6
 801194a:	4680      	mov	r8, r0
 801194c:	4638      	mov	r0, r7
 801194e:	f7ff fe09 	bl	8011564 <_Bfree>
 8011952:	4646      	mov	r6, r8
 8011954:	106d      	asrs	r5, r5, #1
 8011956:	d00b      	beq.n	8011970 <__pow5mult+0xa0>
 8011958:	6820      	ldr	r0, [r4, #0]
 801195a:	b938      	cbnz	r0, 801196c <__pow5mult+0x9c>
 801195c:	4622      	mov	r2, r4
 801195e:	4621      	mov	r1, r4
 8011960:	4638      	mov	r0, r7
 8011962:	f7ff ff13 	bl	801178c <__multiply>
 8011966:	6020      	str	r0, [r4, #0]
 8011968:	f8c0 9000 	str.w	r9, [r0]
 801196c:	4604      	mov	r4, r0
 801196e:	e7e4      	b.n	801193a <__pow5mult+0x6a>
 8011970:	4630      	mov	r0, r6
 8011972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011976:	bf00      	nop
 8011978:	08014f2c 	.word	0x08014f2c
 801197c:	08014d9a 	.word	0x08014d9a
 8011980:	08014e1a 	.word	0x08014e1a

08011984 <__lshift>:
 8011984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011988:	460c      	mov	r4, r1
 801198a:	6849      	ldr	r1, [r1, #4]
 801198c:	6923      	ldr	r3, [r4, #16]
 801198e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011992:	68a3      	ldr	r3, [r4, #8]
 8011994:	4607      	mov	r7, r0
 8011996:	4691      	mov	r9, r2
 8011998:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801199c:	f108 0601 	add.w	r6, r8, #1
 80119a0:	42b3      	cmp	r3, r6
 80119a2:	db0b      	blt.n	80119bc <__lshift+0x38>
 80119a4:	4638      	mov	r0, r7
 80119a6:	f7ff fd9d 	bl	80114e4 <_Balloc>
 80119aa:	4605      	mov	r5, r0
 80119ac:	b948      	cbnz	r0, 80119c2 <__lshift+0x3e>
 80119ae:	4602      	mov	r2, r0
 80119b0:	4b28      	ldr	r3, [pc, #160]	@ (8011a54 <__lshift+0xd0>)
 80119b2:	4829      	ldr	r0, [pc, #164]	@ (8011a58 <__lshift+0xd4>)
 80119b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80119b8:	f001 fb0a 	bl	8012fd0 <__assert_func>
 80119bc:	3101      	adds	r1, #1
 80119be:	005b      	lsls	r3, r3, #1
 80119c0:	e7ee      	b.n	80119a0 <__lshift+0x1c>
 80119c2:	2300      	movs	r3, #0
 80119c4:	f100 0114 	add.w	r1, r0, #20
 80119c8:	f100 0210 	add.w	r2, r0, #16
 80119cc:	4618      	mov	r0, r3
 80119ce:	4553      	cmp	r3, sl
 80119d0:	db33      	blt.n	8011a3a <__lshift+0xb6>
 80119d2:	6920      	ldr	r0, [r4, #16]
 80119d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80119d8:	f104 0314 	add.w	r3, r4, #20
 80119dc:	f019 091f 	ands.w	r9, r9, #31
 80119e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80119e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80119e8:	d02b      	beq.n	8011a42 <__lshift+0xbe>
 80119ea:	f1c9 0e20 	rsb	lr, r9, #32
 80119ee:	468a      	mov	sl, r1
 80119f0:	2200      	movs	r2, #0
 80119f2:	6818      	ldr	r0, [r3, #0]
 80119f4:	fa00 f009 	lsl.w	r0, r0, r9
 80119f8:	4310      	orrs	r0, r2
 80119fa:	f84a 0b04 	str.w	r0, [sl], #4
 80119fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a02:	459c      	cmp	ip, r3
 8011a04:	fa22 f20e 	lsr.w	r2, r2, lr
 8011a08:	d8f3      	bhi.n	80119f2 <__lshift+0x6e>
 8011a0a:	ebac 0304 	sub.w	r3, ip, r4
 8011a0e:	3b15      	subs	r3, #21
 8011a10:	f023 0303 	bic.w	r3, r3, #3
 8011a14:	3304      	adds	r3, #4
 8011a16:	f104 0015 	add.w	r0, r4, #21
 8011a1a:	4560      	cmp	r0, ip
 8011a1c:	bf88      	it	hi
 8011a1e:	2304      	movhi	r3, #4
 8011a20:	50ca      	str	r2, [r1, r3]
 8011a22:	b10a      	cbz	r2, 8011a28 <__lshift+0xa4>
 8011a24:	f108 0602 	add.w	r6, r8, #2
 8011a28:	3e01      	subs	r6, #1
 8011a2a:	4638      	mov	r0, r7
 8011a2c:	612e      	str	r6, [r5, #16]
 8011a2e:	4621      	mov	r1, r4
 8011a30:	f7ff fd98 	bl	8011564 <_Bfree>
 8011a34:	4628      	mov	r0, r5
 8011a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8011a3e:	3301      	adds	r3, #1
 8011a40:	e7c5      	b.n	80119ce <__lshift+0x4a>
 8011a42:	3904      	subs	r1, #4
 8011a44:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a48:	f841 2f04 	str.w	r2, [r1, #4]!
 8011a4c:	459c      	cmp	ip, r3
 8011a4e:	d8f9      	bhi.n	8011a44 <__lshift+0xc0>
 8011a50:	e7ea      	b.n	8011a28 <__lshift+0xa4>
 8011a52:	bf00      	nop
 8011a54:	08014e09 	.word	0x08014e09
 8011a58:	08014e1a 	.word	0x08014e1a

08011a5c <__mcmp>:
 8011a5c:	690a      	ldr	r2, [r1, #16]
 8011a5e:	4603      	mov	r3, r0
 8011a60:	6900      	ldr	r0, [r0, #16]
 8011a62:	1a80      	subs	r0, r0, r2
 8011a64:	b530      	push	{r4, r5, lr}
 8011a66:	d10e      	bne.n	8011a86 <__mcmp+0x2a>
 8011a68:	3314      	adds	r3, #20
 8011a6a:	3114      	adds	r1, #20
 8011a6c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011a70:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011a74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011a78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011a7c:	4295      	cmp	r5, r2
 8011a7e:	d003      	beq.n	8011a88 <__mcmp+0x2c>
 8011a80:	d205      	bcs.n	8011a8e <__mcmp+0x32>
 8011a82:	f04f 30ff 	mov.w	r0, #4294967295
 8011a86:	bd30      	pop	{r4, r5, pc}
 8011a88:	42a3      	cmp	r3, r4
 8011a8a:	d3f3      	bcc.n	8011a74 <__mcmp+0x18>
 8011a8c:	e7fb      	b.n	8011a86 <__mcmp+0x2a>
 8011a8e:	2001      	movs	r0, #1
 8011a90:	e7f9      	b.n	8011a86 <__mcmp+0x2a>
	...

08011a94 <__mdiff>:
 8011a94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a98:	4689      	mov	r9, r1
 8011a9a:	4606      	mov	r6, r0
 8011a9c:	4611      	mov	r1, r2
 8011a9e:	4648      	mov	r0, r9
 8011aa0:	4614      	mov	r4, r2
 8011aa2:	f7ff ffdb 	bl	8011a5c <__mcmp>
 8011aa6:	1e05      	subs	r5, r0, #0
 8011aa8:	d112      	bne.n	8011ad0 <__mdiff+0x3c>
 8011aaa:	4629      	mov	r1, r5
 8011aac:	4630      	mov	r0, r6
 8011aae:	f7ff fd19 	bl	80114e4 <_Balloc>
 8011ab2:	4602      	mov	r2, r0
 8011ab4:	b928      	cbnz	r0, 8011ac2 <__mdiff+0x2e>
 8011ab6:	4b3f      	ldr	r3, [pc, #252]	@ (8011bb4 <__mdiff+0x120>)
 8011ab8:	f240 2137 	movw	r1, #567	@ 0x237
 8011abc:	483e      	ldr	r0, [pc, #248]	@ (8011bb8 <__mdiff+0x124>)
 8011abe:	f001 fa87 	bl	8012fd0 <__assert_func>
 8011ac2:	2301      	movs	r3, #1
 8011ac4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011ac8:	4610      	mov	r0, r2
 8011aca:	b003      	add	sp, #12
 8011acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ad0:	bfbc      	itt	lt
 8011ad2:	464b      	movlt	r3, r9
 8011ad4:	46a1      	movlt	r9, r4
 8011ad6:	4630      	mov	r0, r6
 8011ad8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011adc:	bfba      	itte	lt
 8011ade:	461c      	movlt	r4, r3
 8011ae0:	2501      	movlt	r5, #1
 8011ae2:	2500      	movge	r5, #0
 8011ae4:	f7ff fcfe 	bl	80114e4 <_Balloc>
 8011ae8:	4602      	mov	r2, r0
 8011aea:	b918      	cbnz	r0, 8011af4 <__mdiff+0x60>
 8011aec:	4b31      	ldr	r3, [pc, #196]	@ (8011bb4 <__mdiff+0x120>)
 8011aee:	f240 2145 	movw	r1, #581	@ 0x245
 8011af2:	e7e3      	b.n	8011abc <__mdiff+0x28>
 8011af4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011af8:	6926      	ldr	r6, [r4, #16]
 8011afa:	60c5      	str	r5, [r0, #12]
 8011afc:	f109 0310 	add.w	r3, r9, #16
 8011b00:	f109 0514 	add.w	r5, r9, #20
 8011b04:	f104 0e14 	add.w	lr, r4, #20
 8011b08:	f100 0b14 	add.w	fp, r0, #20
 8011b0c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011b10:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011b14:	9301      	str	r3, [sp, #4]
 8011b16:	46d9      	mov	r9, fp
 8011b18:	f04f 0c00 	mov.w	ip, #0
 8011b1c:	9b01      	ldr	r3, [sp, #4]
 8011b1e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011b22:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011b26:	9301      	str	r3, [sp, #4]
 8011b28:	fa1f f38a 	uxth.w	r3, sl
 8011b2c:	4619      	mov	r1, r3
 8011b2e:	b283      	uxth	r3, r0
 8011b30:	1acb      	subs	r3, r1, r3
 8011b32:	0c00      	lsrs	r0, r0, #16
 8011b34:	4463      	add	r3, ip
 8011b36:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011b3a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011b3e:	b29b      	uxth	r3, r3
 8011b40:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011b44:	4576      	cmp	r6, lr
 8011b46:	f849 3b04 	str.w	r3, [r9], #4
 8011b4a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011b4e:	d8e5      	bhi.n	8011b1c <__mdiff+0x88>
 8011b50:	1b33      	subs	r3, r6, r4
 8011b52:	3b15      	subs	r3, #21
 8011b54:	f023 0303 	bic.w	r3, r3, #3
 8011b58:	3415      	adds	r4, #21
 8011b5a:	3304      	adds	r3, #4
 8011b5c:	42a6      	cmp	r6, r4
 8011b5e:	bf38      	it	cc
 8011b60:	2304      	movcc	r3, #4
 8011b62:	441d      	add	r5, r3
 8011b64:	445b      	add	r3, fp
 8011b66:	461e      	mov	r6, r3
 8011b68:	462c      	mov	r4, r5
 8011b6a:	4544      	cmp	r4, r8
 8011b6c:	d30e      	bcc.n	8011b8c <__mdiff+0xf8>
 8011b6e:	f108 0103 	add.w	r1, r8, #3
 8011b72:	1b49      	subs	r1, r1, r5
 8011b74:	f021 0103 	bic.w	r1, r1, #3
 8011b78:	3d03      	subs	r5, #3
 8011b7a:	45a8      	cmp	r8, r5
 8011b7c:	bf38      	it	cc
 8011b7e:	2100      	movcc	r1, #0
 8011b80:	440b      	add	r3, r1
 8011b82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011b86:	b191      	cbz	r1, 8011bae <__mdiff+0x11a>
 8011b88:	6117      	str	r7, [r2, #16]
 8011b8a:	e79d      	b.n	8011ac8 <__mdiff+0x34>
 8011b8c:	f854 1b04 	ldr.w	r1, [r4], #4
 8011b90:	46e6      	mov	lr, ip
 8011b92:	0c08      	lsrs	r0, r1, #16
 8011b94:	fa1c fc81 	uxtah	ip, ip, r1
 8011b98:	4471      	add	r1, lr
 8011b9a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011b9e:	b289      	uxth	r1, r1
 8011ba0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011ba4:	f846 1b04 	str.w	r1, [r6], #4
 8011ba8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011bac:	e7dd      	b.n	8011b6a <__mdiff+0xd6>
 8011bae:	3f01      	subs	r7, #1
 8011bb0:	e7e7      	b.n	8011b82 <__mdiff+0xee>
 8011bb2:	bf00      	nop
 8011bb4:	08014e09 	.word	0x08014e09
 8011bb8:	08014e1a 	.word	0x08014e1a

08011bbc <__ulp>:
 8011bbc:	b082      	sub	sp, #8
 8011bbe:	ed8d 0b00 	vstr	d0, [sp]
 8011bc2:	9a01      	ldr	r2, [sp, #4]
 8011bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8011c04 <__ulp+0x48>)
 8011bc6:	4013      	ands	r3, r2
 8011bc8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	dc08      	bgt.n	8011be2 <__ulp+0x26>
 8011bd0:	425b      	negs	r3, r3
 8011bd2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011bd6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011bda:	da04      	bge.n	8011be6 <__ulp+0x2a>
 8011bdc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011be0:	4113      	asrs	r3, r2
 8011be2:	2200      	movs	r2, #0
 8011be4:	e008      	b.n	8011bf8 <__ulp+0x3c>
 8011be6:	f1a2 0314 	sub.w	r3, r2, #20
 8011bea:	2b1e      	cmp	r3, #30
 8011bec:	bfda      	itte	le
 8011bee:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011bf2:	40da      	lsrle	r2, r3
 8011bf4:	2201      	movgt	r2, #1
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	4619      	mov	r1, r3
 8011bfa:	4610      	mov	r0, r2
 8011bfc:	ec41 0b10 	vmov	d0, r0, r1
 8011c00:	b002      	add	sp, #8
 8011c02:	4770      	bx	lr
 8011c04:	7ff00000 	.word	0x7ff00000

08011c08 <__b2d>:
 8011c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c0c:	6906      	ldr	r6, [r0, #16]
 8011c0e:	f100 0814 	add.w	r8, r0, #20
 8011c12:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011c16:	1f37      	subs	r7, r6, #4
 8011c18:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011c1c:	4610      	mov	r0, r2
 8011c1e:	f7ff fd53 	bl	80116c8 <__hi0bits>
 8011c22:	f1c0 0320 	rsb	r3, r0, #32
 8011c26:	280a      	cmp	r0, #10
 8011c28:	600b      	str	r3, [r1, #0]
 8011c2a:	491b      	ldr	r1, [pc, #108]	@ (8011c98 <__b2d+0x90>)
 8011c2c:	dc15      	bgt.n	8011c5a <__b2d+0x52>
 8011c2e:	f1c0 0c0b 	rsb	ip, r0, #11
 8011c32:	fa22 f30c 	lsr.w	r3, r2, ip
 8011c36:	45b8      	cmp	r8, r7
 8011c38:	ea43 0501 	orr.w	r5, r3, r1
 8011c3c:	bf34      	ite	cc
 8011c3e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011c42:	2300      	movcs	r3, #0
 8011c44:	3015      	adds	r0, #21
 8011c46:	fa02 f000 	lsl.w	r0, r2, r0
 8011c4a:	fa23 f30c 	lsr.w	r3, r3, ip
 8011c4e:	4303      	orrs	r3, r0
 8011c50:	461c      	mov	r4, r3
 8011c52:	ec45 4b10 	vmov	d0, r4, r5
 8011c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c5a:	45b8      	cmp	r8, r7
 8011c5c:	bf3a      	itte	cc
 8011c5e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011c62:	f1a6 0708 	subcc.w	r7, r6, #8
 8011c66:	2300      	movcs	r3, #0
 8011c68:	380b      	subs	r0, #11
 8011c6a:	d012      	beq.n	8011c92 <__b2d+0x8a>
 8011c6c:	f1c0 0120 	rsb	r1, r0, #32
 8011c70:	fa23 f401 	lsr.w	r4, r3, r1
 8011c74:	4082      	lsls	r2, r0
 8011c76:	4322      	orrs	r2, r4
 8011c78:	4547      	cmp	r7, r8
 8011c7a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011c7e:	bf8c      	ite	hi
 8011c80:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011c84:	2200      	movls	r2, #0
 8011c86:	4083      	lsls	r3, r0
 8011c88:	40ca      	lsrs	r2, r1
 8011c8a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011c8e:	4313      	orrs	r3, r2
 8011c90:	e7de      	b.n	8011c50 <__b2d+0x48>
 8011c92:	ea42 0501 	orr.w	r5, r2, r1
 8011c96:	e7db      	b.n	8011c50 <__b2d+0x48>
 8011c98:	3ff00000 	.word	0x3ff00000

08011c9c <__d2b>:
 8011c9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011ca0:	460f      	mov	r7, r1
 8011ca2:	2101      	movs	r1, #1
 8011ca4:	ec59 8b10 	vmov	r8, r9, d0
 8011ca8:	4616      	mov	r6, r2
 8011caa:	f7ff fc1b 	bl	80114e4 <_Balloc>
 8011cae:	4604      	mov	r4, r0
 8011cb0:	b930      	cbnz	r0, 8011cc0 <__d2b+0x24>
 8011cb2:	4602      	mov	r2, r0
 8011cb4:	4b23      	ldr	r3, [pc, #140]	@ (8011d44 <__d2b+0xa8>)
 8011cb6:	4824      	ldr	r0, [pc, #144]	@ (8011d48 <__d2b+0xac>)
 8011cb8:	f240 310f 	movw	r1, #783	@ 0x30f
 8011cbc:	f001 f988 	bl	8012fd0 <__assert_func>
 8011cc0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011cc4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011cc8:	b10d      	cbz	r5, 8011cce <__d2b+0x32>
 8011cca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011cce:	9301      	str	r3, [sp, #4]
 8011cd0:	f1b8 0300 	subs.w	r3, r8, #0
 8011cd4:	d023      	beq.n	8011d1e <__d2b+0x82>
 8011cd6:	4668      	mov	r0, sp
 8011cd8:	9300      	str	r3, [sp, #0]
 8011cda:	f7ff fd14 	bl	8011706 <__lo0bits>
 8011cde:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011ce2:	b1d0      	cbz	r0, 8011d1a <__d2b+0x7e>
 8011ce4:	f1c0 0320 	rsb	r3, r0, #32
 8011ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8011cec:	430b      	orrs	r3, r1
 8011cee:	40c2      	lsrs	r2, r0
 8011cf0:	6163      	str	r3, [r4, #20]
 8011cf2:	9201      	str	r2, [sp, #4]
 8011cf4:	9b01      	ldr	r3, [sp, #4]
 8011cf6:	61a3      	str	r3, [r4, #24]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	bf0c      	ite	eq
 8011cfc:	2201      	moveq	r2, #1
 8011cfe:	2202      	movne	r2, #2
 8011d00:	6122      	str	r2, [r4, #16]
 8011d02:	b1a5      	cbz	r5, 8011d2e <__d2b+0x92>
 8011d04:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011d08:	4405      	add	r5, r0
 8011d0a:	603d      	str	r5, [r7, #0]
 8011d0c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011d10:	6030      	str	r0, [r6, #0]
 8011d12:	4620      	mov	r0, r4
 8011d14:	b003      	add	sp, #12
 8011d16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d1a:	6161      	str	r1, [r4, #20]
 8011d1c:	e7ea      	b.n	8011cf4 <__d2b+0x58>
 8011d1e:	a801      	add	r0, sp, #4
 8011d20:	f7ff fcf1 	bl	8011706 <__lo0bits>
 8011d24:	9b01      	ldr	r3, [sp, #4]
 8011d26:	6163      	str	r3, [r4, #20]
 8011d28:	3020      	adds	r0, #32
 8011d2a:	2201      	movs	r2, #1
 8011d2c:	e7e8      	b.n	8011d00 <__d2b+0x64>
 8011d2e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011d32:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011d36:	6038      	str	r0, [r7, #0]
 8011d38:	6918      	ldr	r0, [r3, #16]
 8011d3a:	f7ff fcc5 	bl	80116c8 <__hi0bits>
 8011d3e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011d42:	e7e5      	b.n	8011d10 <__d2b+0x74>
 8011d44:	08014e09 	.word	0x08014e09
 8011d48:	08014e1a 	.word	0x08014e1a

08011d4c <__ratio>:
 8011d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d50:	b085      	sub	sp, #20
 8011d52:	e9cd 1000 	strd	r1, r0, [sp]
 8011d56:	a902      	add	r1, sp, #8
 8011d58:	f7ff ff56 	bl	8011c08 <__b2d>
 8011d5c:	9800      	ldr	r0, [sp, #0]
 8011d5e:	a903      	add	r1, sp, #12
 8011d60:	ec55 4b10 	vmov	r4, r5, d0
 8011d64:	f7ff ff50 	bl	8011c08 <__b2d>
 8011d68:	9b01      	ldr	r3, [sp, #4]
 8011d6a:	6919      	ldr	r1, [r3, #16]
 8011d6c:	9b00      	ldr	r3, [sp, #0]
 8011d6e:	691b      	ldr	r3, [r3, #16]
 8011d70:	1ac9      	subs	r1, r1, r3
 8011d72:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011d76:	1a9b      	subs	r3, r3, r2
 8011d78:	ec5b ab10 	vmov	sl, fp, d0
 8011d7c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	bfce      	itee	gt
 8011d84:	462a      	movgt	r2, r5
 8011d86:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011d8a:	465a      	movle	r2, fp
 8011d8c:	462f      	mov	r7, r5
 8011d8e:	46d9      	mov	r9, fp
 8011d90:	bfcc      	ite	gt
 8011d92:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011d96:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011d9a:	464b      	mov	r3, r9
 8011d9c:	4652      	mov	r2, sl
 8011d9e:	4620      	mov	r0, r4
 8011da0:	4639      	mov	r1, r7
 8011da2:	f7ee fd5b 	bl	800085c <__aeabi_ddiv>
 8011da6:	ec41 0b10 	vmov	d0, r0, r1
 8011daa:	b005      	add	sp, #20
 8011dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011db0 <__copybits>:
 8011db0:	3901      	subs	r1, #1
 8011db2:	b570      	push	{r4, r5, r6, lr}
 8011db4:	1149      	asrs	r1, r1, #5
 8011db6:	6914      	ldr	r4, [r2, #16]
 8011db8:	3101      	adds	r1, #1
 8011dba:	f102 0314 	add.w	r3, r2, #20
 8011dbe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011dc2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011dc6:	1f05      	subs	r5, r0, #4
 8011dc8:	42a3      	cmp	r3, r4
 8011dca:	d30c      	bcc.n	8011de6 <__copybits+0x36>
 8011dcc:	1aa3      	subs	r3, r4, r2
 8011dce:	3b11      	subs	r3, #17
 8011dd0:	f023 0303 	bic.w	r3, r3, #3
 8011dd4:	3211      	adds	r2, #17
 8011dd6:	42a2      	cmp	r2, r4
 8011dd8:	bf88      	it	hi
 8011dda:	2300      	movhi	r3, #0
 8011ddc:	4418      	add	r0, r3
 8011dde:	2300      	movs	r3, #0
 8011de0:	4288      	cmp	r0, r1
 8011de2:	d305      	bcc.n	8011df0 <__copybits+0x40>
 8011de4:	bd70      	pop	{r4, r5, r6, pc}
 8011de6:	f853 6b04 	ldr.w	r6, [r3], #4
 8011dea:	f845 6f04 	str.w	r6, [r5, #4]!
 8011dee:	e7eb      	b.n	8011dc8 <__copybits+0x18>
 8011df0:	f840 3b04 	str.w	r3, [r0], #4
 8011df4:	e7f4      	b.n	8011de0 <__copybits+0x30>

08011df6 <__any_on>:
 8011df6:	f100 0214 	add.w	r2, r0, #20
 8011dfa:	6900      	ldr	r0, [r0, #16]
 8011dfc:	114b      	asrs	r3, r1, #5
 8011dfe:	4298      	cmp	r0, r3
 8011e00:	b510      	push	{r4, lr}
 8011e02:	db11      	blt.n	8011e28 <__any_on+0x32>
 8011e04:	dd0a      	ble.n	8011e1c <__any_on+0x26>
 8011e06:	f011 011f 	ands.w	r1, r1, #31
 8011e0a:	d007      	beq.n	8011e1c <__any_on+0x26>
 8011e0c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011e10:	fa24 f001 	lsr.w	r0, r4, r1
 8011e14:	fa00 f101 	lsl.w	r1, r0, r1
 8011e18:	428c      	cmp	r4, r1
 8011e1a:	d10b      	bne.n	8011e34 <__any_on+0x3e>
 8011e1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011e20:	4293      	cmp	r3, r2
 8011e22:	d803      	bhi.n	8011e2c <__any_on+0x36>
 8011e24:	2000      	movs	r0, #0
 8011e26:	bd10      	pop	{r4, pc}
 8011e28:	4603      	mov	r3, r0
 8011e2a:	e7f7      	b.n	8011e1c <__any_on+0x26>
 8011e2c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011e30:	2900      	cmp	r1, #0
 8011e32:	d0f5      	beq.n	8011e20 <__any_on+0x2a>
 8011e34:	2001      	movs	r0, #1
 8011e36:	e7f6      	b.n	8011e26 <__any_on+0x30>

08011e38 <sulp>:
 8011e38:	b570      	push	{r4, r5, r6, lr}
 8011e3a:	4604      	mov	r4, r0
 8011e3c:	460d      	mov	r5, r1
 8011e3e:	ec45 4b10 	vmov	d0, r4, r5
 8011e42:	4616      	mov	r6, r2
 8011e44:	f7ff feba 	bl	8011bbc <__ulp>
 8011e48:	ec51 0b10 	vmov	r0, r1, d0
 8011e4c:	b17e      	cbz	r6, 8011e6e <sulp+0x36>
 8011e4e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011e52:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	dd09      	ble.n	8011e6e <sulp+0x36>
 8011e5a:	051b      	lsls	r3, r3, #20
 8011e5c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8011e60:	2400      	movs	r4, #0
 8011e62:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8011e66:	4622      	mov	r2, r4
 8011e68:	462b      	mov	r3, r5
 8011e6a:	f7ee fbcd 	bl	8000608 <__aeabi_dmul>
 8011e6e:	ec41 0b10 	vmov	d0, r0, r1
 8011e72:	bd70      	pop	{r4, r5, r6, pc}
 8011e74:	0000      	movs	r0, r0
	...

08011e78 <_strtod_l>:
 8011e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e7c:	b09f      	sub	sp, #124	@ 0x7c
 8011e7e:	460c      	mov	r4, r1
 8011e80:	9217      	str	r2, [sp, #92]	@ 0x5c
 8011e82:	2200      	movs	r2, #0
 8011e84:	921a      	str	r2, [sp, #104]	@ 0x68
 8011e86:	9005      	str	r0, [sp, #20]
 8011e88:	f04f 0a00 	mov.w	sl, #0
 8011e8c:	f04f 0b00 	mov.w	fp, #0
 8011e90:	460a      	mov	r2, r1
 8011e92:	9219      	str	r2, [sp, #100]	@ 0x64
 8011e94:	7811      	ldrb	r1, [r2, #0]
 8011e96:	292b      	cmp	r1, #43	@ 0x2b
 8011e98:	d04a      	beq.n	8011f30 <_strtod_l+0xb8>
 8011e9a:	d838      	bhi.n	8011f0e <_strtod_l+0x96>
 8011e9c:	290d      	cmp	r1, #13
 8011e9e:	d832      	bhi.n	8011f06 <_strtod_l+0x8e>
 8011ea0:	2908      	cmp	r1, #8
 8011ea2:	d832      	bhi.n	8011f0a <_strtod_l+0x92>
 8011ea4:	2900      	cmp	r1, #0
 8011ea6:	d03b      	beq.n	8011f20 <_strtod_l+0xa8>
 8011ea8:	2200      	movs	r2, #0
 8011eaa:	920e      	str	r2, [sp, #56]	@ 0x38
 8011eac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8011eae:	782a      	ldrb	r2, [r5, #0]
 8011eb0:	2a30      	cmp	r2, #48	@ 0x30
 8011eb2:	f040 80b2 	bne.w	801201a <_strtod_l+0x1a2>
 8011eb6:	786a      	ldrb	r2, [r5, #1]
 8011eb8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011ebc:	2a58      	cmp	r2, #88	@ 0x58
 8011ebe:	d16e      	bne.n	8011f9e <_strtod_l+0x126>
 8011ec0:	9302      	str	r3, [sp, #8]
 8011ec2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011ec4:	9301      	str	r3, [sp, #4]
 8011ec6:	ab1a      	add	r3, sp, #104	@ 0x68
 8011ec8:	9300      	str	r3, [sp, #0]
 8011eca:	4a8f      	ldr	r2, [pc, #572]	@ (8012108 <_strtod_l+0x290>)
 8011ecc:	9805      	ldr	r0, [sp, #20]
 8011ece:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011ed0:	a919      	add	r1, sp, #100	@ 0x64
 8011ed2:	f001 f917 	bl	8013104 <__gethex>
 8011ed6:	f010 060f 	ands.w	r6, r0, #15
 8011eda:	4604      	mov	r4, r0
 8011edc:	d005      	beq.n	8011eea <_strtod_l+0x72>
 8011ede:	2e06      	cmp	r6, #6
 8011ee0:	d128      	bne.n	8011f34 <_strtod_l+0xbc>
 8011ee2:	3501      	adds	r5, #1
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	9519      	str	r5, [sp, #100]	@ 0x64
 8011ee8:	930e      	str	r3, [sp, #56]	@ 0x38
 8011eea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	f040 858e 	bne.w	8012a0e <_strtod_l+0xb96>
 8011ef2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011ef4:	b1cb      	cbz	r3, 8011f2a <_strtod_l+0xb2>
 8011ef6:	4652      	mov	r2, sl
 8011ef8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8011efc:	ec43 2b10 	vmov	d0, r2, r3
 8011f00:	b01f      	add	sp, #124	@ 0x7c
 8011f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f06:	2920      	cmp	r1, #32
 8011f08:	d1ce      	bne.n	8011ea8 <_strtod_l+0x30>
 8011f0a:	3201      	adds	r2, #1
 8011f0c:	e7c1      	b.n	8011e92 <_strtod_l+0x1a>
 8011f0e:	292d      	cmp	r1, #45	@ 0x2d
 8011f10:	d1ca      	bne.n	8011ea8 <_strtod_l+0x30>
 8011f12:	2101      	movs	r1, #1
 8011f14:	910e      	str	r1, [sp, #56]	@ 0x38
 8011f16:	1c51      	adds	r1, r2, #1
 8011f18:	9119      	str	r1, [sp, #100]	@ 0x64
 8011f1a:	7852      	ldrb	r2, [r2, #1]
 8011f1c:	2a00      	cmp	r2, #0
 8011f1e:	d1c5      	bne.n	8011eac <_strtod_l+0x34>
 8011f20:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011f22:	9419      	str	r4, [sp, #100]	@ 0x64
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	f040 8570 	bne.w	8012a0a <_strtod_l+0xb92>
 8011f2a:	4652      	mov	r2, sl
 8011f2c:	465b      	mov	r3, fp
 8011f2e:	e7e5      	b.n	8011efc <_strtod_l+0x84>
 8011f30:	2100      	movs	r1, #0
 8011f32:	e7ef      	b.n	8011f14 <_strtod_l+0x9c>
 8011f34:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011f36:	b13a      	cbz	r2, 8011f48 <_strtod_l+0xd0>
 8011f38:	2135      	movs	r1, #53	@ 0x35
 8011f3a:	a81c      	add	r0, sp, #112	@ 0x70
 8011f3c:	f7ff ff38 	bl	8011db0 <__copybits>
 8011f40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011f42:	9805      	ldr	r0, [sp, #20]
 8011f44:	f7ff fb0e 	bl	8011564 <_Bfree>
 8011f48:	3e01      	subs	r6, #1
 8011f4a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8011f4c:	2e04      	cmp	r6, #4
 8011f4e:	d806      	bhi.n	8011f5e <_strtod_l+0xe6>
 8011f50:	e8df f006 	tbb	[pc, r6]
 8011f54:	201d0314 	.word	0x201d0314
 8011f58:	14          	.byte	0x14
 8011f59:	00          	.byte	0x00
 8011f5a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8011f5e:	05e1      	lsls	r1, r4, #23
 8011f60:	bf48      	it	mi
 8011f62:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8011f66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011f6a:	0d1b      	lsrs	r3, r3, #20
 8011f6c:	051b      	lsls	r3, r3, #20
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d1bb      	bne.n	8011eea <_strtod_l+0x72>
 8011f72:	f7fe fbe1 	bl	8010738 <__errno>
 8011f76:	2322      	movs	r3, #34	@ 0x22
 8011f78:	6003      	str	r3, [r0, #0]
 8011f7a:	e7b6      	b.n	8011eea <_strtod_l+0x72>
 8011f7c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8011f80:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8011f84:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8011f88:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011f8c:	e7e7      	b.n	8011f5e <_strtod_l+0xe6>
 8011f8e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8012110 <_strtod_l+0x298>
 8011f92:	e7e4      	b.n	8011f5e <_strtod_l+0xe6>
 8011f94:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8011f98:	f04f 3aff 	mov.w	sl, #4294967295
 8011f9c:	e7df      	b.n	8011f5e <_strtod_l+0xe6>
 8011f9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011fa0:	1c5a      	adds	r2, r3, #1
 8011fa2:	9219      	str	r2, [sp, #100]	@ 0x64
 8011fa4:	785b      	ldrb	r3, [r3, #1]
 8011fa6:	2b30      	cmp	r3, #48	@ 0x30
 8011fa8:	d0f9      	beq.n	8011f9e <_strtod_l+0x126>
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d09d      	beq.n	8011eea <_strtod_l+0x72>
 8011fae:	2301      	movs	r3, #1
 8011fb0:	2700      	movs	r7, #0
 8011fb2:	9308      	str	r3, [sp, #32]
 8011fb4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011fb6:	930c      	str	r3, [sp, #48]	@ 0x30
 8011fb8:	970b      	str	r7, [sp, #44]	@ 0x2c
 8011fba:	46b9      	mov	r9, r7
 8011fbc:	220a      	movs	r2, #10
 8011fbe:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8011fc0:	7805      	ldrb	r5, [r0, #0]
 8011fc2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8011fc6:	b2d9      	uxtb	r1, r3
 8011fc8:	2909      	cmp	r1, #9
 8011fca:	d928      	bls.n	801201e <_strtod_l+0x1a6>
 8011fcc:	494f      	ldr	r1, [pc, #316]	@ (801210c <_strtod_l+0x294>)
 8011fce:	2201      	movs	r2, #1
 8011fd0:	f000 ffd6 	bl	8012f80 <strncmp>
 8011fd4:	2800      	cmp	r0, #0
 8011fd6:	d032      	beq.n	801203e <_strtod_l+0x1c6>
 8011fd8:	2000      	movs	r0, #0
 8011fda:	462a      	mov	r2, r5
 8011fdc:	900a      	str	r0, [sp, #40]	@ 0x28
 8011fde:	464d      	mov	r5, r9
 8011fe0:	4603      	mov	r3, r0
 8011fe2:	2a65      	cmp	r2, #101	@ 0x65
 8011fe4:	d001      	beq.n	8011fea <_strtod_l+0x172>
 8011fe6:	2a45      	cmp	r2, #69	@ 0x45
 8011fe8:	d114      	bne.n	8012014 <_strtod_l+0x19c>
 8011fea:	b91d      	cbnz	r5, 8011ff4 <_strtod_l+0x17c>
 8011fec:	9a08      	ldr	r2, [sp, #32]
 8011fee:	4302      	orrs	r2, r0
 8011ff0:	d096      	beq.n	8011f20 <_strtod_l+0xa8>
 8011ff2:	2500      	movs	r5, #0
 8011ff4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8011ff6:	1c62      	adds	r2, r4, #1
 8011ff8:	9219      	str	r2, [sp, #100]	@ 0x64
 8011ffa:	7862      	ldrb	r2, [r4, #1]
 8011ffc:	2a2b      	cmp	r2, #43	@ 0x2b
 8011ffe:	d07a      	beq.n	80120f6 <_strtod_l+0x27e>
 8012000:	2a2d      	cmp	r2, #45	@ 0x2d
 8012002:	d07e      	beq.n	8012102 <_strtod_l+0x28a>
 8012004:	f04f 0c00 	mov.w	ip, #0
 8012008:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801200c:	2909      	cmp	r1, #9
 801200e:	f240 8085 	bls.w	801211c <_strtod_l+0x2a4>
 8012012:	9419      	str	r4, [sp, #100]	@ 0x64
 8012014:	f04f 0800 	mov.w	r8, #0
 8012018:	e0a5      	b.n	8012166 <_strtod_l+0x2ee>
 801201a:	2300      	movs	r3, #0
 801201c:	e7c8      	b.n	8011fb0 <_strtod_l+0x138>
 801201e:	f1b9 0f08 	cmp.w	r9, #8
 8012022:	bfd8      	it	le
 8012024:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8012026:	f100 0001 	add.w	r0, r0, #1
 801202a:	bfda      	itte	le
 801202c:	fb02 3301 	mlale	r3, r2, r1, r3
 8012030:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8012032:	fb02 3707 	mlagt	r7, r2, r7, r3
 8012036:	f109 0901 	add.w	r9, r9, #1
 801203a:	9019      	str	r0, [sp, #100]	@ 0x64
 801203c:	e7bf      	b.n	8011fbe <_strtod_l+0x146>
 801203e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012040:	1c5a      	adds	r2, r3, #1
 8012042:	9219      	str	r2, [sp, #100]	@ 0x64
 8012044:	785a      	ldrb	r2, [r3, #1]
 8012046:	f1b9 0f00 	cmp.w	r9, #0
 801204a:	d03b      	beq.n	80120c4 <_strtod_l+0x24c>
 801204c:	900a      	str	r0, [sp, #40]	@ 0x28
 801204e:	464d      	mov	r5, r9
 8012050:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8012054:	2b09      	cmp	r3, #9
 8012056:	d912      	bls.n	801207e <_strtod_l+0x206>
 8012058:	2301      	movs	r3, #1
 801205a:	e7c2      	b.n	8011fe2 <_strtod_l+0x16a>
 801205c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801205e:	1c5a      	adds	r2, r3, #1
 8012060:	9219      	str	r2, [sp, #100]	@ 0x64
 8012062:	785a      	ldrb	r2, [r3, #1]
 8012064:	3001      	adds	r0, #1
 8012066:	2a30      	cmp	r2, #48	@ 0x30
 8012068:	d0f8      	beq.n	801205c <_strtod_l+0x1e4>
 801206a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801206e:	2b08      	cmp	r3, #8
 8012070:	f200 84d2 	bhi.w	8012a18 <_strtod_l+0xba0>
 8012074:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012076:	900a      	str	r0, [sp, #40]	@ 0x28
 8012078:	2000      	movs	r0, #0
 801207a:	930c      	str	r3, [sp, #48]	@ 0x30
 801207c:	4605      	mov	r5, r0
 801207e:	3a30      	subs	r2, #48	@ 0x30
 8012080:	f100 0301 	add.w	r3, r0, #1
 8012084:	d018      	beq.n	80120b8 <_strtod_l+0x240>
 8012086:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012088:	4419      	add	r1, r3
 801208a:	910a      	str	r1, [sp, #40]	@ 0x28
 801208c:	462e      	mov	r6, r5
 801208e:	f04f 0e0a 	mov.w	lr, #10
 8012092:	1c71      	adds	r1, r6, #1
 8012094:	eba1 0c05 	sub.w	ip, r1, r5
 8012098:	4563      	cmp	r3, ip
 801209a:	dc15      	bgt.n	80120c8 <_strtod_l+0x250>
 801209c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80120a0:	182b      	adds	r3, r5, r0
 80120a2:	2b08      	cmp	r3, #8
 80120a4:	f105 0501 	add.w	r5, r5, #1
 80120a8:	4405      	add	r5, r0
 80120aa:	dc1a      	bgt.n	80120e2 <_strtod_l+0x26a>
 80120ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80120ae:	230a      	movs	r3, #10
 80120b0:	fb03 2301 	mla	r3, r3, r1, r2
 80120b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80120b6:	2300      	movs	r3, #0
 80120b8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80120ba:	1c51      	adds	r1, r2, #1
 80120bc:	9119      	str	r1, [sp, #100]	@ 0x64
 80120be:	7852      	ldrb	r2, [r2, #1]
 80120c0:	4618      	mov	r0, r3
 80120c2:	e7c5      	b.n	8012050 <_strtod_l+0x1d8>
 80120c4:	4648      	mov	r0, r9
 80120c6:	e7ce      	b.n	8012066 <_strtod_l+0x1ee>
 80120c8:	2e08      	cmp	r6, #8
 80120ca:	dc05      	bgt.n	80120d8 <_strtod_l+0x260>
 80120cc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80120ce:	fb0e f606 	mul.w	r6, lr, r6
 80120d2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80120d4:	460e      	mov	r6, r1
 80120d6:	e7dc      	b.n	8012092 <_strtod_l+0x21a>
 80120d8:	2910      	cmp	r1, #16
 80120da:	bfd8      	it	le
 80120dc:	fb0e f707 	mulle.w	r7, lr, r7
 80120e0:	e7f8      	b.n	80120d4 <_strtod_l+0x25c>
 80120e2:	2b0f      	cmp	r3, #15
 80120e4:	bfdc      	itt	le
 80120e6:	230a      	movle	r3, #10
 80120e8:	fb03 2707 	mlale	r7, r3, r7, r2
 80120ec:	e7e3      	b.n	80120b6 <_strtod_l+0x23e>
 80120ee:	2300      	movs	r3, #0
 80120f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80120f2:	2301      	movs	r3, #1
 80120f4:	e77a      	b.n	8011fec <_strtod_l+0x174>
 80120f6:	f04f 0c00 	mov.w	ip, #0
 80120fa:	1ca2      	adds	r2, r4, #2
 80120fc:	9219      	str	r2, [sp, #100]	@ 0x64
 80120fe:	78a2      	ldrb	r2, [r4, #2]
 8012100:	e782      	b.n	8012008 <_strtod_l+0x190>
 8012102:	f04f 0c01 	mov.w	ip, #1
 8012106:	e7f8      	b.n	80120fa <_strtod_l+0x282>
 8012108:	0801503c 	.word	0x0801503c
 801210c:	08014e73 	.word	0x08014e73
 8012110:	7ff00000 	.word	0x7ff00000
 8012114:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012116:	1c51      	adds	r1, r2, #1
 8012118:	9119      	str	r1, [sp, #100]	@ 0x64
 801211a:	7852      	ldrb	r2, [r2, #1]
 801211c:	2a30      	cmp	r2, #48	@ 0x30
 801211e:	d0f9      	beq.n	8012114 <_strtod_l+0x29c>
 8012120:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8012124:	2908      	cmp	r1, #8
 8012126:	f63f af75 	bhi.w	8012014 <_strtod_l+0x19c>
 801212a:	3a30      	subs	r2, #48	@ 0x30
 801212c:	9209      	str	r2, [sp, #36]	@ 0x24
 801212e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012130:	920f      	str	r2, [sp, #60]	@ 0x3c
 8012132:	f04f 080a 	mov.w	r8, #10
 8012136:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012138:	1c56      	adds	r6, r2, #1
 801213a:	9619      	str	r6, [sp, #100]	@ 0x64
 801213c:	7852      	ldrb	r2, [r2, #1]
 801213e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8012142:	f1be 0f09 	cmp.w	lr, #9
 8012146:	d939      	bls.n	80121bc <_strtod_l+0x344>
 8012148:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801214a:	1a76      	subs	r6, r6, r1
 801214c:	2e08      	cmp	r6, #8
 801214e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8012152:	dc03      	bgt.n	801215c <_strtod_l+0x2e4>
 8012154:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012156:	4588      	cmp	r8, r1
 8012158:	bfa8      	it	ge
 801215a:	4688      	movge	r8, r1
 801215c:	f1bc 0f00 	cmp.w	ip, #0
 8012160:	d001      	beq.n	8012166 <_strtod_l+0x2ee>
 8012162:	f1c8 0800 	rsb	r8, r8, #0
 8012166:	2d00      	cmp	r5, #0
 8012168:	d14e      	bne.n	8012208 <_strtod_l+0x390>
 801216a:	9908      	ldr	r1, [sp, #32]
 801216c:	4308      	orrs	r0, r1
 801216e:	f47f aebc 	bne.w	8011eea <_strtod_l+0x72>
 8012172:	2b00      	cmp	r3, #0
 8012174:	f47f aed4 	bne.w	8011f20 <_strtod_l+0xa8>
 8012178:	2a69      	cmp	r2, #105	@ 0x69
 801217a:	d028      	beq.n	80121ce <_strtod_l+0x356>
 801217c:	dc25      	bgt.n	80121ca <_strtod_l+0x352>
 801217e:	2a49      	cmp	r2, #73	@ 0x49
 8012180:	d025      	beq.n	80121ce <_strtod_l+0x356>
 8012182:	2a4e      	cmp	r2, #78	@ 0x4e
 8012184:	f47f aecc 	bne.w	8011f20 <_strtod_l+0xa8>
 8012188:	499a      	ldr	r1, [pc, #616]	@ (80123f4 <_strtod_l+0x57c>)
 801218a:	a819      	add	r0, sp, #100	@ 0x64
 801218c:	f001 f9dc 	bl	8013548 <__match>
 8012190:	2800      	cmp	r0, #0
 8012192:	f43f aec5 	beq.w	8011f20 <_strtod_l+0xa8>
 8012196:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012198:	781b      	ldrb	r3, [r3, #0]
 801219a:	2b28      	cmp	r3, #40	@ 0x28
 801219c:	d12e      	bne.n	80121fc <_strtod_l+0x384>
 801219e:	4996      	ldr	r1, [pc, #600]	@ (80123f8 <_strtod_l+0x580>)
 80121a0:	aa1c      	add	r2, sp, #112	@ 0x70
 80121a2:	a819      	add	r0, sp, #100	@ 0x64
 80121a4:	f001 f9e4 	bl	8013570 <__hexnan>
 80121a8:	2805      	cmp	r0, #5
 80121aa:	d127      	bne.n	80121fc <_strtod_l+0x384>
 80121ac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80121ae:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80121b2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80121b6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80121ba:	e696      	b.n	8011eea <_strtod_l+0x72>
 80121bc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80121be:	fb08 2101 	mla	r1, r8, r1, r2
 80121c2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80121c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80121c8:	e7b5      	b.n	8012136 <_strtod_l+0x2be>
 80121ca:	2a6e      	cmp	r2, #110	@ 0x6e
 80121cc:	e7da      	b.n	8012184 <_strtod_l+0x30c>
 80121ce:	498b      	ldr	r1, [pc, #556]	@ (80123fc <_strtod_l+0x584>)
 80121d0:	a819      	add	r0, sp, #100	@ 0x64
 80121d2:	f001 f9b9 	bl	8013548 <__match>
 80121d6:	2800      	cmp	r0, #0
 80121d8:	f43f aea2 	beq.w	8011f20 <_strtod_l+0xa8>
 80121dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80121de:	4988      	ldr	r1, [pc, #544]	@ (8012400 <_strtod_l+0x588>)
 80121e0:	3b01      	subs	r3, #1
 80121e2:	a819      	add	r0, sp, #100	@ 0x64
 80121e4:	9319      	str	r3, [sp, #100]	@ 0x64
 80121e6:	f001 f9af 	bl	8013548 <__match>
 80121ea:	b910      	cbnz	r0, 80121f2 <_strtod_l+0x37a>
 80121ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80121ee:	3301      	adds	r3, #1
 80121f0:	9319      	str	r3, [sp, #100]	@ 0x64
 80121f2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8012410 <_strtod_l+0x598>
 80121f6:	f04f 0a00 	mov.w	sl, #0
 80121fa:	e676      	b.n	8011eea <_strtod_l+0x72>
 80121fc:	4881      	ldr	r0, [pc, #516]	@ (8012404 <_strtod_l+0x58c>)
 80121fe:	f000 fedf 	bl	8012fc0 <nan>
 8012202:	ec5b ab10 	vmov	sl, fp, d0
 8012206:	e670      	b.n	8011eea <_strtod_l+0x72>
 8012208:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801220a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801220c:	eba8 0303 	sub.w	r3, r8, r3
 8012210:	f1b9 0f00 	cmp.w	r9, #0
 8012214:	bf08      	it	eq
 8012216:	46a9      	moveq	r9, r5
 8012218:	2d10      	cmp	r5, #16
 801221a:	9309      	str	r3, [sp, #36]	@ 0x24
 801221c:	462c      	mov	r4, r5
 801221e:	bfa8      	it	ge
 8012220:	2410      	movge	r4, #16
 8012222:	f7ee f977 	bl	8000514 <__aeabi_ui2d>
 8012226:	2d09      	cmp	r5, #9
 8012228:	4682      	mov	sl, r0
 801222a:	468b      	mov	fp, r1
 801222c:	dc13      	bgt.n	8012256 <_strtod_l+0x3de>
 801222e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012230:	2b00      	cmp	r3, #0
 8012232:	f43f ae5a 	beq.w	8011eea <_strtod_l+0x72>
 8012236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012238:	dd78      	ble.n	801232c <_strtod_l+0x4b4>
 801223a:	2b16      	cmp	r3, #22
 801223c:	dc5f      	bgt.n	80122fe <_strtod_l+0x486>
 801223e:	4972      	ldr	r1, [pc, #456]	@ (8012408 <_strtod_l+0x590>)
 8012240:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012244:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012248:	4652      	mov	r2, sl
 801224a:	465b      	mov	r3, fp
 801224c:	f7ee f9dc 	bl	8000608 <__aeabi_dmul>
 8012250:	4682      	mov	sl, r0
 8012252:	468b      	mov	fp, r1
 8012254:	e649      	b.n	8011eea <_strtod_l+0x72>
 8012256:	4b6c      	ldr	r3, [pc, #432]	@ (8012408 <_strtod_l+0x590>)
 8012258:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801225c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8012260:	f7ee f9d2 	bl	8000608 <__aeabi_dmul>
 8012264:	4682      	mov	sl, r0
 8012266:	4638      	mov	r0, r7
 8012268:	468b      	mov	fp, r1
 801226a:	f7ee f953 	bl	8000514 <__aeabi_ui2d>
 801226e:	4602      	mov	r2, r0
 8012270:	460b      	mov	r3, r1
 8012272:	4650      	mov	r0, sl
 8012274:	4659      	mov	r1, fp
 8012276:	f7ee f811 	bl	800029c <__adddf3>
 801227a:	2d0f      	cmp	r5, #15
 801227c:	4682      	mov	sl, r0
 801227e:	468b      	mov	fp, r1
 8012280:	ddd5      	ble.n	801222e <_strtod_l+0x3b6>
 8012282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012284:	1b2c      	subs	r4, r5, r4
 8012286:	441c      	add	r4, r3
 8012288:	2c00      	cmp	r4, #0
 801228a:	f340 8093 	ble.w	80123b4 <_strtod_l+0x53c>
 801228e:	f014 030f 	ands.w	r3, r4, #15
 8012292:	d00a      	beq.n	80122aa <_strtod_l+0x432>
 8012294:	495c      	ldr	r1, [pc, #368]	@ (8012408 <_strtod_l+0x590>)
 8012296:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801229a:	4652      	mov	r2, sl
 801229c:	465b      	mov	r3, fp
 801229e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80122a2:	f7ee f9b1 	bl	8000608 <__aeabi_dmul>
 80122a6:	4682      	mov	sl, r0
 80122a8:	468b      	mov	fp, r1
 80122aa:	f034 040f 	bics.w	r4, r4, #15
 80122ae:	d073      	beq.n	8012398 <_strtod_l+0x520>
 80122b0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80122b4:	dd49      	ble.n	801234a <_strtod_l+0x4d2>
 80122b6:	2400      	movs	r4, #0
 80122b8:	46a0      	mov	r8, r4
 80122ba:	940b      	str	r4, [sp, #44]	@ 0x2c
 80122bc:	46a1      	mov	r9, r4
 80122be:	9a05      	ldr	r2, [sp, #20]
 80122c0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8012410 <_strtod_l+0x598>
 80122c4:	2322      	movs	r3, #34	@ 0x22
 80122c6:	6013      	str	r3, [r2, #0]
 80122c8:	f04f 0a00 	mov.w	sl, #0
 80122cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	f43f ae0b 	beq.w	8011eea <_strtod_l+0x72>
 80122d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80122d6:	9805      	ldr	r0, [sp, #20]
 80122d8:	f7ff f944 	bl	8011564 <_Bfree>
 80122dc:	9805      	ldr	r0, [sp, #20]
 80122de:	4649      	mov	r1, r9
 80122e0:	f7ff f940 	bl	8011564 <_Bfree>
 80122e4:	9805      	ldr	r0, [sp, #20]
 80122e6:	4641      	mov	r1, r8
 80122e8:	f7ff f93c 	bl	8011564 <_Bfree>
 80122ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80122ee:	9805      	ldr	r0, [sp, #20]
 80122f0:	f7ff f938 	bl	8011564 <_Bfree>
 80122f4:	9805      	ldr	r0, [sp, #20]
 80122f6:	4621      	mov	r1, r4
 80122f8:	f7ff f934 	bl	8011564 <_Bfree>
 80122fc:	e5f5      	b.n	8011eea <_strtod_l+0x72>
 80122fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012300:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8012304:	4293      	cmp	r3, r2
 8012306:	dbbc      	blt.n	8012282 <_strtod_l+0x40a>
 8012308:	4c3f      	ldr	r4, [pc, #252]	@ (8012408 <_strtod_l+0x590>)
 801230a:	f1c5 050f 	rsb	r5, r5, #15
 801230e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8012312:	4652      	mov	r2, sl
 8012314:	465b      	mov	r3, fp
 8012316:	e9d1 0100 	ldrd	r0, r1, [r1]
 801231a:	f7ee f975 	bl	8000608 <__aeabi_dmul>
 801231e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012320:	1b5d      	subs	r5, r3, r5
 8012322:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8012326:	e9d4 2300 	ldrd	r2, r3, [r4]
 801232a:	e78f      	b.n	801224c <_strtod_l+0x3d4>
 801232c:	3316      	adds	r3, #22
 801232e:	dba8      	blt.n	8012282 <_strtod_l+0x40a>
 8012330:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012332:	eba3 0808 	sub.w	r8, r3, r8
 8012336:	4b34      	ldr	r3, [pc, #208]	@ (8012408 <_strtod_l+0x590>)
 8012338:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801233c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8012340:	4650      	mov	r0, sl
 8012342:	4659      	mov	r1, fp
 8012344:	f7ee fa8a 	bl	800085c <__aeabi_ddiv>
 8012348:	e782      	b.n	8012250 <_strtod_l+0x3d8>
 801234a:	2300      	movs	r3, #0
 801234c:	4f2f      	ldr	r7, [pc, #188]	@ (801240c <_strtod_l+0x594>)
 801234e:	1124      	asrs	r4, r4, #4
 8012350:	4650      	mov	r0, sl
 8012352:	4659      	mov	r1, fp
 8012354:	461e      	mov	r6, r3
 8012356:	2c01      	cmp	r4, #1
 8012358:	dc21      	bgt.n	801239e <_strtod_l+0x526>
 801235a:	b10b      	cbz	r3, 8012360 <_strtod_l+0x4e8>
 801235c:	4682      	mov	sl, r0
 801235e:	468b      	mov	fp, r1
 8012360:	492a      	ldr	r1, [pc, #168]	@ (801240c <_strtod_l+0x594>)
 8012362:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8012366:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801236a:	4652      	mov	r2, sl
 801236c:	465b      	mov	r3, fp
 801236e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012372:	f7ee f949 	bl	8000608 <__aeabi_dmul>
 8012376:	4b26      	ldr	r3, [pc, #152]	@ (8012410 <_strtod_l+0x598>)
 8012378:	460a      	mov	r2, r1
 801237a:	400b      	ands	r3, r1
 801237c:	4925      	ldr	r1, [pc, #148]	@ (8012414 <_strtod_l+0x59c>)
 801237e:	428b      	cmp	r3, r1
 8012380:	4682      	mov	sl, r0
 8012382:	d898      	bhi.n	80122b6 <_strtod_l+0x43e>
 8012384:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8012388:	428b      	cmp	r3, r1
 801238a:	bf86      	itte	hi
 801238c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8012418 <_strtod_l+0x5a0>
 8012390:	f04f 3aff 	movhi.w	sl, #4294967295
 8012394:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8012398:	2300      	movs	r3, #0
 801239a:	9308      	str	r3, [sp, #32]
 801239c:	e076      	b.n	801248c <_strtod_l+0x614>
 801239e:	07e2      	lsls	r2, r4, #31
 80123a0:	d504      	bpl.n	80123ac <_strtod_l+0x534>
 80123a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80123a6:	f7ee f92f 	bl	8000608 <__aeabi_dmul>
 80123aa:	2301      	movs	r3, #1
 80123ac:	3601      	adds	r6, #1
 80123ae:	1064      	asrs	r4, r4, #1
 80123b0:	3708      	adds	r7, #8
 80123b2:	e7d0      	b.n	8012356 <_strtod_l+0x4de>
 80123b4:	d0f0      	beq.n	8012398 <_strtod_l+0x520>
 80123b6:	4264      	negs	r4, r4
 80123b8:	f014 020f 	ands.w	r2, r4, #15
 80123bc:	d00a      	beq.n	80123d4 <_strtod_l+0x55c>
 80123be:	4b12      	ldr	r3, [pc, #72]	@ (8012408 <_strtod_l+0x590>)
 80123c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80123c4:	4650      	mov	r0, sl
 80123c6:	4659      	mov	r1, fp
 80123c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123cc:	f7ee fa46 	bl	800085c <__aeabi_ddiv>
 80123d0:	4682      	mov	sl, r0
 80123d2:	468b      	mov	fp, r1
 80123d4:	1124      	asrs	r4, r4, #4
 80123d6:	d0df      	beq.n	8012398 <_strtod_l+0x520>
 80123d8:	2c1f      	cmp	r4, #31
 80123da:	dd1f      	ble.n	801241c <_strtod_l+0x5a4>
 80123dc:	2400      	movs	r4, #0
 80123de:	46a0      	mov	r8, r4
 80123e0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80123e2:	46a1      	mov	r9, r4
 80123e4:	9a05      	ldr	r2, [sp, #20]
 80123e6:	2322      	movs	r3, #34	@ 0x22
 80123e8:	f04f 0a00 	mov.w	sl, #0
 80123ec:	f04f 0b00 	mov.w	fp, #0
 80123f0:	6013      	str	r3, [r2, #0]
 80123f2:	e76b      	b.n	80122cc <_strtod_l+0x454>
 80123f4:	08014d61 	.word	0x08014d61
 80123f8:	08015028 	.word	0x08015028
 80123fc:	08014d59 	.word	0x08014d59
 8012400:	08014d90 	.word	0x08014d90
 8012404:	08014ec9 	.word	0x08014ec9
 8012408:	08014f60 	.word	0x08014f60
 801240c:	08014f38 	.word	0x08014f38
 8012410:	7ff00000 	.word	0x7ff00000
 8012414:	7ca00000 	.word	0x7ca00000
 8012418:	7fefffff 	.word	0x7fefffff
 801241c:	f014 0310 	ands.w	r3, r4, #16
 8012420:	bf18      	it	ne
 8012422:	236a      	movne	r3, #106	@ 0x6a
 8012424:	4ea9      	ldr	r6, [pc, #676]	@ (80126cc <_strtod_l+0x854>)
 8012426:	9308      	str	r3, [sp, #32]
 8012428:	4650      	mov	r0, sl
 801242a:	4659      	mov	r1, fp
 801242c:	2300      	movs	r3, #0
 801242e:	07e7      	lsls	r7, r4, #31
 8012430:	d504      	bpl.n	801243c <_strtod_l+0x5c4>
 8012432:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012436:	f7ee f8e7 	bl	8000608 <__aeabi_dmul>
 801243a:	2301      	movs	r3, #1
 801243c:	1064      	asrs	r4, r4, #1
 801243e:	f106 0608 	add.w	r6, r6, #8
 8012442:	d1f4      	bne.n	801242e <_strtod_l+0x5b6>
 8012444:	b10b      	cbz	r3, 801244a <_strtod_l+0x5d2>
 8012446:	4682      	mov	sl, r0
 8012448:	468b      	mov	fp, r1
 801244a:	9b08      	ldr	r3, [sp, #32]
 801244c:	b1b3      	cbz	r3, 801247c <_strtod_l+0x604>
 801244e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8012452:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8012456:	2b00      	cmp	r3, #0
 8012458:	4659      	mov	r1, fp
 801245a:	dd0f      	ble.n	801247c <_strtod_l+0x604>
 801245c:	2b1f      	cmp	r3, #31
 801245e:	dd56      	ble.n	801250e <_strtod_l+0x696>
 8012460:	2b34      	cmp	r3, #52	@ 0x34
 8012462:	bfde      	ittt	le
 8012464:	f04f 33ff 	movle.w	r3, #4294967295
 8012468:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801246c:	4093      	lslle	r3, r2
 801246e:	f04f 0a00 	mov.w	sl, #0
 8012472:	bfcc      	ite	gt
 8012474:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8012478:	ea03 0b01 	andle.w	fp, r3, r1
 801247c:	2200      	movs	r2, #0
 801247e:	2300      	movs	r3, #0
 8012480:	4650      	mov	r0, sl
 8012482:	4659      	mov	r1, fp
 8012484:	f7ee fb28 	bl	8000ad8 <__aeabi_dcmpeq>
 8012488:	2800      	cmp	r0, #0
 801248a:	d1a7      	bne.n	80123dc <_strtod_l+0x564>
 801248c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801248e:	9300      	str	r3, [sp, #0]
 8012490:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012492:	9805      	ldr	r0, [sp, #20]
 8012494:	462b      	mov	r3, r5
 8012496:	464a      	mov	r2, r9
 8012498:	f7ff f8cc 	bl	8011634 <__s2b>
 801249c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801249e:	2800      	cmp	r0, #0
 80124a0:	f43f af09 	beq.w	80122b6 <_strtod_l+0x43e>
 80124a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80124a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80124a8:	2a00      	cmp	r2, #0
 80124aa:	eba3 0308 	sub.w	r3, r3, r8
 80124ae:	bfa8      	it	ge
 80124b0:	2300      	movge	r3, #0
 80124b2:	9312      	str	r3, [sp, #72]	@ 0x48
 80124b4:	2400      	movs	r4, #0
 80124b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80124ba:	9316      	str	r3, [sp, #88]	@ 0x58
 80124bc:	46a0      	mov	r8, r4
 80124be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80124c0:	9805      	ldr	r0, [sp, #20]
 80124c2:	6859      	ldr	r1, [r3, #4]
 80124c4:	f7ff f80e 	bl	80114e4 <_Balloc>
 80124c8:	4681      	mov	r9, r0
 80124ca:	2800      	cmp	r0, #0
 80124cc:	f43f aef7 	beq.w	80122be <_strtod_l+0x446>
 80124d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80124d2:	691a      	ldr	r2, [r3, #16]
 80124d4:	3202      	adds	r2, #2
 80124d6:	f103 010c 	add.w	r1, r3, #12
 80124da:	0092      	lsls	r2, r2, #2
 80124dc:	300c      	adds	r0, #12
 80124de:	f000 fd61 	bl	8012fa4 <memcpy>
 80124e2:	ec4b ab10 	vmov	d0, sl, fp
 80124e6:	9805      	ldr	r0, [sp, #20]
 80124e8:	aa1c      	add	r2, sp, #112	@ 0x70
 80124ea:	a91b      	add	r1, sp, #108	@ 0x6c
 80124ec:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80124f0:	f7ff fbd4 	bl	8011c9c <__d2b>
 80124f4:	901a      	str	r0, [sp, #104]	@ 0x68
 80124f6:	2800      	cmp	r0, #0
 80124f8:	f43f aee1 	beq.w	80122be <_strtod_l+0x446>
 80124fc:	9805      	ldr	r0, [sp, #20]
 80124fe:	2101      	movs	r1, #1
 8012500:	f7ff f92e 	bl	8011760 <__i2b>
 8012504:	4680      	mov	r8, r0
 8012506:	b948      	cbnz	r0, 801251c <_strtod_l+0x6a4>
 8012508:	f04f 0800 	mov.w	r8, #0
 801250c:	e6d7      	b.n	80122be <_strtod_l+0x446>
 801250e:	f04f 32ff 	mov.w	r2, #4294967295
 8012512:	fa02 f303 	lsl.w	r3, r2, r3
 8012516:	ea03 0a0a 	and.w	sl, r3, sl
 801251a:	e7af      	b.n	801247c <_strtod_l+0x604>
 801251c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801251e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8012520:	2d00      	cmp	r5, #0
 8012522:	bfab      	itete	ge
 8012524:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8012526:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8012528:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801252a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801252c:	bfac      	ite	ge
 801252e:	18ef      	addge	r7, r5, r3
 8012530:	1b5e      	sublt	r6, r3, r5
 8012532:	9b08      	ldr	r3, [sp, #32]
 8012534:	1aed      	subs	r5, r5, r3
 8012536:	4415      	add	r5, r2
 8012538:	4b65      	ldr	r3, [pc, #404]	@ (80126d0 <_strtod_l+0x858>)
 801253a:	3d01      	subs	r5, #1
 801253c:	429d      	cmp	r5, r3
 801253e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8012542:	da50      	bge.n	80125e6 <_strtod_l+0x76e>
 8012544:	1b5b      	subs	r3, r3, r5
 8012546:	2b1f      	cmp	r3, #31
 8012548:	eba2 0203 	sub.w	r2, r2, r3
 801254c:	f04f 0101 	mov.w	r1, #1
 8012550:	dc3d      	bgt.n	80125ce <_strtod_l+0x756>
 8012552:	fa01 f303 	lsl.w	r3, r1, r3
 8012556:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012558:	2300      	movs	r3, #0
 801255a:	9310      	str	r3, [sp, #64]	@ 0x40
 801255c:	18bd      	adds	r5, r7, r2
 801255e:	9b08      	ldr	r3, [sp, #32]
 8012560:	42af      	cmp	r7, r5
 8012562:	4416      	add	r6, r2
 8012564:	441e      	add	r6, r3
 8012566:	463b      	mov	r3, r7
 8012568:	bfa8      	it	ge
 801256a:	462b      	movge	r3, r5
 801256c:	42b3      	cmp	r3, r6
 801256e:	bfa8      	it	ge
 8012570:	4633      	movge	r3, r6
 8012572:	2b00      	cmp	r3, #0
 8012574:	bfc2      	ittt	gt
 8012576:	1aed      	subgt	r5, r5, r3
 8012578:	1af6      	subgt	r6, r6, r3
 801257a:	1aff      	subgt	r7, r7, r3
 801257c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801257e:	2b00      	cmp	r3, #0
 8012580:	dd16      	ble.n	80125b0 <_strtod_l+0x738>
 8012582:	4641      	mov	r1, r8
 8012584:	9805      	ldr	r0, [sp, #20]
 8012586:	461a      	mov	r2, r3
 8012588:	f7ff f9a2 	bl	80118d0 <__pow5mult>
 801258c:	4680      	mov	r8, r0
 801258e:	2800      	cmp	r0, #0
 8012590:	d0ba      	beq.n	8012508 <_strtod_l+0x690>
 8012592:	4601      	mov	r1, r0
 8012594:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8012596:	9805      	ldr	r0, [sp, #20]
 8012598:	f7ff f8f8 	bl	801178c <__multiply>
 801259c:	900a      	str	r0, [sp, #40]	@ 0x28
 801259e:	2800      	cmp	r0, #0
 80125a0:	f43f ae8d 	beq.w	80122be <_strtod_l+0x446>
 80125a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80125a6:	9805      	ldr	r0, [sp, #20]
 80125a8:	f7fe ffdc 	bl	8011564 <_Bfree>
 80125ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80125ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80125b0:	2d00      	cmp	r5, #0
 80125b2:	dc1d      	bgt.n	80125f0 <_strtod_l+0x778>
 80125b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	dd23      	ble.n	8012602 <_strtod_l+0x78a>
 80125ba:	4649      	mov	r1, r9
 80125bc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80125be:	9805      	ldr	r0, [sp, #20]
 80125c0:	f7ff f986 	bl	80118d0 <__pow5mult>
 80125c4:	4681      	mov	r9, r0
 80125c6:	b9e0      	cbnz	r0, 8012602 <_strtod_l+0x78a>
 80125c8:	f04f 0900 	mov.w	r9, #0
 80125cc:	e677      	b.n	80122be <_strtod_l+0x446>
 80125ce:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80125d2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80125d6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80125da:	35e2      	adds	r5, #226	@ 0xe2
 80125dc:	fa01 f305 	lsl.w	r3, r1, r5
 80125e0:	9310      	str	r3, [sp, #64]	@ 0x40
 80125e2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80125e4:	e7ba      	b.n	801255c <_strtod_l+0x6e4>
 80125e6:	2300      	movs	r3, #0
 80125e8:	9310      	str	r3, [sp, #64]	@ 0x40
 80125ea:	2301      	movs	r3, #1
 80125ec:	9313      	str	r3, [sp, #76]	@ 0x4c
 80125ee:	e7b5      	b.n	801255c <_strtod_l+0x6e4>
 80125f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80125f2:	9805      	ldr	r0, [sp, #20]
 80125f4:	462a      	mov	r2, r5
 80125f6:	f7ff f9c5 	bl	8011984 <__lshift>
 80125fa:	901a      	str	r0, [sp, #104]	@ 0x68
 80125fc:	2800      	cmp	r0, #0
 80125fe:	d1d9      	bne.n	80125b4 <_strtod_l+0x73c>
 8012600:	e65d      	b.n	80122be <_strtod_l+0x446>
 8012602:	2e00      	cmp	r6, #0
 8012604:	dd07      	ble.n	8012616 <_strtod_l+0x79e>
 8012606:	4649      	mov	r1, r9
 8012608:	9805      	ldr	r0, [sp, #20]
 801260a:	4632      	mov	r2, r6
 801260c:	f7ff f9ba 	bl	8011984 <__lshift>
 8012610:	4681      	mov	r9, r0
 8012612:	2800      	cmp	r0, #0
 8012614:	d0d8      	beq.n	80125c8 <_strtod_l+0x750>
 8012616:	2f00      	cmp	r7, #0
 8012618:	dd08      	ble.n	801262c <_strtod_l+0x7b4>
 801261a:	4641      	mov	r1, r8
 801261c:	9805      	ldr	r0, [sp, #20]
 801261e:	463a      	mov	r2, r7
 8012620:	f7ff f9b0 	bl	8011984 <__lshift>
 8012624:	4680      	mov	r8, r0
 8012626:	2800      	cmp	r0, #0
 8012628:	f43f ae49 	beq.w	80122be <_strtod_l+0x446>
 801262c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801262e:	9805      	ldr	r0, [sp, #20]
 8012630:	464a      	mov	r2, r9
 8012632:	f7ff fa2f 	bl	8011a94 <__mdiff>
 8012636:	4604      	mov	r4, r0
 8012638:	2800      	cmp	r0, #0
 801263a:	f43f ae40 	beq.w	80122be <_strtod_l+0x446>
 801263e:	68c3      	ldr	r3, [r0, #12]
 8012640:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012642:	2300      	movs	r3, #0
 8012644:	60c3      	str	r3, [r0, #12]
 8012646:	4641      	mov	r1, r8
 8012648:	f7ff fa08 	bl	8011a5c <__mcmp>
 801264c:	2800      	cmp	r0, #0
 801264e:	da45      	bge.n	80126dc <_strtod_l+0x864>
 8012650:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012652:	ea53 030a 	orrs.w	r3, r3, sl
 8012656:	d16b      	bne.n	8012730 <_strtod_l+0x8b8>
 8012658:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801265c:	2b00      	cmp	r3, #0
 801265e:	d167      	bne.n	8012730 <_strtod_l+0x8b8>
 8012660:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012664:	0d1b      	lsrs	r3, r3, #20
 8012666:	051b      	lsls	r3, r3, #20
 8012668:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801266c:	d960      	bls.n	8012730 <_strtod_l+0x8b8>
 801266e:	6963      	ldr	r3, [r4, #20]
 8012670:	b913      	cbnz	r3, 8012678 <_strtod_l+0x800>
 8012672:	6923      	ldr	r3, [r4, #16]
 8012674:	2b01      	cmp	r3, #1
 8012676:	dd5b      	ble.n	8012730 <_strtod_l+0x8b8>
 8012678:	4621      	mov	r1, r4
 801267a:	2201      	movs	r2, #1
 801267c:	9805      	ldr	r0, [sp, #20]
 801267e:	f7ff f981 	bl	8011984 <__lshift>
 8012682:	4641      	mov	r1, r8
 8012684:	4604      	mov	r4, r0
 8012686:	f7ff f9e9 	bl	8011a5c <__mcmp>
 801268a:	2800      	cmp	r0, #0
 801268c:	dd50      	ble.n	8012730 <_strtod_l+0x8b8>
 801268e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012692:	9a08      	ldr	r2, [sp, #32]
 8012694:	0d1b      	lsrs	r3, r3, #20
 8012696:	051b      	lsls	r3, r3, #20
 8012698:	2a00      	cmp	r2, #0
 801269a:	d06a      	beq.n	8012772 <_strtod_l+0x8fa>
 801269c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80126a0:	d867      	bhi.n	8012772 <_strtod_l+0x8fa>
 80126a2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80126a6:	f67f ae9d 	bls.w	80123e4 <_strtod_l+0x56c>
 80126aa:	4b0a      	ldr	r3, [pc, #40]	@ (80126d4 <_strtod_l+0x85c>)
 80126ac:	4650      	mov	r0, sl
 80126ae:	4659      	mov	r1, fp
 80126b0:	2200      	movs	r2, #0
 80126b2:	f7ed ffa9 	bl	8000608 <__aeabi_dmul>
 80126b6:	4b08      	ldr	r3, [pc, #32]	@ (80126d8 <_strtod_l+0x860>)
 80126b8:	400b      	ands	r3, r1
 80126ba:	4682      	mov	sl, r0
 80126bc:	468b      	mov	fp, r1
 80126be:	2b00      	cmp	r3, #0
 80126c0:	f47f ae08 	bne.w	80122d4 <_strtod_l+0x45c>
 80126c4:	9a05      	ldr	r2, [sp, #20]
 80126c6:	2322      	movs	r3, #34	@ 0x22
 80126c8:	6013      	str	r3, [r2, #0]
 80126ca:	e603      	b.n	80122d4 <_strtod_l+0x45c>
 80126cc:	08015050 	.word	0x08015050
 80126d0:	fffffc02 	.word	0xfffffc02
 80126d4:	39500000 	.word	0x39500000
 80126d8:	7ff00000 	.word	0x7ff00000
 80126dc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80126e0:	d165      	bne.n	80127ae <_strtod_l+0x936>
 80126e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80126e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80126e8:	b35a      	cbz	r2, 8012742 <_strtod_l+0x8ca>
 80126ea:	4a9f      	ldr	r2, [pc, #636]	@ (8012968 <_strtod_l+0xaf0>)
 80126ec:	4293      	cmp	r3, r2
 80126ee:	d12b      	bne.n	8012748 <_strtod_l+0x8d0>
 80126f0:	9b08      	ldr	r3, [sp, #32]
 80126f2:	4651      	mov	r1, sl
 80126f4:	b303      	cbz	r3, 8012738 <_strtod_l+0x8c0>
 80126f6:	4b9d      	ldr	r3, [pc, #628]	@ (801296c <_strtod_l+0xaf4>)
 80126f8:	465a      	mov	r2, fp
 80126fa:	4013      	ands	r3, r2
 80126fc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8012700:	f04f 32ff 	mov.w	r2, #4294967295
 8012704:	d81b      	bhi.n	801273e <_strtod_l+0x8c6>
 8012706:	0d1b      	lsrs	r3, r3, #20
 8012708:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801270c:	fa02 f303 	lsl.w	r3, r2, r3
 8012710:	4299      	cmp	r1, r3
 8012712:	d119      	bne.n	8012748 <_strtod_l+0x8d0>
 8012714:	4b96      	ldr	r3, [pc, #600]	@ (8012970 <_strtod_l+0xaf8>)
 8012716:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012718:	429a      	cmp	r2, r3
 801271a:	d102      	bne.n	8012722 <_strtod_l+0x8aa>
 801271c:	3101      	adds	r1, #1
 801271e:	f43f adce 	beq.w	80122be <_strtod_l+0x446>
 8012722:	4b92      	ldr	r3, [pc, #584]	@ (801296c <_strtod_l+0xaf4>)
 8012724:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012726:	401a      	ands	r2, r3
 8012728:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801272c:	f04f 0a00 	mov.w	sl, #0
 8012730:	9b08      	ldr	r3, [sp, #32]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d1b9      	bne.n	80126aa <_strtod_l+0x832>
 8012736:	e5cd      	b.n	80122d4 <_strtod_l+0x45c>
 8012738:	f04f 33ff 	mov.w	r3, #4294967295
 801273c:	e7e8      	b.n	8012710 <_strtod_l+0x898>
 801273e:	4613      	mov	r3, r2
 8012740:	e7e6      	b.n	8012710 <_strtod_l+0x898>
 8012742:	ea53 030a 	orrs.w	r3, r3, sl
 8012746:	d0a2      	beq.n	801268e <_strtod_l+0x816>
 8012748:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801274a:	b1db      	cbz	r3, 8012784 <_strtod_l+0x90c>
 801274c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801274e:	4213      	tst	r3, r2
 8012750:	d0ee      	beq.n	8012730 <_strtod_l+0x8b8>
 8012752:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012754:	9a08      	ldr	r2, [sp, #32]
 8012756:	4650      	mov	r0, sl
 8012758:	4659      	mov	r1, fp
 801275a:	b1bb      	cbz	r3, 801278c <_strtod_l+0x914>
 801275c:	f7ff fb6c 	bl	8011e38 <sulp>
 8012760:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012764:	ec53 2b10 	vmov	r2, r3, d0
 8012768:	f7ed fd98 	bl	800029c <__adddf3>
 801276c:	4682      	mov	sl, r0
 801276e:	468b      	mov	fp, r1
 8012770:	e7de      	b.n	8012730 <_strtod_l+0x8b8>
 8012772:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8012776:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801277a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801277e:	f04f 3aff 	mov.w	sl, #4294967295
 8012782:	e7d5      	b.n	8012730 <_strtod_l+0x8b8>
 8012784:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012786:	ea13 0f0a 	tst.w	r3, sl
 801278a:	e7e1      	b.n	8012750 <_strtod_l+0x8d8>
 801278c:	f7ff fb54 	bl	8011e38 <sulp>
 8012790:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012794:	ec53 2b10 	vmov	r2, r3, d0
 8012798:	f7ed fd7e 	bl	8000298 <__aeabi_dsub>
 801279c:	2200      	movs	r2, #0
 801279e:	2300      	movs	r3, #0
 80127a0:	4682      	mov	sl, r0
 80127a2:	468b      	mov	fp, r1
 80127a4:	f7ee f998 	bl	8000ad8 <__aeabi_dcmpeq>
 80127a8:	2800      	cmp	r0, #0
 80127aa:	d0c1      	beq.n	8012730 <_strtod_l+0x8b8>
 80127ac:	e61a      	b.n	80123e4 <_strtod_l+0x56c>
 80127ae:	4641      	mov	r1, r8
 80127b0:	4620      	mov	r0, r4
 80127b2:	f7ff facb 	bl	8011d4c <__ratio>
 80127b6:	ec57 6b10 	vmov	r6, r7, d0
 80127ba:	2200      	movs	r2, #0
 80127bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80127c0:	4630      	mov	r0, r6
 80127c2:	4639      	mov	r1, r7
 80127c4:	f7ee f99c 	bl	8000b00 <__aeabi_dcmple>
 80127c8:	2800      	cmp	r0, #0
 80127ca:	d06f      	beq.n	80128ac <_strtod_l+0xa34>
 80127cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d17a      	bne.n	80128c8 <_strtod_l+0xa50>
 80127d2:	f1ba 0f00 	cmp.w	sl, #0
 80127d6:	d158      	bne.n	801288a <_strtod_l+0xa12>
 80127d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80127da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d15a      	bne.n	8012898 <_strtod_l+0xa20>
 80127e2:	4b64      	ldr	r3, [pc, #400]	@ (8012974 <_strtod_l+0xafc>)
 80127e4:	2200      	movs	r2, #0
 80127e6:	4630      	mov	r0, r6
 80127e8:	4639      	mov	r1, r7
 80127ea:	f7ee f97f 	bl	8000aec <__aeabi_dcmplt>
 80127ee:	2800      	cmp	r0, #0
 80127f0:	d159      	bne.n	80128a6 <_strtod_l+0xa2e>
 80127f2:	4630      	mov	r0, r6
 80127f4:	4639      	mov	r1, r7
 80127f6:	4b60      	ldr	r3, [pc, #384]	@ (8012978 <_strtod_l+0xb00>)
 80127f8:	2200      	movs	r2, #0
 80127fa:	f7ed ff05 	bl	8000608 <__aeabi_dmul>
 80127fe:	4606      	mov	r6, r0
 8012800:	460f      	mov	r7, r1
 8012802:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8012806:	9606      	str	r6, [sp, #24]
 8012808:	9307      	str	r3, [sp, #28]
 801280a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801280e:	4d57      	ldr	r5, [pc, #348]	@ (801296c <_strtod_l+0xaf4>)
 8012810:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012814:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012816:	401d      	ands	r5, r3
 8012818:	4b58      	ldr	r3, [pc, #352]	@ (801297c <_strtod_l+0xb04>)
 801281a:	429d      	cmp	r5, r3
 801281c:	f040 80b2 	bne.w	8012984 <_strtod_l+0xb0c>
 8012820:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012822:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8012826:	ec4b ab10 	vmov	d0, sl, fp
 801282a:	f7ff f9c7 	bl	8011bbc <__ulp>
 801282e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012832:	ec51 0b10 	vmov	r0, r1, d0
 8012836:	f7ed fee7 	bl	8000608 <__aeabi_dmul>
 801283a:	4652      	mov	r2, sl
 801283c:	465b      	mov	r3, fp
 801283e:	f7ed fd2d 	bl	800029c <__adddf3>
 8012842:	460b      	mov	r3, r1
 8012844:	4949      	ldr	r1, [pc, #292]	@ (801296c <_strtod_l+0xaf4>)
 8012846:	4a4e      	ldr	r2, [pc, #312]	@ (8012980 <_strtod_l+0xb08>)
 8012848:	4019      	ands	r1, r3
 801284a:	4291      	cmp	r1, r2
 801284c:	4682      	mov	sl, r0
 801284e:	d942      	bls.n	80128d6 <_strtod_l+0xa5e>
 8012850:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012852:	4b47      	ldr	r3, [pc, #284]	@ (8012970 <_strtod_l+0xaf8>)
 8012854:	429a      	cmp	r2, r3
 8012856:	d103      	bne.n	8012860 <_strtod_l+0x9e8>
 8012858:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801285a:	3301      	adds	r3, #1
 801285c:	f43f ad2f 	beq.w	80122be <_strtod_l+0x446>
 8012860:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8012970 <_strtod_l+0xaf8>
 8012864:	f04f 3aff 	mov.w	sl, #4294967295
 8012868:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801286a:	9805      	ldr	r0, [sp, #20]
 801286c:	f7fe fe7a 	bl	8011564 <_Bfree>
 8012870:	9805      	ldr	r0, [sp, #20]
 8012872:	4649      	mov	r1, r9
 8012874:	f7fe fe76 	bl	8011564 <_Bfree>
 8012878:	9805      	ldr	r0, [sp, #20]
 801287a:	4641      	mov	r1, r8
 801287c:	f7fe fe72 	bl	8011564 <_Bfree>
 8012880:	9805      	ldr	r0, [sp, #20]
 8012882:	4621      	mov	r1, r4
 8012884:	f7fe fe6e 	bl	8011564 <_Bfree>
 8012888:	e619      	b.n	80124be <_strtod_l+0x646>
 801288a:	f1ba 0f01 	cmp.w	sl, #1
 801288e:	d103      	bne.n	8012898 <_strtod_l+0xa20>
 8012890:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012892:	2b00      	cmp	r3, #0
 8012894:	f43f ada6 	beq.w	80123e4 <_strtod_l+0x56c>
 8012898:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8012948 <_strtod_l+0xad0>
 801289c:	4f35      	ldr	r7, [pc, #212]	@ (8012974 <_strtod_l+0xafc>)
 801289e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80128a2:	2600      	movs	r6, #0
 80128a4:	e7b1      	b.n	801280a <_strtod_l+0x992>
 80128a6:	4f34      	ldr	r7, [pc, #208]	@ (8012978 <_strtod_l+0xb00>)
 80128a8:	2600      	movs	r6, #0
 80128aa:	e7aa      	b.n	8012802 <_strtod_l+0x98a>
 80128ac:	4b32      	ldr	r3, [pc, #200]	@ (8012978 <_strtod_l+0xb00>)
 80128ae:	4630      	mov	r0, r6
 80128b0:	4639      	mov	r1, r7
 80128b2:	2200      	movs	r2, #0
 80128b4:	f7ed fea8 	bl	8000608 <__aeabi_dmul>
 80128b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80128ba:	4606      	mov	r6, r0
 80128bc:	460f      	mov	r7, r1
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d09f      	beq.n	8012802 <_strtod_l+0x98a>
 80128c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80128c6:	e7a0      	b.n	801280a <_strtod_l+0x992>
 80128c8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012950 <_strtod_l+0xad8>
 80128cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80128d0:	ec57 6b17 	vmov	r6, r7, d7
 80128d4:	e799      	b.n	801280a <_strtod_l+0x992>
 80128d6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80128da:	9b08      	ldr	r3, [sp, #32]
 80128dc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d1c1      	bne.n	8012868 <_strtod_l+0x9f0>
 80128e4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80128e8:	0d1b      	lsrs	r3, r3, #20
 80128ea:	051b      	lsls	r3, r3, #20
 80128ec:	429d      	cmp	r5, r3
 80128ee:	d1bb      	bne.n	8012868 <_strtod_l+0x9f0>
 80128f0:	4630      	mov	r0, r6
 80128f2:	4639      	mov	r1, r7
 80128f4:	f7ee f9e8 	bl	8000cc8 <__aeabi_d2lz>
 80128f8:	f7ed fe58 	bl	80005ac <__aeabi_l2d>
 80128fc:	4602      	mov	r2, r0
 80128fe:	460b      	mov	r3, r1
 8012900:	4630      	mov	r0, r6
 8012902:	4639      	mov	r1, r7
 8012904:	f7ed fcc8 	bl	8000298 <__aeabi_dsub>
 8012908:	460b      	mov	r3, r1
 801290a:	4602      	mov	r2, r0
 801290c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8012910:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8012914:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012916:	ea46 060a 	orr.w	r6, r6, sl
 801291a:	431e      	orrs	r6, r3
 801291c:	d06f      	beq.n	80129fe <_strtod_l+0xb86>
 801291e:	a30e      	add	r3, pc, #56	@ (adr r3, 8012958 <_strtod_l+0xae0>)
 8012920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012924:	f7ee f8e2 	bl	8000aec <__aeabi_dcmplt>
 8012928:	2800      	cmp	r0, #0
 801292a:	f47f acd3 	bne.w	80122d4 <_strtod_l+0x45c>
 801292e:	a30c      	add	r3, pc, #48	@ (adr r3, 8012960 <_strtod_l+0xae8>)
 8012930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012934:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012938:	f7ee f8f6 	bl	8000b28 <__aeabi_dcmpgt>
 801293c:	2800      	cmp	r0, #0
 801293e:	d093      	beq.n	8012868 <_strtod_l+0x9f0>
 8012940:	e4c8      	b.n	80122d4 <_strtod_l+0x45c>
 8012942:	bf00      	nop
 8012944:	f3af 8000 	nop.w
 8012948:	00000000 	.word	0x00000000
 801294c:	bff00000 	.word	0xbff00000
 8012950:	00000000 	.word	0x00000000
 8012954:	3ff00000 	.word	0x3ff00000
 8012958:	94a03595 	.word	0x94a03595
 801295c:	3fdfffff 	.word	0x3fdfffff
 8012960:	35afe535 	.word	0x35afe535
 8012964:	3fe00000 	.word	0x3fe00000
 8012968:	000fffff 	.word	0x000fffff
 801296c:	7ff00000 	.word	0x7ff00000
 8012970:	7fefffff 	.word	0x7fefffff
 8012974:	3ff00000 	.word	0x3ff00000
 8012978:	3fe00000 	.word	0x3fe00000
 801297c:	7fe00000 	.word	0x7fe00000
 8012980:	7c9fffff 	.word	0x7c9fffff
 8012984:	9b08      	ldr	r3, [sp, #32]
 8012986:	b323      	cbz	r3, 80129d2 <_strtod_l+0xb5a>
 8012988:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801298c:	d821      	bhi.n	80129d2 <_strtod_l+0xb5a>
 801298e:	a328      	add	r3, pc, #160	@ (adr r3, 8012a30 <_strtod_l+0xbb8>)
 8012990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012994:	4630      	mov	r0, r6
 8012996:	4639      	mov	r1, r7
 8012998:	f7ee f8b2 	bl	8000b00 <__aeabi_dcmple>
 801299c:	b1a0      	cbz	r0, 80129c8 <_strtod_l+0xb50>
 801299e:	4639      	mov	r1, r7
 80129a0:	4630      	mov	r0, r6
 80129a2:	f7ee f909 	bl	8000bb8 <__aeabi_d2uiz>
 80129a6:	2801      	cmp	r0, #1
 80129a8:	bf38      	it	cc
 80129aa:	2001      	movcc	r0, #1
 80129ac:	f7ed fdb2 	bl	8000514 <__aeabi_ui2d>
 80129b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80129b2:	4606      	mov	r6, r0
 80129b4:	460f      	mov	r7, r1
 80129b6:	b9fb      	cbnz	r3, 80129f8 <_strtod_l+0xb80>
 80129b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80129bc:	9014      	str	r0, [sp, #80]	@ 0x50
 80129be:	9315      	str	r3, [sp, #84]	@ 0x54
 80129c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80129c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80129c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80129ca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80129ce:	1b5b      	subs	r3, r3, r5
 80129d0:	9311      	str	r3, [sp, #68]	@ 0x44
 80129d2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80129d6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80129da:	f7ff f8ef 	bl	8011bbc <__ulp>
 80129de:	4650      	mov	r0, sl
 80129e0:	ec53 2b10 	vmov	r2, r3, d0
 80129e4:	4659      	mov	r1, fp
 80129e6:	f7ed fe0f 	bl	8000608 <__aeabi_dmul>
 80129ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80129ee:	f7ed fc55 	bl	800029c <__adddf3>
 80129f2:	4682      	mov	sl, r0
 80129f4:	468b      	mov	fp, r1
 80129f6:	e770      	b.n	80128da <_strtod_l+0xa62>
 80129f8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80129fc:	e7e0      	b.n	80129c0 <_strtod_l+0xb48>
 80129fe:	a30e      	add	r3, pc, #56	@ (adr r3, 8012a38 <_strtod_l+0xbc0>)
 8012a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a04:	f7ee f872 	bl	8000aec <__aeabi_dcmplt>
 8012a08:	e798      	b.n	801293c <_strtod_l+0xac4>
 8012a0a:	2300      	movs	r3, #0
 8012a0c:	930e      	str	r3, [sp, #56]	@ 0x38
 8012a0e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8012a10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012a12:	6013      	str	r3, [r2, #0]
 8012a14:	f7ff ba6d 	b.w	8011ef2 <_strtod_l+0x7a>
 8012a18:	2a65      	cmp	r2, #101	@ 0x65
 8012a1a:	f43f ab68 	beq.w	80120ee <_strtod_l+0x276>
 8012a1e:	2a45      	cmp	r2, #69	@ 0x45
 8012a20:	f43f ab65 	beq.w	80120ee <_strtod_l+0x276>
 8012a24:	2301      	movs	r3, #1
 8012a26:	f7ff bba0 	b.w	801216a <_strtod_l+0x2f2>
 8012a2a:	bf00      	nop
 8012a2c:	f3af 8000 	nop.w
 8012a30:	ffc00000 	.word	0xffc00000
 8012a34:	41dfffff 	.word	0x41dfffff
 8012a38:	94a03595 	.word	0x94a03595
 8012a3c:	3fcfffff 	.word	0x3fcfffff

08012a40 <_strtod_r>:
 8012a40:	4b01      	ldr	r3, [pc, #4]	@ (8012a48 <_strtod_r+0x8>)
 8012a42:	f7ff ba19 	b.w	8011e78 <_strtod_l>
 8012a46:	bf00      	nop
 8012a48:	20000168 	.word	0x20000168

08012a4c <_strtol_l.isra.0>:
 8012a4c:	2b24      	cmp	r3, #36	@ 0x24
 8012a4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a52:	4686      	mov	lr, r0
 8012a54:	4690      	mov	r8, r2
 8012a56:	d801      	bhi.n	8012a5c <_strtol_l.isra.0+0x10>
 8012a58:	2b01      	cmp	r3, #1
 8012a5a:	d106      	bne.n	8012a6a <_strtol_l.isra.0+0x1e>
 8012a5c:	f7fd fe6c 	bl	8010738 <__errno>
 8012a60:	2316      	movs	r3, #22
 8012a62:	6003      	str	r3, [r0, #0]
 8012a64:	2000      	movs	r0, #0
 8012a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a6a:	4834      	ldr	r0, [pc, #208]	@ (8012b3c <_strtol_l.isra.0+0xf0>)
 8012a6c:	460d      	mov	r5, r1
 8012a6e:	462a      	mov	r2, r5
 8012a70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012a74:	5d06      	ldrb	r6, [r0, r4]
 8012a76:	f016 0608 	ands.w	r6, r6, #8
 8012a7a:	d1f8      	bne.n	8012a6e <_strtol_l.isra.0+0x22>
 8012a7c:	2c2d      	cmp	r4, #45	@ 0x2d
 8012a7e:	d110      	bne.n	8012aa2 <_strtol_l.isra.0+0x56>
 8012a80:	782c      	ldrb	r4, [r5, #0]
 8012a82:	2601      	movs	r6, #1
 8012a84:	1c95      	adds	r5, r2, #2
 8012a86:	f033 0210 	bics.w	r2, r3, #16
 8012a8a:	d115      	bne.n	8012ab8 <_strtol_l.isra.0+0x6c>
 8012a8c:	2c30      	cmp	r4, #48	@ 0x30
 8012a8e:	d10d      	bne.n	8012aac <_strtol_l.isra.0+0x60>
 8012a90:	782a      	ldrb	r2, [r5, #0]
 8012a92:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012a96:	2a58      	cmp	r2, #88	@ 0x58
 8012a98:	d108      	bne.n	8012aac <_strtol_l.isra.0+0x60>
 8012a9a:	786c      	ldrb	r4, [r5, #1]
 8012a9c:	3502      	adds	r5, #2
 8012a9e:	2310      	movs	r3, #16
 8012aa0:	e00a      	b.n	8012ab8 <_strtol_l.isra.0+0x6c>
 8012aa2:	2c2b      	cmp	r4, #43	@ 0x2b
 8012aa4:	bf04      	itt	eq
 8012aa6:	782c      	ldrbeq	r4, [r5, #0]
 8012aa8:	1c95      	addeq	r5, r2, #2
 8012aaa:	e7ec      	b.n	8012a86 <_strtol_l.isra.0+0x3a>
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d1f6      	bne.n	8012a9e <_strtol_l.isra.0+0x52>
 8012ab0:	2c30      	cmp	r4, #48	@ 0x30
 8012ab2:	bf14      	ite	ne
 8012ab4:	230a      	movne	r3, #10
 8012ab6:	2308      	moveq	r3, #8
 8012ab8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012abc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012ac0:	2200      	movs	r2, #0
 8012ac2:	fbbc f9f3 	udiv	r9, ip, r3
 8012ac6:	4610      	mov	r0, r2
 8012ac8:	fb03 ca19 	mls	sl, r3, r9, ip
 8012acc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8012ad0:	2f09      	cmp	r7, #9
 8012ad2:	d80f      	bhi.n	8012af4 <_strtol_l.isra.0+0xa8>
 8012ad4:	463c      	mov	r4, r7
 8012ad6:	42a3      	cmp	r3, r4
 8012ad8:	dd1b      	ble.n	8012b12 <_strtol_l.isra.0+0xc6>
 8012ada:	1c57      	adds	r7, r2, #1
 8012adc:	d007      	beq.n	8012aee <_strtol_l.isra.0+0xa2>
 8012ade:	4581      	cmp	r9, r0
 8012ae0:	d314      	bcc.n	8012b0c <_strtol_l.isra.0+0xc0>
 8012ae2:	d101      	bne.n	8012ae8 <_strtol_l.isra.0+0x9c>
 8012ae4:	45a2      	cmp	sl, r4
 8012ae6:	db11      	blt.n	8012b0c <_strtol_l.isra.0+0xc0>
 8012ae8:	fb00 4003 	mla	r0, r0, r3, r4
 8012aec:	2201      	movs	r2, #1
 8012aee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012af2:	e7eb      	b.n	8012acc <_strtol_l.isra.0+0x80>
 8012af4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012af8:	2f19      	cmp	r7, #25
 8012afa:	d801      	bhi.n	8012b00 <_strtol_l.isra.0+0xb4>
 8012afc:	3c37      	subs	r4, #55	@ 0x37
 8012afe:	e7ea      	b.n	8012ad6 <_strtol_l.isra.0+0x8a>
 8012b00:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012b04:	2f19      	cmp	r7, #25
 8012b06:	d804      	bhi.n	8012b12 <_strtol_l.isra.0+0xc6>
 8012b08:	3c57      	subs	r4, #87	@ 0x57
 8012b0a:	e7e4      	b.n	8012ad6 <_strtol_l.isra.0+0x8a>
 8012b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8012b10:	e7ed      	b.n	8012aee <_strtol_l.isra.0+0xa2>
 8012b12:	1c53      	adds	r3, r2, #1
 8012b14:	d108      	bne.n	8012b28 <_strtol_l.isra.0+0xdc>
 8012b16:	2322      	movs	r3, #34	@ 0x22
 8012b18:	f8ce 3000 	str.w	r3, [lr]
 8012b1c:	4660      	mov	r0, ip
 8012b1e:	f1b8 0f00 	cmp.w	r8, #0
 8012b22:	d0a0      	beq.n	8012a66 <_strtol_l.isra.0+0x1a>
 8012b24:	1e69      	subs	r1, r5, #1
 8012b26:	e006      	b.n	8012b36 <_strtol_l.isra.0+0xea>
 8012b28:	b106      	cbz	r6, 8012b2c <_strtol_l.isra.0+0xe0>
 8012b2a:	4240      	negs	r0, r0
 8012b2c:	f1b8 0f00 	cmp.w	r8, #0
 8012b30:	d099      	beq.n	8012a66 <_strtol_l.isra.0+0x1a>
 8012b32:	2a00      	cmp	r2, #0
 8012b34:	d1f6      	bne.n	8012b24 <_strtol_l.isra.0+0xd8>
 8012b36:	f8c8 1000 	str.w	r1, [r8]
 8012b3a:	e794      	b.n	8012a66 <_strtol_l.isra.0+0x1a>
 8012b3c:	08015079 	.word	0x08015079

08012b40 <_strtol_r>:
 8012b40:	f7ff bf84 	b.w	8012a4c <_strtol_l.isra.0>

08012b44 <__ssputs_r>:
 8012b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b48:	688e      	ldr	r6, [r1, #8]
 8012b4a:	461f      	mov	r7, r3
 8012b4c:	42be      	cmp	r6, r7
 8012b4e:	680b      	ldr	r3, [r1, #0]
 8012b50:	4682      	mov	sl, r0
 8012b52:	460c      	mov	r4, r1
 8012b54:	4690      	mov	r8, r2
 8012b56:	d82d      	bhi.n	8012bb4 <__ssputs_r+0x70>
 8012b58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012b5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012b60:	d026      	beq.n	8012bb0 <__ssputs_r+0x6c>
 8012b62:	6965      	ldr	r5, [r4, #20]
 8012b64:	6909      	ldr	r1, [r1, #16]
 8012b66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012b6a:	eba3 0901 	sub.w	r9, r3, r1
 8012b6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012b72:	1c7b      	adds	r3, r7, #1
 8012b74:	444b      	add	r3, r9
 8012b76:	106d      	asrs	r5, r5, #1
 8012b78:	429d      	cmp	r5, r3
 8012b7a:	bf38      	it	cc
 8012b7c:	461d      	movcc	r5, r3
 8012b7e:	0553      	lsls	r3, r2, #21
 8012b80:	d527      	bpl.n	8012bd2 <__ssputs_r+0x8e>
 8012b82:	4629      	mov	r1, r5
 8012b84:	f7fc fd5e 	bl	800f644 <_malloc_r>
 8012b88:	4606      	mov	r6, r0
 8012b8a:	b360      	cbz	r0, 8012be6 <__ssputs_r+0xa2>
 8012b8c:	6921      	ldr	r1, [r4, #16]
 8012b8e:	464a      	mov	r2, r9
 8012b90:	f000 fa08 	bl	8012fa4 <memcpy>
 8012b94:	89a3      	ldrh	r3, [r4, #12]
 8012b96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012b9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012b9e:	81a3      	strh	r3, [r4, #12]
 8012ba0:	6126      	str	r6, [r4, #16]
 8012ba2:	6165      	str	r5, [r4, #20]
 8012ba4:	444e      	add	r6, r9
 8012ba6:	eba5 0509 	sub.w	r5, r5, r9
 8012baa:	6026      	str	r6, [r4, #0]
 8012bac:	60a5      	str	r5, [r4, #8]
 8012bae:	463e      	mov	r6, r7
 8012bb0:	42be      	cmp	r6, r7
 8012bb2:	d900      	bls.n	8012bb6 <__ssputs_r+0x72>
 8012bb4:	463e      	mov	r6, r7
 8012bb6:	6820      	ldr	r0, [r4, #0]
 8012bb8:	4632      	mov	r2, r6
 8012bba:	4641      	mov	r1, r8
 8012bbc:	f000 f9c6 	bl	8012f4c <memmove>
 8012bc0:	68a3      	ldr	r3, [r4, #8]
 8012bc2:	1b9b      	subs	r3, r3, r6
 8012bc4:	60a3      	str	r3, [r4, #8]
 8012bc6:	6823      	ldr	r3, [r4, #0]
 8012bc8:	4433      	add	r3, r6
 8012bca:	6023      	str	r3, [r4, #0]
 8012bcc:	2000      	movs	r0, #0
 8012bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bd2:	462a      	mov	r2, r5
 8012bd4:	f000 fd79 	bl	80136ca <_realloc_r>
 8012bd8:	4606      	mov	r6, r0
 8012bda:	2800      	cmp	r0, #0
 8012bdc:	d1e0      	bne.n	8012ba0 <__ssputs_r+0x5c>
 8012bde:	6921      	ldr	r1, [r4, #16]
 8012be0:	4650      	mov	r0, sl
 8012be2:	f7fe fc35 	bl	8011450 <_free_r>
 8012be6:	230c      	movs	r3, #12
 8012be8:	f8ca 3000 	str.w	r3, [sl]
 8012bec:	89a3      	ldrh	r3, [r4, #12]
 8012bee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012bf2:	81a3      	strh	r3, [r4, #12]
 8012bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8012bf8:	e7e9      	b.n	8012bce <__ssputs_r+0x8a>
	...

08012bfc <_svfiprintf_r>:
 8012bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c00:	4698      	mov	r8, r3
 8012c02:	898b      	ldrh	r3, [r1, #12]
 8012c04:	061b      	lsls	r3, r3, #24
 8012c06:	b09d      	sub	sp, #116	@ 0x74
 8012c08:	4607      	mov	r7, r0
 8012c0a:	460d      	mov	r5, r1
 8012c0c:	4614      	mov	r4, r2
 8012c0e:	d510      	bpl.n	8012c32 <_svfiprintf_r+0x36>
 8012c10:	690b      	ldr	r3, [r1, #16]
 8012c12:	b973      	cbnz	r3, 8012c32 <_svfiprintf_r+0x36>
 8012c14:	2140      	movs	r1, #64	@ 0x40
 8012c16:	f7fc fd15 	bl	800f644 <_malloc_r>
 8012c1a:	6028      	str	r0, [r5, #0]
 8012c1c:	6128      	str	r0, [r5, #16]
 8012c1e:	b930      	cbnz	r0, 8012c2e <_svfiprintf_r+0x32>
 8012c20:	230c      	movs	r3, #12
 8012c22:	603b      	str	r3, [r7, #0]
 8012c24:	f04f 30ff 	mov.w	r0, #4294967295
 8012c28:	b01d      	add	sp, #116	@ 0x74
 8012c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c2e:	2340      	movs	r3, #64	@ 0x40
 8012c30:	616b      	str	r3, [r5, #20]
 8012c32:	2300      	movs	r3, #0
 8012c34:	9309      	str	r3, [sp, #36]	@ 0x24
 8012c36:	2320      	movs	r3, #32
 8012c38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012c3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c40:	2330      	movs	r3, #48	@ 0x30
 8012c42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012de0 <_svfiprintf_r+0x1e4>
 8012c46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012c4a:	f04f 0901 	mov.w	r9, #1
 8012c4e:	4623      	mov	r3, r4
 8012c50:	469a      	mov	sl, r3
 8012c52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c56:	b10a      	cbz	r2, 8012c5c <_svfiprintf_r+0x60>
 8012c58:	2a25      	cmp	r2, #37	@ 0x25
 8012c5a:	d1f9      	bne.n	8012c50 <_svfiprintf_r+0x54>
 8012c5c:	ebba 0b04 	subs.w	fp, sl, r4
 8012c60:	d00b      	beq.n	8012c7a <_svfiprintf_r+0x7e>
 8012c62:	465b      	mov	r3, fp
 8012c64:	4622      	mov	r2, r4
 8012c66:	4629      	mov	r1, r5
 8012c68:	4638      	mov	r0, r7
 8012c6a:	f7ff ff6b 	bl	8012b44 <__ssputs_r>
 8012c6e:	3001      	adds	r0, #1
 8012c70:	f000 80a7 	beq.w	8012dc2 <_svfiprintf_r+0x1c6>
 8012c74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012c76:	445a      	add	r2, fp
 8012c78:	9209      	str	r2, [sp, #36]	@ 0x24
 8012c7a:	f89a 3000 	ldrb.w	r3, [sl]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	f000 809f 	beq.w	8012dc2 <_svfiprintf_r+0x1c6>
 8012c84:	2300      	movs	r3, #0
 8012c86:	f04f 32ff 	mov.w	r2, #4294967295
 8012c8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c8e:	f10a 0a01 	add.w	sl, sl, #1
 8012c92:	9304      	str	r3, [sp, #16]
 8012c94:	9307      	str	r3, [sp, #28]
 8012c96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012c9a:	931a      	str	r3, [sp, #104]	@ 0x68
 8012c9c:	4654      	mov	r4, sl
 8012c9e:	2205      	movs	r2, #5
 8012ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ca4:	484e      	ldr	r0, [pc, #312]	@ (8012de0 <_svfiprintf_r+0x1e4>)
 8012ca6:	f7ed fa9b 	bl	80001e0 <memchr>
 8012caa:	9a04      	ldr	r2, [sp, #16]
 8012cac:	b9d8      	cbnz	r0, 8012ce6 <_svfiprintf_r+0xea>
 8012cae:	06d0      	lsls	r0, r2, #27
 8012cb0:	bf44      	itt	mi
 8012cb2:	2320      	movmi	r3, #32
 8012cb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012cb8:	0711      	lsls	r1, r2, #28
 8012cba:	bf44      	itt	mi
 8012cbc:	232b      	movmi	r3, #43	@ 0x2b
 8012cbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8012cc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8012cc8:	d015      	beq.n	8012cf6 <_svfiprintf_r+0xfa>
 8012cca:	9a07      	ldr	r2, [sp, #28]
 8012ccc:	4654      	mov	r4, sl
 8012cce:	2000      	movs	r0, #0
 8012cd0:	f04f 0c0a 	mov.w	ip, #10
 8012cd4:	4621      	mov	r1, r4
 8012cd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012cda:	3b30      	subs	r3, #48	@ 0x30
 8012cdc:	2b09      	cmp	r3, #9
 8012cde:	d94b      	bls.n	8012d78 <_svfiprintf_r+0x17c>
 8012ce0:	b1b0      	cbz	r0, 8012d10 <_svfiprintf_r+0x114>
 8012ce2:	9207      	str	r2, [sp, #28]
 8012ce4:	e014      	b.n	8012d10 <_svfiprintf_r+0x114>
 8012ce6:	eba0 0308 	sub.w	r3, r0, r8
 8012cea:	fa09 f303 	lsl.w	r3, r9, r3
 8012cee:	4313      	orrs	r3, r2
 8012cf0:	9304      	str	r3, [sp, #16]
 8012cf2:	46a2      	mov	sl, r4
 8012cf4:	e7d2      	b.n	8012c9c <_svfiprintf_r+0xa0>
 8012cf6:	9b03      	ldr	r3, [sp, #12]
 8012cf8:	1d19      	adds	r1, r3, #4
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	9103      	str	r1, [sp, #12]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	bfbb      	ittet	lt
 8012d02:	425b      	neglt	r3, r3
 8012d04:	f042 0202 	orrlt.w	r2, r2, #2
 8012d08:	9307      	strge	r3, [sp, #28]
 8012d0a:	9307      	strlt	r3, [sp, #28]
 8012d0c:	bfb8      	it	lt
 8012d0e:	9204      	strlt	r2, [sp, #16]
 8012d10:	7823      	ldrb	r3, [r4, #0]
 8012d12:	2b2e      	cmp	r3, #46	@ 0x2e
 8012d14:	d10a      	bne.n	8012d2c <_svfiprintf_r+0x130>
 8012d16:	7863      	ldrb	r3, [r4, #1]
 8012d18:	2b2a      	cmp	r3, #42	@ 0x2a
 8012d1a:	d132      	bne.n	8012d82 <_svfiprintf_r+0x186>
 8012d1c:	9b03      	ldr	r3, [sp, #12]
 8012d1e:	1d1a      	adds	r2, r3, #4
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	9203      	str	r2, [sp, #12]
 8012d24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012d28:	3402      	adds	r4, #2
 8012d2a:	9305      	str	r3, [sp, #20]
 8012d2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012df0 <_svfiprintf_r+0x1f4>
 8012d30:	7821      	ldrb	r1, [r4, #0]
 8012d32:	2203      	movs	r2, #3
 8012d34:	4650      	mov	r0, sl
 8012d36:	f7ed fa53 	bl	80001e0 <memchr>
 8012d3a:	b138      	cbz	r0, 8012d4c <_svfiprintf_r+0x150>
 8012d3c:	9b04      	ldr	r3, [sp, #16]
 8012d3e:	eba0 000a 	sub.w	r0, r0, sl
 8012d42:	2240      	movs	r2, #64	@ 0x40
 8012d44:	4082      	lsls	r2, r0
 8012d46:	4313      	orrs	r3, r2
 8012d48:	3401      	adds	r4, #1
 8012d4a:	9304      	str	r3, [sp, #16]
 8012d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d50:	4824      	ldr	r0, [pc, #144]	@ (8012de4 <_svfiprintf_r+0x1e8>)
 8012d52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012d56:	2206      	movs	r2, #6
 8012d58:	f7ed fa42 	bl	80001e0 <memchr>
 8012d5c:	2800      	cmp	r0, #0
 8012d5e:	d036      	beq.n	8012dce <_svfiprintf_r+0x1d2>
 8012d60:	4b21      	ldr	r3, [pc, #132]	@ (8012de8 <_svfiprintf_r+0x1ec>)
 8012d62:	bb1b      	cbnz	r3, 8012dac <_svfiprintf_r+0x1b0>
 8012d64:	9b03      	ldr	r3, [sp, #12]
 8012d66:	3307      	adds	r3, #7
 8012d68:	f023 0307 	bic.w	r3, r3, #7
 8012d6c:	3308      	adds	r3, #8
 8012d6e:	9303      	str	r3, [sp, #12]
 8012d70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d72:	4433      	add	r3, r6
 8012d74:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d76:	e76a      	b.n	8012c4e <_svfiprintf_r+0x52>
 8012d78:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d7c:	460c      	mov	r4, r1
 8012d7e:	2001      	movs	r0, #1
 8012d80:	e7a8      	b.n	8012cd4 <_svfiprintf_r+0xd8>
 8012d82:	2300      	movs	r3, #0
 8012d84:	3401      	adds	r4, #1
 8012d86:	9305      	str	r3, [sp, #20]
 8012d88:	4619      	mov	r1, r3
 8012d8a:	f04f 0c0a 	mov.w	ip, #10
 8012d8e:	4620      	mov	r0, r4
 8012d90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d94:	3a30      	subs	r2, #48	@ 0x30
 8012d96:	2a09      	cmp	r2, #9
 8012d98:	d903      	bls.n	8012da2 <_svfiprintf_r+0x1a6>
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d0c6      	beq.n	8012d2c <_svfiprintf_r+0x130>
 8012d9e:	9105      	str	r1, [sp, #20]
 8012da0:	e7c4      	b.n	8012d2c <_svfiprintf_r+0x130>
 8012da2:	fb0c 2101 	mla	r1, ip, r1, r2
 8012da6:	4604      	mov	r4, r0
 8012da8:	2301      	movs	r3, #1
 8012daa:	e7f0      	b.n	8012d8e <_svfiprintf_r+0x192>
 8012dac:	ab03      	add	r3, sp, #12
 8012dae:	9300      	str	r3, [sp, #0]
 8012db0:	462a      	mov	r2, r5
 8012db2:	4b0e      	ldr	r3, [pc, #56]	@ (8012dec <_svfiprintf_r+0x1f0>)
 8012db4:	a904      	add	r1, sp, #16
 8012db6:	4638      	mov	r0, r7
 8012db8:	f7fc fd70 	bl	800f89c <_printf_float>
 8012dbc:	1c42      	adds	r2, r0, #1
 8012dbe:	4606      	mov	r6, r0
 8012dc0:	d1d6      	bne.n	8012d70 <_svfiprintf_r+0x174>
 8012dc2:	89ab      	ldrh	r3, [r5, #12]
 8012dc4:	065b      	lsls	r3, r3, #25
 8012dc6:	f53f af2d 	bmi.w	8012c24 <_svfiprintf_r+0x28>
 8012dca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012dcc:	e72c      	b.n	8012c28 <_svfiprintf_r+0x2c>
 8012dce:	ab03      	add	r3, sp, #12
 8012dd0:	9300      	str	r3, [sp, #0]
 8012dd2:	462a      	mov	r2, r5
 8012dd4:	4b05      	ldr	r3, [pc, #20]	@ (8012dec <_svfiprintf_r+0x1f0>)
 8012dd6:	a904      	add	r1, sp, #16
 8012dd8:	4638      	mov	r0, r7
 8012dda:	f7fc fff7 	bl	800fdcc <_printf_i>
 8012dde:	e7ed      	b.n	8012dbc <_svfiprintf_r+0x1c0>
 8012de0:	08014e75 	.word	0x08014e75
 8012de4:	08014e7f 	.word	0x08014e7f
 8012de8:	0800f89d 	.word	0x0800f89d
 8012dec:	08012b45 	.word	0x08012b45
 8012df0:	08014e7b 	.word	0x08014e7b

08012df4 <__sflush_r>:
 8012df4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dfc:	0716      	lsls	r6, r2, #28
 8012dfe:	4605      	mov	r5, r0
 8012e00:	460c      	mov	r4, r1
 8012e02:	d454      	bmi.n	8012eae <__sflush_r+0xba>
 8012e04:	684b      	ldr	r3, [r1, #4]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	dc02      	bgt.n	8012e10 <__sflush_r+0x1c>
 8012e0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	dd48      	ble.n	8012ea2 <__sflush_r+0xae>
 8012e10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012e12:	2e00      	cmp	r6, #0
 8012e14:	d045      	beq.n	8012ea2 <__sflush_r+0xae>
 8012e16:	2300      	movs	r3, #0
 8012e18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012e1c:	682f      	ldr	r7, [r5, #0]
 8012e1e:	6a21      	ldr	r1, [r4, #32]
 8012e20:	602b      	str	r3, [r5, #0]
 8012e22:	d030      	beq.n	8012e86 <__sflush_r+0x92>
 8012e24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012e26:	89a3      	ldrh	r3, [r4, #12]
 8012e28:	0759      	lsls	r1, r3, #29
 8012e2a:	d505      	bpl.n	8012e38 <__sflush_r+0x44>
 8012e2c:	6863      	ldr	r3, [r4, #4]
 8012e2e:	1ad2      	subs	r2, r2, r3
 8012e30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012e32:	b10b      	cbz	r3, 8012e38 <__sflush_r+0x44>
 8012e34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012e36:	1ad2      	subs	r2, r2, r3
 8012e38:	2300      	movs	r3, #0
 8012e3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012e3c:	6a21      	ldr	r1, [r4, #32]
 8012e3e:	4628      	mov	r0, r5
 8012e40:	47b0      	blx	r6
 8012e42:	1c43      	adds	r3, r0, #1
 8012e44:	89a3      	ldrh	r3, [r4, #12]
 8012e46:	d106      	bne.n	8012e56 <__sflush_r+0x62>
 8012e48:	6829      	ldr	r1, [r5, #0]
 8012e4a:	291d      	cmp	r1, #29
 8012e4c:	d82b      	bhi.n	8012ea6 <__sflush_r+0xb2>
 8012e4e:	4a2a      	ldr	r2, [pc, #168]	@ (8012ef8 <__sflush_r+0x104>)
 8012e50:	40ca      	lsrs	r2, r1
 8012e52:	07d6      	lsls	r6, r2, #31
 8012e54:	d527      	bpl.n	8012ea6 <__sflush_r+0xb2>
 8012e56:	2200      	movs	r2, #0
 8012e58:	6062      	str	r2, [r4, #4]
 8012e5a:	04d9      	lsls	r1, r3, #19
 8012e5c:	6922      	ldr	r2, [r4, #16]
 8012e5e:	6022      	str	r2, [r4, #0]
 8012e60:	d504      	bpl.n	8012e6c <__sflush_r+0x78>
 8012e62:	1c42      	adds	r2, r0, #1
 8012e64:	d101      	bne.n	8012e6a <__sflush_r+0x76>
 8012e66:	682b      	ldr	r3, [r5, #0]
 8012e68:	b903      	cbnz	r3, 8012e6c <__sflush_r+0x78>
 8012e6a:	6560      	str	r0, [r4, #84]	@ 0x54
 8012e6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012e6e:	602f      	str	r7, [r5, #0]
 8012e70:	b1b9      	cbz	r1, 8012ea2 <__sflush_r+0xae>
 8012e72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012e76:	4299      	cmp	r1, r3
 8012e78:	d002      	beq.n	8012e80 <__sflush_r+0x8c>
 8012e7a:	4628      	mov	r0, r5
 8012e7c:	f7fe fae8 	bl	8011450 <_free_r>
 8012e80:	2300      	movs	r3, #0
 8012e82:	6363      	str	r3, [r4, #52]	@ 0x34
 8012e84:	e00d      	b.n	8012ea2 <__sflush_r+0xae>
 8012e86:	2301      	movs	r3, #1
 8012e88:	4628      	mov	r0, r5
 8012e8a:	47b0      	blx	r6
 8012e8c:	4602      	mov	r2, r0
 8012e8e:	1c50      	adds	r0, r2, #1
 8012e90:	d1c9      	bne.n	8012e26 <__sflush_r+0x32>
 8012e92:	682b      	ldr	r3, [r5, #0]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d0c6      	beq.n	8012e26 <__sflush_r+0x32>
 8012e98:	2b1d      	cmp	r3, #29
 8012e9a:	d001      	beq.n	8012ea0 <__sflush_r+0xac>
 8012e9c:	2b16      	cmp	r3, #22
 8012e9e:	d11e      	bne.n	8012ede <__sflush_r+0xea>
 8012ea0:	602f      	str	r7, [r5, #0]
 8012ea2:	2000      	movs	r0, #0
 8012ea4:	e022      	b.n	8012eec <__sflush_r+0xf8>
 8012ea6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012eaa:	b21b      	sxth	r3, r3
 8012eac:	e01b      	b.n	8012ee6 <__sflush_r+0xf2>
 8012eae:	690f      	ldr	r7, [r1, #16]
 8012eb0:	2f00      	cmp	r7, #0
 8012eb2:	d0f6      	beq.n	8012ea2 <__sflush_r+0xae>
 8012eb4:	0793      	lsls	r3, r2, #30
 8012eb6:	680e      	ldr	r6, [r1, #0]
 8012eb8:	bf08      	it	eq
 8012eba:	694b      	ldreq	r3, [r1, #20]
 8012ebc:	600f      	str	r7, [r1, #0]
 8012ebe:	bf18      	it	ne
 8012ec0:	2300      	movne	r3, #0
 8012ec2:	eba6 0807 	sub.w	r8, r6, r7
 8012ec6:	608b      	str	r3, [r1, #8]
 8012ec8:	f1b8 0f00 	cmp.w	r8, #0
 8012ecc:	dde9      	ble.n	8012ea2 <__sflush_r+0xae>
 8012ece:	6a21      	ldr	r1, [r4, #32]
 8012ed0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012ed2:	4643      	mov	r3, r8
 8012ed4:	463a      	mov	r2, r7
 8012ed6:	4628      	mov	r0, r5
 8012ed8:	47b0      	blx	r6
 8012eda:	2800      	cmp	r0, #0
 8012edc:	dc08      	bgt.n	8012ef0 <__sflush_r+0xfc>
 8012ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ee2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012ee6:	81a3      	strh	r3, [r4, #12]
 8012ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8012eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ef0:	4407      	add	r7, r0
 8012ef2:	eba8 0800 	sub.w	r8, r8, r0
 8012ef6:	e7e7      	b.n	8012ec8 <__sflush_r+0xd4>
 8012ef8:	20400001 	.word	0x20400001

08012efc <_fflush_r>:
 8012efc:	b538      	push	{r3, r4, r5, lr}
 8012efe:	690b      	ldr	r3, [r1, #16]
 8012f00:	4605      	mov	r5, r0
 8012f02:	460c      	mov	r4, r1
 8012f04:	b913      	cbnz	r3, 8012f0c <_fflush_r+0x10>
 8012f06:	2500      	movs	r5, #0
 8012f08:	4628      	mov	r0, r5
 8012f0a:	bd38      	pop	{r3, r4, r5, pc}
 8012f0c:	b118      	cbz	r0, 8012f16 <_fflush_r+0x1a>
 8012f0e:	6a03      	ldr	r3, [r0, #32]
 8012f10:	b90b      	cbnz	r3, 8012f16 <_fflush_r+0x1a>
 8012f12:	f7fd fb13 	bl	801053c <__sinit>
 8012f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d0f3      	beq.n	8012f06 <_fflush_r+0xa>
 8012f1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012f20:	07d0      	lsls	r0, r2, #31
 8012f22:	d404      	bmi.n	8012f2e <_fflush_r+0x32>
 8012f24:	0599      	lsls	r1, r3, #22
 8012f26:	d402      	bmi.n	8012f2e <_fflush_r+0x32>
 8012f28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012f2a:	f7fd fc30 	bl	801078e <__retarget_lock_acquire_recursive>
 8012f2e:	4628      	mov	r0, r5
 8012f30:	4621      	mov	r1, r4
 8012f32:	f7ff ff5f 	bl	8012df4 <__sflush_r>
 8012f36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012f38:	07da      	lsls	r2, r3, #31
 8012f3a:	4605      	mov	r5, r0
 8012f3c:	d4e4      	bmi.n	8012f08 <_fflush_r+0xc>
 8012f3e:	89a3      	ldrh	r3, [r4, #12]
 8012f40:	059b      	lsls	r3, r3, #22
 8012f42:	d4e1      	bmi.n	8012f08 <_fflush_r+0xc>
 8012f44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012f46:	f7fd fc23 	bl	8010790 <__retarget_lock_release_recursive>
 8012f4a:	e7dd      	b.n	8012f08 <_fflush_r+0xc>

08012f4c <memmove>:
 8012f4c:	4288      	cmp	r0, r1
 8012f4e:	b510      	push	{r4, lr}
 8012f50:	eb01 0402 	add.w	r4, r1, r2
 8012f54:	d902      	bls.n	8012f5c <memmove+0x10>
 8012f56:	4284      	cmp	r4, r0
 8012f58:	4623      	mov	r3, r4
 8012f5a:	d807      	bhi.n	8012f6c <memmove+0x20>
 8012f5c:	1e43      	subs	r3, r0, #1
 8012f5e:	42a1      	cmp	r1, r4
 8012f60:	d008      	beq.n	8012f74 <memmove+0x28>
 8012f62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012f66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012f6a:	e7f8      	b.n	8012f5e <memmove+0x12>
 8012f6c:	4402      	add	r2, r0
 8012f6e:	4601      	mov	r1, r0
 8012f70:	428a      	cmp	r2, r1
 8012f72:	d100      	bne.n	8012f76 <memmove+0x2a>
 8012f74:	bd10      	pop	{r4, pc}
 8012f76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012f7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012f7e:	e7f7      	b.n	8012f70 <memmove+0x24>

08012f80 <strncmp>:
 8012f80:	b510      	push	{r4, lr}
 8012f82:	b16a      	cbz	r2, 8012fa0 <strncmp+0x20>
 8012f84:	3901      	subs	r1, #1
 8012f86:	1884      	adds	r4, r0, r2
 8012f88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012f8c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012f90:	429a      	cmp	r2, r3
 8012f92:	d103      	bne.n	8012f9c <strncmp+0x1c>
 8012f94:	42a0      	cmp	r0, r4
 8012f96:	d001      	beq.n	8012f9c <strncmp+0x1c>
 8012f98:	2a00      	cmp	r2, #0
 8012f9a:	d1f5      	bne.n	8012f88 <strncmp+0x8>
 8012f9c:	1ad0      	subs	r0, r2, r3
 8012f9e:	bd10      	pop	{r4, pc}
 8012fa0:	4610      	mov	r0, r2
 8012fa2:	e7fc      	b.n	8012f9e <strncmp+0x1e>

08012fa4 <memcpy>:
 8012fa4:	440a      	add	r2, r1
 8012fa6:	4291      	cmp	r1, r2
 8012fa8:	f100 33ff 	add.w	r3, r0, #4294967295
 8012fac:	d100      	bne.n	8012fb0 <memcpy+0xc>
 8012fae:	4770      	bx	lr
 8012fb0:	b510      	push	{r4, lr}
 8012fb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012fb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012fba:	4291      	cmp	r1, r2
 8012fbc:	d1f9      	bne.n	8012fb2 <memcpy+0xe>
 8012fbe:	bd10      	pop	{r4, pc}

08012fc0 <nan>:
 8012fc0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012fc8 <nan+0x8>
 8012fc4:	4770      	bx	lr
 8012fc6:	bf00      	nop
 8012fc8:	00000000 	.word	0x00000000
 8012fcc:	7ff80000 	.word	0x7ff80000

08012fd0 <__assert_func>:
 8012fd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012fd2:	4614      	mov	r4, r2
 8012fd4:	461a      	mov	r2, r3
 8012fd6:	4b09      	ldr	r3, [pc, #36]	@ (8012ffc <__assert_func+0x2c>)
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	4605      	mov	r5, r0
 8012fdc:	68d8      	ldr	r0, [r3, #12]
 8012fde:	b14c      	cbz	r4, 8012ff4 <__assert_func+0x24>
 8012fe0:	4b07      	ldr	r3, [pc, #28]	@ (8013000 <__assert_func+0x30>)
 8012fe2:	9100      	str	r1, [sp, #0]
 8012fe4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012fe8:	4906      	ldr	r1, [pc, #24]	@ (8013004 <__assert_func+0x34>)
 8012fea:	462b      	mov	r3, r5
 8012fec:	f000 fba8 	bl	8013740 <fiprintf>
 8012ff0:	f000 fbb8 	bl	8013764 <abort>
 8012ff4:	4b04      	ldr	r3, [pc, #16]	@ (8013008 <__assert_func+0x38>)
 8012ff6:	461c      	mov	r4, r3
 8012ff8:	e7f3      	b.n	8012fe2 <__assert_func+0x12>
 8012ffa:	bf00      	nop
 8012ffc:	20000118 	.word	0x20000118
 8013000:	08014e8e 	.word	0x08014e8e
 8013004:	08014e9b 	.word	0x08014e9b
 8013008:	08014ec9 	.word	0x08014ec9

0801300c <_calloc_r>:
 801300c:	b570      	push	{r4, r5, r6, lr}
 801300e:	fba1 5402 	umull	r5, r4, r1, r2
 8013012:	b934      	cbnz	r4, 8013022 <_calloc_r+0x16>
 8013014:	4629      	mov	r1, r5
 8013016:	f7fc fb15 	bl	800f644 <_malloc_r>
 801301a:	4606      	mov	r6, r0
 801301c:	b928      	cbnz	r0, 801302a <_calloc_r+0x1e>
 801301e:	4630      	mov	r0, r6
 8013020:	bd70      	pop	{r4, r5, r6, pc}
 8013022:	220c      	movs	r2, #12
 8013024:	6002      	str	r2, [r0, #0]
 8013026:	2600      	movs	r6, #0
 8013028:	e7f9      	b.n	801301e <_calloc_r+0x12>
 801302a:	462a      	mov	r2, r5
 801302c:	4621      	mov	r1, r4
 801302e:	f7fd fb20 	bl	8010672 <memset>
 8013032:	e7f4      	b.n	801301e <_calloc_r+0x12>

08013034 <rshift>:
 8013034:	6903      	ldr	r3, [r0, #16]
 8013036:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801303a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801303e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013042:	f100 0414 	add.w	r4, r0, #20
 8013046:	dd45      	ble.n	80130d4 <rshift+0xa0>
 8013048:	f011 011f 	ands.w	r1, r1, #31
 801304c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013050:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013054:	d10c      	bne.n	8013070 <rshift+0x3c>
 8013056:	f100 0710 	add.w	r7, r0, #16
 801305a:	4629      	mov	r1, r5
 801305c:	42b1      	cmp	r1, r6
 801305e:	d334      	bcc.n	80130ca <rshift+0x96>
 8013060:	1a9b      	subs	r3, r3, r2
 8013062:	009b      	lsls	r3, r3, #2
 8013064:	1eea      	subs	r2, r5, #3
 8013066:	4296      	cmp	r6, r2
 8013068:	bf38      	it	cc
 801306a:	2300      	movcc	r3, #0
 801306c:	4423      	add	r3, r4
 801306e:	e015      	b.n	801309c <rshift+0x68>
 8013070:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013074:	f1c1 0820 	rsb	r8, r1, #32
 8013078:	40cf      	lsrs	r7, r1
 801307a:	f105 0e04 	add.w	lr, r5, #4
 801307e:	46a1      	mov	r9, r4
 8013080:	4576      	cmp	r6, lr
 8013082:	46f4      	mov	ip, lr
 8013084:	d815      	bhi.n	80130b2 <rshift+0x7e>
 8013086:	1a9a      	subs	r2, r3, r2
 8013088:	0092      	lsls	r2, r2, #2
 801308a:	3a04      	subs	r2, #4
 801308c:	3501      	adds	r5, #1
 801308e:	42ae      	cmp	r6, r5
 8013090:	bf38      	it	cc
 8013092:	2200      	movcc	r2, #0
 8013094:	18a3      	adds	r3, r4, r2
 8013096:	50a7      	str	r7, [r4, r2]
 8013098:	b107      	cbz	r7, 801309c <rshift+0x68>
 801309a:	3304      	adds	r3, #4
 801309c:	1b1a      	subs	r2, r3, r4
 801309e:	42a3      	cmp	r3, r4
 80130a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80130a4:	bf08      	it	eq
 80130a6:	2300      	moveq	r3, #0
 80130a8:	6102      	str	r2, [r0, #16]
 80130aa:	bf08      	it	eq
 80130ac:	6143      	streq	r3, [r0, #20]
 80130ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130b2:	f8dc c000 	ldr.w	ip, [ip]
 80130b6:	fa0c fc08 	lsl.w	ip, ip, r8
 80130ba:	ea4c 0707 	orr.w	r7, ip, r7
 80130be:	f849 7b04 	str.w	r7, [r9], #4
 80130c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80130c6:	40cf      	lsrs	r7, r1
 80130c8:	e7da      	b.n	8013080 <rshift+0x4c>
 80130ca:	f851 cb04 	ldr.w	ip, [r1], #4
 80130ce:	f847 cf04 	str.w	ip, [r7, #4]!
 80130d2:	e7c3      	b.n	801305c <rshift+0x28>
 80130d4:	4623      	mov	r3, r4
 80130d6:	e7e1      	b.n	801309c <rshift+0x68>

080130d8 <__hexdig_fun>:
 80130d8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80130dc:	2b09      	cmp	r3, #9
 80130de:	d802      	bhi.n	80130e6 <__hexdig_fun+0xe>
 80130e0:	3820      	subs	r0, #32
 80130e2:	b2c0      	uxtb	r0, r0
 80130e4:	4770      	bx	lr
 80130e6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80130ea:	2b05      	cmp	r3, #5
 80130ec:	d801      	bhi.n	80130f2 <__hexdig_fun+0x1a>
 80130ee:	3847      	subs	r0, #71	@ 0x47
 80130f0:	e7f7      	b.n	80130e2 <__hexdig_fun+0xa>
 80130f2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80130f6:	2b05      	cmp	r3, #5
 80130f8:	d801      	bhi.n	80130fe <__hexdig_fun+0x26>
 80130fa:	3827      	subs	r0, #39	@ 0x27
 80130fc:	e7f1      	b.n	80130e2 <__hexdig_fun+0xa>
 80130fe:	2000      	movs	r0, #0
 8013100:	4770      	bx	lr
	...

08013104 <__gethex>:
 8013104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013108:	b085      	sub	sp, #20
 801310a:	468a      	mov	sl, r1
 801310c:	9302      	str	r3, [sp, #8]
 801310e:	680b      	ldr	r3, [r1, #0]
 8013110:	9001      	str	r0, [sp, #4]
 8013112:	4690      	mov	r8, r2
 8013114:	1c9c      	adds	r4, r3, #2
 8013116:	46a1      	mov	r9, r4
 8013118:	f814 0b01 	ldrb.w	r0, [r4], #1
 801311c:	2830      	cmp	r0, #48	@ 0x30
 801311e:	d0fa      	beq.n	8013116 <__gethex+0x12>
 8013120:	eba9 0303 	sub.w	r3, r9, r3
 8013124:	f1a3 0b02 	sub.w	fp, r3, #2
 8013128:	f7ff ffd6 	bl	80130d8 <__hexdig_fun>
 801312c:	4605      	mov	r5, r0
 801312e:	2800      	cmp	r0, #0
 8013130:	d168      	bne.n	8013204 <__gethex+0x100>
 8013132:	49a0      	ldr	r1, [pc, #640]	@ (80133b4 <__gethex+0x2b0>)
 8013134:	2201      	movs	r2, #1
 8013136:	4648      	mov	r0, r9
 8013138:	f7ff ff22 	bl	8012f80 <strncmp>
 801313c:	4607      	mov	r7, r0
 801313e:	2800      	cmp	r0, #0
 8013140:	d167      	bne.n	8013212 <__gethex+0x10e>
 8013142:	f899 0001 	ldrb.w	r0, [r9, #1]
 8013146:	4626      	mov	r6, r4
 8013148:	f7ff ffc6 	bl	80130d8 <__hexdig_fun>
 801314c:	2800      	cmp	r0, #0
 801314e:	d062      	beq.n	8013216 <__gethex+0x112>
 8013150:	4623      	mov	r3, r4
 8013152:	7818      	ldrb	r0, [r3, #0]
 8013154:	2830      	cmp	r0, #48	@ 0x30
 8013156:	4699      	mov	r9, r3
 8013158:	f103 0301 	add.w	r3, r3, #1
 801315c:	d0f9      	beq.n	8013152 <__gethex+0x4e>
 801315e:	f7ff ffbb 	bl	80130d8 <__hexdig_fun>
 8013162:	fab0 f580 	clz	r5, r0
 8013166:	096d      	lsrs	r5, r5, #5
 8013168:	f04f 0b01 	mov.w	fp, #1
 801316c:	464a      	mov	r2, r9
 801316e:	4616      	mov	r6, r2
 8013170:	3201      	adds	r2, #1
 8013172:	7830      	ldrb	r0, [r6, #0]
 8013174:	f7ff ffb0 	bl	80130d8 <__hexdig_fun>
 8013178:	2800      	cmp	r0, #0
 801317a:	d1f8      	bne.n	801316e <__gethex+0x6a>
 801317c:	498d      	ldr	r1, [pc, #564]	@ (80133b4 <__gethex+0x2b0>)
 801317e:	2201      	movs	r2, #1
 8013180:	4630      	mov	r0, r6
 8013182:	f7ff fefd 	bl	8012f80 <strncmp>
 8013186:	2800      	cmp	r0, #0
 8013188:	d13f      	bne.n	801320a <__gethex+0x106>
 801318a:	b944      	cbnz	r4, 801319e <__gethex+0x9a>
 801318c:	1c74      	adds	r4, r6, #1
 801318e:	4622      	mov	r2, r4
 8013190:	4616      	mov	r6, r2
 8013192:	3201      	adds	r2, #1
 8013194:	7830      	ldrb	r0, [r6, #0]
 8013196:	f7ff ff9f 	bl	80130d8 <__hexdig_fun>
 801319a:	2800      	cmp	r0, #0
 801319c:	d1f8      	bne.n	8013190 <__gethex+0x8c>
 801319e:	1ba4      	subs	r4, r4, r6
 80131a0:	00a7      	lsls	r7, r4, #2
 80131a2:	7833      	ldrb	r3, [r6, #0]
 80131a4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80131a8:	2b50      	cmp	r3, #80	@ 0x50
 80131aa:	d13e      	bne.n	801322a <__gethex+0x126>
 80131ac:	7873      	ldrb	r3, [r6, #1]
 80131ae:	2b2b      	cmp	r3, #43	@ 0x2b
 80131b0:	d033      	beq.n	801321a <__gethex+0x116>
 80131b2:	2b2d      	cmp	r3, #45	@ 0x2d
 80131b4:	d034      	beq.n	8013220 <__gethex+0x11c>
 80131b6:	1c71      	adds	r1, r6, #1
 80131b8:	2400      	movs	r4, #0
 80131ba:	7808      	ldrb	r0, [r1, #0]
 80131bc:	f7ff ff8c 	bl	80130d8 <__hexdig_fun>
 80131c0:	1e43      	subs	r3, r0, #1
 80131c2:	b2db      	uxtb	r3, r3
 80131c4:	2b18      	cmp	r3, #24
 80131c6:	d830      	bhi.n	801322a <__gethex+0x126>
 80131c8:	f1a0 0210 	sub.w	r2, r0, #16
 80131cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80131d0:	f7ff ff82 	bl	80130d8 <__hexdig_fun>
 80131d4:	f100 3cff 	add.w	ip, r0, #4294967295
 80131d8:	fa5f fc8c 	uxtb.w	ip, ip
 80131dc:	f1bc 0f18 	cmp.w	ip, #24
 80131e0:	f04f 030a 	mov.w	r3, #10
 80131e4:	d91e      	bls.n	8013224 <__gethex+0x120>
 80131e6:	b104      	cbz	r4, 80131ea <__gethex+0xe6>
 80131e8:	4252      	negs	r2, r2
 80131ea:	4417      	add	r7, r2
 80131ec:	f8ca 1000 	str.w	r1, [sl]
 80131f0:	b1ed      	cbz	r5, 801322e <__gethex+0x12a>
 80131f2:	f1bb 0f00 	cmp.w	fp, #0
 80131f6:	bf0c      	ite	eq
 80131f8:	2506      	moveq	r5, #6
 80131fa:	2500      	movne	r5, #0
 80131fc:	4628      	mov	r0, r5
 80131fe:	b005      	add	sp, #20
 8013200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013204:	2500      	movs	r5, #0
 8013206:	462c      	mov	r4, r5
 8013208:	e7b0      	b.n	801316c <__gethex+0x68>
 801320a:	2c00      	cmp	r4, #0
 801320c:	d1c7      	bne.n	801319e <__gethex+0x9a>
 801320e:	4627      	mov	r7, r4
 8013210:	e7c7      	b.n	80131a2 <__gethex+0x9e>
 8013212:	464e      	mov	r6, r9
 8013214:	462f      	mov	r7, r5
 8013216:	2501      	movs	r5, #1
 8013218:	e7c3      	b.n	80131a2 <__gethex+0x9e>
 801321a:	2400      	movs	r4, #0
 801321c:	1cb1      	adds	r1, r6, #2
 801321e:	e7cc      	b.n	80131ba <__gethex+0xb6>
 8013220:	2401      	movs	r4, #1
 8013222:	e7fb      	b.n	801321c <__gethex+0x118>
 8013224:	fb03 0002 	mla	r0, r3, r2, r0
 8013228:	e7ce      	b.n	80131c8 <__gethex+0xc4>
 801322a:	4631      	mov	r1, r6
 801322c:	e7de      	b.n	80131ec <__gethex+0xe8>
 801322e:	eba6 0309 	sub.w	r3, r6, r9
 8013232:	3b01      	subs	r3, #1
 8013234:	4629      	mov	r1, r5
 8013236:	2b07      	cmp	r3, #7
 8013238:	dc0a      	bgt.n	8013250 <__gethex+0x14c>
 801323a:	9801      	ldr	r0, [sp, #4]
 801323c:	f7fe f952 	bl	80114e4 <_Balloc>
 8013240:	4604      	mov	r4, r0
 8013242:	b940      	cbnz	r0, 8013256 <__gethex+0x152>
 8013244:	4b5c      	ldr	r3, [pc, #368]	@ (80133b8 <__gethex+0x2b4>)
 8013246:	4602      	mov	r2, r0
 8013248:	21e4      	movs	r1, #228	@ 0xe4
 801324a:	485c      	ldr	r0, [pc, #368]	@ (80133bc <__gethex+0x2b8>)
 801324c:	f7ff fec0 	bl	8012fd0 <__assert_func>
 8013250:	3101      	adds	r1, #1
 8013252:	105b      	asrs	r3, r3, #1
 8013254:	e7ef      	b.n	8013236 <__gethex+0x132>
 8013256:	f100 0a14 	add.w	sl, r0, #20
 801325a:	2300      	movs	r3, #0
 801325c:	4655      	mov	r5, sl
 801325e:	469b      	mov	fp, r3
 8013260:	45b1      	cmp	r9, r6
 8013262:	d337      	bcc.n	80132d4 <__gethex+0x1d0>
 8013264:	f845 bb04 	str.w	fp, [r5], #4
 8013268:	eba5 050a 	sub.w	r5, r5, sl
 801326c:	10ad      	asrs	r5, r5, #2
 801326e:	6125      	str	r5, [r4, #16]
 8013270:	4658      	mov	r0, fp
 8013272:	f7fe fa29 	bl	80116c8 <__hi0bits>
 8013276:	016d      	lsls	r5, r5, #5
 8013278:	f8d8 6000 	ldr.w	r6, [r8]
 801327c:	1a2d      	subs	r5, r5, r0
 801327e:	42b5      	cmp	r5, r6
 8013280:	dd54      	ble.n	801332c <__gethex+0x228>
 8013282:	1bad      	subs	r5, r5, r6
 8013284:	4629      	mov	r1, r5
 8013286:	4620      	mov	r0, r4
 8013288:	f7fe fdb5 	bl	8011df6 <__any_on>
 801328c:	4681      	mov	r9, r0
 801328e:	b178      	cbz	r0, 80132b0 <__gethex+0x1ac>
 8013290:	1e6b      	subs	r3, r5, #1
 8013292:	1159      	asrs	r1, r3, #5
 8013294:	f003 021f 	and.w	r2, r3, #31
 8013298:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801329c:	f04f 0901 	mov.w	r9, #1
 80132a0:	fa09 f202 	lsl.w	r2, r9, r2
 80132a4:	420a      	tst	r2, r1
 80132a6:	d003      	beq.n	80132b0 <__gethex+0x1ac>
 80132a8:	454b      	cmp	r3, r9
 80132aa:	dc36      	bgt.n	801331a <__gethex+0x216>
 80132ac:	f04f 0902 	mov.w	r9, #2
 80132b0:	4629      	mov	r1, r5
 80132b2:	4620      	mov	r0, r4
 80132b4:	f7ff febe 	bl	8013034 <rshift>
 80132b8:	442f      	add	r7, r5
 80132ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80132be:	42bb      	cmp	r3, r7
 80132c0:	da42      	bge.n	8013348 <__gethex+0x244>
 80132c2:	9801      	ldr	r0, [sp, #4]
 80132c4:	4621      	mov	r1, r4
 80132c6:	f7fe f94d 	bl	8011564 <_Bfree>
 80132ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80132cc:	2300      	movs	r3, #0
 80132ce:	6013      	str	r3, [r2, #0]
 80132d0:	25a3      	movs	r5, #163	@ 0xa3
 80132d2:	e793      	b.n	80131fc <__gethex+0xf8>
 80132d4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80132d8:	2a2e      	cmp	r2, #46	@ 0x2e
 80132da:	d012      	beq.n	8013302 <__gethex+0x1fe>
 80132dc:	2b20      	cmp	r3, #32
 80132de:	d104      	bne.n	80132ea <__gethex+0x1e6>
 80132e0:	f845 bb04 	str.w	fp, [r5], #4
 80132e4:	f04f 0b00 	mov.w	fp, #0
 80132e8:	465b      	mov	r3, fp
 80132ea:	7830      	ldrb	r0, [r6, #0]
 80132ec:	9303      	str	r3, [sp, #12]
 80132ee:	f7ff fef3 	bl	80130d8 <__hexdig_fun>
 80132f2:	9b03      	ldr	r3, [sp, #12]
 80132f4:	f000 000f 	and.w	r0, r0, #15
 80132f8:	4098      	lsls	r0, r3
 80132fa:	ea4b 0b00 	orr.w	fp, fp, r0
 80132fe:	3304      	adds	r3, #4
 8013300:	e7ae      	b.n	8013260 <__gethex+0x15c>
 8013302:	45b1      	cmp	r9, r6
 8013304:	d8ea      	bhi.n	80132dc <__gethex+0x1d8>
 8013306:	492b      	ldr	r1, [pc, #172]	@ (80133b4 <__gethex+0x2b0>)
 8013308:	9303      	str	r3, [sp, #12]
 801330a:	2201      	movs	r2, #1
 801330c:	4630      	mov	r0, r6
 801330e:	f7ff fe37 	bl	8012f80 <strncmp>
 8013312:	9b03      	ldr	r3, [sp, #12]
 8013314:	2800      	cmp	r0, #0
 8013316:	d1e1      	bne.n	80132dc <__gethex+0x1d8>
 8013318:	e7a2      	b.n	8013260 <__gethex+0x15c>
 801331a:	1ea9      	subs	r1, r5, #2
 801331c:	4620      	mov	r0, r4
 801331e:	f7fe fd6a 	bl	8011df6 <__any_on>
 8013322:	2800      	cmp	r0, #0
 8013324:	d0c2      	beq.n	80132ac <__gethex+0x1a8>
 8013326:	f04f 0903 	mov.w	r9, #3
 801332a:	e7c1      	b.n	80132b0 <__gethex+0x1ac>
 801332c:	da09      	bge.n	8013342 <__gethex+0x23e>
 801332e:	1b75      	subs	r5, r6, r5
 8013330:	4621      	mov	r1, r4
 8013332:	9801      	ldr	r0, [sp, #4]
 8013334:	462a      	mov	r2, r5
 8013336:	f7fe fb25 	bl	8011984 <__lshift>
 801333a:	1b7f      	subs	r7, r7, r5
 801333c:	4604      	mov	r4, r0
 801333e:	f100 0a14 	add.w	sl, r0, #20
 8013342:	f04f 0900 	mov.w	r9, #0
 8013346:	e7b8      	b.n	80132ba <__gethex+0x1b6>
 8013348:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801334c:	42bd      	cmp	r5, r7
 801334e:	dd6f      	ble.n	8013430 <__gethex+0x32c>
 8013350:	1bed      	subs	r5, r5, r7
 8013352:	42ae      	cmp	r6, r5
 8013354:	dc34      	bgt.n	80133c0 <__gethex+0x2bc>
 8013356:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801335a:	2b02      	cmp	r3, #2
 801335c:	d022      	beq.n	80133a4 <__gethex+0x2a0>
 801335e:	2b03      	cmp	r3, #3
 8013360:	d024      	beq.n	80133ac <__gethex+0x2a8>
 8013362:	2b01      	cmp	r3, #1
 8013364:	d115      	bne.n	8013392 <__gethex+0x28e>
 8013366:	42ae      	cmp	r6, r5
 8013368:	d113      	bne.n	8013392 <__gethex+0x28e>
 801336a:	2e01      	cmp	r6, #1
 801336c:	d10b      	bne.n	8013386 <__gethex+0x282>
 801336e:	9a02      	ldr	r2, [sp, #8]
 8013370:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013374:	6013      	str	r3, [r2, #0]
 8013376:	2301      	movs	r3, #1
 8013378:	6123      	str	r3, [r4, #16]
 801337a:	f8ca 3000 	str.w	r3, [sl]
 801337e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013380:	2562      	movs	r5, #98	@ 0x62
 8013382:	601c      	str	r4, [r3, #0]
 8013384:	e73a      	b.n	80131fc <__gethex+0xf8>
 8013386:	1e71      	subs	r1, r6, #1
 8013388:	4620      	mov	r0, r4
 801338a:	f7fe fd34 	bl	8011df6 <__any_on>
 801338e:	2800      	cmp	r0, #0
 8013390:	d1ed      	bne.n	801336e <__gethex+0x26a>
 8013392:	9801      	ldr	r0, [sp, #4]
 8013394:	4621      	mov	r1, r4
 8013396:	f7fe f8e5 	bl	8011564 <_Bfree>
 801339a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801339c:	2300      	movs	r3, #0
 801339e:	6013      	str	r3, [r2, #0]
 80133a0:	2550      	movs	r5, #80	@ 0x50
 80133a2:	e72b      	b.n	80131fc <__gethex+0xf8>
 80133a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d1f3      	bne.n	8013392 <__gethex+0x28e>
 80133aa:	e7e0      	b.n	801336e <__gethex+0x26a>
 80133ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d1dd      	bne.n	801336e <__gethex+0x26a>
 80133b2:	e7ee      	b.n	8013392 <__gethex+0x28e>
 80133b4:	08014e73 	.word	0x08014e73
 80133b8:	08014e09 	.word	0x08014e09
 80133bc:	08014eca 	.word	0x08014eca
 80133c0:	1e6f      	subs	r7, r5, #1
 80133c2:	f1b9 0f00 	cmp.w	r9, #0
 80133c6:	d130      	bne.n	801342a <__gethex+0x326>
 80133c8:	b127      	cbz	r7, 80133d4 <__gethex+0x2d0>
 80133ca:	4639      	mov	r1, r7
 80133cc:	4620      	mov	r0, r4
 80133ce:	f7fe fd12 	bl	8011df6 <__any_on>
 80133d2:	4681      	mov	r9, r0
 80133d4:	117a      	asrs	r2, r7, #5
 80133d6:	2301      	movs	r3, #1
 80133d8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80133dc:	f007 071f 	and.w	r7, r7, #31
 80133e0:	40bb      	lsls	r3, r7
 80133e2:	4213      	tst	r3, r2
 80133e4:	4629      	mov	r1, r5
 80133e6:	4620      	mov	r0, r4
 80133e8:	bf18      	it	ne
 80133ea:	f049 0902 	orrne.w	r9, r9, #2
 80133ee:	f7ff fe21 	bl	8013034 <rshift>
 80133f2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80133f6:	1b76      	subs	r6, r6, r5
 80133f8:	2502      	movs	r5, #2
 80133fa:	f1b9 0f00 	cmp.w	r9, #0
 80133fe:	d047      	beq.n	8013490 <__gethex+0x38c>
 8013400:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013404:	2b02      	cmp	r3, #2
 8013406:	d015      	beq.n	8013434 <__gethex+0x330>
 8013408:	2b03      	cmp	r3, #3
 801340a:	d017      	beq.n	801343c <__gethex+0x338>
 801340c:	2b01      	cmp	r3, #1
 801340e:	d109      	bne.n	8013424 <__gethex+0x320>
 8013410:	f019 0f02 	tst.w	r9, #2
 8013414:	d006      	beq.n	8013424 <__gethex+0x320>
 8013416:	f8da 3000 	ldr.w	r3, [sl]
 801341a:	ea49 0903 	orr.w	r9, r9, r3
 801341e:	f019 0f01 	tst.w	r9, #1
 8013422:	d10e      	bne.n	8013442 <__gethex+0x33e>
 8013424:	f045 0510 	orr.w	r5, r5, #16
 8013428:	e032      	b.n	8013490 <__gethex+0x38c>
 801342a:	f04f 0901 	mov.w	r9, #1
 801342e:	e7d1      	b.n	80133d4 <__gethex+0x2d0>
 8013430:	2501      	movs	r5, #1
 8013432:	e7e2      	b.n	80133fa <__gethex+0x2f6>
 8013434:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013436:	f1c3 0301 	rsb	r3, r3, #1
 801343a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801343c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801343e:	2b00      	cmp	r3, #0
 8013440:	d0f0      	beq.n	8013424 <__gethex+0x320>
 8013442:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013446:	f104 0314 	add.w	r3, r4, #20
 801344a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801344e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013452:	f04f 0c00 	mov.w	ip, #0
 8013456:	4618      	mov	r0, r3
 8013458:	f853 2b04 	ldr.w	r2, [r3], #4
 801345c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013460:	d01b      	beq.n	801349a <__gethex+0x396>
 8013462:	3201      	adds	r2, #1
 8013464:	6002      	str	r2, [r0, #0]
 8013466:	2d02      	cmp	r5, #2
 8013468:	f104 0314 	add.w	r3, r4, #20
 801346c:	d13c      	bne.n	80134e8 <__gethex+0x3e4>
 801346e:	f8d8 2000 	ldr.w	r2, [r8]
 8013472:	3a01      	subs	r2, #1
 8013474:	42b2      	cmp	r2, r6
 8013476:	d109      	bne.n	801348c <__gethex+0x388>
 8013478:	1171      	asrs	r1, r6, #5
 801347a:	2201      	movs	r2, #1
 801347c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013480:	f006 061f 	and.w	r6, r6, #31
 8013484:	fa02 f606 	lsl.w	r6, r2, r6
 8013488:	421e      	tst	r6, r3
 801348a:	d13a      	bne.n	8013502 <__gethex+0x3fe>
 801348c:	f045 0520 	orr.w	r5, r5, #32
 8013490:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013492:	601c      	str	r4, [r3, #0]
 8013494:	9b02      	ldr	r3, [sp, #8]
 8013496:	601f      	str	r7, [r3, #0]
 8013498:	e6b0      	b.n	80131fc <__gethex+0xf8>
 801349a:	4299      	cmp	r1, r3
 801349c:	f843 cc04 	str.w	ip, [r3, #-4]
 80134a0:	d8d9      	bhi.n	8013456 <__gethex+0x352>
 80134a2:	68a3      	ldr	r3, [r4, #8]
 80134a4:	459b      	cmp	fp, r3
 80134a6:	db17      	blt.n	80134d8 <__gethex+0x3d4>
 80134a8:	6861      	ldr	r1, [r4, #4]
 80134aa:	9801      	ldr	r0, [sp, #4]
 80134ac:	3101      	adds	r1, #1
 80134ae:	f7fe f819 	bl	80114e4 <_Balloc>
 80134b2:	4681      	mov	r9, r0
 80134b4:	b918      	cbnz	r0, 80134be <__gethex+0x3ba>
 80134b6:	4b1a      	ldr	r3, [pc, #104]	@ (8013520 <__gethex+0x41c>)
 80134b8:	4602      	mov	r2, r0
 80134ba:	2184      	movs	r1, #132	@ 0x84
 80134bc:	e6c5      	b.n	801324a <__gethex+0x146>
 80134be:	6922      	ldr	r2, [r4, #16]
 80134c0:	3202      	adds	r2, #2
 80134c2:	f104 010c 	add.w	r1, r4, #12
 80134c6:	0092      	lsls	r2, r2, #2
 80134c8:	300c      	adds	r0, #12
 80134ca:	f7ff fd6b 	bl	8012fa4 <memcpy>
 80134ce:	4621      	mov	r1, r4
 80134d0:	9801      	ldr	r0, [sp, #4]
 80134d2:	f7fe f847 	bl	8011564 <_Bfree>
 80134d6:	464c      	mov	r4, r9
 80134d8:	6923      	ldr	r3, [r4, #16]
 80134da:	1c5a      	adds	r2, r3, #1
 80134dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80134e0:	6122      	str	r2, [r4, #16]
 80134e2:	2201      	movs	r2, #1
 80134e4:	615a      	str	r2, [r3, #20]
 80134e6:	e7be      	b.n	8013466 <__gethex+0x362>
 80134e8:	6922      	ldr	r2, [r4, #16]
 80134ea:	455a      	cmp	r2, fp
 80134ec:	dd0b      	ble.n	8013506 <__gethex+0x402>
 80134ee:	2101      	movs	r1, #1
 80134f0:	4620      	mov	r0, r4
 80134f2:	f7ff fd9f 	bl	8013034 <rshift>
 80134f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80134fa:	3701      	adds	r7, #1
 80134fc:	42bb      	cmp	r3, r7
 80134fe:	f6ff aee0 	blt.w	80132c2 <__gethex+0x1be>
 8013502:	2501      	movs	r5, #1
 8013504:	e7c2      	b.n	801348c <__gethex+0x388>
 8013506:	f016 061f 	ands.w	r6, r6, #31
 801350a:	d0fa      	beq.n	8013502 <__gethex+0x3fe>
 801350c:	4453      	add	r3, sl
 801350e:	f1c6 0620 	rsb	r6, r6, #32
 8013512:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8013516:	f7fe f8d7 	bl	80116c8 <__hi0bits>
 801351a:	42b0      	cmp	r0, r6
 801351c:	dbe7      	blt.n	80134ee <__gethex+0x3ea>
 801351e:	e7f0      	b.n	8013502 <__gethex+0x3fe>
 8013520:	08014e09 	.word	0x08014e09

08013524 <L_shift>:
 8013524:	f1c2 0208 	rsb	r2, r2, #8
 8013528:	0092      	lsls	r2, r2, #2
 801352a:	b570      	push	{r4, r5, r6, lr}
 801352c:	f1c2 0620 	rsb	r6, r2, #32
 8013530:	6843      	ldr	r3, [r0, #4]
 8013532:	6804      	ldr	r4, [r0, #0]
 8013534:	fa03 f506 	lsl.w	r5, r3, r6
 8013538:	432c      	orrs	r4, r5
 801353a:	40d3      	lsrs	r3, r2
 801353c:	6004      	str	r4, [r0, #0]
 801353e:	f840 3f04 	str.w	r3, [r0, #4]!
 8013542:	4288      	cmp	r0, r1
 8013544:	d3f4      	bcc.n	8013530 <L_shift+0xc>
 8013546:	bd70      	pop	{r4, r5, r6, pc}

08013548 <__match>:
 8013548:	b530      	push	{r4, r5, lr}
 801354a:	6803      	ldr	r3, [r0, #0]
 801354c:	3301      	adds	r3, #1
 801354e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013552:	b914      	cbnz	r4, 801355a <__match+0x12>
 8013554:	6003      	str	r3, [r0, #0]
 8013556:	2001      	movs	r0, #1
 8013558:	bd30      	pop	{r4, r5, pc}
 801355a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801355e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8013562:	2d19      	cmp	r5, #25
 8013564:	bf98      	it	ls
 8013566:	3220      	addls	r2, #32
 8013568:	42a2      	cmp	r2, r4
 801356a:	d0f0      	beq.n	801354e <__match+0x6>
 801356c:	2000      	movs	r0, #0
 801356e:	e7f3      	b.n	8013558 <__match+0x10>

08013570 <__hexnan>:
 8013570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013574:	680b      	ldr	r3, [r1, #0]
 8013576:	6801      	ldr	r1, [r0, #0]
 8013578:	115e      	asrs	r6, r3, #5
 801357a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801357e:	f013 031f 	ands.w	r3, r3, #31
 8013582:	b087      	sub	sp, #28
 8013584:	bf18      	it	ne
 8013586:	3604      	addne	r6, #4
 8013588:	2500      	movs	r5, #0
 801358a:	1f37      	subs	r7, r6, #4
 801358c:	4682      	mov	sl, r0
 801358e:	4690      	mov	r8, r2
 8013590:	9301      	str	r3, [sp, #4]
 8013592:	f846 5c04 	str.w	r5, [r6, #-4]
 8013596:	46b9      	mov	r9, r7
 8013598:	463c      	mov	r4, r7
 801359a:	9502      	str	r5, [sp, #8]
 801359c:	46ab      	mov	fp, r5
 801359e:	784a      	ldrb	r2, [r1, #1]
 80135a0:	1c4b      	adds	r3, r1, #1
 80135a2:	9303      	str	r3, [sp, #12]
 80135a4:	b342      	cbz	r2, 80135f8 <__hexnan+0x88>
 80135a6:	4610      	mov	r0, r2
 80135a8:	9105      	str	r1, [sp, #20]
 80135aa:	9204      	str	r2, [sp, #16]
 80135ac:	f7ff fd94 	bl	80130d8 <__hexdig_fun>
 80135b0:	2800      	cmp	r0, #0
 80135b2:	d151      	bne.n	8013658 <__hexnan+0xe8>
 80135b4:	9a04      	ldr	r2, [sp, #16]
 80135b6:	9905      	ldr	r1, [sp, #20]
 80135b8:	2a20      	cmp	r2, #32
 80135ba:	d818      	bhi.n	80135ee <__hexnan+0x7e>
 80135bc:	9b02      	ldr	r3, [sp, #8]
 80135be:	459b      	cmp	fp, r3
 80135c0:	dd13      	ble.n	80135ea <__hexnan+0x7a>
 80135c2:	454c      	cmp	r4, r9
 80135c4:	d206      	bcs.n	80135d4 <__hexnan+0x64>
 80135c6:	2d07      	cmp	r5, #7
 80135c8:	dc04      	bgt.n	80135d4 <__hexnan+0x64>
 80135ca:	462a      	mov	r2, r5
 80135cc:	4649      	mov	r1, r9
 80135ce:	4620      	mov	r0, r4
 80135d0:	f7ff ffa8 	bl	8013524 <L_shift>
 80135d4:	4544      	cmp	r4, r8
 80135d6:	d952      	bls.n	801367e <__hexnan+0x10e>
 80135d8:	2300      	movs	r3, #0
 80135da:	f1a4 0904 	sub.w	r9, r4, #4
 80135de:	f844 3c04 	str.w	r3, [r4, #-4]
 80135e2:	f8cd b008 	str.w	fp, [sp, #8]
 80135e6:	464c      	mov	r4, r9
 80135e8:	461d      	mov	r5, r3
 80135ea:	9903      	ldr	r1, [sp, #12]
 80135ec:	e7d7      	b.n	801359e <__hexnan+0x2e>
 80135ee:	2a29      	cmp	r2, #41	@ 0x29
 80135f0:	d157      	bne.n	80136a2 <__hexnan+0x132>
 80135f2:	3102      	adds	r1, #2
 80135f4:	f8ca 1000 	str.w	r1, [sl]
 80135f8:	f1bb 0f00 	cmp.w	fp, #0
 80135fc:	d051      	beq.n	80136a2 <__hexnan+0x132>
 80135fe:	454c      	cmp	r4, r9
 8013600:	d206      	bcs.n	8013610 <__hexnan+0xa0>
 8013602:	2d07      	cmp	r5, #7
 8013604:	dc04      	bgt.n	8013610 <__hexnan+0xa0>
 8013606:	462a      	mov	r2, r5
 8013608:	4649      	mov	r1, r9
 801360a:	4620      	mov	r0, r4
 801360c:	f7ff ff8a 	bl	8013524 <L_shift>
 8013610:	4544      	cmp	r4, r8
 8013612:	d936      	bls.n	8013682 <__hexnan+0x112>
 8013614:	f1a8 0204 	sub.w	r2, r8, #4
 8013618:	4623      	mov	r3, r4
 801361a:	f853 1b04 	ldr.w	r1, [r3], #4
 801361e:	f842 1f04 	str.w	r1, [r2, #4]!
 8013622:	429f      	cmp	r7, r3
 8013624:	d2f9      	bcs.n	801361a <__hexnan+0xaa>
 8013626:	1b3b      	subs	r3, r7, r4
 8013628:	f023 0303 	bic.w	r3, r3, #3
 801362c:	3304      	adds	r3, #4
 801362e:	3401      	adds	r4, #1
 8013630:	3e03      	subs	r6, #3
 8013632:	42b4      	cmp	r4, r6
 8013634:	bf88      	it	hi
 8013636:	2304      	movhi	r3, #4
 8013638:	4443      	add	r3, r8
 801363a:	2200      	movs	r2, #0
 801363c:	f843 2b04 	str.w	r2, [r3], #4
 8013640:	429f      	cmp	r7, r3
 8013642:	d2fb      	bcs.n	801363c <__hexnan+0xcc>
 8013644:	683b      	ldr	r3, [r7, #0]
 8013646:	b91b      	cbnz	r3, 8013650 <__hexnan+0xe0>
 8013648:	4547      	cmp	r7, r8
 801364a:	d128      	bne.n	801369e <__hexnan+0x12e>
 801364c:	2301      	movs	r3, #1
 801364e:	603b      	str	r3, [r7, #0]
 8013650:	2005      	movs	r0, #5
 8013652:	b007      	add	sp, #28
 8013654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013658:	3501      	adds	r5, #1
 801365a:	2d08      	cmp	r5, #8
 801365c:	f10b 0b01 	add.w	fp, fp, #1
 8013660:	dd06      	ble.n	8013670 <__hexnan+0x100>
 8013662:	4544      	cmp	r4, r8
 8013664:	d9c1      	bls.n	80135ea <__hexnan+0x7a>
 8013666:	2300      	movs	r3, #0
 8013668:	f844 3c04 	str.w	r3, [r4, #-4]
 801366c:	2501      	movs	r5, #1
 801366e:	3c04      	subs	r4, #4
 8013670:	6822      	ldr	r2, [r4, #0]
 8013672:	f000 000f 	and.w	r0, r0, #15
 8013676:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801367a:	6020      	str	r0, [r4, #0]
 801367c:	e7b5      	b.n	80135ea <__hexnan+0x7a>
 801367e:	2508      	movs	r5, #8
 8013680:	e7b3      	b.n	80135ea <__hexnan+0x7a>
 8013682:	9b01      	ldr	r3, [sp, #4]
 8013684:	2b00      	cmp	r3, #0
 8013686:	d0dd      	beq.n	8013644 <__hexnan+0xd4>
 8013688:	f1c3 0320 	rsb	r3, r3, #32
 801368c:	f04f 32ff 	mov.w	r2, #4294967295
 8013690:	40da      	lsrs	r2, r3
 8013692:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013696:	4013      	ands	r3, r2
 8013698:	f846 3c04 	str.w	r3, [r6, #-4]
 801369c:	e7d2      	b.n	8013644 <__hexnan+0xd4>
 801369e:	3f04      	subs	r7, #4
 80136a0:	e7d0      	b.n	8013644 <__hexnan+0xd4>
 80136a2:	2004      	movs	r0, #4
 80136a4:	e7d5      	b.n	8013652 <__hexnan+0xe2>

080136a6 <__ascii_mbtowc>:
 80136a6:	b082      	sub	sp, #8
 80136a8:	b901      	cbnz	r1, 80136ac <__ascii_mbtowc+0x6>
 80136aa:	a901      	add	r1, sp, #4
 80136ac:	b142      	cbz	r2, 80136c0 <__ascii_mbtowc+0x1a>
 80136ae:	b14b      	cbz	r3, 80136c4 <__ascii_mbtowc+0x1e>
 80136b0:	7813      	ldrb	r3, [r2, #0]
 80136b2:	600b      	str	r3, [r1, #0]
 80136b4:	7812      	ldrb	r2, [r2, #0]
 80136b6:	1e10      	subs	r0, r2, #0
 80136b8:	bf18      	it	ne
 80136ba:	2001      	movne	r0, #1
 80136bc:	b002      	add	sp, #8
 80136be:	4770      	bx	lr
 80136c0:	4610      	mov	r0, r2
 80136c2:	e7fb      	b.n	80136bc <__ascii_mbtowc+0x16>
 80136c4:	f06f 0001 	mvn.w	r0, #1
 80136c8:	e7f8      	b.n	80136bc <__ascii_mbtowc+0x16>

080136ca <_realloc_r>:
 80136ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136ce:	4607      	mov	r7, r0
 80136d0:	4614      	mov	r4, r2
 80136d2:	460d      	mov	r5, r1
 80136d4:	b921      	cbnz	r1, 80136e0 <_realloc_r+0x16>
 80136d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80136da:	4611      	mov	r1, r2
 80136dc:	f7fb bfb2 	b.w	800f644 <_malloc_r>
 80136e0:	b92a      	cbnz	r2, 80136ee <_realloc_r+0x24>
 80136e2:	f7fd feb5 	bl	8011450 <_free_r>
 80136e6:	4625      	mov	r5, r4
 80136e8:	4628      	mov	r0, r5
 80136ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136ee:	f000 f840 	bl	8013772 <_malloc_usable_size_r>
 80136f2:	4284      	cmp	r4, r0
 80136f4:	4606      	mov	r6, r0
 80136f6:	d802      	bhi.n	80136fe <_realloc_r+0x34>
 80136f8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80136fc:	d8f4      	bhi.n	80136e8 <_realloc_r+0x1e>
 80136fe:	4621      	mov	r1, r4
 8013700:	4638      	mov	r0, r7
 8013702:	f7fb ff9f 	bl	800f644 <_malloc_r>
 8013706:	4680      	mov	r8, r0
 8013708:	b908      	cbnz	r0, 801370e <_realloc_r+0x44>
 801370a:	4645      	mov	r5, r8
 801370c:	e7ec      	b.n	80136e8 <_realloc_r+0x1e>
 801370e:	42b4      	cmp	r4, r6
 8013710:	4622      	mov	r2, r4
 8013712:	4629      	mov	r1, r5
 8013714:	bf28      	it	cs
 8013716:	4632      	movcs	r2, r6
 8013718:	f7ff fc44 	bl	8012fa4 <memcpy>
 801371c:	4629      	mov	r1, r5
 801371e:	4638      	mov	r0, r7
 8013720:	f7fd fe96 	bl	8011450 <_free_r>
 8013724:	e7f1      	b.n	801370a <_realloc_r+0x40>

08013726 <__ascii_wctomb>:
 8013726:	4603      	mov	r3, r0
 8013728:	4608      	mov	r0, r1
 801372a:	b141      	cbz	r1, 801373e <__ascii_wctomb+0x18>
 801372c:	2aff      	cmp	r2, #255	@ 0xff
 801372e:	d904      	bls.n	801373a <__ascii_wctomb+0x14>
 8013730:	228a      	movs	r2, #138	@ 0x8a
 8013732:	601a      	str	r2, [r3, #0]
 8013734:	f04f 30ff 	mov.w	r0, #4294967295
 8013738:	4770      	bx	lr
 801373a:	700a      	strb	r2, [r1, #0]
 801373c:	2001      	movs	r0, #1
 801373e:	4770      	bx	lr

08013740 <fiprintf>:
 8013740:	b40e      	push	{r1, r2, r3}
 8013742:	b503      	push	{r0, r1, lr}
 8013744:	4601      	mov	r1, r0
 8013746:	ab03      	add	r3, sp, #12
 8013748:	4805      	ldr	r0, [pc, #20]	@ (8013760 <fiprintf+0x20>)
 801374a:	f853 2b04 	ldr.w	r2, [r3], #4
 801374e:	6800      	ldr	r0, [r0, #0]
 8013750:	9301      	str	r3, [sp, #4]
 8013752:	f000 f83f 	bl	80137d4 <_vfiprintf_r>
 8013756:	b002      	add	sp, #8
 8013758:	f85d eb04 	ldr.w	lr, [sp], #4
 801375c:	b003      	add	sp, #12
 801375e:	4770      	bx	lr
 8013760:	20000118 	.word	0x20000118

08013764 <abort>:
 8013764:	b508      	push	{r3, lr}
 8013766:	2006      	movs	r0, #6
 8013768:	f000 fa08 	bl	8013b7c <raise>
 801376c:	2001      	movs	r0, #1
 801376e:	f7f0 f87c 	bl	800386a <_exit>

08013772 <_malloc_usable_size_r>:
 8013772:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013776:	1f18      	subs	r0, r3, #4
 8013778:	2b00      	cmp	r3, #0
 801377a:	bfbc      	itt	lt
 801377c:	580b      	ldrlt	r3, [r1, r0]
 801377e:	18c0      	addlt	r0, r0, r3
 8013780:	4770      	bx	lr

08013782 <__sfputc_r>:
 8013782:	6893      	ldr	r3, [r2, #8]
 8013784:	3b01      	subs	r3, #1
 8013786:	2b00      	cmp	r3, #0
 8013788:	b410      	push	{r4}
 801378a:	6093      	str	r3, [r2, #8]
 801378c:	da08      	bge.n	80137a0 <__sfputc_r+0x1e>
 801378e:	6994      	ldr	r4, [r2, #24]
 8013790:	42a3      	cmp	r3, r4
 8013792:	db01      	blt.n	8013798 <__sfputc_r+0x16>
 8013794:	290a      	cmp	r1, #10
 8013796:	d103      	bne.n	80137a0 <__sfputc_r+0x1e>
 8013798:	f85d 4b04 	ldr.w	r4, [sp], #4
 801379c:	f000 b932 	b.w	8013a04 <__swbuf_r>
 80137a0:	6813      	ldr	r3, [r2, #0]
 80137a2:	1c58      	adds	r0, r3, #1
 80137a4:	6010      	str	r0, [r2, #0]
 80137a6:	7019      	strb	r1, [r3, #0]
 80137a8:	4608      	mov	r0, r1
 80137aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80137ae:	4770      	bx	lr

080137b0 <__sfputs_r>:
 80137b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137b2:	4606      	mov	r6, r0
 80137b4:	460f      	mov	r7, r1
 80137b6:	4614      	mov	r4, r2
 80137b8:	18d5      	adds	r5, r2, r3
 80137ba:	42ac      	cmp	r4, r5
 80137bc:	d101      	bne.n	80137c2 <__sfputs_r+0x12>
 80137be:	2000      	movs	r0, #0
 80137c0:	e007      	b.n	80137d2 <__sfputs_r+0x22>
 80137c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137c6:	463a      	mov	r2, r7
 80137c8:	4630      	mov	r0, r6
 80137ca:	f7ff ffda 	bl	8013782 <__sfputc_r>
 80137ce:	1c43      	adds	r3, r0, #1
 80137d0:	d1f3      	bne.n	80137ba <__sfputs_r+0xa>
 80137d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080137d4 <_vfiprintf_r>:
 80137d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137d8:	460d      	mov	r5, r1
 80137da:	b09d      	sub	sp, #116	@ 0x74
 80137dc:	4614      	mov	r4, r2
 80137de:	4698      	mov	r8, r3
 80137e0:	4606      	mov	r6, r0
 80137e2:	b118      	cbz	r0, 80137ec <_vfiprintf_r+0x18>
 80137e4:	6a03      	ldr	r3, [r0, #32]
 80137e6:	b90b      	cbnz	r3, 80137ec <_vfiprintf_r+0x18>
 80137e8:	f7fc fea8 	bl	801053c <__sinit>
 80137ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80137ee:	07d9      	lsls	r1, r3, #31
 80137f0:	d405      	bmi.n	80137fe <_vfiprintf_r+0x2a>
 80137f2:	89ab      	ldrh	r3, [r5, #12]
 80137f4:	059a      	lsls	r2, r3, #22
 80137f6:	d402      	bmi.n	80137fe <_vfiprintf_r+0x2a>
 80137f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80137fa:	f7fc ffc8 	bl	801078e <__retarget_lock_acquire_recursive>
 80137fe:	89ab      	ldrh	r3, [r5, #12]
 8013800:	071b      	lsls	r3, r3, #28
 8013802:	d501      	bpl.n	8013808 <_vfiprintf_r+0x34>
 8013804:	692b      	ldr	r3, [r5, #16]
 8013806:	b99b      	cbnz	r3, 8013830 <_vfiprintf_r+0x5c>
 8013808:	4629      	mov	r1, r5
 801380a:	4630      	mov	r0, r6
 801380c:	f000 f938 	bl	8013a80 <__swsetup_r>
 8013810:	b170      	cbz	r0, 8013830 <_vfiprintf_r+0x5c>
 8013812:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013814:	07dc      	lsls	r4, r3, #31
 8013816:	d504      	bpl.n	8013822 <_vfiprintf_r+0x4e>
 8013818:	f04f 30ff 	mov.w	r0, #4294967295
 801381c:	b01d      	add	sp, #116	@ 0x74
 801381e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013822:	89ab      	ldrh	r3, [r5, #12]
 8013824:	0598      	lsls	r0, r3, #22
 8013826:	d4f7      	bmi.n	8013818 <_vfiprintf_r+0x44>
 8013828:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801382a:	f7fc ffb1 	bl	8010790 <__retarget_lock_release_recursive>
 801382e:	e7f3      	b.n	8013818 <_vfiprintf_r+0x44>
 8013830:	2300      	movs	r3, #0
 8013832:	9309      	str	r3, [sp, #36]	@ 0x24
 8013834:	2320      	movs	r3, #32
 8013836:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801383a:	f8cd 800c 	str.w	r8, [sp, #12]
 801383e:	2330      	movs	r3, #48	@ 0x30
 8013840:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80139f0 <_vfiprintf_r+0x21c>
 8013844:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013848:	f04f 0901 	mov.w	r9, #1
 801384c:	4623      	mov	r3, r4
 801384e:	469a      	mov	sl, r3
 8013850:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013854:	b10a      	cbz	r2, 801385a <_vfiprintf_r+0x86>
 8013856:	2a25      	cmp	r2, #37	@ 0x25
 8013858:	d1f9      	bne.n	801384e <_vfiprintf_r+0x7a>
 801385a:	ebba 0b04 	subs.w	fp, sl, r4
 801385e:	d00b      	beq.n	8013878 <_vfiprintf_r+0xa4>
 8013860:	465b      	mov	r3, fp
 8013862:	4622      	mov	r2, r4
 8013864:	4629      	mov	r1, r5
 8013866:	4630      	mov	r0, r6
 8013868:	f7ff ffa2 	bl	80137b0 <__sfputs_r>
 801386c:	3001      	adds	r0, #1
 801386e:	f000 80a7 	beq.w	80139c0 <_vfiprintf_r+0x1ec>
 8013872:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013874:	445a      	add	r2, fp
 8013876:	9209      	str	r2, [sp, #36]	@ 0x24
 8013878:	f89a 3000 	ldrb.w	r3, [sl]
 801387c:	2b00      	cmp	r3, #0
 801387e:	f000 809f 	beq.w	80139c0 <_vfiprintf_r+0x1ec>
 8013882:	2300      	movs	r3, #0
 8013884:	f04f 32ff 	mov.w	r2, #4294967295
 8013888:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801388c:	f10a 0a01 	add.w	sl, sl, #1
 8013890:	9304      	str	r3, [sp, #16]
 8013892:	9307      	str	r3, [sp, #28]
 8013894:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013898:	931a      	str	r3, [sp, #104]	@ 0x68
 801389a:	4654      	mov	r4, sl
 801389c:	2205      	movs	r2, #5
 801389e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138a2:	4853      	ldr	r0, [pc, #332]	@ (80139f0 <_vfiprintf_r+0x21c>)
 80138a4:	f7ec fc9c 	bl	80001e0 <memchr>
 80138a8:	9a04      	ldr	r2, [sp, #16]
 80138aa:	b9d8      	cbnz	r0, 80138e4 <_vfiprintf_r+0x110>
 80138ac:	06d1      	lsls	r1, r2, #27
 80138ae:	bf44      	itt	mi
 80138b0:	2320      	movmi	r3, #32
 80138b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80138b6:	0713      	lsls	r3, r2, #28
 80138b8:	bf44      	itt	mi
 80138ba:	232b      	movmi	r3, #43	@ 0x2b
 80138bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80138c0:	f89a 3000 	ldrb.w	r3, [sl]
 80138c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80138c6:	d015      	beq.n	80138f4 <_vfiprintf_r+0x120>
 80138c8:	9a07      	ldr	r2, [sp, #28]
 80138ca:	4654      	mov	r4, sl
 80138cc:	2000      	movs	r0, #0
 80138ce:	f04f 0c0a 	mov.w	ip, #10
 80138d2:	4621      	mov	r1, r4
 80138d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80138d8:	3b30      	subs	r3, #48	@ 0x30
 80138da:	2b09      	cmp	r3, #9
 80138dc:	d94b      	bls.n	8013976 <_vfiprintf_r+0x1a2>
 80138de:	b1b0      	cbz	r0, 801390e <_vfiprintf_r+0x13a>
 80138e0:	9207      	str	r2, [sp, #28]
 80138e2:	e014      	b.n	801390e <_vfiprintf_r+0x13a>
 80138e4:	eba0 0308 	sub.w	r3, r0, r8
 80138e8:	fa09 f303 	lsl.w	r3, r9, r3
 80138ec:	4313      	orrs	r3, r2
 80138ee:	9304      	str	r3, [sp, #16]
 80138f0:	46a2      	mov	sl, r4
 80138f2:	e7d2      	b.n	801389a <_vfiprintf_r+0xc6>
 80138f4:	9b03      	ldr	r3, [sp, #12]
 80138f6:	1d19      	adds	r1, r3, #4
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	9103      	str	r1, [sp, #12]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	bfbb      	ittet	lt
 8013900:	425b      	neglt	r3, r3
 8013902:	f042 0202 	orrlt.w	r2, r2, #2
 8013906:	9307      	strge	r3, [sp, #28]
 8013908:	9307      	strlt	r3, [sp, #28]
 801390a:	bfb8      	it	lt
 801390c:	9204      	strlt	r2, [sp, #16]
 801390e:	7823      	ldrb	r3, [r4, #0]
 8013910:	2b2e      	cmp	r3, #46	@ 0x2e
 8013912:	d10a      	bne.n	801392a <_vfiprintf_r+0x156>
 8013914:	7863      	ldrb	r3, [r4, #1]
 8013916:	2b2a      	cmp	r3, #42	@ 0x2a
 8013918:	d132      	bne.n	8013980 <_vfiprintf_r+0x1ac>
 801391a:	9b03      	ldr	r3, [sp, #12]
 801391c:	1d1a      	adds	r2, r3, #4
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	9203      	str	r2, [sp, #12]
 8013922:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013926:	3402      	adds	r4, #2
 8013928:	9305      	str	r3, [sp, #20]
 801392a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013a00 <_vfiprintf_r+0x22c>
 801392e:	7821      	ldrb	r1, [r4, #0]
 8013930:	2203      	movs	r2, #3
 8013932:	4650      	mov	r0, sl
 8013934:	f7ec fc54 	bl	80001e0 <memchr>
 8013938:	b138      	cbz	r0, 801394a <_vfiprintf_r+0x176>
 801393a:	9b04      	ldr	r3, [sp, #16]
 801393c:	eba0 000a 	sub.w	r0, r0, sl
 8013940:	2240      	movs	r2, #64	@ 0x40
 8013942:	4082      	lsls	r2, r0
 8013944:	4313      	orrs	r3, r2
 8013946:	3401      	adds	r4, #1
 8013948:	9304      	str	r3, [sp, #16]
 801394a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801394e:	4829      	ldr	r0, [pc, #164]	@ (80139f4 <_vfiprintf_r+0x220>)
 8013950:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013954:	2206      	movs	r2, #6
 8013956:	f7ec fc43 	bl	80001e0 <memchr>
 801395a:	2800      	cmp	r0, #0
 801395c:	d03f      	beq.n	80139de <_vfiprintf_r+0x20a>
 801395e:	4b26      	ldr	r3, [pc, #152]	@ (80139f8 <_vfiprintf_r+0x224>)
 8013960:	bb1b      	cbnz	r3, 80139aa <_vfiprintf_r+0x1d6>
 8013962:	9b03      	ldr	r3, [sp, #12]
 8013964:	3307      	adds	r3, #7
 8013966:	f023 0307 	bic.w	r3, r3, #7
 801396a:	3308      	adds	r3, #8
 801396c:	9303      	str	r3, [sp, #12]
 801396e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013970:	443b      	add	r3, r7
 8013972:	9309      	str	r3, [sp, #36]	@ 0x24
 8013974:	e76a      	b.n	801384c <_vfiprintf_r+0x78>
 8013976:	fb0c 3202 	mla	r2, ip, r2, r3
 801397a:	460c      	mov	r4, r1
 801397c:	2001      	movs	r0, #1
 801397e:	e7a8      	b.n	80138d2 <_vfiprintf_r+0xfe>
 8013980:	2300      	movs	r3, #0
 8013982:	3401      	adds	r4, #1
 8013984:	9305      	str	r3, [sp, #20]
 8013986:	4619      	mov	r1, r3
 8013988:	f04f 0c0a 	mov.w	ip, #10
 801398c:	4620      	mov	r0, r4
 801398e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013992:	3a30      	subs	r2, #48	@ 0x30
 8013994:	2a09      	cmp	r2, #9
 8013996:	d903      	bls.n	80139a0 <_vfiprintf_r+0x1cc>
 8013998:	2b00      	cmp	r3, #0
 801399a:	d0c6      	beq.n	801392a <_vfiprintf_r+0x156>
 801399c:	9105      	str	r1, [sp, #20]
 801399e:	e7c4      	b.n	801392a <_vfiprintf_r+0x156>
 80139a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80139a4:	4604      	mov	r4, r0
 80139a6:	2301      	movs	r3, #1
 80139a8:	e7f0      	b.n	801398c <_vfiprintf_r+0x1b8>
 80139aa:	ab03      	add	r3, sp, #12
 80139ac:	9300      	str	r3, [sp, #0]
 80139ae:	462a      	mov	r2, r5
 80139b0:	4b12      	ldr	r3, [pc, #72]	@ (80139fc <_vfiprintf_r+0x228>)
 80139b2:	a904      	add	r1, sp, #16
 80139b4:	4630      	mov	r0, r6
 80139b6:	f7fb ff71 	bl	800f89c <_printf_float>
 80139ba:	4607      	mov	r7, r0
 80139bc:	1c78      	adds	r0, r7, #1
 80139be:	d1d6      	bne.n	801396e <_vfiprintf_r+0x19a>
 80139c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80139c2:	07d9      	lsls	r1, r3, #31
 80139c4:	d405      	bmi.n	80139d2 <_vfiprintf_r+0x1fe>
 80139c6:	89ab      	ldrh	r3, [r5, #12]
 80139c8:	059a      	lsls	r2, r3, #22
 80139ca:	d402      	bmi.n	80139d2 <_vfiprintf_r+0x1fe>
 80139cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80139ce:	f7fc fedf 	bl	8010790 <__retarget_lock_release_recursive>
 80139d2:	89ab      	ldrh	r3, [r5, #12]
 80139d4:	065b      	lsls	r3, r3, #25
 80139d6:	f53f af1f 	bmi.w	8013818 <_vfiprintf_r+0x44>
 80139da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80139dc:	e71e      	b.n	801381c <_vfiprintf_r+0x48>
 80139de:	ab03      	add	r3, sp, #12
 80139e0:	9300      	str	r3, [sp, #0]
 80139e2:	462a      	mov	r2, r5
 80139e4:	4b05      	ldr	r3, [pc, #20]	@ (80139fc <_vfiprintf_r+0x228>)
 80139e6:	a904      	add	r1, sp, #16
 80139e8:	4630      	mov	r0, r6
 80139ea:	f7fc f9ef 	bl	800fdcc <_printf_i>
 80139ee:	e7e4      	b.n	80139ba <_vfiprintf_r+0x1e6>
 80139f0:	08014e75 	.word	0x08014e75
 80139f4:	08014e7f 	.word	0x08014e7f
 80139f8:	0800f89d 	.word	0x0800f89d
 80139fc:	080137b1 	.word	0x080137b1
 8013a00:	08014e7b 	.word	0x08014e7b

08013a04 <__swbuf_r>:
 8013a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a06:	460e      	mov	r6, r1
 8013a08:	4614      	mov	r4, r2
 8013a0a:	4605      	mov	r5, r0
 8013a0c:	b118      	cbz	r0, 8013a16 <__swbuf_r+0x12>
 8013a0e:	6a03      	ldr	r3, [r0, #32]
 8013a10:	b90b      	cbnz	r3, 8013a16 <__swbuf_r+0x12>
 8013a12:	f7fc fd93 	bl	801053c <__sinit>
 8013a16:	69a3      	ldr	r3, [r4, #24]
 8013a18:	60a3      	str	r3, [r4, #8]
 8013a1a:	89a3      	ldrh	r3, [r4, #12]
 8013a1c:	071a      	lsls	r2, r3, #28
 8013a1e:	d501      	bpl.n	8013a24 <__swbuf_r+0x20>
 8013a20:	6923      	ldr	r3, [r4, #16]
 8013a22:	b943      	cbnz	r3, 8013a36 <__swbuf_r+0x32>
 8013a24:	4621      	mov	r1, r4
 8013a26:	4628      	mov	r0, r5
 8013a28:	f000 f82a 	bl	8013a80 <__swsetup_r>
 8013a2c:	b118      	cbz	r0, 8013a36 <__swbuf_r+0x32>
 8013a2e:	f04f 37ff 	mov.w	r7, #4294967295
 8013a32:	4638      	mov	r0, r7
 8013a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a36:	6823      	ldr	r3, [r4, #0]
 8013a38:	6922      	ldr	r2, [r4, #16]
 8013a3a:	1a98      	subs	r0, r3, r2
 8013a3c:	6963      	ldr	r3, [r4, #20]
 8013a3e:	b2f6      	uxtb	r6, r6
 8013a40:	4283      	cmp	r3, r0
 8013a42:	4637      	mov	r7, r6
 8013a44:	dc05      	bgt.n	8013a52 <__swbuf_r+0x4e>
 8013a46:	4621      	mov	r1, r4
 8013a48:	4628      	mov	r0, r5
 8013a4a:	f7ff fa57 	bl	8012efc <_fflush_r>
 8013a4e:	2800      	cmp	r0, #0
 8013a50:	d1ed      	bne.n	8013a2e <__swbuf_r+0x2a>
 8013a52:	68a3      	ldr	r3, [r4, #8]
 8013a54:	3b01      	subs	r3, #1
 8013a56:	60a3      	str	r3, [r4, #8]
 8013a58:	6823      	ldr	r3, [r4, #0]
 8013a5a:	1c5a      	adds	r2, r3, #1
 8013a5c:	6022      	str	r2, [r4, #0]
 8013a5e:	701e      	strb	r6, [r3, #0]
 8013a60:	6962      	ldr	r2, [r4, #20]
 8013a62:	1c43      	adds	r3, r0, #1
 8013a64:	429a      	cmp	r2, r3
 8013a66:	d004      	beq.n	8013a72 <__swbuf_r+0x6e>
 8013a68:	89a3      	ldrh	r3, [r4, #12]
 8013a6a:	07db      	lsls	r3, r3, #31
 8013a6c:	d5e1      	bpl.n	8013a32 <__swbuf_r+0x2e>
 8013a6e:	2e0a      	cmp	r6, #10
 8013a70:	d1df      	bne.n	8013a32 <__swbuf_r+0x2e>
 8013a72:	4621      	mov	r1, r4
 8013a74:	4628      	mov	r0, r5
 8013a76:	f7ff fa41 	bl	8012efc <_fflush_r>
 8013a7a:	2800      	cmp	r0, #0
 8013a7c:	d0d9      	beq.n	8013a32 <__swbuf_r+0x2e>
 8013a7e:	e7d6      	b.n	8013a2e <__swbuf_r+0x2a>

08013a80 <__swsetup_r>:
 8013a80:	b538      	push	{r3, r4, r5, lr}
 8013a82:	4b29      	ldr	r3, [pc, #164]	@ (8013b28 <__swsetup_r+0xa8>)
 8013a84:	4605      	mov	r5, r0
 8013a86:	6818      	ldr	r0, [r3, #0]
 8013a88:	460c      	mov	r4, r1
 8013a8a:	b118      	cbz	r0, 8013a94 <__swsetup_r+0x14>
 8013a8c:	6a03      	ldr	r3, [r0, #32]
 8013a8e:	b90b      	cbnz	r3, 8013a94 <__swsetup_r+0x14>
 8013a90:	f7fc fd54 	bl	801053c <__sinit>
 8013a94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a98:	0719      	lsls	r1, r3, #28
 8013a9a:	d422      	bmi.n	8013ae2 <__swsetup_r+0x62>
 8013a9c:	06da      	lsls	r2, r3, #27
 8013a9e:	d407      	bmi.n	8013ab0 <__swsetup_r+0x30>
 8013aa0:	2209      	movs	r2, #9
 8013aa2:	602a      	str	r2, [r5, #0]
 8013aa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013aa8:	81a3      	strh	r3, [r4, #12]
 8013aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8013aae:	e033      	b.n	8013b18 <__swsetup_r+0x98>
 8013ab0:	0758      	lsls	r0, r3, #29
 8013ab2:	d512      	bpl.n	8013ada <__swsetup_r+0x5a>
 8013ab4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013ab6:	b141      	cbz	r1, 8013aca <__swsetup_r+0x4a>
 8013ab8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013abc:	4299      	cmp	r1, r3
 8013abe:	d002      	beq.n	8013ac6 <__swsetup_r+0x46>
 8013ac0:	4628      	mov	r0, r5
 8013ac2:	f7fd fcc5 	bl	8011450 <_free_r>
 8013ac6:	2300      	movs	r3, #0
 8013ac8:	6363      	str	r3, [r4, #52]	@ 0x34
 8013aca:	89a3      	ldrh	r3, [r4, #12]
 8013acc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013ad0:	81a3      	strh	r3, [r4, #12]
 8013ad2:	2300      	movs	r3, #0
 8013ad4:	6063      	str	r3, [r4, #4]
 8013ad6:	6923      	ldr	r3, [r4, #16]
 8013ad8:	6023      	str	r3, [r4, #0]
 8013ada:	89a3      	ldrh	r3, [r4, #12]
 8013adc:	f043 0308 	orr.w	r3, r3, #8
 8013ae0:	81a3      	strh	r3, [r4, #12]
 8013ae2:	6923      	ldr	r3, [r4, #16]
 8013ae4:	b94b      	cbnz	r3, 8013afa <__swsetup_r+0x7a>
 8013ae6:	89a3      	ldrh	r3, [r4, #12]
 8013ae8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013aec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013af0:	d003      	beq.n	8013afa <__swsetup_r+0x7a>
 8013af2:	4621      	mov	r1, r4
 8013af4:	4628      	mov	r0, r5
 8013af6:	f000 f883 	bl	8013c00 <__smakebuf_r>
 8013afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013afe:	f013 0201 	ands.w	r2, r3, #1
 8013b02:	d00a      	beq.n	8013b1a <__swsetup_r+0x9a>
 8013b04:	2200      	movs	r2, #0
 8013b06:	60a2      	str	r2, [r4, #8]
 8013b08:	6962      	ldr	r2, [r4, #20]
 8013b0a:	4252      	negs	r2, r2
 8013b0c:	61a2      	str	r2, [r4, #24]
 8013b0e:	6922      	ldr	r2, [r4, #16]
 8013b10:	b942      	cbnz	r2, 8013b24 <__swsetup_r+0xa4>
 8013b12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013b16:	d1c5      	bne.n	8013aa4 <__swsetup_r+0x24>
 8013b18:	bd38      	pop	{r3, r4, r5, pc}
 8013b1a:	0799      	lsls	r1, r3, #30
 8013b1c:	bf58      	it	pl
 8013b1e:	6962      	ldrpl	r2, [r4, #20]
 8013b20:	60a2      	str	r2, [r4, #8]
 8013b22:	e7f4      	b.n	8013b0e <__swsetup_r+0x8e>
 8013b24:	2000      	movs	r0, #0
 8013b26:	e7f7      	b.n	8013b18 <__swsetup_r+0x98>
 8013b28:	20000118 	.word	0x20000118

08013b2c <_raise_r>:
 8013b2c:	291f      	cmp	r1, #31
 8013b2e:	b538      	push	{r3, r4, r5, lr}
 8013b30:	4605      	mov	r5, r0
 8013b32:	460c      	mov	r4, r1
 8013b34:	d904      	bls.n	8013b40 <_raise_r+0x14>
 8013b36:	2316      	movs	r3, #22
 8013b38:	6003      	str	r3, [r0, #0]
 8013b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8013b3e:	bd38      	pop	{r3, r4, r5, pc}
 8013b40:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013b42:	b112      	cbz	r2, 8013b4a <_raise_r+0x1e>
 8013b44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013b48:	b94b      	cbnz	r3, 8013b5e <_raise_r+0x32>
 8013b4a:	4628      	mov	r0, r5
 8013b4c:	f000 f830 	bl	8013bb0 <_getpid_r>
 8013b50:	4622      	mov	r2, r4
 8013b52:	4601      	mov	r1, r0
 8013b54:	4628      	mov	r0, r5
 8013b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013b5a:	f000 b817 	b.w	8013b8c <_kill_r>
 8013b5e:	2b01      	cmp	r3, #1
 8013b60:	d00a      	beq.n	8013b78 <_raise_r+0x4c>
 8013b62:	1c59      	adds	r1, r3, #1
 8013b64:	d103      	bne.n	8013b6e <_raise_r+0x42>
 8013b66:	2316      	movs	r3, #22
 8013b68:	6003      	str	r3, [r0, #0]
 8013b6a:	2001      	movs	r0, #1
 8013b6c:	e7e7      	b.n	8013b3e <_raise_r+0x12>
 8013b6e:	2100      	movs	r1, #0
 8013b70:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013b74:	4620      	mov	r0, r4
 8013b76:	4798      	blx	r3
 8013b78:	2000      	movs	r0, #0
 8013b7a:	e7e0      	b.n	8013b3e <_raise_r+0x12>

08013b7c <raise>:
 8013b7c:	4b02      	ldr	r3, [pc, #8]	@ (8013b88 <raise+0xc>)
 8013b7e:	4601      	mov	r1, r0
 8013b80:	6818      	ldr	r0, [r3, #0]
 8013b82:	f7ff bfd3 	b.w	8013b2c <_raise_r>
 8013b86:	bf00      	nop
 8013b88:	20000118 	.word	0x20000118

08013b8c <_kill_r>:
 8013b8c:	b538      	push	{r3, r4, r5, lr}
 8013b8e:	4d07      	ldr	r5, [pc, #28]	@ (8013bac <_kill_r+0x20>)
 8013b90:	2300      	movs	r3, #0
 8013b92:	4604      	mov	r4, r0
 8013b94:	4608      	mov	r0, r1
 8013b96:	4611      	mov	r1, r2
 8013b98:	602b      	str	r3, [r5, #0]
 8013b9a:	f7ef fe56 	bl	800384a <_kill>
 8013b9e:	1c43      	adds	r3, r0, #1
 8013ba0:	d102      	bne.n	8013ba8 <_kill_r+0x1c>
 8013ba2:	682b      	ldr	r3, [r5, #0]
 8013ba4:	b103      	cbz	r3, 8013ba8 <_kill_r+0x1c>
 8013ba6:	6023      	str	r3, [r4, #0]
 8013ba8:	bd38      	pop	{r3, r4, r5, pc}
 8013baa:	bf00      	nop
 8013bac:	20001c8c 	.word	0x20001c8c

08013bb0 <_getpid_r>:
 8013bb0:	f7ef be43 	b.w	800383a <_getpid>

08013bb4 <__swhatbuf_r>:
 8013bb4:	b570      	push	{r4, r5, r6, lr}
 8013bb6:	460c      	mov	r4, r1
 8013bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bbc:	2900      	cmp	r1, #0
 8013bbe:	b096      	sub	sp, #88	@ 0x58
 8013bc0:	4615      	mov	r5, r2
 8013bc2:	461e      	mov	r6, r3
 8013bc4:	da0d      	bge.n	8013be2 <__swhatbuf_r+0x2e>
 8013bc6:	89a3      	ldrh	r3, [r4, #12]
 8013bc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013bcc:	f04f 0100 	mov.w	r1, #0
 8013bd0:	bf14      	ite	ne
 8013bd2:	2340      	movne	r3, #64	@ 0x40
 8013bd4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013bd8:	2000      	movs	r0, #0
 8013bda:	6031      	str	r1, [r6, #0]
 8013bdc:	602b      	str	r3, [r5, #0]
 8013bde:	b016      	add	sp, #88	@ 0x58
 8013be0:	bd70      	pop	{r4, r5, r6, pc}
 8013be2:	466a      	mov	r2, sp
 8013be4:	f000 f848 	bl	8013c78 <_fstat_r>
 8013be8:	2800      	cmp	r0, #0
 8013bea:	dbec      	blt.n	8013bc6 <__swhatbuf_r+0x12>
 8013bec:	9901      	ldr	r1, [sp, #4]
 8013bee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013bf2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013bf6:	4259      	negs	r1, r3
 8013bf8:	4159      	adcs	r1, r3
 8013bfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013bfe:	e7eb      	b.n	8013bd8 <__swhatbuf_r+0x24>

08013c00 <__smakebuf_r>:
 8013c00:	898b      	ldrh	r3, [r1, #12]
 8013c02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013c04:	079d      	lsls	r5, r3, #30
 8013c06:	4606      	mov	r6, r0
 8013c08:	460c      	mov	r4, r1
 8013c0a:	d507      	bpl.n	8013c1c <__smakebuf_r+0x1c>
 8013c0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013c10:	6023      	str	r3, [r4, #0]
 8013c12:	6123      	str	r3, [r4, #16]
 8013c14:	2301      	movs	r3, #1
 8013c16:	6163      	str	r3, [r4, #20]
 8013c18:	b003      	add	sp, #12
 8013c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c1c:	ab01      	add	r3, sp, #4
 8013c1e:	466a      	mov	r2, sp
 8013c20:	f7ff ffc8 	bl	8013bb4 <__swhatbuf_r>
 8013c24:	9f00      	ldr	r7, [sp, #0]
 8013c26:	4605      	mov	r5, r0
 8013c28:	4639      	mov	r1, r7
 8013c2a:	4630      	mov	r0, r6
 8013c2c:	f7fb fd0a 	bl	800f644 <_malloc_r>
 8013c30:	b948      	cbnz	r0, 8013c46 <__smakebuf_r+0x46>
 8013c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c36:	059a      	lsls	r2, r3, #22
 8013c38:	d4ee      	bmi.n	8013c18 <__smakebuf_r+0x18>
 8013c3a:	f023 0303 	bic.w	r3, r3, #3
 8013c3e:	f043 0302 	orr.w	r3, r3, #2
 8013c42:	81a3      	strh	r3, [r4, #12]
 8013c44:	e7e2      	b.n	8013c0c <__smakebuf_r+0xc>
 8013c46:	89a3      	ldrh	r3, [r4, #12]
 8013c48:	6020      	str	r0, [r4, #0]
 8013c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013c4e:	81a3      	strh	r3, [r4, #12]
 8013c50:	9b01      	ldr	r3, [sp, #4]
 8013c52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013c56:	b15b      	cbz	r3, 8013c70 <__smakebuf_r+0x70>
 8013c58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013c5c:	4630      	mov	r0, r6
 8013c5e:	f000 f81d 	bl	8013c9c <_isatty_r>
 8013c62:	b128      	cbz	r0, 8013c70 <__smakebuf_r+0x70>
 8013c64:	89a3      	ldrh	r3, [r4, #12]
 8013c66:	f023 0303 	bic.w	r3, r3, #3
 8013c6a:	f043 0301 	orr.w	r3, r3, #1
 8013c6e:	81a3      	strh	r3, [r4, #12]
 8013c70:	89a3      	ldrh	r3, [r4, #12]
 8013c72:	431d      	orrs	r5, r3
 8013c74:	81a5      	strh	r5, [r4, #12]
 8013c76:	e7cf      	b.n	8013c18 <__smakebuf_r+0x18>

08013c78 <_fstat_r>:
 8013c78:	b538      	push	{r3, r4, r5, lr}
 8013c7a:	4d07      	ldr	r5, [pc, #28]	@ (8013c98 <_fstat_r+0x20>)
 8013c7c:	2300      	movs	r3, #0
 8013c7e:	4604      	mov	r4, r0
 8013c80:	4608      	mov	r0, r1
 8013c82:	4611      	mov	r1, r2
 8013c84:	602b      	str	r3, [r5, #0]
 8013c86:	f7ef fe40 	bl	800390a <_fstat>
 8013c8a:	1c43      	adds	r3, r0, #1
 8013c8c:	d102      	bne.n	8013c94 <_fstat_r+0x1c>
 8013c8e:	682b      	ldr	r3, [r5, #0]
 8013c90:	b103      	cbz	r3, 8013c94 <_fstat_r+0x1c>
 8013c92:	6023      	str	r3, [r4, #0]
 8013c94:	bd38      	pop	{r3, r4, r5, pc}
 8013c96:	bf00      	nop
 8013c98:	20001c8c 	.word	0x20001c8c

08013c9c <_isatty_r>:
 8013c9c:	b538      	push	{r3, r4, r5, lr}
 8013c9e:	4d06      	ldr	r5, [pc, #24]	@ (8013cb8 <_isatty_r+0x1c>)
 8013ca0:	2300      	movs	r3, #0
 8013ca2:	4604      	mov	r4, r0
 8013ca4:	4608      	mov	r0, r1
 8013ca6:	602b      	str	r3, [r5, #0]
 8013ca8:	f7ef fe3f 	bl	800392a <_isatty>
 8013cac:	1c43      	adds	r3, r0, #1
 8013cae:	d102      	bne.n	8013cb6 <_isatty_r+0x1a>
 8013cb0:	682b      	ldr	r3, [r5, #0]
 8013cb2:	b103      	cbz	r3, 8013cb6 <_isatty_r+0x1a>
 8013cb4:	6023      	str	r3, [r4, #0]
 8013cb6:	bd38      	pop	{r3, r4, r5, pc}
 8013cb8:	20001c8c 	.word	0x20001c8c

08013cbc <_init>:
 8013cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cbe:	bf00      	nop
 8013cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013cc2:	bc08      	pop	{r3}
 8013cc4:	469e      	mov	lr, r3
 8013cc6:	4770      	bx	lr

08013cc8 <_fini>:
 8013cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cca:	bf00      	nop
 8013ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013cce:	bc08      	pop	{r3}
 8013cd0:	469e      	mov	lr, r3
 8013cd2:	4770      	bx	lr
