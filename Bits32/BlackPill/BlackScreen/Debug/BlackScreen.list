
BlackScreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e408  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ac  0800e5a8  0800e5a8  0000f5a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee54  0800ee54  00010158  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ee54  0800ee54  0000fe54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee5c  0800ee5c  00010158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee5c  0800ee5c  0000fe5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ee60  0800ee60  0000fe60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  0800ee64  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018cc  20000158  0800efbc  00010158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a24  0800efbc  00010a24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010158  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a8a8  00000000  00000000  00010188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000432d  00000000  00000000  0002aa30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001820  00000000  00000000  0002ed60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001298  00000000  00000000  00030580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000076be  00000000  00000000  00031818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f363  00000000  00000000  00038ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0175  00000000  00000000  00058239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f83ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a64  00000000  00000000  000f83f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000fee58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000158 	.word	0x20000158
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e590 	.word	0x0800e590

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000015c 	.word	0x2000015c
 80001dc:	0800e590 	.word	0x0800e590

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <UP_initprotocol>:
_work casts;
int16_t value=9999;
_eProtocolo estadoProtocolo;
_sDato *datosComLib;

void UP_initprotocol(_sDato *datosCom,uint8_t ringbuff){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	70fb      	strb	r3, [r7, #3]

		datosCom->bufferRx = malloc(ringbuff);
 80005b8:	78fb      	ldrb	r3, [r7, #3]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f00d fb40 	bl	800dc40 <malloc>
 80005c0:	4603      	mov	r3, r0
 80005c2:	461a      	mov	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	609a      	str	r2, [r3, #8]
	    datosCom->bufferTx = malloc(ringbuff);
 80005c8:	78fb      	ldrb	r3, [r7, #3]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f00d fb38 	bl	800dc40 <malloc>
 80005d0:	4603      	mov	r3, r0
 80005d2:	461a      	mov	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	60da      	str	r2, [r3, #12]
	    datosComLib=datosCom;
 80005d8:	4a03      	ldr	r2, [pc, #12]	@ (80005e8 <UP_initprotocol+0x3c>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6013      	str	r3, [r2, #0]

}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	2000017c 	.word	0x2000017c

080005ec <UP_sendInfo>:

void UP_sendInfo(_eEstadoMEFcmd CMD,uint8_t *bufferAux,uint8_t bytes){
 80005ec:	b490      	push	{r4, r7}
 80005ee:	b08c      	sub	sp, #48	@ 0x30
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	6039      	str	r1, [r7, #0]
 80005f6:	71fb      	strb	r3, [r7, #7]
 80005f8:	4613      	mov	r3, r2
 80005fa:	71bb      	strb	r3, [r7, #6]

    uint8_t bufAux[30], indiceAux=0,cks=0,i=0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000602:	2300      	movs	r3, #0
 8000604:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000608:	2300      	movs	r3, #0
 800060a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    bufAux[indiceAux++]='U';
 800060e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000612:	1c5a      	adds	r2, r3, #1
 8000614:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000618:	3330      	adds	r3, #48	@ 0x30
 800061a:	443b      	add	r3, r7
 800061c:	2255      	movs	r2, #85	@ 0x55
 800061e:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='N';
 8000622:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000626:	1c5a      	adds	r2, r3, #1
 8000628:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 800062c:	3330      	adds	r3, #48	@ 0x30
 800062e:	443b      	add	r3, r7
 8000630:	224e      	movs	r2, #78	@ 0x4e
 8000632:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='E';
 8000636:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800063a:	1c5a      	adds	r2, r3, #1
 800063c:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000640:	3330      	adds	r3, #48	@ 0x30
 8000642:	443b      	add	r3, r7
 8000644:	2245      	movs	r2, #69	@ 0x45
 8000646:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='R';
 800064a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800064e:	1c5a      	adds	r2, r3, #1
 8000650:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000654:	3330      	adds	r3, #48	@ 0x30
 8000656:	443b      	add	r3, r7
 8000658:	2252      	movs	r2, #82	@ 0x52
 800065a:	f803 2c24 	strb.w	r2, [r3, #-36]

    bufAux[indiceAux++]=bytes+1;
 800065e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000662:	1c5a      	adds	r2, r3, #1
 8000664:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000668:	4619      	mov	r1, r3
 800066a:	79bb      	ldrb	r3, [r7, #6]
 800066c:	3301      	adds	r3, #1
 800066e:	b2da      	uxtb	r2, r3
 8000670:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 8000674:	443b      	add	r3, r7
 8000676:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]=':';
 800067a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800067e:	1c5a      	adds	r2, r3, #1
 8000680:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000684:	3330      	adds	r3, #48	@ 0x30
 8000686:	443b      	add	r3, r7
 8000688:	223a      	movs	r2, #58	@ 0x3a
 800068a:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]=CMD;
 800068e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000692:	1c5a      	adds	r2, r3, #1
 8000694:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000698:	3330      	adds	r3, #48	@ 0x30
 800069a:	443b      	add	r3, r7
 800069c:	79fa      	ldrb	r2, [r7, #7]
 800069e:	f803 2c24 	strb.w	r2, [r3, #-36]

    for(i=0; i<bytes-1; i++)
 80006a2:	2300      	movs	r3, #0
 80006a4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80006a8:	e012      	b.n	80006d0 <UP_sendInfo+0xe4>
        bufAux[indiceAux++] = bufferAux[i];
 80006aa:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80006ae:	683a      	ldr	r2, [r7, #0]
 80006b0:	441a      	add	r2, r3
 80006b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80006b6:	1c59      	adds	r1, r3, #1
 80006b8:	f887 102f 	strb.w	r1, [r7, #47]	@ 0x2f
 80006bc:	7812      	ldrb	r2, [r2, #0]
 80006be:	3330      	adds	r3, #48	@ 0x30
 80006c0:	443b      	add	r3, r7
 80006c2:	f803 2c24 	strb.w	r2, [r3, #-36]
    for(i=0; i<bytes-1; i++)
 80006c6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80006ca:	3301      	adds	r3, #1
 80006cc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80006d0:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80006d4:	79bb      	ldrb	r3, [r7, #6]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	429a      	cmp	r2, r3
 80006da:	dbe6      	blt.n	80006aa <UP_sendInfo+0xbe>

    cks=0;
 80006dc:	2300      	movs	r3, #0
 80006de:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    for(i=0 ;i<indiceAux;i++){
 80006e2:	2300      	movs	r3, #0
 80006e4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80006e8:	e022      	b.n	8000730 <UP_sendInfo+0x144>
        cks^= bufAux[i];
 80006ea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80006ee:	3330      	adds	r3, #48	@ 0x30
 80006f0:	443b      	add	r3, r7
 80006f2:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 80006f6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80006fa:	4053      	eors	r3, r2
 80006fc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        datosComLib->bufferTx[datosComLib->indexWriteTx++]=bufAux[i];
 8000700:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8000704:	4b19      	ldr	r3, [pc, #100]	@ (800076c <UP_sendInfo+0x180>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	68d8      	ldr	r0, [r3, #12]
 800070a:	4b18      	ldr	r3, [pc, #96]	@ (800076c <UP_sendInfo+0x180>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	795a      	ldrb	r2, [r3, #5]
 8000710:	1c54      	adds	r4, r2, #1
 8000712:	b2e4      	uxtb	r4, r4
 8000714:	715c      	strb	r4, [r3, #5]
 8000716:	4613      	mov	r3, r2
 8000718:	4403      	add	r3, r0
 800071a:	f101 0230 	add.w	r2, r1, #48	@ 0x30
 800071e:	443a      	add	r2, r7
 8000720:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 8000724:	701a      	strb	r2, [r3, #0]
    for(i=0 ;i<indiceAux;i++){
 8000726:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800072a:	3301      	adds	r3, #1
 800072c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000730:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000734:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000738:	429a      	cmp	r2, r3
 800073a:	d3d6      	bcc.n	80006ea <UP_sendInfo+0xfe>
    }
     datosComLib->bufferTx[datosComLib->indexWriteTx++]=cks;
 800073c:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <UP_sendInfo+0x180>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	68d9      	ldr	r1, [r3, #12]
 8000742:	4b0a      	ldr	r3, [pc, #40]	@ (800076c <UP_sendInfo+0x180>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	795a      	ldrb	r2, [r3, #5]
 8000748:	1c50      	adds	r0, r2, #1
 800074a:	b2c0      	uxtb	r0, r0
 800074c:	7158      	strb	r0, [r3, #5]
 800074e:	4613      	mov	r3, r2
 8000750:	440b      	add	r3, r1
 8000752:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000756:	701a      	strb	r2, [r3, #0]

     datosComLib->bytesTosend=indiceAux;
 8000758:	4b04      	ldr	r3, [pc, #16]	@ (800076c <UP_sendInfo+0x180>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000760:	741a      	strb	r2, [r3, #16]

}
 8000762:	bf00      	nop
 8000764:	3730      	adds	r7, #48	@ 0x30
 8000766:	46bd      	mov	sp, r7
 8000768:	bc90      	pop	{r4, r7}
 800076a:	4770      	bx	lr
 800076c:	2000017c 	.word	0x2000017c

08000770 <UP_decodeHeader>:

void UP_decodeHeader(_sDato *datosComLib){
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]

    static uint8_t nBytes=0;

    uint8_t indexWriteRxCopy=datosComLib->indexWriteRx;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	78db      	ldrb	r3, [r3, #3]
 800077c:	73fb      	strb	r3, [r7, #15]

    while (datosComLib->indexReadRx!=indexWriteRxCopy)
 800077e:	e0e2      	b.n	8000946 <UP_decodeHeader+0x1d6>
    {
        switch (estadoProtocolo) {
 8000780:	4b76      	ldr	r3, [pc, #472]	@ (800095c <UP_decodeHeader+0x1ec>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b06      	cmp	r3, #6
 8000786:	f200 80d7 	bhi.w	8000938 <UP_decodeHeader+0x1c8>
 800078a:	a201      	add	r2, pc, #4	@ (adr r2, 8000790 <UP_decodeHeader+0x20>)
 800078c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000790:	080007ad 	.word	0x080007ad
 8000794:	080007d5 	.word	0x080007d5
 8000798:	08000809 	.word	0x08000809
 800079c:	0800083d 	.word	0x0800083d
 80007a0:	08000871 	.word	0x08000871
 80007a4:	08000899 	.word	0x08000899
 80007a8:	080008db 	.word	0x080008db
            case START:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='U'){
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	689a      	ldr	r2, [r3, #8]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	791b      	ldrb	r3, [r3, #4]
 80007b4:	1c59      	adds	r1, r3, #1
 80007b6:	b2c8      	uxtb	r0, r1
 80007b8:	6879      	ldr	r1, [r7, #4]
 80007ba:	7108      	strb	r0, [r1, #4]
 80007bc:	4413      	add	r3, r2
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b55      	cmp	r3, #85	@ 0x55
 80007c2:	f040 80bd 	bne.w	8000940 <UP_decodeHeader+0x1d0>
                    estadoProtocolo=HEADER_1;
 80007c6:	4b65      	ldr	r3, [pc, #404]	@ (800095c <UP_decodeHeader+0x1ec>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	701a      	strb	r2, [r3, #0]
                    datosComLib->cheksumRx=0;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2200      	movs	r2, #0
 80007d0:	709a      	strb	r2, [r3, #2]
                }
                break;
 80007d2:	e0b5      	b.n	8000940 <UP_decodeHeader+0x1d0>
            case HEADER_1:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='N')
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	689a      	ldr	r2, [r3, #8]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	791b      	ldrb	r3, [r3, #4]
 80007dc:	1c59      	adds	r1, r3, #1
 80007de:	b2c8      	uxtb	r0, r1
 80007e0:	6879      	ldr	r1, [r7, #4]
 80007e2:	7108      	strb	r0, [r1, #4]
 80007e4:	4413      	add	r3, r2
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b4e      	cmp	r3, #78	@ 0x4e
 80007ea:	d103      	bne.n	80007f4 <UP_decodeHeader+0x84>
                   estadoProtocolo=HEADER_2;
 80007ec:	4b5b      	ldr	r3, [pc, #364]	@ (800095c <UP_decodeHeader+0x1ec>)
 80007ee:	2202      	movs	r2, #2
 80007f0:	701a      	strb	r2, [r3, #0]
                else{
                    datosComLib->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 80007f2:	e0a8      	b.n	8000946 <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	791b      	ldrb	r3, [r3, #4]
 80007f8:	3b01      	subs	r3, #1
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 8000800:	4b56      	ldr	r3, [pc, #344]	@ (800095c <UP_decodeHeader+0x1ec>)
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]
                break;
 8000806:	e09e      	b.n	8000946 <UP_decodeHeader+0x1d6>
            case HEADER_2:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='E')
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	689a      	ldr	r2, [r3, #8]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	791b      	ldrb	r3, [r3, #4]
 8000810:	1c59      	adds	r1, r3, #1
 8000812:	b2c8      	uxtb	r0, r1
 8000814:	6879      	ldr	r1, [r7, #4]
 8000816:	7108      	strb	r0, [r1, #4]
 8000818:	4413      	add	r3, r2
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b45      	cmp	r3, #69	@ 0x45
 800081e:	d103      	bne.n	8000828 <UP_decodeHeader+0xb8>
                    estadoProtocolo=HEADER_3;
 8000820:	4b4e      	ldr	r3, [pc, #312]	@ (800095c <UP_decodeHeader+0x1ec>)
 8000822:	2203      	movs	r2, #3
 8000824:	701a      	strb	r2, [r3, #0]
                else{
                    datosComLib->indexReadRx--;
                   estadoProtocolo=START;
                }
                break;
 8000826:	e08e      	b.n	8000946 <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	791b      	ldrb	r3, [r3, #4]
 800082c:	3b01      	subs	r3, #1
 800082e:	b2da      	uxtb	r2, r3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	711a      	strb	r2, [r3, #4]
                   estadoProtocolo=START;
 8000834:	4b49      	ldr	r3, [pc, #292]	@ (800095c <UP_decodeHeader+0x1ec>)
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
                break;
 800083a:	e084      	b.n	8000946 <UP_decodeHeader+0x1d6>
			case HEADER_3:
				if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='R')
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	689a      	ldr	r2, [r3, #8]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	791b      	ldrb	r3, [r3, #4]
 8000844:	1c59      	adds	r1, r3, #1
 8000846:	b2c8      	uxtb	r0, r1
 8000848:	6879      	ldr	r1, [r7, #4]
 800084a:	7108      	strb	r0, [r1, #4]
 800084c:	4413      	add	r3, r2
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b52      	cmp	r3, #82	@ 0x52
 8000852:	d103      	bne.n	800085c <UP_decodeHeader+0xec>
					estadoProtocolo=NBYTES;
 8000854:	4b41      	ldr	r3, [pc, #260]	@ (800095c <UP_decodeHeader+0x1ec>)
 8000856:	2204      	movs	r2, #4
 8000858:	701a      	strb	r2, [r3, #0]
				else{
					datosComLib->indexReadRx--;
				    estadoProtocolo=START;
				}
            break;
 800085a:	e074      	b.n	8000946 <UP_decodeHeader+0x1d6>
					datosComLib->indexReadRx--;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	791b      	ldrb	r3, [r3, #4]
 8000860:	3b01      	subs	r3, #1
 8000862:	b2da      	uxtb	r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	711a      	strb	r2, [r3, #4]
				    estadoProtocolo=START;
 8000868:	4b3c      	ldr	r3, [pc, #240]	@ (800095c <UP_decodeHeader+0x1ec>)
 800086a:	2200      	movs	r2, #0
 800086c:	701a      	strb	r2, [r3, #0]
            break;
 800086e:	e06a      	b.n	8000946 <UP_decodeHeader+0x1d6>
            case NBYTES:
                datosComLib->indexStart=datosComLib->indexReadRx;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	791a      	ldrb	r2, [r3, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	705a      	strb	r2, [r3, #1]
                nBytes=datosComLib->bufferRx[datosComLib->indexReadRx++];
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	689a      	ldr	r2, [r3, #8]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	791b      	ldrb	r3, [r3, #4]
 8000880:	1c59      	adds	r1, r3, #1
 8000882:	b2c8      	uxtb	r0, r1
 8000884:	6879      	ldr	r1, [r7, #4]
 8000886:	7108      	strb	r0, [r1, #4]
 8000888:	4413      	add	r3, r2
 800088a:	781a      	ldrb	r2, [r3, #0]
 800088c:	4b34      	ldr	r3, [pc, #208]	@ (8000960 <UP_decodeHeader+0x1f0>)
 800088e:	701a      	strb	r2, [r3, #0]
                estadoProtocolo=TOKEN;
 8000890:	4b32      	ldr	r3, [pc, #200]	@ (800095c <UP_decodeHeader+0x1ec>)
 8000892:	2205      	movs	r2, #5
 8000894:	701a      	strb	r2, [r3, #0]
                break;
 8000896:	e056      	b.n	8000946 <UP_decodeHeader+0x1d6>
            case TOKEN:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]==':'){
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	689a      	ldr	r2, [r3, #8]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	791b      	ldrb	r3, [r3, #4]
 80008a0:	1c59      	adds	r1, r3, #1
 80008a2:	b2c8      	uxtb	r0, r1
 80008a4:	6879      	ldr	r1, [r7, #4]
 80008a6:	7108      	strb	r0, [r1, #4]
 80008a8:	4413      	add	r3, r2
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b3a      	cmp	r3, #58	@ 0x3a
 80008ae:	d10a      	bne.n	80008c6 <UP_decodeHeader+0x156>
                   estadoProtocolo=PAYLOAD;
 80008b0:	4b2a      	ldr	r3, [pc, #168]	@ (800095c <UP_decodeHeader+0x1ec>)
 80008b2:	2206      	movs	r2, #6
 80008b4:	701a      	strb	r2, [r3, #0]
                    datosComLib->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 80008b6:	4b2a      	ldr	r3, [pc, #168]	@ (8000960 <UP_decodeHeader+0x1f0>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	709a      	strb	r2, [r3, #2]
                }
                else{
                    datosComLib->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 80008c4:	e03f      	b.n	8000946 <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	791b      	ldrb	r3, [r3, #4]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 80008d2:	4b22      	ldr	r3, [pc, #136]	@ (800095c <UP_decodeHeader+0x1ec>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]
                break;
 80008d8:	e035      	b.n	8000946 <UP_decodeHeader+0x1d6>
            case PAYLOAD:
                if (nBytes>1){
 80008da:	4b21      	ldr	r3, [pc, #132]	@ (8000960 <UP_decodeHeader+0x1f0>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d90f      	bls.n	8000902 <UP_decodeHeader+0x192>
                    datosComLib->cheksumRx ^= datosComLib->bufferRx[datosComLib->indexReadRx++];
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	689a      	ldr	r2, [r3, #8]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	791b      	ldrb	r3, [r3, #4]
 80008ea:	1c59      	adds	r1, r3, #1
 80008ec:	b2c8      	uxtb	r0, r1
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	7108      	strb	r0, [r1, #4]
 80008f2:	4413      	add	r3, r2
 80008f4:	781a      	ldrb	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	789b      	ldrb	r3, [r3, #2]
 80008fa:	4053      	eors	r3, r2
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	709a      	strb	r2, [r3, #2]
                }
                nBytes--;
 8000902:	4b17      	ldr	r3, [pc, #92]	@ (8000960 <UP_decodeHeader+0x1f0>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	3b01      	subs	r3, #1
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <UP_decodeHeader+0x1f0>)
 800090c:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){
 800090e:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <UP_decodeHeader+0x1f0>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d116      	bne.n	8000944 <UP_decodeHeader+0x1d4>
                    estadoProtocolo=START;
 8000916:	4b11      	ldr	r3, [pc, #68]	@ (800095c <UP_decodeHeader+0x1ec>)
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
                    if(datosComLib->cheksumRx == datosComLib->bufferRx[datosComLib->indexReadRx]){
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	789a      	ldrb	r2, [r3, #2]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	689b      	ldr	r3, [r3, #8]
 8000924:	6879      	ldr	r1, [r7, #4]
 8000926:	7909      	ldrb	r1, [r1, #4]
 8000928:	440b      	add	r3, r1
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	429a      	cmp	r2, r3
 800092e:	d109      	bne.n	8000944 <UP_decodeHeader+0x1d4>
                    	UP_decodeData(datosComLib);
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f000 f817 	bl	8000964 <UP_decodeData>
                    }
                }

                break;
 8000936:	e005      	b.n	8000944 <UP_decodeHeader+0x1d4>
            default:
                estadoProtocolo=START;
 8000938:	4b08      	ldr	r3, [pc, #32]	@ (800095c <UP_decodeHeader+0x1ec>)
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
                break;
 800093e:	e002      	b.n	8000946 <UP_decodeHeader+0x1d6>
                break;
 8000940:	bf00      	nop
 8000942:	e000      	b.n	8000946 <UP_decodeHeader+0x1d6>
                break;
 8000944:	bf00      	nop
    while (datosComLib->indexReadRx!=indexWriteRxCopy)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	791b      	ldrb	r3, [r3, #4]
 800094a:	7bfa      	ldrb	r2, [r7, #15]
 800094c:	429a      	cmp	r2, r3
 800094e:	f47f af17 	bne.w	8000780 <UP_decodeHeader+0x10>
        }
    }
}
 8000952:	bf00      	nop
 8000954:	bf00      	nop
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000178 	.word	0x20000178
 8000960:	20000180 	.word	0x20000180

08000964 <UP_decodeData>:

void UP_decodeData(_sDato *datosComLib){
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]

    uint8_t bufAux[20], indiceAux=0,bytes=0;
 800096c:	2300      	movs	r3, #0
 800096e:	77bb      	strb	r3, [r7, #30]
 8000970:	2300      	movs	r3, #0
 8000972:	77fb      	strb	r3, [r7, #31]

    switch (datosComLib->bufferRx[datosComLib->indexStart+2])//CMD EN LA POSICION 2
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	689a      	ldr	r2, [r3, #8]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	785b      	ldrb	r3, [r3, #1]
 800097c:	3302      	adds	r3, #2
 800097e:	4413      	add	r3, r2
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	3bf0      	subs	r3, #240	@ 0xf0
 8000984:	2b03      	cmp	r3, #3
 8000986:	d84a      	bhi.n	8000a1e <UP_decodeData+0xba>
 8000988:	a201      	add	r2, pc, #4	@ (adr r2, 8000990 <UP_decodeData+0x2c>)
 800098a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800098e:	bf00      	nop
 8000990:	080009a1 	.word	0x080009a1
 8000994:	080009b7 	.word	0x080009b7
 8000998:	080009cd 	.word	0x080009cd
 800099c:	080009df 	.word	0x080009df
    {
    case ALIVE:

        bufAux[indiceAux++]=ALIVE;
 80009a0:	7fbb      	ldrb	r3, [r7, #30]
 80009a2:	1c5a      	adds	r2, r3, #1
 80009a4:	77ba      	strb	r2, [r7, #30]
 80009a6:	3320      	adds	r3, #32
 80009a8:	443b      	add	r3, r7
 80009aa:	22f0      	movs	r2, #240	@ 0xf0
 80009ac:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;//aca debo darle CMD+CKS+PAYLOAD
 80009b0:	2302      	movs	r3, #2
 80009b2:	77fb      	strb	r3, [r7, #31]

    break;
 80009b4:	e03e      	b.n	8000a34 <UP_decodeData+0xd0>
    case FIRMWARE:

		bufAux[indiceAux++]=FIRMWARE;
 80009b6:	7fbb      	ldrb	r3, [r7, #30]
 80009b8:	1c5a      	adds	r2, r3, #1
 80009ba:	77ba      	strb	r2, [r7, #30]
 80009bc:	3320      	adds	r3, #32
 80009be:	443b      	add	r3, r7
 80009c0:	22f1      	movs	r2, #241	@ 0xf1
 80009c2:	f803 2c18 	strb.w	r2, [r3, #-24]
		bytes=0x02;
 80009c6:	2302      	movs	r3, #2
 80009c8:	77fb      	strb	r3, [r7, #31]

    break;
 80009ca:	e033      	b.n	8000a34 <UP_decodeData+0xd0>

    case TEXT:

		bufAux[indiceAux++]=TEXT;
 80009cc:	7fbb      	ldrb	r3, [r7, #30]
 80009ce:	1c5a      	adds	r2, r3, #1
 80009d0:	77ba      	strb	r2, [r7, #30]
 80009d2:	3320      	adds	r3, #32
 80009d4:	443b      	add	r3, r7
 80009d6:	22f2      	movs	r2, #242	@ 0xf2
 80009d8:	f803 2c18 	strb.w	r2, [r3, #-24]
//		bytes=;

    break;
 80009dc:	e02a      	b.n	8000a34 <UP_decodeData+0xd0>

    case ENGINES:
    	bufAux[indiceAux++]=ENGINES;
 80009de:	7fbb      	ldrb	r3, [r7, #30]
 80009e0:	1c5a      	adds	r2, r3, #1
 80009e2:	77ba      	strb	r2, [r7, #30]
 80009e4:	3320      	adds	r3, #32
 80009e6:	443b      	add	r3, r7
 80009e8:	22f3      	movs	r2, #243	@ 0xf3
 80009ea:	f803 2c18 	strb.w	r2, [r3, #-24]

    	casts.u8[0]=datosComLib->bufferRx[datosComLib->indexStart+3];
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	689a      	ldr	r2, [r3, #8]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	785b      	ldrb	r3, [r3, #1]
 80009f6:	3303      	adds	r3, #3
 80009f8:	4413      	add	r3, r2
 80009fa:	781a      	ldrb	r2, [r3, #0]
 80009fc:	4b14      	ldr	r3, [pc, #80]	@ (8000a50 <UP_decodeData+0xec>)
 80009fe:	701a      	strb	r2, [r3, #0]
    	casts.u8[1]=datosComLib->bufferRx[datosComLib->indexStart+4];
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	689a      	ldr	r2, [r3, #8]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	785b      	ldrb	r3, [r3, #1]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	4413      	add	r3, r2
 8000a0c:	781a      	ldrb	r2, [r3, #0]
 8000a0e:	4b10      	ldr	r3, [pc, #64]	@ (8000a50 <UP_decodeData+0xec>)
 8000a10:	705a      	strb	r2, [r3, #1]

    	value = casts.i16[0]; //ver aca que pasa para recuperar el valor de la velocidad
 8000a12:	4b0f      	ldr	r3, [pc, #60]	@ (8000a50 <UP_decodeData+0xec>)
 8000a14:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000a18:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <UP_decodeData+0xf0>)
 8000a1a:	801a      	strh	r2, [r3, #0]

    break;
 8000a1c:	e00a      	b.n	8000a34 <UP_decodeData+0xd0>

    default:

        bufAux[indiceAux++]=0xFF;
 8000a1e:	7fbb      	ldrb	r3, [r7, #30]
 8000a20:	1c5a      	adds	r2, r3, #1
 8000a22:	77ba      	strb	r2, [r7, #30]
 8000a24:	3320      	adds	r3, #32
 8000a26:	443b      	add	r3, r7
 8000a28:	22ff      	movs	r2, #255	@ 0xff
 8000a2a:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	77fb      	strb	r3, [r7, #31]

    break;
 8000a32:	bf00      	nop
    }

    UP_sendInfo(datosComLib->indexStart+2,bufAux,bytes);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	785b      	ldrb	r3, [r3, #1]
 8000a38:	3302      	adds	r3, #2
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	7ffa      	ldrb	r2, [r7, #31]
 8000a3e:	f107 0108 	add.w	r1, r7, #8
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fdd2 	bl	80005ec <UP_sendInfo>
}
 8000a48:	bf00      	nop
 8000a4a:	3720      	adds	r7, #32
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000174 	.word	0x20000174
 8000a54:	20000000 	.word	0x20000000

08000a58 <UP_datafromUSB>:

void UP_datafromUSB(uint8_t *buf, uint16_t length) {
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	460b      	mov	r3, r1
 8000a62:	807b      	strh	r3, [r7, #2]

  uint16_t i;

  for (i = 0; i < length; i++) {
 8000a64:	2300      	movs	r3, #0
 8000a66:	81fb      	strh	r3, [r7, #14]
 8000a68:	e016      	b.n	8000a98 <UP_datafromUSB+0x40>
	datosComLib->bufferRx[datosComLib->indexWriteRx] = buf[i];
 8000a6a:	89fb      	ldrh	r3, [r7, #14]
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	441a      	add	r2, r3
 8000a70:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <UP_datafromUSB+0x58>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	490e      	ldr	r1, [pc, #56]	@ (8000ab0 <UP_datafromUSB+0x58>)
 8000a78:	6809      	ldr	r1, [r1, #0]
 8000a7a:	78c9      	ldrb	r1, [r1, #3]
 8000a7c:	b2c9      	uxtb	r1, r1
 8000a7e:	440b      	add	r3, r1
 8000a80:	7812      	ldrb	r2, [r2, #0]
 8000a82:	701a      	strb	r2, [r3, #0]
	datosComLib->indexWriteRx++;
 8000a84:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab0 <UP_datafromUSB+0x58>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	78da      	ldrb	r2, [r3, #3]
 8000a8a:	b2d2      	uxtb	r2, r2
 8000a8c:	3201      	adds	r2, #1
 8000a8e:	b2d2      	uxtb	r2, r2
 8000a90:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < length; i++) {
 8000a92:	89fb      	ldrh	r3, [r7, #14]
 8000a94:	3301      	adds	r3, #1
 8000a96:	81fb      	strh	r3, [r7, #14]
 8000a98:	89fa      	ldrh	r2, [r7, #14]
 8000a9a:	887b      	ldrh	r3, [r7, #2]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d3e4      	bcc.n	8000a6a <UP_datafromUSB+0x12>
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	bf00      	nop
 8000aa4:	3714      	adds	r7, #20
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	2000017c 	.word	0x2000017c

08000ab4 <en_InitENG>:
 *      Author: Baccon
 */
#include "engines.h"
#include "stdlib.h"

void en_InitENG(_sEng *engines,uint16_t maxSpeed){
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	460b      	mov	r3, r1
 8000abe:	807b      	strh	r3, [r7, #2]

	engines->estado=FREE;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	709a      	strb	r2, [r3, #2]
	engines->speed=0;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	801a      	strh	r2, [r3, #0]
	engines->maxSpeed=maxSpeed;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	887a      	ldrh	r2, [r7, #2]
 8000ad0:	809a      	strh	r2, [r3, #4]

}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
	...

08000ae0 <HAL_ADC_ConvCpltCallback>:
void I2C_1_Abstract_Mem_Read_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b088      	sub	sp, #32
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]

	uint8_t u=0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	77fb      	strb	r3, [r7, #31]
	char palabra[18];

	for(u=0;u<NUM_CHANNELS;u++){
 8000aec:	2300      	movs	r3, #0
 8000aee:	77fb      	strb	r3, [r7, #31]
 8000af0:	e00c      	b.n	8000b0c <HAL_ADC_ConvCpltCallback+0x2c>

//		casts.u16[0]=adcBuffer[u];
		sprintf(&palabra[0],"Channel %d:%i\n",u,adcBuffer[u]);
 8000af2:	7ffa      	ldrb	r2, [r7, #31]
 8000af4:	7ffb      	ldrb	r3, [r7, #31]
 8000af6:	490b      	ldr	r1, [pc, #44]	@ (8000b24 <HAL_ADC_ConvCpltCallback+0x44>)
 8000af8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000afc:	f107 000c 	add.w	r0, r7, #12
 8000b00:	4909      	ldr	r1, [pc, #36]	@ (8000b28 <HAL_ADC_ConvCpltCallback+0x48>)
 8000b02:	f00d f953 	bl	800ddac <siprintf>
	for(u=0;u<NUM_CHANNELS;u++){
 8000b06:	7ffb      	ldrb	r3, [r7, #31]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	77fb      	strb	r3, [r7, #31]
 8000b0c:	7ffb      	ldrb	r3, [r7, #31]
 8000b0e:	2b07      	cmp	r3, #7
 8000b10:	d9ef      	bls.n	8000af2 <HAL_ADC_ConvCpltCallback+0x12>
//		memcpy(datosComSerie.bufferTx,palabra,sizeof(palabra));
//		datosComSerie.indexWriteTx  += sizeof(palabra);
	}
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000b12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b16:	4805      	ldr	r0, [pc, #20]	@ (8000b2c <HAL_ADC_ConvCpltCallback+0x4c>)
 8000b18:	f002 fecb 	bl	80038b2 <HAL_GPIO_TogglePin>
}
 8000b1c:	bf00      	nop
 8000b1e:	3720      	adds	r7, #32
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	200003cc 	.word	0x200003cc
 8000b28:	0800e5a8 	.word	0x0800e5a8
 8000b2c:	40020800 	.word	0x40020800

08000b30 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM11) {
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a0b      	ldr	r2, [pc, #44]	@ (8000b6c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d104      	bne.n	8000b4c <HAL_TIM_PeriodElapsedCallback+0x1c>
		IS10MS = TRUE;
 8000b42:	4a0b      	ldr	r2, [pc, #44]	@ (8000b70 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000b44:	7813      	ldrb	r3, [r2, #0]
 8000b46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b4a:	7013      	strb	r3, [r2, #0]
	}
	if (htim->Instance == TIM10) {
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a08      	ldr	r2, [pc, #32]	@ (8000b74 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d106      	bne.n	8000b64 <HAL_TIM_PeriodElapsedCallback+0x34>
		MPU6050_Read_All(&mpuValues);
 8000b56:	4808      	ldr	r0, [pc, #32]	@ (8000b78 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000b58:	f000 fd30 	bl	80015bc <MPU6050_Read_All>
		mpuValues.DMAREADY=1;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40014800 	.word	0x40014800
 8000b70:	200003dc 	.word	0x200003dc
 8000b74:	40014400 	.word	0x40014400
 8000b78:	200003f0 	.word	0x200003f0

08000b7c <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress==SSD1306_I2C_ADDR){
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b88:	2b78      	cmp	r3, #120	@ 0x78
 8000b8a:	d103      	bne.n	8000b94 <HAL_I2C_MemTxCpltCallback+0x18>
		mpuValues.DMAREADY=1;
 8000b8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ba0 <HAL_I2C_MemTxCpltCallback+0x24>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	200003f0 	.word	0x200003f0

08000ba4 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress==MPU6050_ADDR){
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb0:	2bd0      	cmp	r3, #208	@ 0xd0
 8000bb2:	d15b      	bne.n	8000c6c <HAL_I2C_MemRxCpltCallback+0xc8>

	    mpuValues.MAF.rawData[0] = (int16_t) (mpuValues.Rec_Data[0] << 8 | mpuValues.Rec_Data[1]);
 8000bb4:	4b2f      	ldr	r3, [pc, #188]	@ (8000c74 <HAL_I2C_MemRxCpltCallback+0xd0>)
 8000bb6:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8000bba:	b21b      	sxth	r3, r3
 8000bbc:	021b      	lsls	r3, r3, #8
 8000bbe:	b21a      	sxth	r2, r3
 8000bc0:	4b2c      	ldr	r3, [pc, #176]	@ (8000c74 <HAL_I2C_MemRxCpltCallback+0xd0>)
 8000bc2:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8000bc6:	b21b      	sxth	r3, r3
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	b21a      	sxth	r2, r3
 8000bcc:	4b29      	ldr	r3, [pc, #164]	@ (8000c74 <HAL_I2C_MemRxCpltCallback+0xd0>)
 8000bce:	871a      	strh	r2, [r3, #56]	@ 0x38
	    mpuValues.MAF.rawData[1] = (int16_t) (mpuValues.Rec_Data[2] << 8 | mpuValues.Rec_Data[3]);
 8000bd0:	4b28      	ldr	r3, [pc, #160]	@ (8000c74 <HAL_I2C_MemRxCpltCallback+0xd0>)
 8000bd2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000bd6:	b21b      	sxth	r3, r3
 8000bd8:	021b      	lsls	r3, r3, #8
 8000bda:	b21a      	sxth	r2, r3
 8000bdc:	4b25      	ldr	r3, [pc, #148]	@ (8000c74 <HAL_I2C_MemRxCpltCallback+0xd0>)
 8000bde:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8000be2:	b21b      	sxth	r3, r3
 8000be4:	4313      	orrs	r3, r2
 8000be6:	b21a      	sxth	r2, r3
 8000be8:	4b22      	ldr	r3, [pc, #136]	@ (8000c74 <HAL_I2C_MemRxCpltCallback+0xd0>)
 8000bea:	875a      	strh	r2, [r3, #58]	@ 0x3a
	    mpuValues.MAF.rawData[2] = (int16_t) (mpuValues.Rec_Data[4] << 8 | mpuValues.Rec_Data[5]);
 8000bec:	4b21      	ldr	r3, [pc, #132]	@ (8000c74 <HAL_I2C_MemRxCpltCallback+0xd0>)
 8000bee:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000bf2:	b21b      	sxth	r3, r3
 8000bf4:	021b      	lsls	r3, r3, #8
 8000bf6:	b21a      	sxth	r2, r3
 8000bf8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c74 <HAL_I2C_MemRxCpltCallback+0xd0>)
 8000bfa:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8000bfe:	b21b      	sxth	r3, r3
 8000c00:	4313      	orrs	r3, r2
 8000c02:	b21a      	sxth	r2, r3
 8000c04:	4b1b      	ldr	r3, [pc, #108]	@ (8000c74 <HAL_I2C_MemRxCpltCallback+0xd0>)
 8000c06:	879a      	strh	r2, [r3, #60]	@ 0x3c
	    mpuValues.MAF.rawData[3] = (int16_t) (mpuValues.Rec_Data[8] << 8 | mpuValues.Rec_Data[9]);
 8000c08:	4b1a      	ldr	r3, [pc, #104]	@ (8000c74 <HAL_I2C_MemRxCpltCallback+0xd0>)
 8000c0a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8000c0e:	b21b      	sxth	r3, r3
 8000c10:	021b      	lsls	r3, r3, #8
 8000c12:	b21a      	sxth	r2, r3
 8000c14:	4b17      	ldr	r3, [pc, #92]	@ (8000c74 <HAL_I2C_MemRxCpltCallback+0xd0>)
 8000c16:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8000c1a:	b21b      	sxth	r3, r3
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	b21a      	sxth	r2, r3
 8000c20:	4b14      	ldr	r3, [pc, #80]	@ (8000c74 <HAL_I2C_MemRxCpltCallback+0xd0>)
 8000c22:	87da      	strh	r2, [r3, #62]	@ 0x3e
	    mpuValues.MAF.rawData[4] = (int16_t) (mpuValues.Rec_Data[10]<< 8 | mpuValues.Rec_Data[11]);
 8000c24:	4b13      	ldr	r3, [pc, #76]	@ (8000c74 <HAL_I2C_MemRxCpltCallback+0xd0>)
 8000c26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000c2a:	b21b      	sxth	r3, r3
 8000c2c:	021b      	lsls	r3, r3, #8
 8000c2e:	b21a      	sxth	r2, r3
 8000c30:	4b10      	ldr	r3, [pc, #64]	@ (8000c74 <HAL_I2C_MemRxCpltCallback+0xd0>)
 8000c32:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000c36:	b21b      	sxth	r3, r3
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	b21a      	sxth	r2, r3
 8000c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c74 <HAL_I2C_MemRxCpltCallback+0xd0>)
 8000c3e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	    mpuValues.MAF.rawData[5] = (int16_t) (mpuValues.Rec_Data[12]<< 8 | mpuValues.Rec_Data[13]);
 8000c42:	4b0c      	ldr	r3, [pc, #48]	@ (8000c74 <HAL_I2C_MemRxCpltCallback+0xd0>)
 8000c44:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8000c48:	b21b      	sxth	r3, r3
 8000c4a:	021b      	lsls	r3, r3, #8
 8000c4c:	b21a      	sxth	r2, r3
 8000c4e:	4b09      	ldr	r3, [pc, #36]	@ (8000c74 <HAL_I2C_MemRxCpltCallback+0xd0>)
 8000c50:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8000c54:	b21b      	sxth	r3, r3
 8000c56:	4313      	orrs	r3, r2
 8000c58:	b21a      	sxth	r2, r3
 8000c5a:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <HAL_I2C_MemRxCpltCallback+0xd0>)
 8000c5c:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

		mpuValues.MAF.isOn=1;
 8000c60:	4b04      	ldr	r3, [pc, #16]	@ (8000c74 <HAL_I2C_MemRxCpltCallback+0xd0>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
		SSD1306_DMAREADY();
 8000c68:	f001 f894 	bl	8001d94 <SSD1306_DMAREADY>
	}
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	200003f0 	.word	0x200003f0

08000c78 <task10ms>:

void task10ms(){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0

	static uint8_t ticker=0;
	if(ticker%10==0){
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cec <task10ms+0x74>)
 8000c7e:	781a      	ldrb	r2, [r3, #0]
 8000c80:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf0 <task10ms+0x78>)
 8000c82:	fba3 1302 	umull	r1, r3, r3, r2
 8000c86:	08d9      	lsrs	r1, r3, #3
 8000c88:	460b      	mov	r3, r1
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d109      	bne.n	8000cac <task10ms+0x34>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000c98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c9c:	4815      	ldr	r0, [pc, #84]	@ (8000cf4 <task10ms+0x7c>)
 8000c9e:	f002 fe08 	bl	80038b2 <HAL_GPIO_TogglePin>
		UP_sendInfo(MPUDATA,(uint8_t*)mpuValues.MAF.filtredData, 13);
 8000ca2:	220d      	movs	r2, #13
 8000ca4:	4914      	ldr	r1, [pc, #80]	@ (8000cf8 <task10ms+0x80>)
 8000ca6:	20f4      	movs	r0, #244	@ 0xf4
 8000ca8:	f7ff fca0 	bl	80005ec <UP_sendInfo>
	}
	if(ticker==255){
 8000cac:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <task10ms+0x74>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2bff      	cmp	r3, #255	@ 0xff
 8000cb2:	d112      	bne.n	8000cda <task10ms+0x62>
		if(!SISINIT){
 8000cb4:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <task10ms+0x84>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d103      	bne.n	8000cca <task10ms+0x52>
			SSD1306_Clear();
 8000cc2:	f001 f82b 	bl	8001d1c <SSD1306_Clear>
			SSD1306_RefreshReady();
 8000cc6:	f001 f871 	bl	8001dac <SSD1306_RefreshReady>
		}
		SISINIT=TRUE;
 8000cca:	4a0c      	ldr	r2, [pc, #48]	@ (8000cfc <task10ms+0x84>)
 8000ccc:	7813      	ldrb	r3, [r2, #0]
 8000cce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cd2:	7013      	strb	r3, [r2, #0]
		ticker=0;
 8000cd4:	4b05      	ldr	r3, [pc, #20]	@ (8000cec <task10ms+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
	}
	ticker++;
 8000cda:	4b04      	ldr	r3, [pc, #16]	@ (8000cec <task10ms+0x74>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4b02      	ldr	r3, [pc, #8]	@ (8000cec <task10ms+0x74>)
 8000ce4:	701a      	strb	r2, [r3, #0]
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200004bc 	.word	0x200004bc
 8000cf0:	cccccccd 	.word	0xcccccccd
 8000cf4:	40020800 	.word	0x40020800
 8000cf8:	200004ac 	.word	0x200004ac
 8000cfc:	200003dc 	.word	0x200003dc

08000d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d06:	f001 fb43 	bl	8002390 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d0a:	f000 f8a3 	bl	8000e54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d0e:	f000 fa7b 	bl	8001208 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d12:	f000 fa51 	bl	80011b8 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000d16:	f00c fa15 	bl	800d144 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8000d1a:	f000 f983 	bl	8001024 <MX_TIM3_Init>
  MX_TIM11_Init();
 8000d1e:	f000 fa27 	bl	8001170 <MX_TIM11_Init>
  MX_ADC1_Init();
 8000d22:	f000 f8ff 	bl	8000f24 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000d26:	f000 f94f 	bl	8000fc8 <MX_I2C1_Init>
  MX_TIM10_Init();
 8000d2a:	f000 f9fd 	bl	8001128 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000d2e:	4839      	ldr	r0, [pc, #228]	@ (8000e14 <main+0x114>)
 8000d30:	f007 ff68 	bl	8008c04 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8000d34:	4838      	ldr	r0, [pc, #224]	@ (8000e18 <main+0x118>)
 8000d36:	f007 ff65 	bl	8008c04 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 8000d3a:	4838      	ldr	r0, [pc, #224]	@ (8000e1c <main+0x11c>)
 8000d3c:	f007 ff62 	bl	8008c04 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000d40:	2104      	movs	r1, #4
 8000d42:	4834      	ldr	r0, [pc, #208]	@ (8000e14 <main+0x114>)
 8000d44:	f008 f81a 	bl	8008d7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4832      	ldr	r0, [pc, #200]	@ (8000e14 <main+0x114>)
 8000d4c:	f008 f816 	bl	8008d7c <HAL_TIM_PWM_Start>

  Display_Set_I2C_Master_Transmit(&I2C_DMA_Transmit, &I2C_1_Abstract_Master_Transmit_Blocking);
 8000d50:	4933      	ldr	r1, [pc, #204]	@ (8000e20 <main+0x120>)
 8000d52:	4834      	ldr	r0, [pc, #208]	@ (8000e24 <main+0x124>)
 8000d54:	f001 f808 	bl	8001d68 <Display_Set_I2C_Master_Transmit>
  MPU6050_I2C_Blocking(&I2C_RBlocking,&I2C_1_Abstract_Mem_Write_Blocking);
 8000d58:	4933      	ldr	r1, [pc, #204]	@ (8000e28 <main+0x128>)
 8000d5a:	4834      	ldr	r0, [pc, #208]	@ (8000e2c <main+0x12c>)
 8000d5c:	f000 fdd2 	bl	8001904 <MPU6050_I2C_Blocking>
  MPU6050_NonBlocking_DMA(&I2C_DMA_Transmit,&I2C_DMA_Recive);
 8000d60:	4933      	ldr	r1, [pc, #204]	@ (8000e30 <main+0x130>)
 8000d62:	4830      	ldr	r0, [pc, #192]	@ (8000e24 <main+0x124>)
 8000d64:	f000 fdb8 	bl	80018d8 <MPU6050_NonBlocking_DMA>
  SSD1306_Init();
 8000d68:	f000 fe4a 	bl	8001a00 <SSD1306_Init>
  MPU6050_Init(&mpuValues);
 8000d6c:	4831      	ldr	r0, [pc, #196]	@ (8000e34 <main+0x134>)
 8000d6e:	f000 fbb9 	bl	80014e4 <MPU6050_Init>
  CDC_AttachRxData(&UP_datafromUSB);
 8000d72:	4831      	ldr	r0, [pc, #196]	@ (8000e38 <main+0x138>)
 8000d74:	f00c fb3a 	bl	800d3ec <CDC_AttachRxData>
  myFlags.allFlags=0;
 8000d78:	4b30      	ldr	r3, [pc, #192]	@ (8000e3c <main+0x13c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
  UP_initprotocol(&datosComSerie,(uint8_t)RINGBUFFER);
 8000d7e:	2100      	movs	r1, #0
 8000d80:	482f      	ldr	r0, [pc, #188]	@ (8000e40 <main+0x140>)
 8000d82:	f7ff fc13 	bl	80005ac <UP_initprotocol>
  en_InitENG(&motorL, (uint16_t)htim3.Instance->ARR);
 8000d86:	4b23      	ldr	r3, [pc, #140]	@ (8000e14 <main+0x114>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	4619      	mov	r1, r3
 8000d90:	482c      	ldr	r0, [pc, #176]	@ (8000e44 <main+0x144>)
 8000d92:	f7ff fe8f 	bl	8000ab4 <en_InitENG>
  en_InitENG(&motorR, (uint16_t)htim3.Instance->ARR);
 8000d96:	4b1f      	ldr	r3, [pc, #124]	@ (8000e14 <main+0x114>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4829      	ldr	r0, [pc, #164]	@ (8000e48 <main+0x148>)
 8000da2:	f7ff fe87 	bl	8000ab4 <en_InitENG>

  SSD1306_RefreshReady();
 8000da6:	f001 f801 	bl	8001dac <SSD1306_RefreshReady>
  SSD1306_DrawBitmap(0, 0, LogoMicros, 128, 64, WHITE);
 8000daa:	2301      	movs	r3, #1
 8000dac:	9301      	str	r3, [sp, #4]
 8000dae:	2340      	movs	r3, #64	@ 0x40
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	2380      	movs	r3, #128	@ 0x80
 8000db4:	4a25      	ldr	r2, [pc, #148]	@ (8000e4c <main+0x14c>)
 8000db6:	2100      	movs	r1, #0
 8000db8:	2000      	movs	r0, #0
 8000dba:	f000 fdb9 	bl	8001930 <SSD1306_DrawBitmap>
  MPU6050_Calibrate(&mpuValues);
 8000dbe:	481d      	ldr	r0, [pc, #116]	@ (8000e34 <main+0x134>)
 8000dc0:	f000 fc1a 	bl	80015f8 <MPU6050_Calibrate>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(IS10MS){
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e3c <main+0x13c>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d006      	beq.n	8000de0 <main+0xe0>
		 task10ms();
 8000dd2:	f7ff ff51 	bl	8000c78 <task10ms>
		 IS10MS=FALSE;
 8000dd6:	4a19      	ldr	r2, [pc, #100]	@ (8000e3c <main+0x13c>)
 8000dd8:	7813      	ldrb	r3, [r2, #0]
 8000dda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000dde:	7013      	strb	r3, [r2, #0]
	  }
	MPU6050_MAF(&mpuValues);
 8000de0:	4814      	ldr	r0, [pc, #80]	@ (8000e34 <main+0x134>)
 8000de2:	f000 fca9 	bl	8001738 <MPU6050_MAF>
	UP_comunicationsTask(&datosComSerie);
 8000de6:	4816      	ldr	r0, [pc, #88]	@ (8000e40 <main+0x140>)
 8000de8:	f000 fa9a 	bl	8001320 <UP_comunicationsTask>

	SSD1306_UpdateScreen();
 8000dec:	f000 feba 	bl	8001b64 <SSD1306_UpdateScreen>

	if(SISINIT){
 8000df0:	4b12      	ldr	r3, [pc, #72]	@ (8000e3c <main+0x13c>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d0e2      	beq.n	8000dc4 <main+0xc4>
		SSD1306_DrawBitmap(0, 0, MainScreen, 128, 64,WHITE);
 8000dfe:	2301      	movs	r3, #1
 8000e00:	9301      	str	r3, [sp, #4]
 8000e02:	2340      	movs	r3, #64	@ 0x40
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	2380      	movs	r3, #128	@ 0x80
 8000e08:	4a11      	ldr	r2, [pc, #68]	@ (8000e50 <main+0x150>)
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f000 fd8f 	bl	8001930 <SSD1306_DrawBitmap>
	  if(IS10MS){
 8000e12:	e7d7      	b.n	8000dc4 <main+0xc4>
 8000e14:	200002e0 	.word	0x200002e0
 8000e18:	20000370 	.word	0x20000370
 8000e1c:	20000328 	.word	0x20000328
 8000e20:	080013ed 	.word	0x080013ed
 8000e24:	080013b5 	.word	0x080013b5
 8000e28:	08001421 	.word	0x08001421
 8000e2c:	08001499 	.word	0x08001499
 8000e30:	08001461 	.word	0x08001461
 8000e34:	200003f0 	.word	0x200003f0
 8000e38:	08000a59 	.word	0x08000a59
 8000e3c:	200003dc 	.word	0x200003dc
 8000e40:	200003b8 	.word	0x200003b8
 8000e44:	200003e0 	.word	0x200003e0
 8000e48:	200003e8 	.word	0x200003e8
 8000e4c:	0800e600 	.word	0x0800e600
 8000e50:	0800ea00 	.word	0x0800ea00

08000e54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b094      	sub	sp, #80	@ 0x50
 8000e58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5a:	f107 0320 	add.w	r3, r7, #32
 8000e5e:	2230      	movs	r2, #48	@ 0x30
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f00c ffc4 	bl	800ddf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	4b27      	ldr	r3, [pc, #156]	@ (8000f1c <SystemClock_Config+0xc8>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e80:	4a26      	ldr	r2, [pc, #152]	@ (8000f1c <SystemClock_Config+0xc8>)
 8000e82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e88:	4b24      	ldr	r3, [pc, #144]	@ (8000f1c <SystemClock_Config+0xc8>)
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e94:	2300      	movs	r3, #0
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	4b21      	ldr	r3, [pc, #132]	@ (8000f20 <SystemClock_Config+0xcc>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a20      	ldr	r2, [pc, #128]	@ (8000f20 <SystemClock_Config+0xcc>)
 8000e9e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ea2:	6013      	str	r3, [r2, #0]
 8000ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f20 <SystemClock_Config+0xcc>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000eb8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ebe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ec4:	2319      	movs	r3, #25
 8000ec6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000ec8:	23c0      	movs	r3, #192	@ 0xc0
 8000eca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ed0:	2304      	movs	r3, #4
 8000ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed4:	f107 0320 	add.w	r3, r7, #32
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f007 f9ff 	bl	80082dc <HAL_RCC_OscConfig>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ee4:	f000 faf8 	bl	80014d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee8:	230f      	movs	r3, #15
 8000eea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eec:	2302      	movs	r3, #2
 8000eee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ef4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ef8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000efe:	f107 030c 	add.w	r3, r7, #12
 8000f02:	2103      	movs	r1, #3
 8000f04:	4618      	mov	r0, r3
 8000f06:	f007 fc61 	bl	80087cc <HAL_RCC_ClockConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f10:	f000 fae2 	bl	80014d8 <Error_Handler>
  }
}
 8000f14:	bf00      	nop
 8000f16:	3750      	adds	r7, #80	@ 0x50
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40007000 	.word	0x40007000

08000f24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f36:	4b21      	ldr	r3, [pc, #132]	@ (8000fbc <MX_ADC1_Init+0x98>)
 8000f38:	4a21      	ldr	r2, [pc, #132]	@ (8000fc0 <MX_ADC1_Init+0x9c>)
 8000f3a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fbc <MX_ADC1_Init+0x98>)
 8000f3e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f42:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f44:	4b1d      	ldr	r3, [pc, #116]	@ (8000fbc <MX_ADC1_Init+0x98>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fbc <MX_ADC1_Init+0x98>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f50:	4b1a      	ldr	r3, [pc, #104]	@ (8000fbc <MX_ADC1_Init+0x98>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f56:	4b19      	ldr	r3, [pc, #100]	@ (8000fbc <MX_ADC1_Init+0x98>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f5e:	4b17      	ldr	r3, [pc, #92]	@ (8000fbc <MX_ADC1_Init+0x98>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f64:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <MX_ADC1_Init+0x98>)
 8000f66:	4a17      	ldr	r2, [pc, #92]	@ (8000fc4 <MX_ADC1_Init+0xa0>)
 8000f68:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f6a:	4b14      	ldr	r3, [pc, #80]	@ (8000fbc <MX_ADC1_Init+0x98>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f70:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <MX_ADC1_Init+0x98>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f76:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <MX_ADC1_Init+0x98>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <MX_ADC1_Init+0x98>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f84:	480d      	ldr	r0, [pc, #52]	@ (8000fbc <MX_ADC1_Init+0x98>)
 8000f86:	f001 fa99 	bl	80024bc <HAL_ADC_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f90:	f000 faa2 	bl	80014d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f94:	2301      	movs	r3, #1
 8000f96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa0:	463b      	mov	r3, r7
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4805      	ldr	r0, [pc, #20]	@ (8000fbc <MX_ADC1_Init+0x98>)
 8000fa6:	f001 fbf1 	bl	800278c <HAL_ADC_ConfigChannel>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fb0:	f000 fa92 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fb4:	bf00      	nop
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000184 	.word	0x20000184
 8000fc0:	40012000 	.word	0x40012000
 8000fc4:	0f000001 	.word	0x0f000001

08000fc8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fcc:	4b12      	ldr	r3, [pc, #72]	@ (8001018 <MX_I2C1_Init+0x50>)
 8000fce:	4a13      	ldr	r2, [pc, #76]	@ (800101c <MX_I2C1_Init+0x54>)
 8000fd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000fd2:	4b11      	ldr	r3, [pc, #68]	@ (8001018 <MX_I2C1_Init+0x50>)
 8000fd4:	4a12      	ldr	r2, [pc, #72]	@ (8001020 <MX_I2C1_Init+0x58>)
 8000fd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001018 <MX_I2C1_Init+0x50>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	@ (8001018 <MX_I2C1_Init+0x50>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <MX_I2C1_Init+0x50>)
 8000fe6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fec:	4b0a      	ldr	r3, [pc, #40]	@ (8001018 <MX_I2C1_Init+0x50>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ff2:	4b09      	ldr	r3, [pc, #36]	@ (8001018 <MX_I2C1_Init+0x50>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ff8:	4b07      	ldr	r3, [pc, #28]	@ (8001018 <MX_I2C1_Init+0x50>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ffe:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <MX_I2C1_Init+0x50>)
 8001000:	2200      	movs	r2, #0
 8001002:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001004:	4804      	ldr	r0, [pc, #16]	@ (8001018 <MX_I2C1_Init+0x50>)
 8001006:	f002 fc6f 	bl	80038e8 <HAL_I2C_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001010:	f000 fa62 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}
 8001018:	200001cc 	.word	0x200001cc
 800101c:	40005400 	.word	0x40005400
 8001020:	00061a80 	.word	0x00061a80

08001024 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08e      	sub	sp, #56	@ 0x38
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800102a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001038:	f107 0320 	add.w	r3, r7, #32
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
 8001050:	615a      	str	r2, [r3, #20]
 8001052:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001054:	4b32      	ldr	r3, [pc, #200]	@ (8001120 <MX_TIM3_Init+0xfc>)
 8001056:	4a33      	ldr	r2, [pc, #204]	@ (8001124 <MX_TIM3_Init+0x100>)
 8001058:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 800105a:	4b31      	ldr	r3, [pc, #196]	@ (8001120 <MX_TIM3_Init+0xfc>)
 800105c:	220f      	movs	r2, #15
 800105e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001060:	4b2f      	ldr	r3, [pc, #188]	@ (8001120 <MX_TIM3_Init+0xfc>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8001066:	4b2e      	ldr	r3, [pc, #184]	@ (8001120 <MX_TIM3_Init+0xfc>)
 8001068:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800106c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106e:	4b2c      	ldr	r3, [pc, #176]	@ (8001120 <MX_TIM3_Init+0xfc>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001074:	4b2a      	ldr	r3, [pc, #168]	@ (8001120 <MX_TIM3_Init+0xfc>)
 8001076:	2200      	movs	r2, #0
 8001078:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800107a:	4829      	ldr	r0, [pc, #164]	@ (8001120 <MX_TIM3_Init+0xfc>)
 800107c:	f007 fd72 	bl	8008b64 <HAL_TIM_Base_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001086:	f000 fa27 	bl	80014d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800108a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800108e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001090:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001094:	4619      	mov	r1, r3
 8001096:	4822      	ldr	r0, [pc, #136]	@ (8001120 <MX_TIM3_Init+0xfc>)
 8001098:	f008 f8d2 	bl	8009240 <HAL_TIM_ConfigClockSource>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80010a2:	f000 fa19 	bl	80014d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010a6:	481e      	ldr	r0, [pc, #120]	@ (8001120 <MX_TIM3_Init+0xfc>)
 80010a8:	f007 fe0e 	bl	8008cc8 <HAL_TIM_PWM_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80010b2:	f000 fa11 	bl	80014d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b6:	2300      	movs	r3, #0
 80010b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ba:	2300      	movs	r3, #0
 80010bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010be:	f107 0320 	add.w	r3, r7, #32
 80010c2:	4619      	mov	r1, r3
 80010c4:	4816      	ldr	r0, [pc, #88]	@ (8001120 <MX_TIM3_Init+0xfc>)
 80010c6:	f008 fc7d 	bl	80099c4 <HAL_TIMEx_MasterConfigSynchronization>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80010d0:	f000 fa02 	bl	80014d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010d4:	2360      	movs	r3, #96	@ 0x60
 80010d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010dc:	2300      	movs	r3, #0
 80010de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	2200      	movs	r2, #0
 80010e8:	4619      	mov	r1, r3
 80010ea:	480d      	ldr	r0, [pc, #52]	@ (8001120 <MX_TIM3_Init+0xfc>)
 80010ec:	f007 ffe6 	bl	80090bc <HAL_TIM_PWM_ConfigChannel>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80010f6:	f000 f9ef 	bl	80014d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2204      	movs	r2, #4
 80010fe:	4619      	mov	r1, r3
 8001100:	4807      	ldr	r0, [pc, #28]	@ (8001120 <MX_TIM3_Init+0xfc>)
 8001102:	f007 ffdb 	bl	80090bc <HAL_TIM_PWM_ConfigChannel>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800110c:	f000 f9e4 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001110:	4803      	ldr	r0, [pc, #12]	@ (8001120 <MX_TIM3_Init+0xfc>)
 8001112:	f001 f807 	bl	8002124 <HAL_TIM_MspPostInit>

}
 8001116:	bf00      	nop
 8001118:	3738      	adds	r7, #56	@ 0x38
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200002e0 	.word	0x200002e0
 8001124:	40000400 	.word	0x40000400

08001128 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800112c:	4b0e      	ldr	r3, [pc, #56]	@ (8001168 <MX_TIM10_Init+0x40>)
 800112e:	4a0f      	ldr	r2, [pc, #60]	@ (800116c <MX_TIM10_Init+0x44>)
 8001130:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 47;
 8001132:	4b0d      	ldr	r3, [pc, #52]	@ (8001168 <MX_TIM10_Init+0x40>)
 8001134:	222f      	movs	r2, #47	@ 0x2f
 8001136:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001138:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <MX_TIM10_Init+0x40>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 800113e:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <MX_TIM10_Init+0x40>)
 8001140:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001144:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001146:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <MX_TIM10_Init+0x40>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114c:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <MX_TIM10_Init+0x40>)
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001152:	4805      	ldr	r0, [pc, #20]	@ (8001168 <MX_TIM10_Init+0x40>)
 8001154:	f007 fd06 	bl	8008b64 <HAL_TIM_Base_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800115e:	f000 f9bb 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000328 	.word	0x20000328
 800116c:	40014400 	.word	0x40014400

08001170 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001174:	4b0e      	ldr	r3, [pc, #56]	@ (80011b0 <MX_TIM11_Init+0x40>)
 8001176:	4a0f      	ldr	r2, [pc, #60]	@ (80011b4 <MX_TIM11_Init+0x44>)
 8001178:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 95;
 800117a:	4b0d      	ldr	r3, [pc, #52]	@ (80011b0 <MX_TIM11_Init+0x40>)
 800117c:	225f      	movs	r2, #95	@ 0x5f
 800117e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001180:	4b0b      	ldr	r3, [pc, #44]	@ (80011b0 <MX_TIM11_Init+0x40>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 9999;
 8001186:	4b0a      	ldr	r3, [pc, #40]	@ (80011b0 <MX_TIM11_Init+0x40>)
 8001188:	f242 720f 	movw	r2, #9999	@ 0x270f
 800118c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118e:	4b08      	ldr	r3, [pc, #32]	@ (80011b0 <MX_TIM11_Init+0x40>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001194:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <MX_TIM11_Init+0x40>)
 8001196:	2200      	movs	r2, #0
 8001198:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800119a:	4805      	ldr	r0, [pc, #20]	@ (80011b0 <MX_TIM11_Init+0x40>)
 800119c:	f007 fce2 	bl	8008b64 <HAL_TIM_Base_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80011a6:	f000 f997 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000370 	.word	0x20000370
 80011b4:	40014800 	.word	0x40014800

080011b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	4b10      	ldr	r3, [pc, #64]	@ (8001204 <MX_DMA_Init+0x4c>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001204 <MX_DMA_Init+0x4c>)
 80011c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001204 <MX_DMA_Init+0x4c>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	200b      	movs	r0, #11
 80011e0:	f001 fde7 	bl	8002db2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011e4:	200b      	movs	r0, #11
 80011e6:	f001 fe00 	bl	8002dea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	200c      	movs	r0, #12
 80011f0:	f001 fddf 	bl	8002db2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80011f4:	200c      	movs	r0, #12
 80011f6:	f001 fdf8 	bl	8002dea <HAL_NVIC_EnableIRQ>

}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800

08001208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	@ 0x28
 800120c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	4b3b      	ldr	r3, [pc, #236]	@ (8001310 <MX_GPIO_Init+0x108>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	4a3a      	ldr	r2, [pc, #232]	@ (8001310 <MX_GPIO_Init+0x108>)
 8001228:	f043 0304 	orr.w	r3, r3, #4
 800122c:	6313      	str	r3, [r2, #48]	@ 0x30
 800122e:	4b38      	ldr	r3, [pc, #224]	@ (8001310 <MX_GPIO_Init+0x108>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b34      	ldr	r3, [pc, #208]	@ (8001310 <MX_GPIO_Init+0x108>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	4a33      	ldr	r2, [pc, #204]	@ (8001310 <MX_GPIO_Init+0x108>)
 8001244:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001248:	6313      	str	r3, [r2, #48]	@ 0x30
 800124a:	4b31      	ldr	r3, [pc, #196]	@ (8001310 <MX_GPIO_Init+0x108>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	4b2d      	ldr	r3, [pc, #180]	@ (8001310 <MX_GPIO_Init+0x108>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	4a2c      	ldr	r2, [pc, #176]	@ (8001310 <MX_GPIO_Init+0x108>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6313      	str	r3, [r2, #48]	@ 0x30
 8001266:	4b2a      	ldr	r3, [pc, #168]	@ (8001310 <MX_GPIO_Init+0x108>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	4b26      	ldr	r3, [pc, #152]	@ (8001310 <MX_GPIO_Init+0x108>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	4a25      	ldr	r2, [pc, #148]	@ (8001310 <MX_GPIO_Init+0x108>)
 800127c:	f043 0302 	orr.w	r3, r3, #2
 8001280:	6313      	str	r3, [r2, #48]	@ 0x30
 8001282:	4b23      	ldr	r3, [pc, #140]	@ (8001310 <MX_GPIO_Init+0x108>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001294:	481f      	ldr	r0, [pc, #124]	@ (8001314 <MX_GPIO_Init+0x10c>)
 8001296:	f002 faf3 	bl	8003880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Out2_2_Pin|Out2_1_Pin|Out1_2_Pin, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	f44f 4106 	mov.w	r1, #34304	@ 0x8600
 80012a0:	481d      	ldr	r0, [pc, #116]	@ (8001318 <MX_GPIO_Init+0x110>)
 80012a2:	f002 faed 	bl	8003880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Out1_1_GPIO_Port, Out1_1_Pin, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2108      	movs	r1, #8
 80012aa:	481c      	ldr	r0, [pc, #112]	@ (800131c <MX_GPIO_Init+0x114>)
 80012ac:	f002 fae8 	bl	8003880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80012b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b6:	2301      	movs	r3, #1
 80012b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	4812      	ldr	r0, [pc, #72]	@ (8001314 <MX_GPIO_Init+0x10c>)
 80012ca:	f002 f955 	bl	8003578 <HAL_GPIO_Init>

  /*Configure GPIO pins : Out2_2_Pin Out2_1_Pin Out1_2_Pin */
  GPIO_InitStruct.Pin = Out2_2_Pin|Out2_1_Pin|Out1_2_Pin;
 80012ce:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 80012d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d4:	2301      	movs	r3, #1
 80012d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	4619      	mov	r1, r3
 80012e6:	480c      	ldr	r0, [pc, #48]	@ (8001318 <MX_GPIO_Init+0x110>)
 80012e8:	f002 f946 	bl	8003578 <HAL_GPIO_Init>

  /*Configure GPIO pin : Out1_1_Pin */
  GPIO_InitStruct.Pin = Out1_1_Pin;
 80012ec:	2308      	movs	r3, #8
 80012ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f0:	2301      	movs	r3, #1
 80012f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	2300      	movs	r3, #0
 80012fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Out1_1_GPIO_Port, &GPIO_InitStruct);
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4619      	mov	r1, r3
 8001302:	4806      	ldr	r0, [pc, #24]	@ (800131c <MX_GPIO_Init+0x114>)
 8001304:	f002 f938 	bl	8003578 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001308:	bf00      	nop
 800130a:	3728      	adds	r7, #40	@ 0x28
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40023800 	.word	0x40023800
 8001314:	40020800 	.word	0x40020800
 8001318:	40020000 	.word	0x40020000
 800131c:	40020400 	.word	0x40020400

08001320 <UP_comunicationsTask>:

/* USER CODE BEGIN 4 */
void UP_comunicationsTask(_sDato *datosCom){
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

	if(datosCom->indexReadRx!=datosCom->indexWriteRx ){
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	791a      	ldrb	r2, [r3, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	78db      	ldrb	r3, [r3, #3]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	429a      	cmp	r2, r3
 8001334:	d007      	beq.n	8001346 <UP_comunicationsTask+0x26>
		UP_decodeHeader(datosCom);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff fa1a 	bl	8000770 <UP_decodeHeader>
		datosCom->indexReadRx=datosCom->indexWriteRx;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	78db      	ldrb	r3, [r3, #3]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	711a      	strb	r2, [r3, #4]
	}

	if(datosCom->indexReadTx!=datosCom->indexWriteTx ){
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	799a      	ldrb	r2, [r3, #6]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	795b      	ldrb	r3, [r3, #5]
 800134e:	429a      	cmp	r2, r3
 8001350:	d02b      	beq.n	80013aa <UP_comunicationsTask+0x8a>

		if(datosCom->indexWriteTx > datosCom->indexReadTx){
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	795a      	ldrb	r2, [r3, #5]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	799b      	ldrb	r3, [r3, #6]
 800135a:	429a      	cmp	r2, r3
 800135c:	d908      	bls.n	8001370 <UP_comunicationsTask+0x50>
				datosCom->bytesTosend = datosCom->indexWriteTx - datosCom->indexReadTx;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	795a      	ldrb	r2, [r3, #5]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	799b      	ldrb	r3, [r3, #6]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	b2da      	uxtb	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	741a      	strb	r2, [r3, #16]
 800136e:	e006      	b.n	800137e <UP_comunicationsTask+0x5e>
		    }else{
		    	datosCom->bytesTosend =  sizeof(datosCom->bufferRx) - datosCom->indexReadTx;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	799b      	ldrb	r3, [r3, #6]
 8001374:	f1c3 0304 	rsb	r3, r3, #4
 8001378:	b2da      	uxtb	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	741a      	strb	r2, [r3, #16]
		    }
		    if(CDC_Transmit_FS(&datosCom->bufferTx[datosCom->indexReadTx], datosCom->bytesTosend) == USBD_OK){
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	7992      	ldrb	r2, [r2, #6]
 8001386:	441a      	add	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	7c1b      	ldrb	r3, [r3, #16]
 800138c:	4619      	mov	r1, r3
 800138e:	4610      	mov	r0, r2
 8001390:	f00b fff4 	bl	800d37c <CDC_Transmit_FS>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d107      	bne.n	80013aa <UP_comunicationsTask+0x8a>
		    	datosCom->indexReadTx += datosCom->bytesTosend;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	799a      	ldrb	r2, [r3, #6]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	7c1b      	ldrb	r3, [r3, #16]
 80013a2:	4413      	add	r3, r2
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	719a      	strb	r2, [r3, #6]
		    }
	}
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <I2C_DMA_Transmit>:

uint8_t I2C_DMA_Transmit(uint16_t Dev_Address,uint16_t reg,uint8_t *p_Data, uint16_t _Size){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af02      	add	r7, sp, #8
 80013ba:	60ba      	str	r2, [r7, #8]
 80013bc:	461a      	mov	r2, r3
 80013be:	4603      	mov	r3, r0
 80013c0:	81fb      	strh	r3, [r7, #14]
 80013c2:	460b      	mov	r3, r1
 80013c4:	81bb      	strh	r3, [r7, #12]
 80013c6:	4613      	mov	r3, r2
 80013c8:	80fb      	strh	r3, [r7, #6]

	HAL_I2C_Mem_Write_DMA(&hi2c1, Dev_Address, reg, 1, p_Data, _Size);
 80013ca:	89ba      	ldrh	r2, [r7, #12]
 80013cc:	89f9      	ldrh	r1, [r7, #14]
 80013ce:	88fb      	ldrh	r3, [r7, #6]
 80013d0:	9301      	str	r3, [sp, #4]
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	2301      	movs	r3, #1
 80013d8:	4803      	ldr	r0, [pc, #12]	@ (80013e8 <I2C_DMA_Transmit+0x34>)
 80013da:	f003 f809 	bl	80043f0 <HAL_I2C_Mem_Write_DMA>
	return 1;
 80013de:	2301      	movs	r3, #1
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	200001cc 	.word	0x200001cc

080013ec <I2C_1_Abstract_Master_Transmit_Blocking>:

uint8_t I2C_1_Abstract_Master_Transmit_Blocking(uint16_t Dev_Address, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af02      	add	r7, sp, #8
 80013f2:	60b9      	str	r1, [r7, #8]
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	4603      	mov	r3, r0
 80013f8:	81fb      	strh	r3, [r7, #14]
 80013fa:	4613      	mov	r3, r2
 80013fc:	81bb      	strh	r3, [r7, #12]
	return (uint8_t)HAL_I2C_Master_Transmit(&hi2c1, Dev_Address, p_Data, _Size, _Timeout);
 80013fe:	89ba      	ldrh	r2, [r7, #12]
 8001400:	89f9      	ldrh	r1, [r7, #14]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	4613      	mov	r3, r2
 8001408:	68ba      	ldr	r2, [r7, #8]
 800140a:	4804      	ldr	r0, [pc, #16]	@ (800141c <I2C_1_Abstract_Master_Transmit_Blocking+0x30>)
 800140c:	f002 fbc6 	bl	8003b9c <HAL_I2C_Master_Transmit>
 8001410:	4603      	mov	r3, r0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	200001cc 	.word	0x200001cc

08001420 <I2C_1_Abstract_Mem_Write_Blocking>:

uint8_t I2C_1_Abstract_Mem_Write_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af04      	add	r7, sp, #16
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	4603      	mov	r3, r0
 800142a:	80fb      	strh	r3, [r7, #6]
 800142c:	460b      	mov	r3, r1
 800142e:	717b      	strb	r3, [r7, #5]
 8001430:	4613      	mov	r3, r2
 8001432:	713b      	strb	r3, [r7, #4]
	return (uint8_t)HAL_I2C_Mem_Write(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 8001434:	797b      	ldrb	r3, [r7, #5]
 8001436:	b29a      	uxth	r2, r3
 8001438:	793b      	ldrb	r3, [r7, #4]
 800143a:	b298      	uxth	r0, r3
 800143c:	88f9      	ldrh	r1, [r7, #6]
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	9302      	str	r3, [sp, #8]
 8001442:	8a3b      	ldrh	r3, [r7, #16]
 8001444:	9301      	str	r3, [sp, #4]
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	4603      	mov	r3, r0
 800144c:	4803      	ldr	r0, [pc, #12]	@ (800145c <I2C_1_Abstract_Mem_Write_Blocking+0x3c>)
 800144e:	f002 fca3 	bl	8003d98 <HAL_I2C_Mem_Write>
 8001452:	4603      	mov	r3, r0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	200001cc 	.word	0x200001cc

08001460 <I2C_DMA_Recive>:

uint8_t I2C_DMA_Recive(uint16_t Dev_Address,uint16_t reg,uint8_t *p_Data, uint16_t _Size){
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af02      	add	r7, sp, #8
 8001466:	60ba      	str	r2, [r7, #8]
 8001468:	461a      	mov	r2, r3
 800146a:	4603      	mov	r3, r0
 800146c:	81fb      	strh	r3, [r7, #14]
 800146e:	460b      	mov	r3, r1
 8001470:	81bb      	strh	r3, [r7, #12]
 8001472:	4613      	mov	r3, r2
 8001474:	80fb      	strh	r3, [r7, #6]
	HAL_I2C_Mem_Read_DMA(&hi2c1, Dev_Address, reg, 1, p_Data, _Size);
 8001476:	89ba      	ldrh	r2, [r7, #12]
 8001478:	89f9      	ldrh	r1, [r7, #14]
 800147a:	88fb      	ldrh	r3, [r7, #6]
 800147c:	9301      	str	r3, [sp, #4]
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	2301      	movs	r3, #1
 8001484:	4803      	ldr	r0, [pc, #12]	@ (8001494 <I2C_DMA_Recive+0x34>)
 8001486:	f003 f911 	bl	80046ac <HAL_I2C_Mem_Read_DMA>
	return 1;
 800148a:	2301      	movs	r3, #1
}
 800148c:	4618      	mov	r0, r3
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200001cc 	.word	0x200001cc

08001498 <I2C_RBlocking>:

uint8_t I2C_RBlocking(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size){
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af04      	add	r7, sp, #16
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	4603      	mov	r3, r0
 80014a2:	81fb      	strh	r3, [r7, #14]
 80014a4:	460b      	mov	r3, r1
 80014a6:	81bb      	strh	r3, [r7, #12]
 80014a8:	4613      	mov	r3, r2
 80014aa:	817b      	strh	r3, [r7, #10]

	HAL_I2C_Mem_Read(&hi2c1, DevAddress, MemAddress, MemAddSize, pData, Size,1000);
 80014ac:	8978      	ldrh	r0, [r7, #10]
 80014ae:	89ba      	ldrh	r2, [r7, #12]
 80014b0:	89f9      	ldrh	r1, [r7, #14]
 80014b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014b6:	9302      	str	r3, [sp, #8]
 80014b8:	8b3b      	ldrh	r3, [r7, #24]
 80014ba:	9301      	str	r3, [sp, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	4603      	mov	r3, r0
 80014c2:	4804      	ldr	r0, [pc, #16]	@ (80014d4 <I2C_RBlocking+0x3c>)
 80014c4:	f002 fd62 	bl	8003f8c <HAL_I2C_Mem_Read>
	return 1;
 80014c8:	2301      	movs	r3, #1

}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200001cc 	.word	0x200001cc

080014d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014dc:	b672      	cpsid	i
}
 80014de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <Error_Handler+0x8>

080014e4 <MPU6050_Init>:
static uint8_t (*I2C_Recive)(uint16_t DevAddress,uint16_t reg,uint8_t *pData, uint16_t Size);
static uint8_t (*I2C_Transmit)(uint16_t DevAddress,uint16_t reg,uint8_t *pData, uint16_t Size);
static uint8_t (*I2C_Recive_Blocking)(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size);
static uint8_t (*I2C_Transmit_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);

uint8_t MPU6050_Init(MPU6050_t *MpuData){
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	b087      	sub	sp, #28
 80014e8:	af02      	add	r7, sp, #8
 80014ea:	6078      	str	r0, [r7, #4]

    uint8_t check;
    uint8_t Data;

    MpuData->DMAREADY=1;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    // check device ID WHO_AM_I

    I2C_Recive_Blocking(MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1);
 80014f4:	4b2f      	ldr	r3, [pc, #188]	@ (80015b4 <MPU6050_Init+0xd0>)
 80014f6:	681c      	ldr	r4, [r3, #0]
 80014f8:	f107 030f 	add.w	r3, r7, #15
 80014fc:	2201      	movs	r2, #1
 80014fe:	9200      	str	r2, [sp, #0]
 8001500:	2201      	movs	r2, #1
 8001502:	2175      	movs	r1, #117	@ 0x75
 8001504:	20d0      	movs	r0, #208	@ 0xd0
 8001506:	47a0      	blx	r4
    if (check == 0x68)  // 0x68 will be returned by the sensor if everything goes well
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	2b68      	cmp	r3, #104	@ 0x68
 800150c:	d14c      	bne.n	80015a8 <MPU6050_Init+0xc4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0x00;
 800150e:	2300      	movs	r3, #0
 8001510:	73bb      	strb	r3, [r7, #14]
        I2C_Transmit_Blocking(MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1,1000);
 8001512:	4b29      	ldr	r3, [pc, #164]	@ (80015b8 <MPU6050_Init+0xd4>)
 8001514:	681c      	ldr	r4, [r3, #0]
 8001516:	f107 030e 	add.w	r3, r7, #14
 800151a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800151e:	9201      	str	r2, [sp, #4]
 8001520:	2201      	movs	r2, #1
 8001522:	9200      	str	r2, [sp, #0]
 8001524:	2201      	movs	r2, #1
 8001526:	216b      	movs	r1, #107	@ 0x6b
 8001528:	20d0      	movs	r0, #208	@ 0xd0
 800152a:	47a0      	blx	r4

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800152c:	2307      	movs	r3, #7
 800152e:	73bb      	strb	r3, [r7, #14]
        I2C_Transmit_Blocking(MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1,1000);
 8001530:	4b21      	ldr	r3, [pc, #132]	@ (80015b8 <MPU6050_Init+0xd4>)
 8001532:	681c      	ldr	r4, [r3, #0]
 8001534:	f107 030e 	add.w	r3, r7, #14
 8001538:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800153c:	9201      	str	r2, [sp, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	9200      	str	r2, [sp, #0]
 8001542:	2201      	movs	r2, #1
 8001544:	2119      	movs	r1, #25
 8001546:	20d0      	movs	r0, #208	@ 0xd0
 8001548:	47a0      	blx	r4

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800154a:	2300      	movs	r3, #0
 800154c:	73bb      	strb	r3, [r7, #14]
        I2C_Transmit_Blocking(MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1,1000);
 800154e:	4b1a      	ldr	r3, [pc, #104]	@ (80015b8 <MPU6050_Init+0xd4>)
 8001550:	681c      	ldr	r4, [r3, #0]
 8001552:	f107 030e 	add.w	r3, r7, #14
 8001556:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800155a:	9201      	str	r2, [sp, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	9200      	str	r2, [sp, #0]
 8001560:	2201      	movs	r2, #1
 8001562:	211c      	movs	r1, #28
 8001564:	20d0      	movs	r0, #208	@ 0xd0
 8001566:	47a0      	blx	r4

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001568:	2300      	movs	r3, #0
 800156a:	73bb      	strb	r3, [r7, #14]
        I2C_Transmit_Blocking(MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1,1000);
 800156c:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <MPU6050_Init+0xd4>)
 800156e:	681c      	ldr	r4, [r3, #0]
 8001570:	f107 030e 	add.w	r3, r7, #14
 8001574:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001578:	9201      	str	r2, [sp, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	9200      	str	r2, [sp, #0]
 800157e:	2201      	movs	r2, #1
 8001580:	211b      	movs	r1, #27
 8001582:	20d0      	movs	r0, #208	@ 0xd0
 8001584:	47a0      	blx	r4

        Data = 0x03;
 8001586:	2303      	movs	r3, #3
 8001588:	73bb      	strb	r3, [r7, #14]
        I2C_Transmit_Blocking(MPU6050_ADDR, LOWPASS_CONFIG, 1, &Data, 1,1000);
 800158a:	4b0b      	ldr	r3, [pc, #44]	@ (80015b8 <MPU6050_Init+0xd4>)
 800158c:	681c      	ldr	r4, [r3, #0]
 800158e:	f107 030e 	add.w	r3, r7, #14
 8001592:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001596:	9201      	str	r2, [sp, #4]
 8001598:	2201      	movs	r2, #1
 800159a:	9200      	str	r2, [sp, #0]
 800159c:	2201      	movs	r2, #1
 800159e:	211a      	movs	r1, #26
 80015a0:	20d0      	movs	r0, #208	@ 0xd0
 80015a2:	47a0      	blx	r4

        return 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	e000      	b.n	80015aa <MPU6050_Init+0xc6>
    }
    return 1;
 80015a8:	2301      	movs	r3, #1
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd90      	pop	{r4, r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200004c8 	.word	0x200004c8
 80015b8:	200004cc 	.word	0x200004cc

080015bc <MPU6050_Read_All>:


void MPU6050_Read_All(MPU6050_t *MpuData) {
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    if(!MpuData->DMAREADY)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00d      	beq.n	80015ea <MPU6050_Read_All+0x2e>
    	return;

    I2C_Recive(MPU6050_ADDR, ACCEL_XOUT_H_REG,MpuData->Rec_Data, 14);
 80015ce:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <MPU6050_Read_All+0x38>)
 80015d0:	681c      	ldr	r4, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80015d8:	230e      	movs	r3, #14
 80015da:	213b      	movs	r1, #59	@ 0x3b
 80015dc:	20d0      	movs	r0, #208	@ 0xd0
 80015de:	47a0      	blx	r4
    MpuData->DMAREADY=0;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80015e8:	e000      	b.n	80015ec <MPU6050_Read_All+0x30>
    	return;
 80015ea:	bf00      	nop

}
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd90      	pop	{r4, r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200004c0 	.word	0x200004c0

080015f8 <MPU6050_Calibrate>:

void MPU6050_Calibrate(MPU6050_t *mpu){
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b08d      	sub	sp, #52	@ 0x34
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	6078      	str	r0, [r7, #4]
	int32_t temp_raw[6] = {0};
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
 8001610:	615a      	str	r2, [r3, #20]

	for (uint16_t i=0; i < NUM_SAMPLES; i++){
 8001612:	2300      	movs	r3, #0
 8001614:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001616:	e066      	b.n	80016e6 <MPU6050_Calibrate+0xee>
		I2C_Recive_Blocking(MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, mpu->Rec_Data, 14);
 8001618:	4b46      	ldr	r3, [pc, #280]	@ (8001734 <MPU6050_Calibrate+0x13c>)
 800161a:	681c      	ldr	r4, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3326      	adds	r3, #38	@ 0x26
 8001620:	220e      	movs	r2, #14
 8001622:	9200      	str	r2, [sp, #0]
 8001624:	2201      	movs	r2, #1
 8001626:	213b      	movs	r1, #59	@ 0x3b
 8001628:	20d0      	movs	r0, #208	@ 0xd0
 800162a:	47a0      	blx	r4
		temp_raw[0] += (int16_t)((mpu->Rec_Data[0] << 8) | mpu->Rec_Data[1]);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	f892 2026 	ldrb.w	r2, [r2, #38]	@ 0x26
 8001634:	b212      	sxth	r2, r2
 8001636:	0212      	lsls	r2, r2, #8
 8001638:	b211      	sxth	r1, r2
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 8001640:	b212      	sxth	r2, r2
 8001642:	430a      	orrs	r2, r1
 8001644:	b212      	sxth	r2, r2
 8001646:	4413      	add	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]
		temp_raw[1] += (int16_t)((mpu->Rec_Data[2] << 8) | mpu->Rec_Data[3]);
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 8001652:	b212      	sxth	r2, r2
 8001654:	0212      	lsls	r2, r2, #8
 8001656:	b211      	sxth	r1, r2
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
 800165e:	b212      	sxth	r2, r2
 8001660:	430a      	orrs	r2, r1
 8001662:	b212      	sxth	r2, r2
 8001664:	4413      	add	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
		temp_raw[2] += (int16_t)((mpu->Rec_Data[4] << 8) | mpu->Rec_Data[5]);
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 8001670:	b212      	sxth	r2, r2
 8001672:	0212      	lsls	r2, r2, #8
 8001674:	b211      	sxth	r1, r2
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 800167c:	b212      	sxth	r2, r2
 800167e:	430a      	orrs	r2, r1
 8001680:	b212      	sxth	r2, r2
 8001682:	4413      	add	r3, r2
 8001684:	617b      	str	r3, [r7, #20]

		temp_raw[3] += (int16_t)((mpu->Rec_Data[8 ] << 8) | mpu->Rec_Data[9 ]);
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 800168e:	b212      	sxth	r2, r2
 8001690:	0212      	lsls	r2, r2, #8
 8001692:	b211      	sxth	r1, r2
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 800169a:	b212      	sxth	r2, r2
 800169c:	430a      	orrs	r2, r1
 800169e:	b212      	sxth	r2, r2
 80016a0:	4413      	add	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
		temp_raw[4] += (int16_t)((mpu->Rec_Data[10] << 8) | mpu->Rec_Data[11]);
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 80016ac:	b212      	sxth	r2, r2
 80016ae:	0212      	lsls	r2, r2, #8
 80016b0:	b211      	sxth	r1, r2
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	f892 2031 	ldrb.w	r2, [r2, #49]	@ 0x31
 80016b8:	b212      	sxth	r2, r2
 80016ba:	430a      	orrs	r2, r1
 80016bc:	b212      	sxth	r2, r2
 80016be:	4413      	add	r3, r2
 80016c0:	61fb      	str	r3, [r7, #28]
		temp_raw[5] += (int16_t)((mpu->Rec_Data[12] << 8) | mpu->Rec_Data[13]);
 80016c2:	6a3b      	ldr	r3, [r7, #32]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80016ca:	b212      	sxth	r2, r2
 80016cc:	0212      	lsls	r2, r2, #8
 80016ce:	b211      	sxth	r1, r2
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	f892 2033 	ldrb.w	r2, [r2, #51]	@ 0x33
 80016d6:	b212      	sxth	r2, r2
 80016d8:	430a      	orrs	r2, r1
 80016da:	b212      	sxth	r2, r2
 80016dc:	4413      	add	r3, r2
 80016de:	623b      	str	r3, [r7, #32]
	for (uint16_t i=0; i < NUM_SAMPLES; i++){
 80016e0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80016e2:	3301      	adds	r3, #1
 80016e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80016e6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80016e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016ec:	d394      	bcc.n	8001618 <MPU6050_Calibrate+0x20>
	}
    mpu->Accel.X_Offset = (int16_t)(temp_raw[0] >> NUM_SAMPLES_BITS);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	131b      	asrs	r3, r3, #12
 80016f2:	b21a      	sxth	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	83da      	strh	r2, [r3, #30]
    mpu->Accel.Y_Offset = (int16_t)(temp_raw[1] >> NUM_SAMPLES_BITS);
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	131b      	asrs	r3, r3, #12
 80016fc:	b21a      	sxth	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	841a      	strh	r2, [r3, #32]
    mpu->Accel.Z_Offset = (int16_t)(temp_raw[2] >> NUM_SAMPLES_BITS)/* - SCALE_FACTOR*/;
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	131b      	asrs	r3, r3, #12
 8001706:	b21a      	sxth	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	845a      	strh	r2, [r3, #34]	@ 0x22

    mpu->Gyro.X_Offset = (int16_t)(temp_raw[3] >> NUM_SAMPLES_BITS);
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	131b      	asrs	r3, r3, #12
 8001710:	b21a      	sxth	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	819a      	strh	r2, [r3, #12]
	mpu->Gyro.Y_Offset = (int16_t)(temp_raw[4] >> NUM_SAMPLES_BITS);
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	131b      	asrs	r3, r3, #12
 800171a:	b21a      	sxth	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	81da      	strh	r2, [r3, #14]
	mpu->Gyro.Z_Offset = (int16_t)(temp_raw[5] >> NUM_SAMPLES_BITS);
 8001720:	6a3b      	ldr	r3, [r7, #32]
 8001722:	131b      	asrs	r3, r3, #12
 8001724:	b21a      	sxth	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	821a      	strh	r2, [r3, #16]

	//mpu->Angle.pitch = atan2f(mpu->Acc.offset.y, sqrtf(mpu->Acc.offset.x * mpu->Acc.offset.x + mpu->Acc.offset.z * mpu->Acc.offset.z)) * 180.0f / M_PI;
	//mpu->Angle.roll  = atan2f(-mpu->Acc.offset.x, mpu->Acc.offset.z) * 180.0f / M_PI;
}
 800172a:	bf00      	nop
 800172c:	372c      	adds	r7, #44	@ 0x2c
 800172e:	46bd      	mov	sp, r7
 8001730:	bd90      	pop	{r4, r7, pc}
 8001732:	bf00      	nop
 8001734:	200004c8 	.word	0x200004c8

08001738 <MPU6050_MAF>:

void MPU6050_MAF(MPU6050_t *mpu){ //Moving Average Filter
 8001738:	b490      	push	{r4, r7}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	if(mpu->MAF.isOn){
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 80c1 	beq.w	80018ce <MPU6050_MAF+0x196>
		mpu->MAF.isOn = 0;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
		for(uint8_t channel = 0; channel < NUM_AXIS; channel++){
 8001754:	2300      	movs	r3, #0
 8001756:	73fb      	strb	r3, [r7, #15]
 8001758:	e057      	b.n	800180a <MPU6050_MAF+0xd2>
			mpu->MAF.sumData[channel] -= mpu->MAF.mediaBuffer[mpu->MAF.index][channel];
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	3310      	adds	r3, #16
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 800176c:	461c      	mov	r4, r3
 800176e:	7bf8      	ldrb	r0, [r7, #15]
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	4623      	mov	r3, r4
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	4423      	add	r3, r4
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4403      	add	r3, r0
 800177c:	332c      	adds	r3, #44	@ 0x2c
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	440b      	add	r3, r1
 8001782:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001786:	4619      	mov	r1, r3
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	1a52      	subs	r2, r2, r1
 800178c:	6879      	ldr	r1, [r7, #4]
 800178e:	3310      	adds	r3, #16
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	440b      	add	r3, r1
 8001794:	605a      	str	r2, [r3, #4]
			mpu->MAF.sumData[channel] += mpu->MAF.rawData[channel];
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	3310      	adds	r3, #16
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	7bf9      	ldrb	r1, [r7, #15]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	311c      	adds	r1, #28
 80017a8:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 80017ac:	4619      	mov	r1, r3
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	440a      	add	r2, r1
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	3310      	adds	r3, #16
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	605a      	str	r2, [r3, #4]
			mpu->MAF.mediaBuffer[mpu->MAF.index][channel] = mpu->MAF.rawData[channel];
 80017bc:	7bfa      	ldrb	r2, [r7, #15]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 80017c4:	4618      	mov	r0, r3
 80017c6:	7bf9      	ldrb	r1, [r7, #15]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	321c      	adds	r2, #28
 80017cc:	f933 4012 	ldrsh.w	r4, [r3, r2, lsl #1]
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	4603      	mov	r3, r0
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	4403      	add	r3, r0
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	440b      	add	r3, r1
 80017dc:	332c      	adds	r3, #44	@ 0x2c
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	4413      	add	r3, r2
 80017e2:	4622      	mov	r2, r4
 80017e4:	809a      	strh	r2, [r3, #4]
			mpu->MAF.filtredData[channel] = (mpu->MAF.sumData[channel] >> NUM_MAF_BITS);
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	3310      	adds	r3, #16
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	10da      	asrs	r2, r3, #3
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	b211      	sxth	r1, r2
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	335c      	adds	r3, #92	@ 0x5c
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4413      	add	r3, r2
 8001800:	460a      	mov	r2, r1
 8001802:	809a      	strh	r2, [r3, #4]
		for(uint8_t channel = 0; channel < NUM_AXIS; channel++){
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	3301      	adds	r3, #1
 8001808:	73fb      	strb	r3, [r7, #15]
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	2b05      	cmp	r3, #5
 800180e:	d9a4      	bls.n	800175a <MPU6050_MAF+0x22>
		}
		mpu->MAF.index++;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 8001816:	3301      	adds	r3, #1
 8001818:	b2da      	uxtb	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
		mpu->MAF.index &= (NUM_MAF - 1);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	b2da      	uxtb	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8

		// ACC: CALCULATE TRUE ACCELERATION

		mpu->Accel.X_filtered = mpu->MAF.filtredData[0] - mpu->Accel.X_Offset ;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	@ 0xbc
 8001838:	b29a      	uxth	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001840:	b29b      	uxth	r3, r3
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	b29b      	uxth	r3, r3
 8001846:	b21a      	sxth	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	831a      	strh	r2, [r3, #24]
		mpu->Accel.Y_filtered = mpu->MAF.filtredData[1] - mpu->Accel.Y_Offset;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	@ 0xbe
 8001852:	b29a      	uxth	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800185a:	b29b      	uxth	r3, r3
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	b29b      	uxth	r3, r3
 8001860:	b21a      	sxth	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	835a      	strh	r2, [r3, #26]
		mpu->Accel.Z_filtered = mpu->MAF.filtredData[2] - mpu->Accel.Z_Offset;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	@ 0xc0
 800186c:	b29a      	uxth	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001874:	b29b      	uxth	r3, r3
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	b29b      	uxth	r3, r3
 800187a:	b21a      	sxth	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	839a      	strh	r2, [r3, #28]
		// GYR: CALCULATE TRUE ACCELERATION
		mpu->Gyro.X_filtered = mpu->MAF.filtredData[3] - mpu->Gyro.X_Offset;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	@ 0xc2
 8001886:	b29a      	uxth	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800188e:	b29b      	uxth	r3, r3
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	b29b      	uxth	r3, r3
 8001894:	b21a      	sxth	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	80da      	strh	r2, [r3, #6]
		mpu->Gyro.Y_filtered = mpu->MAF.filtredData[4] - mpu->Gyro.Y_Offset;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	@ 0xc4
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	b21a      	sxth	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	811a      	strh	r2, [r3, #8]
		mpu->Gyro.Z_filtered = mpu->MAF.filtredData[5] - mpu->Gyro.Z_Offset;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	@ 0xc6
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	b21a      	sxth	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	815a      	strh	r2, [r3, #10]
	}
}
 80018ce:	bf00      	nop
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc90      	pop	{r4, r7}
 80018d6:	4770      	bx	lr

080018d8 <MPU6050_NonBlocking_DMA>:

void MPU6050_NonBlocking_DMA(uint8_t (*Master_Transmit)(uint16_t DevAddress,uint16_t reg,uint8_t *pData, uint16_t Size),uint8_t (*Master_Recive)(uint16_t DevAddress,uint16_t reg,uint8_t *pData, uint16_t Size)){
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
	I2C_Transmit = Master_Transmit;
 80018e2:	4a06      	ldr	r2, [pc, #24]	@ (80018fc <MPU6050_NonBlocking_DMA+0x24>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6013      	str	r3, [r2, #0]
	I2C_Recive = Master_Recive;
 80018e8:	4a05      	ldr	r2, [pc, #20]	@ (8001900 <MPU6050_NonBlocking_DMA+0x28>)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	6013      	str	r3, [r2, #0]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	200004c4 	.word	0x200004c4
 8001900:	200004c0 	.word	0x200004c0

08001904 <MPU6050_I2C_Blocking>:
void MPU6050_I2C_Blocking(uint8_t (*Recive_Blocking)(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size),uint8_t (*Transmit_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout)){
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
	I2C_Recive_Blocking = Recive_Blocking;
 800190e:	4a06      	ldr	r2, [pc, #24]	@ (8001928 <MPU6050_I2C_Blocking+0x24>)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6013      	str	r3, [r2, #0]
	I2C_Transmit_Blocking = Transmit_Blocking;
 8001914:	4a05      	ldr	r2, [pc, #20]	@ (800192c <MPU6050_I2C_Blocking+0x28>)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	6013      	str	r3, [r2, #0]
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	200004c8 	.word	0x200004c8
 800192c:	200004cc 	.word	0x200004cc

08001930 <SSD1306_DrawBitmap>:
	if(i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
	else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
}

void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60ba      	str	r2, [r7, #8]
 8001938:	461a      	mov	r2, r3
 800193a:	4603      	mov	r3, r0
 800193c:	81fb      	strh	r3, [r7, #14]
 800193e:	460b      	mov	r3, r1
 8001940:	81bb      	strh	r3, [r7, #12]
 8001942:	4613      	mov	r3, r2
 8001944:	80fb      	strh	r3, [r7, #6]
	int16_t byteWidth = (w + 7) / 8;
 8001946:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800194a:	3307      	adds	r3, #7
 800194c:	2b00      	cmp	r3, #0
 800194e:	da00      	bge.n	8001952 <SSD1306_DrawBitmap+0x22>
 8001950:	3307      	adds	r3, #7
 8001952:	10db      	asrs	r3, r3, #3
 8001954:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	75fb      	strb	r3, [r7, #23]
    for(int16_t j=0; j<h; j++, y++)
 800195a:	2300      	movs	r3, #0
 800195c:	82bb      	strh	r3, [r7, #20]
 800195e:	e044      	b.n	80019ea <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8001960:	2300      	movs	r3, #0
 8001962:	827b      	strh	r3, [r7, #18]
 8001964:	e02f      	b.n	80019c6 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8001966:	8a7b      	ldrh	r3, [r7, #18]
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8001970:	7dfb      	ldrb	r3, [r7, #23]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	75fb      	strb	r3, [r7, #23]
 8001976:	e012      	b.n	800199e <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001978:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800197c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001980:	fb03 f202 	mul.w	r2, r3, r2
 8001984:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001988:	2b00      	cmp	r3, #0
 800198a:	da00      	bge.n	800198e <SSD1306_DrawBitmap+0x5e>
 800198c:	3307      	adds	r3, #7
 800198e:	10db      	asrs	r3, r3, #3
 8001990:	b21b      	sxth	r3, r3
 8001992:	4413      	add	r3, r2
 8001994:	461a      	mov	r2, r3
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	4413      	add	r3, r2
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 800199e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	da09      	bge.n	80019ba <SSD1306_DrawBitmap+0x8a>
 80019a6:	89fa      	ldrh	r2, [r7, #14]
 80019a8:	8a7b      	ldrh	r3, [r7, #18]
 80019aa:	4413      	add	r3, r2
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	89b9      	ldrh	r1, [r7, #12]
 80019b0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f000 f951 	bl	8001c5c <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 80019ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	3301      	adds	r3, #1
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	827b      	strh	r3, [r7, #18]
 80019c6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80019ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	dbc9      	blt.n	8001966 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 80019d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	3301      	adds	r3, #1
 80019da:	b29b      	uxth	r3, r3
 80019dc:	82bb      	strh	r3, [r7, #20]
 80019de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	3301      	adds	r3, #1
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	81bb      	strh	r3, [r7, #12]
 80019ea:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80019ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	dbb4      	blt.n	8001960 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 80019f6:	bf00      	nop
 80019f8:	bf00      	nop
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <SSD1306_Init>:

void SSD1306_Init()
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0

	SSD1306_WRITECOMMAND(0xAE);
 8001a04:	22ae      	movs	r2, #174	@ 0xae
 8001a06:	2100      	movs	r1, #0
 8001a08:	2078      	movs	r0, #120	@ 0x78
 8001a0a:	f000 f991 	bl	8001d30 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 8001a0e:	2220      	movs	r2, #32
 8001a10:	2100      	movs	r1, #0
 8001a12:	2078      	movs	r0, #120	@ 0x78
 8001a14:	f000 f98c 	bl	8001d30 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 8001a18:	2210      	movs	r2, #16
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	2078      	movs	r0, #120	@ 0x78
 8001a1e:	f000 f987 	bl	8001d30 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0);
 8001a22:	22b0      	movs	r2, #176	@ 0xb0
 8001a24:	2100      	movs	r1, #0
 8001a26:	2078      	movs	r0, #120	@ 0x78
 8001a28:	f000 f982 	bl	8001d30 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8);
 8001a2c:	22c8      	movs	r2, #200	@ 0xc8
 8001a2e:	2100      	movs	r1, #0
 8001a30:	2078      	movs	r0, #120	@ 0x78
 8001a32:	f000 f97d 	bl	8001d30 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2100      	movs	r1, #0
 8001a3a:	2078      	movs	r0, #120	@ 0x78
 8001a3c:	f000 f978 	bl	8001d30 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 8001a40:	2210      	movs	r2, #16
 8001a42:	2100      	movs	r1, #0
 8001a44:	2078      	movs	r0, #120	@ 0x78
 8001a46:	f000 f973 	bl	8001d30 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40);
 8001a4a:	2240      	movs	r2, #64	@ 0x40
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2078      	movs	r0, #120	@ 0x78
 8001a50:	f000 f96e 	bl	8001d30 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81);
 8001a54:	2281      	movs	r2, #129	@ 0x81
 8001a56:	2100      	movs	r1, #0
 8001a58:	2078      	movs	r0, #120	@ 0x78
 8001a5a:	f000 f969 	bl	8001d30 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001a5e:	22ff      	movs	r2, #255	@ 0xff
 8001a60:	2100      	movs	r1, #0
 8001a62:	2078      	movs	r0, #120	@ 0x78
 8001a64:	f000 f964 	bl	8001d30 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1);
 8001a68:	22a1      	movs	r2, #161	@ 0xa1
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	2078      	movs	r0, #120	@ 0x78
 8001a6e:	f000 f95f 	bl	8001d30 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6);
 8001a72:	22a6      	movs	r2, #166	@ 0xa6
 8001a74:	2100      	movs	r1, #0
 8001a76:	2078      	movs	r0, #120	@ 0x78
 8001a78:	f000 f95a 	bl	8001d30 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8);
 8001a7c:	22a8      	movs	r2, #168	@ 0xa8
 8001a7e:	2100      	movs	r1, #0
 8001a80:	2078      	movs	r0, #120	@ 0x78
 8001a82:	f000 f955 	bl	8001d30 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F);
 8001a86:	223f      	movs	r2, #63	@ 0x3f
 8001a88:	2100      	movs	r1, #0
 8001a8a:	2078      	movs	r0, #120	@ 0x78
 8001a8c:	f000 f950 	bl	8001d30 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4);
 8001a90:	22a4      	movs	r2, #164	@ 0xa4
 8001a92:	2100      	movs	r1, #0
 8001a94:	2078      	movs	r0, #120	@ 0x78
 8001a96:	f000 f94b 	bl	8001d30 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3);
 8001a9a:	22d3      	movs	r2, #211	@ 0xd3
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2078      	movs	r0, #120	@ 0x78
 8001aa0:	f000 f946 	bl	8001d30 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	2078      	movs	r0, #120	@ 0x78
 8001aaa:	f000 f941 	bl	8001d30 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5);
 8001aae:	22d5      	movs	r2, #213	@ 0xd5
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	2078      	movs	r0, #120	@ 0x78
 8001ab4:	f000 f93c 	bl	8001d30 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0);
 8001ab8:	22f0      	movs	r2, #240	@ 0xf0
 8001aba:	2100      	movs	r1, #0
 8001abc:	2078      	movs	r0, #120	@ 0x78
 8001abe:	f000 f937 	bl	8001d30 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9);
 8001ac2:	22d9      	movs	r2, #217	@ 0xd9
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2078      	movs	r0, #120	@ 0x78
 8001ac8:	f000 f932 	bl	8001d30 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22);
 8001acc:	2222      	movs	r2, #34	@ 0x22
 8001ace:	2100      	movs	r1, #0
 8001ad0:	2078      	movs	r0, #120	@ 0x78
 8001ad2:	f000 f92d 	bl	8001d30 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA);
 8001ad6:	22da      	movs	r2, #218	@ 0xda
 8001ad8:	2100      	movs	r1, #0
 8001ada:	2078      	movs	r0, #120	@ 0x78
 8001adc:	f000 f928 	bl	8001d30 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001ae0:	2212      	movs	r2, #18
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	2078      	movs	r0, #120	@ 0x78
 8001ae6:	f000 f923 	bl	8001d30 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB);
 8001aea:	22db      	movs	r2, #219	@ 0xdb
 8001aec:	2100      	movs	r1, #0
 8001aee:	2078      	movs	r0, #120	@ 0x78
 8001af0:	f000 f91e 	bl	8001d30 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 8001af4:	2220      	movs	r2, #32
 8001af6:	2100      	movs	r1, #0
 8001af8:	2078      	movs	r0, #120	@ 0x78
 8001afa:	f000 f919 	bl	8001d30 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D);
 8001afe:	228d      	movs	r2, #141	@ 0x8d
 8001b00:	2100      	movs	r1, #0
 8001b02:	2078      	movs	r0, #120	@ 0x78
 8001b04:	f000 f914 	bl	8001d30 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14);
 8001b08:	2214      	movs	r2, #20
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	2078      	movs	r0, #120	@ 0x78
 8001b0e:	f000 f90f 	bl	8001d30 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF);
 8001b12:	22af      	movs	r2, #175	@ 0xaf
 8001b14:	2100      	movs	r1, #0
 8001b16:	2078      	movs	r0, #120	@ 0x78
 8001b18:	f000 f90a 	bl	8001d30 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001b1c:	222e      	movs	r2, #46	@ 0x2e
 8001b1e:	2100      	movs	r1, #0
 8001b20:	2078      	movs	r0, #120	@ 0x78
 8001b22:	f000 f905 	bl	8001d30 <SSD1306_I2C_Write>

	SSD1306.CurrentX = 0;
 8001b26:	4b0e      	ldr	r3, [pc, #56]	@ (8001b60 <SSD1306_Init+0x160>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b60 <SSD1306_Init+0x160>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8001b32:	4b0b      	ldr	r3, [pc, #44]	@ (8001b60 <SSD1306_Init+0x160>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	715a      	strb	r2, [r3, #5]
	SSD1306.Page=0;
 8001b38:	4b09      	ldr	r3, [pc, #36]	@ (8001b60 <SSD1306_Init+0x160>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	719a      	strb	r2, [r3, #6]
	SSD1306.DMA = CMD;
 8001b3e:	4b08      	ldr	r3, [pc, #32]	@ (8001b60 <SSD1306_Init+0x160>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	71da      	strb	r2, [r3, #7]
	SSD1306.Needtorefresh=1;
 8001b44:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <SSD1306_Init+0x160>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	741a      	strb	r2, [r3, #16]
	SSD1306.DMAREADY=1;
 8001b4a:	4b05      	ldr	r3, [pc, #20]	@ (8001b60 <SSD1306_Init+0x160>)
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	745a      	strb	r2, [r3, #17]
	SSD1306_Fill(BLACK);
 8001b50:	2000      	movs	r0, #0
 8001b52:	f000 f86b 	bl	8001c2c <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8001b56:	f000 f805 	bl	8001b64 <SSD1306_UpdateScreen>

}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	200008d8 	.word	0x200008d8

08001b64 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void)
{
 8001b64:	b598      	push	{r3, r4, r7, lr}
 8001b66:	af00      	add	r7, sp, #0
	if(SSD1306.DMAREADY && SSD1306.Needtorefresh){
 8001b68:	4b2c      	ldr	r3, [pc, #176]	@ (8001c1c <SSD1306_UpdateScreen+0xb8>)
 8001b6a:	7c5b      	ldrb	r3, [r3, #17]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d052      	beq.n	8001c16 <SSD1306_UpdateScreen+0xb2>
 8001b70:	4b2a      	ldr	r3, [pc, #168]	@ (8001c1c <SSD1306_UpdateScreen+0xb8>)
 8001b72:	7c1b      	ldrb	r3, [r3, #16]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d04e      	beq.n	8001c16 <SSD1306_UpdateScreen+0xb2>
		switch(SSD1306.DMA){
 8001b78:	4b28      	ldr	r3, [pc, #160]	@ (8001c1c <SSD1306_UpdateScreen+0xb8>)
 8001b7a:	79db      	ldrb	r3, [r3, #7]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d01c      	beq.n	8001bba <SSD1306_UpdateScreen+0x56>
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d137      	bne.n	8001bf4 <SSD1306_UpdateScreen+0x90>
			case Data:
				if(I2C_DMA_Master_Transmit(SSD1306_I2C_ADDR,0x40, &SSD1306_Buffer[SSD1306_WIDTH*SSD1306.Page], SSD1306_WIDTH)==1){
 8001b84:	4b26      	ldr	r3, [pc, #152]	@ (8001c20 <SSD1306_UpdateScreen+0xbc>)
 8001b86:	681c      	ldr	r4, [r3, #0]
 8001b88:	4b24      	ldr	r3, [pc, #144]	@ (8001c1c <SSD1306_UpdateScreen+0xb8>)
 8001b8a:	799b      	ldrb	r3, [r3, #6]
 8001b8c:	01db      	lsls	r3, r3, #7
 8001b8e:	4a25      	ldr	r2, [pc, #148]	@ (8001c24 <SSD1306_UpdateScreen+0xc0>)
 8001b90:	441a      	add	r2, r3
 8001b92:	2380      	movs	r3, #128	@ 0x80
 8001b94:	2140      	movs	r1, #64	@ 0x40
 8001b96:	2078      	movs	r0, #120	@ 0x78
 8001b98:	47a0      	blx	r4
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d12d      	bne.n	8001bfc <SSD1306_UpdateScreen+0x98>
					SSD1306.Page++;
 8001ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c1c <SSD1306_UpdateScreen+0xb8>)
 8001ba2:	799b      	ldrb	r3, [r3, #6]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c1c <SSD1306_UpdateScreen+0xb8>)
 8001baa:	719a      	strb	r2, [r3, #6]
					SSD1306.DMA=CMD;
 8001bac:	4b1b      	ldr	r3, [pc, #108]	@ (8001c1c <SSD1306_UpdateScreen+0xb8>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	71da      	strb	r2, [r3, #7]
					SSD1306.DMAREADY=0;
 8001bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c1c <SSD1306_UpdateScreen+0xb8>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	745a      	strb	r2, [r3, #17]
				}
				break;
 8001bb8:	e020      	b.n	8001bfc <SSD1306_UpdateScreen+0x98>
			case CMD:

				SSD1306.Commands[0]=0xB0 + SSD1306.Page;
 8001bba:	4b18      	ldr	r3, [pc, #96]	@ (8001c1c <SSD1306_UpdateScreen+0xb8>)
 8001bbc:	799b      	ldrb	r3, [r3, #6]
 8001bbe:	3b50      	subs	r3, #80	@ 0x50
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4b16      	ldr	r3, [pc, #88]	@ (8001c1c <SSD1306_UpdateScreen+0xb8>)
 8001bc4:	721a      	strb	r2, [r3, #8]
				SSD1306.Commands[1]=0x00;
 8001bc6:	4b15      	ldr	r3, [pc, #84]	@ (8001c1c <SSD1306_UpdateScreen+0xb8>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	725a      	strb	r2, [r3, #9]
				SSD1306.Commands[2]=0x10;
 8001bcc:	4b13      	ldr	r3, [pc, #76]	@ (8001c1c <SSD1306_UpdateScreen+0xb8>)
 8001bce:	2210      	movs	r2, #16
 8001bd0:	729a      	strb	r2, [r3, #10]

				if(I2C_DMA_Master_Transmit(SSD1306_I2C_ADDR,0x00, &SSD1306.Commands[0],3)==1){
 8001bd2:	4b13      	ldr	r3, [pc, #76]	@ (8001c20 <SSD1306_UpdateScreen+0xbc>)
 8001bd4:	681c      	ldr	r4, [r3, #0]
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	4a13      	ldr	r2, [pc, #76]	@ (8001c28 <SSD1306_UpdateScreen+0xc4>)
 8001bda:	2100      	movs	r1, #0
 8001bdc:	2078      	movs	r0, #120	@ 0x78
 8001bde:	47a0      	blx	r4
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d10c      	bne.n	8001c00 <SSD1306_UpdateScreen+0x9c>
					SSD1306.DMA=Data;
 8001be6:	4b0d      	ldr	r3, [pc, #52]	@ (8001c1c <SSD1306_UpdateScreen+0xb8>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	71da      	strb	r2, [r3, #7]
					SSD1306.DMAREADY=0;
 8001bec:	4b0b      	ldr	r3, [pc, #44]	@ (8001c1c <SSD1306_UpdateScreen+0xb8>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	745a      	strb	r2, [r3, #17]
				}
				break;
 8001bf2:	e005      	b.n	8001c00 <SSD1306_UpdateScreen+0x9c>

			default:
				SSD1306.Page=8;
 8001bf4:	4b09      	ldr	r3, [pc, #36]	@ (8001c1c <SSD1306_UpdateScreen+0xb8>)
 8001bf6:	2208      	movs	r2, #8
 8001bf8:	719a      	strb	r2, [r3, #6]
				break;
 8001bfa:	e002      	b.n	8001c02 <SSD1306_UpdateScreen+0x9e>
				break;
 8001bfc:	bf00      	nop
 8001bfe:	e000      	b.n	8001c02 <SSD1306_UpdateScreen+0x9e>
				break;
 8001c00:	bf00      	nop
			}
		if(SSD1306.Page>7){
 8001c02:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <SSD1306_UpdateScreen+0xb8>)
 8001c04:	799b      	ldrb	r3, [r3, #6]
 8001c06:	2b07      	cmp	r3, #7
 8001c08:	d905      	bls.n	8001c16 <SSD1306_UpdateScreen+0xb2>
			SSD1306.Page=0;
 8001c0a:	4b04      	ldr	r3, [pc, #16]	@ (8001c1c <SSD1306_UpdateScreen+0xb8>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	719a      	strb	r2, [r3, #6]
			SSD1306.Needtorefresh=0;
 8001c10:	4b02      	ldr	r3, [pc, #8]	@ (8001c1c <SSD1306_UpdateScreen+0xb8>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	741a      	strb	r2, [r3, #16]
		}
	}
}
 8001c16:	bf00      	nop
 8001c18:	bd98      	pop	{r3, r4, r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	200008d8 	.word	0x200008d8
 8001c20:	200008d0 	.word	0x200008d0
 8001c24:	200004d0 	.word	0x200004d0
 8001c28:	200008e0 	.word	0x200008e0

08001c2c <SSD1306_Fill>:
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
	memset(SSD1306_Buffer, (color == BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <SSD1306_Fill+0x14>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	e000      	b.n	8001c42 <SSD1306_Fill+0x16>
 8001c40:	23ff      	movs	r3, #255	@ 0xff
 8001c42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c46:	4619      	mov	r1, r3
 8001c48:	4803      	ldr	r0, [pc, #12]	@ (8001c58 <SSD1306_Fill+0x2c>)
 8001c4a:	f00c f8d1 	bl	800ddf0 <memset>
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	200004d0 	.word	0x200004d0

08001c5c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	80fb      	strh	r3, [r7, #6]
 8001c66:	460b      	mov	r3, r1
 8001c68:	80bb      	strh	r3, [r7, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	70fb      	strb	r3, [r7, #3]
	if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT){
 8001c6e:	88fb      	ldrh	r3, [r7, #6]
 8001c70:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c72:	d848      	bhi.n	8001d06 <SSD1306_DrawPixel+0xaa>
 8001c74:	88bb      	ldrh	r3, [r7, #4]
 8001c76:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c78:	d845      	bhi.n	8001d06 <SSD1306_DrawPixel+0xaa>
		return;
	}

	if(SSD1306.Inverted){
 8001c7a:	4b26      	ldr	r3, [pc, #152]	@ (8001d14 <SSD1306_DrawPixel+0xb8>)
 8001c7c:	791b      	ldrb	r3, [r3, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d006      	beq.n	8001c90 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001c82:	78fb      	ldrb	r3, [r7, #3]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	bf0c      	ite	eq
 8001c88:	2301      	moveq	r3, #1
 8001c8a:	2300      	movne	r3, #0
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	70fb      	strb	r3, [r7, #3]
	}

	if(color == WHITE){
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d11a      	bne.n	8001ccc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001c96:	88fa      	ldrh	r2, [r7, #6]
 8001c98:	88bb      	ldrh	r3, [r7, #4]
 8001c9a:	08db      	lsrs	r3, r3, #3
 8001c9c:	b298      	uxth	r0, r3
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	01db      	lsls	r3, r3, #7
 8001ca2:	4413      	add	r3, r2
 8001ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8001d18 <SSD1306_DrawPixel+0xbc>)
 8001ca6:	5cd3      	ldrb	r3, [r2, r3]
 8001ca8:	b25a      	sxtb	r2, r3
 8001caa:	88bb      	ldrh	r3, [r7, #4]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb6:	b25b      	sxtb	r3, r3
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	b259      	sxtb	r1, r3
 8001cbc:	88fa      	ldrh	r2, [r7, #6]
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	01db      	lsls	r3, r3, #7
 8001cc2:	4413      	add	r3, r2
 8001cc4:	b2c9      	uxtb	r1, r1
 8001cc6:	4a14      	ldr	r2, [pc, #80]	@ (8001d18 <SSD1306_DrawPixel+0xbc>)
 8001cc8:	54d1      	strb	r1, [r2, r3]
 8001cca:	e01d      	b.n	8001d08 <SSD1306_DrawPixel+0xac>
	}else{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001ccc:	88fa      	ldrh	r2, [r7, #6]
 8001cce:	88bb      	ldrh	r3, [r7, #4]
 8001cd0:	08db      	lsrs	r3, r3, #3
 8001cd2:	b298      	uxth	r0, r3
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	01db      	lsls	r3, r3, #7
 8001cd8:	4413      	add	r3, r2
 8001cda:	4a0f      	ldr	r2, [pc, #60]	@ (8001d18 <SSD1306_DrawPixel+0xbc>)
 8001cdc:	5cd3      	ldrb	r3, [r2, r3]
 8001cde:	b25a      	sxtb	r2, r3
 8001ce0:	88bb      	ldrh	r3, [r7, #4]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cec:	b25b      	sxtb	r3, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	b25b      	sxtb	r3, r3
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	b259      	sxtb	r1, r3
 8001cf6:	88fa      	ldrh	r2, [r7, #6]
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	01db      	lsls	r3, r3, #7
 8001cfc:	4413      	add	r3, r2
 8001cfe:	b2c9      	uxtb	r1, r1
 8001d00:	4a05      	ldr	r2, [pc, #20]	@ (8001d18 <SSD1306_DrawPixel+0xbc>)
 8001d02:	54d1      	strb	r1, [r2, r3]
 8001d04:	e000      	b.n	8001d08 <SSD1306_DrawPixel+0xac>
		return;
 8001d06:	bf00      	nop
	}
}
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	200008d8 	.word	0x200008d8
 8001d18:	200004d0 	.word	0x200004d0

08001d1c <SSD1306_Clear>:
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
    }
}

void SSD1306_Clear(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
	SSD1306_Fill(0);
 8001d20:	2000      	movs	r0, #0
 8001d22:	f7ff ff83 	bl	8001c2c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001d26:	f7ff ff1d 	bl	8001b64 <SSD1306_UpdateScreen>
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <SSD1306_I2C_Write>:
//uint8_t SSD1306_I2C_WriteMulti(uint8_t address, uint16_t reg, uint8_t* data, uint16_t count) {
//
//	return (uint8_t)I2C_DMA_Master_Transmit(address, reg, data, count);
//}

void SSD1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data){
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	71bb      	strb	r3, [r7, #6]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001d42:	79bb      	ldrb	r3, [r7, #6]
 8001d44:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001d46:	797b      	ldrb	r3, [r7, #5]
 8001d48:	737b      	strb	r3, [r7, #13]
	I2C_Master_Transmit_Blocking(address, dt, 2, 10);
 8001d4a:	4b06      	ldr	r3, [pc, #24]	@ (8001d64 <SSD1306_I2C_Write+0x34>)
 8001d4c:	681c      	ldr	r4, [r3, #0]
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	b298      	uxth	r0, r3
 8001d52:	f107 010c 	add.w	r1, r7, #12
 8001d56:	230a      	movs	r3, #10
 8001d58:	2202      	movs	r2, #2
 8001d5a:	47a0      	blx	r4
}
 8001d5c:	bf00      	nop
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd90      	pop	{r4, r7, pc}
 8001d64:	200008d4 	.word	0x200008d4

08001d68 <Display_Set_I2C_Master_Transmit>:

void Display_Set_I2C_Master_Transmit(uint8_t (*Master_Transmit)(uint16_t DevAddress,uint16_t reg, uint8_t *pData, uint16_t Size),uint8_t (*Master_Transmit_Blocking)(uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)){
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
	I2C_DMA_Master_Transmit = Master_Transmit;
 8001d72:	4a06      	ldr	r2, [pc, #24]	@ (8001d8c <Display_Set_I2C_Master_Transmit+0x24>)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6013      	str	r3, [r2, #0]
	I2C_Master_Transmit_Blocking = Master_Transmit_Blocking;
 8001d78:	4a05      	ldr	r2, [pc, #20]	@ (8001d90 <Display_Set_I2C_Master_Transmit+0x28>)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	6013      	str	r3, [r2, #0]
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	200008d0 	.word	0x200008d0
 8001d90:	200008d4 	.word	0x200008d4

08001d94 <SSD1306_DMAREADY>:

void SSD1306_DMAREADY(){
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
	SSD1306.DMAREADY=1;
 8001d98:	4b03      	ldr	r3, [pc, #12]	@ (8001da8 <SSD1306_DMAREADY+0x14>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	745a      	strb	r2, [r3, #17]
}
 8001d9e:	bf00      	nop
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	200008d8 	.word	0x200008d8

08001dac <SSD1306_RefreshReady>:

void SSD1306_RefreshReady(){
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
	SSD1306.Needtorefresh=1;
 8001db0:	4b03      	ldr	r3, [pc, #12]	@ (8001dc0 <SSD1306_RefreshReady+0x14>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	741a      	strb	r2, [r3, #16]
}
 8001db6:	bf00      	nop
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	200008d8 	.word	0x200008d8

08001dc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	4b10      	ldr	r3, [pc, #64]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd2:	4a0f      	ldr	r2, [pc, #60]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001dd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dda:	4b0d      	ldr	r3, [pc, #52]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	603b      	str	r3, [r7, #0]
 8001dea:	4b09      	ldr	r3, [pc, #36]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dee:	4a08      	ldr	r2, [pc, #32]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001df0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001df4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001df6:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800

08001e14 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08a      	sub	sp, #40	@ 0x28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a28      	ldr	r2, [pc, #160]	@ (8001ed4 <HAL_ADC_MspInit+0xc0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d149      	bne.n	8001eca <HAL_ADC_MspInit+0xb6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	4b27      	ldr	r3, [pc, #156]	@ (8001ed8 <HAL_ADC_MspInit+0xc4>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3e:	4a26      	ldr	r2, [pc, #152]	@ (8001ed8 <HAL_ADC_MspInit+0xc4>)
 8001e40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e46:	4b24      	ldr	r3, [pc, #144]	@ (8001ed8 <HAL_ADC_MspInit+0xc4>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	4b20      	ldr	r3, [pc, #128]	@ (8001ed8 <HAL_ADC_MspInit+0xc4>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ed8 <HAL_ADC_MspInit+0xc4>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e62:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed8 <HAL_ADC_MspInit+0xc4>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	4b19      	ldr	r3, [pc, #100]	@ (8001ed8 <HAL_ADC_MspInit+0xc4>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	4a18      	ldr	r2, [pc, #96]	@ (8001ed8 <HAL_ADC_MspInit+0xc4>)
 8001e78:	f043 0302 	orr.w	r3, r3, #2
 8001e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e7e:	4b16      	ldr	r3, [pc, #88]	@ (8001ed8 <HAL_ADC_MspInit+0xc4>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001e8a:	23fe      	movs	r3, #254	@ 0xfe
 8001e8c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e96:	f107 0314 	add.w	r3, r7, #20
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	480f      	ldr	r0, [pc, #60]	@ (8001edc <HAL_ADC_MspInit+0xc8>)
 8001e9e:	f001 fb6b 	bl	8003578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	480a      	ldr	r0, [pc, #40]	@ (8001ee0 <HAL_ADC_MspInit+0xcc>)
 8001eb6:	f001 fb5f 	bl	8003578 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	2012      	movs	r0, #18
 8001ec0:	f000 ff77 	bl	8002db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001ec4:	2012      	movs	r0, #18
 8001ec6:	f000 ff90 	bl	8002dea <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001eca:	bf00      	nop
 8001ecc:	3728      	adds	r7, #40	@ 0x28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40012000 	.word	0x40012000
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40020000 	.word	0x40020000
 8001ee0:	40020400 	.word	0x40020400

08001ee4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	@ 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a4f      	ldr	r2, [pc, #316]	@ (8002040 <HAL_I2C_MspInit+0x15c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	f040 8097 	bne.w	8002036 <HAL_I2C_MspInit+0x152>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f08:	2300      	movs	r3, #0
 8001f0a:	613b      	str	r3, [r7, #16]
 8001f0c:	4b4d      	ldr	r3, [pc, #308]	@ (8002044 <HAL_I2C_MspInit+0x160>)
 8001f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f10:	4a4c      	ldr	r2, [pc, #304]	@ (8002044 <HAL_I2C_MspInit+0x160>)
 8001f12:	f043 0302 	orr.w	r3, r3, #2
 8001f16:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f18:	4b4a      	ldr	r3, [pc, #296]	@ (8002044 <HAL_I2C_MspInit+0x160>)
 8001f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f24:	23c0      	movs	r3, #192	@ 0xc0
 8001f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f28:	2312      	movs	r3, #18
 8001f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f30:	2303      	movs	r3, #3
 8001f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f34:	2304      	movs	r3, #4
 8001f36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f38:	f107 0314 	add.w	r3, r7, #20
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4842      	ldr	r0, [pc, #264]	@ (8002048 <HAL_I2C_MspInit+0x164>)
 8001f40:	f001 fb1a 	bl	8003578 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	4b3e      	ldr	r3, [pc, #248]	@ (8002044 <HAL_I2C_MspInit+0x160>)
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4c:	4a3d      	ldr	r2, [pc, #244]	@ (8002044 <HAL_I2C_MspInit+0x160>)
 8001f4e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f52:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f54:	4b3b      	ldr	r3, [pc, #236]	@ (8002044 <HAL_I2C_MspInit+0x160>)
 8001f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8001f60:	4b3a      	ldr	r3, [pc, #232]	@ (800204c <HAL_I2C_MspInit+0x168>)
 8001f62:	4a3b      	ldr	r2, [pc, #236]	@ (8002050 <HAL_I2C_MspInit+0x16c>)
 8001f64:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8001f66:	4b39      	ldr	r3, [pc, #228]	@ (800204c <HAL_I2C_MspInit+0x168>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f6c:	4b37      	ldr	r3, [pc, #220]	@ (800204c <HAL_I2C_MspInit+0x168>)
 8001f6e:	2240      	movs	r2, #64	@ 0x40
 8001f70:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f72:	4b36      	ldr	r3, [pc, #216]	@ (800204c <HAL_I2C_MspInit+0x168>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f78:	4b34      	ldr	r3, [pc, #208]	@ (800204c <HAL_I2C_MspInit+0x168>)
 8001f7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f7e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f80:	4b32      	ldr	r3, [pc, #200]	@ (800204c <HAL_I2C_MspInit+0x168>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f86:	4b31      	ldr	r3, [pc, #196]	@ (800204c <HAL_I2C_MspInit+0x168>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001f8c:	4b2f      	ldr	r3, [pc, #188]	@ (800204c <HAL_I2C_MspInit+0x168>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f92:	4b2e      	ldr	r3, [pc, #184]	@ (800204c <HAL_I2C_MspInit+0x168>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f98:	4b2c      	ldr	r3, [pc, #176]	@ (800204c <HAL_I2C_MspInit+0x168>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001f9e:	482b      	ldr	r0, [pc, #172]	@ (800204c <HAL_I2C_MspInit+0x168>)
 8001fa0:	f000 ff3e 	bl	8002e20 <HAL_DMA_Init>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8001faa:	f7ff fa95 	bl	80014d8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a26      	ldr	r2, [pc, #152]	@ (800204c <HAL_I2C_MspInit+0x168>)
 8001fb2:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fb4:	4a25      	ldr	r2, [pc, #148]	@ (800204c <HAL_I2C_MspInit+0x168>)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001fba:	4b26      	ldr	r3, [pc, #152]	@ (8002054 <HAL_I2C_MspInit+0x170>)
 8001fbc:	4a26      	ldr	r2, [pc, #152]	@ (8002058 <HAL_I2C_MspInit+0x174>)
 8001fbe:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001fc0:	4b24      	ldr	r3, [pc, #144]	@ (8002054 <HAL_I2C_MspInit+0x170>)
 8001fc2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fc6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fc8:	4b22      	ldr	r3, [pc, #136]	@ (8002054 <HAL_I2C_MspInit+0x170>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fce:	4b21      	ldr	r3, [pc, #132]	@ (8002054 <HAL_I2C_MspInit+0x170>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8002054 <HAL_I2C_MspInit+0x170>)
 8001fd6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fda:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8002054 <HAL_I2C_MspInit+0x170>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8002054 <HAL_I2C_MspInit+0x170>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8002054 <HAL_I2C_MspInit+0x170>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fee:	4b19      	ldr	r3, [pc, #100]	@ (8002054 <HAL_I2C_MspInit+0x170>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ff4:	4b17      	ldr	r3, [pc, #92]	@ (8002054 <HAL_I2C_MspInit+0x170>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001ffa:	4816      	ldr	r0, [pc, #88]	@ (8002054 <HAL_I2C_MspInit+0x170>)
 8001ffc:	f000 ff10 	bl	8002e20 <HAL_DMA_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 8002006:	f7ff fa67 	bl	80014d8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a11      	ldr	r2, [pc, #68]	@ (8002054 <HAL_I2C_MspInit+0x170>)
 800200e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002010:	4a10      	ldr	r2, [pc, #64]	@ (8002054 <HAL_I2C_MspInit+0x170>)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002016:	2200      	movs	r2, #0
 8002018:	2100      	movs	r1, #0
 800201a:	201f      	movs	r0, #31
 800201c:	f000 fec9 	bl	8002db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002020:	201f      	movs	r0, #31
 8002022:	f000 fee2 	bl	8002dea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002026:	2200      	movs	r2, #0
 8002028:	2100      	movs	r1, #0
 800202a:	2020      	movs	r0, #32
 800202c:	f000 fec1 	bl	8002db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002030:	2020      	movs	r0, #32
 8002032:	f000 feda 	bl	8002dea <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002036:	bf00      	nop
 8002038:	3728      	adds	r7, #40	@ 0x28
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40005400 	.word	0x40005400
 8002044:	40023800 	.word	0x40023800
 8002048:	40020400 	.word	0x40020400
 800204c:	20000220 	.word	0x20000220
 8002050:	40026028 	.word	0x40026028
 8002054:	20000280 	.word	0x20000280
 8002058:	40026010 	.word	0x40026010

0800205c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a2a      	ldr	r2, [pc, #168]	@ (8002114 <HAL_TIM_Base_MspInit+0xb8>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d116      	bne.n	800209c <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
 8002072:	4b29      	ldr	r3, [pc, #164]	@ (8002118 <HAL_TIM_Base_MspInit+0xbc>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002076:	4a28      	ldr	r2, [pc, #160]	@ (8002118 <HAL_TIM_Base_MspInit+0xbc>)
 8002078:	f043 0302 	orr.w	r3, r3, #2
 800207c:	6413      	str	r3, [r2, #64]	@ 0x40
 800207e:	4b26      	ldr	r3, [pc, #152]	@ (8002118 <HAL_TIM_Base_MspInit+0xbc>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800208a:	2200      	movs	r2, #0
 800208c:	2100      	movs	r1, #0
 800208e:	201d      	movs	r0, #29
 8002090:	f000 fe8f 	bl	8002db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002094:	201d      	movs	r0, #29
 8002096:	f000 fea8 	bl	8002dea <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM11_MspInit 1 */

    /* USER CODE END TIM11_MspInit 1 */
  }

}
 800209a:	e036      	b.n	800210a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a1e      	ldr	r2, [pc, #120]	@ (800211c <HAL_TIM_Base_MspInit+0xc0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d116      	bne.n	80020d4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002118 <HAL_TIM_Base_MspInit+0xbc>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002118 <HAL_TIM_Base_MspInit+0xbc>)
 80020b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80020b6:	4b18      	ldr	r3, [pc, #96]	@ (8002118 <HAL_TIM_Base_MspInit+0xbc>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020be:	613b      	str	r3, [r7, #16]
 80020c0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2100      	movs	r1, #0
 80020c6:	2019      	movs	r0, #25
 80020c8:	f000 fe73 	bl	8002db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80020cc:	2019      	movs	r0, #25
 80020ce:	f000 fe8c 	bl	8002dea <HAL_NVIC_EnableIRQ>
}
 80020d2:	e01a      	b.n	800210a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a11      	ldr	r2, [pc, #68]	@ (8002120 <HAL_TIM_Base_MspInit+0xc4>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d115      	bne.n	800210a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002118 <HAL_TIM_Base_MspInit+0xbc>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e6:	4a0c      	ldr	r2, [pc, #48]	@ (8002118 <HAL_TIM_Base_MspInit+0xbc>)
 80020e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80020ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002118 <HAL_TIM_Base_MspInit+0xbc>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2100      	movs	r1, #0
 80020fe:	201a      	movs	r0, #26
 8002100:	f000 fe57 	bl	8002db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002104:	201a      	movs	r0, #26
 8002106:	f000 fe70 	bl	8002dea <HAL_NVIC_EnableIRQ>
}
 800210a:	bf00      	nop
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40000400 	.word	0x40000400
 8002118:	40023800 	.word	0x40023800
 800211c:	40014400 	.word	0x40014400
 8002120:	40014800 	.word	0x40014800

08002124 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b088      	sub	sp, #32
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212c:	f107 030c 	add.w	r3, r7, #12
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a12      	ldr	r2, [pc, #72]	@ (800218c <HAL_TIM_MspPostInit+0x68>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d11d      	bne.n	8002182 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	4b11      	ldr	r3, [pc, #68]	@ (8002190 <HAL_TIM_MspPostInit+0x6c>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214e:	4a10      	ldr	r2, [pc, #64]	@ (8002190 <HAL_TIM_MspPostInit+0x6c>)
 8002150:	f043 0302 	orr.w	r3, r3, #2
 8002154:	6313      	str	r3, [r2, #48]	@ 0x30
 8002156:	4b0e      	ldr	r3, [pc, #56]	@ (8002190 <HAL_TIM_MspPostInit+0x6c>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Eng2PWM_Pin|Eng1PWM_Pin;
 8002162:	2330      	movs	r3, #48	@ 0x30
 8002164:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216e:	2300      	movs	r3, #0
 8002170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002172:	2302      	movs	r3, #2
 8002174:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002176:	f107 030c 	add.w	r3, r7, #12
 800217a:	4619      	mov	r1, r3
 800217c:	4805      	ldr	r0, [pc, #20]	@ (8002194 <HAL_TIM_MspPostInit+0x70>)
 800217e:	f001 f9fb 	bl	8003578 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002182:	bf00      	nop
 8002184:	3720      	adds	r7, #32
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40000400 	.word	0x40000400
 8002190:	40023800 	.word	0x40023800
 8002194:	40020400 	.word	0x40020400

08002198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800219c:	bf00      	nop
 800219e:	e7fd      	b.n	800219c <NMI_Handler+0x4>

080021a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021a4:	bf00      	nop
 80021a6:	e7fd      	b.n	80021a4 <HardFault_Handler+0x4>

080021a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021ac:	bf00      	nop
 80021ae:	e7fd      	b.n	80021ac <MemManage_Handler+0x4>

080021b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021b4:	bf00      	nop
 80021b6:	e7fd      	b.n	80021b4 <BusFault_Handler+0x4>

080021b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021bc:	bf00      	nop
 80021be:	e7fd      	b.n	80021bc <UsageFault_Handler+0x4>

080021c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ee:	f000 f921 	bl	8002434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80021fc:	4802      	ldr	r0, [pc, #8]	@ (8002208 <DMA1_Stream0_IRQHandler+0x10>)
 80021fe:	f000 ff37 	bl	8003070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000280 	.word	0x20000280

0800220c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002210:	4802      	ldr	r0, [pc, #8]	@ (800221c <DMA1_Stream1_IRQHandler+0x10>)
 8002212:	f000 ff2d 	bl	8003070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000220 	.word	0x20000220

08002220 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002224:	4802      	ldr	r0, [pc, #8]	@ (8002230 <ADC_IRQHandler+0x10>)
 8002226:	f000 f98c 	bl	8002542 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000184 	.word	0x20000184

08002234 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002238:	4802      	ldr	r0, [pc, #8]	@ (8002244 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800223a:	f006 fe4f 	bl	8008edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000328 	.word	0x20000328

08002248 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800224c:	4802      	ldr	r0, [pc, #8]	@ (8002258 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800224e:	f006 fe45 	bl	8008edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000370 	.word	0x20000370

0800225c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002260:	4802      	ldr	r0, [pc, #8]	@ (800226c <TIM3_IRQHandler+0x10>)
 8002262:	f006 fe3b 	bl	8008edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	200002e0 	.word	0x200002e0

08002270 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002274:	4802      	ldr	r0, [pc, #8]	@ (8002280 <I2C1_EV_IRQHandler+0x10>)
 8002276:	f002 fba9 	bl	80049cc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	200001cc 	.word	0x200001cc

08002284 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002288:	4802      	ldr	r0, [pc, #8]	@ (8002294 <I2C1_ER_IRQHandler+0x10>)
 800228a:	f002 fd10 	bl	8004cae <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	200001cc 	.word	0x200001cc

08002298 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800229c:	4802      	ldr	r0, [pc, #8]	@ (80022a8 <OTG_FS_IRQHandler+0x10>)
 800229e:	f004 ff0e 	bl	80070be <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	200011d8 	.word	0x200011d8

080022ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022b4:	4a14      	ldr	r2, [pc, #80]	@ (8002308 <_sbrk+0x5c>)
 80022b6:	4b15      	ldr	r3, [pc, #84]	@ (800230c <_sbrk+0x60>)
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022c0:	4b13      	ldr	r3, [pc, #76]	@ (8002310 <_sbrk+0x64>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d102      	bne.n	80022ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022c8:	4b11      	ldr	r3, [pc, #68]	@ (8002310 <_sbrk+0x64>)
 80022ca:	4a12      	ldr	r2, [pc, #72]	@ (8002314 <_sbrk+0x68>)
 80022cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ce:	4b10      	ldr	r3, [pc, #64]	@ (8002310 <_sbrk+0x64>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4413      	add	r3, r2
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d207      	bcs.n	80022ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022dc:	f00b fda0 	bl	800de20 <__errno>
 80022e0:	4603      	mov	r3, r0
 80022e2:	220c      	movs	r2, #12
 80022e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022e6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ea:	e009      	b.n	8002300 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022ec:	4b08      	ldr	r3, [pc, #32]	@ (8002310 <_sbrk+0x64>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022f2:	4b07      	ldr	r3, [pc, #28]	@ (8002310 <_sbrk+0x64>)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4413      	add	r3, r2
 80022fa:	4a05      	ldr	r2, [pc, #20]	@ (8002310 <_sbrk+0x64>)
 80022fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022fe:	68fb      	ldr	r3, [r7, #12]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	20020000 	.word	0x20020000
 800230c:	00000400 	.word	0x00000400
 8002310:	200008ec 	.word	0x200008ec
 8002314:	20001a28 	.word	0x20001a28

08002318 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800231c:	4b06      	ldr	r3, [pc, #24]	@ (8002338 <SystemInit+0x20>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002322:	4a05      	ldr	r2, [pc, #20]	@ (8002338 <SystemInit+0x20>)
 8002324:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002328:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800233c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002374 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002340:	f7ff ffea 	bl	8002318 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002344:	480c      	ldr	r0, [pc, #48]	@ (8002378 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002346:	490d      	ldr	r1, [pc, #52]	@ (800237c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002348:	4a0d      	ldr	r2, [pc, #52]	@ (8002380 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800234a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800234c:	e002      	b.n	8002354 <LoopCopyDataInit>

0800234e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800234e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002352:	3304      	adds	r3, #4

08002354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002358:	d3f9      	bcc.n	800234e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800235a:	4a0a      	ldr	r2, [pc, #40]	@ (8002384 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800235c:	4c0a      	ldr	r4, [pc, #40]	@ (8002388 <LoopFillZerobss+0x22>)
  movs r3, #0
 800235e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002360:	e001      	b.n	8002366 <LoopFillZerobss>

08002362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002364:	3204      	adds	r2, #4

08002366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002368:	d3fb      	bcc.n	8002362 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800236a:	f00b fd5f 	bl	800de2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800236e:	f7fe fcc7 	bl	8000d00 <main>
  bx  lr    
 8002372:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002374:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800237c:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8002380:	0800ee64 	.word	0x0800ee64
  ldr r2, =_sbss
 8002384:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8002388:	20001a24 	.word	0x20001a24

0800238c <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800238c:	e7fe      	b.n	800238c <DMA1_Stream2_IRQHandler>
	...

08002390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002394:	4b0e      	ldr	r3, [pc, #56]	@ (80023d0 <HAL_Init+0x40>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a0d      	ldr	r2, [pc, #52]	@ (80023d0 <HAL_Init+0x40>)
 800239a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800239e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023a0:	4b0b      	ldr	r3, [pc, #44]	@ (80023d0 <HAL_Init+0x40>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a0a      	ldr	r2, [pc, #40]	@ (80023d0 <HAL_Init+0x40>)
 80023a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023ac:	4b08      	ldr	r3, [pc, #32]	@ (80023d0 <HAL_Init+0x40>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a07      	ldr	r2, [pc, #28]	@ (80023d0 <HAL_Init+0x40>)
 80023b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023b8:	2003      	movs	r0, #3
 80023ba:	f000 fcef 	bl	8002d9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023be:	200f      	movs	r0, #15
 80023c0:	f000 f808 	bl	80023d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023c4:	f7ff fcfe 	bl	8001dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40023c00 	.word	0x40023c00

080023d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023dc:	4b12      	ldr	r3, [pc, #72]	@ (8002428 <HAL_InitTick+0x54>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4b12      	ldr	r3, [pc, #72]	@ (800242c <HAL_InitTick+0x58>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	4619      	mov	r1, r3
 80023e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 fd07 	bl	8002e06 <HAL_SYSTICK_Config>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e00e      	b.n	8002420 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b0f      	cmp	r3, #15
 8002406:	d80a      	bhi.n	800241e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002408:	2200      	movs	r2, #0
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	f04f 30ff 	mov.w	r0, #4294967295
 8002410:	f000 fccf 	bl	8002db2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002414:	4a06      	ldr	r2, [pc, #24]	@ (8002430 <HAL_InitTick+0x5c>)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
 800241c:	e000      	b.n	8002420 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
}
 8002420:	4618      	mov	r0, r3
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20000004 	.word	0x20000004
 800242c:	2000000c 	.word	0x2000000c
 8002430:	20000008 	.word	0x20000008

08002434 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002438:	4b06      	ldr	r3, [pc, #24]	@ (8002454 <HAL_IncTick+0x20>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	461a      	mov	r2, r3
 800243e:	4b06      	ldr	r3, [pc, #24]	@ (8002458 <HAL_IncTick+0x24>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4413      	add	r3, r2
 8002444:	4a04      	ldr	r2, [pc, #16]	@ (8002458 <HAL_IncTick+0x24>)
 8002446:	6013      	str	r3, [r2, #0]
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	2000000c 	.word	0x2000000c
 8002458:	200008f0 	.word	0x200008f0

0800245c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  return uwTick;
 8002460:	4b03      	ldr	r3, [pc, #12]	@ (8002470 <HAL_GetTick+0x14>)
 8002462:	681b      	ldr	r3, [r3, #0]
}
 8002464:	4618      	mov	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	200008f0 	.word	0x200008f0

08002474 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800247c:	f7ff ffee 	bl	800245c <HAL_GetTick>
 8002480:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248c:	d005      	beq.n	800249a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800248e:	4b0a      	ldr	r3, [pc, #40]	@ (80024b8 <HAL_Delay+0x44>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	461a      	mov	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4413      	add	r3, r2
 8002498:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800249a:	bf00      	nop
 800249c:	f7ff ffde 	bl	800245c <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d8f7      	bhi.n	800249c <HAL_Delay+0x28>
  {
  }
}
 80024ac:	bf00      	nop
 80024ae:	bf00      	nop
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	2000000c 	.word	0x2000000c

080024bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e033      	b.n	800253a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff fc9a 	bl	8001e14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f2:	f003 0310 	and.w	r3, r3, #16
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d118      	bne.n	800252c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002502:	f023 0302 	bic.w	r3, r3, #2
 8002506:	f043 0202 	orr.w	r2, r3, #2
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 fa6e 	bl	80029f0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251e:	f023 0303 	bic.w	r3, r3, #3
 8002522:	f043 0201 	orr.w	r2, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	641a      	str	r2, [r3, #64]	@ 0x40
 800252a:	e001      	b.n	8002530 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002538:	7bfb      	ldrb	r3, [r7, #15]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b086      	sub	sp, #24
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	f003 0320 	and.w	r3, r3, #32
 8002570:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d049      	beq.n	800260c <HAL_ADC_IRQHandler+0xca>
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d046      	beq.n	800260c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002582:	f003 0310 	and.w	r3, r3, #16
 8002586:	2b00      	cmp	r3, #0
 8002588:	d105      	bne.n	8002596 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d12b      	bne.n	80025fc <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d127      	bne.n	80025fc <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d006      	beq.n	80025c8 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d119      	bne.n	80025fc <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0220 	bic.w	r2, r2, #32
 80025d6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d105      	bne.n	80025fc <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f4:	f043 0201 	orr.w	r2, r3, #1
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7fe fa6f 	bl	8000ae0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f06f 0212 	mvn.w	r2, #18
 800260a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800261a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d057      	beq.n	80026d2 <HAL_ADC_IRQHandler+0x190>
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d054      	beq.n	80026d2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262c:	f003 0310 	and.w	r3, r3, #16
 8002630:	2b00      	cmp	r3, #0
 8002632:	d105      	bne.n	8002640 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002638:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d139      	bne.n	80026c2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002654:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002658:	2b00      	cmp	r3, #0
 800265a:	d006      	beq.n	800266a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002666:	2b00      	cmp	r3, #0
 8002668:	d12b      	bne.n	80026c2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002674:	2b00      	cmp	r3, #0
 8002676:	d124      	bne.n	80026c2 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002682:	2b00      	cmp	r3, #0
 8002684:	d11d      	bne.n	80026c2 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800268a:	2b00      	cmp	r3, #0
 800268c:	d119      	bne.n	80026c2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800269c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d105      	bne.n	80026c2 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ba:	f043 0201 	orr.w	r2, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 fa90 	bl	8002be8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f06f 020c 	mvn.w	r2, #12
 80026d0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026e0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d017      	beq.n	8002718 <HAL_ADC_IRQHandler+0x1d6>
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d014      	beq.n	8002718 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d10d      	bne.n	8002718 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002700:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f82a 	bl	8002762 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f06f 0201 	mvn.w	r2, #1
 8002716:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 0320 	and.w	r3, r3, #32
 800271e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002726:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d015      	beq.n	800275a <HAL_ADC_IRQHandler+0x218>
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d012      	beq.n	800275a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002738:	f043 0202 	orr.w	r2, r3, #2
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f06f 0220 	mvn.w	r2, #32
 8002748:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f813 	bl	8002776 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f06f 0220 	mvn.w	r2, #32
 8002758:	601a      	str	r2, [r3, #0]
  }
}
 800275a:	bf00      	nop
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
	...

0800278c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002796:	2300      	movs	r3, #0
 8002798:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x1c>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e113      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x244>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b09      	cmp	r3, #9
 80027b6:	d925      	bls.n	8002804 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68d9      	ldr	r1, [r3, #12]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	461a      	mov	r2, r3
 80027c6:	4613      	mov	r3, r2
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	4413      	add	r3, r2
 80027cc:	3b1e      	subs	r3, #30
 80027ce:	2207      	movs	r2, #7
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43da      	mvns	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	400a      	ands	r2, r1
 80027dc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68d9      	ldr	r1, [r3, #12]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	4618      	mov	r0, r3
 80027f0:	4603      	mov	r3, r0
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	4403      	add	r3, r0
 80027f6:	3b1e      	subs	r3, #30
 80027f8:	409a      	lsls	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	60da      	str	r2, [r3, #12]
 8002802:	e022      	b.n	800284a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6919      	ldr	r1, [r3, #16]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	b29b      	uxth	r3, r3
 8002810:	461a      	mov	r2, r3
 8002812:	4613      	mov	r3, r2
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	4413      	add	r3, r2
 8002818:	2207      	movs	r2, #7
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43da      	mvns	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	400a      	ands	r2, r1
 8002826:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6919      	ldr	r1, [r3, #16]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	b29b      	uxth	r3, r3
 8002838:	4618      	mov	r0, r3
 800283a:	4603      	mov	r3, r0
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	4403      	add	r3, r0
 8002840:	409a      	lsls	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b06      	cmp	r3, #6
 8002850:	d824      	bhi.n	800289c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	3b05      	subs	r3, #5
 8002864:	221f      	movs	r2, #31
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43da      	mvns	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	400a      	ands	r2, r1
 8002872:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	b29b      	uxth	r3, r3
 8002880:	4618      	mov	r0, r3
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	3b05      	subs	r3, #5
 800288e:	fa00 f203 	lsl.w	r2, r0, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	635a      	str	r2, [r3, #52]	@ 0x34
 800289a:	e04c      	b.n	8002936 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b0c      	cmp	r3, #12
 80028a2:	d824      	bhi.n	80028ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	3b23      	subs	r3, #35	@ 0x23
 80028b6:	221f      	movs	r2, #31
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43da      	mvns	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	400a      	ands	r2, r1
 80028c4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	4618      	mov	r0, r3
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	3b23      	subs	r3, #35	@ 0x23
 80028e0:	fa00 f203 	lsl.w	r2, r0, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80028ec:	e023      	b.n	8002936 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	3b41      	subs	r3, #65	@ 0x41
 8002900:	221f      	movs	r2, #31
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43da      	mvns	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	400a      	ands	r2, r1
 800290e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	b29b      	uxth	r3, r3
 800291c:	4618      	mov	r0, r3
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	3b41      	subs	r3, #65	@ 0x41
 800292a:	fa00 f203 	lsl.w	r2, r0, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002936:	4b29      	ldr	r3, [pc, #164]	@ (80029dc <HAL_ADC_ConfigChannel+0x250>)
 8002938:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a28      	ldr	r2, [pc, #160]	@ (80029e0 <HAL_ADC_ConfigChannel+0x254>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d10f      	bne.n	8002964 <HAL_ADC_ConfigChannel+0x1d8>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b12      	cmp	r3, #18
 800294a:	d10b      	bne.n	8002964 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a1d      	ldr	r2, [pc, #116]	@ (80029e0 <HAL_ADC_ConfigChannel+0x254>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d12b      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x23a>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a1c      	ldr	r2, [pc, #112]	@ (80029e4 <HAL_ADC_ConfigChannel+0x258>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d003      	beq.n	8002980 <HAL_ADC_ConfigChannel+0x1f4>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b11      	cmp	r3, #17
 800297e:	d122      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a11      	ldr	r2, [pc, #68]	@ (80029e4 <HAL_ADC_ConfigChannel+0x258>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d111      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029a2:	4b11      	ldr	r3, [pc, #68]	@ (80029e8 <HAL_ADC_ConfigChannel+0x25c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a11      	ldr	r2, [pc, #68]	@ (80029ec <HAL_ADC_ConfigChannel+0x260>)
 80029a8:	fba2 2303 	umull	r2, r3, r2, r3
 80029ac:	0c9a      	lsrs	r2, r3, #18
 80029ae:	4613      	mov	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029b8:	e002      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	3b01      	subs	r3, #1
 80029be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f9      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	40012300 	.word	0x40012300
 80029e0:	40012000 	.word	0x40012000
 80029e4:	10000012 	.word	0x10000012
 80029e8:	20000004 	.word	0x20000004
 80029ec:	431bde83 	.word	0x431bde83

080029f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029f8:	4b79      	ldr	r3, [pc, #484]	@ (8002be0 <ADC_Init+0x1f0>)
 80029fa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	431a      	orrs	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6859      	ldr	r1, [r3, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	021a      	lsls	r2, r3, #8
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002a48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6859      	ldr	r1, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689a      	ldr	r2, [r3, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6899      	ldr	r1, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a82:	4a58      	ldr	r2, [pc, #352]	@ (8002be4 <ADC_Init+0x1f4>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d022      	beq.n	8002ace <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6899      	ldr	r1, [r3, #8]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ab8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6899      	ldr	r1, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	e00f      	b.n	8002aee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002adc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002aec:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0202 	bic.w	r2, r2, #2
 8002afc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6899      	ldr	r1, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	7e1b      	ldrb	r3, [r3, #24]
 8002b08:	005a      	lsls	r2, r3, #1
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d01b      	beq.n	8002b54 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b2a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002b3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6859      	ldr	r1, [r3, #4]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b46:	3b01      	subs	r3, #1
 8002b48:	035a      	lsls	r2, r3, #13
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	605a      	str	r2, [r3, #4]
 8002b52:	e007      	b.n	8002b64 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b62:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002b72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	051a      	lsls	r2, r3, #20
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6899      	ldr	r1, [r3, #8]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002ba6:	025a      	lsls	r2, r3, #9
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6899      	ldr	r1, [r3, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	029a      	lsls	r2, r3, #10
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	609a      	str	r2, [r3, #8]
}
 8002bd4:	bf00      	nop
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	40012300 	.word	0x40012300
 8002be4:	0f000001 	.word	0x0f000001

08002be8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c40 <__NVIC_SetPriorityGrouping+0x44>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c18:	4013      	ands	r3, r2
 8002c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c2e:	4a04      	ldr	r2, [pc, #16]	@ (8002c40 <__NVIC_SetPriorityGrouping+0x44>)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	60d3      	str	r3, [r2, #12]
}
 8002c34:	bf00      	nop
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	e000ed00 	.word	0xe000ed00

08002c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c48:	4b04      	ldr	r3, [pc, #16]	@ (8002c5c <__NVIC_GetPriorityGrouping+0x18>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	0a1b      	lsrs	r3, r3, #8
 8002c4e:	f003 0307 	and.w	r3, r3, #7
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	e000ed00 	.word	0xe000ed00

08002c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	db0b      	blt.n	8002c8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	f003 021f 	and.w	r2, r3, #31
 8002c78:	4907      	ldr	r1, [pc, #28]	@ (8002c98 <__NVIC_EnableIRQ+0x38>)
 8002c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7e:	095b      	lsrs	r3, r3, #5
 8002c80:	2001      	movs	r0, #1
 8002c82:	fa00 f202 	lsl.w	r2, r0, r2
 8002c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	e000e100 	.word	0xe000e100

08002c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	6039      	str	r1, [r7, #0]
 8002ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	db0a      	blt.n	8002cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	490c      	ldr	r1, [pc, #48]	@ (8002ce8 <__NVIC_SetPriority+0x4c>)
 8002cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cba:	0112      	lsls	r2, r2, #4
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cc4:	e00a      	b.n	8002cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	4908      	ldr	r1, [pc, #32]	@ (8002cec <__NVIC_SetPriority+0x50>)
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	3b04      	subs	r3, #4
 8002cd4:	0112      	lsls	r2, r2, #4
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	440b      	add	r3, r1
 8002cda:	761a      	strb	r2, [r3, #24]
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	e000e100 	.word	0xe000e100
 8002cec:	e000ed00 	.word	0xe000ed00

08002cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b089      	sub	sp, #36	@ 0x24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f1c3 0307 	rsb	r3, r3, #7
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	bf28      	it	cs
 8002d0e:	2304      	movcs	r3, #4
 8002d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	3304      	adds	r3, #4
 8002d16:	2b06      	cmp	r3, #6
 8002d18:	d902      	bls.n	8002d20 <NVIC_EncodePriority+0x30>
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	3b03      	subs	r3, #3
 8002d1e:	e000      	b.n	8002d22 <NVIC_EncodePriority+0x32>
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d24:	f04f 32ff 	mov.w	r2, #4294967295
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43da      	mvns	r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	401a      	ands	r2, r3
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d38:	f04f 31ff 	mov.w	r1, #4294967295
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d42:	43d9      	mvns	r1, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d48:	4313      	orrs	r3, r2
         );
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3724      	adds	r7, #36	@ 0x24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
	...

08002d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d68:	d301      	bcc.n	8002d6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e00f      	b.n	8002d8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d98 <SysTick_Config+0x40>)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d76:	210f      	movs	r1, #15
 8002d78:	f04f 30ff 	mov.w	r0, #4294967295
 8002d7c:	f7ff ff8e 	bl	8002c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d80:	4b05      	ldr	r3, [pc, #20]	@ (8002d98 <SysTick_Config+0x40>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d86:	4b04      	ldr	r3, [pc, #16]	@ (8002d98 <SysTick_Config+0x40>)
 8002d88:	2207      	movs	r2, #7
 8002d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	e000e010 	.word	0xe000e010

08002d9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7ff ff29 	bl	8002bfc <__NVIC_SetPriorityGrouping>
}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b086      	sub	sp, #24
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	4603      	mov	r3, r0
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
 8002dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dc4:	f7ff ff3e 	bl	8002c44 <__NVIC_GetPriorityGrouping>
 8002dc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	68b9      	ldr	r1, [r7, #8]
 8002dce:	6978      	ldr	r0, [r7, #20]
 8002dd0:	f7ff ff8e 	bl	8002cf0 <NVIC_EncodePriority>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dda:	4611      	mov	r1, r2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff ff5d 	bl	8002c9c <__NVIC_SetPriority>
}
 8002de2:	bf00      	nop
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	4603      	mov	r3, r0
 8002df2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff ff31 	bl	8002c60 <__NVIC_EnableIRQ>
}
 8002dfe:	bf00      	nop
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7ff ffa2 	bl	8002d58 <SysTick_Config>
 8002e14:	4603      	mov	r3, r0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
	...

08002e20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e2c:	f7ff fb16 	bl	800245c <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e099      	b.n	8002f70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0201 	bic.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e5c:	e00f      	b.n	8002e7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e5e:	f7ff fafd 	bl	800245c <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b05      	cmp	r3, #5
 8002e6a:	d908      	bls.n	8002e7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2203      	movs	r2, #3
 8002e76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e078      	b.n	8002f70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1e8      	bne.n	8002e5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	4b38      	ldr	r3, [pc, #224]	@ (8002f78 <HAL_DMA_Init+0x158>)
 8002e98:	4013      	ands	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ec2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d107      	bne.n	8002ee8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f023 0307 	bic.w	r3, r3, #7
 8002efe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	d117      	bne.n	8002f42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00e      	beq.n	8002f42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 faab 	bl	8003480 <DMA_CheckFifoParam>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d008      	beq.n	8002f42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2240      	movs	r2, #64	@ 0x40
 8002f34:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e016      	b.n	8002f70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 fa62 	bl	8003414 <DMA_CalcBaseAndBitshift>
 8002f50:	4603      	mov	r3, r0
 8002f52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f58:	223f      	movs	r2, #63	@ 0x3f
 8002f5a:	409a      	lsls	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	f010803f 	.word	0xf010803f

08002f7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
 8002f88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f92:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d101      	bne.n	8002fa2 <HAL_DMA_Start_IT+0x26>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e040      	b.n	8003024 <HAL_DMA_Start_IT+0xa8>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d12f      	bne.n	8003016 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2202      	movs	r2, #2
 8002fba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	68b9      	ldr	r1, [r7, #8]
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 f9f4 	bl	80033b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd4:	223f      	movs	r2, #63	@ 0x3f
 8002fd6:	409a      	lsls	r2, r3
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0216 	orr.w	r2, r2, #22
 8002fea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d007      	beq.n	8003004 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0208 	orr.w	r2, r2, #8
 8003002:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0201 	orr.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	e005      	b.n	8003022 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800301e:	2302      	movs	r3, #2
 8003020:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003022:	7dfb      	ldrb	r3, [r7, #23]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d004      	beq.n	800304a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2280      	movs	r2, #128	@ 0x80
 8003044:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e00c      	b.n	8003064 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2205      	movs	r2, #5
 800304e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0201 	bic.w	r2, r2, #1
 8003060:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800307c:	4b8e      	ldr	r3, [pc, #568]	@ (80032b8 <HAL_DMA_IRQHandler+0x248>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a8e      	ldr	r2, [pc, #568]	@ (80032bc <HAL_DMA_IRQHandler+0x24c>)
 8003082:	fba2 2303 	umull	r2, r3, r2, r3
 8003086:	0a9b      	lsrs	r3, r3, #10
 8003088:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800308e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800309a:	2208      	movs	r2, #8
 800309c:	409a      	lsls	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4013      	ands	r3, r2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d01a      	beq.n	80030dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d013      	beq.n	80030dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0204 	bic.w	r2, r2, #4
 80030c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c8:	2208      	movs	r2, #8
 80030ca:	409a      	lsls	r2, r3
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d4:	f043 0201 	orr.w	r2, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e0:	2201      	movs	r2, #1
 80030e2:	409a      	lsls	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4013      	ands	r3, r2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d012      	beq.n	8003112 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00b      	beq.n	8003112 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030fe:	2201      	movs	r2, #1
 8003100:	409a      	lsls	r2, r3
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800310a:	f043 0202 	orr.w	r2, r3, #2
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003116:	2204      	movs	r2, #4
 8003118:	409a      	lsls	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	4013      	ands	r3, r2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d012      	beq.n	8003148 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00b      	beq.n	8003148 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003134:	2204      	movs	r2, #4
 8003136:	409a      	lsls	r2, r3
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003140:	f043 0204 	orr.w	r2, r3, #4
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314c:	2210      	movs	r2, #16
 800314e:	409a      	lsls	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4013      	ands	r3, r2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d043      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b00      	cmp	r3, #0
 8003164:	d03c      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800316a:	2210      	movs	r2, #16
 800316c:	409a      	lsls	r2, r3
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d018      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d108      	bne.n	80031a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003192:	2b00      	cmp	r3, #0
 8003194:	d024      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	4798      	blx	r3
 800319e:	e01f      	b.n	80031e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d01b      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	4798      	blx	r3
 80031b0:	e016      	b.n	80031e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d107      	bne.n	80031d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0208 	bic.w	r2, r2, #8
 80031ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e4:	2220      	movs	r2, #32
 80031e6:	409a      	lsls	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4013      	ands	r3, r2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 808f 	beq.w	8003310 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0310 	and.w	r3, r3, #16
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 8087 	beq.w	8003310 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003206:	2220      	movs	r2, #32
 8003208:	409a      	lsls	r2, r3
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b05      	cmp	r3, #5
 8003218:	d136      	bne.n	8003288 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0216 	bic.w	r2, r2, #22
 8003228:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695a      	ldr	r2, [r3, #20]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003238:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323e:	2b00      	cmp	r3, #0
 8003240:	d103      	bne.n	800324a <HAL_DMA_IRQHandler+0x1da>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003246:	2b00      	cmp	r3, #0
 8003248:	d007      	beq.n	800325a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0208 	bic.w	r2, r2, #8
 8003258:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800325e:	223f      	movs	r2, #63	@ 0x3f
 8003260:	409a      	lsls	r2, r3
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800327a:	2b00      	cmp	r3, #0
 800327c:	d07e      	beq.n	800337c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	4798      	blx	r3
        }
        return;
 8003286:	e079      	b.n	800337c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d01d      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10d      	bne.n	80032c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d031      	beq.n	8003310 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	4798      	blx	r3
 80032b4:	e02c      	b.n	8003310 <HAL_DMA_IRQHandler+0x2a0>
 80032b6:	bf00      	nop
 80032b8:	20000004 	.word	0x20000004
 80032bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d023      	beq.n	8003310 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	4798      	blx	r3
 80032d0:	e01e      	b.n	8003310 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10f      	bne.n	8003300 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0210 	bic.w	r2, r2, #16
 80032ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003314:	2b00      	cmp	r3, #0
 8003316:	d032      	beq.n	800337e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b00      	cmp	r3, #0
 8003322:	d022      	beq.n	800336a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2205      	movs	r2, #5
 8003328:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0201 	bic.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	3301      	adds	r3, #1
 8003340:	60bb      	str	r3, [r7, #8]
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	429a      	cmp	r2, r3
 8003346:	d307      	bcc.n	8003358 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f2      	bne.n	800333c <HAL_DMA_IRQHandler+0x2cc>
 8003356:	e000      	b.n	800335a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003358:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800336e:	2b00      	cmp	r3, #0
 8003370:	d005      	beq.n	800337e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	4798      	blx	r3
 800337a:	e000      	b.n	800337e <HAL_DMA_IRQHandler+0x30e>
        return;
 800337c:	bf00      	nop
    }
  }
}
 800337e:	3718      	adds	r7, #24
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003392:	b2db      	uxtb	r3, r3
}
 8003394:	4618      	mov	r0, r3
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
 80033c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80033d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	2b40      	cmp	r3, #64	@ 0x40
 80033e4:	d108      	bne.n	80033f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033f6:	e007      	b.n	8003408 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	60da      	str	r2, [r3, #12]
}
 8003408:	bf00      	nop
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	3b10      	subs	r3, #16
 8003424:	4a14      	ldr	r2, [pc, #80]	@ (8003478 <DMA_CalcBaseAndBitshift+0x64>)
 8003426:	fba2 2303 	umull	r2, r3, r2, r3
 800342a:	091b      	lsrs	r3, r3, #4
 800342c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800342e:	4a13      	ldr	r2, [pc, #76]	@ (800347c <DMA_CalcBaseAndBitshift+0x68>)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4413      	add	r3, r2
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	461a      	mov	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2b03      	cmp	r3, #3
 8003440:	d909      	bls.n	8003456 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800344a:	f023 0303 	bic.w	r3, r3, #3
 800344e:	1d1a      	adds	r2, r3, #4
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	659a      	str	r2, [r3, #88]	@ 0x58
 8003454:	e007      	b.n	8003466 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800345e:	f023 0303 	bic.w	r3, r3, #3
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800346a:	4618      	mov	r0, r3
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	aaaaaaab 	.word	0xaaaaaaab
 800347c:	0800ee18 	.word	0x0800ee18

08003480 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003488:	2300      	movs	r3, #0
 800348a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003490:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d11f      	bne.n	80034da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2b03      	cmp	r3, #3
 800349e:	d856      	bhi.n	800354e <DMA_CheckFifoParam+0xce>
 80034a0:	a201      	add	r2, pc, #4	@ (adr r2, 80034a8 <DMA_CheckFifoParam+0x28>)
 80034a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a6:	bf00      	nop
 80034a8:	080034b9 	.word	0x080034b9
 80034ac:	080034cb 	.word	0x080034cb
 80034b0:	080034b9 	.word	0x080034b9
 80034b4:	0800354f 	.word	0x0800354f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d046      	beq.n	8003552 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034c8:	e043      	b.n	8003552 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80034d2:	d140      	bne.n	8003556 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034d8:	e03d      	b.n	8003556 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034e2:	d121      	bne.n	8003528 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2b03      	cmp	r3, #3
 80034e8:	d837      	bhi.n	800355a <DMA_CheckFifoParam+0xda>
 80034ea:	a201      	add	r2, pc, #4	@ (adr r2, 80034f0 <DMA_CheckFifoParam+0x70>)
 80034ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f0:	08003501 	.word	0x08003501
 80034f4:	08003507 	.word	0x08003507
 80034f8:	08003501 	.word	0x08003501
 80034fc:	08003519 	.word	0x08003519
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	73fb      	strb	r3, [r7, #15]
      break;
 8003504:	e030      	b.n	8003568 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d025      	beq.n	800355e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003516:	e022      	b.n	800355e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003520:	d11f      	bne.n	8003562 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003526:	e01c      	b.n	8003562 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2b02      	cmp	r3, #2
 800352c:	d903      	bls.n	8003536 <DMA_CheckFifoParam+0xb6>
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2b03      	cmp	r3, #3
 8003532:	d003      	beq.n	800353c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003534:	e018      	b.n	8003568 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	73fb      	strb	r3, [r7, #15]
      break;
 800353a:	e015      	b.n	8003568 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003540:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00e      	beq.n	8003566 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	73fb      	strb	r3, [r7, #15]
      break;
 800354c:	e00b      	b.n	8003566 <DMA_CheckFifoParam+0xe6>
      break;
 800354e:	bf00      	nop
 8003550:	e00a      	b.n	8003568 <DMA_CheckFifoParam+0xe8>
      break;
 8003552:	bf00      	nop
 8003554:	e008      	b.n	8003568 <DMA_CheckFifoParam+0xe8>
      break;
 8003556:	bf00      	nop
 8003558:	e006      	b.n	8003568 <DMA_CheckFifoParam+0xe8>
      break;
 800355a:	bf00      	nop
 800355c:	e004      	b.n	8003568 <DMA_CheckFifoParam+0xe8>
      break;
 800355e:	bf00      	nop
 8003560:	e002      	b.n	8003568 <DMA_CheckFifoParam+0xe8>
      break;   
 8003562:	bf00      	nop
 8003564:	e000      	b.n	8003568 <DMA_CheckFifoParam+0xe8>
      break;
 8003566:	bf00      	nop
    }
  } 
  
  return status; 
 8003568:	7bfb      	ldrb	r3, [r7, #15]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop

08003578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003578:	b480      	push	{r7}
 800357a:	b089      	sub	sp, #36	@ 0x24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003582:	2300      	movs	r3, #0
 8003584:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003586:	2300      	movs	r3, #0
 8003588:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800358a:	2300      	movs	r3, #0
 800358c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800358e:	2300      	movs	r3, #0
 8003590:	61fb      	str	r3, [r7, #28]
 8003592:	e159      	b.n	8003848 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003594:	2201      	movs	r2, #1
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	4013      	ands	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	f040 8148 	bne.w	8003842 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f003 0303 	and.w	r3, r3, #3
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d005      	beq.n	80035ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d130      	bne.n	800362c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	2203      	movs	r2, #3
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	43db      	mvns	r3, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4013      	ands	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003600:	2201      	movs	r2, #1
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	43db      	mvns	r3, r3
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4013      	ands	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	f003 0201 	and.w	r2, r3, #1
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4313      	orrs	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f003 0303 	and.w	r3, r3, #3
 8003634:	2b03      	cmp	r3, #3
 8003636:	d017      	beq.n	8003668 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	2203      	movs	r2, #3
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	43db      	mvns	r3, r3
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4013      	ands	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4313      	orrs	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f003 0303 	and.w	r3, r3, #3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d123      	bne.n	80036bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	08da      	lsrs	r2, r3, #3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3208      	adds	r2, #8
 800367c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003680:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	220f      	movs	r2, #15
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	43db      	mvns	r3, r3
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	4013      	ands	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	08da      	lsrs	r2, r3, #3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3208      	adds	r2, #8
 80036b6:	69b9      	ldr	r1, [r7, #24]
 80036b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	2203      	movs	r2, #3
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	43db      	mvns	r3, r3
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	4013      	ands	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 0203 	and.w	r2, r3, #3
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 80a2 	beq.w	8003842 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	4b57      	ldr	r3, [pc, #348]	@ (8003860 <HAL_GPIO_Init+0x2e8>)
 8003704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003706:	4a56      	ldr	r2, [pc, #344]	@ (8003860 <HAL_GPIO_Init+0x2e8>)
 8003708:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800370c:	6453      	str	r3, [r2, #68]	@ 0x44
 800370e:	4b54      	ldr	r3, [pc, #336]	@ (8003860 <HAL_GPIO_Init+0x2e8>)
 8003710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003712:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800371a:	4a52      	ldr	r2, [pc, #328]	@ (8003864 <HAL_GPIO_Init+0x2ec>)
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	089b      	lsrs	r3, r3, #2
 8003720:	3302      	adds	r3, #2
 8003722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003726:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	220f      	movs	r2, #15
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	43db      	mvns	r3, r3
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4013      	ands	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a49      	ldr	r2, [pc, #292]	@ (8003868 <HAL_GPIO_Init+0x2f0>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d019      	beq.n	800377a <HAL_GPIO_Init+0x202>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a48      	ldr	r2, [pc, #288]	@ (800386c <HAL_GPIO_Init+0x2f4>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d013      	beq.n	8003776 <HAL_GPIO_Init+0x1fe>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a47      	ldr	r2, [pc, #284]	@ (8003870 <HAL_GPIO_Init+0x2f8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d00d      	beq.n	8003772 <HAL_GPIO_Init+0x1fa>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a46      	ldr	r2, [pc, #280]	@ (8003874 <HAL_GPIO_Init+0x2fc>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d007      	beq.n	800376e <HAL_GPIO_Init+0x1f6>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a45      	ldr	r2, [pc, #276]	@ (8003878 <HAL_GPIO_Init+0x300>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d101      	bne.n	800376a <HAL_GPIO_Init+0x1f2>
 8003766:	2304      	movs	r3, #4
 8003768:	e008      	b.n	800377c <HAL_GPIO_Init+0x204>
 800376a:	2307      	movs	r3, #7
 800376c:	e006      	b.n	800377c <HAL_GPIO_Init+0x204>
 800376e:	2303      	movs	r3, #3
 8003770:	e004      	b.n	800377c <HAL_GPIO_Init+0x204>
 8003772:	2302      	movs	r3, #2
 8003774:	e002      	b.n	800377c <HAL_GPIO_Init+0x204>
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <HAL_GPIO_Init+0x204>
 800377a:	2300      	movs	r3, #0
 800377c:	69fa      	ldr	r2, [r7, #28]
 800377e:	f002 0203 	and.w	r2, r2, #3
 8003782:	0092      	lsls	r2, r2, #2
 8003784:	4093      	lsls	r3, r2
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4313      	orrs	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800378c:	4935      	ldr	r1, [pc, #212]	@ (8003864 <HAL_GPIO_Init+0x2ec>)
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	089b      	lsrs	r3, r3, #2
 8003792:	3302      	adds	r3, #2
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800379a:	4b38      	ldr	r3, [pc, #224]	@ (800387c <HAL_GPIO_Init+0x304>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	43db      	mvns	r3, r3
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4013      	ands	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037be:	4a2f      	ldr	r2, [pc, #188]	@ (800387c <HAL_GPIO_Init+0x304>)
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037c4:	4b2d      	ldr	r3, [pc, #180]	@ (800387c <HAL_GPIO_Init+0x304>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	43db      	mvns	r3, r3
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	4013      	ands	r3, r2
 80037d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d003      	beq.n	80037e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037e8:	4a24      	ldr	r2, [pc, #144]	@ (800387c <HAL_GPIO_Init+0x304>)
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037ee:	4b23      	ldr	r3, [pc, #140]	@ (800387c <HAL_GPIO_Init+0x304>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	43db      	mvns	r3, r3
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	4013      	ands	r3, r2
 80037fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	4313      	orrs	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003812:	4a1a      	ldr	r2, [pc, #104]	@ (800387c <HAL_GPIO_Init+0x304>)
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003818:	4b18      	ldr	r3, [pc, #96]	@ (800387c <HAL_GPIO_Init+0x304>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	43db      	mvns	r3, r3
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	4013      	ands	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d003      	beq.n	800383c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800383c:	4a0f      	ldr	r2, [pc, #60]	@ (800387c <HAL_GPIO_Init+0x304>)
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	3301      	adds	r3, #1
 8003846:	61fb      	str	r3, [r7, #28]
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	2b0f      	cmp	r3, #15
 800384c:	f67f aea2 	bls.w	8003594 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003850:	bf00      	nop
 8003852:	bf00      	nop
 8003854:	3724      	adds	r7, #36	@ 0x24
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	40023800 	.word	0x40023800
 8003864:	40013800 	.word	0x40013800
 8003868:	40020000 	.word	0x40020000
 800386c:	40020400 	.word	0x40020400
 8003870:	40020800 	.word	0x40020800
 8003874:	40020c00 	.word	0x40020c00
 8003878:	40021000 	.word	0x40021000
 800387c:	40013c00 	.word	0x40013c00

08003880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	807b      	strh	r3, [r7, #2]
 800388c:	4613      	mov	r3, r2
 800388e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003890:	787b      	ldrb	r3, [r7, #1]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003896:	887a      	ldrh	r2, [r7, #2]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800389c:	e003      	b.n	80038a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800389e:	887b      	ldrh	r3, [r7, #2]
 80038a0:	041a      	lsls	r2, r3, #16
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	619a      	str	r2, [r3, #24]
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b085      	sub	sp, #20
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
 80038ba:	460b      	mov	r3, r1
 80038bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038c4:	887a      	ldrh	r2, [r7, #2]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4013      	ands	r3, r2
 80038ca:	041a      	lsls	r2, r3, #16
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	43d9      	mvns	r1, r3
 80038d0:	887b      	ldrh	r3, [r7, #2]
 80038d2:	400b      	ands	r3, r1
 80038d4:	431a      	orrs	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	619a      	str	r2, [r3, #24]
}
 80038da:	bf00      	nop
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
	...

080038e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e12b      	b.n	8003b52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d106      	bne.n	8003914 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7fe fae8 	bl	8001ee4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2224      	movs	r2, #36	@ 0x24
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0201 	bic.w	r2, r2, #1
 800392a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800393a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800394a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800394c:	f005 f8f6 	bl	8008b3c <HAL_RCC_GetPCLK1Freq>
 8003950:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	4a81      	ldr	r2, [pc, #516]	@ (8003b5c <HAL_I2C_Init+0x274>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d807      	bhi.n	800396c <HAL_I2C_Init+0x84>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4a80      	ldr	r2, [pc, #512]	@ (8003b60 <HAL_I2C_Init+0x278>)
 8003960:	4293      	cmp	r3, r2
 8003962:	bf94      	ite	ls
 8003964:	2301      	movls	r3, #1
 8003966:	2300      	movhi	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	e006      	b.n	800397a <HAL_I2C_Init+0x92>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4a7d      	ldr	r2, [pc, #500]	@ (8003b64 <HAL_I2C_Init+0x27c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	bf94      	ite	ls
 8003974:	2301      	movls	r3, #1
 8003976:	2300      	movhi	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e0e7      	b.n	8003b52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4a78      	ldr	r2, [pc, #480]	@ (8003b68 <HAL_I2C_Init+0x280>)
 8003986:	fba2 2303 	umull	r2, r3, r2, r3
 800398a:	0c9b      	lsrs	r3, r3, #18
 800398c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	430a      	orrs	r2, r1
 80039a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	4a6a      	ldr	r2, [pc, #424]	@ (8003b5c <HAL_I2C_Init+0x274>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d802      	bhi.n	80039bc <HAL_I2C_Init+0xd4>
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	3301      	adds	r3, #1
 80039ba:	e009      	b.n	80039d0 <HAL_I2C_Init+0xe8>
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80039c2:	fb02 f303 	mul.w	r3, r2, r3
 80039c6:	4a69      	ldr	r2, [pc, #420]	@ (8003b6c <HAL_I2C_Init+0x284>)
 80039c8:	fba2 2303 	umull	r2, r3, r2, r3
 80039cc:	099b      	lsrs	r3, r3, #6
 80039ce:	3301      	adds	r3, #1
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	430b      	orrs	r3, r1
 80039d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80039e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	495c      	ldr	r1, [pc, #368]	@ (8003b5c <HAL_I2C_Init+0x274>)
 80039ec:	428b      	cmp	r3, r1
 80039ee:	d819      	bhi.n	8003a24 <HAL_I2C_Init+0x13c>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	1e59      	subs	r1, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80039fe:	1c59      	adds	r1, r3, #1
 8003a00:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a04:	400b      	ands	r3, r1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <HAL_I2C_Init+0x138>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1e59      	subs	r1, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a18:	3301      	adds	r3, #1
 8003a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1e:	e051      	b.n	8003ac4 <HAL_I2C_Init+0x1dc>
 8003a20:	2304      	movs	r3, #4
 8003a22:	e04f      	b.n	8003ac4 <HAL_I2C_Init+0x1dc>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d111      	bne.n	8003a50 <HAL_I2C_Init+0x168>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	1e58      	subs	r0, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6859      	ldr	r1, [r3, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	440b      	add	r3, r1
 8003a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a3e:	3301      	adds	r3, #1
 8003a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	bf0c      	ite	eq
 8003a48:	2301      	moveq	r3, #1
 8003a4a:	2300      	movne	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	e012      	b.n	8003a76 <HAL_I2C_Init+0x18e>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	1e58      	subs	r0, r3, #1
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6859      	ldr	r1, [r3, #4]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	0099      	lsls	r1, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a66:	3301      	adds	r3, #1
 8003a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	bf0c      	ite	eq
 8003a70:	2301      	moveq	r3, #1
 8003a72:	2300      	movne	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <HAL_I2C_Init+0x196>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e022      	b.n	8003ac4 <HAL_I2C_Init+0x1dc>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10e      	bne.n	8003aa4 <HAL_I2C_Init+0x1bc>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1e58      	subs	r0, r3, #1
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6859      	ldr	r1, [r3, #4]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	440b      	add	r3, r1
 8003a94:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a98:	3301      	adds	r3, #1
 8003a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003aa2:	e00f      	b.n	8003ac4 <HAL_I2C_Init+0x1dc>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	1e58      	subs	r0, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6859      	ldr	r1, [r3, #4]
 8003aac:	460b      	mov	r3, r1
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	0099      	lsls	r1, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aba:	3301      	adds	r3, #1
 8003abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	6809      	ldr	r1, [r1, #0]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69da      	ldr	r2, [r3, #28]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003af2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6911      	ldr	r1, [r2, #16]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	68d2      	ldr	r2, [r2, #12]
 8003afe:	4311      	orrs	r1, r2
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6812      	ldr	r2, [r2, #0]
 8003b04:	430b      	orrs	r3, r1
 8003b06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695a      	ldr	r2, [r3, #20]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0201 	orr.w	r2, r2, #1
 8003b32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	000186a0 	.word	0x000186a0
 8003b60:	001e847f 	.word	0x001e847f
 8003b64:	003d08ff 	.word	0x003d08ff
 8003b68:	431bde83 	.word	0x431bde83
 8003b6c:	10624dd3 	.word	0x10624dd3

08003b70 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b82:	2b80      	cmp	r3, #128	@ 0x80
 8003b84:	d103      	bne.n	8003b8e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	611a      	str	r2, [r3, #16]
  }
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
	...

08003b9c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af02      	add	r7, sp, #8
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	607a      	str	r2, [r7, #4]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	460b      	mov	r3, r1
 8003baa:	817b      	strh	r3, [r7, #10]
 8003bac:	4613      	mov	r3, r2
 8003bae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bb0:	f7fe fc54 	bl	800245c <HAL_GetTick>
 8003bb4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b20      	cmp	r3, #32
 8003bc0:	f040 80e0 	bne.w	8003d84 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	2319      	movs	r3, #25
 8003bca:	2201      	movs	r2, #1
 8003bcc:	4970      	ldr	r1, [pc, #448]	@ (8003d90 <HAL_I2C_Master_Transmit+0x1f4>)
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f002 feae 	bl	8006930 <I2C_WaitOnFlagUntilTimeout>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003bda:	2302      	movs	r3, #2
 8003bdc:	e0d3      	b.n	8003d86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d101      	bne.n	8003bec <HAL_I2C_Master_Transmit+0x50>
 8003be8:	2302      	movs	r3, #2
 8003bea:	e0cc      	b.n	8003d86 <HAL_I2C_Master_Transmit+0x1ea>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d007      	beq.n	8003c12 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f042 0201 	orr.w	r2, r2, #1
 8003c10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2221      	movs	r2, #33	@ 0x21
 8003c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2210      	movs	r2, #16
 8003c2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	893a      	ldrh	r2, [r7, #8]
 8003c42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4a50      	ldr	r2, [pc, #320]	@ (8003d94 <HAL_I2C_Master_Transmit+0x1f8>)
 8003c52:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c54:	8979      	ldrh	r1, [r7, #10]
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	6a3a      	ldr	r2, [r7, #32]
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f002 faa4 	bl	80061a8 <I2C_MasterRequestWrite>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e08d      	b.n	8003d86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	613b      	str	r3, [r7, #16]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	613b      	str	r3, [r7, #16]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	613b      	str	r3, [r7, #16]
 8003c7e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c80:	e066      	b.n	8003d50 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	6a39      	ldr	r1, [r7, #32]
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f002 ff6c 	bl	8006b64 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00d      	beq.n	8003cae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d107      	bne.n	8003caa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ca8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e06b      	b.n	8003d86 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb2:	781a      	ldrb	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d11b      	bne.n	8003d24 <HAL_I2C_Master_Transmit+0x188>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d017      	beq.n	8003d24 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf8:	781a      	ldrb	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	6a39      	ldr	r1, [r7, #32]
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f002 ff63 	bl	8006bf4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00d      	beq.n	8003d50 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d107      	bne.n	8003d4c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d4a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e01a      	b.n	8003d86 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d194      	bne.n	8003c82 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d80:	2300      	movs	r3, #0
 8003d82:	e000      	b.n	8003d86 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d84:	2302      	movs	r3, #2
  }
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	00100002 	.word	0x00100002
 8003d94:	ffff0000 	.word	0xffff0000

08003d98 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b088      	sub	sp, #32
 8003d9c:	af02      	add	r7, sp, #8
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	4608      	mov	r0, r1
 8003da2:	4611      	mov	r1, r2
 8003da4:	461a      	mov	r2, r3
 8003da6:	4603      	mov	r3, r0
 8003da8:	817b      	strh	r3, [r7, #10]
 8003daa:	460b      	mov	r3, r1
 8003dac:	813b      	strh	r3, [r7, #8]
 8003dae:	4613      	mov	r3, r2
 8003db0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003db2:	f7fe fb53 	bl	800245c <HAL_GetTick>
 8003db6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b20      	cmp	r3, #32
 8003dc2:	f040 80d9 	bne.w	8003f78 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	2319      	movs	r3, #25
 8003dcc:	2201      	movs	r2, #1
 8003dce:	496d      	ldr	r1, [pc, #436]	@ (8003f84 <HAL_I2C_Mem_Write+0x1ec>)
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f002 fdad 	bl	8006930 <I2C_WaitOnFlagUntilTimeout>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003ddc:	2302      	movs	r3, #2
 8003dde:	e0cc      	b.n	8003f7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d101      	bne.n	8003dee <HAL_I2C_Mem_Write+0x56>
 8003dea:	2302      	movs	r3, #2
 8003dec:	e0c5      	b.n	8003f7a <HAL_I2C_Mem_Write+0x1e2>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d007      	beq.n	8003e14 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0201 	orr.w	r2, r2, #1
 8003e12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2221      	movs	r2, #33	@ 0x21
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2240      	movs	r2, #64	@ 0x40
 8003e30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6a3a      	ldr	r2, [r7, #32]
 8003e3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003e44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4a4d      	ldr	r2, [pc, #308]	@ (8003f88 <HAL_I2C_Mem_Write+0x1f0>)
 8003e54:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e56:	88f8      	ldrh	r0, [r7, #6]
 8003e58:	893a      	ldrh	r2, [r7, #8]
 8003e5a:	8979      	ldrh	r1, [r7, #10]
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	9301      	str	r3, [sp, #4]
 8003e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	4603      	mov	r3, r0
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f002 fa20 	bl	80062ac <I2C_RequestMemoryWrite>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d052      	beq.n	8003f18 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e081      	b.n	8003f7a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f002 fe72 	bl	8006b64 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00d      	beq.n	8003ea2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d107      	bne.n	8003e9e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e06b      	b.n	8003f7a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea6:	781a      	ldrb	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	2b04      	cmp	r3, #4
 8003ede:	d11b      	bne.n	8003f18 <HAL_I2C_Mem_Write+0x180>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d017      	beq.n	8003f18 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eec:	781a      	ldrb	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f02:	3b01      	subs	r3, #1
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1aa      	bne.n	8003e76 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f002 fe65 	bl	8006bf4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00d      	beq.n	8003f4c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f34:	2b04      	cmp	r3, #4
 8003f36:	d107      	bne.n	8003f48 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f46:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e016      	b.n	8003f7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f74:	2300      	movs	r3, #0
 8003f76:	e000      	b.n	8003f7a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f78:	2302      	movs	r3, #2
  }
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	00100002 	.word	0x00100002
 8003f88:	ffff0000 	.word	0xffff0000

08003f8c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b08c      	sub	sp, #48	@ 0x30
 8003f90:	af02      	add	r7, sp, #8
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	4608      	mov	r0, r1
 8003f96:	4611      	mov	r1, r2
 8003f98:	461a      	mov	r2, r3
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	817b      	strh	r3, [r7, #10]
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	813b      	strh	r3, [r7, #8]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fa6:	f7fe fa59 	bl	800245c <HAL_GetTick>
 8003faa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b20      	cmp	r3, #32
 8003fb6:	f040 8214 	bne.w	80043e2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	2319      	movs	r3, #25
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	497b      	ldr	r1, [pc, #492]	@ (80041b0 <HAL_I2C_Mem_Read+0x224>)
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f002 fcb3 	bl	8006930 <I2C_WaitOnFlagUntilTimeout>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e207      	b.n	80043e4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d101      	bne.n	8003fe2 <HAL_I2C_Mem_Read+0x56>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	e200      	b.n	80043e4 <HAL_I2C_Mem_Read+0x458>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d007      	beq.n	8004008 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0201 	orr.w	r2, r2, #1
 8004006:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004016:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2222      	movs	r2, #34	@ 0x22
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2240      	movs	r2, #64	@ 0x40
 8004024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004032:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004038:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800403e:	b29a      	uxth	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4a5b      	ldr	r2, [pc, #364]	@ (80041b4 <HAL_I2C_Mem_Read+0x228>)
 8004048:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800404a:	88f8      	ldrh	r0, [r7, #6]
 800404c:	893a      	ldrh	r2, [r7, #8]
 800404e:	8979      	ldrh	r1, [r7, #10]
 8004050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004052:	9301      	str	r3, [sp, #4]
 8004054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	4603      	mov	r3, r0
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f002 f9bc 	bl	80063d8 <I2C_RequestMemoryRead>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e1bc      	b.n	80043e4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800406e:	2b00      	cmp	r3, #0
 8004070:	d113      	bne.n	800409a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004072:	2300      	movs	r3, #0
 8004074:	623b      	str	r3, [r7, #32]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	623b      	str	r3, [r7, #32]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	623b      	str	r3, [r7, #32]
 8004086:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	e190      	b.n	80043bc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d11b      	bne.n	80040da <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b2:	2300      	movs	r3, #0
 80040b4:	61fb      	str	r3, [r7, #28]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	61fb      	str	r3, [r7, #28]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	61fb      	str	r3, [r7, #28]
 80040c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	e170      	b.n	80043bc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d11b      	bne.n	800411a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004100:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004102:	2300      	movs	r3, #0
 8004104:	61bb      	str	r3, [r7, #24]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	61bb      	str	r3, [r7, #24]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	61bb      	str	r3, [r7, #24]
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	e150      	b.n	80043bc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800411a:	2300      	movs	r3, #0
 800411c:	617b      	str	r3, [r7, #20]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	617b      	str	r3, [r7, #20]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004130:	e144      	b.n	80043bc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004136:	2b03      	cmp	r3, #3
 8004138:	f200 80f1 	bhi.w	800431e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004140:	2b01      	cmp	r3, #1
 8004142:	d123      	bne.n	800418c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004144:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004146:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f002 fdcd 	bl	8006ce8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e145      	b.n	80043e4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	691a      	ldr	r2, [r3, #16]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004162:	b2d2      	uxtb	r2, r2
 8004164:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416a:	1c5a      	adds	r2, r3, #1
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004180:	b29b      	uxth	r3, r3
 8004182:	3b01      	subs	r3, #1
 8004184:	b29a      	uxth	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800418a:	e117      	b.n	80043bc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004190:	2b02      	cmp	r3, #2
 8004192:	d14e      	bne.n	8004232 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800419a:	2200      	movs	r2, #0
 800419c:	4906      	ldr	r1, [pc, #24]	@ (80041b8 <HAL_I2C_Mem_Read+0x22c>)
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f002 fbc6 	bl	8006930 <I2C_WaitOnFlagUntilTimeout>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d008      	beq.n	80041bc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e11a      	b.n	80043e4 <HAL_I2C_Mem_Read+0x458>
 80041ae:	bf00      	nop
 80041b0:	00100002 	.word	0x00100002
 80041b4:	ffff0000 	.word	0xffff0000
 80041b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	691a      	ldr	r2, [r3, #16]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e8:	3b01      	subs	r3, #1
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	691a      	ldr	r2, [r3, #16]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800421a:	3b01      	subs	r3, #1
 800421c:	b29a      	uxth	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004226:	b29b      	uxth	r3, r3
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004230:	e0c4      	b.n	80043bc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004238:	2200      	movs	r2, #0
 800423a:	496c      	ldr	r1, [pc, #432]	@ (80043ec <HAL_I2C_Mem_Read+0x460>)
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f002 fb77 	bl	8006930 <I2C_WaitOnFlagUntilTimeout>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e0cb      	b.n	80043e4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800425a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	691a      	ldr	r2, [r3, #16]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426e:	1c5a      	adds	r2, r3, #1
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004278:	3b01      	subs	r3, #1
 800427a:	b29a      	uxth	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004284:	b29b      	uxth	r3, r3
 8004286:	3b01      	subs	r3, #1
 8004288:	b29a      	uxth	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800428e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004294:	2200      	movs	r2, #0
 8004296:	4955      	ldr	r1, [pc, #340]	@ (80043ec <HAL_I2C_Mem_Read+0x460>)
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f002 fb49 	bl	8006930 <I2C_WaitOnFlagUntilTimeout>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e09d      	b.n	80043e4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	691a      	ldr	r2, [r3, #16]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c2:	b2d2      	uxtb	r2, r2
 80042c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ca:	1c5a      	adds	r2, r3, #1
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	3b01      	subs	r3, #1
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f4:	b2d2      	uxtb	r2, r2
 80042f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fc:	1c5a      	adds	r2, r3, #1
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004306:	3b01      	subs	r3, #1
 8004308:	b29a      	uxth	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004312:	b29b      	uxth	r3, r3
 8004314:	3b01      	subs	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800431c:	e04e      	b.n	80043bc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800431e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004320:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f002 fce0 	bl	8006ce8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e058      	b.n	80043e4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433c:	b2d2      	uxtb	r2, r2
 800433e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800434e:	3b01      	subs	r3, #1
 8004350:	b29a      	uxth	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800435a:	b29b      	uxth	r3, r3
 800435c:	3b01      	subs	r3, #1
 800435e:	b29a      	uxth	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	f003 0304 	and.w	r3, r3, #4
 800436e:	2b04      	cmp	r3, #4
 8004370:	d124      	bne.n	80043bc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004376:	2b03      	cmp	r3, #3
 8004378:	d107      	bne.n	800438a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004388:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	691a      	ldr	r2, [r3, #16]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004394:	b2d2      	uxtb	r2, r2
 8004396:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f47f aeb6 	bne.w	8004132 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	e000      	b.n	80043e4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80043e2:	2302      	movs	r3, #2
  }
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3728      	adds	r7, #40	@ 0x28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	00010004 	.word	0x00010004

080043f0 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b08a      	sub	sp, #40	@ 0x28
 80043f4:	af02      	add	r7, sp, #8
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	4608      	mov	r0, r1
 80043fa:	4611      	mov	r1, r2
 80043fc:	461a      	mov	r2, r3
 80043fe:	4603      	mov	r3, r0
 8004400:	817b      	strh	r3, [r7, #10]
 8004402:	460b      	mov	r3, r1
 8004404:	813b      	strh	r3, [r7, #8]
 8004406:	4613      	mov	r3, r2
 8004408:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800440e:	f7fe f825 	bl	800245c <HAL_GetTick>
 8004412:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b20      	cmp	r3, #32
 800441e:	f040 8136 	bne.w	800468e <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004422:	4b9d      	ldr	r3, [pc, #628]	@ (8004698 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	08db      	lsrs	r3, r3, #3
 8004428:	4a9c      	ldr	r2, [pc, #624]	@ (800469c <HAL_I2C_Mem_Write_DMA+0x2ac>)
 800442a:	fba2 2303 	umull	r2, r3, r2, r3
 800442e:	0a1a      	lsrs	r2, r3, #8
 8004430:	4613      	mov	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	009a      	lsls	r2, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	3b01      	subs	r3, #1
 8004440:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d112      	bne.n	800446e <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2220      	movs	r2, #32
 8004452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004462:	f043 0220 	orr.w	r2, r3, #32
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800446a:	2302      	movs	r3, #2
 800446c:	e110      	b.n	8004690 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b02      	cmp	r3, #2
 800447a:	d0df      	beq.n	800443c <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004482:	2b01      	cmp	r3, #1
 8004484:	d101      	bne.n	800448a <HAL_I2C_Mem_Write_DMA+0x9a>
 8004486:	2302      	movs	r3, #2
 8004488:	e102      	b.n	8004690 <HAL_I2C_Mem_Write_DMA+0x2a0>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b01      	cmp	r3, #1
 800449e:	d007      	beq.n	80044b0 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f042 0201 	orr.w	r2, r2, #1
 80044ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2221      	movs	r2, #33	@ 0x21
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2240      	movs	r2, #64	@ 0x40
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80044e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4a6c      	ldr	r2, [pc, #432]	@ (80046a0 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 80044f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80044f2:	897a      	ldrh	r2, [r7, #10]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80044f8:	893a      	ldrh	r2, [r7, #8]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80044fe:	88fa      	ldrh	r2, [r7, #6]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 80a9 	beq.w	8004666 <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004518:	2b00      	cmp	r3, #0
 800451a:	d02a      	beq.n	8004572 <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004520:	4a60      	ldr	r2, [pc, #384]	@ (80046a4 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8004522:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004528:	4a5f      	ldr	r2, [pc, #380]	@ (80046a8 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 800452a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004530:	2200      	movs	r2, #0
 8004532:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004538:	2200      	movs	r2, #0
 800453a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004540:	2200      	movs	r2, #0
 8004542:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004548:	2200      	movs	r2, #0
 800454a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004554:	4619      	mov	r1, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	3310      	adds	r3, #16
 800455c:	461a      	mov	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004562:	f7fe fd0b 	bl	8002f7c <HAL_DMA_Start_IT>
 8004566:	4603      	mov	r3, r0
 8004568:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800456a:	7efb      	ldrb	r3, [r7, #27]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d166      	bne.n	800463e <HAL_I2C_Mem_Write_DMA+0x24e>
 8004570:	e013      	b.n	800459a <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2220      	movs	r2, #32
 8004576:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004586:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e07a      	b.n	8004690 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800459a:	88f8      	ldrh	r0, [r7, #6]
 800459c:	893a      	ldrh	r2, [r7, #8]
 800459e:	8979      	ldrh	r1, [r7, #10]
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	9301      	str	r3, [sp, #4]
 80045a4:	2323      	movs	r3, #35	@ 0x23
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	4603      	mov	r3, r0
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f001 fe7e 	bl	80062ac <I2C_RequestMemoryWrite>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d022      	beq.n	80045fc <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fe fd36 	bl	800302c <HAL_DMA_Abort_IT>
 80045c0:	4603      	mov	r3, r0
 80045c2:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c8:	2200      	movs	r2, #0
 80045ca:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045da:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 0201 	bic.w	r2, r2, #1
 80045f6:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e049      	b.n	8004690 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045fc:	2300      	movs	r3, #0
 80045fe:	613b      	str	r3, [r7, #16]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	613b      	str	r3, [r7, #16]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	613b      	str	r3, [r7, #16]
 8004610:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004628:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004638:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	e028      	b.n	8004690 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2220      	movs	r2, #32
 8004642:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004652:	f043 0210 	orr.w	r2, r3, #16
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e014      	b.n	8004690 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e000      	b.n	8004690 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 800468e:	2302      	movs	r3, #2
  }
}
 8004690:	4618      	mov	r0, r3
 8004692:	3720      	adds	r7, #32
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	20000004 	.word	0x20000004
 800469c:	14f8b589 	.word	0x14f8b589
 80046a0:	ffff0000 	.word	0xffff0000
 80046a4:	080065a9 	.word	0x080065a9
 80046a8:	08006767 	.word	0x08006767

080046ac <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b08c      	sub	sp, #48	@ 0x30
 80046b0:	af02      	add	r7, sp, #8
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	4608      	mov	r0, r1
 80046b6:	4611      	mov	r1, r2
 80046b8:	461a      	mov	r2, r3
 80046ba:	4603      	mov	r3, r0
 80046bc:	817b      	strh	r3, [r7, #10]
 80046be:	460b      	mov	r3, r1
 80046c0:	813b      	strh	r3, [r7, #8]
 80046c2:	4613      	mov	r3, r2
 80046c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046c6:	f7fd fec9 	bl	800245c <HAL_GetTick>
 80046ca:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b20      	cmp	r3, #32
 80046da:	f040 8172 	bne.w	80049c2 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80046de:	4b93      	ldr	r3, [pc, #588]	@ (800492c <HAL_I2C_Mem_Read_DMA+0x280>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	08db      	lsrs	r3, r3, #3
 80046e4:	4a92      	ldr	r2, [pc, #584]	@ (8004930 <HAL_I2C_Mem_Read_DMA+0x284>)
 80046e6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ea:	0a1a      	lsrs	r2, r3, #8
 80046ec:	4613      	mov	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	009a      	lsls	r2, r3, #2
 80046f4:	4413      	add	r3, r2
 80046f6:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d112      	bne.n	800472a <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2220      	movs	r2, #32
 800470e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471e:	f043 0220 	orr.w	r2, r3, #32
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8004726:	2302      	movs	r3, #2
 8004728:	e14c      	b.n	80049c4 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b02      	cmp	r3, #2
 8004736:	d0df      	beq.n	80046f8 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800473e:	2b01      	cmp	r3, #1
 8004740:	d101      	bne.n	8004746 <HAL_I2C_Mem_Read_DMA+0x9a>
 8004742:	2302      	movs	r3, #2
 8004744:	e13e      	b.n	80049c4 <HAL_I2C_Mem_Read_DMA+0x318>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b01      	cmp	r3, #1
 800475a:	d007      	beq.n	800476c <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0201 	orr.w	r2, r2, #1
 800476a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800477a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2222      	movs	r2, #34	@ 0x22
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2240      	movs	r2, #64	@ 0x40
 8004788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004796:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800479c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4a62      	ldr	r2, [pc, #392]	@ (8004934 <HAL_I2C_Mem_Read_DMA+0x288>)
 80047ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80047ae:	897a      	ldrh	r2, [r7, #10]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80047b4:	893a      	ldrh	r2, [r7, #8]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80047ba:	88fa      	ldrh	r2, [r7, #6]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 80cc 	beq.w	8004968 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d02d      	beq.n	8004834 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047dc:	4a56      	ldr	r2, [pc, #344]	@ (8004938 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80047de:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e4:	4a55      	ldr	r2, [pc, #340]	@ (800493c <HAL_I2C_Mem_Read_DMA+0x290>)
 80047e6:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ec:	2200      	movs	r2, #0
 80047ee:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f4:	2200      	movs	r2, #0
 80047f6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047fc:	2200      	movs	r2, #0
 80047fe:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004804:	2200      	movs	r2, #0
 8004806:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	3310      	adds	r3, #16
 8004812:	4619      	mov	r1, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004818:	461a      	mov	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800481e:	f7fe fbad 	bl	8002f7c <HAL_DMA_Start_IT>
 8004822:	4603      	mov	r3, r0
 8004824:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004828:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800482c:	2b00      	cmp	r3, #0
 800482e:	f040 8087 	bne.w	8004940 <HAL_I2C_Mem_Read_DMA+0x294>
 8004832:	e013      	b.n	800485c <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2220      	movs	r2, #32
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004848:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e0b3      	b.n	80049c4 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800485c:	88f8      	ldrh	r0, [r7, #6]
 800485e:	893a      	ldrh	r2, [r7, #8]
 8004860:	8979      	ldrh	r1, [r7, #10]
 8004862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004864:	9301      	str	r3, [sp, #4]
 8004866:	2323      	movs	r3, #35	@ 0x23
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	4603      	mov	r3, r0
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f001 fdb3 	bl	80063d8 <I2C_RequestMemoryRead>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d023      	beq.n	80048c0 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800487c:	4618      	mov	r0, r3
 800487e:	f7fe fbd5 	bl	800302c <HAL_DMA_Abort_IT>
 8004882:	4603      	mov	r3, r0
 8004884:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800488c:	2200      	movs	r2, #0
 800488e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800489e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 0201 	bic.w	r2, r2, #1
 80048ba:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e081      	b.n	80049c4 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d108      	bne.n	80048da <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	e007      	b.n	80048ea <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80048e8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ea:	2300      	movs	r3, #0
 80048ec:	61bb      	str	r3, [r7, #24]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	61bb      	str	r3, [r7, #24]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	61bb      	str	r3, [r7, #24]
 80048fe:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004916:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004926:	605a      	str	r2, [r3, #4]
 8004928:	e049      	b.n	80049be <HAL_I2C_Mem_Read_DMA+0x312>
 800492a:	bf00      	nop
 800492c:	20000004 	.word	0x20000004
 8004930:	14f8b589 	.word	0x14f8b589
 8004934:	ffff0000 	.word	0xffff0000
 8004938:	080065a9 	.word	0x080065a9
 800493c:	08006767 	.word	0x08006767
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2220      	movs	r2, #32
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004954:	f043 0210 	orr.w	r2, r3, #16
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e02d      	b.n	80049c4 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004968:	88f8      	ldrh	r0, [r7, #6]
 800496a:	893a      	ldrh	r2, [r7, #8]
 800496c:	8979      	ldrh	r1, [r7, #10]
 800496e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004970:	9301      	str	r3, [sp, #4]
 8004972:	2323      	movs	r3, #35	@ 0x23
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	4603      	mov	r3, r0
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f001 fd2d 	bl	80063d8 <I2C_RequestMemoryRead>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e01d      	b.n	80049c4 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004988:	2300      	movs	r3, #0
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	617b      	str	r3, [r7, #20]
 800499c:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049ac:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2220      	movs	r2, #32
 80049b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 80049be:	2300      	movs	r3, #0
 80049c0:	e000      	b.n	80049c4 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 80049c2:	2302      	movs	r3, #2
  }
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3728      	adds	r7, #40	@ 0x28
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b088      	sub	sp, #32
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049ec:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049f4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
 80049f8:	2b10      	cmp	r3, #16
 80049fa:	d003      	beq.n	8004a04 <HAL_I2C_EV_IRQHandler+0x38>
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
 80049fe:	2b40      	cmp	r3, #64	@ 0x40
 8004a00:	f040 80c1 	bne.w	8004b86 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10d      	bne.n	8004a3a <HAL_I2C_EV_IRQHandler+0x6e>
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004a24:	d003      	beq.n	8004a2e <HAL_I2C_EV_IRQHandler+0x62>
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004a2c:	d101      	bne.n	8004a32 <HAL_I2C_EV_IRQHandler+0x66>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e000      	b.n	8004a34 <HAL_I2C_EV_IRQHandler+0x68>
 8004a32:	2300      	movs	r3, #0
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	f000 8132 	beq.w	8004c9e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00c      	beq.n	8004a5e <HAL_I2C_EV_IRQHandler+0x92>
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	0a5b      	lsrs	r3, r3, #9
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d006      	beq.n	8004a5e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f002 f9d5 	bl	8006e00 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fd87 	bl	800556a <I2C_Master_SB>
 8004a5c:	e092      	b.n	8004b84 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	08db      	lsrs	r3, r3, #3
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d009      	beq.n	8004a7e <HAL_I2C_EV_IRQHandler+0xb2>
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	0a5b      	lsrs	r3, r3, #9
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 fdfd 	bl	8005676 <I2C_Master_ADD10>
 8004a7c:	e082      	b.n	8004b84 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	085b      	lsrs	r3, r3, #1
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d009      	beq.n	8004a9e <HAL_I2C_EV_IRQHandler+0xd2>
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	0a5b      	lsrs	r3, r3, #9
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 fe17 	bl	80056ca <I2C_Master_ADDR>
 8004a9c:	e072      	b.n	8004b84 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	089b      	lsrs	r3, r3, #2
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d03b      	beq.n	8004b22 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ab4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ab8:	f000 80f3 	beq.w	8004ca2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	09db      	lsrs	r3, r3, #7
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00f      	beq.n	8004ae8 <HAL_I2C_EV_IRQHandler+0x11c>
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	0a9b      	lsrs	r3, r3, #10
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d009      	beq.n	8004ae8 <HAL_I2C_EV_IRQHandler+0x11c>
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	089b      	lsrs	r3, r3, #2
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d103      	bne.n	8004ae8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f9df 	bl	8004ea4 <I2C_MasterTransmit_TXE>
 8004ae6:	e04d      	b.n	8004b84 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	089b      	lsrs	r3, r3, #2
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 80d6 	beq.w	8004ca2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	0a5b      	lsrs	r3, r3, #9
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f000 80cf 	beq.w	8004ca2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004b04:	7bbb      	ldrb	r3, [r7, #14]
 8004b06:	2b21      	cmp	r3, #33	@ 0x21
 8004b08:	d103      	bne.n	8004b12 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 fa66 	bl	8004fdc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b10:	e0c7      	b.n	8004ca2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004b12:	7bfb      	ldrb	r3, [r7, #15]
 8004b14:	2b40      	cmp	r3, #64	@ 0x40
 8004b16:	f040 80c4 	bne.w	8004ca2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 fad4 	bl	80050c8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b20:	e0bf      	b.n	8004ca2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b30:	f000 80b7 	beq.w	8004ca2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	099b      	lsrs	r3, r3, #6
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00f      	beq.n	8004b60 <HAL_I2C_EV_IRQHandler+0x194>
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	0a9b      	lsrs	r3, r3, #10
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d009      	beq.n	8004b60 <HAL_I2C_EV_IRQHandler+0x194>
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	089b      	lsrs	r3, r3, #2
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d103      	bne.n	8004b60 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 fb4d 	bl	80051f8 <I2C_MasterReceive_RXNE>
 8004b5e:	e011      	b.n	8004b84 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	089b      	lsrs	r3, r3, #2
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 809a 	beq.w	8004ca2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	0a5b      	lsrs	r3, r3, #9
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f000 8093 	beq.w	8004ca2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 fc03 	bl	8005388 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b82:	e08e      	b.n	8004ca2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004b84:	e08d      	b.n	8004ca2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d004      	beq.n	8004b98 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	61fb      	str	r3, [r7, #28]
 8004b96:	e007      	b.n	8004ba8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	085b      	lsrs	r3, r3, #1
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d012      	beq.n	8004bda <HAL_I2C_EV_IRQHandler+0x20e>
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	0a5b      	lsrs	r3, r3, #9
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00c      	beq.n	8004bda <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d003      	beq.n	8004bd0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004bd0:	69b9      	ldr	r1, [r7, #24]
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 ffc8 	bl	8005b68 <I2C_Slave_ADDR>
 8004bd8:	e066      	b.n	8004ca8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	091b      	lsrs	r3, r3, #4
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d009      	beq.n	8004bfa <HAL_I2C_EV_IRQHandler+0x22e>
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	0a5b      	lsrs	r3, r3, #9
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f001 f802 	bl	8005bfc <I2C_Slave_STOPF>
 8004bf8:	e056      	b.n	8004ca8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004bfa:	7bbb      	ldrb	r3, [r7, #14]
 8004bfc:	2b21      	cmp	r3, #33	@ 0x21
 8004bfe:	d002      	beq.n	8004c06 <HAL_I2C_EV_IRQHandler+0x23a>
 8004c00:	7bbb      	ldrb	r3, [r7, #14]
 8004c02:	2b29      	cmp	r3, #41	@ 0x29
 8004c04:	d125      	bne.n	8004c52 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	09db      	lsrs	r3, r3, #7
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00f      	beq.n	8004c32 <HAL_I2C_EV_IRQHandler+0x266>
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	0a9b      	lsrs	r3, r3, #10
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d009      	beq.n	8004c32 <HAL_I2C_EV_IRQHandler+0x266>
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	089b      	lsrs	r3, r3, #2
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d103      	bne.n	8004c32 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 fede 	bl	80059ec <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c30:	e039      	b.n	8004ca6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	089b      	lsrs	r3, r3, #2
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d033      	beq.n	8004ca6 <HAL_I2C_EV_IRQHandler+0x2da>
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	0a5b      	lsrs	r3, r3, #9
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d02d      	beq.n	8004ca6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 ff0b 	bl	8005a66 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c50:	e029      	b.n	8004ca6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	099b      	lsrs	r3, r3, #6
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00f      	beq.n	8004c7e <HAL_I2C_EV_IRQHandler+0x2b2>
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	0a9b      	lsrs	r3, r3, #10
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d009      	beq.n	8004c7e <HAL_I2C_EV_IRQHandler+0x2b2>
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	089b      	lsrs	r3, r3, #2
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d103      	bne.n	8004c7e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 ff16 	bl	8005aa8 <I2C_SlaveReceive_RXNE>
 8004c7c:	e014      	b.n	8004ca8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	089b      	lsrs	r3, r3, #2
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00e      	beq.n	8004ca8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	0a5b      	lsrs	r3, r3, #9
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d008      	beq.n	8004ca8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 ff44 	bl	8005b24 <I2C_SlaveReceive_BTF>
 8004c9c:	e004      	b.n	8004ca8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004c9e:	bf00      	nop
 8004ca0:	e002      	b.n	8004ca8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ca2:	bf00      	nop
 8004ca4:	e000      	b.n	8004ca8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ca6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004ca8:	3720      	adds	r7, #32
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b08a      	sub	sp, #40	@ 0x28
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004cd0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	0a1b      	lsrs	r3, r3, #8
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00e      	beq.n	8004cfc <HAL_I2C_ER_IRQHandler+0x4e>
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	0a1b      	lsrs	r3, r3, #8
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d008      	beq.n	8004cfc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cec:	f043 0301 	orr.w	r3, r3, #1
 8004cf0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004cfa:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	0a5b      	lsrs	r3, r3, #9
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00e      	beq.n	8004d26 <HAL_I2C_ER_IRQHandler+0x78>
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	0a1b      	lsrs	r3, r3, #8
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d008      	beq.n	8004d26 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d16:	f043 0302 	orr.w	r3, r3, #2
 8004d1a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8004d24:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d26:	6a3b      	ldr	r3, [r7, #32]
 8004d28:	0a9b      	lsrs	r3, r3, #10
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d03f      	beq.n	8004db2 <HAL_I2C_ER_IRQHandler+0x104>
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	0a1b      	lsrs	r3, r3, #8
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d039      	beq.n	8004db2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004d3e:	7efb      	ldrb	r3, [r7, #27]
 8004d40:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d50:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d56:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004d58:	7ebb      	ldrb	r3, [r7, #26]
 8004d5a:	2b20      	cmp	r3, #32
 8004d5c:	d112      	bne.n	8004d84 <HAL_I2C_ER_IRQHandler+0xd6>
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d10f      	bne.n	8004d84 <HAL_I2C_ER_IRQHandler+0xd6>
 8004d64:	7cfb      	ldrb	r3, [r7, #19]
 8004d66:	2b21      	cmp	r3, #33	@ 0x21
 8004d68:	d008      	beq.n	8004d7c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004d6a:	7cfb      	ldrb	r3, [r7, #19]
 8004d6c:	2b29      	cmp	r3, #41	@ 0x29
 8004d6e:	d005      	beq.n	8004d7c <HAL_I2C_ER_IRQHandler+0xce>
 8004d70:	7cfb      	ldrb	r3, [r7, #19]
 8004d72:	2b28      	cmp	r3, #40	@ 0x28
 8004d74:	d106      	bne.n	8004d84 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2b21      	cmp	r3, #33	@ 0x21
 8004d7a:	d103      	bne.n	8004d84 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f001 f86d 	bl	8005e5c <I2C_Slave_AF>
 8004d82:	e016      	b.n	8004db2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d8c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d90:	f043 0304 	orr.w	r3, r3, #4
 8004d94:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004d96:	7efb      	ldrb	r3, [r7, #27]
 8004d98:	2b10      	cmp	r3, #16
 8004d9a:	d002      	beq.n	8004da2 <HAL_I2C_ER_IRQHandler+0xf4>
 8004d9c:	7efb      	ldrb	r3, [r7, #27]
 8004d9e:	2b40      	cmp	r3, #64	@ 0x40
 8004da0:	d107      	bne.n	8004db2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004db0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004db2:	6a3b      	ldr	r3, [r7, #32]
 8004db4:	0adb      	lsrs	r3, r3, #11
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00e      	beq.n	8004ddc <HAL_I2C_ER_IRQHandler+0x12e>
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	0a1b      	lsrs	r3, r3, #8
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d008      	beq.n	8004ddc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dcc:	f043 0308 	orr.w	r3, r3, #8
 8004dd0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8004dda:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d008      	beq.n	8004df4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de8:	431a      	orrs	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f001 f8a8 	bl	8005f44 <I2C_ITError>
  }
}
 8004df4:	bf00      	nop
 8004df6:	3728      	adds	r7, #40	@ 0x28
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	460b      	mov	r3, r1
 8004e56:	70fb      	strb	r3, [r7, #3]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eb2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004eba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d150      	bne.n	8004f6c <I2C_MasterTransmit_TXE+0xc8>
 8004eca:	7bfb      	ldrb	r3, [r7, #15]
 8004ecc:	2b21      	cmp	r3, #33	@ 0x21
 8004ece:	d14d      	bne.n	8004f6c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	2b08      	cmp	r3, #8
 8004ed4:	d01d      	beq.n	8004f12 <I2C_MasterTransmit_TXE+0x6e>
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	2b20      	cmp	r3, #32
 8004eda:	d01a      	beq.n	8004f12 <I2C_MasterTransmit_TXE+0x6e>
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004ee2:	d016      	beq.n	8004f12 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004ef2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2211      	movs	r2, #17
 8004ef8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2220      	movs	r2, #32
 8004f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7ff ff76 	bl	8004dfc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f10:	e060      	b.n	8004fd4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	685a      	ldr	r2, [r3, #4]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f20:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f30:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b40      	cmp	r3, #64	@ 0x40
 8004f4a:	d107      	bne.n	8004f5c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f7fb fe11 	bl	8000b7c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f5a:	e03b      	b.n	8004fd4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7ff ff49 	bl	8004dfc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f6a:	e033      	b.n	8004fd4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
 8004f6e:	2b21      	cmp	r3, #33	@ 0x21
 8004f70:	d005      	beq.n	8004f7e <I2C_MasterTransmit_TXE+0xda>
 8004f72:	7bbb      	ldrb	r3, [r7, #14]
 8004f74:	2b40      	cmp	r3, #64	@ 0x40
 8004f76:	d12d      	bne.n	8004fd4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
 8004f7a:	2b22      	cmp	r3, #34	@ 0x22
 8004f7c:	d12a      	bne.n	8004fd4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d108      	bne.n	8004f9a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f96:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004f98:	e01c      	b.n	8004fd4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b40      	cmp	r3, #64	@ 0x40
 8004fa4:	d103      	bne.n	8004fae <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f88e 	bl	80050c8 <I2C_MemoryTransmit_TXE_BTF>
}
 8004fac:	e012      	b.n	8004fd4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb2:	781a      	ldrb	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fbe:	1c5a      	adds	r2, r3, #1
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004fd2:	e7ff      	b.n	8004fd4 <I2C_MasterTransmit_TXE+0x130>
 8004fd4:	bf00      	nop
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b21      	cmp	r3, #33	@ 0x21
 8004ff4:	d164      	bne.n	80050c0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d012      	beq.n	8005026 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005004:	781a      	ldrb	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005010:	1c5a      	adds	r2, r3, #1
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800501a:	b29b      	uxth	r3, r3
 800501c:	3b01      	subs	r3, #1
 800501e:	b29a      	uxth	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005024:	e04c      	b.n	80050c0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2b08      	cmp	r3, #8
 800502a:	d01d      	beq.n	8005068 <I2C_MasterTransmit_BTF+0x8c>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b20      	cmp	r3, #32
 8005030:	d01a      	beq.n	8005068 <I2C_MasterTransmit_BTF+0x8c>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005038:	d016      	beq.n	8005068 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005048:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2211      	movs	r2, #17
 800504e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2220      	movs	r2, #32
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7ff fecb 	bl	8004dfc <HAL_I2C_MasterTxCpltCallback>
}
 8005066:	e02b      	b.n	80050c0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005076:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005086:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2220      	movs	r2, #32
 8005092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b40      	cmp	r3, #64	@ 0x40
 80050a0:	d107      	bne.n	80050b2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7fb fd66 	bl	8000b7c <HAL_I2C_MemTxCpltCallback>
}
 80050b0:	e006      	b.n	80050c0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7ff fe9e 	bl	8004dfc <HAL_I2C_MasterTxCpltCallback>
}
 80050c0:	bf00      	nop
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050d6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d11d      	bne.n	800511c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d10b      	bne.n	8005100 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050ec:	b2da      	uxtb	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050f8:	1c9a      	adds	r2, r3, #2
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80050fe:	e077      	b.n	80051f0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005104:	b29b      	uxth	r3, r3
 8005106:	121b      	asrs	r3, r3, #8
 8005108:	b2da      	uxtb	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800511a:	e069      	b.n	80051f0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005120:	2b01      	cmp	r3, #1
 8005122:	d10b      	bne.n	800513c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005128:	b2da      	uxtb	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800513a:	e059      	b.n	80051f0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005140:	2b02      	cmp	r3, #2
 8005142:	d152      	bne.n	80051ea <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005144:	7bfb      	ldrb	r3, [r7, #15]
 8005146:	2b22      	cmp	r3, #34	@ 0x22
 8005148:	d10d      	bne.n	8005166 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005158:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005164:	e044      	b.n	80051f0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800516a:	b29b      	uxth	r3, r3
 800516c:	2b00      	cmp	r3, #0
 800516e:	d015      	beq.n	800519c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005170:	7bfb      	ldrb	r3, [r7, #15]
 8005172:	2b21      	cmp	r3, #33	@ 0x21
 8005174:	d112      	bne.n	800519c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517a:	781a      	ldrb	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005190:	b29b      	uxth	r3, r3
 8005192:	3b01      	subs	r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800519a:	e029      	b.n	80051f0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d124      	bne.n	80051f0 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80051a6:	7bfb      	ldrb	r3, [r7, #15]
 80051a8:	2b21      	cmp	r3, #33	@ 0x21
 80051aa:	d121      	bne.n	80051f0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80051ba:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051ca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2220      	movs	r2, #32
 80051d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7fb fcca 	bl	8000b7c <HAL_I2C_MemTxCpltCallback>
}
 80051e8:	e002      	b.n	80051f0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7fe fcc0 	bl	8003b70 <I2C_Flush_DR>
}
 80051f0:	bf00      	nop
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b22      	cmp	r3, #34	@ 0x22
 800520a:	f040 80b9 	bne.w	8005380 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005212:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005218:	b29b      	uxth	r3, r3
 800521a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2b03      	cmp	r3, #3
 8005220:	d921      	bls.n	8005266 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	691a      	ldr	r2, [r3, #16]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522c:	b2d2      	uxtb	r2, r2
 800522e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800523e:	b29b      	uxth	r3, r3
 8005240:	3b01      	subs	r3, #1
 8005242:	b29a      	uxth	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800524c:	b29b      	uxth	r3, r3
 800524e:	2b03      	cmp	r3, #3
 8005250:	f040 8096 	bne.w	8005380 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005262:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005264:	e08c      	b.n	8005380 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526a:	2b02      	cmp	r3, #2
 800526c:	d07f      	beq.n	800536e <I2C_MasterReceive_RXNE+0x176>
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d002      	beq.n	800527a <I2C_MasterReceive_RXNE+0x82>
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d179      	bne.n	800536e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f001 fd02 	bl	8006c84 <I2C_WaitOnSTOPRequestThroughIT>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d14c      	bne.n	8005320 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005294:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80052a4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b0:	b2d2      	uxtb	r2, r2
 80052b2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b8:	1c5a      	adds	r2, r3, #1
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	3b01      	subs	r3, #1
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2220      	movs	r2, #32
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b40      	cmp	r3, #64	@ 0x40
 80052de:	d10a      	bne.n	80052f6 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7fb fc58 	bl	8000ba4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80052f4:	e044      	b.n	8005380 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2b08      	cmp	r3, #8
 8005302:	d002      	beq.n	800530a <I2C_MasterReceive_RXNE+0x112>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2b20      	cmp	r3, #32
 8005308:	d103      	bne.n	8005312 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005310:	e002      	b.n	8005318 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2212      	movs	r2, #18
 8005316:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f7ff fd79 	bl	8004e10 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800531e:	e02f      	b.n	8005380 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800532e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691a      	ldr	r2, [r3, #16]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005342:	1c5a      	adds	r2, r3, #1
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800534c:	b29b      	uxth	r3, r3
 800534e:	3b01      	subs	r3, #1
 8005350:	b29a      	uxth	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2220      	movs	r2, #32
 800535a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7ff fd88 	bl	8004e7c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800536c:	e008      	b.n	8005380 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800537c:	605a      	str	r2, [r3, #4]
}
 800537e:	e7ff      	b.n	8005380 <I2C_MasterReceive_RXNE+0x188>
 8005380:	bf00      	nop
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005394:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800539a:	b29b      	uxth	r3, r3
 800539c:	2b04      	cmp	r3, #4
 800539e:	d11b      	bne.n	80053d8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053ae:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	691a      	ldr	r2, [r3, #16]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ba:	b2d2      	uxtb	r2, r2
 80053bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c2:	1c5a      	adds	r2, r3, #1
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	3b01      	subs	r3, #1
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80053d6:	e0c4      	b.n	8005562 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053dc:	b29b      	uxth	r3, r3
 80053de:	2b03      	cmp	r3, #3
 80053e0:	d129      	bne.n	8005436 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053f0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d00a      	beq.n	800540e <I2C_MasterReceive_BTF+0x86>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d007      	beq.n	800540e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800540c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	691a      	ldr	r2, [r3, #16]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005418:	b2d2      	uxtb	r2, r2
 800541a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800542a:	b29b      	uxth	r3, r3
 800542c:	3b01      	subs	r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005434:	e095      	b.n	8005562 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800543a:	b29b      	uxth	r3, r3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d17d      	bne.n	800553c <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d002      	beq.n	800544c <I2C_MasterReceive_BTF+0xc4>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2b10      	cmp	r3, #16
 800544a:	d108      	bne.n	800545e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800545a:	601a      	str	r2, [r3, #0]
 800545c:	e016      	b.n	800548c <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2b04      	cmp	r3, #4
 8005462:	d002      	beq.n	800546a <I2C_MasterReceive_BTF+0xe2>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2b02      	cmp	r3, #2
 8005468:	d108      	bne.n	800547c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	e007      	b.n	800548c <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800548a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691a      	ldr	r2, [r3, #16]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800549e:	1c5a      	adds	r2, r3, #1
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	3b01      	subs	r3, #1
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c4:	1c5a      	adds	r2, r3, #1
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	3b01      	subs	r3, #1
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80054e6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2b40      	cmp	r3, #64	@ 0x40
 80054fa:	d10a      	bne.n	8005512 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7fb fb4a 	bl	8000ba4 <HAL_I2C_MemRxCpltCallback>
}
 8005510:	e027      	b.n	8005562 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2b08      	cmp	r3, #8
 800551e:	d002      	beq.n	8005526 <I2C_MasterReceive_BTF+0x19e>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2b20      	cmp	r3, #32
 8005524:	d103      	bne.n	800552e <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	631a      	str	r2, [r3, #48]	@ 0x30
 800552c:	e002      	b.n	8005534 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2212      	movs	r2, #18
 8005532:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f7ff fc6b 	bl	8004e10 <HAL_I2C_MasterRxCpltCallback>
}
 800553a:	e012      	b.n	8005562 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	691a      	ldr	r2, [r3, #16]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005546:	b2d2      	uxtb	r2, r2
 8005548:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554e:	1c5a      	adds	r2, r3, #1
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005558:	b29b      	uxth	r3, r3
 800555a:	3b01      	subs	r3, #1
 800555c:	b29a      	uxth	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005562:	bf00      	nop
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800556a:	b480      	push	{r7}
 800556c:	b083      	sub	sp, #12
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b40      	cmp	r3, #64	@ 0x40
 800557c:	d117      	bne.n	80055ae <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005582:	2b00      	cmp	r3, #0
 8005584:	d109      	bne.n	800559a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800558a:	b2db      	uxtb	r3, r3
 800558c:	461a      	mov	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005596:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005598:	e067      	b.n	800566a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	f043 0301 	orr.w	r3, r3, #1
 80055a4:	b2da      	uxtb	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	611a      	str	r2, [r3, #16]
}
 80055ac:	e05d      	b.n	800566a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055b6:	d133      	bne.n	8005620 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b21      	cmp	r3, #33	@ 0x21
 80055c2:	d109      	bne.n	80055d8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	461a      	mov	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80055d4:	611a      	str	r2, [r3, #16]
 80055d6:	e008      	b.n	80055ea <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	f043 0301 	orr.w	r3, r3, #1
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d004      	beq.n	80055fc <I2C_Master_SB+0x92>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d108      	bne.n	800560e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005600:	2b00      	cmp	r3, #0
 8005602:	d032      	beq.n	800566a <I2C_Master_SB+0x100>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800560a:	2b00      	cmp	r3, #0
 800560c:	d02d      	beq.n	800566a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	685a      	ldr	r2, [r3, #4]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800561c:	605a      	str	r2, [r3, #4]
}
 800561e:	e024      	b.n	800566a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10e      	bne.n	8005646 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800562c:	b29b      	uxth	r3, r3
 800562e:	11db      	asrs	r3, r3, #7
 8005630:	b2db      	uxtb	r3, r3
 8005632:	f003 0306 	and.w	r3, r3, #6
 8005636:	b2db      	uxtb	r3, r3
 8005638:	f063 030f 	orn	r3, r3, #15
 800563c:	b2da      	uxtb	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	611a      	str	r2, [r3, #16]
}
 8005644:	e011      	b.n	800566a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800564a:	2b01      	cmp	r3, #1
 800564c:	d10d      	bne.n	800566a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005652:	b29b      	uxth	r3, r3
 8005654:	11db      	asrs	r3, r3, #7
 8005656:	b2db      	uxtb	r3, r3
 8005658:	f003 0306 	and.w	r3, r3, #6
 800565c:	b2db      	uxtb	r3, r3
 800565e:	f063 030e 	orn	r3, r3, #14
 8005662:	b2da      	uxtb	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	611a      	str	r2, [r3, #16]
}
 800566a:	bf00      	nop
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005676:	b480      	push	{r7}
 8005678:	b083      	sub	sp, #12
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005682:	b2da      	uxtb	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800568e:	2b00      	cmp	r3, #0
 8005690:	d004      	beq.n	800569c <I2C_Master_ADD10+0x26>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005698:	2b00      	cmp	r3, #0
 800569a:	d108      	bne.n	80056ae <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00c      	beq.n	80056be <I2C_Master_ADD10+0x48>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d007      	beq.n	80056be <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	685a      	ldr	r2, [r3, #4]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056bc:	605a      	str	r2, [r3, #4]
  }
}
 80056be:	bf00      	nop
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b091      	sub	sp, #68	@ 0x44
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056d8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b22      	cmp	r3, #34	@ 0x22
 80056f2:	f040 8169 	bne.w	80059c8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10f      	bne.n	800571e <I2C_Master_ADDR+0x54>
 80056fe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005702:	2b40      	cmp	r3, #64	@ 0x40
 8005704:	d10b      	bne.n	800571e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005706:	2300      	movs	r3, #0
 8005708:	633b      	str	r3, [r7, #48]	@ 0x30
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	695b      	ldr	r3, [r3, #20]
 8005710:	633b      	str	r3, [r7, #48]	@ 0x30
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	633b      	str	r3, [r7, #48]	@ 0x30
 800571a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800571c:	e160      	b.n	80059e0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005722:	2b00      	cmp	r3, #0
 8005724:	d11d      	bne.n	8005762 <I2C_Master_ADDR+0x98>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800572e:	d118      	bne.n	8005762 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005730:	2300      	movs	r3, #0
 8005732:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005754:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800575a:	1c5a      	adds	r2, r3, #1
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005760:	e13e      	b.n	80059e0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005766:	b29b      	uxth	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	d113      	bne.n	8005794 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800576c:	2300      	movs	r3, #0
 800576e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005780:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	e115      	b.n	80059c0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005798:	b29b      	uxth	r3, r3
 800579a:	2b01      	cmp	r3, #1
 800579c:	f040 808a 	bne.w	80058b4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80057a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80057a6:	d137      	bne.n	8005818 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057b6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057c6:	d113      	bne.n	80057f0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057d6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057d8:	2300      	movs	r3, #0
 80057da:	627b      	str	r3, [r7, #36]	@ 0x24
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80057ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ee:	e0e7      	b.n	80059c0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057f0:	2300      	movs	r3, #0
 80057f2:	623b      	str	r3, [r7, #32]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	623b      	str	r3, [r7, #32]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	623b      	str	r3, [r7, #32]
 8005804:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005814:	601a      	str	r2, [r3, #0]
 8005816:	e0d3      	b.n	80059c0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800581a:	2b08      	cmp	r3, #8
 800581c:	d02e      	beq.n	800587c <I2C_Master_ADDR+0x1b2>
 800581e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005820:	2b20      	cmp	r3, #32
 8005822:	d02b      	beq.n	800587c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005826:	2b12      	cmp	r3, #18
 8005828:	d102      	bne.n	8005830 <I2C_Master_ADDR+0x166>
 800582a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800582c:	2b01      	cmp	r3, #1
 800582e:	d125      	bne.n	800587c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005832:	2b04      	cmp	r3, #4
 8005834:	d00e      	beq.n	8005854 <I2C_Master_ADDR+0x18a>
 8005836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005838:	2b02      	cmp	r3, #2
 800583a:	d00b      	beq.n	8005854 <I2C_Master_ADDR+0x18a>
 800583c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800583e:	2b10      	cmp	r3, #16
 8005840:	d008      	beq.n	8005854 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	e007      	b.n	8005864 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005862:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005864:	2300      	movs	r3, #0
 8005866:	61fb      	str	r3, [r7, #28]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	61fb      	str	r3, [r7, #28]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	61fb      	str	r3, [r7, #28]
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	e0a1      	b.n	80059c0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800588a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800588c:	2300      	movs	r3, #0
 800588e:	61bb      	str	r3, [r7, #24]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	61bb      	str	r3, [r7, #24]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	61bb      	str	r3, [r7, #24]
 80058a0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058b0:	601a      	str	r2, [r3, #0]
 80058b2:	e085      	b.n	80059c0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d14d      	bne.n	800595a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80058be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c0:	2b04      	cmp	r3, #4
 80058c2:	d016      	beq.n	80058f2 <I2C_Master_ADDR+0x228>
 80058c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d013      	beq.n	80058f2 <I2C_Master_ADDR+0x228>
 80058ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058cc:	2b10      	cmp	r3, #16
 80058ce:	d010      	beq.n	80058f2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058de:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058ee:	601a      	str	r2, [r3, #0]
 80058f0:	e007      	b.n	8005902 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005900:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800590c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005910:	d117      	bne.n	8005942 <I2C_Master_ADDR+0x278>
 8005912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005914:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005918:	d00b      	beq.n	8005932 <I2C_Master_ADDR+0x268>
 800591a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800591c:	2b01      	cmp	r3, #1
 800591e:	d008      	beq.n	8005932 <I2C_Master_ADDR+0x268>
 8005920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005922:	2b08      	cmp	r3, #8
 8005924:	d005      	beq.n	8005932 <I2C_Master_ADDR+0x268>
 8005926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005928:	2b10      	cmp	r3, #16
 800592a:	d002      	beq.n	8005932 <I2C_Master_ADDR+0x268>
 800592c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800592e:	2b20      	cmp	r3, #32
 8005930:	d107      	bne.n	8005942 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	685a      	ldr	r2, [r3, #4]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005940:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005942:	2300      	movs	r3, #0
 8005944:	617b      	str	r3, [r7, #20]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	617b      	str	r3, [r7, #20]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	617b      	str	r3, [r7, #20]
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	e032      	b.n	80059c0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005968:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005974:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005978:	d117      	bne.n	80059aa <I2C_Master_ADDR+0x2e0>
 800597a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800597c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005980:	d00b      	beq.n	800599a <I2C_Master_ADDR+0x2d0>
 8005982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005984:	2b01      	cmp	r3, #1
 8005986:	d008      	beq.n	800599a <I2C_Master_ADDR+0x2d0>
 8005988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800598a:	2b08      	cmp	r3, #8
 800598c:	d005      	beq.n	800599a <I2C_Master_ADDR+0x2d0>
 800598e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005990:	2b10      	cmp	r3, #16
 8005992:	d002      	beq.n	800599a <I2C_Master_ADDR+0x2d0>
 8005994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005996:	2b20      	cmp	r3, #32
 8005998:	d107      	bne.n	80059aa <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80059a8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059aa:	2300      	movs	r3, #0
 80059ac:	613b      	str	r3, [r7, #16]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	613b      	str	r3, [r7, #16]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	613b      	str	r3, [r7, #16]
 80059be:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80059c6:	e00b      	b.n	80059e0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059c8:	2300      	movs	r3, #0
 80059ca:	60fb      	str	r3, [r7, #12]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	60fb      	str	r3, [r7, #12]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	60fb      	str	r3, [r7, #12]
 80059dc:	68fb      	ldr	r3, [r7, #12]
}
 80059de:	e7ff      	b.n	80059e0 <I2C_Master_ADDR+0x316>
 80059e0:	bf00      	nop
 80059e2:	3744      	adds	r7, #68	@ 0x44
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059fa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d02b      	beq.n	8005a5e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0a:	781a      	ldrb	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a16:	1c5a      	adds	r2, r3, #1
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	3b01      	subs	r3, #1
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d114      	bne.n	8005a5e <I2C_SlaveTransmit_TXE+0x72>
 8005a34:	7bfb      	ldrb	r3, [r7, #15]
 8005a36:	2b29      	cmp	r3, #41	@ 0x29
 8005a38:	d111      	bne.n	8005a5e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a48:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2221      	movs	r2, #33	@ 0x21
 8005a4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2228      	movs	r2, #40	@ 0x28
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f7ff f9e3 	bl	8004e24 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005a5e:	bf00      	nop
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b083      	sub	sp, #12
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d011      	beq.n	8005a9c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7c:	781a      	ldrb	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a88:	1c5a      	adds	r2, r3, #1
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	3b01      	subs	r3, #1
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ab6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d02c      	beq.n	8005b1c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	691a      	ldr	r2, [r3, #16]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005acc:	b2d2      	uxtb	r2, r2
 8005ace:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad4:	1c5a      	adds	r2, r3, #1
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d114      	bne.n	8005b1c <I2C_SlaveReceive_RXNE+0x74>
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
 8005af4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005af6:	d111      	bne.n	8005b1c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b06:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2222      	movs	r2, #34	@ 0x22
 8005b0c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2228      	movs	r2, #40	@ 0x28
 8005b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7ff f98e 	bl	8004e38 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005b1c:	bf00      	nop
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d012      	beq.n	8005b5c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	691a      	ldr	r2, [r3, #16]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b40:	b2d2      	uxtb	r2, r2
 8005b42:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b48:	1c5a      	adds	r2, r3, #1
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	3b01      	subs	r3, #1
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005b72:	2300      	movs	r3, #0
 8005b74:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005b82:	2b28      	cmp	r3, #40	@ 0x28
 8005b84:	d127      	bne.n	8005bd6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b94:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	089b      	lsrs	r3, r3, #2
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d101      	bne.n	8005ba6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	09db      	lsrs	r3, r3, #7
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d103      	bne.n	8005bba <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	81bb      	strh	r3, [r7, #12]
 8005bb8:	e002      	b.n	8005bc0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005bc8:	89ba      	ldrh	r2, [r7, #12]
 8005bca:	7bfb      	ldrb	r3, [r7, #15]
 8005bcc:	4619      	mov	r1, r3
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7ff f93c 	bl	8004e4c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005bd4:	e00e      	b.n	8005bf4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60bb      	str	r3, [r7, #8]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	60bb      	str	r3, [r7, #8]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	60bb      	str	r3, [r7, #8]
 8005bea:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005bf4:	bf00      	nop
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c0a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005c1a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	60bb      	str	r3, [r7, #8]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	60bb      	str	r3, [r7, #8]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f042 0201 	orr.w	r2, r2, #1
 8005c36:	601a      	str	r2, [r3, #0]
 8005c38:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c48:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c58:	d172      	bne.n	8005d40 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005c5a:	7bfb      	ldrb	r3, [r7, #15]
 8005c5c:	2b22      	cmp	r3, #34	@ 0x22
 8005c5e:	d002      	beq.n	8005c66 <I2C_Slave_STOPF+0x6a>
 8005c60:	7bfb      	ldrb	r3, [r7, #15]
 8005c62:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c64:	d135      	bne.n	8005cd2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d005      	beq.n	8005c8a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c82:	f043 0204 	orr.w	r2, r3, #4
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c98:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fd fb70 	bl	8003384 <HAL_DMA_GetState>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d049      	beq.n	8005d3e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cae:	4a69      	ldr	r2, [pc, #420]	@ (8005e54 <I2C_Slave_STOPF+0x258>)
 8005cb0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fd f9b8 	bl	800302c <HAL_DMA_Abort_IT>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d03d      	beq.n	8005d3e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005ccc:	4610      	mov	r0, r2
 8005cce:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005cd0:	e035      	b.n	8005d3e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d005      	beq.n	8005cf6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cee:	f043 0204 	orr.w	r2, r3, #4
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d04:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7fd fb3a 	bl	8003384 <HAL_DMA_GetState>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d014      	beq.n	8005d40 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d1a:	4a4e      	ldr	r2, [pc, #312]	@ (8005e54 <I2C_Slave_STOPF+0x258>)
 8005d1c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7fd f982 	bl	800302c <HAL_DMA_Abort_IT>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d008      	beq.n	8005d40 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005d38:	4610      	mov	r0, r2
 8005d3a:	4798      	blx	r3
 8005d3c:	e000      	b.n	8005d40 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d3e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d03e      	beq.n	8005dc8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	f003 0304 	and.w	r3, r3, #4
 8005d54:	2b04      	cmp	r3, #4
 8005d56:	d112      	bne.n	8005d7e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	691a      	ldr	r2, [r3, #16]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d62:	b2d2      	uxtb	r2, r2
 8005d64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6a:	1c5a      	adds	r2, r3, #1
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	3b01      	subs	r3, #1
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d88:	2b40      	cmp	r3, #64	@ 0x40
 8005d8a:	d112      	bne.n	8005db2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	691a      	ldr	r2, [r3, #16]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d96:	b2d2      	uxtb	r2, r2
 8005d98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d9e:	1c5a      	adds	r2, r3, #1
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	3b01      	subs	r3, #1
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d005      	beq.n	8005dc8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc0:	f043 0204 	orr.w	r2, r3, #4
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d003      	beq.n	8005dd8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 f8b7 	bl	8005f44 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005dd6:	e039      	b.n	8005e4c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005dd8:	7bfb      	ldrb	r3, [r7, #15]
 8005dda:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ddc:	d109      	bne.n	8005df2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2228      	movs	r2, #40	@ 0x28
 8005de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f7ff f823 	bl	8004e38 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b28      	cmp	r3, #40	@ 0x28
 8005dfc:	d111      	bne.n	8005e22 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a15      	ldr	r2, [pc, #84]	@ (8005e58 <I2C_Slave_STOPF+0x25c>)
 8005e02:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7ff f824 	bl	8004e68 <HAL_I2C_ListenCpltCallback>
}
 8005e20:	e014      	b.n	8005e4c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e26:	2b22      	cmp	r3, #34	@ 0x22
 8005e28:	d002      	beq.n	8005e30 <I2C_Slave_STOPF+0x234>
 8005e2a:	7bfb      	ldrb	r3, [r7, #15]
 8005e2c:	2b22      	cmp	r3, #34	@ 0x22
 8005e2e:	d10d      	bne.n	8005e4c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2220      	movs	r2, #32
 8005e3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f7fe fff6 	bl	8004e38 <HAL_I2C_SlaveRxCpltCallback>
}
 8005e4c:	bf00      	nop
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	080067e1 	.word	0x080067e1
 8005e58:	ffff0000 	.word	0xffff0000

08005e5c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e70:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	2b08      	cmp	r3, #8
 8005e76:	d002      	beq.n	8005e7e <I2C_Slave_AF+0x22>
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	2b20      	cmp	r3, #32
 8005e7c:	d129      	bne.n	8005ed2 <I2C_Slave_AF+0x76>
 8005e7e:	7bfb      	ldrb	r3, [r7, #15]
 8005e80:	2b28      	cmp	r3, #40	@ 0x28
 8005e82:	d126      	bne.n	8005ed2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a2e      	ldr	r2, [pc, #184]	@ (8005f40 <I2C_Slave_AF+0xe4>)
 8005e88:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005e98:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005ea2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005eb2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f7fe ffcc 	bl	8004e68 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005ed0:	e031      	b.n	8005f36 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005ed2:	7bfb      	ldrb	r3, [r7, #15]
 8005ed4:	2b21      	cmp	r3, #33	@ 0x21
 8005ed6:	d129      	bne.n	8005f2c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a19      	ldr	r2, [pc, #100]	@ (8005f40 <I2C_Slave_AF+0xe4>)
 8005edc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2221      	movs	r2, #33	@ 0x21
 8005ee2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005f02:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005f0c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f1c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7fd fe26 	bl	8003b70 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f7fe ff7d 	bl	8004e24 <HAL_I2C_SlaveTxCpltCallback>
}
 8005f2a:	e004      	b.n	8005f36 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005f34:	615a      	str	r2, [r3, #20]
}
 8005f36:	bf00      	nop
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	ffff0000 	.word	0xffff0000

08005f44 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f52:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f5a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005f5c:	7bbb      	ldrb	r3, [r7, #14]
 8005f5e:	2b10      	cmp	r3, #16
 8005f60:	d002      	beq.n	8005f68 <I2C_ITError+0x24>
 8005f62:	7bbb      	ldrb	r3, [r7, #14]
 8005f64:	2b40      	cmp	r3, #64	@ 0x40
 8005f66:	d10a      	bne.n	8005f7e <I2C_ITError+0x3a>
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
 8005f6a:	2b22      	cmp	r3, #34	@ 0x22
 8005f6c:	d107      	bne.n	8005f7e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f7c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f7e:	7bfb      	ldrb	r3, [r7, #15]
 8005f80:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005f84:	2b28      	cmp	r3, #40	@ 0x28
 8005f86:	d107      	bne.n	8005f98 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2228      	movs	r2, #40	@ 0x28
 8005f92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005f96:	e015      	b.n	8005fc4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fa2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fa6:	d00a      	beq.n	8005fbe <I2C_ITError+0x7a>
 8005fa8:	7bfb      	ldrb	r3, [r7, #15]
 8005faa:	2b60      	cmp	r3, #96	@ 0x60
 8005fac:	d007      	beq.n	8005fbe <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fd2:	d162      	bne.n	800609a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005fe2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fe8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d020      	beq.n	8006034 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ff6:	4a6a      	ldr	r2, [pc, #424]	@ (80061a0 <I2C_ITError+0x25c>)
 8005ff8:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7fd f814 	bl	800302c <HAL_DMA_Abort_IT>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	f000 8089 	beq.w	800611e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f022 0201 	bic.w	r2, r2, #1
 800601a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2220      	movs	r2, #32
 8006020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006028:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800602e:	4610      	mov	r0, r2
 8006030:	4798      	blx	r3
 8006032:	e074      	b.n	800611e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006038:	4a59      	ldr	r2, [pc, #356]	@ (80061a0 <I2C_ITError+0x25c>)
 800603a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006040:	4618      	mov	r0, r3
 8006042:	f7fc fff3 	bl	800302c <HAL_DMA_Abort_IT>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d068      	beq.n	800611e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006056:	2b40      	cmp	r3, #64	@ 0x40
 8006058:	d10b      	bne.n	8006072 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	691a      	ldr	r2, [r3, #16]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006064:	b2d2      	uxtb	r2, r2
 8006066:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606c:	1c5a      	adds	r2, r3, #1
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f022 0201 	bic.w	r2, r2, #1
 8006080:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2220      	movs	r2, #32
 8006086:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800608e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006094:	4610      	mov	r0, r2
 8006096:	4798      	blx	r3
 8006098:	e041      	b.n	800611e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b60      	cmp	r3, #96	@ 0x60
 80060a4:	d125      	bne.n	80060f2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060be:	2b40      	cmp	r3, #64	@ 0x40
 80060c0:	d10b      	bne.n	80060da <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	691a      	ldr	r2, [r3, #16]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060cc:	b2d2      	uxtb	r2, r2
 80060ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d4:	1c5a      	adds	r2, r3, #1
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f022 0201 	bic.w	r2, r2, #1
 80060e8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f7fe fed0 	bl	8004e90 <HAL_I2C_AbortCpltCallback>
 80060f0:	e015      	b.n	800611e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060fc:	2b40      	cmp	r3, #64	@ 0x40
 80060fe:	d10b      	bne.n	8006118 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	691a      	ldr	r2, [r3, #16]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800610a:	b2d2      	uxtb	r2, r2
 800610c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006112:	1c5a      	adds	r2, r3, #1
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f7fe feaf 	bl	8004e7c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006122:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10e      	bne.n	800614c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006134:	2b00      	cmp	r3, #0
 8006136:	d109      	bne.n	800614c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800613e:	2b00      	cmp	r3, #0
 8006140:	d104      	bne.n	800614c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006148:	2b00      	cmp	r3, #0
 800614a:	d007      	beq.n	800615c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685a      	ldr	r2, [r3, #4]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800615a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006162:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006168:	f003 0304 	and.w	r3, r3, #4
 800616c:	2b04      	cmp	r3, #4
 800616e:	d113      	bne.n	8006198 <I2C_ITError+0x254>
 8006170:	7bfb      	ldrb	r3, [r7, #15]
 8006172:	2b28      	cmp	r3, #40	@ 0x28
 8006174:	d110      	bne.n	8006198 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a0a      	ldr	r2, [pc, #40]	@ (80061a4 <I2C_ITError+0x260>)
 800617a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2220      	movs	r2, #32
 8006186:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f7fe fe68 	bl	8004e68 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006198:	bf00      	nop
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	080067e1 	.word	0x080067e1
 80061a4:	ffff0000 	.word	0xffff0000

080061a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b088      	sub	sp, #32
 80061ac:	af02      	add	r7, sp, #8
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	607a      	str	r2, [r7, #4]
 80061b2:	603b      	str	r3, [r7, #0]
 80061b4:	460b      	mov	r3, r1
 80061b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	2b08      	cmp	r3, #8
 80061c2:	d006      	beq.n	80061d2 <I2C_MasterRequestWrite+0x2a>
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d003      	beq.n	80061d2 <I2C_MasterRequestWrite+0x2a>
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80061d0:	d108      	bne.n	80061e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061e0:	601a      	str	r2, [r3, #0]
 80061e2:	e00b      	b.n	80061fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061e8:	2b12      	cmp	r3, #18
 80061ea:	d107      	bne.n	80061fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f000 fb91 	bl	8006930 <I2C_WaitOnFlagUntilTimeout>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00d      	beq.n	8006230 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800621e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006222:	d103      	bne.n	800622c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800622a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e035      	b.n	800629c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006238:	d108      	bne.n	800624c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800623a:	897b      	ldrh	r3, [r7, #10]
 800623c:	b2db      	uxtb	r3, r3
 800623e:	461a      	mov	r2, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006248:	611a      	str	r2, [r3, #16]
 800624a:	e01b      	b.n	8006284 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800624c:	897b      	ldrh	r3, [r7, #10]
 800624e:	11db      	asrs	r3, r3, #7
 8006250:	b2db      	uxtb	r3, r3
 8006252:	f003 0306 	and.w	r3, r3, #6
 8006256:	b2db      	uxtb	r3, r3
 8006258:	f063 030f 	orn	r3, r3, #15
 800625c:	b2da      	uxtb	r2, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	490e      	ldr	r1, [pc, #56]	@ (80062a4 <I2C_MasterRequestWrite+0xfc>)
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f000 fbda 	bl	8006a24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d001      	beq.n	800627a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e010      	b.n	800629c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800627a:	897b      	ldrh	r3, [r7, #10]
 800627c:	b2da      	uxtb	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	4907      	ldr	r1, [pc, #28]	@ (80062a8 <I2C_MasterRequestWrite+0x100>)
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f000 fbca 	bl	8006a24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e000      	b.n	800629c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3718      	adds	r7, #24
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	00010008 	.word	0x00010008
 80062a8:	00010002 	.word	0x00010002

080062ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b088      	sub	sp, #32
 80062b0:	af02      	add	r7, sp, #8
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	4608      	mov	r0, r1
 80062b6:	4611      	mov	r1, r2
 80062b8:	461a      	mov	r2, r3
 80062ba:	4603      	mov	r3, r0
 80062bc:	817b      	strh	r3, [r7, #10]
 80062be:	460b      	mov	r3, r1
 80062c0:	813b      	strh	r3, [r7, #8]
 80062c2:	4613      	mov	r3, r2
 80062c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	2200      	movs	r2, #0
 80062de:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f000 fb24 	bl	8006930 <I2C_WaitOnFlagUntilTimeout>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00d      	beq.n	800630a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062fc:	d103      	bne.n	8006306 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006304:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e05f      	b.n	80063ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800630a:	897b      	ldrh	r3, [r7, #10]
 800630c:	b2db      	uxtb	r3, r3
 800630e:	461a      	mov	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006318:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800631a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631c:	6a3a      	ldr	r2, [r7, #32]
 800631e:	492d      	ldr	r1, [pc, #180]	@ (80063d4 <I2C_RequestMemoryWrite+0x128>)
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f000 fb7f 	bl	8006a24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d001      	beq.n	8006330 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e04c      	b.n	80063ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006330:	2300      	movs	r3, #0
 8006332:	617b      	str	r3, [r7, #20]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	617b      	str	r3, [r7, #20]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	617b      	str	r3, [r7, #20]
 8006344:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006348:	6a39      	ldr	r1, [r7, #32]
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f000 fc0a 	bl	8006b64 <I2C_WaitOnTXEFlagUntilTimeout>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00d      	beq.n	8006372 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800635a:	2b04      	cmp	r3, #4
 800635c:	d107      	bne.n	800636e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800636c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e02b      	b.n	80063ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006372:	88fb      	ldrh	r3, [r7, #6]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d105      	bne.n	8006384 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006378:	893b      	ldrh	r3, [r7, #8]
 800637a:	b2da      	uxtb	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	611a      	str	r2, [r3, #16]
 8006382:	e021      	b.n	80063c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006384:	893b      	ldrh	r3, [r7, #8]
 8006386:	0a1b      	lsrs	r3, r3, #8
 8006388:	b29b      	uxth	r3, r3
 800638a:	b2da      	uxtb	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006392:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006394:	6a39      	ldr	r1, [r7, #32]
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f000 fbe4 	bl	8006b64 <I2C_WaitOnTXEFlagUntilTimeout>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00d      	beq.n	80063be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a6:	2b04      	cmp	r3, #4
 80063a8:	d107      	bne.n	80063ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e005      	b.n	80063ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063be:	893b      	ldrh	r3, [r7, #8]
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3718      	adds	r7, #24
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	00010002 	.word	0x00010002

080063d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b088      	sub	sp, #32
 80063dc:	af02      	add	r7, sp, #8
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	4608      	mov	r0, r1
 80063e2:	4611      	mov	r1, r2
 80063e4:	461a      	mov	r2, r3
 80063e6:	4603      	mov	r3, r0
 80063e8:	817b      	strh	r3, [r7, #10]
 80063ea:	460b      	mov	r3, r1
 80063ec:	813b      	strh	r3, [r7, #8]
 80063ee:	4613      	mov	r3, r2
 80063f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006400:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006410:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	2200      	movs	r2, #0
 800641a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f000 fa86 	bl	8006930 <I2C_WaitOnFlagUntilTimeout>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00d      	beq.n	8006446 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006434:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006438:	d103      	bne.n	8006442 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006440:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e0aa      	b.n	800659c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006446:	897b      	ldrh	r3, [r7, #10]
 8006448:	b2db      	uxtb	r3, r3
 800644a:	461a      	mov	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006454:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006458:	6a3a      	ldr	r2, [r7, #32]
 800645a:	4952      	ldr	r1, [pc, #328]	@ (80065a4 <I2C_RequestMemoryRead+0x1cc>)
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f000 fae1 	bl	8006a24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d001      	beq.n	800646c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e097      	b.n	800659c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800646c:	2300      	movs	r3, #0
 800646e:	617b      	str	r3, [r7, #20]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	617b      	str	r3, [r7, #20]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	617b      	str	r3, [r7, #20]
 8006480:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006484:	6a39      	ldr	r1, [r7, #32]
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f000 fb6c 	bl	8006b64 <I2C_WaitOnTXEFlagUntilTimeout>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00d      	beq.n	80064ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006496:	2b04      	cmp	r3, #4
 8006498:	d107      	bne.n	80064aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e076      	b.n	800659c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80064ae:	88fb      	ldrh	r3, [r7, #6]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d105      	bne.n	80064c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064b4:	893b      	ldrh	r3, [r7, #8]
 80064b6:	b2da      	uxtb	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	611a      	str	r2, [r3, #16]
 80064be:	e021      	b.n	8006504 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80064c0:	893b      	ldrh	r3, [r7, #8]
 80064c2:	0a1b      	lsrs	r3, r3, #8
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064d0:	6a39      	ldr	r1, [r7, #32]
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f000 fb46 	bl	8006b64 <I2C_WaitOnTXEFlagUntilTimeout>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00d      	beq.n	80064fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e2:	2b04      	cmp	r3, #4
 80064e4:	d107      	bne.n	80064f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e050      	b.n	800659c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064fa:	893b      	ldrh	r3, [r7, #8]
 80064fc:	b2da      	uxtb	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006506:	6a39      	ldr	r1, [r7, #32]
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f000 fb2b 	bl	8006b64 <I2C_WaitOnTXEFlagUntilTimeout>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00d      	beq.n	8006530 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006518:	2b04      	cmp	r3, #4
 800651a:	d107      	bne.n	800652c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800652a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e035      	b.n	800659c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800653e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	6a3b      	ldr	r3, [r7, #32]
 8006546:	2200      	movs	r2, #0
 8006548:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 f9ef 	bl	8006930 <I2C_WaitOnFlagUntilTimeout>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00d      	beq.n	8006574 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006562:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006566:	d103      	bne.n	8006570 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800656e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e013      	b.n	800659c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006574:	897b      	ldrh	r3, [r7, #10]
 8006576:	b2db      	uxtb	r3, r3
 8006578:	f043 0301 	orr.w	r3, r3, #1
 800657c:	b2da      	uxtb	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006586:	6a3a      	ldr	r2, [r7, #32]
 8006588:	4906      	ldr	r1, [pc, #24]	@ (80065a4 <I2C_RequestMemoryRead+0x1cc>)
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f000 fa4a 	bl	8006a24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e000      	b.n	800659c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3718      	adds	r7, #24
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	00010002 	.word	0x00010002

080065a8 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065bc:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80065c4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80065da:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d003      	beq.n	80065ec <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065e8:	2200      	movs	r2, #0
 80065ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d003      	beq.n	80065fc <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f8:	2200      	movs	r2, #0
 80065fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80065fc:	7cfb      	ldrb	r3, [r7, #19]
 80065fe:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8006602:	2b21      	cmp	r3, #33	@ 0x21
 8006604:	d007      	beq.n	8006616 <I2C_DMAXferCplt+0x6e>
 8006606:	7cfb      	ldrb	r3, [r7, #19]
 8006608:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 800660c:	2b22      	cmp	r3, #34	@ 0x22
 800660e:	d131      	bne.n	8006674 <I2C_DMAXferCplt+0xcc>
 8006610:	7cbb      	ldrb	r3, [r7, #18]
 8006612:	2b20      	cmp	r3, #32
 8006614:	d12e      	bne.n	8006674 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	685a      	ldr	r2, [r3, #4]
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006624:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	2200      	movs	r2, #0
 800662a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800662c:	7cfb      	ldrb	r3, [r7, #19]
 800662e:	2b29      	cmp	r3, #41	@ 0x29
 8006630:	d10a      	bne.n	8006648 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	2221      	movs	r2, #33	@ 0x21
 8006636:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	2228      	movs	r2, #40	@ 0x28
 800663c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006640:	6978      	ldr	r0, [r7, #20]
 8006642:	f7fe fbef 	bl	8004e24 <HAL_I2C_SlaveTxCpltCallback>
 8006646:	e00c      	b.n	8006662 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006648:	7cfb      	ldrb	r3, [r7, #19]
 800664a:	2b2a      	cmp	r3, #42	@ 0x2a
 800664c:	d109      	bne.n	8006662 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	2222      	movs	r2, #34	@ 0x22
 8006652:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	2228      	movs	r2, #40	@ 0x28
 8006658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800665c:	6978      	ldr	r0, [r7, #20]
 800665e:	f7fe fbeb 	bl	8004e38 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	685a      	ldr	r2, [r3, #4]
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006670:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006672:	e074      	b.n	800675e <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800667a:	b2db      	uxtb	r3, r3
 800667c:	2b00      	cmp	r3, #0
 800667e:	d06e      	beq.n	800675e <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006684:	b29b      	uxth	r3, r3
 8006686:	2b01      	cmp	r3, #1
 8006688:	d107      	bne.n	800669a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006698:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80066a8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80066b0:	d009      	beq.n	80066c6 <I2C_DMAXferCplt+0x11e>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2b08      	cmp	r3, #8
 80066b6:	d006      	beq.n	80066c6 <I2C_DMAXferCplt+0x11e>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80066be:	d002      	beq.n	80066c6 <I2C_DMAXferCplt+0x11e>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2b20      	cmp	r3, #32
 80066c4:	d107      	bne.n	80066d6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066d4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	685a      	ldr	r2, [r3, #4]
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80066e4:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80066f4:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	2200      	movs	r2, #0
 80066fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006700:	2b00      	cmp	r3, #0
 8006702:	d003      	beq.n	800670c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8006704:	6978      	ldr	r0, [r7, #20]
 8006706:	f7fe fbb9 	bl	8004e7c <HAL_I2C_ErrorCallback>
}
 800670a:	e028      	b.n	800675e <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	2220      	movs	r2, #32
 8006710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800671a:	b2db      	uxtb	r3, r3
 800671c:	2b40      	cmp	r3, #64	@ 0x40
 800671e:	d10a      	bne.n	8006736 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	2200      	movs	r2, #0
 800672c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800672e:	6978      	ldr	r0, [r7, #20]
 8006730:	f7fa fa38 	bl	8000ba4 <HAL_I2C_MemRxCpltCallback>
}
 8006734:	e013      	b.n	800675e <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2b08      	cmp	r3, #8
 8006742:	d002      	beq.n	800674a <I2C_DMAXferCplt+0x1a2>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2b20      	cmp	r3, #32
 8006748:	d103      	bne.n	8006752 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2200      	movs	r2, #0
 800674e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006750:	e002      	b.n	8006758 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	2212      	movs	r2, #18
 8006756:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8006758:	6978      	ldr	r0, [r7, #20]
 800675a:	f7fe fb59 	bl	8004e10 <HAL_I2C_MasterRxCpltCallback>
}
 800675e:	bf00      	nop
 8006760:	3718      	adds	r7, #24
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b084      	sub	sp, #16
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006772:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006778:	2b00      	cmp	r3, #0
 800677a:	d003      	beq.n	8006784 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006780:	2200      	movs	r2, #0
 8006782:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006788:	2b00      	cmp	r3, #0
 800678a:	d003      	beq.n	8006794 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006790:	2200      	movs	r2, #0
 8006792:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f7fc fe03 	bl	80033a0 <HAL_DMA_GetError>
 800679a:	4603      	mov	r3, r0
 800679c:	2b02      	cmp	r3, #2
 800679e:	d01b      	beq.n	80067d8 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067ae:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2220      	movs	r2, #32
 80067ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ca:	f043 0210 	orr.w	r2, r3, #16
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f7fe fb52 	bl	8004e7c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80067d8:	bf00      	nop
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067e8:	2300      	movs	r3, #0
 80067ea:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067f0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067f8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80067fa:	4b4b      	ldr	r3, [pc, #300]	@ (8006928 <I2C_DMAAbort+0x148>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	08db      	lsrs	r3, r3, #3
 8006800:	4a4a      	ldr	r2, [pc, #296]	@ (800692c <I2C_DMAAbort+0x14c>)
 8006802:	fba2 2303 	umull	r2, r3, r2, r3
 8006806:	0a1a      	lsrs	r2, r3, #8
 8006808:	4613      	mov	r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4413      	add	r3, r2
 800680e:	00da      	lsls	r2, r3, #3
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d106      	bne.n	8006828 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800681e:	f043 0220 	orr.w	r2, r3, #32
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8006826:	e00a      	b.n	800683e <I2C_DMAAbort+0x5e>
    }
    count--;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	3b01      	subs	r3, #1
 800682c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006838:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800683c:	d0ea      	beq.n	8006814 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800684a:	2200      	movs	r2, #0
 800684c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800685a:	2200      	movs	r2, #0
 800685c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800686c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	2200      	movs	r2, #0
 8006872:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006878:	2b00      	cmp	r3, #0
 800687a:	d003      	beq.n	8006884 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006880:	2200      	movs	r2, #0
 8006882:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006888:	2b00      	cmp	r3, #0
 800688a:	d003      	beq.n	8006894 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006890:	2200      	movs	r2, #0
 8006892:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f022 0201 	bic.w	r2, r2, #1
 80068a2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	2b60      	cmp	r3, #96	@ 0x60
 80068ae:	d10e      	bne.n	80068ce <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	2220      	movs	r2, #32
 80068b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	2200      	movs	r2, #0
 80068c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80068c6:	6978      	ldr	r0, [r7, #20]
 80068c8:	f7fe fae2 	bl	8004e90 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80068cc:	e027      	b.n	800691e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80068ce:	7cfb      	ldrb	r3, [r7, #19]
 80068d0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80068d4:	2b28      	cmp	r3, #40	@ 0x28
 80068d6:	d117      	bne.n	8006908 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f042 0201 	orr.w	r2, r2, #1
 80068e6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80068f6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	2200      	movs	r2, #0
 80068fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	2228      	movs	r2, #40	@ 0x28
 8006902:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006906:	e007      	b.n	8006918 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	2220      	movs	r2, #32
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006918:	6978      	ldr	r0, [r7, #20]
 800691a:	f7fe faaf 	bl	8004e7c <HAL_I2C_ErrorCallback>
}
 800691e:	bf00      	nop
 8006920:	3718      	adds	r7, #24
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	20000004 	.word	0x20000004
 800692c:	14f8b589 	.word	0x14f8b589

08006930 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	603b      	str	r3, [r7, #0]
 800693c:	4613      	mov	r3, r2
 800693e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006940:	e048      	b.n	80069d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006948:	d044      	beq.n	80069d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800694a:	f7fb fd87 	bl	800245c <HAL_GetTick>
 800694e:	4602      	mov	r2, r0
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	429a      	cmp	r2, r3
 8006958:	d302      	bcc.n	8006960 <I2C_WaitOnFlagUntilTimeout+0x30>
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d139      	bne.n	80069d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	0c1b      	lsrs	r3, r3, #16
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b01      	cmp	r3, #1
 8006968:	d10d      	bne.n	8006986 <I2C_WaitOnFlagUntilTimeout+0x56>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	695b      	ldr	r3, [r3, #20]
 8006970:	43da      	mvns	r2, r3
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	4013      	ands	r3, r2
 8006976:	b29b      	uxth	r3, r3
 8006978:	2b00      	cmp	r3, #0
 800697a:	bf0c      	ite	eq
 800697c:	2301      	moveq	r3, #1
 800697e:	2300      	movne	r3, #0
 8006980:	b2db      	uxtb	r3, r3
 8006982:	461a      	mov	r2, r3
 8006984:	e00c      	b.n	80069a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	43da      	mvns	r2, r3
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	4013      	ands	r3, r2
 8006992:	b29b      	uxth	r3, r3
 8006994:	2b00      	cmp	r3, #0
 8006996:	bf0c      	ite	eq
 8006998:	2301      	moveq	r3, #1
 800699a:	2300      	movne	r3, #0
 800699c:	b2db      	uxtb	r3, r3
 800699e:	461a      	mov	r2, r3
 80069a0:	79fb      	ldrb	r3, [r7, #7]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d116      	bne.n	80069d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2220      	movs	r2, #32
 80069b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069c0:	f043 0220 	orr.w	r2, r3, #32
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e023      	b.n	8006a1c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	0c1b      	lsrs	r3, r3, #16
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d10d      	bne.n	80069fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	695b      	ldr	r3, [r3, #20]
 80069e4:	43da      	mvns	r2, r3
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	4013      	ands	r3, r2
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	bf0c      	ite	eq
 80069f0:	2301      	moveq	r3, #1
 80069f2:	2300      	movne	r3, #0
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	461a      	mov	r2, r3
 80069f8:	e00c      	b.n	8006a14 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	43da      	mvns	r2, r3
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	4013      	ands	r3, r2
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	bf0c      	ite	eq
 8006a0c:	2301      	moveq	r3, #1
 8006a0e:	2300      	movne	r3, #0
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	461a      	mov	r2, r3
 8006a14:	79fb      	ldrb	r3, [r7, #7]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d093      	beq.n	8006942 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
 8006a30:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a32:	e071      	b.n	8006b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a42:	d123      	bne.n	8006a8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a52:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006a5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2220      	movs	r2, #32
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a78:	f043 0204 	orr.w	r2, r3, #4
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e067      	b.n	8006b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a92:	d041      	beq.n	8006b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a94:	f7fb fce2 	bl	800245c <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d302      	bcc.n	8006aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d136      	bne.n	8006b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	0c1b      	lsrs	r3, r3, #16
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d10c      	bne.n	8006ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	43da      	mvns	r2, r3
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	4013      	ands	r3, r2
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	bf14      	ite	ne
 8006ac6:	2301      	movne	r3, #1
 8006ac8:	2300      	moveq	r3, #0
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	e00b      	b.n	8006ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	43da      	mvns	r2, r3
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	4013      	ands	r3, r2
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	bf14      	ite	ne
 8006ae0:	2301      	movne	r3, #1
 8006ae2:	2300      	moveq	r3, #0
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d016      	beq.n	8006b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2220      	movs	r2, #32
 8006af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b04:	f043 0220 	orr.w	r2, r3, #32
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	e021      	b.n	8006b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	0c1b      	lsrs	r3, r3, #16
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d10c      	bne.n	8006b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	695b      	ldr	r3, [r3, #20]
 8006b28:	43da      	mvns	r2, r3
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	bf14      	ite	ne
 8006b34:	2301      	movne	r3, #1
 8006b36:	2300      	moveq	r3, #0
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	e00b      	b.n	8006b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	43da      	mvns	r2, r3
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	4013      	ands	r3, r2
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	bf14      	ite	ne
 8006b4e:	2301      	movne	r3, #1
 8006b50:	2300      	moveq	r3, #0
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f47f af6d 	bne.w	8006a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b70:	e034      	b.n	8006bdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f000 f915 	bl	8006da2 <I2C_IsAcknowledgeFailed>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d001      	beq.n	8006b82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e034      	b.n	8006bec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b88:	d028      	beq.n	8006bdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b8a:	f7fb fc67 	bl	800245c <HAL_GetTick>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d302      	bcc.n	8006ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d11d      	bne.n	8006bdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006baa:	2b80      	cmp	r3, #128	@ 0x80
 8006bac:	d016      	beq.n	8006bdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2220      	movs	r2, #32
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bc8:	f043 0220 	orr.w	r2, r3, #32
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e007      	b.n	8006bec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006be6:	2b80      	cmp	r3, #128	@ 0x80
 8006be8:	d1c3      	bne.n	8006b72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3710      	adds	r7, #16
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c00:	e034      	b.n	8006c6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f000 f8cd 	bl	8006da2 <I2C_IsAcknowledgeFailed>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d001      	beq.n	8006c12 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e034      	b.n	8006c7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c18:	d028      	beq.n	8006c6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c1a:	f7fb fc1f 	bl	800245c <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	68ba      	ldr	r2, [r7, #8]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d302      	bcc.n	8006c30 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d11d      	bne.n	8006c6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	f003 0304 	and.w	r3, r3, #4
 8006c3a:	2b04      	cmp	r3, #4
 8006c3c:	d016      	beq.n	8006c6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2220      	movs	r2, #32
 8006c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c58:	f043 0220 	orr.w	r2, r3, #32
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e007      	b.n	8006c7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	f003 0304 	and.w	r3, r3, #4
 8006c76:	2b04      	cmp	r3, #4
 8006c78:	d1c3      	bne.n	8006c02 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3710      	adds	r7, #16
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006c90:	4b13      	ldr	r3, [pc, #76]	@ (8006ce0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	08db      	lsrs	r3, r3, #3
 8006c96:	4a13      	ldr	r2, [pc, #76]	@ (8006ce4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006c98:	fba2 2303 	umull	r2, r3, r2, r3
 8006c9c:	0a1a      	lsrs	r2, r3, #8
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d107      	bne.n	8006cc2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cb6:	f043 0220 	orr.w	r2, r3, #32
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e008      	b.n	8006cd4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cd0:	d0e9      	beq.n	8006ca6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3714      	adds	r7, #20
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr
 8006ce0:	20000004 	.word	0x20000004
 8006ce4:	14f8b589 	.word	0x14f8b589

08006ce8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006cf4:	e049      	b.n	8006d8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	f003 0310 	and.w	r3, r3, #16
 8006d00:	2b10      	cmp	r3, #16
 8006d02:	d119      	bne.n	8006d38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f06f 0210 	mvn.w	r2, #16
 8006d0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2220      	movs	r2, #32
 8006d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e030      	b.n	8006d9a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d38:	f7fb fb90 	bl	800245c <HAL_GetTick>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d302      	bcc.n	8006d4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d11d      	bne.n	8006d8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	695b      	ldr	r3, [r3, #20]
 8006d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d58:	2b40      	cmp	r3, #64	@ 0x40
 8006d5a:	d016      	beq.n	8006d8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2220      	movs	r2, #32
 8006d66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d76:	f043 0220 	orr.w	r2, r3, #32
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e007      	b.n	8006d9a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	695b      	ldr	r3, [r3, #20]
 8006d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d94:	2b40      	cmp	r3, #64	@ 0x40
 8006d96:	d1ae      	bne.n	8006cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b083      	sub	sp, #12
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	695b      	ldr	r3, [r3, #20]
 8006db0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006db4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006db8:	d11b      	bne.n	8006df2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006dc2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2220      	movs	r2, #32
 8006dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dde:	f043 0204 	orr.w	r2, r3, #4
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e000      	b.n	8006df4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e0c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006e10:	d103      	bne.n	8006e1a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2201      	movs	r2, #1
 8006e16:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006e18:	e007      	b.n	8006e2a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e1e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006e22:	d102      	bne.n	8006e2a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2208      	movs	r2, #8
 8006e28:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006e2a:	bf00      	nop
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b086      	sub	sp, #24
 8006e3a:	af02      	add	r7, sp, #8
 8006e3c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d101      	bne.n	8006e48 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e101      	b.n	800704c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d106      	bne.n	8006e68 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f006 fbe2 	bl	800d62c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2203      	movs	r2, #3
 8006e6c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e76:	d102      	bne.n	8006e7e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4618      	mov	r0, r3
 8006e84:	f002 ff37 	bl	8009cf6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6818      	ldr	r0, [r3, #0]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	7c1a      	ldrb	r2, [r3, #16]
 8006e90:	f88d 2000 	strb.w	r2, [sp]
 8006e94:	3304      	adds	r3, #4
 8006e96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e98:	f002 fe16 	bl	8009ac8 <USB_CoreInit>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d005      	beq.n	8006eae <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e0ce      	b.n	800704c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f002 ff2f 	bl	8009d18 <USB_SetCurrentMode>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d005      	beq.n	8006ecc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e0bf      	b.n	800704c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ecc:	2300      	movs	r3, #0
 8006ece:	73fb      	strb	r3, [r7, #15]
 8006ed0:	e04a      	b.n	8006f68 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006ed2:	7bfa      	ldrb	r2, [r7, #15]
 8006ed4:	6879      	ldr	r1, [r7, #4]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	00db      	lsls	r3, r3, #3
 8006eda:	4413      	add	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	440b      	add	r3, r1
 8006ee0:	3315      	adds	r3, #21
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006ee6:	7bfa      	ldrb	r2, [r7, #15]
 8006ee8:	6879      	ldr	r1, [r7, #4]
 8006eea:	4613      	mov	r3, r2
 8006eec:	00db      	lsls	r3, r3, #3
 8006eee:	4413      	add	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	440b      	add	r3, r1
 8006ef4:	3314      	adds	r3, #20
 8006ef6:	7bfa      	ldrb	r2, [r7, #15]
 8006ef8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006efa:	7bfa      	ldrb	r2, [r7, #15]
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
 8006efe:	b298      	uxth	r0, r3
 8006f00:	6879      	ldr	r1, [r7, #4]
 8006f02:	4613      	mov	r3, r2
 8006f04:	00db      	lsls	r3, r3, #3
 8006f06:	4413      	add	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	440b      	add	r3, r1
 8006f0c:	332e      	adds	r3, #46	@ 0x2e
 8006f0e:	4602      	mov	r2, r0
 8006f10:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006f12:	7bfa      	ldrb	r2, [r7, #15]
 8006f14:	6879      	ldr	r1, [r7, #4]
 8006f16:	4613      	mov	r3, r2
 8006f18:	00db      	lsls	r3, r3, #3
 8006f1a:	4413      	add	r3, r2
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	440b      	add	r3, r1
 8006f20:	3318      	adds	r3, #24
 8006f22:	2200      	movs	r2, #0
 8006f24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006f26:	7bfa      	ldrb	r2, [r7, #15]
 8006f28:	6879      	ldr	r1, [r7, #4]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	00db      	lsls	r3, r3, #3
 8006f2e:	4413      	add	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	440b      	add	r3, r1
 8006f34:	331c      	adds	r3, #28
 8006f36:	2200      	movs	r2, #0
 8006f38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006f3a:	7bfa      	ldrb	r2, [r7, #15]
 8006f3c:	6879      	ldr	r1, [r7, #4]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	00db      	lsls	r3, r3, #3
 8006f42:	4413      	add	r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	440b      	add	r3, r1
 8006f48:	3320      	adds	r3, #32
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006f4e:	7bfa      	ldrb	r2, [r7, #15]
 8006f50:	6879      	ldr	r1, [r7, #4]
 8006f52:	4613      	mov	r3, r2
 8006f54:	00db      	lsls	r3, r3, #3
 8006f56:	4413      	add	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	440b      	add	r3, r1
 8006f5c:	3324      	adds	r3, #36	@ 0x24
 8006f5e:	2200      	movs	r2, #0
 8006f60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f62:	7bfb      	ldrb	r3, [r7, #15]
 8006f64:	3301      	adds	r3, #1
 8006f66:	73fb      	strb	r3, [r7, #15]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	791b      	ldrb	r3, [r3, #4]
 8006f6c:	7bfa      	ldrb	r2, [r7, #15]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d3af      	bcc.n	8006ed2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f72:	2300      	movs	r3, #0
 8006f74:	73fb      	strb	r3, [r7, #15]
 8006f76:	e044      	b.n	8007002 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006f78:	7bfa      	ldrb	r2, [r7, #15]
 8006f7a:	6879      	ldr	r1, [r7, #4]
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	00db      	lsls	r3, r3, #3
 8006f80:	4413      	add	r3, r2
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	440b      	add	r3, r1
 8006f86:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006f8e:	7bfa      	ldrb	r2, [r7, #15]
 8006f90:	6879      	ldr	r1, [r7, #4]
 8006f92:	4613      	mov	r3, r2
 8006f94:	00db      	lsls	r3, r3, #3
 8006f96:	4413      	add	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	440b      	add	r3, r1
 8006f9c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006fa0:	7bfa      	ldrb	r2, [r7, #15]
 8006fa2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006fa4:	7bfa      	ldrb	r2, [r7, #15]
 8006fa6:	6879      	ldr	r1, [r7, #4]
 8006fa8:	4613      	mov	r3, r2
 8006faa:	00db      	lsls	r3, r3, #3
 8006fac:	4413      	add	r3, r2
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	440b      	add	r3, r1
 8006fb2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006fba:	7bfa      	ldrb	r2, [r7, #15]
 8006fbc:	6879      	ldr	r1, [r7, #4]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	00db      	lsls	r3, r3, #3
 8006fc2:	4413      	add	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	440b      	add	r3, r1
 8006fc8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006fcc:	2200      	movs	r2, #0
 8006fce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006fd0:	7bfa      	ldrb	r2, [r7, #15]
 8006fd2:	6879      	ldr	r1, [r7, #4]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	00db      	lsls	r3, r3, #3
 8006fd8:	4413      	add	r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	440b      	add	r3, r1
 8006fde:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006fe6:	7bfa      	ldrb	r2, [r7, #15]
 8006fe8:	6879      	ldr	r1, [r7, #4]
 8006fea:	4613      	mov	r3, r2
 8006fec:	00db      	lsls	r3, r3, #3
 8006fee:	4413      	add	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	440b      	add	r3, r1
 8006ff4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
 8006ffe:	3301      	adds	r3, #1
 8007000:	73fb      	strb	r3, [r7, #15]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	791b      	ldrb	r3, [r3, #4]
 8007006:	7bfa      	ldrb	r2, [r7, #15]
 8007008:	429a      	cmp	r2, r3
 800700a:	d3b5      	bcc.n	8006f78 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6818      	ldr	r0, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	7c1a      	ldrb	r2, [r3, #16]
 8007014:	f88d 2000 	strb.w	r2, [sp]
 8007018:	3304      	adds	r3, #4
 800701a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800701c:	f002 fec8 	bl	8009db0 <USB_DevInit>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d005      	beq.n	8007032 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2202      	movs	r2, #2
 800702a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e00c      	b.n	800704c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4618      	mov	r0, r3
 8007046:	f003 ff12 	bl	800ae6e <USB_DevDisconnect>

  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007068:	2b01      	cmp	r3, #1
 800706a:	d101      	bne.n	8007070 <HAL_PCD_Start+0x1c>
 800706c:	2302      	movs	r3, #2
 800706e:	e022      	b.n	80070b6 <HAL_PCD_Start+0x62>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007080:	2b00      	cmp	r3, #0
 8007082:	d009      	beq.n	8007098 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007088:	2b01      	cmp	r3, #1
 800708a:	d105      	bne.n	8007098 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007090:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4618      	mov	r0, r3
 800709e:	f002 fe19 	bl	8009cd4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4618      	mov	r0, r3
 80070a8:	f003 fec0 	bl	800ae2c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80070be:	b590      	push	{r4, r7, lr}
 80070c0:	b08d      	sub	sp, #52	@ 0x34
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070cc:	6a3b      	ldr	r3, [r7, #32]
 80070ce:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f003 ff7e 	bl	800afd6 <USB_GetMode>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f040 848c 	bne.w	80079fa <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4618      	mov	r0, r3
 80070e8:	f003 fee2 	bl	800aeb0 <USB_ReadInterrupts>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f000 8482 	beq.w	80079f8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	0a1b      	lsrs	r3, r3, #8
 80070fe:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4618      	mov	r0, r3
 800710e:	f003 fecf 	bl	800aeb0 <USB_ReadInterrupts>
 8007112:	4603      	mov	r3, r0
 8007114:	f003 0302 	and.w	r3, r3, #2
 8007118:	2b02      	cmp	r3, #2
 800711a:	d107      	bne.n	800712c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	695a      	ldr	r2, [r3, #20]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f002 0202 	and.w	r2, r2, #2
 800712a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4618      	mov	r0, r3
 8007132:	f003 febd 	bl	800aeb0 <USB_ReadInterrupts>
 8007136:	4603      	mov	r3, r0
 8007138:	f003 0310 	and.w	r3, r3, #16
 800713c:	2b10      	cmp	r3, #16
 800713e:	d161      	bne.n	8007204 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	699a      	ldr	r2, [r3, #24]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f022 0210 	bic.w	r2, r2, #16
 800714e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007150:	6a3b      	ldr	r3, [r7, #32]
 8007152:	6a1b      	ldr	r3, [r3, #32]
 8007154:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	f003 020f 	and.w	r2, r3, #15
 800715c:	4613      	mov	r3, r2
 800715e:	00db      	lsls	r3, r3, #3
 8007160:	4413      	add	r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	4413      	add	r3, r2
 800716c:	3304      	adds	r3, #4
 800716e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007176:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800717a:	d124      	bne.n	80071c6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800717c:	69ba      	ldr	r2, [r7, #24]
 800717e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8007182:	4013      	ands	r3, r2
 8007184:	2b00      	cmp	r3, #0
 8007186:	d035      	beq.n	80071f4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	091b      	lsrs	r3, r3, #4
 8007190:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007192:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007196:	b29b      	uxth	r3, r3
 8007198:	461a      	mov	r2, r3
 800719a:	6a38      	ldr	r0, [r7, #32]
 800719c:	f003 fcf4 	bl	800ab88 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	68da      	ldr	r2, [r3, #12]
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	091b      	lsrs	r3, r3, #4
 80071a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071ac:	441a      	add	r2, r3
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	695a      	ldr	r2, [r3, #20]
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	091b      	lsrs	r3, r3, #4
 80071ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071be:	441a      	add	r2, r3
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	615a      	str	r2, [r3, #20]
 80071c4:	e016      	b.n	80071f4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80071cc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80071d0:	d110      	bne.n	80071f4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80071d8:	2208      	movs	r2, #8
 80071da:	4619      	mov	r1, r3
 80071dc:	6a38      	ldr	r0, [r7, #32]
 80071de:	f003 fcd3 	bl	800ab88 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	695a      	ldr	r2, [r3, #20]
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	091b      	lsrs	r3, r3, #4
 80071ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071ee:	441a      	add	r2, r3
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	699a      	ldr	r2, [r3, #24]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f042 0210 	orr.w	r2, r2, #16
 8007202:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4618      	mov	r0, r3
 800720a:	f003 fe51 	bl	800aeb0 <USB_ReadInterrupts>
 800720e:	4603      	mov	r3, r0
 8007210:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007214:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007218:	f040 80a7 	bne.w	800736a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800721c:	2300      	movs	r3, #0
 800721e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4618      	mov	r0, r3
 8007226:	f003 fe56 	bl	800aed6 <USB_ReadDevAllOutEpInterrupt>
 800722a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800722c:	e099      	b.n	8007362 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800722e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	f000 808e 	beq.w	8007356 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007240:	b2d2      	uxtb	r2, r2
 8007242:	4611      	mov	r1, r2
 8007244:	4618      	mov	r0, r3
 8007246:	f003 fe7a 	bl	800af3e <USB_ReadDevOutEPInterrupt>
 800724a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00c      	beq.n	8007270 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007258:	015a      	lsls	r2, r3, #5
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	4413      	add	r3, r2
 800725e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007262:	461a      	mov	r2, r3
 8007264:	2301      	movs	r3, #1
 8007266:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007268:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fea4 	bl	8007fb8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	f003 0308 	and.w	r3, r3, #8
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00c      	beq.n	8007294 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800727a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	4413      	add	r3, r2
 8007282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007286:	461a      	mov	r2, r3
 8007288:	2308      	movs	r3, #8
 800728a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800728c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 ff7a 	bl	8008188 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	f003 0310 	and.w	r3, r3, #16
 800729a:	2b00      	cmp	r3, #0
 800729c:	d008      	beq.n	80072b0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800729e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072aa:	461a      	mov	r2, r3
 80072ac:	2310      	movs	r3, #16
 80072ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	f003 0302 	and.w	r3, r3, #2
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d030      	beq.n	800731c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80072ba:	6a3b      	ldr	r3, [r7, #32]
 80072bc:	695b      	ldr	r3, [r3, #20]
 80072be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072c2:	2b80      	cmp	r3, #128	@ 0x80
 80072c4:	d109      	bne.n	80072da <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	69fa      	ldr	r2, [r7, #28]
 80072d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80072d8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80072da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072dc:	4613      	mov	r3, r2
 80072de:	00db      	lsls	r3, r3, #3
 80072e0:	4413      	add	r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	4413      	add	r3, r2
 80072ec:	3304      	adds	r3, #4
 80072ee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	78db      	ldrb	r3, [r3, #3]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d108      	bne.n	800730a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	2200      	movs	r2, #0
 80072fc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80072fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007300:	b2db      	uxtb	r3, r3
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f006 fa8d 	bl	800d824 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800730a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730c:	015a      	lsls	r2, r3, #5
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	4413      	add	r3, r2
 8007312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007316:	461a      	mov	r2, r3
 8007318:	2302      	movs	r3, #2
 800731a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	f003 0320 	and.w	r3, r3, #32
 8007322:	2b00      	cmp	r3, #0
 8007324:	d008      	beq.n	8007338 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007328:	015a      	lsls	r2, r3, #5
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	4413      	add	r3, r2
 800732e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007332:	461a      	mov	r2, r3
 8007334:	2320      	movs	r3, #32
 8007336:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d009      	beq.n	8007356 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007344:	015a      	lsls	r2, r3, #5
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	4413      	add	r3, r2
 800734a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800734e:	461a      	mov	r2, r3
 8007350:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007354:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007358:	3301      	adds	r3, #1
 800735a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800735c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800735e:	085b      	lsrs	r3, r3, #1
 8007360:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007364:	2b00      	cmp	r3, #0
 8007366:	f47f af62 	bne.w	800722e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4618      	mov	r0, r3
 8007370:	f003 fd9e 	bl	800aeb0 <USB_ReadInterrupts>
 8007374:	4603      	mov	r3, r0
 8007376:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800737a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800737e:	f040 80db 	bne.w	8007538 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4618      	mov	r0, r3
 8007388:	f003 fdbf 	bl	800af0a <USB_ReadDevAllInEpInterrupt>
 800738c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800738e:	2300      	movs	r3, #0
 8007390:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007392:	e0cd      	b.n	8007530 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007396:	f003 0301 	and.w	r3, r3, #1
 800739a:	2b00      	cmp	r3, #0
 800739c:	f000 80c2 	beq.w	8007524 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073a6:	b2d2      	uxtb	r2, r2
 80073a8:	4611      	mov	r1, r2
 80073aa:	4618      	mov	r0, r3
 80073ac:	f003 fde5 	bl	800af7a <USB_ReadDevInEPInterrupt>
 80073b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d057      	beq.n	800746c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80073bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073be:	f003 030f 	and.w	r3, r3, #15
 80073c2:	2201      	movs	r2, #1
 80073c4:	fa02 f303 	lsl.w	r3, r2, r3
 80073c8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	43db      	mvns	r3, r3
 80073d6:	69f9      	ldr	r1, [r7, #28]
 80073d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073dc:	4013      	ands	r3, r2
 80073de:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80073e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073ec:	461a      	mov	r2, r3
 80073ee:	2301      	movs	r3, #1
 80073f0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	799b      	ldrb	r3, [r3, #6]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d132      	bne.n	8007460 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80073fa:	6879      	ldr	r1, [r7, #4]
 80073fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073fe:	4613      	mov	r3, r2
 8007400:	00db      	lsls	r3, r3, #3
 8007402:	4413      	add	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	440b      	add	r3, r1
 8007408:	3320      	adds	r3, #32
 800740a:	6819      	ldr	r1, [r3, #0]
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007410:	4613      	mov	r3, r2
 8007412:	00db      	lsls	r3, r3, #3
 8007414:	4413      	add	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4403      	add	r3, r0
 800741a:	331c      	adds	r3, #28
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4419      	add	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007424:	4613      	mov	r3, r2
 8007426:	00db      	lsls	r3, r3, #3
 8007428:	4413      	add	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	4403      	add	r3, r0
 800742e:	3320      	adds	r3, #32
 8007430:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007434:	2b00      	cmp	r3, #0
 8007436:	d113      	bne.n	8007460 <HAL_PCD_IRQHandler+0x3a2>
 8007438:	6879      	ldr	r1, [r7, #4]
 800743a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800743c:	4613      	mov	r3, r2
 800743e:	00db      	lsls	r3, r3, #3
 8007440:	4413      	add	r3, r2
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	440b      	add	r3, r1
 8007446:	3324      	adds	r3, #36	@ 0x24
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d108      	bne.n	8007460 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6818      	ldr	r0, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007458:	461a      	mov	r2, r3
 800745a:	2101      	movs	r1, #1
 800745c:	f003 fdec 	bl	800b038 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007462:	b2db      	uxtb	r3, r3
 8007464:	4619      	mov	r1, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f006 f961 	bl	800d72e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	f003 0308 	and.w	r3, r3, #8
 8007472:	2b00      	cmp	r3, #0
 8007474:	d008      	beq.n	8007488 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007478:	015a      	lsls	r2, r3, #5
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	4413      	add	r3, r2
 800747e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007482:	461a      	mov	r2, r3
 8007484:	2308      	movs	r3, #8
 8007486:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	f003 0310 	and.w	r3, r3, #16
 800748e:	2b00      	cmp	r3, #0
 8007490:	d008      	beq.n	80074a4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007494:	015a      	lsls	r2, r3, #5
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	4413      	add	r3, r2
 800749a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800749e:	461a      	mov	r2, r3
 80074a0:	2310      	movs	r3, #16
 80074a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d008      	beq.n	80074c0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80074ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b0:	015a      	lsls	r2, r3, #5
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	4413      	add	r3, r2
 80074b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074ba:	461a      	mov	r2, r3
 80074bc:	2340      	movs	r3, #64	@ 0x40
 80074be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	f003 0302 	and.w	r3, r3, #2
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d023      	beq.n	8007512 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80074ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80074cc:	6a38      	ldr	r0, [r7, #32]
 80074ce:	f002 fdd3 	bl	800a078 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80074d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074d4:	4613      	mov	r3, r2
 80074d6:	00db      	lsls	r3, r3, #3
 80074d8:	4413      	add	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	3310      	adds	r3, #16
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	4413      	add	r3, r2
 80074e2:	3304      	adds	r3, #4
 80074e4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	78db      	ldrb	r3, [r3, #3]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d108      	bne.n	8007500 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	2200      	movs	r2, #0
 80074f2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80074f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	4619      	mov	r1, r3
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f006 f9a4 	bl	800d848 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007502:	015a      	lsls	r2, r3, #5
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	4413      	add	r3, r2
 8007508:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800750c:	461a      	mov	r2, r3
 800750e:	2302      	movs	r3, #2
 8007510:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007518:	2b00      	cmp	r3, #0
 800751a:	d003      	beq.n	8007524 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800751c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fcbd 	bl	8007e9e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007526:	3301      	adds	r3, #1
 8007528:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800752a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800752c:	085b      	lsrs	r3, r3, #1
 800752e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007532:	2b00      	cmp	r3, #0
 8007534:	f47f af2e 	bne.w	8007394 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4618      	mov	r0, r3
 800753e:	f003 fcb7 	bl	800aeb0 <USB_ReadInterrupts>
 8007542:	4603      	mov	r3, r0
 8007544:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007548:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800754c:	d122      	bne.n	8007594 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	69fa      	ldr	r2, [r7, #28]
 8007558:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800755c:	f023 0301 	bic.w	r3, r3, #1
 8007560:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007568:	2b01      	cmp	r3, #1
 800756a:	d108      	bne.n	800757e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007574:	2100      	movs	r1, #0
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fea4 	bl	80082c4 <HAL_PCDEx_LPM_Callback>
 800757c:	e002      	b.n	8007584 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f006 f942 	bl	800d808 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	695a      	ldr	r2, [r3, #20]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007592:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4618      	mov	r0, r3
 800759a:	f003 fc89 	bl	800aeb0 <USB_ReadInterrupts>
 800759e:	4603      	mov	r3, r0
 80075a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075a8:	d112      	bne.n	80075d0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	f003 0301 	and.w	r3, r3, #1
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d102      	bne.n	80075c0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f006 f8fe 	bl	800d7bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	695a      	ldr	r2, [r3, #20]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80075ce:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4618      	mov	r0, r3
 80075d6:	f003 fc6b 	bl	800aeb0 <USB_ReadInterrupts>
 80075da:	4603      	mov	r3, r0
 80075dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80075e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075e4:	f040 80b7 	bne.w	8007756 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	69fa      	ldr	r2, [r7, #28]
 80075f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075f6:	f023 0301 	bic.w	r3, r3, #1
 80075fa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2110      	movs	r1, #16
 8007602:	4618      	mov	r0, r3
 8007604:	f002 fd38 	bl	800a078 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007608:	2300      	movs	r3, #0
 800760a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800760c:	e046      	b.n	800769c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800760e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007610:	015a      	lsls	r2, r3, #5
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	4413      	add	r3, r2
 8007616:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800761a:	461a      	mov	r2, r3
 800761c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007620:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007624:	015a      	lsls	r2, r3, #5
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	4413      	add	r3, r2
 800762a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007632:	0151      	lsls	r1, r2, #5
 8007634:	69fa      	ldr	r2, [r7, #28]
 8007636:	440a      	add	r2, r1
 8007638:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800763c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007640:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007644:	015a      	lsls	r2, r3, #5
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	4413      	add	r3, r2
 800764a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800764e:	461a      	mov	r2, r3
 8007650:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007654:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	4413      	add	r3, r2
 800765e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007666:	0151      	lsls	r1, r2, #5
 8007668:	69fa      	ldr	r2, [r7, #28]
 800766a:	440a      	add	r2, r1
 800766c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007670:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007674:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007678:	015a      	lsls	r2, r3, #5
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	4413      	add	r3, r2
 800767e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007686:	0151      	lsls	r1, r2, #5
 8007688:	69fa      	ldr	r2, [r7, #28]
 800768a:	440a      	add	r2, r1
 800768c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007690:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007694:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007698:	3301      	adds	r3, #1
 800769a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	791b      	ldrb	r3, [r3, #4]
 80076a0:	461a      	mov	r2, r3
 80076a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d3b2      	bcc.n	800760e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ae:	69db      	ldr	r3, [r3, #28]
 80076b0:	69fa      	ldr	r2, [r7, #28]
 80076b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076b6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80076ba:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	7bdb      	ldrb	r3, [r3, #15]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d016      	beq.n	80076f2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076ce:	69fa      	ldr	r2, [r7, #28]
 80076d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076d4:	f043 030b 	orr.w	r3, r3, #11
 80076d8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076e4:	69fa      	ldr	r2, [r7, #28]
 80076e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076ea:	f043 030b 	orr.w	r3, r3, #11
 80076ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80076f0:	e015      	b.n	800771e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	69fa      	ldr	r2, [r7, #28]
 80076fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007700:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007704:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8007708:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	69fa      	ldr	r2, [r7, #28]
 8007714:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007718:	f043 030b 	orr.w	r3, r3, #11
 800771c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	69fa      	ldr	r2, [r7, #28]
 8007728:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800772c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007730:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6818      	ldr	r0, [r3, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007740:	461a      	mov	r2, r3
 8007742:	f003 fc79 	bl	800b038 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	695a      	ldr	r2, [r3, #20]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007754:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4618      	mov	r0, r3
 800775c:	f003 fba8 	bl	800aeb0 <USB_ReadInterrupts>
 8007760:	4603      	mov	r3, r0
 8007762:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007766:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800776a:	d123      	bne.n	80077b4 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4618      	mov	r0, r3
 8007772:	f003 fc3e 	bl	800aff2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4618      	mov	r0, r3
 800777c:	f002 fcf5 	bl	800a16a <USB_GetDevSpeed>
 8007780:	4603      	mov	r3, r0
 8007782:	461a      	mov	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681c      	ldr	r4, [r3, #0]
 800778c:	f001 f9ca 	bl	8008b24 <HAL_RCC_GetHCLKFreq>
 8007790:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007796:	461a      	mov	r2, r3
 8007798:	4620      	mov	r0, r4
 800779a:	f002 f9f9 	bl	8009b90 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f005 ffed 	bl	800d77e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	695a      	ldr	r2, [r3, #20]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80077b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4618      	mov	r0, r3
 80077ba:	f003 fb79 	bl	800aeb0 <USB_ReadInterrupts>
 80077be:	4603      	mov	r3, r0
 80077c0:	f003 0308 	and.w	r3, r3, #8
 80077c4:	2b08      	cmp	r3, #8
 80077c6:	d10a      	bne.n	80077de <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f005 ffca 	bl	800d762 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	695a      	ldr	r2, [r3, #20]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f002 0208 	and.w	r2, r2, #8
 80077dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4618      	mov	r0, r3
 80077e4:	f003 fb64 	bl	800aeb0 <USB_ReadInterrupts>
 80077e8:	4603      	mov	r3, r0
 80077ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077ee:	2b80      	cmp	r3, #128	@ 0x80
 80077f0:	d123      	bne.n	800783a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80077fa:	6a3b      	ldr	r3, [r7, #32]
 80077fc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80077fe:	2301      	movs	r3, #1
 8007800:	627b      	str	r3, [r7, #36]	@ 0x24
 8007802:	e014      	b.n	800782e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007804:	6879      	ldr	r1, [r7, #4]
 8007806:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007808:	4613      	mov	r3, r2
 800780a:	00db      	lsls	r3, r3, #3
 800780c:	4413      	add	r3, r2
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	440b      	add	r3, r1
 8007812:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	2b01      	cmp	r3, #1
 800781a:	d105      	bne.n	8007828 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800781c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800781e:	b2db      	uxtb	r3, r3
 8007820:	4619      	mov	r1, r3
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 fb0a 	bl	8007e3c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782a:	3301      	adds	r3, #1
 800782c:	627b      	str	r3, [r7, #36]	@ 0x24
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	791b      	ldrb	r3, [r3, #4]
 8007832:	461a      	mov	r2, r3
 8007834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007836:	4293      	cmp	r3, r2
 8007838:	d3e4      	bcc.n	8007804 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4618      	mov	r0, r3
 8007840:	f003 fb36 	bl	800aeb0 <USB_ReadInterrupts>
 8007844:	4603      	mov	r3, r0
 8007846:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800784a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800784e:	d13c      	bne.n	80078ca <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007850:	2301      	movs	r3, #1
 8007852:	627b      	str	r3, [r7, #36]	@ 0x24
 8007854:	e02b      	b.n	80078ae <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007858:	015a      	lsls	r2, r3, #5
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	4413      	add	r3, r2
 800785e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007866:	6879      	ldr	r1, [r7, #4]
 8007868:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800786a:	4613      	mov	r3, r2
 800786c:	00db      	lsls	r3, r3, #3
 800786e:	4413      	add	r3, r2
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	440b      	add	r3, r1
 8007874:	3318      	adds	r3, #24
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d115      	bne.n	80078a8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800787c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800787e:	2b00      	cmp	r3, #0
 8007880:	da12      	bge.n	80078a8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007882:	6879      	ldr	r1, [r7, #4]
 8007884:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007886:	4613      	mov	r3, r2
 8007888:	00db      	lsls	r3, r3, #3
 800788a:	4413      	add	r3, r2
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	440b      	add	r3, r1
 8007890:	3317      	adds	r3, #23
 8007892:	2201      	movs	r2, #1
 8007894:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007898:	b2db      	uxtb	r3, r3
 800789a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	4619      	mov	r1, r3
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 faca 	bl	8007e3c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80078a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078aa:	3301      	adds	r3, #1
 80078ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	791b      	ldrb	r3, [r3, #4]
 80078b2:	461a      	mov	r2, r3
 80078b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d3cd      	bcc.n	8007856 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	695a      	ldr	r2, [r3, #20]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80078c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4618      	mov	r0, r3
 80078d0:	f003 faee 	bl	800aeb0 <USB_ReadInterrupts>
 80078d4:	4603      	mov	r3, r0
 80078d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80078da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078de:	d156      	bne.n	800798e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80078e0:	2301      	movs	r3, #1
 80078e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80078e4:	e045      	b.n	8007972 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80078e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e8:	015a      	lsls	r2, r3, #5
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	4413      	add	r3, r2
 80078ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80078f6:	6879      	ldr	r1, [r7, #4]
 80078f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078fa:	4613      	mov	r3, r2
 80078fc:	00db      	lsls	r3, r3, #3
 80078fe:	4413      	add	r3, r2
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	440b      	add	r3, r1
 8007904:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	2b01      	cmp	r3, #1
 800790c:	d12e      	bne.n	800796c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800790e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007910:	2b00      	cmp	r3, #0
 8007912:	da2b      	bge.n	800796c <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	0c1a      	lsrs	r2, r3, #16
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800791e:	4053      	eors	r3, r2
 8007920:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007924:	2b00      	cmp	r3, #0
 8007926:	d121      	bne.n	800796c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007928:	6879      	ldr	r1, [r7, #4]
 800792a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800792c:	4613      	mov	r3, r2
 800792e:	00db      	lsls	r3, r3, #3
 8007930:	4413      	add	r3, r2
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	440b      	add	r3, r1
 8007936:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800793a:	2201      	movs	r2, #1
 800793c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800793e:	6a3b      	ldr	r3, [r7, #32]
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007946:	6a3b      	ldr	r3, [r7, #32]
 8007948:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800794a:	6a3b      	ldr	r3, [r7, #32]
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10a      	bne.n	800796c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	69fa      	ldr	r2, [r7, #28]
 8007960:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007964:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007968:	6053      	str	r3, [r2, #4]
            break;
 800796a:	e008      	b.n	800797e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800796c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800796e:	3301      	adds	r3, #1
 8007970:	627b      	str	r3, [r7, #36]	@ 0x24
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	791b      	ldrb	r3, [r3, #4]
 8007976:	461a      	mov	r2, r3
 8007978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800797a:	4293      	cmp	r3, r2
 800797c:	d3b3      	bcc.n	80078e6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	695a      	ldr	r2, [r3, #20]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800798c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4618      	mov	r0, r3
 8007994:	f003 fa8c 	bl	800aeb0 <USB_ReadInterrupts>
 8007998:	4603      	mov	r3, r0
 800799a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800799e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079a2:	d10a      	bne.n	80079ba <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f005 ff61 	bl	800d86c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	695a      	ldr	r2, [r3, #20]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80079b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4618      	mov	r0, r3
 80079c0:	f003 fa76 	bl	800aeb0 <USB_ReadInterrupts>
 80079c4:	4603      	mov	r3, r0
 80079c6:	f003 0304 	and.w	r3, r3, #4
 80079ca:	2b04      	cmp	r3, #4
 80079cc:	d115      	bne.n	80079fa <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	f003 0304 	and.w	r3, r3, #4
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d002      	beq.n	80079e6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f005 ff51 	bl	800d888 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	6859      	ldr	r1, [r3, #4]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	69ba      	ldr	r2, [r7, #24]
 80079f2:	430a      	orrs	r2, r1
 80079f4:	605a      	str	r2, [r3, #4]
 80079f6:	e000      	b.n	80079fa <HAL_PCD_IRQHandler+0x93c>
      return;
 80079f8:	bf00      	nop
    }
  }
}
 80079fa:	3734      	adds	r7, #52	@ 0x34
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd90      	pop	{r4, r7, pc}

08007a00 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d101      	bne.n	8007a1a <HAL_PCD_SetAddress+0x1a>
 8007a16:	2302      	movs	r3, #2
 8007a18:	e012      	b.n	8007a40 <HAL_PCD_SetAddress+0x40>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	78fa      	ldrb	r2, [r7, #3]
 8007a26:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	78fa      	ldrb	r2, [r7, #3]
 8007a2e:	4611      	mov	r1, r2
 8007a30:	4618      	mov	r0, r3
 8007a32:	f003 f9d5 	bl	800ade0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3708      	adds	r7, #8
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	4608      	mov	r0, r1
 8007a52:	4611      	mov	r1, r2
 8007a54:	461a      	mov	r2, r3
 8007a56:	4603      	mov	r3, r0
 8007a58:	70fb      	strb	r3, [r7, #3]
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	803b      	strh	r3, [r7, #0]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a62:	2300      	movs	r3, #0
 8007a64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007a66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	da0f      	bge.n	8007a8e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a6e:	78fb      	ldrb	r3, [r7, #3]
 8007a70:	f003 020f 	and.w	r2, r3, #15
 8007a74:	4613      	mov	r3, r2
 8007a76:	00db      	lsls	r3, r3, #3
 8007a78:	4413      	add	r3, r2
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	3310      	adds	r3, #16
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	4413      	add	r3, r2
 8007a82:	3304      	adds	r3, #4
 8007a84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	705a      	strb	r2, [r3, #1]
 8007a8c:	e00f      	b.n	8007aae <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a8e:	78fb      	ldrb	r3, [r7, #3]
 8007a90:	f003 020f 	and.w	r2, r3, #15
 8007a94:	4613      	mov	r3, r2
 8007a96:	00db      	lsls	r3, r3, #3
 8007a98:	4413      	add	r3, r2
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	3304      	adds	r3, #4
 8007aa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007aae:	78fb      	ldrb	r3, [r7, #3]
 8007ab0:	f003 030f 	and.w	r3, r3, #15
 8007ab4:	b2da      	uxtb	r2, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8007aba:	883b      	ldrh	r3, [r7, #0]
 8007abc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	78ba      	ldrb	r2, [r7, #2]
 8007ac8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	785b      	ldrb	r3, [r3, #1]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d004      	beq.n	8007adc <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007adc:	78bb      	ldrb	r3, [r7, #2]
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d102      	bne.n	8007ae8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d101      	bne.n	8007af6 <HAL_PCD_EP_Open+0xae>
 8007af2:	2302      	movs	r3, #2
 8007af4:	e00e      	b.n	8007b14 <HAL_PCD_EP_Open+0xcc>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2201      	movs	r2, #1
 8007afa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68f9      	ldr	r1, [r7, #12]
 8007b04:	4618      	mov	r0, r3
 8007b06:	f002 fb55 	bl	800a1b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8007b12:	7afb      	ldrb	r3, [r7, #11]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	460b      	mov	r3, r1
 8007b26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007b28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	da0f      	bge.n	8007b50 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b30:	78fb      	ldrb	r3, [r7, #3]
 8007b32:	f003 020f 	and.w	r2, r3, #15
 8007b36:	4613      	mov	r3, r2
 8007b38:	00db      	lsls	r3, r3, #3
 8007b3a:	4413      	add	r3, r2
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	3310      	adds	r3, #16
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	4413      	add	r3, r2
 8007b44:	3304      	adds	r3, #4
 8007b46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	705a      	strb	r2, [r3, #1]
 8007b4e:	e00f      	b.n	8007b70 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b50:	78fb      	ldrb	r3, [r7, #3]
 8007b52:	f003 020f 	and.w	r2, r3, #15
 8007b56:	4613      	mov	r3, r2
 8007b58:	00db      	lsls	r3, r3, #3
 8007b5a:	4413      	add	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	4413      	add	r3, r2
 8007b66:	3304      	adds	r3, #4
 8007b68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b70:	78fb      	ldrb	r3, [r7, #3]
 8007b72:	f003 030f 	and.w	r3, r3, #15
 8007b76:	b2da      	uxtb	r2, r3
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d101      	bne.n	8007b8a <HAL_PCD_EP_Close+0x6e>
 8007b86:	2302      	movs	r3, #2
 8007b88:	e00e      	b.n	8007ba8 <HAL_PCD_EP_Close+0x8c>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68f9      	ldr	r1, [r7, #12]
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f002 fb93 	bl	800a2c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	607a      	str	r2, [r7, #4]
 8007bba:	603b      	str	r3, [r7, #0]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007bc0:	7afb      	ldrb	r3, [r7, #11]
 8007bc2:	f003 020f 	and.w	r2, r3, #15
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	00db      	lsls	r3, r3, #3
 8007bca:	4413      	add	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007bd2:	68fa      	ldr	r2, [r7, #12]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	3304      	adds	r3, #4
 8007bd8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	683a      	ldr	r2, [r7, #0]
 8007be4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	2200      	movs	r2, #0
 8007bea:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007bf2:	7afb      	ldrb	r3, [r7, #11]
 8007bf4:	f003 030f 	and.w	r3, r3, #15
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	799b      	ldrb	r3, [r3, #6]
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d102      	bne.n	8007c0c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6818      	ldr	r0, [r3, #0]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	799b      	ldrb	r3, [r3, #6]
 8007c14:	461a      	mov	r2, r3
 8007c16:	6979      	ldr	r1, [r7, #20]
 8007c18:	f002 fc30 	bl	800a47c <USB_EPStartXfer>

  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3718      	adds	r7, #24
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b083      	sub	sp, #12
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
 8007c2e:	460b      	mov	r3, r1
 8007c30:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007c32:	78fb      	ldrb	r3, [r7, #3]
 8007c34:	f003 020f 	and.w	r2, r3, #15
 8007c38:	6879      	ldr	r1, [r7, #4]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	00db      	lsls	r3, r3, #3
 8007c3e:	4413      	add	r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	440b      	add	r3, r1
 8007c44:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8007c48:	681b      	ldr	r3, [r3, #0]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	370c      	adds	r7, #12
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr

08007c56 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b086      	sub	sp, #24
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	60f8      	str	r0, [r7, #12]
 8007c5e:	607a      	str	r2, [r7, #4]
 8007c60:	603b      	str	r3, [r7, #0]
 8007c62:	460b      	mov	r3, r1
 8007c64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c66:	7afb      	ldrb	r3, [r7, #11]
 8007c68:	f003 020f 	and.w	r2, r3, #15
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	00db      	lsls	r3, r3, #3
 8007c70:	4413      	add	r3, r2
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	3310      	adds	r3, #16
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	4413      	add	r3, r2
 8007c7a:	3304      	adds	r3, #4
 8007c7c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	683a      	ldr	r2, [r7, #0]
 8007c88:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	2201      	movs	r2, #1
 8007c94:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007c96:	7afb      	ldrb	r3, [r7, #11]
 8007c98:	f003 030f 	and.w	r3, r3, #15
 8007c9c:	b2da      	uxtb	r2, r3
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	799b      	ldrb	r3, [r3, #6]
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d102      	bne.n	8007cb0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6818      	ldr	r0, [r3, #0]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	799b      	ldrb	r3, [r3, #6]
 8007cb8:	461a      	mov	r2, r3
 8007cba:	6979      	ldr	r1, [r7, #20]
 8007cbc:	f002 fbde 	bl	800a47c <USB_EPStartXfer>

  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3718      	adds	r7, #24
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b084      	sub	sp, #16
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007cd6:	78fb      	ldrb	r3, [r7, #3]
 8007cd8:	f003 030f 	and.w	r3, r3, #15
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	7912      	ldrb	r2, [r2, #4]
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d901      	bls.n	8007ce8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e04f      	b.n	8007d88 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007ce8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	da0f      	bge.n	8007d10 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007cf0:	78fb      	ldrb	r3, [r7, #3]
 8007cf2:	f003 020f 	and.w	r2, r3, #15
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	00db      	lsls	r3, r3, #3
 8007cfa:	4413      	add	r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	3310      	adds	r3, #16
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	4413      	add	r3, r2
 8007d04:	3304      	adds	r3, #4
 8007d06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	705a      	strb	r2, [r3, #1]
 8007d0e:	e00d      	b.n	8007d2c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007d10:	78fa      	ldrb	r2, [r7, #3]
 8007d12:	4613      	mov	r3, r2
 8007d14:	00db      	lsls	r3, r3, #3
 8007d16:	4413      	add	r3, r2
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	4413      	add	r3, r2
 8007d22:	3304      	adds	r3, #4
 8007d24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d32:	78fb      	ldrb	r3, [r7, #3]
 8007d34:	f003 030f 	and.w	r3, r3, #15
 8007d38:	b2da      	uxtb	r2, r3
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d101      	bne.n	8007d4c <HAL_PCD_EP_SetStall+0x82>
 8007d48:	2302      	movs	r3, #2
 8007d4a:	e01d      	b.n	8007d88 <HAL_PCD_EP_SetStall+0xbe>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68f9      	ldr	r1, [r7, #12]
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f002 ff6c 	bl	800ac38 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007d60:	78fb      	ldrb	r3, [r7, #3]
 8007d62:	f003 030f 	and.w	r3, r3, #15
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d109      	bne.n	8007d7e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6818      	ldr	r0, [r3, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	7999      	ldrb	r1, [r3, #6]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007d78:	461a      	mov	r2, r3
 8007d7a:	f003 f95d 	bl	800b038 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3710      	adds	r7, #16
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	460b      	mov	r3, r1
 8007d9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007d9c:	78fb      	ldrb	r3, [r7, #3]
 8007d9e:	f003 030f 	and.w	r3, r3, #15
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	7912      	ldrb	r2, [r2, #4]
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d901      	bls.n	8007dae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e042      	b.n	8007e34 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007dae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	da0f      	bge.n	8007dd6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007db6:	78fb      	ldrb	r3, [r7, #3]
 8007db8:	f003 020f 	and.w	r2, r3, #15
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	00db      	lsls	r3, r3, #3
 8007dc0:	4413      	add	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	3310      	adds	r3, #16
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	4413      	add	r3, r2
 8007dca:	3304      	adds	r3, #4
 8007dcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	705a      	strb	r2, [r3, #1]
 8007dd4:	e00f      	b.n	8007df6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007dd6:	78fb      	ldrb	r3, [r7, #3]
 8007dd8:	f003 020f 	and.w	r2, r3, #15
 8007ddc:	4613      	mov	r3, r2
 8007dde:	00db      	lsls	r3, r3, #3
 8007de0:	4413      	add	r3, r2
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	4413      	add	r3, r2
 8007dec:	3304      	adds	r3, #4
 8007dee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2200      	movs	r2, #0
 8007df4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007dfc:	78fb      	ldrb	r3, [r7, #3]
 8007dfe:	f003 030f 	and.w	r3, r3, #15
 8007e02:	b2da      	uxtb	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d101      	bne.n	8007e16 <HAL_PCD_EP_ClrStall+0x86>
 8007e12:	2302      	movs	r3, #2
 8007e14:	e00e      	b.n	8007e34 <HAL_PCD_EP_ClrStall+0xa4>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68f9      	ldr	r1, [r7, #12]
 8007e24:	4618      	mov	r0, r3
 8007e26:	f002 ff75 	bl	800ad14 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	460b      	mov	r3, r1
 8007e46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007e48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	da0c      	bge.n	8007e6a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e50:	78fb      	ldrb	r3, [r7, #3]
 8007e52:	f003 020f 	and.w	r2, r3, #15
 8007e56:	4613      	mov	r3, r2
 8007e58:	00db      	lsls	r3, r3, #3
 8007e5a:	4413      	add	r3, r2
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	3310      	adds	r3, #16
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	4413      	add	r3, r2
 8007e64:	3304      	adds	r3, #4
 8007e66:	60fb      	str	r3, [r7, #12]
 8007e68:	e00c      	b.n	8007e84 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e6a:	78fb      	ldrb	r3, [r7, #3]
 8007e6c:	f003 020f 	and.w	r2, r3, #15
 8007e70:	4613      	mov	r3, r2
 8007e72:	00db      	lsls	r3, r3, #3
 8007e74:	4413      	add	r3, r2
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	4413      	add	r3, r2
 8007e80:	3304      	adds	r3, #4
 8007e82:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68f9      	ldr	r1, [r7, #12]
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f002 fd94 	bl	800a9b8 <USB_EPStopXfer>
 8007e90:	4603      	mov	r3, r0
 8007e92:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007e94:	7afb      	ldrb	r3, [r7, #11]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b08a      	sub	sp, #40	@ 0x28
 8007ea2:	af02      	add	r7, sp, #8
 8007ea4:	6078      	str	r0, [r7, #4]
 8007ea6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007eb2:	683a      	ldr	r2, [r7, #0]
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	00db      	lsls	r3, r3, #3
 8007eb8:	4413      	add	r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	3310      	adds	r3, #16
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	3304      	adds	r3, #4
 8007ec4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	695a      	ldr	r2, [r3, #20]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d901      	bls.n	8007ed6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e06b      	b.n	8007fae <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	691a      	ldr	r2, [r3, #16]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	695b      	ldr	r3, [r3, #20]
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	69fa      	ldr	r2, [r7, #28]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d902      	bls.n	8007ef2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	3303      	adds	r3, #3
 8007ef6:	089b      	lsrs	r3, r3, #2
 8007ef8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007efa:	e02a      	b.n	8007f52 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	691a      	ldr	r2, [r3, #16]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	695b      	ldr	r3, [r3, #20]
 8007f04:	1ad3      	subs	r3, r2, r3
 8007f06:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	69fa      	ldr	r2, [r7, #28]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d902      	bls.n	8007f18 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	3303      	adds	r3, #3
 8007f1c:	089b      	lsrs	r3, r3, #2
 8007f1e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	68d9      	ldr	r1, [r3, #12]
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	b2da      	uxtb	r2, r3
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007f30:	9300      	str	r3, [sp, #0]
 8007f32:	4603      	mov	r3, r0
 8007f34:	6978      	ldr	r0, [r7, #20]
 8007f36:	f002 fde9 	bl	800ab0c <USB_WritePacket>

    ep->xfer_buff  += len;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	68da      	ldr	r2, [r3, #12]
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	441a      	add	r2, r3
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	695a      	ldr	r2, [r3, #20]
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	441a      	add	r2, r3
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	015a      	lsls	r2, r3, #5
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	4413      	add	r3, r2
 8007f5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f5e:	699b      	ldr	r3, [r3, #24]
 8007f60:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007f62:	69ba      	ldr	r2, [r7, #24]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d809      	bhi.n	8007f7c <PCD_WriteEmptyTxFifo+0xde>
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	695a      	ldr	r2, [r3, #20]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d203      	bcs.n	8007f7c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1bf      	bne.n	8007efc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	691a      	ldr	r2, [r3, #16]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	695b      	ldr	r3, [r3, #20]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d811      	bhi.n	8007fac <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	f003 030f 	and.w	r3, r3, #15
 8007f8e:	2201      	movs	r2, #1
 8007f90:	fa02 f303 	lsl.w	r3, r2, r3
 8007f94:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	43db      	mvns	r3, r3
 8007fa2:	6939      	ldr	r1, [r7, #16]
 8007fa4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007fa8:	4013      	ands	r3, r2
 8007faa:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3720      	adds	r7, #32
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
	...

08007fb8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b088      	sub	sp, #32
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	333c      	adds	r3, #60	@ 0x3c
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	015a      	lsls	r2, r3, #5
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	4413      	add	r3, r2
 8007fde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	799b      	ldrb	r3, [r3, #6]
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d17b      	bne.n	80080e6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	f003 0308 	and.w	r3, r3, #8
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d015      	beq.n	8008024 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	4a61      	ldr	r2, [pc, #388]	@ (8008180 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	f240 80b9 	bls.w	8008174 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008008:	2b00      	cmp	r3, #0
 800800a:	f000 80b3 	beq.w	8008174 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	015a      	lsls	r2, r3, #5
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	4413      	add	r3, r2
 8008016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800801a:	461a      	mov	r2, r3
 800801c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008020:	6093      	str	r3, [r2, #8]
 8008022:	e0a7      	b.n	8008174 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	f003 0320 	and.w	r3, r3, #32
 800802a:	2b00      	cmp	r3, #0
 800802c:	d009      	beq.n	8008042 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	015a      	lsls	r2, r3, #5
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	4413      	add	r3, r2
 8008036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800803a:	461a      	mov	r2, r3
 800803c:	2320      	movs	r3, #32
 800803e:	6093      	str	r3, [r2, #8]
 8008040:	e098      	b.n	8008174 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008048:	2b00      	cmp	r3, #0
 800804a:	f040 8093 	bne.w	8008174 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	4a4b      	ldr	r2, [pc, #300]	@ (8008180 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d90f      	bls.n	8008076 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00a      	beq.n	8008076 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	015a      	lsls	r2, r3, #5
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	4413      	add	r3, r2
 8008068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800806c:	461a      	mov	r2, r3
 800806e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008072:	6093      	str	r3, [r2, #8]
 8008074:	e07e      	b.n	8008174 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008076:	683a      	ldr	r2, [r7, #0]
 8008078:	4613      	mov	r3, r2
 800807a:	00db      	lsls	r3, r3, #3
 800807c:	4413      	add	r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	4413      	add	r3, r2
 8008088:	3304      	adds	r3, #4
 800808a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6a1a      	ldr	r2, [r3, #32]
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	0159      	lsls	r1, r3, #5
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	440b      	add	r3, r1
 8008098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080a2:	1ad2      	subs	r2, r2, r3
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d114      	bne.n	80080d8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d109      	bne.n	80080ca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6818      	ldr	r0, [r3, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80080c0:	461a      	mov	r2, r3
 80080c2:	2101      	movs	r1, #1
 80080c4:	f002 ffb8 	bl	800b038 <USB_EP0_OutStart>
 80080c8:	e006      	b.n	80080d8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	68da      	ldr	r2, [r3, #12]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	695b      	ldr	r3, [r3, #20]
 80080d2:	441a      	add	r2, r3
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	4619      	mov	r1, r3
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f005 fb0a 	bl	800d6f8 <HAL_PCD_DataOutStageCallback>
 80080e4:	e046      	b.n	8008174 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	4a26      	ldr	r2, [pc, #152]	@ (8008184 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d124      	bne.n	8008138 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00a      	beq.n	800810e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	015a      	lsls	r2, r3, #5
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	4413      	add	r3, r2
 8008100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008104:	461a      	mov	r2, r3
 8008106:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800810a:	6093      	str	r3, [r2, #8]
 800810c:	e032      	b.n	8008174 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	f003 0320 	and.w	r3, r3, #32
 8008114:	2b00      	cmp	r3, #0
 8008116:	d008      	beq.n	800812a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	015a      	lsls	r2, r3, #5
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	4413      	add	r3, r2
 8008120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008124:	461a      	mov	r2, r3
 8008126:	2320      	movs	r3, #32
 8008128:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	b2db      	uxtb	r3, r3
 800812e:	4619      	mov	r1, r3
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f005 fae1 	bl	800d6f8 <HAL_PCD_DataOutStageCallback>
 8008136:	e01d      	b.n	8008174 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d114      	bne.n	8008168 <PCD_EP_OutXfrComplete_int+0x1b0>
 800813e:	6879      	ldr	r1, [r7, #4]
 8008140:	683a      	ldr	r2, [r7, #0]
 8008142:	4613      	mov	r3, r2
 8008144:	00db      	lsls	r3, r3, #3
 8008146:	4413      	add	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	440b      	add	r3, r1
 800814c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d108      	bne.n	8008168 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6818      	ldr	r0, [r3, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008160:	461a      	mov	r2, r3
 8008162:	2100      	movs	r1, #0
 8008164:	f002 ff68 	bl	800b038 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	b2db      	uxtb	r3, r3
 800816c:	4619      	mov	r1, r3
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f005 fac2 	bl	800d6f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3720      	adds	r7, #32
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	4f54300a 	.word	0x4f54300a
 8008184:	4f54310a 	.word	0x4f54310a

08008188 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b086      	sub	sp, #24
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	333c      	adds	r3, #60	@ 0x3c
 80081a0:	3304      	adds	r3, #4
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	015a      	lsls	r2, r3, #5
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	4413      	add	r3, r2
 80081ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	4a15      	ldr	r2, [pc, #84]	@ (8008210 <PCD_EP_OutSetupPacket_int+0x88>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d90e      	bls.n	80081dc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d009      	beq.n	80081dc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	015a      	lsls	r2, r3, #5
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	4413      	add	r3, r2
 80081d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081d4:	461a      	mov	r2, r3
 80081d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f005 fa79 	bl	800d6d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	4a0a      	ldr	r2, [pc, #40]	@ (8008210 <PCD_EP_OutSetupPacket_int+0x88>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d90c      	bls.n	8008204 <PCD_EP_OutSetupPacket_int+0x7c>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	799b      	ldrb	r3, [r3, #6]
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d108      	bne.n	8008204 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6818      	ldr	r0, [r3, #0]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80081fc:	461a      	mov	r2, r3
 80081fe:	2101      	movs	r1, #1
 8008200:	f002 ff1a 	bl	800b038 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3718      	adds	r7, #24
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	4f54300a 	.word	0x4f54300a

08008214 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008214:	b480      	push	{r7}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	460b      	mov	r3, r1
 800821e:	70fb      	strb	r3, [r7, #3]
 8008220:	4613      	mov	r3, r2
 8008222:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800822a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800822c:	78fb      	ldrb	r3, [r7, #3]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d107      	bne.n	8008242 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008232:	883b      	ldrh	r3, [r7, #0]
 8008234:	0419      	lsls	r1, r3, #16
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	430a      	orrs	r2, r1
 800823e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008240:	e028      	b.n	8008294 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008248:	0c1b      	lsrs	r3, r3, #16
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	4413      	add	r3, r2
 800824e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008250:	2300      	movs	r3, #0
 8008252:	73fb      	strb	r3, [r7, #15]
 8008254:	e00d      	b.n	8008272 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	7bfb      	ldrb	r3, [r7, #15]
 800825c:	3340      	adds	r3, #64	@ 0x40
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	4413      	add	r3, r2
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	0c1b      	lsrs	r3, r3, #16
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	4413      	add	r3, r2
 800826a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800826c:	7bfb      	ldrb	r3, [r7, #15]
 800826e:	3301      	adds	r3, #1
 8008270:	73fb      	strb	r3, [r7, #15]
 8008272:	7bfa      	ldrb	r2, [r7, #15]
 8008274:	78fb      	ldrb	r3, [r7, #3]
 8008276:	3b01      	subs	r3, #1
 8008278:	429a      	cmp	r2, r3
 800827a:	d3ec      	bcc.n	8008256 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800827c:	883b      	ldrh	r3, [r7, #0]
 800827e:	0418      	lsls	r0, r3, #16
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6819      	ldr	r1, [r3, #0]
 8008284:	78fb      	ldrb	r3, [r7, #3]
 8008286:	3b01      	subs	r3, #1
 8008288:	68ba      	ldr	r2, [r7, #8]
 800828a:	4302      	orrs	r2, r0
 800828c:	3340      	adds	r3, #64	@ 0x40
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	440b      	add	r3, r1
 8008292:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80082a2:	b480      	push	{r7}
 80082a4:	b083      	sub	sp, #12
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
 80082aa:	460b      	mov	r3, r1
 80082ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	887a      	ldrh	r2, [r7, #2]
 80082b4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	460b      	mov	r3, r1
 80082ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80082d0:	bf00      	nop
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d101      	bne.n	80082ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e267      	b.n	80087be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f003 0301 	and.w	r3, r3, #1
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d075      	beq.n	80083e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80082fa:	4b88      	ldr	r3, [pc, #544]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	f003 030c 	and.w	r3, r3, #12
 8008302:	2b04      	cmp	r3, #4
 8008304:	d00c      	beq.n	8008320 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008306:	4b85      	ldr	r3, [pc, #532]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800830e:	2b08      	cmp	r3, #8
 8008310:	d112      	bne.n	8008338 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008312:	4b82      	ldr	r3, [pc, #520]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800831a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800831e:	d10b      	bne.n	8008338 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008320:	4b7e      	ldr	r3, [pc, #504]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008328:	2b00      	cmp	r3, #0
 800832a:	d05b      	beq.n	80083e4 <HAL_RCC_OscConfig+0x108>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d157      	bne.n	80083e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	e242      	b.n	80087be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008340:	d106      	bne.n	8008350 <HAL_RCC_OscConfig+0x74>
 8008342:	4b76      	ldr	r3, [pc, #472]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a75      	ldr	r2, [pc, #468]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 8008348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800834c:	6013      	str	r3, [r2, #0]
 800834e:	e01d      	b.n	800838c <HAL_RCC_OscConfig+0xb0>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008358:	d10c      	bne.n	8008374 <HAL_RCC_OscConfig+0x98>
 800835a:	4b70      	ldr	r3, [pc, #448]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a6f      	ldr	r2, [pc, #444]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 8008360:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008364:	6013      	str	r3, [r2, #0]
 8008366:	4b6d      	ldr	r3, [pc, #436]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a6c      	ldr	r2, [pc, #432]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 800836c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008370:	6013      	str	r3, [r2, #0]
 8008372:	e00b      	b.n	800838c <HAL_RCC_OscConfig+0xb0>
 8008374:	4b69      	ldr	r3, [pc, #420]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a68      	ldr	r2, [pc, #416]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 800837a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800837e:	6013      	str	r3, [r2, #0]
 8008380:	4b66      	ldr	r3, [pc, #408]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a65      	ldr	r2, [pc, #404]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 8008386:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800838a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d013      	beq.n	80083bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008394:	f7fa f862 	bl	800245c <HAL_GetTick>
 8008398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800839a:	e008      	b.n	80083ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800839c:	f7fa f85e 	bl	800245c <HAL_GetTick>
 80083a0:	4602      	mov	r2, r0
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	2b64      	cmp	r3, #100	@ 0x64
 80083a8:	d901      	bls.n	80083ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80083aa:	2303      	movs	r3, #3
 80083ac:	e207      	b.n	80087be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083ae:	4b5b      	ldr	r3, [pc, #364]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d0f0      	beq.n	800839c <HAL_RCC_OscConfig+0xc0>
 80083ba:	e014      	b.n	80083e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083bc:	f7fa f84e 	bl	800245c <HAL_GetTick>
 80083c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083c2:	e008      	b.n	80083d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083c4:	f7fa f84a 	bl	800245c <HAL_GetTick>
 80083c8:	4602      	mov	r2, r0
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	1ad3      	subs	r3, r2, r3
 80083ce:	2b64      	cmp	r3, #100	@ 0x64
 80083d0:	d901      	bls.n	80083d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80083d2:	2303      	movs	r3, #3
 80083d4:	e1f3      	b.n	80087be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083d6:	4b51      	ldr	r3, [pc, #324]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1f0      	bne.n	80083c4 <HAL_RCC_OscConfig+0xe8>
 80083e2:	e000      	b.n	80083e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0302 	and.w	r3, r3, #2
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d063      	beq.n	80084ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80083f2:	4b4a      	ldr	r3, [pc, #296]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	f003 030c 	and.w	r3, r3, #12
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00b      	beq.n	8008416 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80083fe:	4b47      	ldr	r3, [pc, #284]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008406:	2b08      	cmp	r3, #8
 8008408:	d11c      	bne.n	8008444 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800840a:	4b44      	ldr	r3, [pc, #272]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008412:	2b00      	cmp	r3, #0
 8008414:	d116      	bne.n	8008444 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008416:	4b41      	ldr	r3, [pc, #260]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f003 0302 	and.w	r3, r3, #2
 800841e:	2b00      	cmp	r3, #0
 8008420:	d005      	beq.n	800842e <HAL_RCC_OscConfig+0x152>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	2b01      	cmp	r3, #1
 8008428:	d001      	beq.n	800842e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	e1c7      	b.n	80087be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800842e:	4b3b      	ldr	r3, [pc, #236]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	00db      	lsls	r3, r3, #3
 800843c:	4937      	ldr	r1, [pc, #220]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 800843e:	4313      	orrs	r3, r2
 8008440:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008442:	e03a      	b.n	80084ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d020      	beq.n	800848e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800844c:	4b34      	ldr	r3, [pc, #208]	@ (8008520 <HAL_RCC_OscConfig+0x244>)
 800844e:	2201      	movs	r2, #1
 8008450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008452:	f7fa f803 	bl	800245c <HAL_GetTick>
 8008456:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008458:	e008      	b.n	800846c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800845a:	f7f9 ffff 	bl	800245c <HAL_GetTick>
 800845e:	4602      	mov	r2, r0
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	1ad3      	subs	r3, r2, r3
 8008464:	2b02      	cmp	r3, #2
 8008466:	d901      	bls.n	800846c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008468:	2303      	movs	r3, #3
 800846a:	e1a8      	b.n	80087be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800846c:	4b2b      	ldr	r3, [pc, #172]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 0302 	and.w	r3, r3, #2
 8008474:	2b00      	cmp	r3, #0
 8008476:	d0f0      	beq.n	800845a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008478:	4b28      	ldr	r3, [pc, #160]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	00db      	lsls	r3, r3, #3
 8008486:	4925      	ldr	r1, [pc, #148]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 8008488:	4313      	orrs	r3, r2
 800848a:	600b      	str	r3, [r1, #0]
 800848c:	e015      	b.n	80084ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800848e:	4b24      	ldr	r3, [pc, #144]	@ (8008520 <HAL_RCC_OscConfig+0x244>)
 8008490:	2200      	movs	r2, #0
 8008492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008494:	f7f9 ffe2 	bl	800245c <HAL_GetTick>
 8008498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800849a:	e008      	b.n	80084ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800849c:	f7f9 ffde 	bl	800245c <HAL_GetTick>
 80084a0:	4602      	mov	r2, r0
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	1ad3      	subs	r3, r2, r3
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	d901      	bls.n	80084ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80084aa:	2303      	movs	r3, #3
 80084ac:	e187      	b.n	80087be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084ae:	4b1b      	ldr	r3, [pc, #108]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f003 0302 	and.w	r3, r3, #2
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d1f0      	bne.n	800849c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f003 0308 	and.w	r3, r3, #8
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d036      	beq.n	8008534 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d016      	beq.n	80084fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80084ce:	4b15      	ldr	r3, [pc, #84]	@ (8008524 <HAL_RCC_OscConfig+0x248>)
 80084d0:	2201      	movs	r2, #1
 80084d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084d4:	f7f9 ffc2 	bl	800245c <HAL_GetTick>
 80084d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084da:	e008      	b.n	80084ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084dc:	f7f9 ffbe 	bl	800245c <HAL_GetTick>
 80084e0:	4602      	mov	r2, r0
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	1ad3      	subs	r3, r2, r3
 80084e6:	2b02      	cmp	r3, #2
 80084e8:	d901      	bls.n	80084ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80084ea:	2303      	movs	r3, #3
 80084ec:	e167      	b.n	80087be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084ee:	4b0b      	ldr	r3, [pc, #44]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 80084f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084f2:	f003 0302 	and.w	r3, r3, #2
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d0f0      	beq.n	80084dc <HAL_RCC_OscConfig+0x200>
 80084fa:	e01b      	b.n	8008534 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084fc:	4b09      	ldr	r3, [pc, #36]	@ (8008524 <HAL_RCC_OscConfig+0x248>)
 80084fe:	2200      	movs	r2, #0
 8008500:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008502:	f7f9 ffab 	bl	800245c <HAL_GetTick>
 8008506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008508:	e00e      	b.n	8008528 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800850a:	f7f9 ffa7 	bl	800245c <HAL_GetTick>
 800850e:	4602      	mov	r2, r0
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	2b02      	cmp	r3, #2
 8008516:	d907      	bls.n	8008528 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008518:	2303      	movs	r3, #3
 800851a:	e150      	b.n	80087be <HAL_RCC_OscConfig+0x4e2>
 800851c:	40023800 	.word	0x40023800
 8008520:	42470000 	.word	0x42470000
 8008524:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008528:	4b88      	ldr	r3, [pc, #544]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 800852a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800852c:	f003 0302 	and.w	r3, r3, #2
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1ea      	bne.n	800850a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f003 0304 	and.w	r3, r3, #4
 800853c:	2b00      	cmp	r3, #0
 800853e:	f000 8097 	beq.w	8008670 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008542:	2300      	movs	r3, #0
 8008544:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008546:	4b81      	ldr	r3, [pc, #516]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 8008548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800854a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800854e:	2b00      	cmp	r3, #0
 8008550:	d10f      	bne.n	8008572 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008552:	2300      	movs	r3, #0
 8008554:	60bb      	str	r3, [r7, #8]
 8008556:	4b7d      	ldr	r3, [pc, #500]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 8008558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800855a:	4a7c      	ldr	r2, [pc, #496]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 800855c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008560:	6413      	str	r3, [r2, #64]	@ 0x40
 8008562:	4b7a      	ldr	r3, [pc, #488]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 8008564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800856a:	60bb      	str	r3, [r7, #8]
 800856c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800856e:	2301      	movs	r3, #1
 8008570:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008572:	4b77      	ldr	r3, [pc, #476]	@ (8008750 <HAL_RCC_OscConfig+0x474>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800857a:	2b00      	cmp	r3, #0
 800857c:	d118      	bne.n	80085b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800857e:	4b74      	ldr	r3, [pc, #464]	@ (8008750 <HAL_RCC_OscConfig+0x474>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a73      	ldr	r2, [pc, #460]	@ (8008750 <HAL_RCC_OscConfig+0x474>)
 8008584:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800858a:	f7f9 ff67 	bl	800245c <HAL_GetTick>
 800858e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008590:	e008      	b.n	80085a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008592:	f7f9 ff63 	bl	800245c <HAL_GetTick>
 8008596:	4602      	mov	r2, r0
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	1ad3      	subs	r3, r2, r3
 800859c:	2b02      	cmp	r3, #2
 800859e:	d901      	bls.n	80085a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80085a0:	2303      	movs	r3, #3
 80085a2:	e10c      	b.n	80087be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085a4:	4b6a      	ldr	r3, [pc, #424]	@ (8008750 <HAL_RCC_OscConfig+0x474>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d0f0      	beq.n	8008592 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d106      	bne.n	80085c6 <HAL_RCC_OscConfig+0x2ea>
 80085b8:	4b64      	ldr	r3, [pc, #400]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 80085ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085bc:	4a63      	ldr	r2, [pc, #396]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 80085be:	f043 0301 	orr.w	r3, r3, #1
 80085c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80085c4:	e01c      	b.n	8008600 <HAL_RCC_OscConfig+0x324>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	2b05      	cmp	r3, #5
 80085cc:	d10c      	bne.n	80085e8 <HAL_RCC_OscConfig+0x30c>
 80085ce:	4b5f      	ldr	r3, [pc, #380]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 80085d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085d2:	4a5e      	ldr	r2, [pc, #376]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 80085d4:	f043 0304 	orr.w	r3, r3, #4
 80085d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80085da:	4b5c      	ldr	r3, [pc, #368]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 80085dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085de:	4a5b      	ldr	r2, [pc, #364]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 80085e0:	f043 0301 	orr.w	r3, r3, #1
 80085e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80085e6:	e00b      	b.n	8008600 <HAL_RCC_OscConfig+0x324>
 80085e8:	4b58      	ldr	r3, [pc, #352]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 80085ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085ec:	4a57      	ldr	r2, [pc, #348]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 80085ee:	f023 0301 	bic.w	r3, r3, #1
 80085f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80085f4:	4b55      	ldr	r3, [pc, #340]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 80085f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085f8:	4a54      	ldr	r2, [pc, #336]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 80085fa:	f023 0304 	bic.w	r3, r3, #4
 80085fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d015      	beq.n	8008634 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008608:	f7f9 ff28 	bl	800245c <HAL_GetTick>
 800860c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800860e:	e00a      	b.n	8008626 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008610:	f7f9 ff24 	bl	800245c <HAL_GetTick>
 8008614:	4602      	mov	r2, r0
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	1ad3      	subs	r3, r2, r3
 800861a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800861e:	4293      	cmp	r3, r2
 8008620:	d901      	bls.n	8008626 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008622:	2303      	movs	r3, #3
 8008624:	e0cb      	b.n	80087be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008626:	4b49      	ldr	r3, [pc, #292]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 8008628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800862a:	f003 0302 	and.w	r3, r3, #2
 800862e:	2b00      	cmp	r3, #0
 8008630:	d0ee      	beq.n	8008610 <HAL_RCC_OscConfig+0x334>
 8008632:	e014      	b.n	800865e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008634:	f7f9 ff12 	bl	800245c <HAL_GetTick>
 8008638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800863a:	e00a      	b.n	8008652 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800863c:	f7f9 ff0e 	bl	800245c <HAL_GetTick>
 8008640:	4602      	mov	r2, r0
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	f241 3288 	movw	r2, #5000	@ 0x1388
 800864a:	4293      	cmp	r3, r2
 800864c:	d901      	bls.n	8008652 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800864e:	2303      	movs	r3, #3
 8008650:	e0b5      	b.n	80087be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008652:	4b3e      	ldr	r3, [pc, #248]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 8008654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008656:	f003 0302 	and.w	r3, r3, #2
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1ee      	bne.n	800863c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800865e:	7dfb      	ldrb	r3, [r7, #23]
 8008660:	2b01      	cmp	r3, #1
 8008662:	d105      	bne.n	8008670 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008664:	4b39      	ldr	r3, [pc, #228]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 8008666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008668:	4a38      	ldr	r2, [pc, #224]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 800866a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800866e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	2b00      	cmp	r3, #0
 8008676:	f000 80a1 	beq.w	80087bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800867a:	4b34      	ldr	r3, [pc, #208]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	f003 030c 	and.w	r3, r3, #12
 8008682:	2b08      	cmp	r3, #8
 8008684:	d05c      	beq.n	8008740 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	699b      	ldr	r3, [r3, #24]
 800868a:	2b02      	cmp	r3, #2
 800868c:	d141      	bne.n	8008712 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800868e:	4b31      	ldr	r3, [pc, #196]	@ (8008754 <HAL_RCC_OscConfig+0x478>)
 8008690:	2200      	movs	r2, #0
 8008692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008694:	f7f9 fee2 	bl	800245c <HAL_GetTick>
 8008698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800869a:	e008      	b.n	80086ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800869c:	f7f9 fede 	bl	800245c <HAL_GetTick>
 80086a0:	4602      	mov	r2, r0
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d901      	bls.n	80086ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80086aa:	2303      	movs	r3, #3
 80086ac:	e087      	b.n	80087be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086ae:	4b27      	ldr	r3, [pc, #156]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1f0      	bne.n	800869c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	69da      	ldr	r2, [r3, #28]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a1b      	ldr	r3, [r3, #32]
 80086c2:	431a      	orrs	r2, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086c8:	019b      	lsls	r3, r3, #6
 80086ca:	431a      	orrs	r2, r3
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086d0:	085b      	lsrs	r3, r3, #1
 80086d2:	3b01      	subs	r3, #1
 80086d4:	041b      	lsls	r3, r3, #16
 80086d6:	431a      	orrs	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086dc:	061b      	lsls	r3, r3, #24
 80086de:	491b      	ldr	r1, [pc, #108]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 80086e0:	4313      	orrs	r3, r2
 80086e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80086e4:	4b1b      	ldr	r3, [pc, #108]	@ (8008754 <HAL_RCC_OscConfig+0x478>)
 80086e6:	2201      	movs	r2, #1
 80086e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086ea:	f7f9 feb7 	bl	800245c <HAL_GetTick>
 80086ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086f0:	e008      	b.n	8008704 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086f2:	f7f9 feb3 	bl	800245c <HAL_GetTick>
 80086f6:	4602      	mov	r2, r0
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	1ad3      	subs	r3, r2, r3
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	d901      	bls.n	8008704 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008700:	2303      	movs	r3, #3
 8008702:	e05c      	b.n	80087be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008704:	4b11      	ldr	r3, [pc, #68]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800870c:	2b00      	cmp	r3, #0
 800870e:	d0f0      	beq.n	80086f2 <HAL_RCC_OscConfig+0x416>
 8008710:	e054      	b.n	80087bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008712:	4b10      	ldr	r3, [pc, #64]	@ (8008754 <HAL_RCC_OscConfig+0x478>)
 8008714:	2200      	movs	r2, #0
 8008716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008718:	f7f9 fea0 	bl	800245c <HAL_GetTick>
 800871c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800871e:	e008      	b.n	8008732 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008720:	f7f9 fe9c 	bl	800245c <HAL_GetTick>
 8008724:	4602      	mov	r2, r0
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	1ad3      	subs	r3, r2, r3
 800872a:	2b02      	cmp	r3, #2
 800872c:	d901      	bls.n	8008732 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800872e:	2303      	movs	r3, #3
 8008730:	e045      	b.n	80087be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008732:	4b06      	ldr	r3, [pc, #24]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800873a:	2b00      	cmp	r3, #0
 800873c:	d1f0      	bne.n	8008720 <HAL_RCC_OscConfig+0x444>
 800873e:	e03d      	b.n	80087bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	699b      	ldr	r3, [r3, #24]
 8008744:	2b01      	cmp	r3, #1
 8008746:	d107      	bne.n	8008758 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	e038      	b.n	80087be <HAL_RCC_OscConfig+0x4e2>
 800874c:	40023800 	.word	0x40023800
 8008750:	40007000 	.word	0x40007000
 8008754:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008758:	4b1b      	ldr	r3, [pc, #108]	@ (80087c8 <HAL_RCC_OscConfig+0x4ec>)
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	699b      	ldr	r3, [r3, #24]
 8008762:	2b01      	cmp	r3, #1
 8008764:	d028      	beq.n	80087b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008770:	429a      	cmp	r2, r3
 8008772:	d121      	bne.n	80087b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800877e:	429a      	cmp	r2, r3
 8008780:	d11a      	bne.n	80087b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008782:	68fa      	ldr	r2, [r7, #12]
 8008784:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008788:	4013      	ands	r3, r2
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800878e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008790:	4293      	cmp	r3, r2
 8008792:	d111      	bne.n	80087b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800879e:	085b      	lsrs	r3, r3, #1
 80087a0:	3b01      	subs	r3, #1
 80087a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d107      	bne.n	80087b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d001      	beq.n	80087bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e000      	b.n	80087be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3718      	adds	r7, #24
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	40023800 	.word	0x40023800

080087cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d101      	bne.n	80087e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	e0cc      	b.n	800897a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80087e0:	4b68      	ldr	r3, [pc, #416]	@ (8008984 <HAL_RCC_ClockConfig+0x1b8>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 0307 	and.w	r3, r3, #7
 80087e8:	683a      	ldr	r2, [r7, #0]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d90c      	bls.n	8008808 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087ee:	4b65      	ldr	r3, [pc, #404]	@ (8008984 <HAL_RCC_ClockConfig+0x1b8>)
 80087f0:	683a      	ldr	r2, [r7, #0]
 80087f2:	b2d2      	uxtb	r2, r2
 80087f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80087f6:	4b63      	ldr	r3, [pc, #396]	@ (8008984 <HAL_RCC_ClockConfig+0x1b8>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 0307 	and.w	r3, r3, #7
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	429a      	cmp	r2, r3
 8008802:	d001      	beq.n	8008808 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	e0b8      	b.n	800897a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 0302 	and.w	r3, r3, #2
 8008810:	2b00      	cmp	r3, #0
 8008812:	d020      	beq.n	8008856 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 0304 	and.w	r3, r3, #4
 800881c:	2b00      	cmp	r3, #0
 800881e:	d005      	beq.n	800882c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008820:	4b59      	ldr	r3, [pc, #356]	@ (8008988 <HAL_RCC_ClockConfig+0x1bc>)
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	4a58      	ldr	r2, [pc, #352]	@ (8008988 <HAL_RCC_ClockConfig+0x1bc>)
 8008826:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800882a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 0308 	and.w	r3, r3, #8
 8008834:	2b00      	cmp	r3, #0
 8008836:	d005      	beq.n	8008844 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008838:	4b53      	ldr	r3, [pc, #332]	@ (8008988 <HAL_RCC_ClockConfig+0x1bc>)
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	4a52      	ldr	r2, [pc, #328]	@ (8008988 <HAL_RCC_ClockConfig+0x1bc>)
 800883e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008842:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008844:	4b50      	ldr	r3, [pc, #320]	@ (8008988 <HAL_RCC_ClockConfig+0x1bc>)
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	494d      	ldr	r1, [pc, #308]	@ (8008988 <HAL_RCC_ClockConfig+0x1bc>)
 8008852:	4313      	orrs	r3, r2
 8008854:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	2b00      	cmp	r3, #0
 8008860:	d044      	beq.n	80088ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d107      	bne.n	800887a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800886a:	4b47      	ldr	r3, [pc, #284]	@ (8008988 <HAL_RCC_ClockConfig+0x1bc>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008872:	2b00      	cmp	r3, #0
 8008874:	d119      	bne.n	80088aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e07f      	b.n	800897a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	2b02      	cmp	r3, #2
 8008880:	d003      	beq.n	800888a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008886:	2b03      	cmp	r3, #3
 8008888:	d107      	bne.n	800889a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800888a:	4b3f      	ldr	r3, [pc, #252]	@ (8008988 <HAL_RCC_ClockConfig+0x1bc>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008892:	2b00      	cmp	r3, #0
 8008894:	d109      	bne.n	80088aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	e06f      	b.n	800897a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800889a:	4b3b      	ldr	r3, [pc, #236]	@ (8008988 <HAL_RCC_ClockConfig+0x1bc>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 0302 	and.w	r3, r3, #2
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d101      	bne.n	80088aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	e067      	b.n	800897a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80088aa:	4b37      	ldr	r3, [pc, #220]	@ (8008988 <HAL_RCC_ClockConfig+0x1bc>)
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	f023 0203 	bic.w	r2, r3, #3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	4934      	ldr	r1, [pc, #208]	@ (8008988 <HAL_RCC_ClockConfig+0x1bc>)
 80088b8:	4313      	orrs	r3, r2
 80088ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80088bc:	f7f9 fdce 	bl	800245c <HAL_GetTick>
 80088c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088c2:	e00a      	b.n	80088da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80088c4:	f7f9 fdca 	bl	800245c <HAL_GetTick>
 80088c8:	4602      	mov	r2, r0
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	1ad3      	subs	r3, r2, r3
 80088ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d901      	bls.n	80088da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80088d6:	2303      	movs	r3, #3
 80088d8:	e04f      	b.n	800897a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088da:	4b2b      	ldr	r3, [pc, #172]	@ (8008988 <HAL_RCC_ClockConfig+0x1bc>)
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	f003 020c 	and.w	r2, r3, #12
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d1eb      	bne.n	80088c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80088ec:	4b25      	ldr	r3, [pc, #148]	@ (8008984 <HAL_RCC_ClockConfig+0x1b8>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 0307 	and.w	r3, r3, #7
 80088f4:	683a      	ldr	r2, [r7, #0]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d20c      	bcs.n	8008914 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088fa:	4b22      	ldr	r3, [pc, #136]	@ (8008984 <HAL_RCC_ClockConfig+0x1b8>)
 80088fc:	683a      	ldr	r2, [r7, #0]
 80088fe:	b2d2      	uxtb	r2, r2
 8008900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008902:	4b20      	ldr	r3, [pc, #128]	@ (8008984 <HAL_RCC_ClockConfig+0x1b8>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f003 0307 	and.w	r3, r3, #7
 800890a:	683a      	ldr	r2, [r7, #0]
 800890c:	429a      	cmp	r2, r3
 800890e:	d001      	beq.n	8008914 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	e032      	b.n	800897a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 0304 	and.w	r3, r3, #4
 800891c:	2b00      	cmp	r3, #0
 800891e:	d008      	beq.n	8008932 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008920:	4b19      	ldr	r3, [pc, #100]	@ (8008988 <HAL_RCC_ClockConfig+0x1bc>)
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	4916      	ldr	r1, [pc, #88]	@ (8008988 <HAL_RCC_ClockConfig+0x1bc>)
 800892e:	4313      	orrs	r3, r2
 8008930:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f003 0308 	and.w	r3, r3, #8
 800893a:	2b00      	cmp	r3, #0
 800893c:	d009      	beq.n	8008952 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800893e:	4b12      	ldr	r3, [pc, #72]	@ (8008988 <HAL_RCC_ClockConfig+0x1bc>)
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	691b      	ldr	r3, [r3, #16]
 800894a:	00db      	lsls	r3, r3, #3
 800894c:	490e      	ldr	r1, [pc, #56]	@ (8008988 <HAL_RCC_ClockConfig+0x1bc>)
 800894e:	4313      	orrs	r3, r2
 8008950:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008952:	f000 f821 	bl	8008998 <HAL_RCC_GetSysClockFreq>
 8008956:	4602      	mov	r2, r0
 8008958:	4b0b      	ldr	r3, [pc, #44]	@ (8008988 <HAL_RCC_ClockConfig+0x1bc>)
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	091b      	lsrs	r3, r3, #4
 800895e:	f003 030f 	and.w	r3, r3, #15
 8008962:	490a      	ldr	r1, [pc, #40]	@ (800898c <HAL_RCC_ClockConfig+0x1c0>)
 8008964:	5ccb      	ldrb	r3, [r1, r3]
 8008966:	fa22 f303 	lsr.w	r3, r2, r3
 800896a:	4a09      	ldr	r2, [pc, #36]	@ (8008990 <HAL_RCC_ClockConfig+0x1c4>)
 800896c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800896e:	4b09      	ldr	r3, [pc, #36]	@ (8008994 <HAL_RCC_ClockConfig+0x1c8>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4618      	mov	r0, r3
 8008974:	f7f9 fd2e 	bl	80023d4 <HAL_InitTick>

  return HAL_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	40023c00 	.word	0x40023c00
 8008988:	40023800 	.word	0x40023800
 800898c:	0800ee00 	.word	0x0800ee00
 8008990:	20000004 	.word	0x20000004
 8008994:	20000008 	.word	0x20000008

08008998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800899c:	b090      	sub	sp, #64	@ 0x40
 800899e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80089a0:	2300      	movs	r3, #0
 80089a2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80089a4:	2300      	movs	r3, #0
 80089a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80089a8:	2300      	movs	r3, #0
 80089aa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80089ac:	2300      	movs	r3, #0
 80089ae:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80089b0:	4b59      	ldr	r3, [pc, #356]	@ (8008b18 <HAL_RCC_GetSysClockFreq+0x180>)
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	f003 030c 	and.w	r3, r3, #12
 80089b8:	2b08      	cmp	r3, #8
 80089ba:	d00d      	beq.n	80089d8 <HAL_RCC_GetSysClockFreq+0x40>
 80089bc:	2b08      	cmp	r3, #8
 80089be:	f200 80a1 	bhi.w	8008b04 <HAL_RCC_GetSysClockFreq+0x16c>
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d002      	beq.n	80089cc <HAL_RCC_GetSysClockFreq+0x34>
 80089c6:	2b04      	cmp	r3, #4
 80089c8:	d003      	beq.n	80089d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80089ca:	e09b      	b.n	8008b04 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80089cc:	4b53      	ldr	r3, [pc, #332]	@ (8008b1c <HAL_RCC_GetSysClockFreq+0x184>)
 80089ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80089d0:	e09b      	b.n	8008b0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80089d2:	4b53      	ldr	r3, [pc, #332]	@ (8008b20 <HAL_RCC_GetSysClockFreq+0x188>)
 80089d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80089d6:	e098      	b.n	8008b0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80089d8:	4b4f      	ldr	r3, [pc, #316]	@ (8008b18 <HAL_RCC_GetSysClockFreq+0x180>)
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80089e0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80089e2:	4b4d      	ldr	r3, [pc, #308]	@ (8008b18 <HAL_RCC_GetSysClockFreq+0x180>)
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d028      	beq.n	8008a40 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80089ee:	4b4a      	ldr	r3, [pc, #296]	@ (8008b18 <HAL_RCC_GetSysClockFreq+0x180>)
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	099b      	lsrs	r3, r3, #6
 80089f4:	2200      	movs	r2, #0
 80089f6:	623b      	str	r3, [r7, #32]
 80089f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80089fa:	6a3b      	ldr	r3, [r7, #32]
 80089fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008a00:	2100      	movs	r1, #0
 8008a02:	4b47      	ldr	r3, [pc, #284]	@ (8008b20 <HAL_RCC_GetSysClockFreq+0x188>)
 8008a04:	fb03 f201 	mul.w	r2, r3, r1
 8008a08:	2300      	movs	r3, #0
 8008a0a:	fb00 f303 	mul.w	r3, r0, r3
 8008a0e:	4413      	add	r3, r2
 8008a10:	4a43      	ldr	r2, [pc, #268]	@ (8008b20 <HAL_RCC_GetSysClockFreq+0x188>)
 8008a12:	fba0 1202 	umull	r1, r2, r0, r2
 8008a16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008a18:	460a      	mov	r2, r1
 8008a1a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008a1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a1e:	4413      	add	r3, r2
 8008a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a24:	2200      	movs	r2, #0
 8008a26:	61bb      	str	r3, [r7, #24]
 8008a28:	61fa      	str	r2, [r7, #28]
 8008a2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008a32:	f7f7 fc25 	bl	8000280 <__aeabi_uldivmod>
 8008a36:	4602      	mov	r2, r0
 8008a38:	460b      	mov	r3, r1
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a3e:	e053      	b.n	8008ae8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a40:	4b35      	ldr	r3, [pc, #212]	@ (8008b18 <HAL_RCC_GetSysClockFreq+0x180>)
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	099b      	lsrs	r3, r3, #6
 8008a46:	2200      	movs	r2, #0
 8008a48:	613b      	str	r3, [r7, #16]
 8008a4a:	617a      	str	r2, [r7, #20]
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008a52:	f04f 0b00 	mov.w	fp, #0
 8008a56:	4652      	mov	r2, sl
 8008a58:	465b      	mov	r3, fp
 8008a5a:	f04f 0000 	mov.w	r0, #0
 8008a5e:	f04f 0100 	mov.w	r1, #0
 8008a62:	0159      	lsls	r1, r3, #5
 8008a64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008a68:	0150      	lsls	r0, r2, #5
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	ebb2 080a 	subs.w	r8, r2, sl
 8008a72:	eb63 090b 	sbc.w	r9, r3, fp
 8008a76:	f04f 0200 	mov.w	r2, #0
 8008a7a:	f04f 0300 	mov.w	r3, #0
 8008a7e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008a82:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008a86:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008a8a:	ebb2 0408 	subs.w	r4, r2, r8
 8008a8e:	eb63 0509 	sbc.w	r5, r3, r9
 8008a92:	f04f 0200 	mov.w	r2, #0
 8008a96:	f04f 0300 	mov.w	r3, #0
 8008a9a:	00eb      	lsls	r3, r5, #3
 8008a9c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008aa0:	00e2      	lsls	r2, r4, #3
 8008aa2:	4614      	mov	r4, r2
 8008aa4:	461d      	mov	r5, r3
 8008aa6:	eb14 030a 	adds.w	r3, r4, sl
 8008aaa:	603b      	str	r3, [r7, #0]
 8008aac:	eb45 030b 	adc.w	r3, r5, fp
 8008ab0:	607b      	str	r3, [r7, #4]
 8008ab2:	f04f 0200 	mov.w	r2, #0
 8008ab6:	f04f 0300 	mov.w	r3, #0
 8008aba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008abe:	4629      	mov	r1, r5
 8008ac0:	028b      	lsls	r3, r1, #10
 8008ac2:	4621      	mov	r1, r4
 8008ac4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008ac8:	4621      	mov	r1, r4
 8008aca:	028a      	lsls	r2, r1, #10
 8008acc:	4610      	mov	r0, r2
 8008ace:	4619      	mov	r1, r3
 8008ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	60bb      	str	r3, [r7, #8]
 8008ad6:	60fa      	str	r2, [r7, #12]
 8008ad8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008adc:	f7f7 fbd0 	bl	8000280 <__aeabi_uldivmod>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8008b18 <HAL_RCC_GetSysClockFreq+0x180>)
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	0c1b      	lsrs	r3, r3, #16
 8008aee:	f003 0303 	and.w	r3, r3, #3
 8008af2:	3301      	adds	r3, #1
 8008af4:	005b      	lsls	r3, r3, #1
 8008af6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008af8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b00:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008b02:	e002      	b.n	8008b0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008b04:	4b05      	ldr	r3, [pc, #20]	@ (8008b1c <HAL_RCC_GetSysClockFreq+0x184>)
 8008b06:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008b08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3740      	adds	r7, #64	@ 0x40
 8008b10:	46bd      	mov	sp, r7
 8008b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b16:	bf00      	nop
 8008b18:	40023800 	.word	0x40023800
 8008b1c:	00f42400 	.word	0x00f42400
 8008b20:	017d7840 	.word	0x017d7840

08008b24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b24:	b480      	push	{r7}
 8008b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b28:	4b03      	ldr	r3, [pc, #12]	@ (8008b38 <HAL_RCC_GetHCLKFreq+0x14>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	20000004 	.word	0x20000004

08008b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008b40:	f7ff fff0 	bl	8008b24 <HAL_RCC_GetHCLKFreq>
 8008b44:	4602      	mov	r2, r0
 8008b46:	4b05      	ldr	r3, [pc, #20]	@ (8008b5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	0a9b      	lsrs	r3, r3, #10
 8008b4c:	f003 0307 	and.w	r3, r3, #7
 8008b50:	4903      	ldr	r1, [pc, #12]	@ (8008b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b52:	5ccb      	ldrb	r3, [r1, r3]
 8008b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	40023800 	.word	0x40023800
 8008b60:	0800ee10 	.word	0x0800ee10

08008b64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d101      	bne.n	8008b76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	e041      	b.n	8008bfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d106      	bne.n	8008b90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f7f9 fa66 	bl	800205c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2202      	movs	r2, #2
 8008b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	3304      	adds	r3, #4
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	4610      	mov	r0, r2
 8008ba4:	f000 fc3c 	bl	8009420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3708      	adds	r7, #8
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
	...

08008c04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d001      	beq.n	8008c1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e044      	b.n	8008ca6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2202      	movs	r2, #2
 8008c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	68da      	ldr	r2, [r3, #12]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f042 0201 	orr.w	r2, r2, #1
 8008c32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a1e      	ldr	r2, [pc, #120]	@ (8008cb4 <HAL_TIM_Base_Start_IT+0xb0>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d018      	beq.n	8008c70 <HAL_TIM_Base_Start_IT+0x6c>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c46:	d013      	beq.n	8008c70 <HAL_TIM_Base_Start_IT+0x6c>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a1a      	ldr	r2, [pc, #104]	@ (8008cb8 <HAL_TIM_Base_Start_IT+0xb4>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d00e      	beq.n	8008c70 <HAL_TIM_Base_Start_IT+0x6c>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a19      	ldr	r2, [pc, #100]	@ (8008cbc <HAL_TIM_Base_Start_IT+0xb8>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d009      	beq.n	8008c70 <HAL_TIM_Base_Start_IT+0x6c>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a17      	ldr	r2, [pc, #92]	@ (8008cc0 <HAL_TIM_Base_Start_IT+0xbc>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d004      	beq.n	8008c70 <HAL_TIM_Base_Start_IT+0x6c>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a16      	ldr	r2, [pc, #88]	@ (8008cc4 <HAL_TIM_Base_Start_IT+0xc0>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d111      	bne.n	8008c94 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	f003 0307 	and.w	r3, r3, #7
 8008c7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2b06      	cmp	r3, #6
 8008c80:	d010      	beq.n	8008ca4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f042 0201 	orr.w	r2, r2, #1
 8008c90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c92:	e007      	b.n	8008ca4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f042 0201 	orr.w	r2, r2, #1
 8008ca2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3714      	adds	r7, #20
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	40010000 	.word	0x40010000
 8008cb8:	40000400 	.word	0x40000400
 8008cbc:	40000800 	.word	0x40000800
 8008cc0:	40000c00 	.word	0x40000c00
 8008cc4:	40014000 	.word	0x40014000

08008cc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d101      	bne.n	8008cda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e041      	b.n	8008d5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d106      	bne.n	8008cf4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 f839 	bl	8008d66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2202      	movs	r2, #2
 8008cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	3304      	adds	r3, #4
 8008d04:	4619      	mov	r1, r3
 8008d06:	4610      	mov	r0, r2
 8008d08:	f000 fb8a 	bl	8009420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3708      	adds	r7, #8
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008d66:	b480      	push	{r7}
 8008d68:	b083      	sub	sp, #12
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008d6e:	bf00      	nop
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr
	...

08008d7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d109      	bne.n	8008da0 <HAL_TIM_PWM_Start+0x24>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	bf14      	ite	ne
 8008d98:	2301      	movne	r3, #1
 8008d9a:	2300      	moveq	r3, #0
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	e022      	b.n	8008de6 <HAL_TIM_PWM_Start+0x6a>
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	2b04      	cmp	r3, #4
 8008da4:	d109      	bne.n	8008dba <HAL_TIM_PWM_Start+0x3e>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	bf14      	ite	ne
 8008db2:	2301      	movne	r3, #1
 8008db4:	2300      	moveq	r3, #0
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	e015      	b.n	8008de6 <HAL_TIM_PWM_Start+0x6a>
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	2b08      	cmp	r3, #8
 8008dbe:	d109      	bne.n	8008dd4 <HAL_TIM_PWM_Start+0x58>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	bf14      	ite	ne
 8008dcc:	2301      	movne	r3, #1
 8008dce:	2300      	moveq	r3, #0
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	e008      	b.n	8008de6 <HAL_TIM_PWM_Start+0x6a>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	bf14      	ite	ne
 8008de0:	2301      	movne	r3, #1
 8008de2:	2300      	moveq	r3, #0
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d001      	beq.n	8008dee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e068      	b.n	8008ec0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d104      	bne.n	8008dfe <HAL_TIM_PWM_Start+0x82>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2202      	movs	r2, #2
 8008df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008dfc:	e013      	b.n	8008e26 <HAL_TIM_PWM_Start+0xaa>
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	2b04      	cmp	r3, #4
 8008e02:	d104      	bne.n	8008e0e <HAL_TIM_PWM_Start+0x92>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2202      	movs	r2, #2
 8008e08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e0c:	e00b      	b.n	8008e26 <HAL_TIM_PWM_Start+0xaa>
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	2b08      	cmp	r3, #8
 8008e12:	d104      	bne.n	8008e1e <HAL_TIM_PWM_Start+0xa2>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2202      	movs	r2, #2
 8008e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e1c:	e003      	b.n	8008e26 <HAL_TIM_PWM_Start+0xaa>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2202      	movs	r2, #2
 8008e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	6839      	ldr	r1, [r7, #0]
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f000 fda2 	bl	8009978 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a23      	ldr	r2, [pc, #140]	@ (8008ec8 <HAL_TIM_PWM_Start+0x14c>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d107      	bne.n	8008e4e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008e4c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a1d      	ldr	r2, [pc, #116]	@ (8008ec8 <HAL_TIM_PWM_Start+0x14c>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d018      	beq.n	8008e8a <HAL_TIM_PWM_Start+0x10e>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e60:	d013      	beq.n	8008e8a <HAL_TIM_PWM_Start+0x10e>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a19      	ldr	r2, [pc, #100]	@ (8008ecc <HAL_TIM_PWM_Start+0x150>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d00e      	beq.n	8008e8a <HAL_TIM_PWM_Start+0x10e>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a17      	ldr	r2, [pc, #92]	@ (8008ed0 <HAL_TIM_PWM_Start+0x154>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d009      	beq.n	8008e8a <HAL_TIM_PWM_Start+0x10e>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a16      	ldr	r2, [pc, #88]	@ (8008ed4 <HAL_TIM_PWM_Start+0x158>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d004      	beq.n	8008e8a <HAL_TIM_PWM_Start+0x10e>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a14      	ldr	r2, [pc, #80]	@ (8008ed8 <HAL_TIM_PWM_Start+0x15c>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d111      	bne.n	8008eae <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	f003 0307 	and.w	r3, r3, #7
 8008e94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2b06      	cmp	r3, #6
 8008e9a:	d010      	beq.n	8008ebe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	681a      	ldr	r2, [r3, #0]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f042 0201 	orr.w	r2, r2, #1
 8008eaa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eac:	e007      	b.n	8008ebe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f042 0201 	orr.w	r2, r2, #1
 8008ebc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3710      	adds	r7, #16
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	40010000 	.word	0x40010000
 8008ecc:	40000400 	.word	0x40000400
 8008ed0:	40000800 	.word	0x40000800
 8008ed4:	40000c00 	.word	0x40000c00
 8008ed8:	40014000 	.word	0x40014000

08008edc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	f003 0302 	and.w	r3, r3, #2
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d020      	beq.n	8008f40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f003 0302 	and.w	r3, r3, #2
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d01b      	beq.n	8008f40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f06f 0202 	mvn.w	r2, #2
 8008f10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2201      	movs	r2, #1
 8008f16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	699b      	ldr	r3, [r3, #24]
 8008f1e:	f003 0303 	and.w	r3, r3, #3
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d003      	beq.n	8008f2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fa5b 	bl	80093e2 <HAL_TIM_IC_CaptureCallback>
 8008f2c:	e005      	b.n	8008f3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 fa4d 	bl	80093ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 fa5e 	bl	80093f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	f003 0304 	and.w	r3, r3, #4
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d020      	beq.n	8008f8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f003 0304 	and.w	r3, r3, #4
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d01b      	beq.n	8008f8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f06f 0204 	mvn.w	r2, #4
 8008f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2202      	movs	r2, #2
 8008f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	699b      	ldr	r3, [r3, #24]
 8008f6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d003      	beq.n	8008f7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fa35 	bl	80093e2 <HAL_TIM_IC_CaptureCallback>
 8008f78:	e005      	b.n	8008f86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fa27 	bl	80093ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 fa38 	bl	80093f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	f003 0308 	and.w	r3, r3, #8
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d020      	beq.n	8008fd8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f003 0308 	and.w	r3, r3, #8
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d01b      	beq.n	8008fd8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f06f 0208 	mvn.w	r2, #8
 8008fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2204      	movs	r2, #4
 8008fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	69db      	ldr	r3, [r3, #28]
 8008fb6:	f003 0303 	and.w	r3, r3, #3
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d003      	beq.n	8008fc6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 fa0f 	bl	80093e2 <HAL_TIM_IC_CaptureCallback>
 8008fc4:	e005      	b.n	8008fd2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 fa01 	bl	80093ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 fa12 	bl	80093f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	f003 0310 	and.w	r3, r3, #16
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d020      	beq.n	8009024 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f003 0310 	and.w	r3, r3, #16
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d01b      	beq.n	8009024 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f06f 0210 	mvn.w	r2, #16
 8008ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2208      	movs	r2, #8
 8008ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	69db      	ldr	r3, [r3, #28]
 8009002:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009006:	2b00      	cmp	r3, #0
 8009008:	d003      	beq.n	8009012 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 f9e9 	bl	80093e2 <HAL_TIM_IC_CaptureCallback>
 8009010:	e005      	b.n	800901e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f9db 	bl	80093ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 f9ec 	bl	80093f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	f003 0301 	and.w	r3, r3, #1
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00c      	beq.n	8009048 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f003 0301 	and.w	r3, r3, #1
 8009034:	2b00      	cmp	r3, #0
 8009036:	d007      	beq.n	8009048 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f06f 0201 	mvn.w	r2, #1
 8009040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f7f7 fd74 	bl	8000b30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00c      	beq.n	800906c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009058:	2b00      	cmp	r3, #0
 800905a:	d007      	beq.n	800906c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 fd24 	bl	8009ab4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00c      	beq.n	8009090 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800907c:	2b00      	cmp	r3, #0
 800907e:	d007      	beq.n	8009090 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 f9bd 	bl	800940a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	f003 0320 	and.w	r3, r3, #32
 8009096:	2b00      	cmp	r3, #0
 8009098:	d00c      	beq.n	80090b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f003 0320 	and.w	r3, r3, #32
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d007      	beq.n	80090b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f06f 0220 	mvn.w	r2, #32
 80090ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fcf6 	bl	8009aa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80090b4:	bf00      	nop
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090c8:	2300      	movs	r3, #0
 80090ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d101      	bne.n	80090da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80090d6:	2302      	movs	r3, #2
 80090d8:	e0ae      	b.n	8009238 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2201      	movs	r2, #1
 80090de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2b0c      	cmp	r3, #12
 80090e6:	f200 809f 	bhi.w	8009228 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80090ea:	a201      	add	r2, pc, #4	@ (adr r2, 80090f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80090ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f0:	08009125 	.word	0x08009125
 80090f4:	08009229 	.word	0x08009229
 80090f8:	08009229 	.word	0x08009229
 80090fc:	08009229 	.word	0x08009229
 8009100:	08009165 	.word	0x08009165
 8009104:	08009229 	.word	0x08009229
 8009108:	08009229 	.word	0x08009229
 800910c:	08009229 	.word	0x08009229
 8009110:	080091a7 	.word	0x080091a7
 8009114:	08009229 	.word	0x08009229
 8009118:	08009229 	.word	0x08009229
 800911c:	08009229 	.word	0x08009229
 8009120:	080091e7 	.word	0x080091e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	68b9      	ldr	r1, [r7, #8]
 800912a:	4618      	mov	r0, r3
 800912c:	f000 f9fe 	bl	800952c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	699a      	ldr	r2, [r3, #24]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f042 0208 	orr.w	r2, r2, #8
 800913e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	699a      	ldr	r2, [r3, #24]
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f022 0204 	bic.w	r2, r2, #4
 800914e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	6999      	ldr	r1, [r3, #24]
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	691a      	ldr	r2, [r3, #16]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	430a      	orrs	r2, r1
 8009160:	619a      	str	r2, [r3, #24]
      break;
 8009162:	e064      	b.n	800922e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68b9      	ldr	r1, [r7, #8]
 800916a:	4618      	mov	r0, r3
 800916c:	f000 fa44 	bl	80095f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	699a      	ldr	r2, [r3, #24]
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800917e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	699a      	ldr	r2, [r3, #24]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800918e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	6999      	ldr	r1, [r3, #24]
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	021a      	lsls	r2, r3, #8
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	430a      	orrs	r2, r1
 80091a2:	619a      	str	r2, [r3, #24]
      break;
 80091a4:	e043      	b.n	800922e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	68b9      	ldr	r1, [r7, #8]
 80091ac:	4618      	mov	r0, r3
 80091ae:	f000 fa8f 	bl	80096d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	69da      	ldr	r2, [r3, #28]
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f042 0208 	orr.w	r2, r2, #8
 80091c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	69da      	ldr	r2, [r3, #28]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f022 0204 	bic.w	r2, r2, #4
 80091d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	69d9      	ldr	r1, [r3, #28]
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	691a      	ldr	r2, [r3, #16]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	430a      	orrs	r2, r1
 80091e2:	61da      	str	r2, [r3, #28]
      break;
 80091e4:	e023      	b.n	800922e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	68b9      	ldr	r1, [r7, #8]
 80091ec:	4618      	mov	r0, r3
 80091ee:	f000 fad9 	bl	80097a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	69da      	ldr	r2, [r3, #28]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009200:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	69da      	ldr	r2, [r3, #28]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009210:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	69d9      	ldr	r1, [r3, #28]
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	691b      	ldr	r3, [r3, #16]
 800921c:	021a      	lsls	r2, r3, #8
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	430a      	orrs	r2, r1
 8009224:	61da      	str	r2, [r3, #28]
      break;
 8009226:	e002      	b.n	800922e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009228:	2301      	movs	r3, #1
 800922a:	75fb      	strb	r3, [r7, #23]
      break;
 800922c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2200      	movs	r2, #0
 8009232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009236:	7dfb      	ldrb	r3, [r7, #23]
}
 8009238:	4618      	mov	r0, r3
 800923a:	3718      	adds	r7, #24
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800924a:	2300      	movs	r3, #0
 800924c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009254:	2b01      	cmp	r3, #1
 8009256:	d101      	bne.n	800925c <HAL_TIM_ConfigClockSource+0x1c>
 8009258:	2302      	movs	r3, #2
 800925a:	e0b4      	b.n	80093c6 <HAL_TIM_ConfigClockSource+0x186>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2202      	movs	r2, #2
 8009268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800927a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009282:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	68ba      	ldr	r2, [r7, #8]
 800928a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009294:	d03e      	beq.n	8009314 <HAL_TIM_ConfigClockSource+0xd4>
 8009296:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800929a:	f200 8087 	bhi.w	80093ac <HAL_TIM_ConfigClockSource+0x16c>
 800929e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092a2:	f000 8086 	beq.w	80093b2 <HAL_TIM_ConfigClockSource+0x172>
 80092a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092aa:	d87f      	bhi.n	80093ac <HAL_TIM_ConfigClockSource+0x16c>
 80092ac:	2b70      	cmp	r3, #112	@ 0x70
 80092ae:	d01a      	beq.n	80092e6 <HAL_TIM_ConfigClockSource+0xa6>
 80092b0:	2b70      	cmp	r3, #112	@ 0x70
 80092b2:	d87b      	bhi.n	80093ac <HAL_TIM_ConfigClockSource+0x16c>
 80092b4:	2b60      	cmp	r3, #96	@ 0x60
 80092b6:	d050      	beq.n	800935a <HAL_TIM_ConfigClockSource+0x11a>
 80092b8:	2b60      	cmp	r3, #96	@ 0x60
 80092ba:	d877      	bhi.n	80093ac <HAL_TIM_ConfigClockSource+0x16c>
 80092bc:	2b50      	cmp	r3, #80	@ 0x50
 80092be:	d03c      	beq.n	800933a <HAL_TIM_ConfigClockSource+0xfa>
 80092c0:	2b50      	cmp	r3, #80	@ 0x50
 80092c2:	d873      	bhi.n	80093ac <HAL_TIM_ConfigClockSource+0x16c>
 80092c4:	2b40      	cmp	r3, #64	@ 0x40
 80092c6:	d058      	beq.n	800937a <HAL_TIM_ConfigClockSource+0x13a>
 80092c8:	2b40      	cmp	r3, #64	@ 0x40
 80092ca:	d86f      	bhi.n	80093ac <HAL_TIM_ConfigClockSource+0x16c>
 80092cc:	2b30      	cmp	r3, #48	@ 0x30
 80092ce:	d064      	beq.n	800939a <HAL_TIM_ConfigClockSource+0x15a>
 80092d0:	2b30      	cmp	r3, #48	@ 0x30
 80092d2:	d86b      	bhi.n	80093ac <HAL_TIM_ConfigClockSource+0x16c>
 80092d4:	2b20      	cmp	r3, #32
 80092d6:	d060      	beq.n	800939a <HAL_TIM_ConfigClockSource+0x15a>
 80092d8:	2b20      	cmp	r3, #32
 80092da:	d867      	bhi.n	80093ac <HAL_TIM_ConfigClockSource+0x16c>
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d05c      	beq.n	800939a <HAL_TIM_ConfigClockSource+0x15a>
 80092e0:	2b10      	cmp	r3, #16
 80092e2:	d05a      	beq.n	800939a <HAL_TIM_ConfigClockSource+0x15a>
 80092e4:	e062      	b.n	80093ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80092f6:	f000 fb1f 	bl	8009938 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009308:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68ba      	ldr	r2, [r7, #8]
 8009310:	609a      	str	r2, [r3, #8]
      break;
 8009312:	e04f      	b.n	80093b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009324:	f000 fb08 	bl	8009938 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	689a      	ldr	r2, [r3, #8]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009336:	609a      	str	r2, [r3, #8]
      break;
 8009338:	e03c      	b.n	80093b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009346:	461a      	mov	r2, r3
 8009348:	f000 fa7c 	bl	8009844 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2150      	movs	r1, #80	@ 0x50
 8009352:	4618      	mov	r0, r3
 8009354:	f000 fad5 	bl	8009902 <TIM_ITRx_SetConfig>
      break;
 8009358:	e02c      	b.n	80093b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009366:	461a      	mov	r2, r3
 8009368:	f000 fa9b 	bl	80098a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2160      	movs	r1, #96	@ 0x60
 8009372:	4618      	mov	r0, r3
 8009374:	f000 fac5 	bl	8009902 <TIM_ITRx_SetConfig>
      break;
 8009378:	e01c      	b.n	80093b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009386:	461a      	mov	r2, r3
 8009388:	f000 fa5c 	bl	8009844 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2140      	movs	r1, #64	@ 0x40
 8009392:	4618      	mov	r0, r3
 8009394:	f000 fab5 	bl	8009902 <TIM_ITRx_SetConfig>
      break;
 8009398:	e00c      	b.n	80093b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4619      	mov	r1, r3
 80093a4:	4610      	mov	r0, r2
 80093a6:	f000 faac 	bl	8009902 <TIM_ITRx_SetConfig>
      break;
 80093aa:	e003      	b.n	80093b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	73fb      	strb	r3, [r7, #15]
      break;
 80093b0:	e000      	b.n	80093b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80093b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80093c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3710      	adds	r7, #16
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093ce:	b480      	push	{r7}
 80093d0:	b083      	sub	sp, #12
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80093d6:	bf00      	nop
 80093d8:	370c      	adds	r7, #12
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr

080093e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80093e2:	b480      	push	{r7}
 80093e4:	b083      	sub	sp, #12
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80093ea:	bf00      	nop
 80093ec:	370c      	adds	r7, #12
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr

080093f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80093f6:	b480      	push	{r7}
 80093f8:	b083      	sub	sp, #12
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80093fe:	bf00      	nop
 8009400:	370c      	adds	r7, #12
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr

0800940a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800940a:	b480      	push	{r7}
 800940c:	b083      	sub	sp, #12
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009412:	bf00      	nop
 8009414:	370c      	adds	r7, #12
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr
	...

08009420 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009420:	b480      	push	{r7}
 8009422:	b085      	sub	sp, #20
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	4a37      	ldr	r2, [pc, #220]	@ (8009510 <TIM_Base_SetConfig+0xf0>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d00f      	beq.n	8009458 <TIM_Base_SetConfig+0x38>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800943e:	d00b      	beq.n	8009458 <TIM_Base_SetConfig+0x38>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a34      	ldr	r2, [pc, #208]	@ (8009514 <TIM_Base_SetConfig+0xf4>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d007      	beq.n	8009458 <TIM_Base_SetConfig+0x38>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	4a33      	ldr	r2, [pc, #204]	@ (8009518 <TIM_Base_SetConfig+0xf8>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d003      	beq.n	8009458 <TIM_Base_SetConfig+0x38>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4a32      	ldr	r2, [pc, #200]	@ (800951c <TIM_Base_SetConfig+0xfc>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d108      	bne.n	800946a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800945e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	4313      	orrs	r3, r2
 8009468:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4a28      	ldr	r2, [pc, #160]	@ (8009510 <TIM_Base_SetConfig+0xf0>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d01b      	beq.n	80094aa <TIM_Base_SetConfig+0x8a>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009478:	d017      	beq.n	80094aa <TIM_Base_SetConfig+0x8a>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4a25      	ldr	r2, [pc, #148]	@ (8009514 <TIM_Base_SetConfig+0xf4>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d013      	beq.n	80094aa <TIM_Base_SetConfig+0x8a>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a24      	ldr	r2, [pc, #144]	@ (8009518 <TIM_Base_SetConfig+0xf8>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d00f      	beq.n	80094aa <TIM_Base_SetConfig+0x8a>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a23      	ldr	r2, [pc, #140]	@ (800951c <TIM_Base_SetConfig+0xfc>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d00b      	beq.n	80094aa <TIM_Base_SetConfig+0x8a>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a22      	ldr	r2, [pc, #136]	@ (8009520 <TIM_Base_SetConfig+0x100>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d007      	beq.n	80094aa <TIM_Base_SetConfig+0x8a>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a21      	ldr	r2, [pc, #132]	@ (8009524 <TIM_Base_SetConfig+0x104>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d003      	beq.n	80094aa <TIM_Base_SetConfig+0x8a>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a20      	ldr	r2, [pc, #128]	@ (8009528 <TIM_Base_SetConfig+0x108>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d108      	bne.n	80094bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	4313      	orrs	r3, r2
 80094ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	695b      	ldr	r3, [r3, #20]
 80094c6:	4313      	orrs	r3, r2
 80094c8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	689a      	ldr	r2, [r3, #8]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a0c      	ldr	r2, [pc, #48]	@ (8009510 <TIM_Base_SetConfig+0xf0>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d103      	bne.n	80094ea <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	691a      	ldr	r2, [r3, #16]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f043 0204 	orr.w	r2, r3, #4
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2201      	movs	r2, #1
 80094fa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	68fa      	ldr	r2, [r7, #12]
 8009500:	601a      	str	r2, [r3, #0]
}
 8009502:	bf00      	nop
 8009504:	3714      	adds	r7, #20
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	40010000 	.word	0x40010000
 8009514:	40000400 	.word	0x40000400
 8009518:	40000800 	.word	0x40000800
 800951c:	40000c00 	.word	0x40000c00
 8009520:	40014000 	.word	0x40014000
 8009524:	40014400 	.word	0x40014400
 8009528:	40014800 	.word	0x40014800

0800952c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800952c:	b480      	push	{r7}
 800952e:	b087      	sub	sp, #28
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6a1b      	ldr	r3, [r3, #32]
 800953a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6a1b      	ldr	r3, [r3, #32]
 8009540:	f023 0201 	bic.w	r2, r3, #1
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800955a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f023 0303 	bic.w	r3, r3, #3
 8009562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	4313      	orrs	r3, r2
 800956c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	f023 0302 	bic.w	r3, r3, #2
 8009574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	697a      	ldr	r2, [r7, #20]
 800957c:	4313      	orrs	r3, r2
 800957e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4a1c      	ldr	r2, [pc, #112]	@ (80095f4 <TIM_OC1_SetConfig+0xc8>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d10c      	bne.n	80095a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	f023 0308 	bic.w	r3, r3, #8
 800958e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	697a      	ldr	r2, [r7, #20]
 8009596:	4313      	orrs	r3, r2
 8009598:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	f023 0304 	bic.w	r3, r3, #4
 80095a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4a13      	ldr	r2, [pc, #76]	@ (80095f4 <TIM_OC1_SetConfig+0xc8>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d111      	bne.n	80095ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80095b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80095b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	695b      	ldr	r3, [r3, #20]
 80095be:	693a      	ldr	r2, [r7, #16]
 80095c0:	4313      	orrs	r3, r2
 80095c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	699b      	ldr	r3, [r3, #24]
 80095c8:	693a      	ldr	r2, [r7, #16]
 80095ca:	4313      	orrs	r3, r2
 80095cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	693a      	ldr	r2, [r7, #16]
 80095d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	68fa      	ldr	r2, [r7, #12]
 80095d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	685a      	ldr	r2, [r3, #4]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	697a      	ldr	r2, [r7, #20]
 80095e6:	621a      	str	r2, [r3, #32]
}
 80095e8:	bf00      	nop
 80095ea:	371c      	adds	r7, #28
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr
 80095f4:	40010000 	.word	0x40010000

080095f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b087      	sub	sp, #28
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6a1b      	ldr	r3, [r3, #32]
 8009606:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6a1b      	ldr	r3, [r3, #32]
 800960c:	f023 0210 	bic.w	r2, r3, #16
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	699b      	ldr	r3, [r3, #24]
 800961e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800962e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	021b      	lsls	r3, r3, #8
 8009636:	68fa      	ldr	r2, [r7, #12]
 8009638:	4313      	orrs	r3, r2
 800963a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	f023 0320 	bic.w	r3, r3, #32
 8009642:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	011b      	lsls	r3, r3, #4
 800964a:	697a      	ldr	r2, [r7, #20]
 800964c:	4313      	orrs	r3, r2
 800964e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	4a1e      	ldr	r2, [pc, #120]	@ (80096cc <TIM_OC2_SetConfig+0xd4>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d10d      	bne.n	8009674 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800965e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	011b      	lsls	r3, r3, #4
 8009666:	697a      	ldr	r2, [r7, #20]
 8009668:	4313      	orrs	r3, r2
 800966a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009672:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4a15      	ldr	r2, [pc, #84]	@ (80096cc <TIM_OC2_SetConfig+0xd4>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d113      	bne.n	80096a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009682:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800968a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	695b      	ldr	r3, [r3, #20]
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	693a      	ldr	r2, [r7, #16]
 8009694:	4313      	orrs	r3, r2
 8009696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	699b      	ldr	r3, [r3, #24]
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	693a      	ldr	r2, [r7, #16]
 80096a0:	4313      	orrs	r3, r2
 80096a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	693a      	ldr	r2, [r7, #16]
 80096a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	685a      	ldr	r2, [r3, #4]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	697a      	ldr	r2, [r7, #20]
 80096bc:	621a      	str	r2, [r3, #32]
}
 80096be:	bf00      	nop
 80096c0:	371c      	adds	r7, #28
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop
 80096cc:	40010000 	.word	0x40010000

080096d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b087      	sub	sp, #28
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6a1b      	ldr	r3, [r3, #32]
 80096de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6a1b      	ldr	r3, [r3, #32]
 80096e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	69db      	ldr	r3, [r3, #28]
 80096f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f023 0303 	bic.w	r3, r3, #3
 8009706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	4313      	orrs	r3, r2
 8009710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009718:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	021b      	lsls	r3, r3, #8
 8009720:	697a      	ldr	r2, [r7, #20]
 8009722:	4313      	orrs	r3, r2
 8009724:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	4a1d      	ldr	r2, [pc, #116]	@ (80097a0 <TIM_OC3_SetConfig+0xd0>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d10d      	bne.n	800974a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009734:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	021b      	lsls	r3, r3, #8
 800973c:	697a      	ldr	r2, [r7, #20]
 800973e:	4313      	orrs	r3, r2
 8009740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4a14      	ldr	r2, [pc, #80]	@ (80097a0 <TIM_OC3_SetConfig+0xd0>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d113      	bne.n	800977a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	695b      	ldr	r3, [r3, #20]
 8009766:	011b      	lsls	r3, r3, #4
 8009768:	693a      	ldr	r2, [r7, #16]
 800976a:	4313      	orrs	r3, r2
 800976c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	699b      	ldr	r3, [r3, #24]
 8009772:	011b      	lsls	r3, r3, #4
 8009774:	693a      	ldr	r2, [r7, #16]
 8009776:	4313      	orrs	r3, r2
 8009778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	693a      	ldr	r2, [r7, #16]
 800977e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	68fa      	ldr	r2, [r7, #12]
 8009784:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	685a      	ldr	r2, [r3, #4]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	697a      	ldr	r2, [r7, #20]
 8009792:	621a      	str	r2, [r3, #32]
}
 8009794:	bf00      	nop
 8009796:	371c      	adds	r7, #28
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr
 80097a0:	40010000 	.word	0x40010000

080097a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b087      	sub	sp, #28
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6a1b      	ldr	r3, [r3, #32]
 80097b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6a1b      	ldr	r3, [r3, #32]
 80097b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	69db      	ldr	r3, [r3, #28]
 80097ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80097da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	021b      	lsls	r3, r3, #8
 80097e2:	68fa      	ldr	r2, [r7, #12]
 80097e4:	4313      	orrs	r3, r2
 80097e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80097ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	031b      	lsls	r3, r3, #12
 80097f6:	693a      	ldr	r2, [r7, #16]
 80097f8:	4313      	orrs	r3, r2
 80097fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	4a10      	ldr	r2, [pc, #64]	@ (8009840 <TIM_OC4_SetConfig+0x9c>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d109      	bne.n	8009818 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800980a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	695b      	ldr	r3, [r3, #20]
 8009810:	019b      	lsls	r3, r3, #6
 8009812:	697a      	ldr	r2, [r7, #20]
 8009814:	4313      	orrs	r3, r2
 8009816:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	697a      	ldr	r2, [r7, #20]
 800981c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	68fa      	ldr	r2, [r7, #12]
 8009822:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	685a      	ldr	r2, [r3, #4]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	693a      	ldr	r2, [r7, #16]
 8009830:	621a      	str	r2, [r3, #32]
}
 8009832:	bf00      	nop
 8009834:	371c      	adds	r7, #28
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr
 800983e:	bf00      	nop
 8009840:	40010000 	.word	0x40010000

08009844 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009844:	b480      	push	{r7}
 8009846:	b087      	sub	sp, #28
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	6a1b      	ldr	r3, [r3, #32]
 8009854:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	6a1b      	ldr	r3, [r3, #32]
 800985a:	f023 0201 	bic.w	r2, r3, #1
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	699b      	ldr	r3, [r3, #24]
 8009866:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800986e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	011b      	lsls	r3, r3, #4
 8009874:	693a      	ldr	r2, [r7, #16]
 8009876:	4313      	orrs	r3, r2
 8009878:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	f023 030a 	bic.w	r3, r3, #10
 8009880:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	4313      	orrs	r3, r2
 8009888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	693a      	ldr	r2, [r7, #16]
 800988e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	697a      	ldr	r2, [r7, #20]
 8009894:	621a      	str	r2, [r3, #32]
}
 8009896:	bf00      	nop
 8009898:	371c      	adds	r7, #28
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr

080098a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098a2:	b480      	push	{r7}
 80098a4:	b087      	sub	sp, #28
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	60f8      	str	r0, [r7, #12]
 80098aa:	60b9      	str	r1, [r7, #8]
 80098ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	6a1b      	ldr	r3, [r3, #32]
 80098b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6a1b      	ldr	r3, [r3, #32]
 80098b8:	f023 0210 	bic.w	r2, r3, #16
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	699b      	ldr	r3, [r3, #24]
 80098c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80098cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	031b      	lsls	r3, r3, #12
 80098d2:	693a      	ldr	r2, [r7, #16]
 80098d4:	4313      	orrs	r3, r2
 80098d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80098de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	011b      	lsls	r3, r3, #4
 80098e4:	697a      	ldr	r2, [r7, #20]
 80098e6:	4313      	orrs	r3, r2
 80098e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	693a      	ldr	r2, [r7, #16]
 80098ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	697a      	ldr	r2, [r7, #20]
 80098f4:	621a      	str	r2, [r3, #32]
}
 80098f6:	bf00      	nop
 80098f8:	371c      	adds	r7, #28
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr

08009902 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009902:	b480      	push	{r7}
 8009904:	b085      	sub	sp, #20
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
 800990a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009918:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800991a:	683a      	ldr	r2, [r7, #0]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	4313      	orrs	r3, r2
 8009920:	f043 0307 	orr.w	r3, r3, #7
 8009924:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	68fa      	ldr	r2, [r7, #12]
 800992a:	609a      	str	r2, [r3, #8]
}
 800992c:	bf00      	nop
 800992e:	3714      	adds	r7, #20
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr

08009938 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009938:	b480      	push	{r7}
 800993a:	b087      	sub	sp, #28
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	607a      	str	r2, [r7, #4]
 8009944:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009952:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	021a      	lsls	r2, r3, #8
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	431a      	orrs	r2, r3
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	4313      	orrs	r3, r2
 8009960:	697a      	ldr	r2, [r7, #20]
 8009962:	4313      	orrs	r3, r2
 8009964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	697a      	ldr	r2, [r7, #20]
 800996a:	609a      	str	r2, [r3, #8]
}
 800996c:	bf00      	nop
 800996e:	371c      	adds	r7, #28
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009978:	b480      	push	{r7}
 800997a:	b087      	sub	sp, #28
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	f003 031f 	and.w	r3, r3, #31
 800998a:	2201      	movs	r2, #1
 800998c:	fa02 f303 	lsl.w	r3, r2, r3
 8009990:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	6a1a      	ldr	r2, [r3, #32]
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	43db      	mvns	r3, r3
 800999a:	401a      	ands	r2, r3
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	6a1a      	ldr	r2, [r3, #32]
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	f003 031f 	and.w	r3, r3, #31
 80099aa:	6879      	ldr	r1, [r7, #4]
 80099ac:	fa01 f303 	lsl.w	r3, r1, r3
 80099b0:	431a      	orrs	r2, r3
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	621a      	str	r2, [r3, #32]
}
 80099b6:	bf00      	nop
 80099b8:	371c      	adds	r7, #28
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr
	...

080099c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b085      	sub	sp, #20
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d101      	bne.n	80099dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80099d8:	2302      	movs	r3, #2
 80099da:	e050      	b.n	8009a7e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2202      	movs	r2, #2
 80099e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	689b      	ldr	r3, [r3, #8]
 80099fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	68fa      	ldr	r2, [r7, #12]
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68fa      	ldr	r2, [r7, #12]
 8009a14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a1c      	ldr	r2, [pc, #112]	@ (8009a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d018      	beq.n	8009a52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a28:	d013      	beq.n	8009a52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a18      	ldr	r2, [pc, #96]	@ (8009a90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d00e      	beq.n	8009a52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a16      	ldr	r2, [pc, #88]	@ (8009a94 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d009      	beq.n	8009a52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a15      	ldr	r2, [pc, #84]	@ (8009a98 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d004      	beq.n	8009a52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a13      	ldr	r2, [pc, #76]	@ (8009a9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d10c      	bne.n	8009a6c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	68ba      	ldr	r2, [r7, #8]
 8009a60:	4313      	orrs	r3, r2
 8009a62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	68ba      	ldr	r2, [r7, #8]
 8009a6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009a7c:	2300      	movs	r3, #0
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3714      	adds	r7, #20
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr
 8009a8a:	bf00      	nop
 8009a8c:	40010000 	.word	0x40010000
 8009a90:	40000400 	.word	0x40000400
 8009a94:	40000800 	.word	0x40000800
 8009a98:	40000c00 	.word	0x40000c00
 8009a9c:	40014000 	.word	0x40014000

08009aa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009aa8:	bf00      	nop
 8009aaa:	370c      	adds	r7, #12
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b083      	sub	sp, #12
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009abc:	bf00      	nop
 8009abe:	370c      	adds	r7, #12
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009ac8:	b084      	sub	sp, #16
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b084      	sub	sp, #16
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
 8009ad2:	f107 001c 	add.w	r0, r7, #28
 8009ad6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009ada:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d123      	bne.n	8009b2a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ae6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009af6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009b0a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d105      	bne.n	8009b1e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	68db      	ldr	r3, [r3, #12]
 8009b16:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f001 fae8 	bl	800b0f4 <USB_CoreReset>
 8009b24:	4603      	mov	r3, r0
 8009b26:	73fb      	strb	r3, [r7, #15]
 8009b28:	e01b      	b.n	8009b62 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f001 fadc 	bl	800b0f4 <USB_CoreReset>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009b40:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d106      	bne.n	8009b56 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b4c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	639a      	str	r2, [r3, #56]	@ 0x38
 8009b54:	e005      	b.n	8009b62 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b5a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009b62:	7fbb      	ldrb	r3, [r7, #30]
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d10b      	bne.n	8009b80 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	f043 0206 	orr.w	r2, r3, #6
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	f043 0220 	orr.w	r2, r3, #32
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3710      	adds	r7, #16
 8009b86:	46bd      	mov	sp, r7
 8009b88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009b8c:	b004      	add	sp, #16
 8009b8e:	4770      	bx	lr

08009b90 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b087      	sub	sp, #28
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	60f8      	str	r0, [r7, #12]
 8009b98:	60b9      	str	r1, [r7, #8]
 8009b9a:	4613      	mov	r3, r2
 8009b9c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009b9e:	79fb      	ldrb	r3, [r7, #7]
 8009ba0:	2b02      	cmp	r3, #2
 8009ba2:	d165      	bne.n	8009c70 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	4a41      	ldr	r2, [pc, #260]	@ (8009cac <USB_SetTurnaroundTime+0x11c>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d906      	bls.n	8009bba <USB_SetTurnaroundTime+0x2a>
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	4a40      	ldr	r2, [pc, #256]	@ (8009cb0 <USB_SetTurnaroundTime+0x120>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d202      	bcs.n	8009bba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009bb4:	230f      	movs	r3, #15
 8009bb6:	617b      	str	r3, [r7, #20]
 8009bb8:	e062      	b.n	8009c80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	4a3c      	ldr	r2, [pc, #240]	@ (8009cb0 <USB_SetTurnaroundTime+0x120>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d306      	bcc.n	8009bd0 <USB_SetTurnaroundTime+0x40>
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	4a3b      	ldr	r2, [pc, #236]	@ (8009cb4 <USB_SetTurnaroundTime+0x124>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d202      	bcs.n	8009bd0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009bca:	230e      	movs	r3, #14
 8009bcc:	617b      	str	r3, [r7, #20]
 8009bce:	e057      	b.n	8009c80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	4a38      	ldr	r2, [pc, #224]	@ (8009cb4 <USB_SetTurnaroundTime+0x124>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d306      	bcc.n	8009be6 <USB_SetTurnaroundTime+0x56>
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	4a37      	ldr	r2, [pc, #220]	@ (8009cb8 <USB_SetTurnaroundTime+0x128>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d202      	bcs.n	8009be6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009be0:	230d      	movs	r3, #13
 8009be2:	617b      	str	r3, [r7, #20]
 8009be4:	e04c      	b.n	8009c80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	4a33      	ldr	r2, [pc, #204]	@ (8009cb8 <USB_SetTurnaroundTime+0x128>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d306      	bcc.n	8009bfc <USB_SetTurnaroundTime+0x6c>
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	4a32      	ldr	r2, [pc, #200]	@ (8009cbc <USB_SetTurnaroundTime+0x12c>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d802      	bhi.n	8009bfc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009bf6:	230c      	movs	r3, #12
 8009bf8:	617b      	str	r3, [r7, #20]
 8009bfa:	e041      	b.n	8009c80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	4a2f      	ldr	r2, [pc, #188]	@ (8009cbc <USB_SetTurnaroundTime+0x12c>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d906      	bls.n	8009c12 <USB_SetTurnaroundTime+0x82>
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	4a2e      	ldr	r2, [pc, #184]	@ (8009cc0 <USB_SetTurnaroundTime+0x130>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d802      	bhi.n	8009c12 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009c0c:	230b      	movs	r3, #11
 8009c0e:	617b      	str	r3, [r7, #20]
 8009c10:	e036      	b.n	8009c80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	4a2a      	ldr	r2, [pc, #168]	@ (8009cc0 <USB_SetTurnaroundTime+0x130>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d906      	bls.n	8009c28 <USB_SetTurnaroundTime+0x98>
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	4a29      	ldr	r2, [pc, #164]	@ (8009cc4 <USB_SetTurnaroundTime+0x134>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d802      	bhi.n	8009c28 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009c22:	230a      	movs	r3, #10
 8009c24:	617b      	str	r3, [r7, #20]
 8009c26:	e02b      	b.n	8009c80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	4a26      	ldr	r2, [pc, #152]	@ (8009cc4 <USB_SetTurnaroundTime+0x134>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d906      	bls.n	8009c3e <USB_SetTurnaroundTime+0xae>
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	4a25      	ldr	r2, [pc, #148]	@ (8009cc8 <USB_SetTurnaroundTime+0x138>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d202      	bcs.n	8009c3e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009c38:	2309      	movs	r3, #9
 8009c3a:	617b      	str	r3, [r7, #20]
 8009c3c:	e020      	b.n	8009c80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	4a21      	ldr	r2, [pc, #132]	@ (8009cc8 <USB_SetTurnaroundTime+0x138>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d306      	bcc.n	8009c54 <USB_SetTurnaroundTime+0xc4>
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	4a20      	ldr	r2, [pc, #128]	@ (8009ccc <USB_SetTurnaroundTime+0x13c>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d802      	bhi.n	8009c54 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009c4e:	2308      	movs	r3, #8
 8009c50:	617b      	str	r3, [r7, #20]
 8009c52:	e015      	b.n	8009c80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	4a1d      	ldr	r2, [pc, #116]	@ (8009ccc <USB_SetTurnaroundTime+0x13c>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d906      	bls.n	8009c6a <USB_SetTurnaroundTime+0xda>
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	4a1c      	ldr	r2, [pc, #112]	@ (8009cd0 <USB_SetTurnaroundTime+0x140>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d202      	bcs.n	8009c6a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009c64:	2307      	movs	r3, #7
 8009c66:	617b      	str	r3, [r7, #20]
 8009c68:	e00a      	b.n	8009c80 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009c6a:	2306      	movs	r3, #6
 8009c6c:	617b      	str	r3, [r7, #20]
 8009c6e:	e007      	b.n	8009c80 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009c70:	79fb      	ldrb	r3, [r7, #7]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d102      	bne.n	8009c7c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009c76:	2309      	movs	r3, #9
 8009c78:	617b      	str	r3, [r7, #20]
 8009c7a:	e001      	b.n	8009c80 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009c7c:	2309      	movs	r3, #9
 8009c7e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	68db      	ldr	r3, [r3, #12]
 8009c84:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	68da      	ldr	r2, [r3, #12]
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	029b      	lsls	r3, r3, #10
 8009c94:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009c98:	431a      	orrs	r2, r3
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009c9e:	2300      	movs	r3, #0
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	371c      	adds	r7, #28
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr
 8009cac:	00d8acbf 	.word	0x00d8acbf
 8009cb0:	00e4e1c0 	.word	0x00e4e1c0
 8009cb4:	00f42400 	.word	0x00f42400
 8009cb8:	01067380 	.word	0x01067380
 8009cbc:	011a499f 	.word	0x011a499f
 8009cc0:	01312cff 	.word	0x01312cff
 8009cc4:	014ca43f 	.word	0x014ca43f
 8009cc8:	016e3600 	.word	0x016e3600
 8009ccc:	01a6ab1f 	.word	0x01a6ab1f
 8009cd0:	01e84800 	.word	0x01e84800

08009cd4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b083      	sub	sp, #12
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	f043 0201 	orr.w	r2, r3, #1
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009ce8:	2300      	movs	r3, #0
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	370c      	adds	r7, #12
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr

08009cf6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009cf6:	b480      	push	{r7}
 8009cf8:	b083      	sub	sp, #12
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	f023 0201 	bic.w	r2, r3, #1
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	370c      	adds	r7, #12
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr

08009d18 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	460b      	mov	r3, r1
 8009d22:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009d24:	2300      	movs	r3, #0
 8009d26:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009d34:	78fb      	ldrb	r3, [r7, #3]
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d115      	bne.n	8009d66 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009d46:	200a      	movs	r0, #10
 8009d48:	f7f8 fb94 	bl	8002474 <HAL_Delay>
      ms += 10U;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	330a      	adds	r3, #10
 8009d50:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f001 f93f 	bl	800afd6 <USB_GetMode>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d01e      	beq.n	8009d9c <USB_SetCurrentMode+0x84>
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2bc7      	cmp	r3, #199	@ 0xc7
 8009d62:	d9f0      	bls.n	8009d46 <USB_SetCurrentMode+0x2e>
 8009d64:	e01a      	b.n	8009d9c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009d66:	78fb      	ldrb	r3, [r7, #3]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d115      	bne.n	8009d98 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	68db      	ldr	r3, [r3, #12]
 8009d70:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009d78:	200a      	movs	r0, #10
 8009d7a:	f7f8 fb7b 	bl	8002474 <HAL_Delay>
      ms += 10U;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	330a      	adds	r3, #10
 8009d82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f001 f926 	bl	800afd6 <USB_GetMode>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d005      	beq.n	8009d9c <USB_SetCurrentMode+0x84>
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2bc7      	cmp	r3, #199	@ 0xc7
 8009d94:	d9f0      	bls.n	8009d78 <USB_SetCurrentMode+0x60>
 8009d96:	e001      	b.n	8009d9c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	e005      	b.n	8009da8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2bc8      	cmp	r3, #200	@ 0xc8
 8009da0:	d101      	bne.n	8009da6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	e000      	b.n	8009da8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3710      	adds	r7, #16
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009db0:	b084      	sub	sp, #16
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b086      	sub	sp, #24
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
 8009dba:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009dbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009dca:	2300      	movs	r3, #0
 8009dcc:	613b      	str	r3, [r7, #16]
 8009dce:	e009      	b.n	8009de4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	3340      	adds	r3, #64	@ 0x40
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	4413      	add	r3, r2
 8009dda:	2200      	movs	r2, #0
 8009ddc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	3301      	adds	r3, #1
 8009de2:	613b      	str	r3, [r7, #16]
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	2b0e      	cmp	r3, #14
 8009de8:	d9f2      	bls.n	8009dd0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009dea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d11c      	bne.n	8009e2c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009e00:	f043 0302 	orr.w	r3, r3, #2
 8009e04:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e0a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e16:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e22:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	639a      	str	r2, [r3, #56]	@ 0x38
 8009e2a:	e00b      	b.n	8009e44 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e30:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e3c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009e50:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d10d      	bne.n	8009e74 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009e58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d104      	bne.n	8009e6a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009e60:	2100      	movs	r1, #0
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 f968 	bl	800a138 <USB_SetDevSpeed>
 8009e68:	e008      	b.n	8009e7c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009e6a:	2101      	movs	r1, #1
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 f963 	bl	800a138 <USB_SetDevSpeed>
 8009e72:	e003      	b.n	8009e7c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009e74:	2103      	movs	r1, #3
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 f95e 	bl	800a138 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009e7c:	2110      	movs	r1, #16
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 f8fa 	bl	800a078 <USB_FlushTxFifo>
 8009e84:	4603      	mov	r3, r0
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d001      	beq.n	8009e8e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 f924 	bl	800a0dc <USB_FlushRxFifo>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d001      	beq.n	8009e9e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	613b      	str	r3, [r7, #16]
 8009ec6:	e043      	b.n	8009f50 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	015a      	lsls	r2, r3, #5
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	4413      	add	r3, r2
 8009ed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009eda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ede:	d118      	bne.n	8009f12 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d10a      	bne.n	8009efc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	015a      	lsls	r2, r3, #5
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	4413      	add	r3, r2
 8009eee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009ef8:	6013      	str	r3, [r2, #0]
 8009efa:	e013      	b.n	8009f24 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	015a      	lsls	r2, r3, #5
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	4413      	add	r3, r2
 8009f04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f08:	461a      	mov	r2, r3
 8009f0a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009f0e:	6013      	str	r3, [r2, #0]
 8009f10:	e008      	b.n	8009f24 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	015a      	lsls	r2, r3, #5
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	4413      	add	r3, r2
 8009f1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f1e:	461a      	mov	r2, r3
 8009f20:	2300      	movs	r3, #0
 8009f22:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	015a      	lsls	r2, r3, #5
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	4413      	add	r3, r2
 8009f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f30:	461a      	mov	r2, r3
 8009f32:	2300      	movs	r3, #0
 8009f34:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	015a      	lsls	r2, r3, #5
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	4413      	add	r3, r2
 8009f3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f42:	461a      	mov	r2, r3
 8009f44:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009f48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	613b      	str	r3, [r7, #16]
 8009f50:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009f54:	461a      	mov	r2, r3
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d3b5      	bcc.n	8009ec8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	613b      	str	r3, [r7, #16]
 8009f60:	e043      	b.n	8009fea <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	015a      	lsls	r2, r3, #5
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	4413      	add	r3, r2
 8009f6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f78:	d118      	bne.n	8009fac <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d10a      	bne.n	8009f96 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	015a      	lsls	r2, r3, #5
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	4413      	add	r3, r2
 8009f88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009f92:	6013      	str	r3, [r2, #0]
 8009f94:	e013      	b.n	8009fbe <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	015a      	lsls	r2, r3, #5
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	4413      	add	r3, r2
 8009f9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009fa8:	6013      	str	r3, [r2, #0]
 8009faa:	e008      	b.n	8009fbe <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	015a      	lsls	r2, r3, #5
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fb8:	461a      	mov	r2, r3
 8009fba:	2300      	movs	r3, #0
 8009fbc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	015a      	lsls	r2, r3, #5
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fca:	461a      	mov	r2, r3
 8009fcc:	2300      	movs	r3, #0
 8009fce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	015a      	lsls	r2, r3, #5
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fdc:	461a      	mov	r2, r3
 8009fde:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009fe2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	613b      	str	r3, [r7, #16]
 8009fea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009fee:	461a      	mov	r2, r3
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d3b5      	bcc.n	8009f62 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ffc:	691b      	ldr	r3, [r3, #16]
 8009ffe:	68fa      	ldr	r2, [r7, #12]
 800a000:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a004:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a008:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2200      	movs	r2, #0
 800a00e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a016:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a018:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d105      	bne.n	800a02c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	699b      	ldr	r3, [r3, #24]
 800a024:	f043 0210 	orr.w	r2, r3, #16
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	699a      	ldr	r2, [r3, #24]
 800a030:	4b10      	ldr	r3, [pc, #64]	@ (800a074 <USB_DevInit+0x2c4>)
 800a032:	4313      	orrs	r3, r2
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a038:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d005      	beq.n	800a04c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	699b      	ldr	r3, [r3, #24]
 800a044:	f043 0208 	orr.w	r2, r3, #8
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a04c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a050:	2b01      	cmp	r3, #1
 800a052:	d107      	bne.n	800a064 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	699b      	ldr	r3, [r3, #24]
 800a058:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a05c:	f043 0304 	orr.w	r3, r3, #4
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a064:	7dfb      	ldrb	r3, [r7, #23]
}
 800a066:	4618      	mov	r0, r3
 800a068:	3718      	adds	r7, #24
 800a06a:	46bd      	mov	sp, r7
 800a06c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a070:	b004      	add	sp, #16
 800a072:	4770      	bx	lr
 800a074:	803c3800 	.word	0x803c3800

0800a078 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a078:	b480      	push	{r7}
 800a07a:	b085      	sub	sp, #20
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a082:	2300      	movs	r3, #0
 800a084:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	3301      	adds	r3, #1
 800a08a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a092:	d901      	bls.n	800a098 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a094:	2303      	movs	r3, #3
 800a096:	e01b      	b.n	800a0d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	691b      	ldr	r3, [r3, #16]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	daf2      	bge.n	800a086 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	019b      	lsls	r3, r3, #6
 800a0a8:	f043 0220 	orr.w	r2, r3, #32
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a0bc:	d901      	bls.n	800a0c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a0be:	2303      	movs	r3, #3
 800a0c0:	e006      	b.n	800a0d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	691b      	ldr	r3, [r3, #16]
 800a0c6:	f003 0320 	and.w	r3, r3, #32
 800a0ca:	2b20      	cmp	r3, #32
 800a0cc:	d0f0      	beq.n	800a0b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a0ce:	2300      	movs	r3, #0
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3714      	adds	r7, #20
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr

0800a0dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b085      	sub	sp, #20
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a0f4:	d901      	bls.n	800a0fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a0f6:	2303      	movs	r3, #3
 800a0f8:	e018      	b.n	800a12c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	691b      	ldr	r3, [r3, #16]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	daf2      	bge.n	800a0e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a102:	2300      	movs	r3, #0
 800a104:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2210      	movs	r2, #16
 800a10a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	3301      	adds	r3, #1
 800a110:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a118:	d901      	bls.n	800a11e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a11a:	2303      	movs	r3, #3
 800a11c:	e006      	b.n	800a12c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	691b      	ldr	r3, [r3, #16]
 800a122:	f003 0310 	and.w	r3, r3, #16
 800a126:	2b10      	cmp	r3, #16
 800a128:	d0f0      	beq.n	800a10c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a12a:	2300      	movs	r3, #0
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3714      	adds	r7, #20
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr

0800a138 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a138:	b480      	push	{r7}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	460b      	mov	r3, r1
 800a142:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	78fb      	ldrb	r3, [r7, #3]
 800a152:	68f9      	ldr	r1, [r7, #12]
 800a154:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a158:	4313      	orrs	r3, r2
 800a15a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a15c:	2300      	movs	r3, #0
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3714      	adds	r7, #20
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr

0800a16a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a16a:	b480      	push	{r7}
 800a16c:	b087      	sub	sp, #28
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	f003 0306 	and.w	r3, r3, #6
 800a182:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d102      	bne.n	800a190 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a18a:	2300      	movs	r3, #0
 800a18c:	75fb      	strb	r3, [r7, #23]
 800a18e:	e00a      	b.n	800a1a6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2b02      	cmp	r3, #2
 800a194:	d002      	beq.n	800a19c <USB_GetDevSpeed+0x32>
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2b06      	cmp	r3, #6
 800a19a:	d102      	bne.n	800a1a2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a19c:	2302      	movs	r3, #2
 800a19e:	75fb      	strb	r3, [r7, #23]
 800a1a0:	e001      	b.n	800a1a6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a1a2:	230f      	movs	r3, #15
 800a1a4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a1a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	371c      	adds	r7, #28
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b085      	sub	sp, #20
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	785b      	ldrb	r3, [r3, #1]
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d13a      	bne.n	800a246 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1d6:	69da      	ldr	r2, [r3, #28]
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	f003 030f 	and.w	r3, r3, #15
 800a1e0:	2101      	movs	r1, #1
 800a1e2:	fa01 f303 	lsl.w	r3, r1, r3
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	68f9      	ldr	r1, [r7, #12]
 800a1ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	015a      	lsls	r2, r3, #5
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	4413      	add	r3, r2
 800a1fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a204:	2b00      	cmp	r3, #0
 800a206:	d155      	bne.n	800a2b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	015a      	lsls	r2, r3, #5
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	4413      	add	r3, r2
 800a210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	791b      	ldrb	r3, [r3, #4]
 800a222:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a224:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	059b      	lsls	r3, r3, #22
 800a22a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a22c:	4313      	orrs	r3, r2
 800a22e:	68ba      	ldr	r2, [r7, #8]
 800a230:	0151      	lsls	r1, r2, #5
 800a232:	68fa      	ldr	r2, [r7, #12]
 800a234:	440a      	add	r2, r1
 800a236:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a23a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a23e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a242:	6013      	str	r3, [r2, #0]
 800a244:	e036      	b.n	800a2b4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a24c:	69da      	ldr	r2, [r3, #28]
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	f003 030f 	and.w	r3, r3, #15
 800a256:	2101      	movs	r1, #1
 800a258:	fa01 f303 	lsl.w	r3, r1, r3
 800a25c:	041b      	lsls	r3, r3, #16
 800a25e:	68f9      	ldr	r1, [r7, #12]
 800a260:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a264:	4313      	orrs	r3, r2
 800a266:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	015a      	lsls	r2, r3, #5
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	4413      	add	r3, r2
 800a270:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d11a      	bne.n	800a2b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	015a      	lsls	r2, r3, #5
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	4413      	add	r3, r2
 800a286:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	791b      	ldrb	r3, [r3, #4]
 800a298:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a29a:	430b      	orrs	r3, r1
 800a29c:	4313      	orrs	r3, r2
 800a29e:	68ba      	ldr	r2, [r7, #8]
 800a2a0:	0151      	lsls	r1, r2, #5
 800a2a2:	68fa      	ldr	r2, [r7, #12]
 800a2a4:	440a      	add	r2, r1
 800a2a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a2ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2b2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3714      	adds	r7, #20
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr
	...

0800a2c4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b085      	sub	sp, #20
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	785b      	ldrb	r3, [r3, #1]
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d161      	bne.n	800a3a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	015a      	lsls	r2, r3, #5
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	4413      	add	r3, r2
 800a2e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a2f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a2f6:	d11f      	bne.n	800a338 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	015a      	lsls	r2, r3, #5
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	4413      	add	r3, r2
 800a300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	68ba      	ldr	r2, [r7, #8]
 800a308:	0151      	lsls	r1, r2, #5
 800a30a:	68fa      	ldr	r2, [r7, #12]
 800a30c:	440a      	add	r2, r1
 800a30e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a312:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a316:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	015a      	lsls	r2, r3, #5
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	4413      	add	r3, r2
 800a320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	68ba      	ldr	r2, [r7, #8]
 800a328:	0151      	lsls	r1, r2, #5
 800a32a:	68fa      	ldr	r2, [r7, #12]
 800a32c:	440a      	add	r2, r1
 800a32e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a332:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a336:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a33e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	f003 030f 	and.w	r3, r3, #15
 800a348:	2101      	movs	r1, #1
 800a34a:	fa01 f303 	lsl.w	r3, r1, r3
 800a34e:	b29b      	uxth	r3, r3
 800a350:	43db      	mvns	r3, r3
 800a352:	68f9      	ldr	r1, [r7, #12]
 800a354:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a358:	4013      	ands	r3, r2
 800a35a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a362:	69da      	ldr	r2, [r3, #28]
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	f003 030f 	and.w	r3, r3, #15
 800a36c:	2101      	movs	r1, #1
 800a36e:	fa01 f303 	lsl.w	r3, r1, r3
 800a372:	b29b      	uxth	r3, r3
 800a374:	43db      	mvns	r3, r3
 800a376:	68f9      	ldr	r1, [r7, #12]
 800a378:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a37c:	4013      	ands	r3, r2
 800a37e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	015a      	lsls	r2, r3, #5
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	4413      	add	r3, r2
 800a388:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	0159      	lsls	r1, r3, #5
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	440b      	add	r3, r1
 800a396:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a39a:	4619      	mov	r1, r3
 800a39c:	4b35      	ldr	r3, [pc, #212]	@ (800a474 <USB_DeactivateEndpoint+0x1b0>)
 800a39e:	4013      	ands	r3, r2
 800a3a0:	600b      	str	r3, [r1, #0]
 800a3a2:	e060      	b.n	800a466 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	015a      	lsls	r2, r3, #5
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	4413      	add	r3, r2
 800a3ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a3b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a3ba:	d11f      	bne.n	800a3fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	015a      	lsls	r2, r3, #5
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	4413      	add	r3, r2
 800a3c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	68ba      	ldr	r2, [r7, #8]
 800a3cc:	0151      	lsls	r1, r2, #5
 800a3ce:	68fa      	ldr	r2, [r7, #12]
 800a3d0:	440a      	add	r2, r1
 800a3d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a3da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	015a      	lsls	r2, r3, #5
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	4413      	add	r3, r2
 800a3e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	68ba      	ldr	r2, [r7, #8]
 800a3ec:	0151      	lsls	r1, r2, #5
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	440a      	add	r2, r1
 800a3f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a3fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a402:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	f003 030f 	and.w	r3, r3, #15
 800a40c:	2101      	movs	r1, #1
 800a40e:	fa01 f303 	lsl.w	r3, r1, r3
 800a412:	041b      	lsls	r3, r3, #16
 800a414:	43db      	mvns	r3, r3
 800a416:	68f9      	ldr	r1, [r7, #12]
 800a418:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a41c:	4013      	ands	r3, r2
 800a41e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a426:	69da      	ldr	r2, [r3, #28]
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	f003 030f 	and.w	r3, r3, #15
 800a430:	2101      	movs	r1, #1
 800a432:	fa01 f303 	lsl.w	r3, r1, r3
 800a436:	041b      	lsls	r3, r3, #16
 800a438:	43db      	mvns	r3, r3
 800a43a:	68f9      	ldr	r1, [r7, #12]
 800a43c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a440:	4013      	ands	r3, r2
 800a442:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	015a      	lsls	r2, r3, #5
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	4413      	add	r3, r2
 800a44c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a450:	681a      	ldr	r2, [r3, #0]
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	0159      	lsls	r1, r3, #5
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	440b      	add	r3, r1
 800a45a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a45e:	4619      	mov	r1, r3
 800a460:	4b05      	ldr	r3, [pc, #20]	@ (800a478 <USB_DeactivateEndpoint+0x1b4>)
 800a462:	4013      	ands	r3, r2
 800a464:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a466:	2300      	movs	r3, #0
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3714      	adds	r7, #20
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr
 800a474:	ec337800 	.word	0xec337800
 800a478:	eff37800 	.word	0xeff37800

0800a47c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b08a      	sub	sp, #40	@ 0x28
 800a480:	af02      	add	r7, sp, #8
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	4613      	mov	r3, r2
 800a488:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	785b      	ldrb	r3, [r3, #1]
 800a498:	2b01      	cmp	r3, #1
 800a49a:	f040 817f 	bne.w	800a79c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	691b      	ldr	r3, [r3, #16]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d132      	bne.n	800a50c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	015a      	lsls	r2, r3, #5
 800a4aa:	69fb      	ldr	r3, [r7, #28]
 800a4ac:	4413      	add	r3, r2
 800a4ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4b2:	691b      	ldr	r3, [r3, #16]
 800a4b4:	69ba      	ldr	r2, [r7, #24]
 800a4b6:	0151      	lsls	r1, r2, #5
 800a4b8:	69fa      	ldr	r2, [r7, #28]
 800a4ba:	440a      	add	r2, r1
 800a4bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4c0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a4c4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a4c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	015a      	lsls	r2, r3, #5
 800a4ce:	69fb      	ldr	r3, [r7, #28]
 800a4d0:	4413      	add	r3, r2
 800a4d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4d6:	691b      	ldr	r3, [r3, #16]
 800a4d8:	69ba      	ldr	r2, [r7, #24]
 800a4da:	0151      	lsls	r1, r2, #5
 800a4dc:	69fa      	ldr	r2, [r7, #28]
 800a4de:	440a      	add	r2, r1
 800a4e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a4e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a4ea:	69bb      	ldr	r3, [r7, #24]
 800a4ec:	015a      	lsls	r2, r3, #5
 800a4ee:	69fb      	ldr	r3, [r7, #28]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4f6:	691b      	ldr	r3, [r3, #16]
 800a4f8:	69ba      	ldr	r2, [r7, #24]
 800a4fa:	0151      	lsls	r1, r2, #5
 800a4fc:	69fa      	ldr	r2, [r7, #28]
 800a4fe:	440a      	add	r2, r1
 800a500:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a504:	0cdb      	lsrs	r3, r3, #19
 800a506:	04db      	lsls	r3, r3, #19
 800a508:	6113      	str	r3, [r2, #16]
 800a50a:	e097      	b.n	800a63c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	015a      	lsls	r2, r3, #5
 800a510:	69fb      	ldr	r3, [r7, #28]
 800a512:	4413      	add	r3, r2
 800a514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	69ba      	ldr	r2, [r7, #24]
 800a51c:	0151      	lsls	r1, r2, #5
 800a51e:	69fa      	ldr	r2, [r7, #28]
 800a520:	440a      	add	r2, r1
 800a522:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a526:	0cdb      	lsrs	r3, r3, #19
 800a528:	04db      	lsls	r3, r3, #19
 800a52a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a52c:	69bb      	ldr	r3, [r7, #24]
 800a52e:	015a      	lsls	r2, r3, #5
 800a530:	69fb      	ldr	r3, [r7, #28]
 800a532:	4413      	add	r3, r2
 800a534:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a538:	691b      	ldr	r3, [r3, #16]
 800a53a:	69ba      	ldr	r2, [r7, #24]
 800a53c:	0151      	lsls	r1, r2, #5
 800a53e:	69fa      	ldr	r2, [r7, #28]
 800a540:	440a      	add	r2, r1
 800a542:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a546:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a54a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a54e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a550:	69bb      	ldr	r3, [r7, #24]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d11a      	bne.n	800a58c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	691a      	ldr	r2, [r3, #16]
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	429a      	cmp	r2, r3
 800a560:	d903      	bls.n	800a56a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	689a      	ldr	r2, [r3, #8]
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	015a      	lsls	r2, r3, #5
 800a56e:	69fb      	ldr	r3, [r7, #28]
 800a570:	4413      	add	r3, r2
 800a572:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a576:	691b      	ldr	r3, [r3, #16]
 800a578:	69ba      	ldr	r2, [r7, #24]
 800a57a:	0151      	lsls	r1, r2, #5
 800a57c:	69fa      	ldr	r2, [r7, #28]
 800a57e:	440a      	add	r2, r1
 800a580:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a584:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a588:	6113      	str	r3, [r2, #16]
 800a58a:	e044      	b.n	800a616 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	691a      	ldr	r2, [r3, #16]
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	4413      	add	r3, r2
 800a596:	1e5a      	subs	r2, r3, #1
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5a0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	015a      	lsls	r2, r3, #5
 800a5a6:	69fb      	ldr	r3, [r7, #28]
 800a5a8:	4413      	add	r3, r2
 800a5aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5ae:	691a      	ldr	r2, [r3, #16]
 800a5b0:	8afb      	ldrh	r3, [r7, #22]
 800a5b2:	04d9      	lsls	r1, r3, #19
 800a5b4:	4ba4      	ldr	r3, [pc, #656]	@ (800a848 <USB_EPStartXfer+0x3cc>)
 800a5b6:	400b      	ands	r3, r1
 800a5b8:	69b9      	ldr	r1, [r7, #24]
 800a5ba:	0148      	lsls	r0, r1, #5
 800a5bc:	69f9      	ldr	r1, [r7, #28]
 800a5be:	4401      	add	r1, r0
 800a5c0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a5c4:	4313      	orrs	r3, r2
 800a5c6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	791b      	ldrb	r3, [r3, #4]
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d122      	bne.n	800a616 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a5d0:	69bb      	ldr	r3, [r7, #24]
 800a5d2:	015a      	lsls	r2, r3, #5
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	4413      	add	r3, r2
 800a5d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5dc:	691b      	ldr	r3, [r3, #16]
 800a5de:	69ba      	ldr	r2, [r7, #24]
 800a5e0:	0151      	lsls	r1, r2, #5
 800a5e2:	69fa      	ldr	r2, [r7, #28]
 800a5e4:	440a      	add	r2, r1
 800a5e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5ea:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a5ee:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800a5f0:	69bb      	ldr	r3, [r7, #24]
 800a5f2:	015a      	lsls	r2, r3, #5
 800a5f4:	69fb      	ldr	r3, [r7, #28]
 800a5f6:	4413      	add	r3, r2
 800a5f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5fc:	691a      	ldr	r2, [r3, #16]
 800a5fe:	8afb      	ldrh	r3, [r7, #22]
 800a600:	075b      	lsls	r3, r3, #29
 800a602:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a606:	69b9      	ldr	r1, [r7, #24]
 800a608:	0148      	lsls	r0, r1, #5
 800a60a:	69f9      	ldr	r1, [r7, #28]
 800a60c:	4401      	add	r1, r0
 800a60e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a612:	4313      	orrs	r3, r2
 800a614:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a616:	69bb      	ldr	r3, [r7, #24]
 800a618:	015a      	lsls	r2, r3, #5
 800a61a:	69fb      	ldr	r3, [r7, #28]
 800a61c:	4413      	add	r3, r2
 800a61e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a622:	691a      	ldr	r2, [r3, #16]
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	691b      	ldr	r3, [r3, #16]
 800a628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a62c:	69b9      	ldr	r1, [r7, #24]
 800a62e:	0148      	lsls	r0, r1, #5
 800a630:	69f9      	ldr	r1, [r7, #28]
 800a632:	4401      	add	r1, r0
 800a634:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a638:	4313      	orrs	r3, r2
 800a63a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a63c:	79fb      	ldrb	r3, [r7, #7]
 800a63e:	2b01      	cmp	r3, #1
 800a640:	d14b      	bne.n	800a6da <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	69db      	ldr	r3, [r3, #28]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d009      	beq.n	800a65e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a64a:	69bb      	ldr	r3, [r7, #24]
 800a64c:	015a      	lsls	r2, r3, #5
 800a64e:	69fb      	ldr	r3, [r7, #28]
 800a650:	4413      	add	r3, r2
 800a652:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a656:	461a      	mov	r2, r3
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	69db      	ldr	r3, [r3, #28]
 800a65c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	791b      	ldrb	r3, [r3, #4]
 800a662:	2b01      	cmp	r3, #1
 800a664:	d128      	bne.n	800a6b8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a666:	69fb      	ldr	r3, [r7, #28]
 800a668:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a66c:	689b      	ldr	r3, [r3, #8]
 800a66e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a672:	2b00      	cmp	r3, #0
 800a674:	d110      	bne.n	800a698 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a676:	69bb      	ldr	r3, [r7, #24]
 800a678:	015a      	lsls	r2, r3, #5
 800a67a:	69fb      	ldr	r3, [r7, #28]
 800a67c:	4413      	add	r3, r2
 800a67e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	69ba      	ldr	r2, [r7, #24]
 800a686:	0151      	lsls	r1, r2, #5
 800a688:	69fa      	ldr	r2, [r7, #28]
 800a68a:	440a      	add	r2, r1
 800a68c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a690:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a694:	6013      	str	r3, [r2, #0]
 800a696:	e00f      	b.n	800a6b8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a698:	69bb      	ldr	r3, [r7, #24]
 800a69a:	015a      	lsls	r2, r3, #5
 800a69c:	69fb      	ldr	r3, [r7, #28]
 800a69e:	4413      	add	r3, r2
 800a6a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	69ba      	ldr	r2, [r7, #24]
 800a6a8:	0151      	lsls	r1, r2, #5
 800a6aa:	69fa      	ldr	r2, [r7, #28]
 800a6ac:	440a      	add	r2, r1
 800a6ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a6b6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a6b8:	69bb      	ldr	r3, [r7, #24]
 800a6ba:	015a      	lsls	r2, r3, #5
 800a6bc:	69fb      	ldr	r3, [r7, #28]
 800a6be:	4413      	add	r3, r2
 800a6c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	69ba      	ldr	r2, [r7, #24]
 800a6c8:	0151      	lsls	r1, r2, #5
 800a6ca:	69fa      	ldr	r2, [r7, #28]
 800a6cc:	440a      	add	r2, r1
 800a6ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6d2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a6d6:	6013      	str	r3, [r2, #0]
 800a6d8:	e166      	b.n	800a9a8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	015a      	lsls	r2, r3, #5
 800a6de:	69fb      	ldr	r3, [r7, #28]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	69ba      	ldr	r2, [r7, #24]
 800a6ea:	0151      	lsls	r1, r2, #5
 800a6ec:	69fa      	ldr	r2, [r7, #28]
 800a6ee:	440a      	add	r2, r1
 800a6f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6f4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a6f8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	791b      	ldrb	r3, [r3, #4]
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d015      	beq.n	800a72e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	691b      	ldr	r3, [r3, #16]
 800a706:	2b00      	cmp	r3, #0
 800a708:	f000 814e 	beq.w	800a9a8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a70c:	69fb      	ldr	r3, [r7, #28]
 800a70e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a712:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	f003 030f 	and.w	r3, r3, #15
 800a71c:	2101      	movs	r1, #1
 800a71e:	fa01 f303 	lsl.w	r3, r1, r3
 800a722:	69f9      	ldr	r1, [r7, #28]
 800a724:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a728:	4313      	orrs	r3, r2
 800a72a:	634b      	str	r3, [r1, #52]	@ 0x34
 800a72c:	e13c      	b.n	800a9a8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a72e:	69fb      	ldr	r3, [r7, #28]
 800a730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a734:	689b      	ldr	r3, [r3, #8]
 800a736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d110      	bne.n	800a760 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a73e:	69bb      	ldr	r3, [r7, #24]
 800a740:	015a      	lsls	r2, r3, #5
 800a742:	69fb      	ldr	r3, [r7, #28]
 800a744:	4413      	add	r3, r2
 800a746:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	69ba      	ldr	r2, [r7, #24]
 800a74e:	0151      	lsls	r1, r2, #5
 800a750:	69fa      	ldr	r2, [r7, #28]
 800a752:	440a      	add	r2, r1
 800a754:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a758:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a75c:	6013      	str	r3, [r2, #0]
 800a75e:	e00f      	b.n	800a780 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a760:	69bb      	ldr	r3, [r7, #24]
 800a762:	015a      	lsls	r2, r3, #5
 800a764:	69fb      	ldr	r3, [r7, #28]
 800a766:	4413      	add	r3, r2
 800a768:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	69ba      	ldr	r2, [r7, #24]
 800a770:	0151      	lsls	r1, r2, #5
 800a772:	69fa      	ldr	r2, [r7, #28]
 800a774:	440a      	add	r2, r1
 800a776:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a77a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a77e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	68d9      	ldr	r1, [r3, #12]
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	781a      	ldrb	r2, [r3, #0]
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	691b      	ldr	r3, [r3, #16]
 800a78c:	b298      	uxth	r0, r3
 800a78e:	79fb      	ldrb	r3, [r7, #7]
 800a790:	9300      	str	r3, [sp, #0]
 800a792:	4603      	mov	r3, r0
 800a794:	68f8      	ldr	r0, [r7, #12]
 800a796:	f000 f9b9 	bl	800ab0c <USB_WritePacket>
 800a79a:	e105      	b.n	800a9a8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a79c:	69bb      	ldr	r3, [r7, #24]
 800a79e:	015a      	lsls	r2, r3, #5
 800a7a0:	69fb      	ldr	r3, [r7, #28]
 800a7a2:	4413      	add	r3, r2
 800a7a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7a8:	691b      	ldr	r3, [r3, #16]
 800a7aa:	69ba      	ldr	r2, [r7, #24]
 800a7ac:	0151      	lsls	r1, r2, #5
 800a7ae:	69fa      	ldr	r2, [r7, #28]
 800a7b0:	440a      	add	r2, r1
 800a7b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7b6:	0cdb      	lsrs	r3, r3, #19
 800a7b8:	04db      	lsls	r3, r3, #19
 800a7ba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a7bc:	69bb      	ldr	r3, [r7, #24]
 800a7be:	015a      	lsls	r2, r3, #5
 800a7c0:	69fb      	ldr	r3, [r7, #28]
 800a7c2:	4413      	add	r3, r2
 800a7c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7c8:	691b      	ldr	r3, [r3, #16]
 800a7ca:	69ba      	ldr	r2, [r7, #24]
 800a7cc:	0151      	lsls	r1, r2, #5
 800a7ce:	69fa      	ldr	r2, [r7, #28]
 800a7d0:	440a      	add	r2, r1
 800a7d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7d6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a7da:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a7de:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a7e0:	69bb      	ldr	r3, [r7, #24]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d132      	bne.n	800a84c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	691b      	ldr	r3, [r3, #16]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d003      	beq.n	800a7f6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	689a      	ldr	r2, [r3, #8]
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	689a      	ldr	r2, [r3, #8]
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a7fe:	69bb      	ldr	r3, [r7, #24]
 800a800:	015a      	lsls	r2, r3, #5
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	4413      	add	r3, r2
 800a806:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a80a:	691a      	ldr	r2, [r3, #16]
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	6a1b      	ldr	r3, [r3, #32]
 800a810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a814:	69b9      	ldr	r1, [r7, #24]
 800a816:	0148      	lsls	r0, r1, #5
 800a818:	69f9      	ldr	r1, [r7, #28]
 800a81a:	4401      	add	r1, r0
 800a81c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a820:	4313      	orrs	r3, r2
 800a822:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a824:	69bb      	ldr	r3, [r7, #24]
 800a826:	015a      	lsls	r2, r3, #5
 800a828:	69fb      	ldr	r3, [r7, #28]
 800a82a:	4413      	add	r3, r2
 800a82c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a830:	691b      	ldr	r3, [r3, #16]
 800a832:	69ba      	ldr	r2, [r7, #24]
 800a834:	0151      	lsls	r1, r2, #5
 800a836:	69fa      	ldr	r2, [r7, #28]
 800a838:	440a      	add	r2, r1
 800a83a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a83e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a842:	6113      	str	r3, [r2, #16]
 800a844:	e062      	b.n	800a90c <USB_EPStartXfer+0x490>
 800a846:	bf00      	nop
 800a848:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	691b      	ldr	r3, [r3, #16]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d123      	bne.n	800a89c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a854:	69bb      	ldr	r3, [r7, #24]
 800a856:	015a      	lsls	r2, r3, #5
 800a858:	69fb      	ldr	r3, [r7, #28]
 800a85a:	4413      	add	r3, r2
 800a85c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a860:	691a      	ldr	r2, [r3, #16]
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a86a:	69b9      	ldr	r1, [r7, #24]
 800a86c:	0148      	lsls	r0, r1, #5
 800a86e:	69f9      	ldr	r1, [r7, #28]
 800a870:	4401      	add	r1, r0
 800a872:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a876:	4313      	orrs	r3, r2
 800a878:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a87a:	69bb      	ldr	r3, [r7, #24]
 800a87c:	015a      	lsls	r2, r3, #5
 800a87e:	69fb      	ldr	r3, [r7, #28]
 800a880:	4413      	add	r3, r2
 800a882:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a886:	691b      	ldr	r3, [r3, #16]
 800a888:	69ba      	ldr	r2, [r7, #24]
 800a88a:	0151      	lsls	r1, r2, #5
 800a88c:	69fa      	ldr	r2, [r7, #28]
 800a88e:	440a      	add	r2, r1
 800a890:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a894:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a898:	6113      	str	r3, [r2, #16]
 800a89a:	e037      	b.n	800a90c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	691a      	ldr	r2, [r3, #16]
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	4413      	add	r3, r2
 800a8a6:	1e5a      	subs	r2, r3, #1
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	689b      	ldr	r3, [r3, #8]
 800a8ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8b0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	689b      	ldr	r3, [r3, #8]
 800a8b6:	8afa      	ldrh	r2, [r7, #22]
 800a8b8:	fb03 f202 	mul.w	r2, r3, r2
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a8c0:	69bb      	ldr	r3, [r7, #24]
 800a8c2:	015a      	lsls	r2, r3, #5
 800a8c4:	69fb      	ldr	r3, [r7, #28]
 800a8c6:	4413      	add	r3, r2
 800a8c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8cc:	691a      	ldr	r2, [r3, #16]
 800a8ce:	8afb      	ldrh	r3, [r7, #22]
 800a8d0:	04d9      	lsls	r1, r3, #19
 800a8d2:	4b38      	ldr	r3, [pc, #224]	@ (800a9b4 <USB_EPStartXfer+0x538>)
 800a8d4:	400b      	ands	r3, r1
 800a8d6:	69b9      	ldr	r1, [r7, #24]
 800a8d8:	0148      	lsls	r0, r1, #5
 800a8da:	69f9      	ldr	r1, [r7, #28]
 800a8dc:	4401      	add	r1, r0
 800a8de:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a8e6:	69bb      	ldr	r3, [r7, #24]
 800a8e8:	015a      	lsls	r2, r3, #5
 800a8ea:	69fb      	ldr	r3, [r7, #28]
 800a8ec:	4413      	add	r3, r2
 800a8ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8f2:	691a      	ldr	r2, [r3, #16]
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	6a1b      	ldr	r3, [r3, #32]
 800a8f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a8fc:	69b9      	ldr	r1, [r7, #24]
 800a8fe:	0148      	lsls	r0, r1, #5
 800a900:	69f9      	ldr	r1, [r7, #28]
 800a902:	4401      	add	r1, r0
 800a904:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a908:	4313      	orrs	r3, r2
 800a90a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a90c:	79fb      	ldrb	r3, [r7, #7]
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d10d      	bne.n	800a92e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d009      	beq.n	800a92e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	68d9      	ldr	r1, [r3, #12]
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	015a      	lsls	r2, r3, #5
 800a922:	69fb      	ldr	r3, [r7, #28]
 800a924:	4413      	add	r3, r2
 800a926:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a92a:	460a      	mov	r2, r1
 800a92c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	791b      	ldrb	r3, [r3, #4]
 800a932:	2b01      	cmp	r3, #1
 800a934:	d128      	bne.n	800a988 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a936:	69fb      	ldr	r3, [r7, #28]
 800a938:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a942:	2b00      	cmp	r3, #0
 800a944:	d110      	bne.n	800a968 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a946:	69bb      	ldr	r3, [r7, #24]
 800a948:	015a      	lsls	r2, r3, #5
 800a94a:	69fb      	ldr	r3, [r7, #28]
 800a94c:	4413      	add	r3, r2
 800a94e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	69ba      	ldr	r2, [r7, #24]
 800a956:	0151      	lsls	r1, r2, #5
 800a958:	69fa      	ldr	r2, [r7, #28]
 800a95a:	440a      	add	r2, r1
 800a95c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a960:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a964:	6013      	str	r3, [r2, #0]
 800a966:	e00f      	b.n	800a988 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a968:	69bb      	ldr	r3, [r7, #24]
 800a96a:	015a      	lsls	r2, r3, #5
 800a96c:	69fb      	ldr	r3, [r7, #28]
 800a96e:	4413      	add	r3, r2
 800a970:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	69ba      	ldr	r2, [r7, #24]
 800a978:	0151      	lsls	r1, r2, #5
 800a97a:	69fa      	ldr	r2, [r7, #28]
 800a97c:	440a      	add	r2, r1
 800a97e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a982:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a986:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a988:	69bb      	ldr	r3, [r7, #24]
 800a98a:	015a      	lsls	r2, r3, #5
 800a98c:	69fb      	ldr	r3, [r7, #28]
 800a98e:	4413      	add	r3, r2
 800a990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	69ba      	ldr	r2, [r7, #24]
 800a998:	0151      	lsls	r1, r2, #5
 800a99a:	69fa      	ldr	r2, [r7, #28]
 800a99c:	440a      	add	r2, r1
 800a99e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9a2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a9a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a9a8:	2300      	movs	r3, #0
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3720      	adds	r7, #32
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	1ff80000 	.word	0x1ff80000

0800a9b8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b087      	sub	sp, #28
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	785b      	ldrb	r3, [r3, #1]
 800a9d2:	2b01      	cmp	r3, #1
 800a9d4:	d14a      	bne.n	800aa6c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	015a      	lsls	r2, r3, #5
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	4413      	add	r3, r2
 800a9e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a9ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a9ee:	f040 8086 	bne.w	800aafe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	015a      	lsls	r2, r3, #5
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	4413      	add	r3, r2
 800a9fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	683a      	ldr	r2, [r7, #0]
 800aa04:	7812      	ldrb	r2, [r2, #0]
 800aa06:	0151      	lsls	r1, r2, #5
 800aa08:	693a      	ldr	r2, [r7, #16]
 800aa0a:	440a      	add	r2, r1
 800aa0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa10:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800aa14:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	015a      	lsls	r2, r3, #5
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	4413      	add	r3, r2
 800aa20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	683a      	ldr	r2, [r7, #0]
 800aa28:	7812      	ldrb	r2, [r2, #0]
 800aa2a:	0151      	lsls	r1, r2, #5
 800aa2c:	693a      	ldr	r2, [r7, #16]
 800aa2e:	440a      	add	r2, r1
 800aa30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aa38:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	f242 7210 	movw	r2, #10000	@ 0x2710
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d902      	bls.n	800aa50 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	75fb      	strb	r3, [r7, #23]
          break;
 800aa4e:	e056      	b.n	800aafe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	015a      	lsls	r2, r3, #5
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	4413      	add	r3, r2
 800aa5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aa64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa68:	d0e7      	beq.n	800aa3a <USB_EPStopXfer+0x82>
 800aa6a:	e048      	b.n	800aafe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	015a      	lsls	r2, r3, #5
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	4413      	add	r3, r2
 800aa76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aa80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa84:	d13b      	bne.n	800aafe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	015a      	lsls	r2, r3, #5
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	4413      	add	r3, r2
 800aa90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	683a      	ldr	r2, [r7, #0]
 800aa98:	7812      	ldrb	r2, [r2, #0]
 800aa9a:	0151      	lsls	r1, r2, #5
 800aa9c:	693a      	ldr	r2, [r7, #16]
 800aa9e:	440a      	add	r2, r1
 800aaa0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aaa4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800aaa8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	015a      	lsls	r2, r3, #5
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	4413      	add	r3, r2
 800aab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	683a      	ldr	r2, [r7, #0]
 800aabc:	7812      	ldrb	r2, [r2, #0]
 800aabe:	0151      	lsls	r1, r2, #5
 800aac0:	693a      	ldr	r2, [r7, #16]
 800aac2:	440a      	add	r2, r1
 800aac4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aac8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aacc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	3301      	adds	r3, #1
 800aad2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800aada:	4293      	cmp	r3, r2
 800aadc:	d902      	bls.n	800aae4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800aade:	2301      	movs	r3, #1
 800aae0:	75fb      	strb	r3, [r7, #23]
          break;
 800aae2:	e00c      	b.n	800aafe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	015a      	lsls	r2, r3, #5
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	4413      	add	r3, r2
 800aaee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aaf8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aafc:	d0e7      	beq.n	800aace <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800aafe:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	371c      	adds	r7, #28
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b089      	sub	sp, #36	@ 0x24
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	60b9      	str	r1, [r7, #8]
 800ab16:	4611      	mov	r1, r2
 800ab18:	461a      	mov	r2, r3
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	71fb      	strb	r3, [r7, #7]
 800ab1e:	4613      	mov	r3, r2
 800ab20:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ab2a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d123      	bne.n	800ab7a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ab32:	88bb      	ldrh	r3, [r7, #4]
 800ab34:	3303      	adds	r3, #3
 800ab36:	089b      	lsrs	r3, r3, #2
 800ab38:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	61bb      	str	r3, [r7, #24]
 800ab3e:	e018      	b.n	800ab72 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ab40:	79fb      	ldrb	r3, [r7, #7]
 800ab42:	031a      	lsls	r2, r3, #12
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	4413      	add	r3, r2
 800ab48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	69fb      	ldr	r3, [r7, #28]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	3301      	adds	r3, #1
 800ab58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ab5a:	69fb      	ldr	r3, [r7, #28]
 800ab5c:	3301      	adds	r3, #1
 800ab5e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ab60:	69fb      	ldr	r3, [r7, #28]
 800ab62:	3301      	adds	r3, #1
 800ab64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ab66:	69fb      	ldr	r3, [r7, #28]
 800ab68:	3301      	adds	r3, #1
 800ab6a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ab6c:	69bb      	ldr	r3, [r7, #24]
 800ab6e:	3301      	adds	r3, #1
 800ab70:	61bb      	str	r3, [r7, #24]
 800ab72:	69ba      	ldr	r2, [r7, #24]
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	429a      	cmp	r2, r3
 800ab78:	d3e2      	bcc.n	800ab40 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ab7a:	2300      	movs	r3, #0
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3724      	adds	r7, #36	@ 0x24
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr

0800ab88 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b08b      	sub	sp, #44	@ 0x2c
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	60f8      	str	r0, [r7, #12]
 800ab90:	60b9      	str	r1, [r7, #8]
 800ab92:	4613      	mov	r3, r2
 800ab94:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ab9e:	88fb      	ldrh	r3, [r7, #6]
 800aba0:	089b      	lsrs	r3, r3, #2
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800aba6:	88fb      	ldrh	r3, [r7, #6]
 800aba8:	f003 0303 	and.w	r3, r3, #3
 800abac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800abae:	2300      	movs	r3, #0
 800abb0:	623b      	str	r3, [r7, #32]
 800abb2:	e014      	b.n	800abde <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800abb4:	69bb      	ldr	r3, [r7, #24]
 800abb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800abba:	681a      	ldr	r2, [r3, #0]
 800abbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abbe:	601a      	str	r2, [r3, #0]
    pDest++;
 800abc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc2:	3301      	adds	r3, #1
 800abc4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800abc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc8:	3301      	adds	r3, #1
 800abca:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800abcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abce:	3301      	adds	r3, #1
 800abd0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800abd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd4:	3301      	adds	r3, #1
 800abd6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800abd8:	6a3b      	ldr	r3, [r7, #32]
 800abda:	3301      	adds	r3, #1
 800abdc:	623b      	str	r3, [r7, #32]
 800abde:	6a3a      	ldr	r2, [r7, #32]
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d3e6      	bcc.n	800abb4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800abe6:	8bfb      	ldrh	r3, [r7, #30]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d01e      	beq.n	800ac2a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800abec:	2300      	movs	r3, #0
 800abee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800abf0:	69bb      	ldr	r3, [r7, #24]
 800abf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800abf6:	461a      	mov	r2, r3
 800abf8:	f107 0310 	add.w	r3, r7, #16
 800abfc:	6812      	ldr	r2, [r2, #0]
 800abfe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ac00:	693a      	ldr	r2, [r7, #16]
 800ac02:	6a3b      	ldr	r3, [r7, #32]
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	00db      	lsls	r3, r3, #3
 800ac08:	fa22 f303 	lsr.w	r3, r2, r3
 800ac0c:	b2da      	uxtb	r2, r3
 800ac0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac10:	701a      	strb	r2, [r3, #0]
      i++;
 800ac12:	6a3b      	ldr	r3, [r7, #32]
 800ac14:	3301      	adds	r3, #1
 800ac16:	623b      	str	r3, [r7, #32]
      pDest++;
 800ac18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ac1e:	8bfb      	ldrh	r3, [r7, #30]
 800ac20:	3b01      	subs	r3, #1
 800ac22:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ac24:	8bfb      	ldrh	r3, [r7, #30]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d1ea      	bne.n	800ac00 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ac2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	372c      	adds	r7, #44	@ 0x2c
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr

0800ac38 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b085      	sub	sp, #20
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	781b      	ldrb	r3, [r3, #0]
 800ac4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	785b      	ldrb	r3, [r3, #1]
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	d12c      	bne.n	800acae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	015a      	lsls	r2, r3, #5
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	4413      	add	r3, r2
 800ac5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	db12      	blt.n	800ac8c <USB_EPSetStall+0x54>
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d00f      	beq.n	800ac8c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	015a      	lsls	r2, r3, #5
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	4413      	add	r3, r2
 800ac74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	68ba      	ldr	r2, [r7, #8]
 800ac7c:	0151      	lsls	r1, r2, #5
 800ac7e:	68fa      	ldr	r2, [r7, #12]
 800ac80:	440a      	add	r2, r1
 800ac82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac86:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ac8a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	015a      	lsls	r2, r3, #5
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	4413      	add	r3, r2
 800ac94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	68ba      	ldr	r2, [r7, #8]
 800ac9c:	0151      	lsls	r1, r2, #5
 800ac9e:	68fa      	ldr	r2, [r7, #12]
 800aca0:	440a      	add	r2, r1
 800aca2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aca6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800acaa:	6013      	str	r3, [r2, #0]
 800acac:	e02b      	b.n	800ad06 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	015a      	lsls	r2, r3, #5
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	4413      	add	r3, r2
 800acb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	db12      	blt.n	800ace6 <USB_EPSetStall+0xae>
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d00f      	beq.n	800ace6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	015a      	lsls	r2, r3, #5
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	4413      	add	r3, r2
 800acce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	68ba      	ldr	r2, [r7, #8]
 800acd6:	0151      	lsls	r1, r2, #5
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	440a      	add	r2, r1
 800acdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ace0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ace4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	015a      	lsls	r2, r3, #5
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	4413      	add	r3, r2
 800acee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	68ba      	ldr	r2, [r7, #8]
 800acf6:	0151      	lsls	r1, r2, #5
 800acf8:	68fa      	ldr	r2, [r7, #12]
 800acfa:	440a      	add	r2, r1
 800acfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ad04:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ad06:	2300      	movs	r3, #0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3714      	adds	r7, #20
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b085      	sub	sp, #20
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	785b      	ldrb	r3, [r3, #1]
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d128      	bne.n	800ad82 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	015a      	lsls	r2, r3, #5
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	4413      	add	r3, r2
 800ad38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	68ba      	ldr	r2, [r7, #8]
 800ad40:	0151      	lsls	r1, r2, #5
 800ad42:	68fa      	ldr	r2, [r7, #12]
 800ad44:	440a      	add	r2, r1
 800ad46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad4a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ad4e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	791b      	ldrb	r3, [r3, #4]
 800ad54:	2b03      	cmp	r3, #3
 800ad56:	d003      	beq.n	800ad60 <USB_EPClearStall+0x4c>
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	791b      	ldrb	r3, [r3, #4]
 800ad5c:	2b02      	cmp	r3, #2
 800ad5e:	d138      	bne.n	800add2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	015a      	lsls	r2, r3, #5
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	4413      	add	r3, r2
 800ad68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	68ba      	ldr	r2, [r7, #8]
 800ad70:	0151      	lsls	r1, r2, #5
 800ad72:	68fa      	ldr	r2, [r7, #12]
 800ad74:	440a      	add	r2, r1
 800ad76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad7e:	6013      	str	r3, [r2, #0]
 800ad80:	e027      	b.n	800add2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	015a      	lsls	r2, r3, #5
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	4413      	add	r3, r2
 800ad8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	68ba      	ldr	r2, [r7, #8]
 800ad92:	0151      	lsls	r1, r2, #5
 800ad94:	68fa      	ldr	r2, [r7, #12]
 800ad96:	440a      	add	r2, r1
 800ad98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad9c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ada0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	791b      	ldrb	r3, [r3, #4]
 800ada6:	2b03      	cmp	r3, #3
 800ada8:	d003      	beq.n	800adb2 <USB_EPClearStall+0x9e>
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	791b      	ldrb	r3, [r3, #4]
 800adae:	2b02      	cmp	r3, #2
 800adb0:	d10f      	bne.n	800add2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	015a      	lsls	r2, r3, #5
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	4413      	add	r3, r2
 800adba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	68ba      	ldr	r2, [r7, #8]
 800adc2:	0151      	lsls	r1, r2, #5
 800adc4:	68fa      	ldr	r2, [r7, #12]
 800adc6:	440a      	add	r2, r1
 800adc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800adcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800add0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800add2:	2300      	movs	r3, #0
}
 800add4:	4618      	mov	r0, r3
 800add6:	3714      	adds	r7, #20
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr

0800ade0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b085      	sub	sp, #20
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	460b      	mov	r3, r1
 800adea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	68fa      	ldr	r2, [r7, #12]
 800adfa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800adfe:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ae02:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae0a:	681a      	ldr	r2, [r3, #0]
 800ae0c:	78fb      	ldrb	r3, [r7, #3]
 800ae0e:	011b      	lsls	r3, r3, #4
 800ae10:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800ae14:	68f9      	ldr	r1, [r7, #12]
 800ae16:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ae1e:	2300      	movs	r3, #0
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3714      	adds	r7, #20
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b085      	sub	sp, #20
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	68fa      	ldr	r2, [r7, #12]
 800ae42:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ae46:	f023 0303 	bic.w	r3, r3, #3
 800ae4a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	68fa      	ldr	r2, [r7, #12]
 800ae56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ae5a:	f023 0302 	bic.w	r3, r3, #2
 800ae5e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ae60:	2300      	movs	r3, #0
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3714      	adds	r7, #20
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr

0800ae6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ae6e:	b480      	push	{r7}
 800ae70:	b085      	sub	sp, #20
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	68fa      	ldr	r2, [r7, #12]
 800ae84:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ae88:	f023 0303 	bic.w	r3, r3, #3
 800ae8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	68fa      	ldr	r2, [r7, #12]
 800ae98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ae9c:	f043 0302 	orr.w	r3, r3, #2
 800aea0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aea2:	2300      	movs	r3, #0
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3714      	adds	r7, #20
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b085      	sub	sp, #20
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	695b      	ldr	r3, [r3, #20]
 800aebc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	699b      	ldr	r3, [r3, #24]
 800aec2:	68fa      	ldr	r2, [r7, #12]
 800aec4:	4013      	ands	r3, r2
 800aec6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800aec8:	68fb      	ldr	r3, [r7, #12]
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3714      	adds	r7, #20
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr

0800aed6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800aed6:	b480      	push	{r7}
 800aed8:	b085      	sub	sp, #20
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aee8:	699b      	ldr	r3, [r3, #24]
 800aeea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aef2:	69db      	ldr	r3, [r3, #28]
 800aef4:	68ba      	ldr	r2, [r7, #8]
 800aef6:	4013      	ands	r3, r2
 800aef8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	0c1b      	lsrs	r3, r3, #16
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3714      	adds	r7, #20
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr

0800af0a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800af0a:	b480      	push	{r7}
 800af0c:	b085      	sub	sp, #20
 800af0e:	af00      	add	r7, sp, #0
 800af10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af1c:	699b      	ldr	r3, [r3, #24]
 800af1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af26:	69db      	ldr	r3, [r3, #28]
 800af28:	68ba      	ldr	r2, [r7, #8]
 800af2a:	4013      	ands	r3, r2
 800af2c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	b29b      	uxth	r3, r3
}
 800af32:	4618      	mov	r0, r3
 800af34:	3714      	adds	r7, #20
 800af36:	46bd      	mov	sp, r7
 800af38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3c:	4770      	bx	lr

0800af3e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800af3e:	b480      	push	{r7}
 800af40:	b085      	sub	sp, #20
 800af42:	af00      	add	r7, sp, #0
 800af44:	6078      	str	r0, [r7, #4]
 800af46:	460b      	mov	r3, r1
 800af48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800af4e:	78fb      	ldrb	r3, [r7, #3]
 800af50:	015a      	lsls	r2, r3, #5
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	4413      	add	r3, r2
 800af56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af5a:	689b      	ldr	r3, [r3, #8]
 800af5c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af64:	695b      	ldr	r3, [r3, #20]
 800af66:	68ba      	ldr	r2, [r7, #8]
 800af68:	4013      	ands	r3, r2
 800af6a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800af6c:	68bb      	ldr	r3, [r7, #8]
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3714      	adds	r7, #20
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr

0800af7a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800af7a:	b480      	push	{r7}
 800af7c:	b087      	sub	sp, #28
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]
 800af82:	460b      	mov	r3, r1
 800af84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af90:	691b      	ldr	r3, [r3, #16]
 800af92:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af9c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800af9e:	78fb      	ldrb	r3, [r7, #3]
 800afa0:	f003 030f 	and.w	r3, r3, #15
 800afa4:	68fa      	ldr	r2, [r7, #12]
 800afa6:	fa22 f303 	lsr.w	r3, r2, r3
 800afaa:	01db      	lsls	r3, r3, #7
 800afac:	b2db      	uxtb	r3, r3
 800afae:	693a      	ldr	r2, [r7, #16]
 800afb0:	4313      	orrs	r3, r2
 800afb2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800afb4:	78fb      	ldrb	r3, [r7, #3]
 800afb6:	015a      	lsls	r2, r3, #5
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	4413      	add	r3, r2
 800afbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afc0:	689b      	ldr	r3, [r3, #8]
 800afc2:	693a      	ldr	r2, [r7, #16]
 800afc4:	4013      	ands	r3, r2
 800afc6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800afc8:	68bb      	ldr	r3, [r7, #8]
}
 800afca:	4618      	mov	r0, r3
 800afcc:	371c      	adds	r7, #28
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr

0800afd6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800afd6:	b480      	push	{r7}
 800afd8:	b083      	sub	sp, #12
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	695b      	ldr	r3, [r3, #20]
 800afe2:	f003 0301 	and.w	r3, r3, #1
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	370c      	adds	r7, #12
 800afea:	46bd      	mov	sp, r7
 800afec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff0:	4770      	bx	lr

0800aff2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800aff2:	b480      	push	{r7}
 800aff4:	b085      	sub	sp, #20
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	68fa      	ldr	r2, [r7, #12]
 800b008:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b00c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b010:	f023 0307 	bic.w	r3, r3, #7
 800b014:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b01c:	685b      	ldr	r3, [r3, #4]
 800b01e:	68fa      	ldr	r2, [r7, #12]
 800b020:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b024:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b028:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b02a:	2300      	movs	r3, #0
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3714      	adds	r7, #20
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr

0800b038 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800b038:	b480      	push	{r7}
 800b03a:	b087      	sub	sp, #28
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	460b      	mov	r3, r1
 800b042:	607a      	str	r2, [r7, #4]
 800b044:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	333c      	adds	r3, #60	@ 0x3c
 800b04e:	3304      	adds	r3, #4
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	4a26      	ldr	r2, [pc, #152]	@ (800b0f0 <USB_EP0_OutStart+0xb8>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d90a      	bls.n	800b072 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b068:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b06c:	d101      	bne.n	800b072 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b06e:	2300      	movs	r3, #0
 800b070:	e037      	b.n	800b0e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b078:	461a      	mov	r2, r3
 800b07a:	2300      	movs	r3, #0
 800b07c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b084:	691b      	ldr	r3, [r3, #16]
 800b086:	697a      	ldr	r2, [r7, #20]
 800b088:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b08c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b090:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b098:	691b      	ldr	r3, [r3, #16]
 800b09a:	697a      	ldr	r2, [r7, #20]
 800b09c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0a0:	f043 0318 	orr.w	r3, r3, #24
 800b0a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0ac:	691b      	ldr	r3, [r3, #16]
 800b0ae:	697a      	ldr	r2, [r7, #20]
 800b0b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0b4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b0b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b0ba:	7afb      	ldrb	r3, [r7, #11]
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d10f      	bne.n	800b0e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	697a      	ldr	r2, [r7, #20]
 800b0d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0da:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b0de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b0e0:	2300      	movs	r3, #0
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	371c      	adds	r7, #28
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr
 800b0ee:	bf00      	nop
 800b0f0:	4f54300a 	.word	0x4f54300a

0800b0f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b085      	sub	sp, #20
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	3301      	adds	r3, #1
 800b104:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b10c:	d901      	bls.n	800b112 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b10e:	2303      	movs	r3, #3
 800b110:	e022      	b.n	800b158 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	691b      	ldr	r3, [r3, #16]
 800b116:	2b00      	cmp	r3, #0
 800b118:	daf2      	bge.n	800b100 <USB_CoreReset+0xc>

  count = 10U;
 800b11a:	230a      	movs	r3, #10
 800b11c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800b11e:	e002      	b.n	800b126 <USB_CoreReset+0x32>
  {
    count--;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	3b01      	subs	r3, #1
 800b124:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d1f9      	bne.n	800b120 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	691b      	ldr	r3, [r3, #16]
 800b130:	f043 0201 	orr.w	r2, r3, #1
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	3301      	adds	r3, #1
 800b13c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b144:	d901      	bls.n	800b14a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800b146:	2303      	movs	r3, #3
 800b148:	e006      	b.n	800b158 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	691b      	ldr	r3, [r3, #16]
 800b14e:	f003 0301 	and.w	r3, r3, #1
 800b152:	2b01      	cmp	r3, #1
 800b154:	d0f0      	beq.n	800b138 <USB_CoreReset+0x44>

  return HAL_OK;
 800b156:	2300      	movs	r3, #0
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3714      	adds	r7, #20
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr

0800b164 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	460b      	mov	r3, r1
 800b16e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b170:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b174:	f002 fd20 	bl	800dbb8 <USBD_static_malloc>
 800b178:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d109      	bne.n	800b194 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	32b0      	adds	r2, #176	@ 0xb0
 800b18a:	2100      	movs	r1, #0
 800b18c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b190:	2302      	movs	r3, #2
 800b192:	e0d4      	b.n	800b33e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b194:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b198:	2100      	movs	r1, #0
 800b19a:	68f8      	ldr	r0, [r7, #12]
 800b19c:	f002 fe28 	bl	800ddf0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	32b0      	adds	r2, #176	@ 0xb0
 800b1aa:	68f9      	ldr	r1, [r7, #12]
 800b1ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	32b0      	adds	r2, #176	@ 0xb0
 800b1ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	7c1b      	ldrb	r3, [r3, #16]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d138      	bne.n	800b23e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b1cc:	4b5e      	ldr	r3, [pc, #376]	@ (800b348 <USBD_CDC_Init+0x1e4>)
 800b1ce:	7819      	ldrb	r1, [r3, #0]
 800b1d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b1d4:	2202      	movs	r2, #2
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f002 fbcb 	bl	800d972 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b1dc:	4b5a      	ldr	r3, [pc, #360]	@ (800b348 <USBD_CDC_Init+0x1e4>)
 800b1de:	781b      	ldrb	r3, [r3, #0]
 800b1e0:	f003 020f 	and.w	r2, r3, #15
 800b1e4:	6879      	ldr	r1, [r7, #4]
 800b1e6:	4613      	mov	r3, r2
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	4413      	add	r3, r2
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	440b      	add	r3, r1
 800b1f0:	3323      	adds	r3, #35	@ 0x23
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b1f6:	4b55      	ldr	r3, [pc, #340]	@ (800b34c <USBD_CDC_Init+0x1e8>)
 800b1f8:	7819      	ldrb	r1, [r3, #0]
 800b1fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b1fe:	2202      	movs	r2, #2
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f002 fbb6 	bl	800d972 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b206:	4b51      	ldr	r3, [pc, #324]	@ (800b34c <USBD_CDC_Init+0x1e8>)
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	f003 020f 	and.w	r2, r3, #15
 800b20e:	6879      	ldr	r1, [r7, #4]
 800b210:	4613      	mov	r3, r2
 800b212:	009b      	lsls	r3, r3, #2
 800b214:	4413      	add	r3, r2
 800b216:	009b      	lsls	r3, r3, #2
 800b218:	440b      	add	r3, r1
 800b21a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b21e:	2201      	movs	r2, #1
 800b220:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b222:	4b4b      	ldr	r3, [pc, #300]	@ (800b350 <USBD_CDC_Init+0x1ec>)
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	f003 020f 	and.w	r2, r3, #15
 800b22a:	6879      	ldr	r1, [r7, #4]
 800b22c:	4613      	mov	r3, r2
 800b22e:	009b      	lsls	r3, r3, #2
 800b230:	4413      	add	r3, r2
 800b232:	009b      	lsls	r3, r3, #2
 800b234:	440b      	add	r3, r1
 800b236:	331c      	adds	r3, #28
 800b238:	2210      	movs	r2, #16
 800b23a:	601a      	str	r2, [r3, #0]
 800b23c:	e035      	b.n	800b2aa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b23e:	4b42      	ldr	r3, [pc, #264]	@ (800b348 <USBD_CDC_Init+0x1e4>)
 800b240:	7819      	ldrb	r1, [r3, #0]
 800b242:	2340      	movs	r3, #64	@ 0x40
 800b244:	2202      	movs	r2, #2
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f002 fb93 	bl	800d972 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b24c:	4b3e      	ldr	r3, [pc, #248]	@ (800b348 <USBD_CDC_Init+0x1e4>)
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	f003 020f 	and.w	r2, r3, #15
 800b254:	6879      	ldr	r1, [r7, #4]
 800b256:	4613      	mov	r3, r2
 800b258:	009b      	lsls	r3, r3, #2
 800b25a:	4413      	add	r3, r2
 800b25c:	009b      	lsls	r3, r3, #2
 800b25e:	440b      	add	r3, r1
 800b260:	3323      	adds	r3, #35	@ 0x23
 800b262:	2201      	movs	r2, #1
 800b264:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b266:	4b39      	ldr	r3, [pc, #228]	@ (800b34c <USBD_CDC_Init+0x1e8>)
 800b268:	7819      	ldrb	r1, [r3, #0]
 800b26a:	2340      	movs	r3, #64	@ 0x40
 800b26c:	2202      	movs	r2, #2
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f002 fb7f 	bl	800d972 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b274:	4b35      	ldr	r3, [pc, #212]	@ (800b34c <USBD_CDC_Init+0x1e8>)
 800b276:	781b      	ldrb	r3, [r3, #0]
 800b278:	f003 020f 	and.w	r2, r3, #15
 800b27c:	6879      	ldr	r1, [r7, #4]
 800b27e:	4613      	mov	r3, r2
 800b280:	009b      	lsls	r3, r3, #2
 800b282:	4413      	add	r3, r2
 800b284:	009b      	lsls	r3, r3, #2
 800b286:	440b      	add	r3, r1
 800b288:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b28c:	2201      	movs	r2, #1
 800b28e:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b290:	4b2f      	ldr	r3, [pc, #188]	@ (800b350 <USBD_CDC_Init+0x1ec>)
 800b292:	781b      	ldrb	r3, [r3, #0]
 800b294:	f003 020f 	and.w	r2, r3, #15
 800b298:	6879      	ldr	r1, [r7, #4]
 800b29a:	4613      	mov	r3, r2
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	4413      	add	r3, r2
 800b2a0:	009b      	lsls	r3, r3, #2
 800b2a2:	440b      	add	r3, r1
 800b2a4:	331c      	adds	r3, #28
 800b2a6:	2210      	movs	r2, #16
 800b2a8:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b2aa:	4b29      	ldr	r3, [pc, #164]	@ (800b350 <USBD_CDC_Init+0x1ec>)
 800b2ac:	7819      	ldrb	r1, [r3, #0]
 800b2ae:	2308      	movs	r3, #8
 800b2b0:	2203      	movs	r2, #3
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f002 fb5d 	bl	800d972 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b2b8:	4b25      	ldr	r3, [pc, #148]	@ (800b350 <USBD_CDC_Init+0x1ec>)
 800b2ba:	781b      	ldrb	r3, [r3, #0]
 800b2bc:	f003 020f 	and.w	r2, r3, #15
 800b2c0:	6879      	ldr	r1, [r7, #4]
 800b2c2:	4613      	mov	r3, r2
 800b2c4:	009b      	lsls	r3, r3, #2
 800b2c6:	4413      	add	r3, r2
 800b2c8:	009b      	lsls	r3, r3, #2
 800b2ca:	440b      	add	r3, r1
 800b2cc:	3323      	adds	r3, #35	@ 0x23
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b2e0:	687a      	ldr	r2, [r7, #4]
 800b2e2:	33b0      	adds	r3, #176	@ 0xb0
 800b2e4:	009b      	lsls	r3, r3, #2
 800b2e6:	4413      	add	r3, r2
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b304:	2b00      	cmp	r3, #0
 800b306:	d101      	bne.n	800b30c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b308:	2302      	movs	r3, #2
 800b30a:	e018      	b.n	800b33e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	7c1b      	ldrb	r3, [r3, #16]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d10a      	bne.n	800b32a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b314:	4b0d      	ldr	r3, [pc, #52]	@ (800b34c <USBD_CDC_Init+0x1e8>)
 800b316:	7819      	ldrb	r1, [r3, #0]
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b31e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f002 fc14 	bl	800db50 <USBD_LL_PrepareReceive>
 800b328:	e008      	b.n	800b33c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b32a:	4b08      	ldr	r3, [pc, #32]	@ (800b34c <USBD_CDC_Init+0x1e8>)
 800b32c:	7819      	ldrb	r1, [r3, #0]
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b334:	2340      	movs	r3, #64	@ 0x40
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f002 fc0a 	bl	800db50 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3710      	adds	r7, #16
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	20000097 	.word	0x20000097
 800b34c:	20000098 	.word	0x20000098
 800b350:	20000099 	.word	0x20000099

0800b354 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	460b      	mov	r3, r1
 800b35e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b360:	4b3a      	ldr	r3, [pc, #232]	@ (800b44c <USBD_CDC_DeInit+0xf8>)
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	4619      	mov	r1, r3
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f002 fb29 	bl	800d9be <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b36c:	4b37      	ldr	r3, [pc, #220]	@ (800b44c <USBD_CDC_DeInit+0xf8>)
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	f003 020f 	and.w	r2, r3, #15
 800b374:	6879      	ldr	r1, [r7, #4]
 800b376:	4613      	mov	r3, r2
 800b378:	009b      	lsls	r3, r3, #2
 800b37a:	4413      	add	r3, r2
 800b37c:	009b      	lsls	r3, r3, #2
 800b37e:	440b      	add	r3, r1
 800b380:	3323      	adds	r3, #35	@ 0x23
 800b382:	2200      	movs	r2, #0
 800b384:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b386:	4b32      	ldr	r3, [pc, #200]	@ (800b450 <USBD_CDC_DeInit+0xfc>)
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	4619      	mov	r1, r3
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f002 fb16 	bl	800d9be <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b392:	4b2f      	ldr	r3, [pc, #188]	@ (800b450 <USBD_CDC_DeInit+0xfc>)
 800b394:	781b      	ldrb	r3, [r3, #0]
 800b396:	f003 020f 	and.w	r2, r3, #15
 800b39a:	6879      	ldr	r1, [r7, #4]
 800b39c:	4613      	mov	r3, r2
 800b39e:	009b      	lsls	r3, r3, #2
 800b3a0:	4413      	add	r3, r2
 800b3a2:	009b      	lsls	r3, r3, #2
 800b3a4:	440b      	add	r3, r1
 800b3a6:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b3ae:	4b29      	ldr	r3, [pc, #164]	@ (800b454 <USBD_CDC_DeInit+0x100>)
 800b3b0:	781b      	ldrb	r3, [r3, #0]
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f002 fb02 	bl	800d9be <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b3ba:	4b26      	ldr	r3, [pc, #152]	@ (800b454 <USBD_CDC_DeInit+0x100>)
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	f003 020f 	and.w	r2, r3, #15
 800b3c2:	6879      	ldr	r1, [r7, #4]
 800b3c4:	4613      	mov	r3, r2
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	4413      	add	r3, r2
 800b3ca:	009b      	lsls	r3, r3, #2
 800b3cc:	440b      	add	r3, r1
 800b3ce:	3323      	adds	r3, #35	@ 0x23
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b3d4:	4b1f      	ldr	r3, [pc, #124]	@ (800b454 <USBD_CDC_DeInit+0x100>)
 800b3d6:	781b      	ldrb	r3, [r3, #0]
 800b3d8:	f003 020f 	and.w	r2, r3, #15
 800b3dc:	6879      	ldr	r1, [r7, #4]
 800b3de:	4613      	mov	r3, r2
 800b3e0:	009b      	lsls	r3, r3, #2
 800b3e2:	4413      	add	r3, r2
 800b3e4:	009b      	lsls	r3, r3, #2
 800b3e6:	440b      	add	r3, r1
 800b3e8:	331c      	adds	r3, #28
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	32b0      	adds	r2, #176	@ 0xb0
 800b3f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d01f      	beq.n	800b440 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b406:	687a      	ldr	r2, [r7, #4]
 800b408:	33b0      	adds	r3, #176	@ 0xb0
 800b40a:	009b      	lsls	r3, r3, #2
 800b40c:	4413      	add	r3, r2
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	32b0      	adds	r2, #176	@ 0xb0
 800b41e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b422:	4618      	mov	r0, r3
 800b424:	f002 fbd6 	bl	800dbd4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	32b0      	adds	r2, #176	@ 0xb0
 800b432:	2100      	movs	r1, #0
 800b434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2200      	movs	r2, #0
 800b43c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b440:	2300      	movs	r3, #0
}
 800b442:	4618      	mov	r0, r3
 800b444:	3708      	adds	r7, #8
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
 800b44a:	bf00      	nop
 800b44c:	20000097 	.word	0x20000097
 800b450:	20000098 	.word	0x20000098
 800b454:	20000099 	.word	0x20000099

0800b458 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b086      	sub	sp, #24
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	32b0      	adds	r2, #176	@ 0xb0
 800b46c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b470:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b472:	2300      	movs	r3, #0
 800b474:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b476:	2300      	movs	r3, #0
 800b478:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b47a:	2300      	movs	r3, #0
 800b47c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d101      	bne.n	800b488 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b484:	2303      	movs	r3, #3
 800b486:	e0bf      	b.n	800b608 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	781b      	ldrb	r3, [r3, #0]
 800b48c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b490:	2b00      	cmp	r3, #0
 800b492:	d050      	beq.n	800b536 <USBD_CDC_Setup+0xde>
 800b494:	2b20      	cmp	r3, #32
 800b496:	f040 80af 	bne.w	800b5f8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	88db      	ldrh	r3, [r3, #6]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d03a      	beq.n	800b518 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	b25b      	sxtb	r3, r3
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	da1b      	bge.n	800b4e4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	33b0      	adds	r3, #176	@ 0xb0
 800b4b6:	009b      	lsls	r3, r3, #2
 800b4b8:	4413      	add	r3, r2
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	689b      	ldr	r3, [r3, #8]
 800b4be:	683a      	ldr	r2, [r7, #0]
 800b4c0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b4c2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b4c4:	683a      	ldr	r2, [r7, #0]
 800b4c6:	88d2      	ldrh	r2, [r2, #6]
 800b4c8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	88db      	ldrh	r3, [r3, #6]
 800b4ce:	2b07      	cmp	r3, #7
 800b4d0:	bf28      	it	cs
 800b4d2:	2307      	movcs	r3, #7
 800b4d4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	89fa      	ldrh	r2, [r7, #14]
 800b4da:	4619      	mov	r1, r3
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f001 fda9 	bl	800d034 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b4e2:	e090      	b.n	800b606 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	785a      	ldrb	r2, [r3, #1]
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	88db      	ldrh	r3, [r3, #6]
 800b4f2:	2b3f      	cmp	r3, #63	@ 0x3f
 800b4f4:	d803      	bhi.n	800b4fe <USBD_CDC_Setup+0xa6>
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	88db      	ldrh	r3, [r3, #6]
 800b4fa:	b2da      	uxtb	r2, r3
 800b4fc:	e000      	b.n	800b500 <USBD_CDC_Setup+0xa8>
 800b4fe:	2240      	movs	r2, #64	@ 0x40
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b506:	6939      	ldr	r1, [r7, #16]
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b50e:	461a      	mov	r2, r3
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f001 fdbe 	bl	800d092 <USBD_CtlPrepareRx>
      break;
 800b516:	e076      	b.n	800b606 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b51e:	687a      	ldr	r2, [r7, #4]
 800b520:	33b0      	adds	r3, #176	@ 0xb0
 800b522:	009b      	lsls	r3, r3, #2
 800b524:	4413      	add	r3, r2
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	683a      	ldr	r2, [r7, #0]
 800b52c:	7850      	ldrb	r0, [r2, #1]
 800b52e:	2200      	movs	r2, #0
 800b530:	6839      	ldr	r1, [r7, #0]
 800b532:	4798      	blx	r3
      break;
 800b534:	e067      	b.n	800b606 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	785b      	ldrb	r3, [r3, #1]
 800b53a:	2b0b      	cmp	r3, #11
 800b53c:	d851      	bhi.n	800b5e2 <USBD_CDC_Setup+0x18a>
 800b53e:	a201      	add	r2, pc, #4	@ (adr r2, 800b544 <USBD_CDC_Setup+0xec>)
 800b540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b544:	0800b575 	.word	0x0800b575
 800b548:	0800b5f1 	.word	0x0800b5f1
 800b54c:	0800b5e3 	.word	0x0800b5e3
 800b550:	0800b5e3 	.word	0x0800b5e3
 800b554:	0800b5e3 	.word	0x0800b5e3
 800b558:	0800b5e3 	.word	0x0800b5e3
 800b55c:	0800b5e3 	.word	0x0800b5e3
 800b560:	0800b5e3 	.word	0x0800b5e3
 800b564:	0800b5e3 	.word	0x0800b5e3
 800b568:	0800b5e3 	.word	0x0800b5e3
 800b56c:	0800b59f 	.word	0x0800b59f
 800b570:	0800b5c9 	.word	0x0800b5c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b57a:	b2db      	uxtb	r3, r3
 800b57c:	2b03      	cmp	r3, #3
 800b57e:	d107      	bne.n	800b590 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b580:	f107 030a 	add.w	r3, r7, #10
 800b584:	2202      	movs	r2, #2
 800b586:	4619      	mov	r1, r3
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f001 fd53 	bl	800d034 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b58e:	e032      	b.n	800b5f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b590:	6839      	ldr	r1, [r7, #0]
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f001 fcd1 	bl	800cf3a <USBD_CtlError>
            ret = USBD_FAIL;
 800b598:	2303      	movs	r3, #3
 800b59a:	75fb      	strb	r3, [r7, #23]
          break;
 800b59c:	e02b      	b.n	800b5f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5a4:	b2db      	uxtb	r3, r3
 800b5a6:	2b03      	cmp	r3, #3
 800b5a8:	d107      	bne.n	800b5ba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b5aa:	f107 030d 	add.w	r3, r7, #13
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f001 fd3e 	bl	800d034 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b5b8:	e01d      	b.n	800b5f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b5ba:	6839      	ldr	r1, [r7, #0]
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f001 fcbc 	bl	800cf3a <USBD_CtlError>
            ret = USBD_FAIL;
 800b5c2:	2303      	movs	r3, #3
 800b5c4:	75fb      	strb	r3, [r7, #23]
          break;
 800b5c6:	e016      	b.n	800b5f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5ce:	b2db      	uxtb	r3, r3
 800b5d0:	2b03      	cmp	r3, #3
 800b5d2:	d00f      	beq.n	800b5f4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b5d4:	6839      	ldr	r1, [r7, #0]
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f001 fcaf 	bl	800cf3a <USBD_CtlError>
            ret = USBD_FAIL;
 800b5dc:	2303      	movs	r3, #3
 800b5de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b5e0:	e008      	b.n	800b5f4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b5e2:	6839      	ldr	r1, [r7, #0]
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f001 fca8 	bl	800cf3a <USBD_CtlError>
          ret = USBD_FAIL;
 800b5ea:	2303      	movs	r3, #3
 800b5ec:	75fb      	strb	r3, [r7, #23]
          break;
 800b5ee:	e002      	b.n	800b5f6 <USBD_CDC_Setup+0x19e>
          break;
 800b5f0:	bf00      	nop
 800b5f2:	e008      	b.n	800b606 <USBD_CDC_Setup+0x1ae>
          break;
 800b5f4:	bf00      	nop
      }
      break;
 800b5f6:	e006      	b.n	800b606 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b5f8:	6839      	ldr	r1, [r7, #0]
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f001 fc9d 	bl	800cf3a <USBD_CtlError>
      ret = USBD_FAIL;
 800b600:	2303      	movs	r3, #3
 800b602:	75fb      	strb	r3, [r7, #23]
      break;
 800b604:	bf00      	nop
  }

  return (uint8_t)ret;
 800b606:	7dfb      	ldrb	r3, [r7, #23]
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3718      	adds	r7, #24
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	460b      	mov	r3, r1
 800b61a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b622:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	32b0      	adds	r2, #176	@ 0xb0
 800b62e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d101      	bne.n	800b63a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b636:	2303      	movs	r3, #3
 800b638:	e065      	b.n	800b706 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	32b0      	adds	r2, #176	@ 0xb0
 800b644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b648:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b64a:	78fb      	ldrb	r3, [r7, #3]
 800b64c:	f003 020f 	and.w	r2, r3, #15
 800b650:	6879      	ldr	r1, [r7, #4]
 800b652:	4613      	mov	r3, r2
 800b654:	009b      	lsls	r3, r3, #2
 800b656:	4413      	add	r3, r2
 800b658:	009b      	lsls	r3, r3, #2
 800b65a:	440b      	add	r3, r1
 800b65c:	3314      	adds	r3, #20
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d02f      	beq.n	800b6c4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b664:	78fb      	ldrb	r3, [r7, #3]
 800b666:	f003 020f 	and.w	r2, r3, #15
 800b66a:	6879      	ldr	r1, [r7, #4]
 800b66c:	4613      	mov	r3, r2
 800b66e:	009b      	lsls	r3, r3, #2
 800b670:	4413      	add	r3, r2
 800b672:	009b      	lsls	r3, r3, #2
 800b674:	440b      	add	r3, r1
 800b676:	3314      	adds	r3, #20
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	78fb      	ldrb	r3, [r7, #3]
 800b67c:	f003 010f 	and.w	r1, r3, #15
 800b680:	68f8      	ldr	r0, [r7, #12]
 800b682:	460b      	mov	r3, r1
 800b684:	00db      	lsls	r3, r3, #3
 800b686:	440b      	add	r3, r1
 800b688:	009b      	lsls	r3, r3, #2
 800b68a:	4403      	add	r3, r0
 800b68c:	331c      	adds	r3, #28
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	fbb2 f1f3 	udiv	r1, r2, r3
 800b694:	fb01 f303 	mul.w	r3, r1, r3
 800b698:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d112      	bne.n	800b6c4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b69e:	78fb      	ldrb	r3, [r7, #3]
 800b6a0:	f003 020f 	and.w	r2, r3, #15
 800b6a4:	6879      	ldr	r1, [r7, #4]
 800b6a6:	4613      	mov	r3, r2
 800b6a8:	009b      	lsls	r3, r3, #2
 800b6aa:	4413      	add	r3, r2
 800b6ac:	009b      	lsls	r3, r3, #2
 800b6ae:	440b      	add	r3, r1
 800b6b0:	3314      	adds	r3, #20
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b6b6:	78f9      	ldrb	r1, [r7, #3]
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f002 fa26 	bl	800db0e <USBD_LL_Transmit>
 800b6c2:	e01f      	b.n	800b704 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b6d2:	687a      	ldr	r2, [r7, #4]
 800b6d4:	33b0      	adds	r3, #176	@ 0xb0
 800b6d6:	009b      	lsls	r3, r3, #2
 800b6d8:	4413      	add	r3, r2
 800b6da:	685b      	ldr	r3, [r3, #4]
 800b6dc:	691b      	ldr	r3, [r3, #16]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d010      	beq.n	800b704 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b6e8:	687a      	ldr	r2, [r7, #4]
 800b6ea:	33b0      	adds	r3, #176	@ 0xb0
 800b6ec:	009b      	lsls	r3, r3, #2
 800b6ee:	4413      	add	r3, r2
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	691b      	ldr	r3, [r3, #16]
 800b6f4:	68ba      	ldr	r2, [r7, #8]
 800b6f6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b6fa:	68ba      	ldr	r2, [r7, #8]
 800b6fc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b700:	78fa      	ldrb	r2, [r7, #3]
 800b702:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b704:	2300      	movs	r3, #0
}
 800b706:	4618      	mov	r0, r3
 800b708:	3710      	adds	r7, #16
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}

0800b70e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b70e:	b580      	push	{r7, lr}
 800b710:	b084      	sub	sp, #16
 800b712:	af00      	add	r7, sp, #0
 800b714:	6078      	str	r0, [r7, #4]
 800b716:	460b      	mov	r3, r1
 800b718:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	32b0      	adds	r2, #176	@ 0xb0
 800b724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b728:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	32b0      	adds	r2, #176	@ 0xb0
 800b734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d101      	bne.n	800b740 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b73c:	2303      	movs	r3, #3
 800b73e:	e01a      	b.n	800b776 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b740:	78fb      	ldrb	r3, [r7, #3]
 800b742:	4619      	mov	r1, r3
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f002 fa24 	bl	800db92 <USBD_LL_GetRxDataSize>
 800b74a:	4602      	mov	r2, r0
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	33b0      	adds	r3, #176	@ 0xb0
 800b75c:	009b      	lsls	r3, r3, #2
 800b75e:	4413      	add	r3, r2
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	68db      	ldr	r3, [r3, #12]
 800b764:	68fa      	ldr	r2, [r7, #12]
 800b766:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b76a:	68fa      	ldr	r2, [r7, #12]
 800b76c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b770:	4611      	mov	r1, r2
 800b772:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b774:	2300      	movs	r3, #0
}
 800b776:	4618      	mov	r0, r3
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}

0800b77e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b77e:	b580      	push	{r7, lr}
 800b780:	b084      	sub	sp, #16
 800b782:	af00      	add	r7, sp, #0
 800b784:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	32b0      	adds	r2, #176	@ 0xb0
 800b790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b794:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d101      	bne.n	800b7a0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b79c:	2303      	movs	r3, #3
 800b79e:	e024      	b.n	800b7ea <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b7a6:	687a      	ldr	r2, [r7, #4]
 800b7a8:	33b0      	adds	r3, #176	@ 0xb0
 800b7aa:	009b      	lsls	r3, r3, #2
 800b7ac:	4413      	add	r3, r2
 800b7ae:	685b      	ldr	r3, [r3, #4]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d019      	beq.n	800b7e8 <USBD_CDC_EP0_RxReady+0x6a>
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b7ba:	2bff      	cmp	r3, #255	@ 0xff
 800b7bc:	d014      	beq.n	800b7e8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b7c4:	687a      	ldr	r2, [r7, #4]
 800b7c6:	33b0      	adds	r3, #176	@ 0xb0
 800b7c8:	009b      	lsls	r3, r3, #2
 800b7ca:	4413      	add	r3, r2
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	689b      	ldr	r3, [r3, #8]
 800b7d0:	68fa      	ldr	r2, [r7, #12]
 800b7d2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b7d6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b7d8:	68fa      	ldr	r2, [r7, #12]
 800b7da:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b7de:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	22ff      	movs	r2, #255	@ 0xff
 800b7e4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b7e8:	2300      	movs	r3, #0
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3710      	adds	r7, #16
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
	...

0800b7f4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b086      	sub	sp, #24
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b7fc:	2182      	movs	r1, #130	@ 0x82
 800b7fe:	4818      	ldr	r0, [pc, #96]	@ (800b860 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b800:	f000 fd62 	bl	800c2c8 <USBD_GetEpDesc>
 800b804:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b806:	2101      	movs	r1, #1
 800b808:	4815      	ldr	r0, [pc, #84]	@ (800b860 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b80a:	f000 fd5d 	bl	800c2c8 <USBD_GetEpDesc>
 800b80e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b810:	2181      	movs	r1, #129	@ 0x81
 800b812:	4813      	ldr	r0, [pc, #76]	@ (800b860 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b814:	f000 fd58 	bl	800c2c8 <USBD_GetEpDesc>
 800b818:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d002      	beq.n	800b826 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	2210      	movs	r2, #16
 800b824:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d006      	beq.n	800b83a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	2200      	movs	r2, #0
 800b830:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b834:	711a      	strb	r2, [r3, #4]
 800b836:	2200      	movs	r2, #0
 800b838:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d006      	beq.n	800b84e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2200      	movs	r2, #0
 800b844:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b848:	711a      	strb	r2, [r3, #4]
 800b84a:	2200      	movs	r2, #0
 800b84c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2243      	movs	r2, #67	@ 0x43
 800b852:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b854:	4b02      	ldr	r3, [pc, #8]	@ (800b860 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b856:	4618      	mov	r0, r3
 800b858:	3718      	adds	r7, #24
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	20000054 	.word	0x20000054

0800b864 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b086      	sub	sp, #24
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b86c:	2182      	movs	r1, #130	@ 0x82
 800b86e:	4818      	ldr	r0, [pc, #96]	@ (800b8d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b870:	f000 fd2a 	bl	800c2c8 <USBD_GetEpDesc>
 800b874:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b876:	2101      	movs	r1, #1
 800b878:	4815      	ldr	r0, [pc, #84]	@ (800b8d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b87a:	f000 fd25 	bl	800c2c8 <USBD_GetEpDesc>
 800b87e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b880:	2181      	movs	r1, #129	@ 0x81
 800b882:	4813      	ldr	r0, [pc, #76]	@ (800b8d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b884:	f000 fd20 	bl	800c2c8 <USBD_GetEpDesc>
 800b888:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d002      	beq.n	800b896 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	2210      	movs	r2, #16
 800b894:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d006      	beq.n	800b8aa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	711a      	strb	r2, [r3, #4]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f042 0202 	orr.w	r2, r2, #2
 800b8a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d006      	beq.n	800b8be <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	711a      	strb	r2, [r3, #4]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f042 0202 	orr.w	r2, r2, #2
 800b8bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2243      	movs	r2, #67	@ 0x43
 800b8c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b8c4:	4b02      	ldr	r3, [pc, #8]	@ (800b8d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3718      	adds	r7, #24
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	20000054 	.word	0x20000054

0800b8d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b086      	sub	sp, #24
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b8dc:	2182      	movs	r1, #130	@ 0x82
 800b8de:	4818      	ldr	r0, [pc, #96]	@ (800b940 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b8e0:	f000 fcf2 	bl	800c2c8 <USBD_GetEpDesc>
 800b8e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b8e6:	2101      	movs	r1, #1
 800b8e8:	4815      	ldr	r0, [pc, #84]	@ (800b940 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b8ea:	f000 fced 	bl	800c2c8 <USBD_GetEpDesc>
 800b8ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b8f0:	2181      	movs	r1, #129	@ 0x81
 800b8f2:	4813      	ldr	r0, [pc, #76]	@ (800b940 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b8f4:	f000 fce8 	bl	800c2c8 <USBD_GetEpDesc>
 800b8f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d002      	beq.n	800b906 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	2210      	movs	r2, #16
 800b904:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d006      	beq.n	800b91a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	2200      	movs	r2, #0
 800b910:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b914:	711a      	strb	r2, [r3, #4]
 800b916:	2200      	movs	r2, #0
 800b918:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d006      	beq.n	800b92e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2200      	movs	r2, #0
 800b924:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b928:	711a      	strb	r2, [r3, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2243      	movs	r2, #67	@ 0x43
 800b932:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b934:	4b02      	ldr	r3, [pc, #8]	@ (800b940 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b936:	4618      	mov	r0, r3
 800b938:	3718      	adds	r7, #24
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}
 800b93e:	bf00      	nop
 800b940:	20000054 	.word	0x20000054

0800b944 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	220a      	movs	r2, #10
 800b950:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b952:	4b03      	ldr	r3, [pc, #12]	@ (800b960 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b954:	4618      	mov	r0, r3
 800b956:	370c      	adds	r7, #12
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr
 800b960:	20000010 	.word	0x20000010

0800b964 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b964:	b480      	push	{r7}
 800b966:	b083      	sub	sp, #12
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
 800b96c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d101      	bne.n	800b978 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b974:	2303      	movs	r3, #3
 800b976:	e009      	b.n	800b98c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b97e:	687a      	ldr	r2, [r7, #4]
 800b980:	33b0      	adds	r3, #176	@ 0xb0
 800b982:	009b      	lsls	r3, r3, #2
 800b984:	4413      	add	r3, r2
 800b986:	683a      	ldr	r2, [r7, #0]
 800b988:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b98a:	2300      	movs	r3, #0
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	370c      	adds	r7, #12
 800b990:	46bd      	mov	sp, r7
 800b992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b996:	4770      	bx	lr

0800b998 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b998:	b480      	push	{r7}
 800b99a:	b087      	sub	sp, #28
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	60f8      	str	r0, [r7, #12]
 800b9a0:	60b9      	str	r1, [r7, #8]
 800b9a2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	32b0      	adds	r2, #176	@ 0xb0
 800b9ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9b2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d101      	bne.n	800b9be <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b9ba:	2303      	movs	r3, #3
 800b9bc:	e008      	b.n	800b9d0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	68ba      	ldr	r2, [r7, #8]
 800b9c2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	687a      	ldr	r2, [r7, #4]
 800b9ca:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b9ce:	2300      	movs	r3, #0
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	371c      	adds	r7, #28
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr

0800b9dc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b085      	sub	sp, #20
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	32b0      	adds	r2, #176	@ 0xb0
 800b9f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d101      	bne.n	800ba00 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b9fc:	2303      	movs	r3, #3
 800b9fe:	e004      	b.n	800ba0a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	683a      	ldr	r2, [r7, #0]
 800ba04:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800ba08:	2300      	movs	r3, #0
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3714      	adds	r7, #20
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr
	...

0800ba18 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b084      	sub	sp, #16
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	32b0      	adds	r2, #176	@ 0xb0
 800ba2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba2e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800ba30:	2301      	movs	r3, #1
 800ba32:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d101      	bne.n	800ba3e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ba3a:	2303      	movs	r3, #3
 800ba3c:	e025      	b.n	800ba8a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d11f      	bne.n	800ba88 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800ba50:	4b10      	ldr	r3, [pc, #64]	@ (800ba94 <USBD_CDC_TransmitPacket+0x7c>)
 800ba52:	781b      	ldrb	r3, [r3, #0]
 800ba54:	f003 020f 	and.w	r2, r3, #15
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	4613      	mov	r3, r2
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	4413      	add	r3, r2
 800ba66:	009b      	lsls	r3, r3, #2
 800ba68:	4403      	add	r3, r0
 800ba6a:	3314      	adds	r3, #20
 800ba6c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800ba6e:	4b09      	ldr	r3, [pc, #36]	@ (800ba94 <USBD_CDC_TransmitPacket+0x7c>)
 800ba70:	7819      	ldrb	r1, [r3, #0]
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f002 f845 	bl	800db0e <USBD_LL_Transmit>

    ret = USBD_OK;
 800ba84:	2300      	movs	r3, #0
 800ba86:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ba88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3710      	adds	r7, #16
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
 800ba92:	bf00      	nop
 800ba94:	20000097 	.word	0x20000097

0800ba98 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b084      	sub	sp, #16
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	32b0      	adds	r2, #176	@ 0xb0
 800baaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	32b0      	adds	r2, #176	@ 0xb0
 800baba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d101      	bne.n	800bac6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800bac2:	2303      	movs	r3, #3
 800bac4:	e018      	b.n	800baf8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	7c1b      	ldrb	r3, [r3, #16]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d10a      	bne.n	800bae4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bace:	4b0c      	ldr	r3, [pc, #48]	@ (800bb00 <USBD_CDC_ReceivePacket+0x68>)
 800bad0:	7819      	ldrb	r1, [r3, #0]
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bad8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f002 f837 	bl	800db50 <USBD_LL_PrepareReceive>
 800bae2:	e008      	b.n	800baf6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bae4:	4b06      	ldr	r3, [pc, #24]	@ (800bb00 <USBD_CDC_ReceivePacket+0x68>)
 800bae6:	7819      	ldrb	r1, [r3, #0]
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800baee:	2340      	movs	r3, #64	@ 0x40
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f002 f82d 	bl	800db50 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800baf6:	2300      	movs	r3, #0
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3710      	adds	r7, #16
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}
 800bb00:	20000098 	.word	0x20000098

0800bb04 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b086      	sub	sp, #24
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	60b9      	str	r1, [r7, #8]
 800bb0e:	4613      	mov	r3, r2
 800bb10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d101      	bne.n	800bb1c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bb18:	2303      	movs	r3, #3
 800bb1a:	e01f      	b.n	800bb5c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2200      	movs	r2, #0
 800bb28:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d003      	beq.n	800bb42 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	68ba      	ldr	r2, [r7, #8]
 800bb3e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	2201      	movs	r2, #1
 800bb46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	79fa      	ldrb	r2, [r7, #7]
 800bb4e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	f001 fea7 	bl	800d8a4 <USBD_LL_Init>
 800bb56:	4603      	mov	r3, r0
 800bb58:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bb5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3718      	adds	r7, #24
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b084      	sub	sp, #16
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d101      	bne.n	800bb7c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bb78:	2303      	movs	r3, #3
 800bb7a:	e025      	b.n	800bbc8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	683a      	ldr	r2, [r7, #0]
 800bb80:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	32ae      	adds	r2, #174	@ 0xae
 800bb8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d00f      	beq.n	800bbb8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	32ae      	adds	r2, #174	@ 0xae
 800bba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bba8:	f107 020e 	add.w	r2, r7, #14
 800bbac:	4610      	mov	r0, r2
 800bbae:	4798      	blx	r3
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bbbe:	1c5a      	adds	r2, r3, #1
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800bbc6:	2300      	movs	r3, #0
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3710      	adds	r7, #16
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}

0800bbd0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b082      	sub	sp, #8
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f001 feaf 	bl	800d93c <USBD_LL_Start>
 800bbde:	4603      	mov	r3, r0
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3708      	adds	r7, #8
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b083      	sub	sp, #12
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bbf0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	370c      	adds	r7, #12
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr

0800bbfe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bbfe:	b580      	push	{r7, lr}
 800bc00:	b084      	sub	sp, #16
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
 800bc06:	460b      	mov	r3, r1
 800bc08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d009      	beq.n	800bc2c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	78fa      	ldrb	r2, [r7, #3]
 800bc22:	4611      	mov	r1, r2
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	4798      	blx	r3
 800bc28:	4603      	mov	r3, r0
 800bc2a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bc2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3710      	adds	r7, #16
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}

0800bc36 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc36:	b580      	push	{r7, lr}
 800bc38:	b084      	sub	sp, #16
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	6078      	str	r0, [r7, #4]
 800bc3e:	460b      	mov	r3, r1
 800bc40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc42:	2300      	movs	r3, #0
 800bc44:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	78fa      	ldrb	r2, [r7, #3]
 800bc50:	4611      	mov	r1, r2
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	4798      	blx	r3
 800bc56:	4603      	mov	r3, r0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d001      	beq.n	800bc60 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bc5c:	2303      	movs	r3, #3
 800bc5e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bc60:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3710      	adds	r7, #16
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}

0800bc6a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bc6a:	b580      	push	{r7, lr}
 800bc6c:	b084      	sub	sp, #16
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	6078      	str	r0, [r7, #4]
 800bc72:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bc7a:	6839      	ldr	r1, [r7, #0]
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f001 f922 	bl	800cec6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2201      	movs	r2, #1
 800bc86:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800bc90:	461a      	mov	r2, r3
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bc9e:	f003 031f 	and.w	r3, r3, #31
 800bca2:	2b02      	cmp	r3, #2
 800bca4:	d01a      	beq.n	800bcdc <USBD_LL_SetupStage+0x72>
 800bca6:	2b02      	cmp	r3, #2
 800bca8:	d822      	bhi.n	800bcf0 <USBD_LL_SetupStage+0x86>
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d002      	beq.n	800bcb4 <USBD_LL_SetupStage+0x4a>
 800bcae:	2b01      	cmp	r3, #1
 800bcb0:	d00a      	beq.n	800bcc8 <USBD_LL_SetupStage+0x5e>
 800bcb2:	e01d      	b.n	800bcf0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bcba:	4619      	mov	r1, r3
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f000 fb77 	bl	800c3b0 <USBD_StdDevReq>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	73fb      	strb	r3, [r7, #15]
      break;
 800bcc6:	e020      	b.n	800bd0a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bcce:	4619      	mov	r1, r3
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f000 fbdf 	bl	800c494 <USBD_StdItfReq>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	73fb      	strb	r3, [r7, #15]
      break;
 800bcda:	e016      	b.n	800bd0a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bce2:	4619      	mov	r1, r3
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f000 fc41 	bl	800c56c <USBD_StdEPReq>
 800bcea:	4603      	mov	r3, r0
 800bcec:	73fb      	strb	r3, [r7, #15]
      break;
 800bcee:	e00c      	b.n	800bd0a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bcf6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bcfa:	b2db      	uxtb	r3, r3
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f001 fe7c 	bl	800d9fc <USBD_LL_StallEP>
 800bd04:	4603      	mov	r3, r0
 800bd06:	73fb      	strb	r3, [r7, #15]
      break;
 800bd08:	bf00      	nop
  }

  return ret;
 800bd0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3710      	adds	r7, #16
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b086      	sub	sp, #24
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	460b      	mov	r3, r1
 800bd1e:	607a      	str	r2, [r7, #4]
 800bd20:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bd22:	2300      	movs	r3, #0
 800bd24:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800bd26:	7afb      	ldrb	r3, [r7, #11]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d177      	bne.n	800be1c <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800bd32:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bd3a:	2b03      	cmp	r3, #3
 800bd3c:	f040 80a1 	bne.w	800be82 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	693a      	ldr	r2, [r7, #16]
 800bd46:	8992      	ldrh	r2, [r2, #12]
 800bd48:	4293      	cmp	r3, r2
 800bd4a:	d91c      	bls.n	800bd86 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	693a      	ldr	r2, [r7, #16]
 800bd52:	8992      	ldrh	r2, [r2, #12]
 800bd54:	1a9a      	subs	r2, r3, r2
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	691b      	ldr	r3, [r3, #16]
 800bd5e:	693a      	ldr	r2, [r7, #16]
 800bd60:	8992      	ldrh	r2, [r2, #12]
 800bd62:	441a      	add	r2, r3
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	6919      	ldr	r1, [r3, #16]
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	899b      	ldrh	r3, [r3, #12]
 800bd70:	461a      	mov	r2, r3
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	4293      	cmp	r3, r2
 800bd78:	bf38      	it	cc
 800bd7a:	4613      	movcc	r3, r2
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	68f8      	ldr	r0, [r7, #12]
 800bd80:	f001 f9a8 	bl	800d0d4 <USBD_CtlContinueRx>
 800bd84:	e07d      	b.n	800be82 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bd8c:	f003 031f 	and.w	r3, r3, #31
 800bd90:	2b02      	cmp	r3, #2
 800bd92:	d014      	beq.n	800bdbe <USBD_LL_DataOutStage+0xaa>
 800bd94:	2b02      	cmp	r3, #2
 800bd96:	d81d      	bhi.n	800bdd4 <USBD_LL_DataOutStage+0xc0>
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d002      	beq.n	800bda2 <USBD_LL_DataOutStage+0x8e>
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d003      	beq.n	800bda8 <USBD_LL_DataOutStage+0x94>
 800bda0:	e018      	b.n	800bdd4 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bda2:	2300      	movs	r3, #0
 800bda4:	75bb      	strb	r3, [r7, #22]
            break;
 800bda6:	e018      	b.n	800bdda <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bdae:	b2db      	uxtb	r3, r3
 800bdb0:	4619      	mov	r1, r3
 800bdb2:	68f8      	ldr	r0, [r7, #12]
 800bdb4:	f000 fa6e 	bl	800c294 <USBD_CoreFindIF>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	75bb      	strb	r3, [r7, #22]
            break;
 800bdbc:	e00d      	b.n	800bdda <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bdc4:	b2db      	uxtb	r3, r3
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	68f8      	ldr	r0, [r7, #12]
 800bdca:	f000 fa70 	bl	800c2ae <USBD_CoreFindEP>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	75bb      	strb	r3, [r7, #22]
            break;
 800bdd2:	e002      	b.n	800bdda <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	75bb      	strb	r3, [r7, #22]
            break;
 800bdd8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bdda:	7dbb      	ldrb	r3, [r7, #22]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d119      	bne.n	800be14 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bde6:	b2db      	uxtb	r3, r3
 800bde8:	2b03      	cmp	r3, #3
 800bdea:	d113      	bne.n	800be14 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bdec:	7dba      	ldrb	r2, [r7, #22]
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	32ae      	adds	r2, #174	@ 0xae
 800bdf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdf6:	691b      	ldr	r3, [r3, #16]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d00b      	beq.n	800be14 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800bdfc:	7dba      	ldrb	r2, [r7, #22]
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800be04:	7dba      	ldrb	r2, [r7, #22]
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	32ae      	adds	r2, #174	@ 0xae
 800be0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be0e:	691b      	ldr	r3, [r3, #16]
 800be10:	68f8      	ldr	r0, [r7, #12]
 800be12:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800be14:	68f8      	ldr	r0, [r7, #12]
 800be16:	f001 f96e 	bl	800d0f6 <USBD_CtlSendStatus>
 800be1a:	e032      	b.n	800be82 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800be1c:	7afb      	ldrb	r3, [r7, #11]
 800be1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be22:	b2db      	uxtb	r3, r3
 800be24:	4619      	mov	r1, r3
 800be26:	68f8      	ldr	r0, [r7, #12]
 800be28:	f000 fa41 	bl	800c2ae <USBD_CoreFindEP>
 800be2c:	4603      	mov	r3, r0
 800be2e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be30:	7dbb      	ldrb	r3, [r7, #22]
 800be32:	2bff      	cmp	r3, #255	@ 0xff
 800be34:	d025      	beq.n	800be82 <USBD_LL_DataOutStage+0x16e>
 800be36:	7dbb      	ldrb	r3, [r7, #22]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d122      	bne.n	800be82 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be42:	b2db      	uxtb	r3, r3
 800be44:	2b03      	cmp	r3, #3
 800be46:	d117      	bne.n	800be78 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800be48:	7dba      	ldrb	r2, [r7, #22]
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	32ae      	adds	r2, #174	@ 0xae
 800be4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be52:	699b      	ldr	r3, [r3, #24]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d00f      	beq.n	800be78 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800be58:	7dba      	ldrb	r2, [r7, #22]
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800be60:	7dba      	ldrb	r2, [r7, #22]
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	32ae      	adds	r2, #174	@ 0xae
 800be66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be6a:	699b      	ldr	r3, [r3, #24]
 800be6c:	7afa      	ldrb	r2, [r7, #11]
 800be6e:	4611      	mov	r1, r2
 800be70:	68f8      	ldr	r0, [r7, #12]
 800be72:	4798      	blx	r3
 800be74:	4603      	mov	r3, r0
 800be76:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800be78:	7dfb      	ldrb	r3, [r7, #23]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d001      	beq.n	800be82 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800be7e:	7dfb      	ldrb	r3, [r7, #23]
 800be80:	e000      	b.n	800be84 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800be82:	2300      	movs	r3, #0
}
 800be84:	4618      	mov	r0, r3
 800be86:	3718      	adds	r7, #24
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}

0800be8c <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b086      	sub	sp, #24
 800be90:	af00      	add	r7, sp, #0
 800be92:	60f8      	str	r0, [r7, #12]
 800be94:	460b      	mov	r3, r1
 800be96:	607a      	str	r2, [r7, #4]
 800be98:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800be9a:	7afb      	ldrb	r3, [r7, #11]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d178      	bne.n	800bf92 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	3314      	adds	r3, #20
 800bea4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800beac:	2b02      	cmp	r3, #2
 800beae:	d163      	bne.n	800bf78 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	685b      	ldr	r3, [r3, #4]
 800beb4:	693a      	ldr	r2, [r7, #16]
 800beb6:	8992      	ldrh	r2, [r2, #12]
 800beb8:	4293      	cmp	r3, r2
 800beba:	d91c      	bls.n	800bef6 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800bebc:	693b      	ldr	r3, [r7, #16]
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	693a      	ldr	r2, [r7, #16]
 800bec2:	8992      	ldrh	r2, [r2, #12]
 800bec4:	1a9a      	subs	r2, r3, r2
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800beca:	693b      	ldr	r3, [r7, #16]
 800becc:	691b      	ldr	r3, [r3, #16]
 800bece:	693a      	ldr	r2, [r7, #16]
 800bed0:	8992      	ldrh	r2, [r2, #12]
 800bed2:	441a      	add	r2, r3
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	6919      	ldr	r1, [r3, #16]
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	685b      	ldr	r3, [r3, #4]
 800bee0:	461a      	mov	r2, r3
 800bee2:	68f8      	ldr	r0, [r7, #12]
 800bee4:	f001 f8c4 	bl	800d070 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bee8:	2300      	movs	r3, #0
 800beea:	2200      	movs	r2, #0
 800beec:	2100      	movs	r1, #0
 800beee:	68f8      	ldr	r0, [r7, #12]
 800bef0:	f001 fe2e 	bl	800db50 <USBD_LL_PrepareReceive>
 800bef4:	e040      	b.n	800bf78 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	899b      	ldrh	r3, [r3, #12]
 800befa:	461a      	mov	r2, r3
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	685b      	ldr	r3, [r3, #4]
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d11c      	bne.n	800bf3e <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	693a      	ldr	r2, [r7, #16]
 800bf0a:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d316      	bcc.n	800bf3e <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	681a      	ldr	r2, [r3, #0]
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d20f      	bcs.n	800bf3e <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bf1e:	2200      	movs	r2, #0
 800bf20:	2100      	movs	r1, #0
 800bf22:	68f8      	ldr	r0, [r7, #12]
 800bf24:	f001 f8a4 	bl	800d070 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf30:	2300      	movs	r3, #0
 800bf32:	2200      	movs	r2, #0
 800bf34:	2100      	movs	r1, #0
 800bf36:	68f8      	ldr	r0, [r7, #12]
 800bf38:	f001 fe0a 	bl	800db50 <USBD_LL_PrepareReceive>
 800bf3c:	e01c      	b.n	800bf78 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf44:	b2db      	uxtb	r3, r3
 800bf46:	2b03      	cmp	r3, #3
 800bf48:	d10f      	bne.n	800bf6a <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf50:	68db      	ldr	r3, [r3, #12]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d009      	beq.n	800bf6a <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf64:	68db      	ldr	r3, [r3, #12]
 800bf66:	68f8      	ldr	r0, [r7, #12]
 800bf68:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf6a:	2180      	movs	r1, #128	@ 0x80
 800bf6c:	68f8      	ldr	r0, [r7, #12]
 800bf6e:	f001 fd45 	bl	800d9fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bf72:	68f8      	ldr	r0, [r7, #12]
 800bf74:	f001 f8d2 	bl	800d11c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d03a      	beq.n	800bff8 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800bf82:	68f8      	ldr	r0, [r7, #12]
 800bf84:	f7ff fe30 	bl	800bbe8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bf90:	e032      	b.n	800bff8 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bf92:	7afb      	ldrb	r3, [r7, #11]
 800bf94:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bf98:	b2db      	uxtb	r3, r3
 800bf9a:	4619      	mov	r1, r3
 800bf9c:	68f8      	ldr	r0, [r7, #12]
 800bf9e:	f000 f986 	bl	800c2ae <USBD_CoreFindEP>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bfa6:	7dfb      	ldrb	r3, [r7, #23]
 800bfa8:	2bff      	cmp	r3, #255	@ 0xff
 800bfaa:	d025      	beq.n	800bff8 <USBD_LL_DataInStage+0x16c>
 800bfac:	7dfb      	ldrb	r3, [r7, #23]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d122      	bne.n	800bff8 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfb8:	b2db      	uxtb	r3, r3
 800bfba:	2b03      	cmp	r3, #3
 800bfbc:	d11c      	bne.n	800bff8 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bfbe:	7dfa      	ldrb	r2, [r7, #23]
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	32ae      	adds	r2, #174	@ 0xae
 800bfc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfc8:	695b      	ldr	r3, [r3, #20]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d014      	beq.n	800bff8 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800bfce:	7dfa      	ldrb	r2, [r7, #23]
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bfd6:	7dfa      	ldrb	r2, [r7, #23]
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	32ae      	adds	r2, #174	@ 0xae
 800bfdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfe0:	695b      	ldr	r3, [r3, #20]
 800bfe2:	7afa      	ldrb	r2, [r7, #11]
 800bfe4:	4611      	mov	r1, r2
 800bfe6:	68f8      	ldr	r0, [r7, #12]
 800bfe8:	4798      	blx	r3
 800bfea:	4603      	mov	r3, r0
 800bfec:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bfee:	7dbb      	ldrb	r3, [r7, #22]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d001      	beq.n	800bff8 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800bff4:	7dbb      	ldrb	r3, [r7, #22]
 800bff6:	e000      	b.n	800bffa <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800bff8:	2300      	movs	r3, #0
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3718      	adds	r7, #24
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}

0800c002 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c002:	b580      	push	{r7, lr}
 800c004:	b084      	sub	sp, #16
 800c006:	af00      	add	r7, sp, #0
 800c008:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c00a:	2300      	movs	r3, #0
 800c00c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2201      	movs	r2, #1
 800c012:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2200      	movs	r2, #0
 800c01a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2200      	movs	r2, #0
 800c022:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2200      	movs	r2, #0
 800c028:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2200      	movs	r2, #0
 800c030:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d014      	beq.n	800c068 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c044:	685b      	ldr	r3, [r3, #4]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d00e      	beq.n	800c068 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c050:	685b      	ldr	r3, [r3, #4]
 800c052:	687a      	ldr	r2, [r7, #4]
 800c054:	6852      	ldr	r2, [r2, #4]
 800c056:	b2d2      	uxtb	r2, r2
 800c058:	4611      	mov	r1, r2
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	4798      	blx	r3
 800c05e:	4603      	mov	r3, r0
 800c060:	2b00      	cmp	r3, #0
 800c062:	d001      	beq.n	800c068 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c064:	2303      	movs	r3, #3
 800c066:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c068:	2340      	movs	r3, #64	@ 0x40
 800c06a:	2200      	movs	r2, #0
 800c06c:	2100      	movs	r1, #0
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f001 fc7f 	bl	800d972 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2201      	movs	r2, #1
 800c078:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2240      	movs	r2, #64	@ 0x40
 800c080:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c084:	2340      	movs	r3, #64	@ 0x40
 800c086:	2200      	movs	r2, #0
 800c088:	2180      	movs	r1, #128	@ 0x80
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f001 fc71 	bl	800d972 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2201      	movs	r2, #1
 800c094:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2240      	movs	r2, #64	@ 0x40
 800c09c:	841a      	strh	r2, [r3, #32]

  return ret;
 800c09e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3710      	adds	r7, #16
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b083      	sub	sp, #12
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	78fa      	ldrb	r2, [r7, #3]
 800c0b8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c0ba:	2300      	movs	r3, #0
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	370c      	adds	r7, #12
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr

0800c0c8 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b083      	sub	sp, #12
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0d6:	b2db      	uxtb	r3, r3
 800c0d8:	2b04      	cmp	r3, #4
 800c0da:	d006      	beq.n	800c0ea <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0e2:	b2da      	uxtb	r2, r3
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2204      	movs	r2, #4
 800c0ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c0f2:	2300      	movs	r3, #0
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	370c      	adds	r7, #12
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr

0800c100 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c100:	b480      	push	{r7}
 800c102:	b083      	sub	sp, #12
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c10e:	b2db      	uxtb	r3, r3
 800c110:	2b04      	cmp	r3, #4
 800c112:	d106      	bne.n	800c122 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c11a:	b2da      	uxtb	r2, r3
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c122:	2300      	movs	r3, #0
}
 800c124:	4618      	mov	r0, r3
 800c126:	370c      	adds	r7, #12
 800c128:	46bd      	mov	sp, r7
 800c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12e:	4770      	bx	lr

0800c130 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b082      	sub	sp, #8
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c13e:	b2db      	uxtb	r3, r3
 800c140:	2b03      	cmp	r3, #3
 800c142:	d110      	bne.n	800c166 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d00b      	beq.n	800c166 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c154:	69db      	ldr	r3, [r3, #28]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d005      	beq.n	800c166 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c160:	69db      	ldr	r3, [r3, #28]
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c166:	2300      	movs	r3, #0
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3708      	adds	r7, #8
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}

0800c170 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b082      	sub	sp, #8
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	460b      	mov	r3, r1
 800c17a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	32ae      	adds	r2, #174	@ 0xae
 800c186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d101      	bne.n	800c192 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c18e:	2303      	movs	r3, #3
 800c190:	e01c      	b.n	800c1cc <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c198:	b2db      	uxtb	r3, r3
 800c19a:	2b03      	cmp	r3, #3
 800c19c:	d115      	bne.n	800c1ca <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	32ae      	adds	r2, #174	@ 0xae
 800c1a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1ac:	6a1b      	ldr	r3, [r3, #32]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d00b      	beq.n	800c1ca <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	32ae      	adds	r2, #174	@ 0xae
 800c1bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1c0:	6a1b      	ldr	r3, [r3, #32]
 800c1c2:	78fa      	ldrb	r2, [r7, #3]
 800c1c4:	4611      	mov	r1, r2
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c1ca:	2300      	movs	r3, #0
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	3708      	adds	r7, #8
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}

0800c1d4 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b082      	sub	sp, #8
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	460b      	mov	r3, r1
 800c1de:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	32ae      	adds	r2, #174	@ 0xae
 800c1ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d101      	bne.n	800c1f6 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c1f2:	2303      	movs	r3, #3
 800c1f4:	e01c      	b.n	800c230 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1fc:	b2db      	uxtb	r3, r3
 800c1fe:	2b03      	cmp	r3, #3
 800c200:	d115      	bne.n	800c22e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	32ae      	adds	r2, #174	@ 0xae
 800c20c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c212:	2b00      	cmp	r3, #0
 800c214:	d00b      	beq.n	800c22e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	32ae      	adds	r2, #174	@ 0xae
 800c220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c226:	78fa      	ldrb	r2, [r7, #3]
 800c228:	4611      	mov	r1, r2
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c22e:	2300      	movs	r3, #0
}
 800c230:	4618      	mov	r0, r3
 800c232:	3708      	adds	r7, #8
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}

0800c238 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c238:	b480      	push	{r7}
 800c23a:	b083      	sub	sp, #12
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c240:	2300      	movs	r3, #0
}
 800c242:	4618      	mov	r0, r3
 800c244:	370c      	adds	r7, #12
 800c246:	46bd      	mov	sp, r7
 800c248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24c:	4770      	bx	lr

0800c24e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c24e:	b580      	push	{r7, lr}
 800c250:	b084      	sub	sp, #16
 800c252:	af00      	add	r7, sp, #0
 800c254:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c256:	2300      	movs	r3, #0
 800c258:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2201      	movs	r2, #1
 800c25e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d00e      	beq.n	800c28a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	6852      	ldr	r2, [r2, #4]
 800c278:	b2d2      	uxtb	r2, r2
 800c27a:	4611      	mov	r1, r2
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	4798      	blx	r3
 800c280:	4603      	mov	r3, r0
 800c282:	2b00      	cmp	r3, #0
 800c284:	d001      	beq.n	800c28a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c286:	2303      	movs	r3, #3
 800c288:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c28a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3710      	adds	r7, #16
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c294:	b480      	push	{r7}
 800c296:	b083      	sub	sp, #12
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	460b      	mov	r3, r1
 800c29e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c2a0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	370c      	adds	r7, #12
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ac:	4770      	bx	lr

0800c2ae <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c2ae:	b480      	push	{r7}
 800c2b0:	b083      	sub	sp, #12
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	6078      	str	r0, [r7, #4]
 800c2b6:	460b      	mov	r3, r1
 800c2b8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c2ba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	370c      	adds	r7, #12
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr

0800c2c8 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b086      	sub	sp, #24
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	460b      	mov	r3, r1
 800c2d2:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	885b      	ldrh	r3, [r3, #2]
 800c2e4:	b29b      	uxth	r3, r3
 800c2e6:	68fa      	ldr	r2, [r7, #12]
 800c2e8:	7812      	ldrb	r2, [r2, #0]
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d91f      	bls.n	800c32e <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	781b      	ldrb	r3, [r3, #0]
 800c2f2:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c2f4:	e013      	b.n	800c31e <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c2f6:	f107 030a 	add.w	r3, r7, #10
 800c2fa:	4619      	mov	r1, r3
 800c2fc:	6978      	ldr	r0, [r7, #20]
 800c2fe:	f000 f81b 	bl	800c338 <USBD_GetNextDesc>
 800c302:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	785b      	ldrb	r3, [r3, #1]
 800c308:	2b05      	cmp	r3, #5
 800c30a:	d108      	bne.n	800c31e <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	789b      	ldrb	r3, [r3, #2]
 800c314:	78fa      	ldrb	r2, [r7, #3]
 800c316:	429a      	cmp	r2, r3
 800c318:	d008      	beq.n	800c32c <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c31a:	2300      	movs	r3, #0
 800c31c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	885b      	ldrh	r3, [r3, #2]
 800c322:	b29a      	uxth	r2, r3
 800c324:	897b      	ldrh	r3, [r7, #10]
 800c326:	429a      	cmp	r2, r3
 800c328:	d8e5      	bhi.n	800c2f6 <USBD_GetEpDesc+0x2e>
 800c32a:	e000      	b.n	800c32e <USBD_GetEpDesc+0x66>
          break;
 800c32c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c32e:	693b      	ldr	r3, [r7, #16]
}
 800c330:	4618      	mov	r0, r3
 800c332:	3718      	adds	r7, #24
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}

0800c338 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c338:	b480      	push	{r7}
 800c33a:	b085      	sub	sp, #20
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
 800c340:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	881b      	ldrh	r3, [r3, #0]
 800c34a:	68fa      	ldr	r2, [r7, #12]
 800c34c:	7812      	ldrb	r2, [r2, #0]
 800c34e:	4413      	add	r3, r2
 800c350:	b29a      	uxth	r2, r3
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	461a      	mov	r2, r3
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	4413      	add	r3, r2
 800c360:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c362:	68fb      	ldr	r3, [r7, #12]
}
 800c364:	4618      	mov	r0, r3
 800c366:	3714      	adds	r7, #20
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr

0800c370 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c370:	b480      	push	{r7}
 800c372:	b087      	sub	sp, #28
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	781b      	ldrb	r3, [r3, #0]
 800c380:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	3301      	adds	r3, #1
 800c386:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	781b      	ldrb	r3, [r3, #0]
 800c38c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c38e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c392:	021b      	lsls	r3, r3, #8
 800c394:	b21a      	sxth	r2, r3
 800c396:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c39a:	4313      	orrs	r3, r2
 800c39c:	b21b      	sxth	r3, r3
 800c39e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c3a0:	89fb      	ldrh	r3, [r7, #14]
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	371c      	adds	r7, #28
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ac:	4770      	bx	lr
	...

0800c3b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b084      	sub	sp, #16
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c3c6:	2b40      	cmp	r3, #64	@ 0x40
 800c3c8:	d005      	beq.n	800c3d6 <USBD_StdDevReq+0x26>
 800c3ca:	2b40      	cmp	r3, #64	@ 0x40
 800c3cc:	d857      	bhi.n	800c47e <USBD_StdDevReq+0xce>
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d00f      	beq.n	800c3f2 <USBD_StdDevReq+0x42>
 800c3d2:	2b20      	cmp	r3, #32
 800c3d4:	d153      	bne.n	800c47e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	32ae      	adds	r2, #174	@ 0xae
 800c3e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3e4:	689b      	ldr	r3, [r3, #8]
 800c3e6:	6839      	ldr	r1, [r7, #0]
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	4798      	blx	r3
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	73fb      	strb	r3, [r7, #15]
      break;
 800c3f0:	e04a      	b.n	800c488 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	785b      	ldrb	r3, [r3, #1]
 800c3f6:	2b09      	cmp	r3, #9
 800c3f8:	d83b      	bhi.n	800c472 <USBD_StdDevReq+0xc2>
 800c3fa:	a201      	add	r2, pc, #4	@ (adr r2, 800c400 <USBD_StdDevReq+0x50>)
 800c3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c400:	0800c455 	.word	0x0800c455
 800c404:	0800c469 	.word	0x0800c469
 800c408:	0800c473 	.word	0x0800c473
 800c40c:	0800c45f 	.word	0x0800c45f
 800c410:	0800c473 	.word	0x0800c473
 800c414:	0800c433 	.word	0x0800c433
 800c418:	0800c429 	.word	0x0800c429
 800c41c:	0800c473 	.word	0x0800c473
 800c420:	0800c44b 	.word	0x0800c44b
 800c424:	0800c43d 	.word	0x0800c43d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c428:	6839      	ldr	r1, [r7, #0]
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f000 fa3e 	bl	800c8ac <USBD_GetDescriptor>
          break;
 800c430:	e024      	b.n	800c47c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c432:	6839      	ldr	r1, [r7, #0]
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f000 fba3 	bl	800cb80 <USBD_SetAddress>
          break;
 800c43a:	e01f      	b.n	800c47c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c43c:	6839      	ldr	r1, [r7, #0]
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f000 fbe2 	bl	800cc08 <USBD_SetConfig>
 800c444:	4603      	mov	r3, r0
 800c446:	73fb      	strb	r3, [r7, #15]
          break;
 800c448:	e018      	b.n	800c47c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c44a:	6839      	ldr	r1, [r7, #0]
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f000 fc85 	bl	800cd5c <USBD_GetConfig>
          break;
 800c452:	e013      	b.n	800c47c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c454:	6839      	ldr	r1, [r7, #0]
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 fcb6 	bl	800cdc8 <USBD_GetStatus>
          break;
 800c45c:	e00e      	b.n	800c47c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c45e:	6839      	ldr	r1, [r7, #0]
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f000 fce5 	bl	800ce30 <USBD_SetFeature>
          break;
 800c466:	e009      	b.n	800c47c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c468:	6839      	ldr	r1, [r7, #0]
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f000 fd09 	bl	800ce82 <USBD_ClrFeature>
          break;
 800c470:	e004      	b.n	800c47c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c472:	6839      	ldr	r1, [r7, #0]
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f000 fd60 	bl	800cf3a <USBD_CtlError>
          break;
 800c47a:	bf00      	nop
      }
      break;
 800c47c:	e004      	b.n	800c488 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c47e:	6839      	ldr	r1, [r7, #0]
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f000 fd5a 	bl	800cf3a <USBD_CtlError>
      break;
 800c486:	bf00      	nop
  }

  return ret;
 800c488:	7bfb      	ldrb	r3, [r7, #15]
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3710      	adds	r7, #16
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
 800c492:	bf00      	nop

0800c494 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b084      	sub	sp, #16
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	781b      	ldrb	r3, [r3, #0]
 800c4a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c4aa:	2b40      	cmp	r3, #64	@ 0x40
 800c4ac:	d005      	beq.n	800c4ba <USBD_StdItfReq+0x26>
 800c4ae:	2b40      	cmp	r3, #64	@ 0x40
 800c4b0:	d852      	bhi.n	800c558 <USBD_StdItfReq+0xc4>
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d001      	beq.n	800c4ba <USBD_StdItfReq+0x26>
 800c4b6:	2b20      	cmp	r3, #32
 800c4b8:	d14e      	bne.n	800c558 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4c0:	b2db      	uxtb	r3, r3
 800c4c2:	3b01      	subs	r3, #1
 800c4c4:	2b02      	cmp	r3, #2
 800c4c6:	d840      	bhi.n	800c54a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	889b      	ldrh	r3, [r3, #4]
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	2b01      	cmp	r3, #1
 800c4d0:	d836      	bhi.n	800c540 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	889b      	ldrh	r3, [r3, #4]
 800c4d6:	b2db      	uxtb	r3, r3
 800c4d8:	4619      	mov	r1, r3
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f7ff feda 	bl	800c294 <USBD_CoreFindIF>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c4e4:	7bbb      	ldrb	r3, [r7, #14]
 800c4e6:	2bff      	cmp	r3, #255	@ 0xff
 800c4e8:	d01d      	beq.n	800c526 <USBD_StdItfReq+0x92>
 800c4ea:	7bbb      	ldrb	r3, [r7, #14]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d11a      	bne.n	800c526 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c4f0:	7bba      	ldrb	r2, [r7, #14]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	32ae      	adds	r2, #174	@ 0xae
 800c4f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4fa:	689b      	ldr	r3, [r3, #8]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d00f      	beq.n	800c520 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c500:	7bba      	ldrb	r2, [r7, #14]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c508:	7bba      	ldrb	r2, [r7, #14]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	32ae      	adds	r2, #174	@ 0xae
 800c50e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c512:	689b      	ldr	r3, [r3, #8]
 800c514:	6839      	ldr	r1, [r7, #0]
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	4798      	blx	r3
 800c51a:	4603      	mov	r3, r0
 800c51c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c51e:	e004      	b.n	800c52a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c520:	2303      	movs	r3, #3
 800c522:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c524:	e001      	b.n	800c52a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c526:	2303      	movs	r3, #3
 800c528:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	88db      	ldrh	r3, [r3, #6]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d110      	bne.n	800c554 <USBD_StdItfReq+0xc0>
 800c532:	7bfb      	ldrb	r3, [r7, #15]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d10d      	bne.n	800c554 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f000 fddc 	bl	800d0f6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c53e:	e009      	b.n	800c554 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c540:	6839      	ldr	r1, [r7, #0]
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f000 fcf9 	bl	800cf3a <USBD_CtlError>
          break;
 800c548:	e004      	b.n	800c554 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c54a:	6839      	ldr	r1, [r7, #0]
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f000 fcf4 	bl	800cf3a <USBD_CtlError>
          break;
 800c552:	e000      	b.n	800c556 <USBD_StdItfReq+0xc2>
          break;
 800c554:	bf00      	nop
      }
      break;
 800c556:	e004      	b.n	800c562 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c558:	6839      	ldr	r1, [r7, #0]
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 fced 	bl	800cf3a <USBD_CtlError>
      break;
 800c560:	bf00      	nop
  }

  return ret;
 800c562:	7bfb      	ldrb	r3, [r7, #15]
}
 800c564:	4618      	mov	r0, r3
 800c566:	3710      	adds	r7, #16
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b084      	sub	sp, #16
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c576:	2300      	movs	r3, #0
 800c578:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	889b      	ldrh	r3, [r3, #4]
 800c57e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c588:	2b40      	cmp	r3, #64	@ 0x40
 800c58a:	d007      	beq.n	800c59c <USBD_StdEPReq+0x30>
 800c58c:	2b40      	cmp	r3, #64	@ 0x40
 800c58e:	f200 8181 	bhi.w	800c894 <USBD_StdEPReq+0x328>
 800c592:	2b00      	cmp	r3, #0
 800c594:	d02a      	beq.n	800c5ec <USBD_StdEPReq+0x80>
 800c596:	2b20      	cmp	r3, #32
 800c598:	f040 817c 	bne.w	800c894 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c59c:	7bbb      	ldrb	r3, [r7, #14]
 800c59e:	4619      	mov	r1, r3
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f7ff fe84 	bl	800c2ae <USBD_CoreFindEP>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c5aa:	7b7b      	ldrb	r3, [r7, #13]
 800c5ac:	2bff      	cmp	r3, #255	@ 0xff
 800c5ae:	f000 8176 	beq.w	800c89e <USBD_StdEPReq+0x332>
 800c5b2:	7b7b      	ldrb	r3, [r7, #13]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	f040 8172 	bne.w	800c89e <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800c5ba:	7b7a      	ldrb	r2, [r7, #13]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c5c2:	7b7a      	ldrb	r2, [r7, #13]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	32ae      	adds	r2, #174	@ 0xae
 800c5c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5cc:	689b      	ldr	r3, [r3, #8]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	f000 8165 	beq.w	800c89e <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c5d4:	7b7a      	ldrb	r2, [r7, #13]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	32ae      	adds	r2, #174	@ 0xae
 800c5da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5de:	689b      	ldr	r3, [r3, #8]
 800c5e0:	6839      	ldr	r1, [r7, #0]
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	4798      	blx	r3
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c5ea:	e158      	b.n	800c89e <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	785b      	ldrb	r3, [r3, #1]
 800c5f0:	2b03      	cmp	r3, #3
 800c5f2:	d008      	beq.n	800c606 <USBD_StdEPReq+0x9a>
 800c5f4:	2b03      	cmp	r3, #3
 800c5f6:	f300 8147 	bgt.w	800c888 <USBD_StdEPReq+0x31c>
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	f000 809b 	beq.w	800c736 <USBD_StdEPReq+0x1ca>
 800c600:	2b01      	cmp	r3, #1
 800c602:	d03c      	beq.n	800c67e <USBD_StdEPReq+0x112>
 800c604:	e140      	b.n	800c888 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c60c:	b2db      	uxtb	r3, r3
 800c60e:	2b02      	cmp	r3, #2
 800c610:	d002      	beq.n	800c618 <USBD_StdEPReq+0xac>
 800c612:	2b03      	cmp	r3, #3
 800c614:	d016      	beq.n	800c644 <USBD_StdEPReq+0xd8>
 800c616:	e02c      	b.n	800c672 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c618:	7bbb      	ldrb	r3, [r7, #14]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d00d      	beq.n	800c63a <USBD_StdEPReq+0xce>
 800c61e:	7bbb      	ldrb	r3, [r7, #14]
 800c620:	2b80      	cmp	r3, #128	@ 0x80
 800c622:	d00a      	beq.n	800c63a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c624:	7bbb      	ldrb	r3, [r7, #14]
 800c626:	4619      	mov	r1, r3
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f001 f9e7 	bl	800d9fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c62e:	2180      	movs	r1, #128	@ 0x80
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f001 f9e3 	bl	800d9fc <USBD_LL_StallEP>
 800c636:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c638:	e020      	b.n	800c67c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c63a:	6839      	ldr	r1, [r7, #0]
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f000 fc7c 	bl	800cf3a <USBD_CtlError>
              break;
 800c642:	e01b      	b.n	800c67c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	885b      	ldrh	r3, [r3, #2]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d10e      	bne.n	800c66a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c64c:	7bbb      	ldrb	r3, [r7, #14]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d00b      	beq.n	800c66a <USBD_StdEPReq+0xfe>
 800c652:	7bbb      	ldrb	r3, [r7, #14]
 800c654:	2b80      	cmp	r3, #128	@ 0x80
 800c656:	d008      	beq.n	800c66a <USBD_StdEPReq+0xfe>
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	88db      	ldrh	r3, [r3, #6]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d104      	bne.n	800c66a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c660:	7bbb      	ldrb	r3, [r7, #14]
 800c662:	4619      	mov	r1, r3
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f001 f9c9 	bl	800d9fc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f000 fd43 	bl	800d0f6 <USBD_CtlSendStatus>

              break;
 800c670:	e004      	b.n	800c67c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c672:	6839      	ldr	r1, [r7, #0]
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f000 fc60 	bl	800cf3a <USBD_CtlError>
              break;
 800c67a:	bf00      	nop
          }
          break;
 800c67c:	e109      	b.n	800c892 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c684:	b2db      	uxtb	r3, r3
 800c686:	2b02      	cmp	r3, #2
 800c688:	d002      	beq.n	800c690 <USBD_StdEPReq+0x124>
 800c68a:	2b03      	cmp	r3, #3
 800c68c:	d016      	beq.n	800c6bc <USBD_StdEPReq+0x150>
 800c68e:	e04b      	b.n	800c728 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c690:	7bbb      	ldrb	r3, [r7, #14]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d00d      	beq.n	800c6b2 <USBD_StdEPReq+0x146>
 800c696:	7bbb      	ldrb	r3, [r7, #14]
 800c698:	2b80      	cmp	r3, #128	@ 0x80
 800c69a:	d00a      	beq.n	800c6b2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c69c:	7bbb      	ldrb	r3, [r7, #14]
 800c69e:	4619      	mov	r1, r3
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f001 f9ab 	bl	800d9fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c6a6:	2180      	movs	r1, #128	@ 0x80
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f001 f9a7 	bl	800d9fc <USBD_LL_StallEP>
 800c6ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c6b0:	e040      	b.n	800c734 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c6b2:	6839      	ldr	r1, [r7, #0]
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f000 fc40 	bl	800cf3a <USBD_CtlError>
              break;
 800c6ba:	e03b      	b.n	800c734 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	885b      	ldrh	r3, [r3, #2]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d136      	bne.n	800c732 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c6c4:	7bbb      	ldrb	r3, [r7, #14]
 800c6c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d004      	beq.n	800c6d8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c6ce:	7bbb      	ldrb	r3, [r7, #14]
 800c6d0:	4619      	mov	r1, r3
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f001 f9b1 	bl	800da3a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f000 fd0c 	bl	800d0f6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c6de:	7bbb      	ldrb	r3, [r7, #14]
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f7ff fde3 	bl	800c2ae <USBD_CoreFindEP>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c6ec:	7b7b      	ldrb	r3, [r7, #13]
 800c6ee:	2bff      	cmp	r3, #255	@ 0xff
 800c6f0:	d01f      	beq.n	800c732 <USBD_StdEPReq+0x1c6>
 800c6f2:	7b7b      	ldrb	r3, [r7, #13]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d11c      	bne.n	800c732 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c6f8:	7b7a      	ldrb	r2, [r7, #13]
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c700:	7b7a      	ldrb	r2, [r7, #13]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	32ae      	adds	r2, #174	@ 0xae
 800c706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c70a:	689b      	ldr	r3, [r3, #8]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d010      	beq.n	800c732 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c710:	7b7a      	ldrb	r2, [r7, #13]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	32ae      	adds	r2, #174	@ 0xae
 800c716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c71a:	689b      	ldr	r3, [r3, #8]
 800c71c:	6839      	ldr	r1, [r7, #0]
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	4798      	blx	r3
 800c722:	4603      	mov	r3, r0
 800c724:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c726:	e004      	b.n	800c732 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c728:	6839      	ldr	r1, [r7, #0]
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f000 fc05 	bl	800cf3a <USBD_CtlError>
              break;
 800c730:	e000      	b.n	800c734 <USBD_StdEPReq+0x1c8>
              break;
 800c732:	bf00      	nop
          }
          break;
 800c734:	e0ad      	b.n	800c892 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c73c:	b2db      	uxtb	r3, r3
 800c73e:	2b02      	cmp	r3, #2
 800c740:	d002      	beq.n	800c748 <USBD_StdEPReq+0x1dc>
 800c742:	2b03      	cmp	r3, #3
 800c744:	d033      	beq.n	800c7ae <USBD_StdEPReq+0x242>
 800c746:	e099      	b.n	800c87c <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c748:	7bbb      	ldrb	r3, [r7, #14]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d007      	beq.n	800c75e <USBD_StdEPReq+0x1f2>
 800c74e:	7bbb      	ldrb	r3, [r7, #14]
 800c750:	2b80      	cmp	r3, #128	@ 0x80
 800c752:	d004      	beq.n	800c75e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c754:	6839      	ldr	r1, [r7, #0]
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 fbef 	bl	800cf3a <USBD_CtlError>
                break;
 800c75c:	e093      	b.n	800c886 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c75e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c762:	2b00      	cmp	r3, #0
 800c764:	da0b      	bge.n	800c77e <USBD_StdEPReq+0x212>
 800c766:	7bbb      	ldrb	r3, [r7, #14]
 800c768:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c76c:	4613      	mov	r3, r2
 800c76e:	009b      	lsls	r3, r3, #2
 800c770:	4413      	add	r3, r2
 800c772:	009b      	lsls	r3, r3, #2
 800c774:	3310      	adds	r3, #16
 800c776:	687a      	ldr	r2, [r7, #4]
 800c778:	4413      	add	r3, r2
 800c77a:	3304      	adds	r3, #4
 800c77c:	e00b      	b.n	800c796 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c77e:	7bbb      	ldrb	r3, [r7, #14]
 800c780:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c784:	4613      	mov	r3, r2
 800c786:	009b      	lsls	r3, r3, #2
 800c788:	4413      	add	r3, r2
 800c78a:	009b      	lsls	r3, r3, #2
 800c78c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c790:	687a      	ldr	r2, [r7, #4]
 800c792:	4413      	add	r3, r2
 800c794:	3304      	adds	r3, #4
 800c796:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	2200      	movs	r2, #0
 800c79c:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	330e      	adds	r3, #14
 800c7a2:	2202      	movs	r2, #2
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f000 fc44 	bl	800d034 <USBD_CtlSendData>
              break;
 800c7ac:	e06b      	b.n	800c886 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c7ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	da11      	bge.n	800c7da <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c7b6:	7bbb      	ldrb	r3, [r7, #14]
 800c7b8:	f003 020f 	and.w	r2, r3, #15
 800c7bc:	6879      	ldr	r1, [r7, #4]
 800c7be:	4613      	mov	r3, r2
 800c7c0:	009b      	lsls	r3, r3, #2
 800c7c2:	4413      	add	r3, r2
 800c7c4:	009b      	lsls	r3, r3, #2
 800c7c6:	440b      	add	r3, r1
 800c7c8:	3323      	adds	r3, #35	@ 0x23
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d117      	bne.n	800c800 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c7d0:	6839      	ldr	r1, [r7, #0]
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f000 fbb1 	bl	800cf3a <USBD_CtlError>
                  break;
 800c7d8:	e055      	b.n	800c886 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c7da:	7bbb      	ldrb	r3, [r7, #14]
 800c7dc:	f003 020f 	and.w	r2, r3, #15
 800c7e0:	6879      	ldr	r1, [r7, #4]
 800c7e2:	4613      	mov	r3, r2
 800c7e4:	009b      	lsls	r3, r3, #2
 800c7e6:	4413      	add	r3, r2
 800c7e8:	009b      	lsls	r3, r3, #2
 800c7ea:	440b      	add	r3, r1
 800c7ec:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d104      	bne.n	800c800 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c7f6:	6839      	ldr	r1, [r7, #0]
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f000 fb9e 	bl	800cf3a <USBD_CtlError>
                  break;
 800c7fe:	e042      	b.n	800c886 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c800:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c804:	2b00      	cmp	r3, #0
 800c806:	da0b      	bge.n	800c820 <USBD_StdEPReq+0x2b4>
 800c808:	7bbb      	ldrb	r3, [r7, #14]
 800c80a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c80e:	4613      	mov	r3, r2
 800c810:	009b      	lsls	r3, r3, #2
 800c812:	4413      	add	r3, r2
 800c814:	009b      	lsls	r3, r3, #2
 800c816:	3310      	adds	r3, #16
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	4413      	add	r3, r2
 800c81c:	3304      	adds	r3, #4
 800c81e:	e00b      	b.n	800c838 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c820:	7bbb      	ldrb	r3, [r7, #14]
 800c822:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c826:	4613      	mov	r3, r2
 800c828:	009b      	lsls	r3, r3, #2
 800c82a:	4413      	add	r3, r2
 800c82c:	009b      	lsls	r3, r3, #2
 800c82e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	4413      	add	r3, r2
 800c836:	3304      	adds	r3, #4
 800c838:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c83a:	7bbb      	ldrb	r3, [r7, #14]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d002      	beq.n	800c846 <USBD_StdEPReq+0x2da>
 800c840:	7bbb      	ldrb	r3, [r7, #14]
 800c842:	2b80      	cmp	r3, #128	@ 0x80
 800c844:	d103      	bne.n	800c84e <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	2200      	movs	r2, #0
 800c84a:	739a      	strb	r2, [r3, #14]
 800c84c:	e00e      	b.n	800c86c <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c84e:	7bbb      	ldrb	r3, [r7, #14]
 800c850:	4619      	mov	r1, r3
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f001 f910 	bl	800da78 <USBD_LL_IsStallEP>
 800c858:	4603      	mov	r3, r0
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d003      	beq.n	800c866 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	2201      	movs	r2, #1
 800c862:	739a      	strb	r2, [r3, #14]
 800c864:	e002      	b.n	800c86c <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	2200      	movs	r2, #0
 800c86a:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	330e      	adds	r3, #14
 800c870:	2202      	movs	r2, #2
 800c872:	4619      	mov	r1, r3
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f000 fbdd 	bl	800d034 <USBD_CtlSendData>
              break;
 800c87a:	e004      	b.n	800c886 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800c87c:	6839      	ldr	r1, [r7, #0]
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f000 fb5b 	bl	800cf3a <USBD_CtlError>
              break;
 800c884:	bf00      	nop
          }
          break;
 800c886:	e004      	b.n	800c892 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800c888:	6839      	ldr	r1, [r7, #0]
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f000 fb55 	bl	800cf3a <USBD_CtlError>
          break;
 800c890:	bf00      	nop
      }
      break;
 800c892:	e005      	b.n	800c8a0 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800c894:	6839      	ldr	r1, [r7, #0]
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 fb4f 	bl	800cf3a <USBD_CtlError>
      break;
 800c89c:	e000      	b.n	800c8a0 <USBD_StdEPReq+0x334>
      break;
 800c89e:	bf00      	nop
  }

  return ret;
 800c8a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3710      	adds	r7, #16
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}
	...

0800c8ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b084      	sub	sp, #16
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	885b      	ldrh	r3, [r3, #2]
 800c8c6:	0a1b      	lsrs	r3, r3, #8
 800c8c8:	b29b      	uxth	r3, r3
 800c8ca:	3b01      	subs	r3, #1
 800c8cc:	2b06      	cmp	r3, #6
 800c8ce:	f200 8128 	bhi.w	800cb22 <USBD_GetDescriptor+0x276>
 800c8d2:	a201      	add	r2, pc, #4	@ (adr r2, 800c8d8 <USBD_GetDescriptor+0x2c>)
 800c8d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8d8:	0800c8f5 	.word	0x0800c8f5
 800c8dc:	0800c90d 	.word	0x0800c90d
 800c8e0:	0800c94d 	.word	0x0800c94d
 800c8e4:	0800cb23 	.word	0x0800cb23
 800c8e8:	0800cb23 	.word	0x0800cb23
 800c8ec:	0800cac3 	.word	0x0800cac3
 800c8f0:	0800caef 	.word	0x0800caef
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	687a      	ldr	r2, [r7, #4]
 800c8fe:	7c12      	ldrb	r2, [r2, #16]
 800c900:	f107 0108 	add.w	r1, r7, #8
 800c904:	4610      	mov	r0, r2
 800c906:	4798      	blx	r3
 800c908:	60f8      	str	r0, [r7, #12]
      break;
 800c90a:	e112      	b.n	800cb32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	7c1b      	ldrb	r3, [r3, #16]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d10d      	bne.n	800c930 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c91a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c91c:	f107 0208 	add.w	r2, r7, #8
 800c920:	4610      	mov	r0, r2
 800c922:	4798      	blx	r3
 800c924:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	3301      	adds	r3, #1
 800c92a:	2202      	movs	r2, #2
 800c92c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c92e:	e100      	b.n	800cb32 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c938:	f107 0208 	add.w	r2, r7, #8
 800c93c:	4610      	mov	r0, r2
 800c93e:	4798      	blx	r3
 800c940:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	3301      	adds	r3, #1
 800c946:	2202      	movs	r2, #2
 800c948:	701a      	strb	r2, [r3, #0]
      break;
 800c94a:	e0f2      	b.n	800cb32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	885b      	ldrh	r3, [r3, #2]
 800c950:	b2db      	uxtb	r3, r3
 800c952:	2b05      	cmp	r3, #5
 800c954:	f200 80ac 	bhi.w	800cab0 <USBD_GetDescriptor+0x204>
 800c958:	a201      	add	r2, pc, #4	@ (adr r2, 800c960 <USBD_GetDescriptor+0xb4>)
 800c95a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c95e:	bf00      	nop
 800c960:	0800c979 	.word	0x0800c979
 800c964:	0800c9ad 	.word	0x0800c9ad
 800c968:	0800c9e1 	.word	0x0800c9e1
 800c96c:	0800ca15 	.word	0x0800ca15
 800c970:	0800ca49 	.word	0x0800ca49
 800c974:	0800ca7d 	.word	0x0800ca7d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c97e:	685b      	ldr	r3, [r3, #4]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d00b      	beq.n	800c99c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	687a      	ldr	r2, [r7, #4]
 800c98e:	7c12      	ldrb	r2, [r2, #16]
 800c990:	f107 0108 	add.w	r1, r7, #8
 800c994:	4610      	mov	r0, r2
 800c996:	4798      	blx	r3
 800c998:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c99a:	e091      	b.n	800cac0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c99c:	6839      	ldr	r1, [r7, #0]
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f000 facb 	bl	800cf3a <USBD_CtlError>
            err++;
 800c9a4:	7afb      	ldrb	r3, [r7, #11]
 800c9a6:	3301      	adds	r3, #1
 800c9a8:	72fb      	strb	r3, [r7, #11]
          break;
 800c9aa:	e089      	b.n	800cac0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9b2:	689b      	ldr	r3, [r3, #8]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d00b      	beq.n	800c9d0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9be:	689b      	ldr	r3, [r3, #8]
 800c9c0:	687a      	ldr	r2, [r7, #4]
 800c9c2:	7c12      	ldrb	r2, [r2, #16]
 800c9c4:	f107 0108 	add.w	r1, r7, #8
 800c9c8:	4610      	mov	r0, r2
 800c9ca:	4798      	blx	r3
 800c9cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c9ce:	e077      	b.n	800cac0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c9d0:	6839      	ldr	r1, [r7, #0]
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f000 fab1 	bl	800cf3a <USBD_CtlError>
            err++;
 800c9d8:	7afb      	ldrb	r3, [r7, #11]
 800c9da:	3301      	adds	r3, #1
 800c9dc:	72fb      	strb	r3, [r7, #11]
          break;
 800c9de:	e06f      	b.n	800cac0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9e6:	68db      	ldr	r3, [r3, #12]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d00b      	beq.n	800ca04 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9f2:	68db      	ldr	r3, [r3, #12]
 800c9f4:	687a      	ldr	r2, [r7, #4]
 800c9f6:	7c12      	ldrb	r2, [r2, #16]
 800c9f8:	f107 0108 	add.w	r1, r7, #8
 800c9fc:	4610      	mov	r0, r2
 800c9fe:	4798      	blx	r3
 800ca00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca02:	e05d      	b.n	800cac0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ca04:	6839      	ldr	r1, [r7, #0]
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f000 fa97 	bl	800cf3a <USBD_CtlError>
            err++;
 800ca0c:	7afb      	ldrb	r3, [r7, #11]
 800ca0e:	3301      	adds	r3, #1
 800ca10:	72fb      	strb	r3, [r7, #11]
          break;
 800ca12:	e055      	b.n	800cac0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca1a:	691b      	ldr	r3, [r3, #16]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d00b      	beq.n	800ca38 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca26:	691b      	ldr	r3, [r3, #16]
 800ca28:	687a      	ldr	r2, [r7, #4]
 800ca2a:	7c12      	ldrb	r2, [r2, #16]
 800ca2c:	f107 0108 	add.w	r1, r7, #8
 800ca30:	4610      	mov	r0, r2
 800ca32:	4798      	blx	r3
 800ca34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca36:	e043      	b.n	800cac0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ca38:	6839      	ldr	r1, [r7, #0]
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f000 fa7d 	bl	800cf3a <USBD_CtlError>
            err++;
 800ca40:	7afb      	ldrb	r3, [r7, #11]
 800ca42:	3301      	adds	r3, #1
 800ca44:	72fb      	strb	r3, [r7, #11]
          break;
 800ca46:	e03b      	b.n	800cac0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca4e:	695b      	ldr	r3, [r3, #20]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d00b      	beq.n	800ca6c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca5a:	695b      	ldr	r3, [r3, #20]
 800ca5c:	687a      	ldr	r2, [r7, #4]
 800ca5e:	7c12      	ldrb	r2, [r2, #16]
 800ca60:	f107 0108 	add.w	r1, r7, #8
 800ca64:	4610      	mov	r0, r2
 800ca66:	4798      	blx	r3
 800ca68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca6a:	e029      	b.n	800cac0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ca6c:	6839      	ldr	r1, [r7, #0]
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f000 fa63 	bl	800cf3a <USBD_CtlError>
            err++;
 800ca74:	7afb      	ldrb	r3, [r7, #11]
 800ca76:	3301      	adds	r3, #1
 800ca78:	72fb      	strb	r3, [r7, #11]
          break;
 800ca7a:	e021      	b.n	800cac0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca82:	699b      	ldr	r3, [r3, #24]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d00b      	beq.n	800caa0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca8e:	699b      	ldr	r3, [r3, #24]
 800ca90:	687a      	ldr	r2, [r7, #4]
 800ca92:	7c12      	ldrb	r2, [r2, #16]
 800ca94:	f107 0108 	add.w	r1, r7, #8
 800ca98:	4610      	mov	r0, r2
 800ca9a:	4798      	blx	r3
 800ca9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca9e:	e00f      	b.n	800cac0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800caa0:	6839      	ldr	r1, [r7, #0]
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f000 fa49 	bl	800cf3a <USBD_CtlError>
            err++;
 800caa8:	7afb      	ldrb	r3, [r7, #11]
 800caaa:	3301      	adds	r3, #1
 800caac:	72fb      	strb	r3, [r7, #11]
          break;
 800caae:	e007      	b.n	800cac0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cab0:	6839      	ldr	r1, [r7, #0]
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f000 fa41 	bl	800cf3a <USBD_CtlError>
          err++;
 800cab8:	7afb      	ldrb	r3, [r7, #11]
 800caba:	3301      	adds	r3, #1
 800cabc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800cabe:	bf00      	nop
      }
      break;
 800cac0:	e037      	b.n	800cb32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	7c1b      	ldrb	r3, [r3, #16]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d109      	bne.n	800cade <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cad2:	f107 0208 	add.w	r2, r7, #8
 800cad6:	4610      	mov	r0, r2
 800cad8:	4798      	blx	r3
 800cada:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cadc:	e029      	b.n	800cb32 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cade:	6839      	ldr	r1, [r7, #0]
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f000 fa2a 	bl	800cf3a <USBD_CtlError>
        err++;
 800cae6:	7afb      	ldrb	r3, [r7, #11]
 800cae8:	3301      	adds	r3, #1
 800caea:	72fb      	strb	r3, [r7, #11]
      break;
 800caec:	e021      	b.n	800cb32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	7c1b      	ldrb	r3, [r3, #16]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d10d      	bne.n	800cb12 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cafc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cafe:	f107 0208 	add.w	r2, r7, #8
 800cb02:	4610      	mov	r0, r2
 800cb04:	4798      	blx	r3
 800cb06:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	3301      	adds	r3, #1
 800cb0c:	2207      	movs	r2, #7
 800cb0e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cb10:	e00f      	b.n	800cb32 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cb12:	6839      	ldr	r1, [r7, #0]
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f000 fa10 	bl	800cf3a <USBD_CtlError>
        err++;
 800cb1a:	7afb      	ldrb	r3, [r7, #11]
 800cb1c:	3301      	adds	r3, #1
 800cb1e:	72fb      	strb	r3, [r7, #11]
      break;
 800cb20:	e007      	b.n	800cb32 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800cb22:	6839      	ldr	r1, [r7, #0]
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f000 fa08 	bl	800cf3a <USBD_CtlError>
      err++;
 800cb2a:	7afb      	ldrb	r3, [r7, #11]
 800cb2c:	3301      	adds	r3, #1
 800cb2e:	72fb      	strb	r3, [r7, #11]
      break;
 800cb30:	bf00      	nop
  }

  if (err != 0U)
 800cb32:	7afb      	ldrb	r3, [r7, #11]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d11e      	bne.n	800cb76 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	88db      	ldrh	r3, [r3, #6]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d016      	beq.n	800cb6e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800cb40:	893b      	ldrh	r3, [r7, #8]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d00e      	beq.n	800cb64 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	88da      	ldrh	r2, [r3, #6]
 800cb4a:	893b      	ldrh	r3, [r7, #8]
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	bf28      	it	cs
 800cb50:	4613      	movcs	r3, r2
 800cb52:	b29b      	uxth	r3, r3
 800cb54:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cb56:	893b      	ldrh	r3, [r7, #8]
 800cb58:	461a      	mov	r2, r3
 800cb5a:	68f9      	ldr	r1, [r7, #12]
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f000 fa69 	bl	800d034 <USBD_CtlSendData>
 800cb62:	e009      	b.n	800cb78 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cb64:	6839      	ldr	r1, [r7, #0]
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f000 f9e7 	bl	800cf3a <USBD_CtlError>
 800cb6c:	e004      	b.n	800cb78 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f000 fac1 	bl	800d0f6 <USBD_CtlSendStatus>
 800cb74:	e000      	b.n	800cb78 <USBD_GetDescriptor+0x2cc>
    return;
 800cb76:	bf00      	nop
  }
}
 800cb78:	3710      	adds	r7, #16
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
 800cb7e:	bf00      	nop

0800cb80 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b084      	sub	sp, #16
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	889b      	ldrh	r3, [r3, #4]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d131      	bne.n	800cbf6 <USBD_SetAddress+0x76>
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	88db      	ldrh	r3, [r3, #6]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d12d      	bne.n	800cbf6 <USBD_SetAddress+0x76>
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	885b      	ldrh	r3, [r3, #2]
 800cb9e:	2b7f      	cmp	r3, #127	@ 0x7f
 800cba0:	d829      	bhi.n	800cbf6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	885b      	ldrh	r3, [r3, #2]
 800cba6:	b2db      	uxtb	r3, r3
 800cba8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbb4:	b2db      	uxtb	r3, r3
 800cbb6:	2b03      	cmp	r3, #3
 800cbb8:	d104      	bne.n	800cbc4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cbba:	6839      	ldr	r1, [r7, #0]
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f000 f9bc 	bl	800cf3a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbc2:	e01d      	b.n	800cc00 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	7bfa      	ldrb	r2, [r7, #15]
 800cbc8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cbcc:	7bfb      	ldrb	r3, [r7, #15]
 800cbce:	4619      	mov	r1, r3
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f000 ff7d 	bl	800dad0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f000 fa8d 	bl	800d0f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cbdc:	7bfb      	ldrb	r3, [r7, #15]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d004      	beq.n	800cbec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2202      	movs	r2, #2
 800cbe6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbea:	e009      	b.n	800cc00 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2201      	movs	r2, #1
 800cbf0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbf4:	e004      	b.n	800cc00 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cbf6:	6839      	ldr	r1, [r7, #0]
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f000 f99e 	bl	800cf3a <USBD_CtlError>
  }
}
 800cbfe:	bf00      	nop
 800cc00:	bf00      	nop
 800cc02:	3710      	adds	r7, #16
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}

0800cc08 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b084      	sub	sp, #16
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
 800cc10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc12:	2300      	movs	r3, #0
 800cc14:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	885b      	ldrh	r3, [r3, #2]
 800cc1a:	b2da      	uxtb	r2, r3
 800cc1c:	4b4e      	ldr	r3, [pc, #312]	@ (800cd58 <USBD_SetConfig+0x150>)
 800cc1e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cc20:	4b4d      	ldr	r3, [pc, #308]	@ (800cd58 <USBD_SetConfig+0x150>)
 800cc22:	781b      	ldrb	r3, [r3, #0]
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	d905      	bls.n	800cc34 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cc28:	6839      	ldr	r1, [r7, #0]
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f000 f985 	bl	800cf3a <USBD_CtlError>
    return USBD_FAIL;
 800cc30:	2303      	movs	r3, #3
 800cc32:	e08c      	b.n	800cd4e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc3a:	b2db      	uxtb	r3, r3
 800cc3c:	2b02      	cmp	r3, #2
 800cc3e:	d002      	beq.n	800cc46 <USBD_SetConfig+0x3e>
 800cc40:	2b03      	cmp	r3, #3
 800cc42:	d029      	beq.n	800cc98 <USBD_SetConfig+0x90>
 800cc44:	e075      	b.n	800cd32 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cc46:	4b44      	ldr	r3, [pc, #272]	@ (800cd58 <USBD_SetConfig+0x150>)
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d020      	beq.n	800cc90 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800cc4e:	4b42      	ldr	r3, [pc, #264]	@ (800cd58 <USBD_SetConfig+0x150>)
 800cc50:	781b      	ldrb	r3, [r3, #0]
 800cc52:	461a      	mov	r2, r3
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cc58:	4b3f      	ldr	r3, [pc, #252]	@ (800cd58 <USBD_SetConfig+0x150>)
 800cc5a:	781b      	ldrb	r3, [r3, #0]
 800cc5c:	4619      	mov	r1, r3
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f7fe ffcd 	bl	800bbfe <USBD_SetClassConfig>
 800cc64:	4603      	mov	r3, r0
 800cc66:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cc68:	7bfb      	ldrb	r3, [r7, #15]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d008      	beq.n	800cc80 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cc6e:	6839      	ldr	r1, [r7, #0]
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f000 f962 	bl	800cf3a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2202      	movs	r2, #2
 800cc7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cc7e:	e065      	b.n	800cd4c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f000 fa38 	bl	800d0f6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2203      	movs	r2, #3
 800cc8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cc8e:	e05d      	b.n	800cd4c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f000 fa30 	bl	800d0f6 <USBD_CtlSendStatus>
      break;
 800cc96:	e059      	b.n	800cd4c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cc98:	4b2f      	ldr	r3, [pc, #188]	@ (800cd58 <USBD_SetConfig+0x150>)
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d112      	bne.n	800ccc6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2202      	movs	r2, #2
 800cca4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800cca8:	4b2b      	ldr	r3, [pc, #172]	@ (800cd58 <USBD_SetConfig+0x150>)
 800ccaa:	781b      	ldrb	r3, [r3, #0]
 800ccac:	461a      	mov	r2, r3
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ccb2:	4b29      	ldr	r3, [pc, #164]	@ (800cd58 <USBD_SetConfig+0x150>)
 800ccb4:	781b      	ldrb	r3, [r3, #0]
 800ccb6:	4619      	mov	r1, r3
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f7fe ffbc 	bl	800bc36 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f000 fa19 	bl	800d0f6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ccc4:	e042      	b.n	800cd4c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ccc6:	4b24      	ldr	r3, [pc, #144]	@ (800cd58 <USBD_SetConfig+0x150>)
 800ccc8:	781b      	ldrb	r3, [r3, #0]
 800ccca:	461a      	mov	r2, r3
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	685b      	ldr	r3, [r3, #4]
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d02a      	beq.n	800cd2a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	685b      	ldr	r3, [r3, #4]
 800ccd8:	b2db      	uxtb	r3, r3
 800ccda:	4619      	mov	r1, r3
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f7fe ffaa 	bl	800bc36 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cce2:	4b1d      	ldr	r3, [pc, #116]	@ (800cd58 <USBD_SetConfig+0x150>)
 800cce4:	781b      	ldrb	r3, [r3, #0]
 800cce6:	461a      	mov	r2, r3
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ccec:	4b1a      	ldr	r3, [pc, #104]	@ (800cd58 <USBD_SetConfig+0x150>)
 800ccee:	781b      	ldrb	r3, [r3, #0]
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f7fe ff83 	bl	800bbfe <USBD_SetClassConfig>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ccfc:	7bfb      	ldrb	r3, [r7, #15]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d00f      	beq.n	800cd22 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cd02:	6839      	ldr	r1, [r7, #0]
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f000 f918 	bl	800cf3a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	685b      	ldr	r3, [r3, #4]
 800cd0e:	b2db      	uxtb	r3, r3
 800cd10:	4619      	mov	r1, r3
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f7fe ff8f 	bl	800bc36 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2202      	movs	r2, #2
 800cd1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cd20:	e014      	b.n	800cd4c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f000 f9e7 	bl	800d0f6 <USBD_CtlSendStatus>
      break;
 800cd28:	e010      	b.n	800cd4c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f000 f9e3 	bl	800d0f6 <USBD_CtlSendStatus>
      break;
 800cd30:	e00c      	b.n	800cd4c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cd32:	6839      	ldr	r1, [r7, #0]
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f000 f900 	bl	800cf3a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cd3a:	4b07      	ldr	r3, [pc, #28]	@ (800cd58 <USBD_SetConfig+0x150>)
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	4619      	mov	r1, r3
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f7fe ff78 	bl	800bc36 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cd46:	2303      	movs	r3, #3
 800cd48:	73fb      	strb	r3, [r7, #15]
      break;
 800cd4a:	bf00      	nop
  }

  return ret;
 800cd4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3710      	adds	r7, #16
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}
 800cd56:	bf00      	nop
 800cd58:	200008f4 	.word	0x200008f4

0800cd5c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b082      	sub	sp, #8
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	88db      	ldrh	r3, [r3, #6]
 800cd6a:	2b01      	cmp	r3, #1
 800cd6c:	d004      	beq.n	800cd78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cd6e:	6839      	ldr	r1, [r7, #0]
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f000 f8e2 	bl	800cf3a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cd76:	e023      	b.n	800cdc0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd7e:	b2db      	uxtb	r3, r3
 800cd80:	2b02      	cmp	r3, #2
 800cd82:	dc02      	bgt.n	800cd8a <USBD_GetConfig+0x2e>
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	dc03      	bgt.n	800cd90 <USBD_GetConfig+0x34>
 800cd88:	e015      	b.n	800cdb6 <USBD_GetConfig+0x5a>
 800cd8a:	2b03      	cmp	r3, #3
 800cd8c:	d00b      	beq.n	800cda6 <USBD_GetConfig+0x4a>
 800cd8e:	e012      	b.n	800cdb6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2200      	movs	r2, #0
 800cd94:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	3308      	adds	r3, #8
 800cd9a:	2201      	movs	r2, #1
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f000 f948 	bl	800d034 <USBD_CtlSendData>
        break;
 800cda4:	e00c      	b.n	800cdc0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	3304      	adds	r3, #4
 800cdaa:	2201      	movs	r2, #1
 800cdac:	4619      	mov	r1, r3
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f000 f940 	bl	800d034 <USBD_CtlSendData>
        break;
 800cdb4:	e004      	b.n	800cdc0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cdb6:	6839      	ldr	r1, [r7, #0]
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f000 f8be 	bl	800cf3a <USBD_CtlError>
        break;
 800cdbe:	bf00      	nop
}
 800cdc0:	bf00      	nop
 800cdc2:	3708      	adds	r7, #8
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}

0800cdc8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b082      	sub	sp, #8
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cdd8:	b2db      	uxtb	r3, r3
 800cdda:	3b01      	subs	r3, #1
 800cddc:	2b02      	cmp	r3, #2
 800cdde:	d81e      	bhi.n	800ce1e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	88db      	ldrh	r3, [r3, #6]
 800cde4:	2b02      	cmp	r3, #2
 800cde6:	d004      	beq.n	800cdf2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cde8:	6839      	ldr	r1, [r7, #0]
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f000 f8a5 	bl	800cf3a <USBD_CtlError>
        break;
 800cdf0:	e01a      	b.n	800ce28 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2201      	movs	r2, #1
 800cdf6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d005      	beq.n	800ce0e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	68db      	ldr	r3, [r3, #12]
 800ce06:	f043 0202 	orr.w	r2, r3, #2
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	330c      	adds	r3, #12
 800ce12:	2202      	movs	r2, #2
 800ce14:	4619      	mov	r1, r3
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f000 f90c 	bl	800d034 <USBD_CtlSendData>
      break;
 800ce1c:	e004      	b.n	800ce28 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ce1e:	6839      	ldr	r1, [r7, #0]
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f000 f88a 	bl	800cf3a <USBD_CtlError>
      break;
 800ce26:	bf00      	nop
  }
}
 800ce28:	bf00      	nop
 800ce2a:	3708      	adds	r7, #8
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b082      	sub	sp, #8
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	885b      	ldrh	r3, [r3, #2]
 800ce3e:	2b01      	cmp	r3, #1
 800ce40:	d107      	bne.n	800ce52 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2201      	movs	r2, #1
 800ce46:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f000 f953 	bl	800d0f6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ce50:	e013      	b.n	800ce7a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	885b      	ldrh	r3, [r3, #2]
 800ce56:	2b02      	cmp	r3, #2
 800ce58:	d10b      	bne.n	800ce72 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	889b      	ldrh	r3, [r3, #4]
 800ce5e:	0a1b      	lsrs	r3, r3, #8
 800ce60:	b29b      	uxth	r3, r3
 800ce62:	b2da      	uxtb	r2, r3
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f000 f943 	bl	800d0f6 <USBD_CtlSendStatus>
}
 800ce70:	e003      	b.n	800ce7a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ce72:	6839      	ldr	r1, [r7, #0]
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f000 f860 	bl	800cf3a <USBD_CtlError>
}
 800ce7a:	bf00      	nop
 800ce7c:	3708      	adds	r7, #8
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}

0800ce82 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce82:	b580      	push	{r7, lr}
 800ce84:	b082      	sub	sp, #8
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	6078      	str	r0, [r7, #4]
 800ce8a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce92:	b2db      	uxtb	r3, r3
 800ce94:	3b01      	subs	r3, #1
 800ce96:	2b02      	cmp	r3, #2
 800ce98:	d80b      	bhi.n	800ceb2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	885b      	ldrh	r3, [r3, #2]
 800ce9e:	2b01      	cmp	r3, #1
 800cea0:	d10c      	bne.n	800cebc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2200      	movs	r2, #0
 800cea6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f000 f923 	bl	800d0f6 <USBD_CtlSendStatus>
      }
      break;
 800ceb0:	e004      	b.n	800cebc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ceb2:	6839      	ldr	r1, [r7, #0]
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f000 f840 	bl	800cf3a <USBD_CtlError>
      break;
 800ceba:	e000      	b.n	800cebe <USBD_ClrFeature+0x3c>
      break;
 800cebc:	bf00      	nop
  }
}
 800cebe:	bf00      	nop
 800cec0:	3708      	adds	r7, #8
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}

0800cec6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cec6:	b580      	push	{r7, lr}
 800cec8:	b084      	sub	sp, #16
 800ceca:	af00      	add	r7, sp, #0
 800cecc:	6078      	str	r0, [r7, #4]
 800cece:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	781a      	ldrb	r2, [r3, #0]
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	3301      	adds	r3, #1
 800cee0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	781a      	ldrb	r2, [r3, #0]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	3301      	adds	r3, #1
 800ceee:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cef0:	68f8      	ldr	r0, [r7, #12]
 800cef2:	f7ff fa3d 	bl	800c370 <SWAPBYTE>
 800cef6:	4603      	mov	r3, r0
 800cef8:	461a      	mov	r2, r3
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	3301      	adds	r3, #1
 800cf02:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	3301      	adds	r3, #1
 800cf08:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cf0a:	68f8      	ldr	r0, [r7, #12]
 800cf0c:	f7ff fa30 	bl	800c370 <SWAPBYTE>
 800cf10:	4603      	mov	r3, r0
 800cf12:	461a      	mov	r2, r3
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	3301      	adds	r3, #1
 800cf22:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cf24:	68f8      	ldr	r0, [r7, #12]
 800cf26:	f7ff fa23 	bl	800c370 <SWAPBYTE>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	461a      	mov	r2, r3
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	80da      	strh	r2, [r3, #6]
}
 800cf32:	bf00      	nop
 800cf34:	3710      	adds	r7, #16
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}

0800cf3a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf3a:	b580      	push	{r7, lr}
 800cf3c:	b082      	sub	sp, #8
 800cf3e:	af00      	add	r7, sp, #0
 800cf40:	6078      	str	r0, [r7, #4]
 800cf42:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cf44:	2180      	movs	r1, #128	@ 0x80
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f000 fd58 	bl	800d9fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cf4c:	2100      	movs	r1, #0
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f000 fd54 	bl	800d9fc <USBD_LL_StallEP>
}
 800cf54:	bf00      	nop
 800cf56:	3708      	adds	r7, #8
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}

0800cf5c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b086      	sub	sp, #24
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	60f8      	str	r0, [r7, #12]
 800cf64:	60b9      	str	r1, [r7, #8]
 800cf66:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d042      	beq.n	800cff8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800cf76:	6938      	ldr	r0, [r7, #16]
 800cf78:	f000 f842 	bl	800d000 <USBD_GetLen>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	3301      	adds	r3, #1
 800cf80:	005b      	lsls	r3, r3, #1
 800cf82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf86:	d808      	bhi.n	800cf9a <USBD_GetString+0x3e>
 800cf88:	6938      	ldr	r0, [r7, #16]
 800cf8a:	f000 f839 	bl	800d000 <USBD_GetLen>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	3301      	adds	r3, #1
 800cf92:	b29b      	uxth	r3, r3
 800cf94:	005b      	lsls	r3, r3, #1
 800cf96:	b29a      	uxth	r2, r3
 800cf98:	e001      	b.n	800cf9e <USBD_GetString+0x42>
 800cf9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cfa2:	7dfb      	ldrb	r3, [r7, #23]
 800cfa4:	68ba      	ldr	r2, [r7, #8]
 800cfa6:	4413      	add	r3, r2
 800cfa8:	687a      	ldr	r2, [r7, #4]
 800cfaa:	7812      	ldrb	r2, [r2, #0]
 800cfac:	701a      	strb	r2, [r3, #0]
  idx++;
 800cfae:	7dfb      	ldrb	r3, [r7, #23]
 800cfb0:	3301      	adds	r3, #1
 800cfb2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cfb4:	7dfb      	ldrb	r3, [r7, #23]
 800cfb6:	68ba      	ldr	r2, [r7, #8]
 800cfb8:	4413      	add	r3, r2
 800cfba:	2203      	movs	r2, #3
 800cfbc:	701a      	strb	r2, [r3, #0]
  idx++;
 800cfbe:	7dfb      	ldrb	r3, [r7, #23]
 800cfc0:	3301      	adds	r3, #1
 800cfc2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cfc4:	e013      	b.n	800cfee <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800cfc6:	7dfb      	ldrb	r3, [r7, #23]
 800cfc8:	68ba      	ldr	r2, [r7, #8]
 800cfca:	4413      	add	r3, r2
 800cfcc:	693a      	ldr	r2, [r7, #16]
 800cfce:	7812      	ldrb	r2, [r2, #0]
 800cfd0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cfd2:	693b      	ldr	r3, [r7, #16]
 800cfd4:	3301      	adds	r3, #1
 800cfd6:	613b      	str	r3, [r7, #16]
    idx++;
 800cfd8:	7dfb      	ldrb	r3, [r7, #23]
 800cfda:	3301      	adds	r3, #1
 800cfdc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cfde:	7dfb      	ldrb	r3, [r7, #23]
 800cfe0:	68ba      	ldr	r2, [r7, #8]
 800cfe2:	4413      	add	r3, r2
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	701a      	strb	r2, [r3, #0]
    idx++;
 800cfe8:	7dfb      	ldrb	r3, [r7, #23]
 800cfea:	3301      	adds	r3, #1
 800cfec:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	781b      	ldrb	r3, [r3, #0]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d1e7      	bne.n	800cfc6 <USBD_GetString+0x6a>
 800cff6:	e000      	b.n	800cffa <USBD_GetString+0x9e>
    return;
 800cff8:	bf00      	nop
  }
}
 800cffa:	3718      	adds	r7, #24
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}

0800d000 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d000:	b480      	push	{r7}
 800d002:	b085      	sub	sp, #20
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d008:	2300      	movs	r3, #0
 800d00a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d010:	e005      	b.n	800d01e <USBD_GetLen+0x1e>
  {
    len++;
 800d012:	7bfb      	ldrb	r3, [r7, #15]
 800d014:	3301      	adds	r3, #1
 800d016:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	3301      	adds	r3, #1
 800d01c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	781b      	ldrb	r3, [r3, #0]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d1f5      	bne.n	800d012 <USBD_GetLen+0x12>
  }

  return len;
 800d026:	7bfb      	ldrb	r3, [r7, #15]
}
 800d028:	4618      	mov	r0, r3
 800d02a:	3714      	adds	r7, #20
 800d02c:	46bd      	mov	sp, r7
 800d02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d032:	4770      	bx	lr

0800d034 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b084      	sub	sp, #16
 800d038:	af00      	add	r7, sp, #0
 800d03a:	60f8      	str	r0, [r7, #12]
 800d03c:	60b9      	str	r1, [r7, #8]
 800d03e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	2202      	movs	r2, #2
 800d044:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	687a      	ldr	r2, [r7, #4]
 800d04c:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	68ba      	ldr	r2, [r7, #8]
 800d052:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	687a      	ldr	r2, [r7, #4]
 800d058:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	68ba      	ldr	r2, [r7, #8]
 800d05e:	2100      	movs	r1, #0
 800d060:	68f8      	ldr	r0, [r7, #12]
 800d062:	f000 fd54 	bl	800db0e <USBD_LL_Transmit>

  return USBD_OK;
 800d066:	2300      	movs	r3, #0
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3710      	adds	r7, #16
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b084      	sub	sp, #16
 800d074:	af00      	add	r7, sp, #0
 800d076:	60f8      	str	r0, [r7, #12]
 800d078:	60b9      	str	r1, [r7, #8]
 800d07a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	68ba      	ldr	r2, [r7, #8]
 800d080:	2100      	movs	r1, #0
 800d082:	68f8      	ldr	r0, [r7, #12]
 800d084:	f000 fd43 	bl	800db0e <USBD_LL_Transmit>

  return USBD_OK;
 800d088:	2300      	movs	r3, #0
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3710      	adds	r7, #16
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}

0800d092 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d092:	b580      	push	{r7, lr}
 800d094:	b084      	sub	sp, #16
 800d096:	af00      	add	r7, sp, #0
 800d098:	60f8      	str	r0, [r7, #12]
 800d09a:	60b9      	str	r1, [r7, #8]
 800d09c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	2203      	movs	r2, #3
 800d0a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	687a      	ldr	r2, [r7, #4]
 800d0aa:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	68ba      	ldr	r2, [r7, #8]
 800d0b2:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	687a      	ldr	r2, [r7, #4]
 800d0ba:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	68ba      	ldr	r2, [r7, #8]
 800d0c2:	2100      	movs	r1, #0
 800d0c4:	68f8      	ldr	r0, [r7, #12]
 800d0c6:	f000 fd43 	bl	800db50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d0ca:	2300      	movs	r3, #0
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3710      	adds	r7, #16
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}

0800d0d4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b084      	sub	sp, #16
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	60f8      	str	r0, [r7, #12]
 800d0dc:	60b9      	str	r1, [r7, #8]
 800d0de:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	68ba      	ldr	r2, [r7, #8]
 800d0e4:	2100      	movs	r1, #0
 800d0e6:	68f8      	ldr	r0, [r7, #12]
 800d0e8:	f000 fd32 	bl	800db50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d0ec:	2300      	movs	r3, #0
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	3710      	adds	r7, #16
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}

0800d0f6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d0f6:	b580      	push	{r7, lr}
 800d0f8:	b082      	sub	sp, #8
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2204      	movs	r2, #4
 800d102:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d106:	2300      	movs	r3, #0
 800d108:	2200      	movs	r2, #0
 800d10a:	2100      	movs	r1, #0
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f000 fcfe 	bl	800db0e <USBD_LL_Transmit>

  return USBD_OK;
 800d112:	2300      	movs	r3, #0
}
 800d114:	4618      	mov	r0, r3
 800d116:	3708      	adds	r7, #8
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}

0800d11c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b082      	sub	sp, #8
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2205      	movs	r2, #5
 800d128:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d12c:	2300      	movs	r3, #0
 800d12e:	2200      	movs	r2, #0
 800d130:	2100      	movs	r1, #0
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f000 fd0c 	bl	800db50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d138:	2300      	movs	r3, #0
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3708      	adds	r7, #8
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}
	...

0800d144 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d148:	2200      	movs	r2, #0
 800d14a:	4912      	ldr	r1, [pc, #72]	@ (800d194 <MX_USB_DEVICE_Init+0x50>)
 800d14c:	4812      	ldr	r0, [pc, #72]	@ (800d198 <MX_USB_DEVICE_Init+0x54>)
 800d14e:	f7fe fcd9 	bl	800bb04 <USBD_Init>
 800d152:	4603      	mov	r3, r0
 800d154:	2b00      	cmp	r3, #0
 800d156:	d001      	beq.n	800d15c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d158:	f7f4 f9be 	bl	80014d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d15c:	490f      	ldr	r1, [pc, #60]	@ (800d19c <MX_USB_DEVICE_Init+0x58>)
 800d15e:	480e      	ldr	r0, [pc, #56]	@ (800d198 <MX_USB_DEVICE_Init+0x54>)
 800d160:	f7fe fd00 	bl	800bb64 <USBD_RegisterClass>
 800d164:	4603      	mov	r3, r0
 800d166:	2b00      	cmp	r3, #0
 800d168:	d001      	beq.n	800d16e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d16a:	f7f4 f9b5 	bl	80014d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d16e:	490c      	ldr	r1, [pc, #48]	@ (800d1a0 <MX_USB_DEVICE_Init+0x5c>)
 800d170:	4809      	ldr	r0, [pc, #36]	@ (800d198 <MX_USB_DEVICE_Init+0x54>)
 800d172:	f7fe fbf7 	bl	800b964 <USBD_CDC_RegisterInterface>
 800d176:	4603      	mov	r3, r0
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d001      	beq.n	800d180 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d17c:	f7f4 f9ac 	bl	80014d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d180:	4805      	ldr	r0, [pc, #20]	@ (800d198 <MX_USB_DEVICE_Init+0x54>)
 800d182:	f7fe fd25 	bl	800bbd0 <USBD_Start>
 800d186:	4603      	mov	r3, r0
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d001      	beq.n	800d190 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d18c:	f7f4 f9a4 	bl	80014d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d190:	bf00      	nop
 800d192:	bd80      	pop	{r7, pc}
 800d194:	200000b8 	.word	0x200000b8
 800d198:	200008f8 	.word	0x200008f8
 800d19c:	2000001c 	.word	0x2000001c
 800d1a0:	200000a4 	.word	0x200000a4

0800d1a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	4905      	ldr	r1, [pc, #20]	@ (800d1c0 <CDC_Init_FS+0x1c>)
 800d1ac:	4805      	ldr	r0, [pc, #20]	@ (800d1c4 <CDC_Init_FS+0x20>)
 800d1ae:	f7fe fbf3 	bl	800b998 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d1b2:	4905      	ldr	r1, [pc, #20]	@ (800d1c8 <CDC_Init_FS+0x24>)
 800d1b4:	4803      	ldr	r0, [pc, #12]	@ (800d1c4 <CDC_Init_FS+0x20>)
 800d1b6:	f7fe fc11 	bl	800b9dc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d1ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	bd80      	pop	{r7, pc}
 800d1c0:	20000dd4 	.word	0x20000dd4
 800d1c4:	200008f8 	.word	0x200008f8
 800d1c8:	20000bd4 	.word	0x20000bd4

0800d1cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d1d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1da:	4770      	bx	lr

0800d1dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d1dc:	b480      	push	{r7}
 800d1de:	b083      	sub	sp, #12
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	6039      	str	r1, [r7, #0]
 800d1e6:	71fb      	strb	r3, [r7, #7]
 800d1e8:	4613      	mov	r3, r2
 800d1ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d1ec:	79fb      	ldrb	r3, [r7, #7]
 800d1ee:	2b23      	cmp	r3, #35	@ 0x23
 800d1f0:	f200 8098 	bhi.w	800d324 <CDC_Control_FS+0x148>
 800d1f4:	a201      	add	r2, pc, #4	@ (adr r2, 800d1fc <CDC_Control_FS+0x20>)
 800d1f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1fa:	bf00      	nop
 800d1fc:	0800d325 	.word	0x0800d325
 800d200:	0800d325 	.word	0x0800d325
 800d204:	0800d325 	.word	0x0800d325
 800d208:	0800d325 	.word	0x0800d325
 800d20c:	0800d325 	.word	0x0800d325
 800d210:	0800d325 	.word	0x0800d325
 800d214:	0800d325 	.word	0x0800d325
 800d218:	0800d325 	.word	0x0800d325
 800d21c:	0800d325 	.word	0x0800d325
 800d220:	0800d325 	.word	0x0800d325
 800d224:	0800d325 	.word	0x0800d325
 800d228:	0800d325 	.word	0x0800d325
 800d22c:	0800d325 	.word	0x0800d325
 800d230:	0800d325 	.word	0x0800d325
 800d234:	0800d325 	.word	0x0800d325
 800d238:	0800d325 	.word	0x0800d325
 800d23c:	0800d325 	.word	0x0800d325
 800d240:	0800d325 	.word	0x0800d325
 800d244:	0800d325 	.word	0x0800d325
 800d248:	0800d325 	.word	0x0800d325
 800d24c:	0800d325 	.word	0x0800d325
 800d250:	0800d325 	.word	0x0800d325
 800d254:	0800d325 	.word	0x0800d325
 800d258:	0800d325 	.word	0x0800d325
 800d25c:	0800d325 	.word	0x0800d325
 800d260:	0800d325 	.word	0x0800d325
 800d264:	0800d325 	.word	0x0800d325
 800d268:	0800d325 	.word	0x0800d325
 800d26c:	0800d325 	.word	0x0800d325
 800d270:	0800d325 	.word	0x0800d325
 800d274:	0800d325 	.word	0x0800d325
 800d278:	0800d325 	.word	0x0800d325
 800d27c:	0800d28d 	.word	0x0800d28d
 800d280:	0800d2d1 	.word	0x0800d2d1
 800d284:	0800d325 	.word	0x0800d325
 800d288:	0800d325 	.word	0x0800d325
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
     	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2]<<16) | (pbuf[3]<<24));
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	781b      	ldrb	r3, [r3, #0]
 800d290:	461a      	mov	r2, r3
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	3301      	adds	r3, #1
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	021b      	lsls	r3, r3, #8
 800d29a:	431a      	orrs	r2, r3
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	3302      	adds	r3, #2
 800d2a0:	781b      	ldrb	r3, [r3, #0]
 800d2a2:	041b      	lsls	r3, r3, #16
 800d2a4:	431a      	orrs	r2, r3
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	3303      	adds	r3, #3
 800d2aa:	781b      	ldrb	r3, [r3, #0]
 800d2ac:	061b      	lsls	r3, r3, #24
 800d2ae:	4313      	orrs	r3, r2
 800d2b0:	461a      	mov	r2, r3
 800d2b2:	4b20      	ldr	r3, [pc, #128]	@ (800d334 <CDC_Control_FS+0x158>)
 800d2b4:	601a      	str	r2, [r3, #0]
     	LineCoding.format = pbuf[4];
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	791a      	ldrb	r2, [r3, #4]
 800d2ba:	4b1e      	ldr	r3, [pc, #120]	@ (800d334 <CDC_Control_FS+0x158>)
 800d2bc:	711a      	strb	r2, [r3, #4]
     	LineCoding.paritytype = pbuf[5];
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	795a      	ldrb	r2, [r3, #5]
 800d2c2:	4b1c      	ldr	r3, [pc, #112]	@ (800d334 <CDC_Control_FS+0x158>)
 800d2c4:	715a      	strb	r2, [r3, #5]
     	LineCoding.datatype = pbuf[6];
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	799a      	ldrb	r2, [r3, #6]
 800d2ca:	4b1a      	ldr	r3, [pc, #104]	@ (800d334 <CDC_Control_FS+0x158>)
 800d2cc:	719a      	strb	r2, [r3, #6]
     break;
 800d2ce:	e02a      	b.n	800d326 <CDC_Control_FS+0x14a>

     case CDC_GET_LINE_CODING:
     	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800d2d0:	4b18      	ldr	r3, [pc, #96]	@ (800d334 <CDC_Control_FS+0x158>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	b2da      	uxtb	r2, r3
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	701a      	strb	r2, [r3, #0]
     	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800d2da:	4b16      	ldr	r3, [pc, #88]	@ (800d334 <CDC_Control_FS+0x158>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	0a1a      	lsrs	r2, r3, #8
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	3301      	adds	r3, #1
 800d2e4:	b2d2      	uxtb	r2, r2
 800d2e6:	701a      	strb	r2, [r3, #0]
     	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800d2e8:	4b12      	ldr	r3, [pc, #72]	@ (800d334 <CDC_Control_FS+0x158>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	0c1a      	lsrs	r2, r3, #16
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	3302      	adds	r3, #2
 800d2f2:	b2d2      	uxtb	r2, r2
 800d2f4:	701a      	strb	r2, [r3, #0]
     	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800d2f6:	4b0f      	ldr	r3, [pc, #60]	@ (800d334 <CDC_Control_FS+0x158>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	0e1a      	lsrs	r2, r3, #24
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	3303      	adds	r3, #3
 800d300:	b2d2      	uxtb	r2, r2
 800d302:	701a      	strb	r2, [r3, #0]
     	pbuf[4] = LineCoding.format;
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	3304      	adds	r3, #4
 800d308:	4a0a      	ldr	r2, [pc, #40]	@ (800d334 <CDC_Control_FS+0x158>)
 800d30a:	7912      	ldrb	r2, [r2, #4]
 800d30c:	701a      	strb	r2, [r3, #0]
     	pbuf[5] = LineCoding.paritytype;
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	3305      	adds	r3, #5
 800d312:	4a08      	ldr	r2, [pc, #32]	@ (800d334 <CDC_Control_FS+0x158>)
 800d314:	7952      	ldrb	r2, [r2, #5]
 800d316:	701a      	strb	r2, [r3, #0]
     	pbuf[6] = LineCoding.datatype;
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	3306      	adds	r3, #6
 800d31c:	4a05      	ldr	r2, [pc, #20]	@ (800d334 <CDC_Control_FS+0x158>)
 800d31e:	7992      	ldrb	r2, [r2, #6]
 800d320:	701a      	strb	r2, [r3, #0]
     break;
 800d322:	e000      	b.n	800d326 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d324:	bf00      	nop
  }

  return (USBD_OK);
 800d326:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d328:	4618      	mov	r0, r3
 800d32a:	370c      	adds	r7, #12
 800d32c:	46bd      	mov	sp, r7
 800d32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d332:	4770      	bx	lr
 800d334:	2000009c 	.word	0x2000009c

0800d338 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b082      	sub	sp, #8
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
 800d340:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 if(aPtrFunRx != NULL)
 800d342:	4b0c      	ldr	r3, [pc, #48]	@ (800d374 <CDC_Receive_FS+0x3c>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d007      	beq.n	800d35a <CDC_Receive_FS+0x22>
			aPtrFunRx(Buf, *Len);
 800d34a:	4b0a      	ldr	r3, [pc, #40]	@ (800d374 <CDC_Receive_FS+0x3c>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	683a      	ldr	r2, [r7, #0]
 800d350:	6812      	ldr	r2, [r2, #0]
 800d352:	b292      	uxth	r2, r2
 800d354:	4611      	mov	r1, r2
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	4798      	blx	r3
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d35a:	6879      	ldr	r1, [r7, #4]
 800d35c:	4806      	ldr	r0, [pc, #24]	@ (800d378 <CDC_Receive_FS+0x40>)
 800d35e:	f7fe fb3d 	bl	800b9dc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d362:	4805      	ldr	r0, [pc, #20]	@ (800d378 <CDC_Receive_FS+0x40>)
 800d364:	f7fe fb98 	bl	800ba98 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d368:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	3708      	adds	r7, #8
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}
 800d372:	bf00      	nop
 800d374:	20000fd4 	.word	0x20000fd4
 800d378:	200008f8 	.word	0x200008f8

0800d37c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b084      	sub	sp, #16
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	460b      	mov	r3, r1
 800d386:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d388:	2300      	movs	r3, #0
 800d38a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d38c:	4b0d      	ldr	r3, [pc, #52]	@ (800d3c4 <CDC_Transmit_FS+0x48>)
 800d38e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d392:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d001      	beq.n	800d3a2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d39e:	2301      	movs	r3, #1
 800d3a0:	e00b      	b.n	800d3ba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d3a2:	887b      	ldrh	r3, [r7, #2]
 800d3a4:	461a      	mov	r2, r3
 800d3a6:	6879      	ldr	r1, [r7, #4]
 800d3a8:	4806      	ldr	r0, [pc, #24]	@ (800d3c4 <CDC_Transmit_FS+0x48>)
 800d3aa:	f7fe faf5 	bl	800b998 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d3ae:	4805      	ldr	r0, [pc, #20]	@ (800d3c4 <CDC_Transmit_FS+0x48>)
 800d3b0:	f7fe fb32 	bl	800ba18 <USBD_CDC_TransmitPacket>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d3b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	3710      	adds	r7, #16
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}
 800d3c2:	bf00      	nop
 800d3c4:	200008f8 	.word	0x200008f8

0800d3c8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d3c8:	b480      	push	{r7}
 800d3ca:	b087      	sub	sp, #28
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	60f8      	str	r0, [r7, #12]
 800d3d0:	60b9      	str	r1, [r7, #8]
 800d3d2:	4613      	mov	r3, r2
 800d3d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d3da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	371c      	adds	r7, #28
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e8:	4770      	bx	lr
	...

0800d3ec <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 800d3ec:	b480      	push	{r7}
 800d3ee:	b083      	sub	sp, #12
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 800d3f4:	4a04      	ldr	r2, [pc, #16]	@ (800d408 <CDC_AttachRxData+0x1c>)
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6013      	str	r3, [r2, #0]
}
 800d3fa:	bf00      	nop
 800d3fc:	370c      	adds	r7, #12
 800d3fe:	46bd      	mov	sp, r7
 800d400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d404:	4770      	bx	lr
 800d406:	bf00      	nop
 800d408:	20000fd4 	.word	0x20000fd4

0800d40c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b083      	sub	sp, #12
 800d410:	af00      	add	r7, sp, #0
 800d412:	4603      	mov	r3, r0
 800d414:	6039      	str	r1, [r7, #0]
 800d416:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	2212      	movs	r2, #18
 800d41c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d41e:	4b03      	ldr	r3, [pc, #12]	@ (800d42c <USBD_FS_DeviceDescriptor+0x20>)
}
 800d420:	4618      	mov	r0, r3
 800d422:	370c      	adds	r7, #12
 800d424:	46bd      	mov	sp, r7
 800d426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42a:	4770      	bx	lr
 800d42c:	200000d4 	.word	0x200000d4

0800d430 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d430:	b480      	push	{r7}
 800d432:	b083      	sub	sp, #12
 800d434:	af00      	add	r7, sp, #0
 800d436:	4603      	mov	r3, r0
 800d438:	6039      	str	r1, [r7, #0]
 800d43a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	2204      	movs	r2, #4
 800d440:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d442:	4b03      	ldr	r3, [pc, #12]	@ (800d450 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d444:	4618      	mov	r0, r3
 800d446:	370c      	adds	r7, #12
 800d448:	46bd      	mov	sp, r7
 800d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44e:	4770      	bx	lr
 800d450:	200000e8 	.word	0x200000e8

0800d454 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b082      	sub	sp, #8
 800d458:	af00      	add	r7, sp, #0
 800d45a:	4603      	mov	r3, r0
 800d45c:	6039      	str	r1, [r7, #0]
 800d45e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d460:	79fb      	ldrb	r3, [r7, #7]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d105      	bne.n	800d472 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d466:	683a      	ldr	r2, [r7, #0]
 800d468:	4907      	ldr	r1, [pc, #28]	@ (800d488 <USBD_FS_ProductStrDescriptor+0x34>)
 800d46a:	4808      	ldr	r0, [pc, #32]	@ (800d48c <USBD_FS_ProductStrDescriptor+0x38>)
 800d46c:	f7ff fd76 	bl	800cf5c <USBD_GetString>
 800d470:	e004      	b.n	800d47c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d472:	683a      	ldr	r2, [r7, #0]
 800d474:	4904      	ldr	r1, [pc, #16]	@ (800d488 <USBD_FS_ProductStrDescriptor+0x34>)
 800d476:	4805      	ldr	r0, [pc, #20]	@ (800d48c <USBD_FS_ProductStrDescriptor+0x38>)
 800d478:	f7ff fd70 	bl	800cf5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d47c:	4b02      	ldr	r3, [pc, #8]	@ (800d488 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d47e:	4618      	mov	r0, r3
 800d480:	3708      	adds	r7, #8
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}
 800d486:	bf00      	nop
 800d488:	20000fd8 	.word	0x20000fd8
 800d48c:	0800e5b8 	.word	0x0800e5b8

0800d490 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b082      	sub	sp, #8
 800d494:	af00      	add	r7, sp, #0
 800d496:	4603      	mov	r3, r0
 800d498:	6039      	str	r1, [r7, #0]
 800d49a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d49c:	683a      	ldr	r2, [r7, #0]
 800d49e:	4904      	ldr	r1, [pc, #16]	@ (800d4b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d4a0:	4804      	ldr	r0, [pc, #16]	@ (800d4b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d4a2:	f7ff fd5b 	bl	800cf5c <USBD_GetString>
  return USBD_StrDesc;
 800d4a6:	4b02      	ldr	r3, [pc, #8]	@ (800d4b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3708      	adds	r7, #8
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}
 800d4b0:	20000fd8 	.word	0x20000fd8
 800d4b4:	0800e5d0 	.word	0x0800e5d0

0800d4b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b082      	sub	sp, #8
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	4603      	mov	r3, r0
 800d4c0:	6039      	str	r1, [r7, #0]
 800d4c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	221a      	movs	r2, #26
 800d4c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d4ca:	f000 f843 	bl	800d554 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d4ce:	4b02      	ldr	r3, [pc, #8]	@ (800d4d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	3708      	adds	r7, #8
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}
 800d4d8:	200000ec 	.word	0x200000ec

0800d4dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b082      	sub	sp, #8
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	6039      	str	r1, [r7, #0]
 800d4e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d4e8:	79fb      	ldrb	r3, [r7, #7]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d105      	bne.n	800d4fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d4ee:	683a      	ldr	r2, [r7, #0]
 800d4f0:	4907      	ldr	r1, [pc, #28]	@ (800d510 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d4f2:	4808      	ldr	r0, [pc, #32]	@ (800d514 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d4f4:	f7ff fd32 	bl	800cf5c <USBD_GetString>
 800d4f8:	e004      	b.n	800d504 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d4fa:	683a      	ldr	r2, [r7, #0]
 800d4fc:	4904      	ldr	r1, [pc, #16]	@ (800d510 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d4fe:	4805      	ldr	r0, [pc, #20]	@ (800d514 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d500:	f7ff fd2c 	bl	800cf5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d504:	4b02      	ldr	r3, [pc, #8]	@ (800d510 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d506:	4618      	mov	r0, r3
 800d508:	3708      	adds	r7, #8
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}
 800d50e:	bf00      	nop
 800d510:	20000fd8 	.word	0x20000fd8
 800d514:	0800e5e4 	.word	0x0800e5e4

0800d518 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b082      	sub	sp, #8
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	4603      	mov	r3, r0
 800d520:	6039      	str	r1, [r7, #0]
 800d522:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d524:	79fb      	ldrb	r3, [r7, #7]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d105      	bne.n	800d536 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d52a:	683a      	ldr	r2, [r7, #0]
 800d52c:	4907      	ldr	r1, [pc, #28]	@ (800d54c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d52e:	4808      	ldr	r0, [pc, #32]	@ (800d550 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d530:	f7ff fd14 	bl	800cf5c <USBD_GetString>
 800d534:	e004      	b.n	800d540 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d536:	683a      	ldr	r2, [r7, #0]
 800d538:	4904      	ldr	r1, [pc, #16]	@ (800d54c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d53a:	4805      	ldr	r0, [pc, #20]	@ (800d550 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d53c:	f7ff fd0e 	bl	800cf5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d540:	4b02      	ldr	r3, [pc, #8]	@ (800d54c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d542:	4618      	mov	r0, r3
 800d544:	3708      	adds	r7, #8
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}
 800d54a:	bf00      	nop
 800d54c:	20000fd8 	.word	0x20000fd8
 800d550:	0800e5f0 	.word	0x0800e5f0

0800d554 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b084      	sub	sp, #16
 800d558:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d55a:	4b0f      	ldr	r3, [pc, #60]	@ (800d598 <Get_SerialNum+0x44>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d560:	4b0e      	ldr	r3, [pc, #56]	@ (800d59c <Get_SerialNum+0x48>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d566:	4b0e      	ldr	r3, [pc, #56]	@ (800d5a0 <Get_SerialNum+0x4c>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d56c:	68fa      	ldr	r2, [r7, #12]
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	4413      	add	r3, r2
 800d572:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d009      	beq.n	800d58e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d57a:	2208      	movs	r2, #8
 800d57c:	4909      	ldr	r1, [pc, #36]	@ (800d5a4 <Get_SerialNum+0x50>)
 800d57e:	68f8      	ldr	r0, [r7, #12]
 800d580:	f000 f814 	bl	800d5ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d584:	2204      	movs	r2, #4
 800d586:	4908      	ldr	r1, [pc, #32]	@ (800d5a8 <Get_SerialNum+0x54>)
 800d588:	68b8      	ldr	r0, [r7, #8]
 800d58a:	f000 f80f 	bl	800d5ac <IntToUnicode>
  }
}
 800d58e:	bf00      	nop
 800d590:	3710      	adds	r7, #16
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}
 800d596:	bf00      	nop
 800d598:	1fff7a10 	.word	0x1fff7a10
 800d59c:	1fff7a14 	.word	0x1fff7a14
 800d5a0:	1fff7a18 	.word	0x1fff7a18
 800d5a4:	200000ee 	.word	0x200000ee
 800d5a8:	200000fe 	.word	0x200000fe

0800d5ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d5ac:	b480      	push	{r7}
 800d5ae:	b087      	sub	sp, #28
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	60f8      	str	r0, [r7, #12]
 800d5b4:	60b9      	str	r1, [r7, #8]
 800d5b6:	4613      	mov	r3, r2
 800d5b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d5be:	2300      	movs	r3, #0
 800d5c0:	75fb      	strb	r3, [r7, #23]
 800d5c2:	e027      	b.n	800d614 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	0f1b      	lsrs	r3, r3, #28
 800d5c8:	2b09      	cmp	r3, #9
 800d5ca:	d80b      	bhi.n	800d5e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	0f1b      	lsrs	r3, r3, #28
 800d5d0:	b2da      	uxtb	r2, r3
 800d5d2:	7dfb      	ldrb	r3, [r7, #23]
 800d5d4:	005b      	lsls	r3, r3, #1
 800d5d6:	4619      	mov	r1, r3
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	440b      	add	r3, r1
 800d5dc:	3230      	adds	r2, #48	@ 0x30
 800d5de:	b2d2      	uxtb	r2, r2
 800d5e0:	701a      	strb	r2, [r3, #0]
 800d5e2:	e00a      	b.n	800d5fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	0f1b      	lsrs	r3, r3, #28
 800d5e8:	b2da      	uxtb	r2, r3
 800d5ea:	7dfb      	ldrb	r3, [r7, #23]
 800d5ec:	005b      	lsls	r3, r3, #1
 800d5ee:	4619      	mov	r1, r3
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	440b      	add	r3, r1
 800d5f4:	3237      	adds	r2, #55	@ 0x37
 800d5f6:	b2d2      	uxtb	r2, r2
 800d5f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	011b      	lsls	r3, r3, #4
 800d5fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d600:	7dfb      	ldrb	r3, [r7, #23]
 800d602:	005b      	lsls	r3, r3, #1
 800d604:	3301      	adds	r3, #1
 800d606:	68ba      	ldr	r2, [r7, #8]
 800d608:	4413      	add	r3, r2
 800d60a:	2200      	movs	r2, #0
 800d60c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d60e:	7dfb      	ldrb	r3, [r7, #23]
 800d610:	3301      	adds	r3, #1
 800d612:	75fb      	strb	r3, [r7, #23]
 800d614:	7dfa      	ldrb	r2, [r7, #23]
 800d616:	79fb      	ldrb	r3, [r7, #7]
 800d618:	429a      	cmp	r2, r3
 800d61a:	d3d3      	bcc.n	800d5c4 <IntToUnicode+0x18>
  }
}
 800d61c:	bf00      	nop
 800d61e:	bf00      	nop
 800d620:	371c      	adds	r7, #28
 800d622:	46bd      	mov	sp, r7
 800d624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d628:	4770      	bx	lr
	...

0800d62c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b08a      	sub	sp, #40	@ 0x28
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d634:	f107 0314 	add.w	r3, r7, #20
 800d638:	2200      	movs	r2, #0
 800d63a:	601a      	str	r2, [r3, #0]
 800d63c:	605a      	str	r2, [r3, #4]
 800d63e:	609a      	str	r2, [r3, #8]
 800d640:	60da      	str	r2, [r3, #12]
 800d642:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d64c:	d13a      	bne.n	800d6c4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d64e:	2300      	movs	r3, #0
 800d650:	613b      	str	r3, [r7, #16]
 800d652:	4b1e      	ldr	r3, [pc, #120]	@ (800d6cc <HAL_PCD_MspInit+0xa0>)
 800d654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d656:	4a1d      	ldr	r2, [pc, #116]	@ (800d6cc <HAL_PCD_MspInit+0xa0>)
 800d658:	f043 0301 	orr.w	r3, r3, #1
 800d65c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d65e:	4b1b      	ldr	r3, [pc, #108]	@ (800d6cc <HAL_PCD_MspInit+0xa0>)
 800d660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d662:	f003 0301 	and.w	r3, r3, #1
 800d666:	613b      	str	r3, [r7, #16]
 800d668:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d66a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d66e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d670:	2302      	movs	r3, #2
 800d672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d674:	2300      	movs	r3, #0
 800d676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d678:	2303      	movs	r3, #3
 800d67a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d67c:	230a      	movs	r3, #10
 800d67e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d680:	f107 0314 	add.w	r3, r7, #20
 800d684:	4619      	mov	r1, r3
 800d686:	4812      	ldr	r0, [pc, #72]	@ (800d6d0 <HAL_PCD_MspInit+0xa4>)
 800d688:	f7f5 ff76 	bl	8003578 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d68c:	4b0f      	ldr	r3, [pc, #60]	@ (800d6cc <HAL_PCD_MspInit+0xa0>)
 800d68e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d690:	4a0e      	ldr	r2, [pc, #56]	@ (800d6cc <HAL_PCD_MspInit+0xa0>)
 800d692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d696:	6353      	str	r3, [r2, #52]	@ 0x34
 800d698:	2300      	movs	r3, #0
 800d69a:	60fb      	str	r3, [r7, #12]
 800d69c:	4b0b      	ldr	r3, [pc, #44]	@ (800d6cc <HAL_PCD_MspInit+0xa0>)
 800d69e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d6a0:	4a0a      	ldr	r2, [pc, #40]	@ (800d6cc <HAL_PCD_MspInit+0xa0>)
 800d6a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d6a6:	6453      	str	r3, [r2, #68]	@ 0x44
 800d6a8:	4b08      	ldr	r3, [pc, #32]	@ (800d6cc <HAL_PCD_MspInit+0xa0>)
 800d6aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d6ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d6b0:	60fb      	str	r3, [r7, #12]
 800d6b2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	2100      	movs	r1, #0
 800d6b8:	2043      	movs	r0, #67	@ 0x43
 800d6ba:	f7f5 fb7a 	bl	8002db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d6be:	2043      	movs	r0, #67	@ 0x43
 800d6c0:	f7f5 fb93 	bl	8002dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d6c4:	bf00      	nop
 800d6c6:	3728      	adds	r7, #40	@ 0x28
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}
 800d6cc:	40023800 	.word	0x40023800
 800d6d0:	40020000 	.word	0x40020000

0800d6d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b082      	sub	sp, #8
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	4610      	mov	r0, r2
 800d6ec:	f7fe fabd 	bl	800bc6a <USBD_LL_SetupStage>
}
 800d6f0:	bf00      	nop
 800d6f2:	3708      	adds	r7, #8
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}

0800d6f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b082      	sub	sp, #8
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
 800d700:	460b      	mov	r3, r1
 800d702:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d70a:	78fa      	ldrb	r2, [r7, #3]
 800d70c:	6879      	ldr	r1, [r7, #4]
 800d70e:	4613      	mov	r3, r2
 800d710:	00db      	lsls	r3, r3, #3
 800d712:	4413      	add	r3, r2
 800d714:	009b      	lsls	r3, r3, #2
 800d716:	440b      	add	r3, r1
 800d718:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d71c:	681a      	ldr	r2, [r3, #0]
 800d71e:	78fb      	ldrb	r3, [r7, #3]
 800d720:	4619      	mov	r1, r3
 800d722:	f7fe faf7 	bl	800bd14 <USBD_LL_DataOutStage>
}
 800d726:	bf00      	nop
 800d728:	3708      	adds	r7, #8
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}

0800d72e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d72e:	b580      	push	{r7, lr}
 800d730:	b082      	sub	sp, #8
 800d732:	af00      	add	r7, sp, #0
 800d734:	6078      	str	r0, [r7, #4]
 800d736:	460b      	mov	r3, r1
 800d738:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d740:	78fa      	ldrb	r2, [r7, #3]
 800d742:	6879      	ldr	r1, [r7, #4]
 800d744:	4613      	mov	r3, r2
 800d746:	00db      	lsls	r3, r3, #3
 800d748:	4413      	add	r3, r2
 800d74a:	009b      	lsls	r3, r3, #2
 800d74c:	440b      	add	r3, r1
 800d74e:	3320      	adds	r3, #32
 800d750:	681a      	ldr	r2, [r3, #0]
 800d752:	78fb      	ldrb	r3, [r7, #3]
 800d754:	4619      	mov	r1, r3
 800d756:	f7fe fb99 	bl	800be8c <USBD_LL_DataInStage>
}
 800d75a:	bf00      	nop
 800d75c:	3708      	adds	r7, #8
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}

0800d762 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d762:	b580      	push	{r7, lr}
 800d764:	b082      	sub	sp, #8
 800d766:	af00      	add	r7, sp, #0
 800d768:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d770:	4618      	mov	r0, r3
 800d772:	f7fe fcdd 	bl	800c130 <USBD_LL_SOF>
}
 800d776:	bf00      	nop
 800d778:	3708      	adds	r7, #8
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}

0800d77e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d77e:	b580      	push	{r7, lr}
 800d780:	b084      	sub	sp, #16
 800d782:	af00      	add	r7, sp, #0
 800d784:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d786:	2301      	movs	r3, #1
 800d788:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	79db      	ldrb	r3, [r3, #7]
 800d78e:	2b02      	cmp	r3, #2
 800d790:	d001      	beq.n	800d796 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d792:	f7f3 fea1 	bl	80014d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d79c:	7bfa      	ldrb	r2, [r7, #15]
 800d79e:	4611      	mov	r1, r2
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f7fe fc81 	bl	800c0a8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f7fe fc28 	bl	800c002 <USBD_LL_Reset>
}
 800d7b2:	bf00      	nop
 800d7b4:	3710      	adds	r7, #16
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}
	...

0800d7bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b082      	sub	sp, #8
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f7fe fc7c 	bl	800c0c8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	687a      	ldr	r2, [r7, #4]
 800d7dc:	6812      	ldr	r2, [r2, #0]
 800d7de:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d7e2:	f043 0301 	orr.w	r3, r3, #1
 800d7e6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	7adb      	ldrb	r3, [r3, #11]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d005      	beq.n	800d7fc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d7f0:	4b04      	ldr	r3, [pc, #16]	@ (800d804 <HAL_PCD_SuspendCallback+0x48>)
 800d7f2:	691b      	ldr	r3, [r3, #16]
 800d7f4:	4a03      	ldr	r2, [pc, #12]	@ (800d804 <HAL_PCD_SuspendCallback+0x48>)
 800d7f6:	f043 0306 	orr.w	r3, r3, #6
 800d7fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d7fc:	bf00      	nop
 800d7fe:	3708      	adds	r7, #8
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}
 800d804:	e000ed00 	.word	0xe000ed00

0800d808 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b082      	sub	sp, #8
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d816:	4618      	mov	r0, r3
 800d818:	f7fe fc72 	bl	800c100 <USBD_LL_Resume>
}
 800d81c:	bf00      	nop
 800d81e:	3708      	adds	r7, #8
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}

0800d824 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
 800d82c:	460b      	mov	r3, r1
 800d82e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d836:	78fa      	ldrb	r2, [r7, #3]
 800d838:	4611      	mov	r1, r2
 800d83a:	4618      	mov	r0, r3
 800d83c:	f7fe fcca 	bl	800c1d4 <USBD_LL_IsoOUTIncomplete>
}
 800d840:	bf00      	nop
 800d842:	3708      	adds	r7, #8
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}

0800d848 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b082      	sub	sp, #8
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	460b      	mov	r3, r1
 800d852:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d85a:	78fa      	ldrb	r2, [r7, #3]
 800d85c:	4611      	mov	r1, r2
 800d85e:	4618      	mov	r0, r3
 800d860:	f7fe fc86 	bl	800c170 <USBD_LL_IsoINIncomplete>
}
 800d864:	bf00      	nop
 800d866:	3708      	adds	r7, #8
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}

0800d86c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b082      	sub	sp, #8
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d87a:	4618      	mov	r0, r3
 800d87c:	f7fe fcdc 	bl	800c238 <USBD_LL_DevConnected>
}
 800d880:	bf00      	nop
 800d882:	3708      	adds	r7, #8
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}

0800d888 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b082      	sub	sp, #8
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d896:	4618      	mov	r0, r3
 800d898:	f7fe fcd9 	bl	800c24e <USBD_LL_DevDisconnected>
}
 800d89c:	bf00      	nop
 800d89e:	3708      	adds	r7, #8
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}

0800d8a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b082      	sub	sp, #8
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d13c      	bne.n	800d92e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d8b4:	4a20      	ldr	r2, [pc, #128]	@ (800d938 <USBD_LL_Init+0x94>)
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	4a1e      	ldr	r2, [pc, #120]	@ (800d938 <USBD_LL_Init+0x94>)
 800d8c0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d8c4:	4b1c      	ldr	r3, [pc, #112]	@ (800d938 <USBD_LL_Init+0x94>)
 800d8c6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d8ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d8cc:	4b1a      	ldr	r3, [pc, #104]	@ (800d938 <USBD_LL_Init+0x94>)
 800d8ce:	2204      	movs	r2, #4
 800d8d0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d8d2:	4b19      	ldr	r3, [pc, #100]	@ (800d938 <USBD_LL_Init+0x94>)
 800d8d4:	2202      	movs	r2, #2
 800d8d6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d8d8:	4b17      	ldr	r3, [pc, #92]	@ (800d938 <USBD_LL_Init+0x94>)
 800d8da:	2200      	movs	r2, #0
 800d8dc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d8de:	4b16      	ldr	r3, [pc, #88]	@ (800d938 <USBD_LL_Init+0x94>)
 800d8e0:	2202      	movs	r2, #2
 800d8e2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d8e4:	4b14      	ldr	r3, [pc, #80]	@ (800d938 <USBD_LL_Init+0x94>)
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d8ea:	4b13      	ldr	r3, [pc, #76]	@ (800d938 <USBD_LL_Init+0x94>)
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d8f0:	4b11      	ldr	r3, [pc, #68]	@ (800d938 <USBD_LL_Init+0x94>)
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d8f6:	4b10      	ldr	r3, [pc, #64]	@ (800d938 <USBD_LL_Init+0x94>)
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d8fc:	4b0e      	ldr	r3, [pc, #56]	@ (800d938 <USBD_LL_Init+0x94>)
 800d8fe:	2200      	movs	r2, #0
 800d900:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d902:	480d      	ldr	r0, [pc, #52]	@ (800d938 <USBD_LL_Init+0x94>)
 800d904:	f7f9 fa97 	bl	8006e36 <HAL_PCD_Init>
 800d908:	4603      	mov	r3, r0
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d001      	beq.n	800d912 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d90e:	f7f3 fde3 	bl	80014d8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d912:	2180      	movs	r1, #128	@ 0x80
 800d914:	4808      	ldr	r0, [pc, #32]	@ (800d938 <USBD_LL_Init+0x94>)
 800d916:	f7fa fcc4 	bl	80082a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d91a:	2240      	movs	r2, #64	@ 0x40
 800d91c:	2100      	movs	r1, #0
 800d91e:	4806      	ldr	r0, [pc, #24]	@ (800d938 <USBD_LL_Init+0x94>)
 800d920:	f7fa fc78 	bl	8008214 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d924:	2280      	movs	r2, #128	@ 0x80
 800d926:	2101      	movs	r1, #1
 800d928:	4803      	ldr	r0, [pc, #12]	@ (800d938 <USBD_LL_Init+0x94>)
 800d92a:	f7fa fc73 	bl	8008214 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d92e:	2300      	movs	r3, #0
}
 800d930:	4618      	mov	r0, r3
 800d932:	3708      	adds	r7, #8
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}
 800d938:	200011d8 	.word	0x200011d8

0800d93c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b084      	sub	sp, #16
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d944:	2300      	movs	r3, #0
 800d946:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d948:	2300      	movs	r3, #0
 800d94a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d952:	4618      	mov	r0, r3
 800d954:	f7f9 fb7e 	bl	8007054 <HAL_PCD_Start>
 800d958:	4603      	mov	r3, r0
 800d95a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d95c:	7bfb      	ldrb	r3, [r7, #15]
 800d95e:	4618      	mov	r0, r3
 800d960:	f000 f942 	bl	800dbe8 <USBD_Get_USB_Status>
 800d964:	4603      	mov	r3, r0
 800d966:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d968:	7bbb      	ldrb	r3, [r7, #14]
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	3710      	adds	r7, #16
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}

0800d972 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d972:	b580      	push	{r7, lr}
 800d974:	b084      	sub	sp, #16
 800d976:	af00      	add	r7, sp, #0
 800d978:	6078      	str	r0, [r7, #4]
 800d97a:	4608      	mov	r0, r1
 800d97c:	4611      	mov	r1, r2
 800d97e:	461a      	mov	r2, r3
 800d980:	4603      	mov	r3, r0
 800d982:	70fb      	strb	r3, [r7, #3]
 800d984:	460b      	mov	r3, r1
 800d986:	70bb      	strb	r3, [r7, #2]
 800d988:	4613      	mov	r3, r2
 800d98a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d98c:	2300      	movs	r3, #0
 800d98e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d990:	2300      	movs	r3, #0
 800d992:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d99a:	78bb      	ldrb	r3, [r7, #2]
 800d99c:	883a      	ldrh	r2, [r7, #0]
 800d99e:	78f9      	ldrb	r1, [r7, #3]
 800d9a0:	f7fa f852 	bl	8007a48 <HAL_PCD_EP_Open>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9a8:	7bfb      	ldrb	r3, [r7, #15]
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f000 f91c 	bl	800dbe8 <USBD_Get_USB_Status>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	3710      	adds	r7, #16
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}

0800d9be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d9be:	b580      	push	{r7, lr}
 800d9c0:	b084      	sub	sp, #16
 800d9c2:	af00      	add	r7, sp, #0
 800d9c4:	6078      	str	r0, [r7, #4]
 800d9c6:	460b      	mov	r3, r1
 800d9c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d9d8:	78fa      	ldrb	r2, [r7, #3]
 800d9da:	4611      	mov	r1, r2
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f7fa f89d 	bl	8007b1c <HAL_PCD_EP_Close>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9e6:	7bfb      	ldrb	r3, [r7, #15]
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f000 f8fd 	bl	800dbe8 <USBD_Get_USB_Status>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3710      	adds	r7, #16
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}

0800d9fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b084      	sub	sp, #16
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	460b      	mov	r3, r1
 800da06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da08:	2300      	movs	r3, #0
 800da0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da0c:	2300      	movs	r3, #0
 800da0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da16:	78fa      	ldrb	r2, [r7, #3]
 800da18:	4611      	mov	r1, r2
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7fa f955 	bl	8007cca <HAL_PCD_EP_SetStall>
 800da20:	4603      	mov	r3, r0
 800da22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da24:	7bfb      	ldrb	r3, [r7, #15]
 800da26:	4618      	mov	r0, r3
 800da28:	f000 f8de 	bl	800dbe8 <USBD_Get_USB_Status>
 800da2c:	4603      	mov	r3, r0
 800da2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da30:	7bbb      	ldrb	r3, [r7, #14]
}
 800da32:	4618      	mov	r0, r3
 800da34:	3710      	adds	r7, #16
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}

0800da3a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da3a:	b580      	push	{r7, lr}
 800da3c:	b084      	sub	sp, #16
 800da3e:	af00      	add	r7, sp, #0
 800da40:	6078      	str	r0, [r7, #4]
 800da42:	460b      	mov	r3, r1
 800da44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da46:	2300      	movs	r3, #0
 800da48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da4a:	2300      	movs	r3, #0
 800da4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da54:	78fa      	ldrb	r2, [r7, #3]
 800da56:	4611      	mov	r1, r2
 800da58:	4618      	mov	r0, r3
 800da5a:	f7fa f999 	bl	8007d90 <HAL_PCD_EP_ClrStall>
 800da5e:	4603      	mov	r3, r0
 800da60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da62:	7bfb      	ldrb	r3, [r7, #15]
 800da64:	4618      	mov	r0, r3
 800da66:	f000 f8bf 	bl	800dbe8 <USBD_Get_USB_Status>
 800da6a:	4603      	mov	r3, r0
 800da6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da6e:	7bbb      	ldrb	r3, [r7, #14]
}
 800da70:	4618      	mov	r0, r3
 800da72:	3710      	adds	r7, #16
 800da74:	46bd      	mov	sp, r7
 800da76:	bd80      	pop	{r7, pc}

0800da78 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da78:	b480      	push	{r7}
 800da7a:	b085      	sub	sp, #20
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	460b      	mov	r3, r1
 800da82:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da8a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800da8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800da90:	2b00      	cmp	r3, #0
 800da92:	da0b      	bge.n	800daac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800da94:	78fb      	ldrb	r3, [r7, #3]
 800da96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800da9a:	68f9      	ldr	r1, [r7, #12]
 800da9c:	4613      	mov	r3, r2
 800da9e:	00db      	lsls	r3, r3, #3
 800daa0:	4413      	add	r3, r2
 800daa2:	009b      	lsls	r3, r3, #2
 800daa4:	440b      	add	r3, r1
 800daa6:	3316      	adds	r3, #22
 800daa8:	781b      	ldrb	r3, [r3, #0]
 800daaa:	e00b      	b.n	800dac4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800daac:	78fb      	ldrb	r3, [r7, #3]
 800daae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dab2:	68f9      	ldr	r1, [r7, #12]
 800dab4:	4613      	mov	r3, r2
 800dab6:	00db      	lsls	r3, r3, #3
 800dab8:	4413      	add	r3, r2
 800daba:	009b      	lsls	r3, r3, #2
 800dabc:	440b      	add	r3, r1
 800dabe:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800dac2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	3714      	adds	r7, #20
 800dac8:	46bd      	mov	sp, r7
 800daca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dace:	4770      	bx	lr

0800dad0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b084      	sub	sp, #16
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	460b      	mov	r3, r1
 800dada:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dadc:	2300      	movs	r3, #0
 800dade:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dae0:	2300      	movs	r3, #0
 800dae2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800daea:	78fa      	ldrb	r2, [r7, #3]
 800daec:	4611      	mov	r1, r2
 800daee:	4618      	mov	r0, r3
 800daf0:	f7f9 ff86 	bl	8007a00 <HAL_PCD_SetAddress>
 800daf4:	4603      	mov	r3, r0
 800daf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800daf8:	7bfb      	ldrb	r3, [r7, #15]
 800dafa:	4618      	mov	r0, r3
 800dafc:	f000 f874 	bl	800dbe8 <USBD_Get_USB_Status>
 800db00:	4603      	mov	r3, r0
 800db02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db04:	7bbb      	ldrb	r3, [r7, #14]
}
 800db06:	4618      	mov	r0, r3
 800db08:	3710      	adds	r7, #16
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}

0800db0e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800db0e:	b580      	push	{r7, lr}
 800db10:	b086      	sub	sp, #24
 800db12:	af00      	add	r7, sp, #0
 800db14:	60f8      	str	r0, [r7, #12]
 800db16:	607a      	str	r2, [r7, #4]
 800db18:	603b      	str	r3, [r7, #0]
 800db1a:	460b      	mov	r3, r1
 800db1c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db1e:	2300      	movs	r3, #0
 800db20:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db22:	2300      	movs	r3, #0
 800db24:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800db2c:	7af9      	ldrb	r1, [r7, #11]
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	687a      	ldr	r2, [r7, #4]
 800db32:	f7fa f890 	bl	8007c56 <HAL_PCD_EP_Transmit>
 800db36:	4603      	mov	r3, r0
 800db38:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db3a:	7dfb      	ldrb	r3, [r7, #23]
 800db3c:	4618      	mov	r0, r3
 800db3e:	f000 f853 	bl	800dbe8 <USBD_Get_USB_Status>
 800db42:	4603      	mov	r3, r0
 800db44:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800db46:	7dbb      	ldrb	r3, [r7, #22]
}
 800db48:	4618      	mov	r0, r3
 800db4a:	3718      	adds	r7, #24
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b086      	sub	sp, #24
 800db54:	af00      	add	r7, sp, #0
 800db56:	60f8      	str	r0, [r7, #12]
 800db58:	607a      	str	r2, [r7, #4]
 800db5a:	603b      	str	r3, [r7, #0]
 800db5c:	460b      	mov	r3, r1
 800db5e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db60:	2300      	movs	r3, #0
 800db62:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db64:	2300      	movs	r3, #0
 800db66:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800db6e:	7af9      	ldrb	r1, [r7, #11]
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	687a      	ldr	r2, [r7, #4]
 800db74:	f7fa f81c 	bl	8007bb0 <HAL_PCD_EP_Receive>
 800db78:	4603      	mov	r3, r0
 800db7a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db7c:	7dfb      	ldrb	r3, [r7, #23]
 800db7e:	4618      	mov	r0, r3
 800db80:	f000 f832 	bl	800dbe8 <USBD_Get_USB_Status>
 800db84:	4603      	mov	r3, r0
 800db86:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800db88:	7dbb      	ldrb	r3, [r7, #22]
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3718      	adds	r7, #24
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}

0800db92 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db92:	b580      	push	{r7, lr}
 800db94:	b082      	sub	sp, #8
 800db96:	af00      	add	r7, sp, #0
 800db98:	6078      	str	r0, [r7, #4]
 800db9a:	460b      	mov	r3, r1
 800db9c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dba4:	78fa      	ldrb	r2, [r7, #3]
 800dba6:	4611      	mov	r1, r2
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f7fa f83c 	bl	8007c26 <HAL_PCD_EP_GetRxCount>
 800dbae:	4603      	mov	r3, r0
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3708      	adds	r7, #8
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dbb8:	b480      	push	{r7}
 800dbba:	b083      	sub	sp, #12
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dbc0:	4b03      	ldr	r3, [pc, #12]	@ (800dbd0 <USBD_static_malloc+0x18>)
}
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	370c      	adds	r7, #12
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbcc:	4770      	bx	lr
 800dbce:	bf00      	nop
 800dbd0:	200016bc 	.word	0x200016bc

0800dbd4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dbd4:	b480      	push	{r7}
 800dbd6:	b083      	sub	sp, #12
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]

}
 800dbdc:	bf00      	nop
 800dbde:	370c      	adds	r7, #12
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe6:	4770      	bx	lr

0800dbe8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dbe8:	b480      	push	{r7}
 800dbea:	b085      	sub	sp, #20
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	4603      	mov	r3, r0
 800dbf0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dbf6:	79fb      	ldrb	r3, [r7, #7]
 800dbf8:	2b03      	cmp	r3, #3
 800dbfa:	d817      	bhi.n	800dc2c <USBD_Get_USB_Status+0x44>
 800dbfc:	a201      	add	r2, pc, #4	@ (adr r2, 800dc04 <USBD_Get_USB_Status+0x1c>)
 800dbfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc02:	bf00      	nop
 800dc04:	0800dc15 	.word	0x0800dc15
 800dc08:	0800dc1b 	.word	0x0800dc1b
 800dc0c:	0800dc21 	.word	0x0800dc21
 800dc10:	0800dc27 	.word	0x0800dc27
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dc14:	2300      	movs	r3, #0
 800dc16:	73fb      	strb	r3, [r7, #15]
    break;
 800dc18:	e00b      	b.n	800dc32 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dc1a:	2303      	movs	r3, #3
 800dc1c:	73fb      	strb	r3, [r7, #15]
    break;
 800dc1e:	e008      	b.n	800dc32 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dc20:	2301      	movs	r3, #1
 800dc22:	73fb      	strb	r3, [r7, #15]
    break;
 800dc24:	e005      	b.n	800dc32 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dc26:	2303      	movs	r3, #3
 800dc28:	73fb      	strb	r3, [r7, #15]
    break;
 800dc2a:	e002      	b.n	800dc32 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dc2c:	2303      	movs	r3, #3
 800dc2e:	73fb      	strb	r3, [r7, #15]
    break;
 800dc30:	bf00      	nop
  }
  return usb_status;
 800dc32:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	3714      	adds	r7, #20
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3e:	4770      	bx	lr

0800dc40 <malloc>:
 800dc40:	4b02      	ldr	r3, [pc, #8]	@ (800dc4c <malloc+0xc>)
 800dc42:	4601      	mov	r1, r0
 800dc44:	6818      	ldr	r0, [r3, #0]
 800dc46:	f000 b825 	b.w	800dc94 <_malloc_r>
 800dc4a:	bf00      	nop
 800dc4c:	20000108 	.word	0x20000108

0800dc50 <sbrk_aligned>:
 800dc50:	b570      	push	{r4, r5, r6, lr}
 800dc52:	4e0f      	ldr	r6, [pc, #60]	@ (800dc90 <sbrk_aligned+0x40>)
 800dc54:	460c      	mov	r4, r1
 800dc56:	6831      	ldr	r1, [r6, #0]
 800dc58:	4605      	mov	r5, r0
 800dc5a:	b911      	cbnz	r1, 800dc62 <sbrk_aligned+0x12>
 800dc5c:	f000 f8d0 	bl	800de00 <_sbrk_r>
 800dc60:	6030      	str	r0, [r6, #0]
 800dc62:	4621      	mov	r1, r4
 800dc64:	4628      	mov	r0, r5
 800dc66:	f000 f8cb 	bl	800de00 <_sbrk_r>
 800dc6a:	1c43      	adds	r3, r0, #1
 800dc6c:	d103      	bne.n	800dc76 <sbrk_aligned+0x26>
 800dc6e:	f04f 34ff 	mov.w	r4, #4294967295
 800dc72:	4620      	mov	r0, r4
 800dc74:	bd70      	pop	{r4, r5, r6, pc}
 800dc76:	1cc4      	adds	r4, r0, #3
 800dc78:	f024 0403 	bic.w	r4, r4, #3
 800dc7c:	42a0      	cmp	r0, r4
 800dc7e:	d0f8      	beq.n	800dc72 <sbrk_aligned+0x22>
 800dc80:	1a21      	subs	r1, r4, r0
 800dc82:	4628      	mov	r0, r5
 800dc84:	f000 f8bc 	bl	800de00 <_sbrk_r>
 800dc88:	3001      	adds	r0, #1
 800dc8a:	d1f2      	bne.n	800dc72 <sbrk_aligned+0x22>
 800dc8c:	e7ef      	b.n	800dc6e <sbrk_aligned+0x1e>
 800dc8e:	bf00      	nop
 800dc90:	200018dc 	.word	0x200018dc

0800dc94 <_malloc_r>:
 800dc94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc98:	1ccd      	adds	r5, r1, #3
 800dc9a:	f025 0503 	bic.w	r5, r5, #3
 800dc9e:	3508      	adds	r5, #8
 800dca0:	2d0c      	cmp	r5, #12
 800dca2:	bf38      	it	cc
 800dca4:	250c      	movcc	r5, #12
 800dca6:	2d00      	cmp	r5, #0
 800dca8:	4606      	mov	r6, r0
 800dcaa:	db01      	blt.n	800dcb0 <_malloc_r+0x1c>
 800dcac:	42a9      	cmp	r1, r5
 800dcae:	d904      	bls.n	800dcba <_malloc_r+0x26>
 800dcb0:	230c      	movs	r3, #12
 800dcb2:	6033      	str	r3, [r6, #0]
 800dcb4:	2000      	movs	r0, #0
 800dcb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dd90 <_malloc_r+0xfc>
 800dcbe:	f000 f869 	bl	800dd94 <__malloc_lock>
 800dcc2:	f8d8 3000 	ldr.w	r3, [r8]
 800dcc6:	461c      	mov	r4, r3
 800dcc8:	bb44      	cbnz	r4, 800dd1c <_malloc_r+0x88>
 800dcca:	4629      	mov	r1, r5
 800dccc:	4630      	mov	r0, r6
 800dcce:	f7ff ffbf 	bl	800dc50 <sbrk_aligned>
 800dcd2:	1c43      	adds	r3, r0, #1
 800dcd4:	4604      	mov	r4, r0
 800dcd6:	d158      	bne.n	800dd8a <_malloc_r+0xf6>
 800dcd8:	f8d8 4000 	ldr.w	r4, [r8]
 800dcdc:	4627      	mov	r7, r4
 800dcde:	2f00      	cmp	r7, #0
 800dce0:	d143      	bne.n	800dd6a <_malloc_r+0xd6>
 800dce2:	2c00      	cmp	r4, #0
 800dce4:	d04b      	beq.n	800dd7e <_malloc_r+0xea>
 800dce6:	6823      	ldr	r3, [r4, #0]
 800dce8:	4639      	mov	r1, r7
 800dcea:	4630      	mov	r0, r6
 800dcec:	eb04 0903 	add.w	r9, r4, r3
 800dcf0:	f000 f886 	bl	800de00 <_sbrk_r>
 800dcf4:	4581      	cmp	r9, r0
 800dcf6:	d142      	bne.n	800dd7e <_malloc_r+0xea>
 800dcf8:	6821      	ldr	r1, [r4, #0]
 800dcfa:	1a6d      	subs	r5, r5, r1
 800dcfc:	4629      	mov	r1, r5
 800dcfe:	4630      	mov	r0, r6
 800dd00:	f7ff ffa6 	bl	800dc50 <sbrk_aligned>
 800dd04:	3001      	adds	r0, #1
 800dd06:	d03a      	beq.n	800dd7e <_malloc_r+0xea>
 800dd08:	6823      	ldr	r3, [r4, #0]
 800dd0a:	442b      	add	r3, r5
 800dd0c:	6023      	str	r3, [r4, #0]
 800dd0e:	f8d8 3000 	ldr.w	r3, [r8]
 800dd12:	685a      	ldr	r2, [r3, #4]
 800dd14:	bb62      	cbnz	r2, 800dd70 <_malloc_r+0xdc>
 800dd16:	f8c8 7000 	str.w	r7, [r8]
 800dd1a:	e00f      	b.n	800dd3c <_malloc_r+0xa8>
 800dd1c:	6822      	ldr	r2, [r4, #0]
 800dd1e:	1b52      	subs	r2, r2, r5
 800dd20:	d420      	bmi.n	800dd64 <_malloc_r+0xd0>
 800dd22:	2a0b      	cmp	r2, #11
 800dd24:	d917      	bls.n	800dd56 <_malloc_r+0xc2>
 800dd26:	1961      	adds	r1, r4, r5
 800dd28:	42a3      	cmp	r3, r4
 800dd2a:	6025      	str	r5, [r4, #0]
 800dd2c:	bf18      	it	ne
 800dd2e:	6059      	strne	r1, [r3, #4]
 800dd30:	6863      	ldr	r3, [r4, #4]
 800dd32:	bf08      	it	eq
 800dd34:	f8c8 1000 	streq.w	r1, [r8]
 800dd38:	5162      	str	r2, [r4, r5]
 800dd3a:	604b      	str	r3, [r1, #4]
 800dd3c:	4630      	mov	r0, r6
 800dd3e:	f000 f82f 	bl	800dda0 <__malloc_unlock>
 800dd42:	f104 000b 	add.w	r0, r4, #11
 800dd46:	1d23      	adds	r3, r4, #4
 800dd48:	f020 0007 	bic.w	r0, r0, #7
 800dd4c:	1ac2      	subs	r2, r0, r3
 800dd4e:	bf1c      	itt	ne
 800dd50:	1a1b      	subne	r3, r3, r0
 800dd52:	50a3      	strne	r3, [r4, r2]
 800dd54:	e7af      	b.n	800dcb6 <_malloc_r+0x22>
 800dd56:	6862      	ldr	r2, [r4, #4]
 800dd58:	42a3      	cmp	r3, r4
 800dd5a:	bf0c      	ite	eq
 800dd5c:	f8c8 2000 	streq.w	r2, [r8]
 800dd60:	605a      	strne	r2, [r3, #4]
 800dd62:	e7eb      	b.n	800dd3c <_malloc_r+0xa8>
 800dd64:	4623      	mov	r3, r4
 800dd66:	6864      	ldr	r4, [r4, #4]
 800dd68:	e7ae      	b.n	800dcc8 <_malloc_r+0x34>
 800dd6a:	463c      	mov	r4, r7
 800dd6c:	687f      	ldr	r7, [r7, #4]
 800dd6e:	e7b6      	b.n	800dcde <_malloc_r+0x4a>
 800dd70:	461a      	mov	r2, r3
 800dd72:	685b      	ldr	r3, [r3, #4]
 800dd74:	42a3      	cmp	r3, r4
 800dd76:	d1fb      	bne.n	800dd70 <_malloc_r+0xdc>
 800dd78:	2300      	movs	r3, #0
 800dd7a:	6053      	str	r3, [r2, #4]
 800dd7c:	e7de      	b.n	800dd3c <_malloc_r+0xa8>
 800dd7e:	230c      	movs	r3, #12
 800dd80:	6033      	str	r3, [r6, #0]
 800dd82:	4630      	mov	r0, r6
 800dd84:	f000 f80c 	bl	800dda0 <__malloc_unlock>
 800dd88:	e794      	b.n	800dcb4 <_malloc_r+0x20>
 800dd8a:	6005      	str	r5, [r0, #0]
 800dd8c:	e7d6      	b.n	800dd3c <_malloc_r+0xa8>
 800dd8e:	bf00      	nop
 800dd90:	200018e0 	.word	0x200018e0

0800dd94 <__malloc_lock>:
 800dd94:	4801      	ldr	r0, [pc, #4]	@ (800dd9c <__malloc_lock+0x8>)
 800dd96:	f000 b86d 	b.w	800de74 <__retarget_lock_acquire_recursive>
 800dd9a:	bf00      	nop
 800dd9c:	20001a20 	.word	0x20001a20

0800dda0 <__malloc_unlock>:
 800dda0:	4801      	ldr	r0, [pc, #4]	@ (800dda8 <__malloc_unlock+0x8>)
 800dda2:	f000 b868 	b.w	800de76 <__retarget_lock_release_recursive>
 800dda6:	bf00      	nop
 800dda8:	20001a20 	.word	0x20001a20

0800ddac <siprintf>:
 800ddac:	b40e      	push	{r1, r2, r3}
 800ddae:	b510      	push	{r4, lr}
 800ddb0:	b09d      	sub	sp, #116	@ 0x74
 800ddb2:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ddb4:	9002      	str	r0, [sp, #8]
 800ddb6:	9006      	str	r0, [sp, #24]
 800ddb8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ddbc:	480a      	ldr	r0, [pc, #40]	@ (800dde8 <siprintf+0x3c>)
 800ddbe:	9107      	str	r1, [sp, #28]
 800ddc0:	9104      	str	r1, [sp, #16]
 800ddc2:	490a      	ldr	r1, [pc, #40]	@ (800ddec <siprintf+0x40>)
 800ddc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddc8:	9105      	str	r1, [sp, #20]
 800ddca:	2400      	movs	r4, #0
 800ddcc:	a902      	add	r1, sp, #8
 800ddce:	6800      	ldr	r0, [r0, #0]
 800ddd0:	9301      	str	r3, [sp, #4]
 800ddd2:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ddd4:	f000 f8f6 	bl	800dfc4 <_svfiprintf_r>
 800ddd8:	9b02      	ldr	r3, [sp, #8]
 800ddda:	701c      	strb	r4, [r3, #0]
 800dddc:	b01d      	add	sp, #116	@ 0x74
 800ddde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dde2:	b003      	add	sp, #12
 800dde4:	4770      	bx	lr
 800dde6:	bf00      	nop
 800dde8:	20000108 	.word	0x20000108
 800ddec:	ffff0208 	.word	0xffff0208

0800ddf0 <memset>:
 800ddf0:	4402      	add	r2, r0
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	4293      	cmp	r3, r2
 800ddf6:	d100      	bne.n	800ddfa <memset+0xa>
 800ddf8:	4770      	bx	lr
 800ddfa:	f803 1b01 	strb.w	r1, [r3], #1
 800ddfe:	e7f9      	b.n	800ddf4 <memset+0x4>

0800de00 <_sbrk_r>:
 800de00:	b538      	push	{r3, r4, r5, lr}
 800de02:	4d06      	ldr	r5, [pc, #24]	@ (800de1c <_sbrk_r+0x1c>)
 800de04:	2300      	movs	r3, #0
 800de06:	4604      	mov	r4, r0
 800de08:	4608      	mov	r0, r1
 800de0a:	602b      	str	r3, [r5, #0]
 800de0c:	f7f4 fa4e 	bl	80022ac <_sbrk>
 800de10:	1c43      	adds	r3, r0, #1
 800de12:	d102      	bne.n	800de1a <_sbrk_r+0x1a>
 800de14:	682b      	ldr	r3, [r5, #0]
 800de16:	b103      	cbz	r3, 800de1a <_sbrk_r+0x1a>
 800de18:	6023      	str	r3, [r4, #0]
 800de1a:	bd38      	pop	{r3, r4, r5, pc}
 800de1c:	20001a1c 	.word	0x20001a1c

0800de20 <__errno>:
 800de20:	4b01      	ldr	r3, [pc, #4]	@ (800de28 <__errno+0x8>)
 800de22:	6818      	ldr	r0, [r3, #0]
 800de24:	4770      	bx	lr
 800de26:	bf00      	nop
 800de28:	20000108 	.word	0x20000108

0800de2c <__libc_init_array>:
 800de2c:	b570      	push	{r4, r5, r6, lr}
 800de2e:	4d0d      	ldr	r5, [pc, #52]	@ (800de64 <__libc_init_array+0x38>)
 800de30:	4c0d      	ldr	r4, [pc, #52]	@ (800de68 <__libc_init_array+0x3c>)
 800de32:	1b64      	subs	r4, r4, r5
 800de34:	10a4      	asrs	r4, r4, #2
 800de36:	2600      	movs	r6, #0
 800de38:	42a6      	cmp	r6, r4
 800de3a:	d109      	bne.n	800de50 <__libc_init_array+0x24>
 800de3c:	4d0b      	ldr	r5, [pc, #44]	@ (800de6c <__libc_init_array+0x40>)
 800de3e:	4c0c      	ldr	r4, [pc, #48]	@ (800de70 <__libc_init_array+0x44>)
 800de40:	f000 fba6 	bl	800e590 <_init>
 800de44:	1b64      	subs	r4, r4, r5
 800de46:	10a4      	asrs	r4, r4, #2
 800de48:	2600      	movs	r6, #0
 800de4a:	42a6      	cmp	r6, r4
 800de4c:	d105      	bne.n	800de5a <__libc_init_array+0x2e>
 800de4e:	bd70      	pop	{r4, r5, r6, pc}
 800de50:	f855 3b04 	ldr.w	r3, [r5], #4
 800de54:	4798      	blx	r3
 800de56:	3601      	adds	r6, #1
 800de58:	e7ee      	b.n	800de38 <__libc_init_array+0xc>
 800de5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800de5e:	4798      	blx	r3
 800de60:	3601      	adds	r6, #1
 800de62:	e7f2      	b.n	800de4a <__libc_init_array+0x1e>
 800de64:	0800ee5c 	.word	0x0800ee5c
 800de68:	0800ee5c 	.word	0x0800ee5c
 800de6c:	0800ee5c 	.word	0x0800ee5c
 800de70:	0800ee60 	.word	0x0800ee60

0800de74 <__retarget_lock_acquire_recursive>:
 800de74:	4770      	bx	lr

0800de76 <__retarget_lock_release_recursive>:
 800de76:	4770      	bx	lr

0800de78 <_free_r>:
 800de78:	b538      	push	{r3, r4, r5, lr}
 800de7a:	4605      	mov	r5, r0
 800de7c:	2900      	cmp	r1, #0
 800de7e:	d041      	beq.n	800df04 <_free_r+0x8c>
 800de80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de84:	1f0c      	subs	r4, r1, #4
 800de86:	2b00      	cmp	r3, #0
 800de88:	bfb8      	it	lt
 800de8a:	18e4      	addlt	r4, r4, r3
 800de8c:	f7ff ff82 	bl	800dd94 <__malloc_lock>
 800de90:	4a1d      	ldr	r2, [pc, #116]	@ (800df08 <_free_r+0x90>)
 800de92:	6813      	ldr	r3, [r2, #0]
 800de94:	b933      	cbnz	r3, 800dea4 <_free_r+0x2c>
 800de96:	6063      	str	r3, [r4, #4]
 800de98:	6014      	str	r4, [r2, #0]
 800de9a:	4628      	mov	r0, r5
 800de9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dea0:	f7ff bf7e 	b.w	800dda0 <__malloc_unlock>
 800dea4:	42a3      	cmp	r3, r4
 800dea6:	d908      	bls.n	800deba <_free_r+0x42>
 800dea8:	6820      	ldr	r0, [r4, #0]
 800deaa:	1821      	adds	r1, r4, r0
 800deac:	428b      	cmp	r3, r1
 800deae:	bf01      	itttt	eq
 800deb0:	6819      	ldreq	r1, [r3, #0]
 800deb2:	685b      	ldreq	r3, [r3, #4]
 800deb4:	1809      	addeq	r1, r1, r0
 800deb6:	6021      	streq	r1, [r4, #0]
 800deb8:	e7ed      	b.n	800de96 <_free_r+0x1e>
 800deba:	461a      	mov	r2, r3
 800debc:	685b      	ldr	r3, [r3, #4]
 800debe:	b10b      	cbz	r3, 800dec4 <_free_r+0x4c>
 800dec0:	42a3      	cmp	r3, r4
 800dec2:	d9fa      	bls.n	800deba <_free_r+0x42>
 800dec4:	6811      	ldr	r1, [r2, #0]
 800dec6:	1850      	adds	r0, r2, r1
 800dec8:	42a0      	cmp	r0, r4
 800deca:	d10b      	bne.n	800dee4 <_free_r+0x6c>
 800decc:	6820      	ldr	r0, [r4, #0]
 800dece:	4401      	add	r1, r0
 800ded0:	1850      	adds	r0, r2, r1
 800ded2:	4283      	cmp	r3, r0
 800ded4:	6011      	str	r1, [r2, #0]
 800ded6:	d1e0      	bne.n	800de9a <_free_r+0x22>
 800ded8:	6818      	ldr	r0, [r3, #0]
 800deda:	685b      	ldr	r3, [r3, #4]
 800dedc:	6053      	str	r3, [r2, #4]
 800dede:	4408      	add	r0, r1
 800dee0:	6010      	str	r0, [r2, #0]
 800dee2:	e7da      	b.n	800de9a <_free_r+0x22>
 800dee4:	d902      	bls.n	800deec <_free_r+0x74>
 800dee6:	230c      	movs	r3, #12
 800dee8:	602b      	str	r3, [r5, #0]
 800deea:	e7d6      	b.n	800de9a <_free_r+0x22>
 800deec:	6820      	ldr	r0, [r4, #0]
 800deee:	1821      	adds	r1, r4, r0
 800def0:	428b      	cmp	r3, r1
 800def2:	bf04      	itt	eq
 800def4:	6819      	ldreq	r1, [r3, #0]
 800def6:	685b      	ldreq	r3, [r3, #4]
 800def8:	6063      	str	r3, [r4, #4]
 800defa:	bf04      	itt	eq
 800defc:	1809      	addeq	r1, r1, r0
 800defe:	6021      	streq	r1, [r4, #0]
 800df00:	6054      	str	r4, [r2, #4]
 800df02:	e7ca      	b.n	800de9a <_free_r+0x22>
 800df04:	bd38      	pop	{r3, r4, r5, pc}
 800df06:	bf00      	nop
 800df08:	200018e0 	.word	0x200018e0

0800df0c <__ssputs_r>:
 800df0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df10:	688e      	ldr	r6, [r1, #8]
 800df12:	461f      	mov	r7, r3
 800df14:	42be      	cmp	r6, r7
 800df16:	680b      	ldr	r3, [r1, #0]
 800df18:	4682      	mov	sl, r0
 800df1a:	460c      	mov	r4, r1
 800df1c:	4690      	mov	r8, r2
 800df1e:	d82d      	bhi.n	800df7c <__ssputs_r+0x70>
 800df20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800df24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800df28:	d026      	beq.n	800df78 <__ssputs_r+0x6c>
 800df2a:	6965      	ldr	r5, [r4, #20]
 800df2c:	6909      	ldr	r1, [r1, #16]
 800df2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800df32:	eba3 0901 	sub.w	r9, r3, r1
 800df36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800df3a:	1c7b      	adds	r3, r7, #1
 800df3c:	444b      	add	r3, r9
 800df3e:	106d      	asrs	r5, r5, #1
 800df40:	429d      	cmp	r5, r3
 800df42:	bf38      	it	cc
 800df44:	461d      	movcc	r5, r3
 800df46:	0553      	lsls	r3, r2, #21
 800df48:	d527      	bpl.n	800df9a <__ssputs_r+0x8e>
 800df4a:	4629      	mov	r1, r5
 800df4c:	f7ff fea2 	bl	800dc94 <_malloc_r>
 800df50:	4606      	mov	r6, r0
 800df52:	b360      	cbz	r0, 800dfae <__ssputs_r+0xa2>
 800df54:	6921      	ldr	r1, [r4, #16]
 800df56:	464a      	mov	r2, r9
 800df58:	f000 fad6 	bl	800e508 <memcpy>
 800df5c:	89a3      	ldrh	r3, [r4, #12]
 800df5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800df62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df66:	81a3      	strh	r3, [r4, #12]
 800df68:	6126      	str	r6, [r4, #16]
 800df6a:	6165      	str	r5, [r4, #20]
 800df6c:	444e      	add	r6, r9
 800df6e:	eba5 0509 	sub.w	r5, r5, r9
 800df72:	6026      	str	r6, [r4, #0]
 800df74:	60a5      	str	r5, [r4, #8]
 800df76:	463e      	mov	r6, r7
 800df78:	42be      	cmp	r6, r7
 800df7a:	d900      	bls.n	800df7e <__ssputs_r+0x72>
 800df7c:	463e      	mov	r6, r7
 800df7e:	6820      	ldr	r0, [r4, #0]
 800df80:	4632      	mov	r2, r6
 800df82:	4641      	mov	r1, r8
 800df84:	f000 faa6 	bl	800e4d4 <memmove>
 800df88:	68a3      	ldr	r3, [r4, #8]
 800df8a:	1b9b      	subs	r3, r3, r6
 800df8c:	60a3      	str	r3, [r4, #8]
 800df8e:	6823      	ldr	r3, [r4, #0]
 800df90:	4433      	add	r3, r6
 800df92:	6023      	str	r3, [r4, #0]
 800df94:	2000      	movs	r0, #0
 800df96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df9a:	462a      	mov	r2, r5
 800df9c:	f000 fac2 	bl	800e524 <_realloc_r>
 800dfa0:	4606      	mov	r6, r0
 800dfa2:	2800      	cmp	r0, #0
 800dfa4:	d1e0      	bne.n	800df68 <__ssputs_r+0x5c>
 800dfa6:	6921      	ldr	r1, [r4, #16]
 800dfa8:	4650      	mov	r0, sl
 800dfaa:	f7ff ff65 	bl	800de78 <_free_r>
 800dfae:	230c      	movs	r3, #12
 800dfb0:	f8ca 3000 	str.w	r3, [sl]
 800dfb4:	89a3      	ldrh	r3, [r4, #12]
 800dfb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dfba:	81a3      	strh	r3, [r4, #12]
 800dfbc:	f04f 30ff 	mov.w	r0, #4294967295
 800dfc0:	e7e9      	b.n	800df96 <__ssputs_r+0x8a>
	...

0800dfc4 <_svfiprintf_r>:
 800dfc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfc8:	4698      	mov	r8, r3
 800dfca:	898b      	ldrh	r3, [r1, #12]
 800dfcc:	061b      	lsls	r3, r3, #24
 800dfce:	b09d      	sub	sp, #116	@ 0x74
 800dfd0:	4607      	mov	r7, r0
 800dfd2:	460d      	mov	r5, r1
 800dfd4:	4614      	mov	r4, r2
 800dfd6:	d510      	bpl.n	800dffa <_svfiprintf_r+0x36>
 800dfd8:	690b      	ldr	r3, [r1, #16]
 800dfda:	b973      	cbnz	r3, 800dffa <_svfiprintf_r+0x36>
 800dfdc:	2140      	movs	r1, #64	@ 0x40
 800dfde:	f7ff fe59 	bl	800dc94 <_malloc_r>
 800dfe2:	6028      	str	r0, [r5, #0]
 800dfe4:	6128      	str	r0, [r5, #16]
 800dfe6:	b930      	cbnz	r0, 800dff6 <_svfiprintf_r+0x32>
 800dfe8:	230c      	movs	r3, #12
 800dfea:	603b      	str	r3, [r7, #0]
 800dfec:	f04f 30ff 	mov.w	r0, #4294967295
 800dff0:	b01d      	add	sp, #116	@ 0x74
 800dff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dff6:	2340      	movs	r3, #64	@ 0x40
 800dff8:	616b      	str	r3, [r5, #20]
 800dffa:	2300      	movs	r3, #0
 800dffc:	9309      	str	r3, [sp, #36]	@ 0x24
 800dffe:	2320      	movs	r3, #32
 800e000:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e004:	f8cd 800c 	str.w	r8, [sp, #12]
 800e008:	2330      	movs	r3, #48	@ 0x30
 800e00a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e1a8 <_svfiprintf_r+0x1e4>
 800e00e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e012:	f04f 0901 	mov.w	r9, #1
 800e016:	4623      	mov	r3, r4
 800e018:	469a      	mov	sl, r3
 800e01a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e01e:	b10a      	cbz	r2, 800e024 <_svfiprintf_r+0x60>
 800e020:	2a25      	cmp	r2, #37	@ 0x25
 800e022:	d1f9      	bne.n	800e018 <_svfiprintf_r+0x54>
 800e024:	ebba 0b04 	subs.w	fp, sl, r4
 800e028:	d00b      	beq.n	800e042 <_svfiprintf_r+0x7e>
 800e02a:	465b      	mov	r3, fp
 800e02c:	4622      	mov	r2, r4
 800e02e:	4629      	mov	r1, r5
 800e030:	4638      	mov	r0, r7
 800e032:	f7ff ff6b 	bl	800df0c <__ssputs_r>
 800e036:	3001      	adds	r0, #1
 800e038:	f000 80a7 	beq.w	800e18a <_svfiprintf_r+0x1c6>
 800e03c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e03e:	445a      	add	r2, fp
 800e040:	9209      	str	r2, [sp, #36]	@ 0x24
 800e042:	f89a 3000 	ldrb.w	r3, [sl]
 800e046:	2b00      	cmp	r3, #0
 800e048:	f000 809f 	beq.w	800e18a <_svfiprintf_r+0x1c6>
 800e04c:	2300      	movs	r3, #0
 800e04e:	f04f 32ff 	mov.w	r2, #4294967295
 800e052:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e056:	f10a 0a01 	add.w	sl, sl, #1
 800e05a:	9304      	str	r3, [sp, #16]
 800e05c:	9307      	str	r3, [sp, #28]
 800e05e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e062:	931a      	str	r3, [sp, #104]	@ 0x68
 800e064:	4654      	mov	r4, sl
 800e066:	2205      	movs	r2, #5
 800e068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e06c:	484e      	ldr	r0, [pc, #312]	@ (800e1a8 <_svfiprintf_r+0x1e4>)
 800e06e:	f7f2 f8b7 	bl	80001e0 <memchr>
 800e072:	9a04      	ldr	r2, [sp, #16]
 800e074:	b9d8      	cbnz	r0, 800e0ae <_svfiprintf_r+0xea>
 800e076:	06d0      	lsls	r0, r2, #27
 800e078:	bf44      	itt	mi
 800e07a:	2320      	movmi	r3, #32
 800e07c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e080:	0711      	lsls	r1, r2, #28
 800e082:	bf44      	itt	mi
 800e084:	232b      	movmi	r3, #43	@ 0x2b
 800e086:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e08a:	f89a 3000 	ldrb.w	r3, [sl]
 800e08e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e090:	d015      	beq.n	800e0be <_svfiprintf_r+0xfa>
 800e092:	9a07      	ldr	r2, [sp, #28]
 800e094:	4654      	mov	r4, sl
 800e096:	2000      	movs	r0, #0
 800e098:	f04f 0c0a 	mov.w	ip, #10
 800e09c:	4621      	mov	r1, r4
 800e09e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0a2:	3b30      	subs	r3, #48	@ 0x30
 800e0a4:	2b09      	cmp	r3, #9
 800e0a6:	d94b      	bls.n	800e140 <_svfiprintf_r+0x17c>
 800e0a8:	b1b0      	cbz	r0, 800e0d8 <_svfiprintf_r+0x114>
 800e0aa:	9207      	str	r2, [sp, #28]
 800e0ac:	e014      	b.n	800e0d8 <_svfiprintf_r+0x114>
 800e0ae:	eba0 0308 	sub.w	r3, r0, r8
 800e0b2:	fa09 f303 	lsl.w	r3, r9, r3
 800e0b6:	4313      	orrs	r3, r2
 800e0b8:	9304      	str	r3, [sp, #16]
 800e0ba:	46a2      	mov	sl, r4
 800e0bc:	e7d2      	b.n	800e064 <_svfiprintf_r+0xa0>
 800e0be:	9b03      	ldr	r3, [sp, #12]
 800e0c0:	1d19      	adds	r1, r3, #4
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	9103      	str	r1, [sp, #12]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	bfbb      	ittet	lt
 800e0ca:	425b      	neglt	r3, r3
 800e0cc:	f042 0202 	orrlt.w	r2, r2, #2
 800e0d0:	9307      	strge	r3, [sp, #28]
 800e0d2:	9307      	strlt	r3, [sp, #28]
 800e0d4:	bfb8      	it	lt
 800e0d6:	9204      	strlt	r2, [sp, #16]
 800e0d8:	7823      	ldrb	r3, [r4, #0]
 800e0da:	2b2e      	cmp	r3, #46	@ 0x2e
 800e0dc:	d10a      	bne.n	800e0f4 <_svfiprintf_r+0x130>
 800e0de:	7863      	ldrb	r3, [r4, #1]
 800e0e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e0e2:	d132      	bne.n	800e14a <_svfiprintf_r+0x186>
 800e0e4:	9b03      	ldr	r3, [sp, #12]
 800e0e6:	1d1a      	adds	r2, r3, #4
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	9203      	str	r2, [sp, #12]
 800e0ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e0f0:	3402      	adds	r4, #2
 800e0f2:	9305      	str	r3, [sp, #20]
 800e0f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e1b8 <_svfiprintf_r+0x1f4>
 800e0f8:	7821      	ldrb	r1, [r4, #0]
 800e0fa:	2203      	movs	r2, #3
 800e0fc:	4650      	mov	r0, sl
 800e0fe:	f7f2 f86f 	bl	80001e0 <memchr>
 800e102:	b138      	cbz	r0, 800e114 <_svfiprintf_r+0x150>
 800e104:	9b04      	ldr	r3, [sp, #16]
 800e106:	eba0 000a 	sub.w	r0, r0, sl
 800e10a:	2240      	movs	r2, #64	@ 0x40
 800e10c:	4082      	lsls	r2, r0
 800e10e:	4313      	orrs	r3, r2
 800e110:	3401      	adds	r4, #1
 800e112:	9304      	str	r3, [sp, #16]
 800e114:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e118:	4824      	ldr	r0, [pc, #144]	@ (800e1ac <_svfiprintf_r+0x1e8>)
 800e11a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e11e:	2206      	movs	r2, #6
 800e120:	f7f2 f85e 	bl	80001e0 <memchr>
 800e124:	2800      	cmp	r0, #0
 800e126:	d036      	beq.n	800e196 <_svfiprintf_r+0x1d2>
 800e128:	4b21      	ldr	r3, [pc, #132]	@ (800e1b0 <_svfiprintf_r+0x1ec>)
 800e12a:	bb1b      	cbnz	r3, 800e174 <_svfiprintf_r+0x1b0>
 800e12c:	9b03      	ldr	r3, [sp, #12]
 800e12e:	3307      	adds	r3, #7
 800e130:	f023 0307 	bic.w	r3, r3, #7
 800e134:	3308      	adds	r3, #8
 800e136:	9303      	str	r3, [sp, #12]
 800e138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e13a:	4433      	add	r3, r6
 800e13c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e13e:	e76a      	b.n	800e016 <_svfiprintf_r+0x52>
 800e140:	fb0c 3202 	mla	r2, ip, r2, r3
 800e144:	460c      	mov	r4, r1
 800e146:	2001      	movs	r0, #1
 800e148:	e7a8      	b.n	800e09c <_svfiprintf_r+0xd8>
 800e14a:	2300      	movs	r3, #0
 800e14c:	3401      	adds	r4, #1
 800e14e:	9305      	str	r3, [sp, #20]
 800e150:	4619      	mov	r1, r3
 800e152:	f04f 0c0a 	mov.w	ip, #10
 800e156:	4620      	mov	r0, r4
 800e158:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e15c:	3a30      	subs	r2, #48	@ 0x30
 800e15e:	2a09      	cmp	r2, #9
 800e160:	d903      	bls.n	800e16a <_svfiprintf_r+0x1a6>
 800e162:	2b00      	cmp	r3, #0
 800e164:	d0c6      	beq.n	800e0f4 <_svfiprintf_r+0x130>
 800e166:	9105      	str	r1, [sp, #20]
 800e168:	e7c4      	b.n	800e0f4 <_svfiprintf_r+0x130>
 800e16a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e16e:	4604      	mov	r4, r0
 800e170:	2301      	movs	r3, #1
 800e172:	e7f0      	b.n	800e156 <_svfiprintf_r+0x192>
 800e174:	ab03      	add	r3, sp, #12
 800e176:	9300      	str	r3, [sp, #0]
 800e178:	462a      	mov	r2, r5
 800e17a:	4b0e      	ldr	r3, [pc, #56]	@ (800e1b4 <_svfiprintf_r+0x1f0>)
 800e17c:	a904      	add	r1, sp, #16
 800e17e:	4638      	mov	r0, r7
 800e180:	f3af 8000 	nop.w
 800e184:	1c42      	adds	r2, r0, #1
 800e186:	4606      	mov	r6, r0
 800e188:	d1d6      	bne.n	800e138 <_svfiprintf_r+0x174>
 800e18a:	89ab      	ldrh	r3, [r5, #12]
 800e18c:	065b      	lsls	r3, r3, #25
 800e18e:	f53f af2d 	bmi.w	800dfec <_svfiprintf_r+0x28>
 800e192:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e194:	e72c      	b.n	800dff0 <_svfiprintf_r+0x2c>
 800e196:	ab03      	add	r3, sp, #12
 800e198:	9300      	str	r3, [sp, #0]
 800e19a:	462a      	mov	r2, r5
 800e19c:	4b05      	ldr	r3, [pc, #20]	@ (800e1b4 <_svfiprintf_r+0x1f0>)
 800e19e:	a904      	add	r1, sp, #16
 800e1a0:	4638      	mov	r0, r7
 800e1a2:	f000 f879 	bl	800e298 <_printf_i>
 800e1a6:	e7ed      	b.n	800e184 <_svfiprintf_r+0x1c0>
 800e1a8:	0800ee20 	.word	0x0800ee20
 800e1ac:	0800ee2a 	.word	0x0800ee2a
 800e1b0:	00000000 	.word	0x00000000
 800e1b4:	0800df0d 	.word	0x0800df0d
 800e1b8:	0800ee26 	.word	0x0800ee26

0800e1bc <_printf_common>:
 800e1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1c0:	4616      	mov	r6, r2
 800e1c2:	4698      	mov	r8, r3
 800e1c4:	688a      	ldr	r2, [r1, #8]
 800e1c6:	690b      	ldr	r3, [r1, #16]
 800e1c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e1cc:	4293      	cmp	r3, r2
 800e1ce:	bfb8      	it	lt
 800e1d0:	4613      	movlt	r3, r2
 800e1d2:	6033      	str	r3, [r6, #0]
 800e1d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e1d8:	4607      	mov	r7, r0
 800e1da:	460c      	mov	r4, r1
 800e1dc:	b10a      	cbz	r2, 800e1e2 <_printf_common+0x26>
 800e1de:	3301      	adds	r3, #1
 800e1e0:	6033      	str	r3, [r6, #0]
 800e1e2:	6823      	ldr	r3, [r4, #0]
 800e1e4:	0699      	lsls	r1, r3, #26
 800e1e6:	bf42      	ittt	mi
 800e1e8:	6833      	ldrmi	r3, [r6, #0]
 800e1ea:	3302      	addmi	r3, #2
 800e1ec:	6033      	strmi	r3, [r6, #0]
 800e1ee:	6825      	ldr	r5, [r4, #0]
 800e1f0:	f015 0506 	ands.w	r5, r5, #6
 800e1f4:	d106      	bne.n	800e204 <_printf_common+0x48>
 800e1f6:	f104 0a19 	add.w	sl, r4, #25
 800e1fa:	68e3      	ldr	r3, [r4, #12]
 800e1fc:	6832      	ldr	r2, [r6, #0]
 800e1fe:	1a9b      	subs	r3, r3, r2
 800e200:	42ab      	cmp	r3, r5
 800e202:	dc26      	bgt.n	800e252 <_printf_common+0x96>
 800e204:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e208:	6822      	ldr	r2, [r4, #0]
 800e20a:	3b00      	subs	r3, #0
 800e20c:	bf18      	it	ne
 800e20e:	2301      	movne	r3, #1
 800e210:	0692      	lsls	r2, r2, #26
 800e212:	d42b      	bmi.n	800e26c <_printf_common+0xb0>
 800e214:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e218:	4641      	mov	r1, r8
 800e21a:	4638      	mov	r0, r7
 800e21c:	47c8      	blx	r9
 800e21e:	3001      	adds	r0, #1
 800e220:	d01e      	beq.n	800e260 <_printf_common+0xa4>
 800e222:	6823      	ldr	r3, [r4, #0]
 800e224:	6922      	ldr	r2, [r4, #16]
 800e226:	f003 0306 	and.w	r3, r3, #6
 800e22a:	2b04      	cmp	r3, #4
 800e22c:	bf02      	ittt	eq
 800e22e:	68e5      	ldreq	r5, [r4, #12]
 800e230:	6833      	ldreq	r3, [r6, #0]
 800e232:	1aed      	subeq	r5, r5, r3
 800e234:	68a3      	ldr	r3, [r4, #8]
 800e236:	bf0c      	ite	eq
 800e238:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e23c:	2500      	movne	r5, #0
 800e23e:	4293      	cmp	r3, r2
 800e240:	bfc4      	itt	gt
 800e242:	1a9b      	subgt	r3, r3, r2
 800e244:	18ed      	addgt	r5, r5, r3
 800e246:	2600      	movs	r6, #0
 800e248:	341a      	adds	r4, #26
 800e24a:	42b5      	cmp	r5, r6
 800e24c:	d11a      	bne.n	800e284 <_printf_common+0xc8>
 800e24e:	2000      	movs	r0, #0
 800e250:	e008      	b.n	800e264 <_printf_common+0xa8>
 800e252:	2301      	movs	r3, #1
 800e254:	4652      	mov	r2, sl
 800e256:	4641      	mov	r1, r8
 800e258:	4638      	mov	r0, r7
 800e25a:	47c8      	blx	r9
 800e25c:	3001      	adds	r0, #1
 800e25e:	d103      	bne.n	800e268 <_printf_common+0xac>
 800e260:	f04f 30ff 	mov.w	r0, #4294967295
 800e264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e268:	3501      	adds	r5, #1
 800e26a:	e7c6      	b.n	800e1fa <_printf_common+0x3e>
 800e26c:	18e1      	adds	r1, r4, r3
 800e26e:	1c5a      	adds	r2, r3, #1
 800e270:	2030      	movs	r0, #48	@ 0x30
 800e272:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e276:	4422      	add	r2, r4
 800e278:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e27c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e280:	3302      	adds	r3, #2
 800e282:	e7c7      	b.n	800e214 <_printf_common+0x58>
 800e284:	2301      	movs	r3, #1
 800e286:	4622      	mov	r2, r4
 800e288:	4641      	mov	r1, r8
 800e28a:	4638      	mov	r0, r7
 800e28c:	47c8      	blx	r9
 800e28e:	3001      	adds	r0, #1
 800e290:	d0e6      	beq.n	800e260 <_printf_common+0xa4>
 800e292:	3601      	adds	r6, #1
 800e294:	e7d9      	b.n	800e24a <_printf_common+0x8e>
	...

0800e298 <_printf_i>:
 800e298:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e29c:	7e0f      	ldrb	r7, [r1, #24]
 800e29e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e2a0:	2f78      	cmp	r7, #120	@ 0x78
 800e2a2:	4691      	mov	r9, r2
 800e2a4:	4680      	mov	r8, r0
 800e2a6:	460c      	mov	r4, r1
 800e2a8:	469a      	mov	sl, r3
 800e2aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e2ae:	d807      	bhi.n	800e2c0 <_printf_i+0x28>
 800e2b0:	2f62      	cmp	r7, #98	@ 0x62
 800e2b2:	d80a      	bhi.n	800e2ca <_printf_i+0x32>
 800e2b4:	2f00      	cmp	r7, #0
 800e2b6:	f000 80d1 	beq.w	800e45c <_printf_i+0x1c4>
 800e2ba:	2f58      	cmp	r7, #88	@ 0x58
 800e2bc:	f000 80b8 	beq.w	800e430 <_printf_i+0x198>
 800e2c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e2c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e2c8:	e03a      	b.n	800e340 <_printf_i+0xa8>
 800e2ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e2ce:	2b15      	cmp	r3, #21
 800e2d0:	d8f6      	bhi.n	800e2c0 <_printf_i+0x28>
 800e2d2:	a101      	add	r1, pc, #4	@ (adr r1, 800e2d8 <_printf_i+0x40>)
 800e2d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e2d8:	0800e331 	.word	0x0800e331
 800e2dc:	0800e345 	.word	0x0800e345
 800e2e0:	0800e2c1 	.word	0x0800e2c1
 800e2e4:	0800e2c1 	.word	0x0800e2c1
 800e2e8:	0800e2c1 	.word	0x0800e2c1
 800e2ec:	0800e2c1 	.word	0x0800e2c1
 800e2f0:	0800e345 	.word	0x0800e345
 800e2f4:	0800e2c1 	.word	0x0800e2c1
 800e2f8:	0800e2c1 	.word	0x0800e2c1
 800e2fc:	0800e2c1 	.word	0x0800e2c1
 800e300:	0800e2c1 	.word	0x0800e2c1
 800e304:	0800e443 	.word	0x0800e443
 800e308:	0800e36f 	.word	0x0800e36f
 800e30c:	0800e3fd 	.word	0x0800e3fd
 800e310:	0800e2c1 	.word	0x0800e2c1
 800e314:	0800e2c1 	.word	0x0800e2c1
 800e318:	0800e465 	.word	0x0800e465
 800e31c:	0800e2c1 	.word	0x0800e2c1
 800e320:	0800e36f 	.word	0x0800e36f
 800e324:	0800e2c1 	.word	0x0800e2c1
 800e328:	0800e2c1 	.word	0x0800e2c1
 800e32c:	0800e405 	.word	0x0800e405
 800e330:	6833      	ldr	r3, [r6, #0]
 800e332:	1d1a      	adds	r2, r3, #4
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	6032      	str	r2, [r6, #0]
 800e338:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e33c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e340:	2301      	movs	r3, #1
 800e342:	e09c      	b.n	800e47e <_printf_i+0x1e6>
 800e344:	6833      	ldr	r3, [r6, #0]
 800e346:	6820      	ldr	r0, [r4, #0]
 800e348:	1d19      	adds	r1, r3, #4
 800e34a:	6031      	str	r1, [r6, #0]
 800e34c:	0606      	lsls	r6, r0, #24
 800e34e:	d501      	bpl.n	800e354 <_printf_i+0xbc>
 800e350:	681d      	ldr	r5, [r3, #0]
 800e352:	e003      	b.n	800e35c <_printf_i+0xc4>
 800e354:	0645      	lsls	r5, r0, #25
 800e356:	d5fb      	bpl.n	800e350 <_printf_i+0xb8>
 800e358:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e35c:	2d00      	cmp	r5, #0
 800e35e:	da03      	bge.n	800e368 <_printf_i+0xd0>
 800e360:	232d      	movs	r3, #45	@ 0x2d
 800e362:	426d      	negs	r5, r5
 800e364:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e368:	4858      	ldr	r0, [pc, #352]	@ (800e4cc <_printf_i+0x234>)
 800e36a:	230a      	movs	r3, #10
 800e36c:	e011      	b.n	800e392 <_printf_i+0xfa>
 800e36e:	6821      	ldr	r1, [r4, #0]
 800e370:	6833      	ldr	r3, [r6, #0]
 800e372:	0608      	lsls	r0, r1, #24
 800e374:	f853 5b04 	ldr.w	r5, [r3], #4
 800e378:	d402      	bmi.n	800e380 <_printf_i+0xe8>
 800e37a:	0649      	lsls	r1, r1, #25
 800e37c:	bf48      	it	mi
 800e37e:	b2ad      	uxthmi	r5, r5
 800e380:	2f6f      	cmp	r7, #111	@ 0x6f
 800e382:	4852      	ldr	r0, [pc, #328]	@ (800e4cc <_printf_i+0x234>)
 800e384:	6033      	str	r3, [r6, #0]
 800e386:	bf14      	ite	ne
 800e388:	230a      	movne	r3, #10
 800e38a:	2308      	moveq	r3, #8
 800e38c:	2100      	movs	r1, #0
 800e38e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e392:	6866      	ldr	r6, [r4, #4]
 800e394:	60a6      	str	r6, [r4, #8]
 800e396:	2e00      	cmp	r6, #0
 800e398:	db05      	blt.n	800e3a6 <_printf_i+0x10e>
 800e39a:	6821      	ldr	r1, [r4, #0]
 800e39c:	432e      	orrs	r6, r5
 800e39e:	f021 0104 	bic.w	r1, r1, #4
 800e3a2:	6021      	str	r1, [r4, #0]
 800e3a4:	d04b      	beq.n	800e43e <_printf_i+0x1a6>
 800e3a6:	4616      	mov	r6, r2
 800e3a8:	fbb5 f1f3 	udiv	r1, r5, r3
 800e3ac:	fb03 5711 	mls	r7, r3, r1, r5
 800e3b0:	5dc7      	ldrb	r7, [r0, r7]
 800e3b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e3b6:	462f      	mov	r7, r5
 800e3b8:	42bb      	cmp	r3, r7
 800e3ba:	460d      	mov	r5, r1
 800e3bc:	d9f4      	bls.n	800e3a8 <_printf_i+0x110>
 800e3be:	2b08      	cmp	r3, #8
 800e3c0:	d10b      	bne.n	800e3da <_printf_i+0x142>
 800e3c2:	6823      	ldr	r3, [r4, #0]
 800e3c4:	07df      	lsls	r7, r3, #31
 800e3c6:	d508      	bpl.n	800e3da <_printf_i+0x142>
 800e3c8:	6923      	ldr	r3, [r4, #16]
 800e3ca:	6861      	ldr	r1, [r4, #4]
 800e3cc:	4299      	cmp	r1, r3
 800e3ce:	bfde      	ittt	le
 800e3d0:	2330      	movle	r3, #48	@ 0x30
 800e3d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e3d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e3da:	1b92      	subs	r2, r2, r6
 800e3dc:	6122      	str	r2, [r4, #16]
 800e3de:	f8cd a000 	str.w	sl, [sp]
 800e3e2:	464b      	mov	r3, r9
 800e3e4:	aa03      	add	r2, sp, #12
 800e3e6:	4621      	mov	r1, r4
 800e3e8:	4640      	mov	r0, r8
 800e3ea:	f7ff fee7 	bl	800e1bc <_printf_common>
 800e3ee:	3001      	adds	r0, #1
 800e3f0:	d14a      	bne.n	800e488 <_printf_i+0x1f0>
 800e3f2:	f04f 30ff 	mov.w	r0, #4294967295
 800e3f6:	b004      	add	sp, #16
 800e3f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3fc:	6823      	ldr	r3, [r4, #0]
 800e3fe:	f043 0320 	orr.w	r3, r3, #32
 800e402:	6023      	str	r3, [r4, #0]
 800e404:	4832      	ldr	r0, [pc, #200]	@ (800e4d0 <_printf_i+0x238>)
 800e406:	2778      	movs	r7, #120	@ 0x78
 800e408:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e40c:	6823      	ldr	r3, [r4, #0]
 800e40e:	6831      	ldr	r1, [r6, #0]
 800e410:	061f      	lsls	r7, r3, #24
 800e412:	f851 5b04 	ldr.w	r5, [r1], #4
 800e416:	d402      	bmi.n	800e41e <_printf_i+0x186>
 800e418:	065f      	lsls	r7, r3, #25
 800e41a:	bf48      	it	mi
 800e41c:	b2ad      	uxthmi	r5, r5
 800e41e:	6031      	str	r1, [r6, #0]
 800e420:	07d9      	lsls	r1, r3, #31
 800e422:	bf44      	itt	mi
 800e424:	f043 0320 	orrmi.w	r3, r3, #32
 800e428:	6023      	strmi	r3, [r4, #0]
 800e42a:	b11d      	cbz	r5, 800e434 <_printf_i+0x19c>
 800e42c:	2310      	movs	r3, #16
 800e42e:	e7ad      	b.n	800e38c <_printf_i+0xf4>
 800e430:	4826      	ldr	r0, [pc, #152]	@ (800e4cc <_printf_i+0x234>)
 800e432:	e7e9      	b.n	800e408 <_printf_i+0x170>
 800e434:	6823      	ldr	r3, [r4, #0]
 800e436:	f023 0320 	bic.w	r3, r3, #32
 800e43a:	6023      	str	r3, [r4, #0]
 800e43c:	e7f6      	b.n	800e42c <_printf_i+0x194>
 800e43e:	4616      	mov	r6, r2
 800e440:	e7bd      	b.n	800e3be <_printf_i+0x126>
 800e442:	6833      	ldr	r3, [r6, #0]
 800e444:	6825      	ldr	r5, [r4, #0]
 800e446:	6961      	ldr	r1, [r4, #20]
 800e448:	1d18      	adds	r0, r3, #4
 800e44a:	6030      	str	r0, [r6, #0]
 800e44c:	062e      	lsls	r6, r5, #24
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	d501      	bpl.n	800e456 <_printf_i+0x1be>
 800e452:	6019      	str	r1, [r3, #0]
 800e454:	e002      	b.n	800e45c <_printf_i+0x1c4>
 800e456:	0668      	lsls	r0, r5, #25
 800e458:	d5fb      	bpl.n	800e452 <_printf_i+0x1ba>
 800e45a:	8019      	strh	r1, [r3, #0]
 800e45c:	2300      	movs	r3, #0
 800e45e:	6123      	str	r3, [r4, #16]
 800e460:	4616      	mov	r6, r2
 800e462:	e7bc      	b.n	800e3de <_printf_i+0x146>
 800e464:	6833      	ldr	r3, [r6, #0]
 800e466:	1d1a      	adds	r2, r3, #4
 800e468:	6032      	str	r2, [r6, #0]
 800e46a:	681e      	ldr	r6, [r3, #0]
 800e46c:	6862      	ldr	r2, [r4, #4]
 800e46e:	2100      	movs	r1, #0
 800e470:	4630      	mov	r0, r6
 800e472:	f7f1 feb5 	bl	80001e0 <memchr>
 800e476:	b108      	cbz	r0, 800e47c <_printf_i+0x1e4>
 800e478:	1b80      	subs	r0, r0, r6
 800e47a:	6060      	str	r0, [r4, #4]
 800e47c:	6863      	ldr	r3, [r4, #4]
 800e47e:	6123      	str	r3, [r4, #16]
 800e480:	2300      	movs	r3, #0
 800e482:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e486:	e7aa      	b.n	800e3de <_printf_i+0x146>
 800e488:	6923      	ldr	r3, [r4, #16]
 800e48a:	4632      	mov	r2, r6
 800e48c:	4649      	mov	r1, r9
 800e48e:	4640      	mov	r0, r8
 800e490:	47d0      	blx	sl
 800e492:	3001      	adds	r0, #1
 800e494:	d0ad      	beq.n	800e3f2 <_printf_i+0x15a>
 800e496:	6823      	ldr	r3, [r4, #0]
 800e498:	079b      	lsls	r3, r3, #30
 800e49a:	d413      	bmi.n	800e4c4 <_printf_i+0x22c>
 800e49c:	68e0      	ldr	r0, [r4, #12]
 800e49e:	9b03      	ldr	r3, [sp, #12]
 800e4a0:	4298      	cmp	r0, r3
 800e4a2:	bfb8      	it	lt
 800e4a4:	4618      	movlt	r0, r3
 800e4a6:	e7a6      	b.n	800e3f6 <_printf_i+0x15e>
 800e4a8:	2301      	movs	r3, #1
 800e4aa:	4632      	mov	r2, r6
 800e4ac:	4649      	mov	r1, r9
 800e4ae:	4640      	mov	r0, r8
 800e4b0:	47d0      	blx	sl
 800e4b2:	3001      	adds	r0, #1
 800e4b4:	d09d      	beq.n	800e3f2 <_printf_i+0x15a>
 800e4b6:	3501      	adds	r5, #1
 800e4b8:	68e3      	ldr	r3, [r4, #12]
 800e4ba:	9903      	ldr	r1, [sp, #12]
 800e4bc:	1a5b      	subs	r3, r3, r1
 800e4be:	42ab      	cmp	r3, r5
 800e4c0:	dcf2      	bgt.n	800e4a8 <_printf_i+0x210>
 800e4c2:	e7eb      	b.n	800e49c <_printf_i+0x204>
 800e4c4:	2500      	movs	r5, #0
 800e4c6:	f104 0619 	add.w	r6, r4, #25
 800e4ca:	e7f5      	b.n	800e4b8 <_printf_i+0x220>
 800e4cc:	0800ee31 	.word	0x0800ee31
 800e4d0:	0800ee42 	.word	0x0800ee42

0800e4d4 <memmove>:
 800e4d4:	4288      	cmp	r0, r1
 800e4d6:	b510      	push	{r4, lr}
 800e4d8:	eb01 0402 	add.w	r4, r1, r2
 800e4dc:	d902      	bls.n	800e4e4 <memmove+0x10>
 800e4de:	4284      	cmp	r4, r0
 800e4e0:	4623      	mov	r3, r4
 800e4e2:	d807      	bhi.n	800e4f4 <memmove+0x20>
 800e4e4:	1e43      	subs	r3, r0, #1
 800e4e6:	42a1      	cmp	r1, r4
 800e4e8:	d008      	beq.n	800e4fc <memmove+0x28>
 800e4ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e4ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e4f2:	e7f8      	b.n	800e4e6 <memmove+0x12>
 800e4f4:	4402      	add	r2, r0
 800e4f6:	4601      	mov	r1, r0
 800e4f8:	428a      	cmp	r2, r1
 800e4fa:	d100      	bne.n	800e4fe <memmove+0x2a>
 800e4fc:	bd10      	pop	{r4, pc}
 800e4fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e502:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e506:	e7f7      	b.n	800e4f8 <memmove+0x24>

0800e508 <memcpy>:
 800e508:	440a      	add	r2, r1
 800e50a:	4291      	cmp	r1, r2
 800e50c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e510:	d100      	bne.n	800e514 <memcpy+0xc>
 800e512:	4770      	bx	lr
 800e514:	b510      	push	{r4, lr}
 800e516:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e51a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e51e:	4291      	cmp	r1, r2
 800e520:	d1f9      	bne.n	800e516 <memcpy+0xe>
 800e522:	bd10      	pop	{r4, pc}

0800e524 <_realloc_r>:
 800e524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e528:	4607      	mov	r7, r0
 800e52a:	4614      	mov	r4, r2
 800e52c:	460d      	mov	r5, r1
 800e52e:	b921      	cbnz	r1, 800e53a <_realloc_r+0x16>
 800e530:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e534:	4611      	mov	r1, r2
 800e536:	f7ff bbad 	b.w	800dc94 <_malloc_r>
 800e53a:	b92a      	cbnz	r2, 800e548 <_realloc_r+0x24>
 800e53c:	f7ff fc9c 	bl	800de78 <_free_r>
 800e540:	4625      	mov	r5, r4
 800e542:	4628      	mov	r0, r5
 800e544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e548:	f000 f81a 	bl	800e580 <_malloc_usable_size_r>
 800e54c:	4284      	cmp	r4, r0
 800e54e:	4606      	mov	r6, r0
 800e550:	d802      	bhi.n	800e558 <_realloc_r+0x34>
 800e552:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e556:	d8f4      	bhi.n	800e542 <_realloc_r+0x1e>
 800e558:	4621      	mov	r1, r4
 800e55a:	4638      	mov	r0, r7
 800e55c:	f7ff fb9a 	bl	800dc94 <_malloc_r>
 800e560:	4680      	mov	r8, r0
 800e562:	b908      	cbnz	r0, 800e568 <_realloc_r+0x44>
 800e564:	4645      	mov	r5, r8
 800e566:	e7ec      	b.n	800e542 <_realloc_r+0x1e>
 800e568:	42b4      	cmp	r4, r6
 800e56a:	4622      	mov	r2, r4
 800e56c:	4629      	mov	r1, r5
 800e56e:	bf28      	it	cs
 800e570:	4632      	movcs	r2, r6
 800e572:	f7ff ffc9 	bl	800e508 <memcpy>
 800e576:	4629      	mov	r1, r5
 800e578:	4638      	mov	r0, r7
 800e57a:	f7ff fc7d 	bl	800de78 <_free_r>
 800e57e:	e7f1      	b.n	800e564 <_realloc_r+0x40>

0800e580 <_malloc_usable_size_r>:
 800e580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e584:	1f18      	subs	r0, r3, #4
 800e586:	2b00      	cmp	r3, #0
 800e588:	bfbc      	itt	lt
 800e58a:	580b      	ldrlt	r3, [r1, r0]
 800e58c:	18c0      	addlt	r0, r0, r3
 800e58e:	4770      	bx	lr

0800e590 <_init>:
 800e590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e592:	bf00      	nop
 800e594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e596:	bc08      	pop	{r3}
 800e598:	469e      	mov	lr, r3
 800e59a:	4770      	bx	lr

0800e59c <_fini>:
 800e59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e59e:	bf00      	nop
 800e5a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5a2:	bc08      	pop	{r3}
 800e5a4:	469e      	mov	lr, r3
 800e5a6:	4770      	bx	lr
