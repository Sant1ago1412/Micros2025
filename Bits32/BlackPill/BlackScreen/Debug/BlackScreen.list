
BlackScreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de18  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  0800dfb8  0800dfb8  0000efb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e464  0800e464  00010158  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e464  0800e464  0000f464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e46c  0800e46c  00010158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e46c  0800e46c  0000f46c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e470  0800e470  0000f470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  0800e474  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017b8  20000158  0800e5cc  00010158  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001910  0800e5cc  00010910  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010158  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a6f9  00000000  00000000  00010188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004313  00000000  00000000  0002a881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001828  00000000  00000000  0002eb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000129f  00000000  00000000  000303c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000765e  00000000  00000000  0003165f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f129  00000000  00000000  00038cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a00a0  00000000  00000000  00057de6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f7e86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a9c  00000000  00000000  000f7ecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000fe968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000158 	.word	0x20000158
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dfa0 	.word	0x0800dfa0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000015c 	.word	0x2000015c
 80001dc:	0800dfa0 	.word	0x0800dfa0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <UP_initprotocol>:
_work casts;
int16_t value=9999;
_eProtocolo estadoProtocolo;
_sDato *datosComLib;

void UP_initprotocol(_sDato *datosCom,uint8_t ringbuff){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	70fb      	strb	r3, [r7, #3]

		datosCom->bufferRx = malloc(ringbuff);
 80005b8:	78fb      	ldrb	r3, [r7, #3]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f00d f848 	bl	800d650 <malloc>
 80005c0:	4603      	mov	r3, r0
 80005c2:	461a      	mov	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	609a      	str	r2, [r3, #8]
	    datosCom->bufferTx = malloc(ringbuff);
 80005c8:	78fb      	ldrb	r3, [r7, #3]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f00d f840 	bl	800d650 <malloc>
 80005d0:	4603      	mov	r3, r0
 80005d2:	461a      	mov	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	60da      	str	r2, [r3, #12]
	    datosComLib=datosCom;
 80005d8:	4a03      	ldr	r2, [pc, #12]	@ (80005e8 <UP_initprotocol+0x3c>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6013      	str	r3, [r2, #0]

}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	2000017c 	.word	0x2000017c

080005ec <UP_sendInfo>:

void UP_sendInfo(uint8_t bufferAux[],uint8_t bytes){
 80005ec:	b490      	push	{r4, r7}
 80005ee:	b08c      	sub	sp, #48	@ 0x30
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	460b      	mov	r3, r1
 80005f6:	70fb      	strb	r3, [r7, #3]

    uint8_t bufAux[30], indiceAux=0,cks=0,i=0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80005fe:	2300      	movs	r3, #0
 8000600:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000604:	2300      	movs	r3, #0
 8000606:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    bufAux[indiceAux++]='U';
 800060a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800060e:	1c5a      	adds	r2, r3, #1
 8000610:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000614:	3330      	adds	r3, #48	@ 0x30
 8000616:	443b      	add	r3, r7
 8000618:	2255      	movs	r2, #85	@ 0x55
 800061a:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='N';
 800061e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000622:	1c5a      	adds	r2, r3, #1
 8000624:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000628:	3330      	adds	r3, #48	@ 0x30
 800062a:	443b      	add	r3, r7
 800062c:	224e      	movs	r2, #78	@ 0x4e
 800062e:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='E';
 8000632:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000636:	1c5a      	adds	r2, r3, #1
 8000638:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 800063c:	3330      	adds	r3, #48	@ 0x30
 800063e:	443b      	add	r3, r7
 8000640:	2245      	movs	r2, #69	@ 0x45
 8000642:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='R';
 8000646:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800064a:	1c5a      	adds	r2, r3, #1
 800064c:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000650:	3330      	adds	r3, #48	@ 0x30
 8000652:	443b      	add	r3, r7
 8000654:	2252      	movs	r2, #82	@ 0x52
 8000656:	f803 2c24 	strb.w	r2, [r3, #-36]

    bufAux[indiceAux++]=bytes;
 800065a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800065e:	1c5a      	adds	r2, r3, #1
 8000660:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000664:	3330      	adds	r3, #48	@ 0x30
 8000666:	443b      	add	r3, r7
 8000668:	78fa      	ldrb	r2, [r7, #3]
 800066a:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]=':';
 800066e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000672:	1c5a      	adds	r2, r3, #1
 8000674:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000678:	3330      	adds	r3, #48	@ 0x30
 800067a:	443b      	add	r3, r7
 800067c:	223a      	movs	r2, #58	@ 0x3a
 800067e:	f803 2c24 	strb.w	r2, [r3, #-36]

    for(i=0; i<bytes-1; i++)
 8000682:	2300      	movs	r3, #0
 8000684:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000688:	e012      	b.n	80006b0 <UP_sendInfo+0xc4>
        bufAux[indiceAux++] = bufferAux[i];
 800068a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	441a      	add	r2, r3
 8000692:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000696:	1c59      	adds	r1, r3, #1
 8000698:	f887 102f 	strb.w	r1, [r7, #47]	@ 0x2f
 800069c:	7812      	ldrb	r2, [r2, #0]
 800069e:	3330      	adds	r3, #48	@ 0x30
 80006a0:	443b      	add	r3, r7
 80006a2:	f803 2c24 	strb.w	r2, [r3, #-36]
    for(i=0; i<bytes-1; i++)
 80006a6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80006aa:	3301      	adds	r3, #1
 80006ac:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80006b0:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80006b4:	78fb      	ldrb	r3, [r7, #3]
 80006b6:	3b01      	subs	r3, #1
 80006b8:	429a      	cmp	r2, r3
 80006ba:	dbe6      	blt.n	800068a <UP_sendInfo+0x9e>

    cks=0;
 80006bc:	2300      	movs	r3, #0
 80006be:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    for(i=0 ;i<indiceAux;i++){
 80006c2:	2300      	movs	r3, #0
 80006c4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80006c8:	e022      	b.n	8000710 <UP_sendInfo+0x124>
        cks^= bufAux[i];
 80006ca:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80006ce:	3330      	adds	r3, #48	@ 0x30
 80006d0:	443b      	add	r3, r7
 80006d2:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 80006d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80006da:	4053      	eors	r3, r2
 80006dc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        datosComLib->bufferTx[datosComLib->indexWriteTx++]=bufAux[i];
 80006e0:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 80006e4:	4b19      	ldr	r3, [pc, #100]	@ (800074c <UP_sendInfo+0x160>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	68d8      	ldr	r0, [r3, #12]
 80006ea:	4b18      	ldr	r3, [pc, #96]	@ (800074c <UP_sendInfo+0x160>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	795a      	ldrb	r2, [r3, #5]
 80006f0:	1c54      	adds	r4, r2, #1
 80006f2:	b2e4      	uxtb	r4, r4
 80006f4:	715c      	strb	r4, [r3, #5]
 80006f6:	4613      	mov	r3, r2
 80006f8:	4403      	add	r3, r0
 80006fa:	f101 0230 	add.w	r2, r1, #48	@ 0x30
 80006fe:	443a      	add	r2, r7
 8000700:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 8000704:	701a      	strb	r2, [r3, #0]
    for(i=0 ;i<indiceAux;i++){
 8000706:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800070a:	3301      	adds	r3, #1
 800070c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000710:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000714:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000718:	429a      	cmp	r2, r3
 800071a:	d3d6      	bcc.n	80006ca <UP_sendInfo+0xde>
    }
     datosComLib->bufferTx[datosComLib->indexWriteTx++]=cks;
 800071c:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <UP_sendInfo+0x160>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	68d9      	ldr	r1, [r3, #12]
 8000722:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <UP_sendInfo+0x160>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	795a      	ldrb	r2, [r3, #5]
 8000728:	1c50      	adds	r0, r2, #1
 800072a:	b2c0      	uxtb	r0, r0
 800072c:	7158      	strb	r0, [r3, #5]
 800072e:	4613      	mov	r3, r2
 8000730:	440b      	add	r3, r1
 8000732:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000736:	701a      	strb	r2, [r3, #0]

     datosComLib->bytesTosend=indiceAux;
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <UP_sendInfo+0x160>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000740:	741a      	strb	r2, [r3, #16]

}
 8000742:	bf00      	nop
 8000744:	3730      	adds	r7, #48	@ 0x30
 8000746:	46bd      	mov	sp, r7
 8000748:	bc90      	pop	{r4, r7}
 800074a:	4770      	bx	lr
 800074c:	2000017c 	.word	0x2000017c

08000750 <UP_decodeHeader>:

void UP_decodeHeader(_sDato *datosComLib){
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]

    static uint8_t nBytes=0;

    uint8_t indexWriteRxCopy=datosComLib->indexWriteRx;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	78db      	ldrb	r3, [r3, #3]
 800075c:	73fb      	strb	r3, [r7, #15]

    while (datosComLib->indexReadRx!=indexWriteRxCopy)
 800075e:	e0e2      	b.n	8000926 <UP_decodeHeader+0x1d6>
    {
        switch (estadoProtocolo) {
 8000760:	4b76      	ldr	r3, [pc, #472]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b06      	cmp	r3, #6
 8000766:	f200 80d7 	bhi.w	8000918 <UP_decodeHeader+0x1c8>
 800076a:	a201      	add	r2, pc, #4	@ (adr r2, 8000770 <UP_decodeHeader+0x20>)
 800076c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000770:	0800078d 	.word	0x0800078d
 8000774:	080007b5 	.word	0x080007b5
 8000778:	080007e9 	.word	0x080007e9
 800077c:	0800081d 	.word	0x0800081d
 8000780:	08000851 	.word	0x08000851
 8000784:	08000879 	.word	0x08000879
 8000788:	080008bb 	.word	0x080008bb
            case START:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='U'){
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	689a      	ldr	r2, [r3, #8]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	791b      	ldrb	r3, [r3, #4]
 8000794:	1c59      	adds	r1, r3, #1
 8000796:	b2c8      	uxtb	r0, r1
 8000798:	6879      	ldr	r1, [r7, #4]
 800079a:	7108      	strb	r0, [r1, #4]
 800079c:	4413      	add	r3, r2
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b55      	cmp	r3, #85	@ 0x55
 80007a2:	f040 80bd 	bne.w	8000920 <UP_decodeHeader+0x1d0>
                    estadoProtocolo=HEADER_1;
 80007a6:	4b65      	ldr	r3, [pc, #404]	@ (800093c <UP_decodeHeader+0x1ec>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	701a      	strb	r2, [r3, #0]
                    datosComLib->cheksumRx=0;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2200      	movs	r2, #0
 80007b0:	709a      	strb	r2, [r3, #2]
                }
                break;
 80007b2:	e0b5      	b.n	8000920 <UP_decodeHeader+0x1d0>
            case HEADER_1:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='N')
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	689a      	ldr	r2, [r3, #8]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	791b      	ldrb	r3, [r3, #4]
 80007bc:	1c59      	adds	r1, r3, #1
 80007be:	b2c8      	uxtb	r0, r1
 80007c0:	6879      	ldr	r1, [r7, #4]
 80007c2:	7108      	strb	r0, [r1, #4]
 80007c4:	4413      	add	r3, r2
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b4e      	cmp	r3, #78	@ 0x4e
 80007ca:	d103      	bne.n	80007d4 <UP_decodeHeader+0x84>
                   estadoProtocolo=HEADER_2;
 80007cc:	4b5b      	ldr	r3, [pc, #364]	@ (800093c <UP_decodeHeader+0x1ec>)
 80007ce:	2202      	movs	r2, #2
 80007d0:	701a      	strb	r2, [r3, #0]
                else{
                    datosComLib->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 80007d2:	e0a8      	b.n	8000926 <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	791b      	ldrb	r3, [r3, #4]
 80007d8:	3b01      	subs	r3, #1
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 80007e0:	4b56      	ldr	r3, [pc, #344]	@ (800093c <UP_decodeHeader+0x1ec>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
                break;
 80007e6:	e09e      	b.n	8000926 <UP_decodeHeader+0x1d6>
            case HEADER_2:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='E')
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	689a      	ldr	r2, [r3, #8]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	791b      	ldrb	r3, [r3, #4]
 80007f0:	1c59      	adds	r1, r3, #1
 80007f2:	b2c8      	uxtb	r0, r1
 80007f4:	6879      	ldr	r1, [r7, #4]
 80007f6:	7108      	strb	r0, [r1, #4]
 80007f8:	4413      	add	r3, r2
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b45      	cmp	r3, #69	@ 0x45
 80007fe:	d103      	bne.n	8000808 <UP_decodeHeader+0xb8>
                    estadoProtocolo=HEADER_3;
 8000800:	4b4e      	ldr	r3, [pc, #312]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000802:	2203      	movs	r2, #3
 8000804:	701a      	strb	r2, [r3, #0]
                else{
                    datosComLib->indexReadRx--;
                   estadoProtocolo=START;
                }
                break;
 8000806:	e08e      	b.n	8000926 <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	791b      	ldrb	r3, [r3, #4]
 800080c:	3b01      	subs	r3, #1
 800080e:	b2da      	uxtb	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	711a      	strb	r2, [r3, #4]
                   estadoProtocolo=START;
 8000814:	4b49      	ldr	r3, [pc, #292]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
                break;
 800081a:	e084      	b.n	8000926 <UP_decodeHeader+0x1d6>
			case HEADER_3:
				if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='R')
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	689a      	ldr	r2, [r3, #8]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	791b      	ldrb	r3, [r3, #4]
 8000824:	1c59      	adds	r1, r3, #1
 8000826:	b2c8      	uxtb	r0, r1
 8000828:	6879      	ldr	r1, [r7, #4]
 800082a:	7108      	strb	r0, [r1, #4]
 800082c:	4413      	add	r3, r2
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b52      	cmp	r3, #82	@ 0x52
 8000832:	d103      	bne.n	800083c <UP_decodeHeader+0xec>
					estadoProtocolo=NBYTES;
 8000834:	4b41      	ldr	r3, [pc, #260]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000836:	2204      	movs	r2, #4
 8000838:	701a      	strb	r2, [r3, #0]
				else{
					datosComLib->indexReadRx--;
				    estadoProtocolo=START;
				}
            break;
 800083a:	e074      	b.n	8000926 <UP_decodeHeader+0x1d6>
					datosComLib->indexReadRx--;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	791b      	ldrb	r3, [r3, #4]
 8000840:	3b01      	subs	r3, #1
 8000842:	b2da      	uxtb	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	711a      	strb	r2, [r3, #4]
				    estadoProtocolo=START;
 8000848:	4b3c      	ldr	r3, [pc, #240]	@ (800093c <UP_decodeHeader+0x1ec>)
 800084a:	2200      	movs	r2, #0
 800084c:	701a      	strb	r2, [r3, #0]
            break;
 800084e:	e06a      	b.n	8000926 <UP_decodeHeader+0x1d6>
            case NBYTES:
                datosComLib->indexStart=datosComLib->indexReadRx;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	791a      	ldrb	r2, [r3, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	705a      	strb	r2, [r3, #1]
                nBytes=datosComLib->bufferRx[datosComLib->indexReadRx++];
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	689a      	ldr	r2, [r3, #8]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	791b      	ldrb	r3, [r3, #4]
 8000860:	1c59      	adds	r1, r3, #1
 8000862:	b2c8      	uxtb	r0, r1
 8000864:	6879      	ldr	r1, [r7, #4]
 8000866:	7108      	strb	r0, [r1, #4]
 8000868:	4413      	add	r3, r2
 800086a:	781a      	ldrb	r2, [r3, #0]
 800086c:	4b34      	ldr	r3, [pc, #208]	@ (8000940 <UP_decodeHeader+0x1f0>)
 800086e:	701a      	strb	r2, [r3, #0]
                estadoProtocolo=TOKEN;
 8000870:	4b32      	ldr	r3, [pc, #200]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000872:	2205      	movs	r2, #5
 8000874:	701a      	strb	r2, [r3, #0]
                break;
 8000876:	e056      	b.n	8000926 <UP_decodeHeader+0x1d6>
            case TOKEN:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]==':'){
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	689a      	ldr	r2, [r3, #8]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	791b      	ldrb	r3, [r3, #4]
 8000880:	1c59      	adds	r1, r3, #1
 8000882:	b2c8      	uxtb	r0, r1
 8000884:	6879      	ldr	r1, [r7, #4]
 8000886:	7108      	strb	r0, [r1, #4]
 8000888:	4413      	add	r3, r2
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b3a      	cmp	r3, #58	@ 0x3a
 800088e:	d10a      	bne.n	80008a6 <UP_decodeHeader+0x156>
                   estadoProtocolo=PAYLOAD;
 8000890:	4b2a      	ldr	r3, [pc, #168]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000892:	2206      	movs	r2, #6
 8000894:	701a      	strb	r2, [r3, #0]
                    datosComLib->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 8000896:	4b2a      	ldr	r3, [pc, #168]	@ (8000940 <UP_decodeHeader+0x1f0>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	709a      	strb	r2, [r3, #2]
                }
                else{
                    datosComLib->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 80008a4:	e03f      	b.n	8000926 <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	791b      	ldrb	r3, [r3, #4]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 80008b2:	4b22      	ldr	r3, [pc, #136]	@ (800093c <UP_decodeHeader+0x1ec>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
                break;
 80008b8:	e035      	b.n	8000926 <UP_decodeHeader+0x1d6>
            case PAYLOAD:
                if (nBytes>1){
 80008ba:	4b21      	ldr	r3, [pc, #132]	@ (8000940 <UP_decodeHeader+0x1f0>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d90f      	bls.n	80008e2 <UP_decodeHeader+0x192>
                    datosComLib->cheksumRx ^= datosComLib->bufferRx[datosComLib->indexReadRx++];
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	689a      	ldr	r2, [r3, #8]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	791b      	ldrb	r3, [r3, #4]
 80008ca:	1c59      	adds	r1, r3, #1
 80008cc:	b2c8      	uxtb	r0, r1
 80008ce:	6879      	ldr	r1, [r7, #4]
 80008d0:	7108      	strb	r0, [r1, #4]
 80008d2:	4413      	add	r3, r2
 80008d4:	781a      	ldrb	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	789b      	ldrb	r3, [r3, #2]
 80008da:	4053      	eors	r3, r2
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	709a      	strb	r2, [r3, #2]
                }
                nBytes--;
 80008e2:	4b17      	ldr	r3, [pc, #92]	@ (8000940 <UP_decodeHeader+0x1f0>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4b15      	ldr	r3, [pc, #84]	@ (8000940 <UP_decodeHeader+0x1f0>)
 80008ec:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){
 80008ee:	4b14      	ldr	r3, [pc, #80]	@ (8000940 <UP_decodeHeader+0x1f0>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d116      	bne.n	8000924 <UP_decodeHeader+0x1d4>
                    estadoProtocolo=START;
 80008f6:	4b11      	ldr	r3, [pc, #68]	@ (800093c <UP_decodeHeader+0x1ec>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
                    if(datosComLib->cheksumRx == datosComLib->bufferRx[datosComLib->indexReadRx]){
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	789a      	ldrb	r2, [r3, #2]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	6879      	ldr	r1, [r7, #4]
 8000906:	7909      	ldrb	r1, [r1, #4]
 8000908:	440b      	add	r3, r1
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	429a      	cmp	r2, r3
 800090e:	d109      	bne.n	8000924 <UP_decodeHeader+0x1d4>
                    	UP_decodeData(datosComLib);
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f000 f817 	bl	8000944 <UP_decodeData>
                    }
                }

                break;
 8000916:	e005      	b.n	8000924 <UP_decodeHeader+0x1d4>
            default:
                estadoProtocolo=START;
 8000918:	4b08      	ldr	r3, [pc, #32]	@ (800093c <UP_decodeHeader+0x1ec>)
 800091a:	2200      	movs	r2, #0
 800091c:	701a      	strb	r2, [r3, #0]
                break;
 800091e:	e002      	b.n	8000926 <UP_decodeHeader+0x1d6>
                break;
 8000920:	bf00      	nop
 8000922:	e000      	b.n	8000926 <UP_decodeHeader+0x1d6>
                break;
 8000924:	bf00      	nop
    while (datosComLib->indexReadRx!=indexWriteRxCopy)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	791b      	ldrb	r3, [r3, #4]
 800092a:	7bfa      	ldrb	r2, [r7, #15]
 800092c:	429a      	cmp	r2, r3
 800092e:	f47f af17 	bne.w	8000760 <UP_decodeHeader+0x10>
        }
    }
}
 8000932:	bf00      	nop
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000178 	.word	0x20000178
 8000940:	20000180 	.word	0x20000180

08000944 <UP_decodeData>:

void UP_decodeData(_sDato *datosComLib){
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]

    uint8_t bufAux[20], indiceAux=0,bytes=0;
 800094c:	2300      	movs	r3, #0
 800094e:	77bb      	strb	r3, [r7, #30]
 8000950:	2300      	movs	r3, #0
 8000952:	77fb      	strb	r3, [r7, #31]

    switch (datosComLib->bufferRx[datosComLib->indexStart+2])//CMD EN LA POSICION 2
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	689a      	ldr	r2, [r3, #8]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	785b      	ldrb	r3, [r3, #1]
 800095c:	3302      	adds	r3, #2
 800095e:	4413      	add	r3, r2
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2bf2      	cmp	r3, #242	@ 0xf2
 8000964:	d01f      	beq.n	80009a6 <UP_decodeData+0x62>
 8000966:	2bf2      	cmp	r3, #242	@ 0xf2
 8000968:	dc46      	bgt.n	80009f8 <UP_decodeData+0xb4>
 800096a:	2bf1      	cmp	r3, #241	@ 0xf1
 800096c:	d010      	beq.n	8000990 <UP_decodeData+0x4c>
 800096e:	2bf1      	cmp	r3, #241	@ 0xf1
 8000970:	dc42      	bgt.n	80009f8 <UP_decodeData+0xb4>
 8000972:	2b00      	cmp	r3, #0
 8000974:	d020      	beq.n	80009b8 <UP_decodeData+0x74>
 8000976:	2bf0      	cmp	r3, #240	@ 0xf0
 8000978:	d13e      	bne.n	80009f8 <UP_decodeData+0xb4>
    {
    case ALIVE:

        bufAux[indiceAux++]=ALIVE;
 800097a:	7fbb      	ldrb	r3, [r7, #30]
 800097c:	1c5a      	adds	r2, r3, #1
 800097e:	77ba      	strb	r2, [r7, #30]
 8000980:	3320      	adds	r3, #32
 8000982:	443b      	add	r3, r7
 8000984:	22f0      	movs	r2, #240	@ 0xf0
 8000986:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;//aca debo darle CMD+CKS+PAYLOAD
 800098a:	2302      	movs	r3, #2
 800098c:	77fb      	strb	r3, [r7, #31]

    break;
 800098e:	e03e      	b.n	8000a0e <UP_decodeData+0xca>
    case FIRMWARE:

		bufAux[indiceAux++]=FIRMWARE;
 8000990:	7fbb      	ldrb	r3, [r7, #30]
 8000992:	1c5a      	adds	r2, r3, #1
 8000994:	77ba      	strb	r2, [r7, #30]
 8000996:	3320      	adds	r3, #32
 8000998:	443b      	add	r3, r7
 800099a:	22f1      	movs	r2, #241	@ 0xf1
 800099c:	f803 2c18 	strb.w	r2, [r3, #-24]
		bytes=0x02;
 80009a0:	2302      	movs	r3, #2
 80009a2:	77fb      	strb	r3, [r7, #31]

    break;
 80009a4:	e033      	b.n	8000a0e <UP_decodeData+0xca>

    case TEXT:

		bufAux[indiceAux++]=TEXT;
 80009a6:	7fbb      	ldrb	r3, [r7, #30]
 80009a8:	1c5a      	adds	r2, r3, #1
 80009aa:	77ba      	strb	r2, [r7, #30]
 80009ac:	3320      	adds	r3, #32
 80009ae:	443b      	add	r3, r7
 80009b0:	22f2      	movs	r2, #242	@ 0xf2
 80009b2:	f803 2c18 	strb.w	r2, [r3, #-24]
//		bytes=;

    break;
 80009b6:	e02a      	b.n	8000a0e <UP_decodeData+0xca>

    case ENGINES:
    	bufAux[indiceAux++]=ENGINES;
 80009b8:	7fbb      	ldrb	r3, [r7, #30]
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	77ba      	strb	r2, [r7, #30]
 80009be:	3320      	adds	r3, #32
 80009c0:	443b      	add	r3, r7
 80009c2:	2200      	movs	r2, #0
 80009c4:	f803 2c18 	strb.w	r2, [r3, #-24]

    	casts.u8[0]=datosComLib->bufferRx[datosComLib->indexStart+3];
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	689a      	ldr	r2, [r3, #8]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	785b      	ldrb	r3, [r3, #1]
 80009d0:	3303      	adds	r3, #3
 80009d2:	4413      	add	r3, r2
 80009d4:	781a      	ldrb	r2, [r3, #0]
 80009d6:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <UP_decodeData+0xe0>)
 80009d8:	701a      	strb	r2, [r3, #0]
    	casts.u8[1]=datosComLib->bufferRx[datosComLib->indexStart+4];
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	689a      	ldr	r2, [r3, #8]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	785b      	ldrb	r3, [r3, #1]
 80009e2:	3304      	adds	r3, #4
 80009e4:	4413      	add	r3, r2
 80009e6:	781a      	ldrb	r2, [r3, #0]
 80009e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <UP_decodeData+0xe0>)
 80009ea:	705a      	strb	r2, [r3, #1]

    	value = casts.i16[0]; //ver aca que pasa para recuperar el valor de la velocidad
 80009ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000a24 <UP_decodeData+0xe0>)
 80009ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 80009f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a28 <UP_decodeData+0xe4>)
 80009f4:	801a      	strh	r2, [r3, #0]

    break;
 80009f6:	e00a      	b.n	8000a0e <UP_decodeData+0xca>
    default:

        bufAux[indiceAux++]=0xFF;
 80009f8:	7fbb      	ldrb	r3, [r7, #30]
 80009fa:	1c5a      	adds	r2, r3, #1
 80009fc:	77ba      	strb	r2, [r7, #30]
 80009fe:	3320      	adds	r3, #32
 8000a00:	443b      	add	r3, r7
 8000a02:	22ff      	movs	r2, #255	@ 0xff
 8000a04:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	77fb      	strb	r3, [r7, #31]

    break;
 8000a0c:	bf00      	nop
    }

    UP_sendInfo(bufAux,bytes);
 8000a0e:	7ffa      	ldrb	r2, [r7, #31]
 8000a10:	f107 0308 	add.w	r3, r7, #8
 8000a14:	4611      	mov	r1, r2
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff fde8 	bl	80005ec <UP_sendInfo>
}
 8000a1c:	bf00      	nop
 8000a1e:	3720      	adds	r7, #32
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000174 	.word	0x20000174
 8000a28:	20000000 	.word	0x20000000

08000a2c <UP_datafromUSB>:

void UP_datafromUSB(uint8_t *buf, uint16_t length) {
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	460b      	mov	r3, r1
 8000a36:	807b      	strh	r3, [r7, #2]

  uint16_t i;

  for (i = 0; i < length; i++) {
 8000a38:	2300      	movs	r3, #0
 8000a3a:	81fb      	strh	r3, [r7, #14]
 8000a3c:	e016      	b.n	8000a6c <UP_datafromUSB+0x40>
	datosComLib->bufferRx[datosComLib->indexWriteRx] = buf[i];
 8000a3e:	89fb      	ldrh	r3, [r7, #14]
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	441a      	add	r2, r3
 8000a44:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <UP_datafromUSB+0x58>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	490e      	ldr	r1, [pc, #56]	@ (8000a84 <UP_datafromUSB+0x58>)
 8000a4c:	6809      	ldr	r1, [r1, #0]
 8000a4e:	78c9      	ldrb	r1, [r1, #3]
 8000a50:	b2c9      	uxtb	r1, r1
 8000a52:	440b      	add	r3, r1
 8000a54:	7812      	ldrb	r2, [r2, #0]
 8000a56:	701a      	strb	r2, [r3, #0]
	datosComLib->indexWriteRx++;
 8000a58:	4b0a      	ldr	r3, [pc, #40]	@ (8000a84 <UP_datafromUSB+0x58>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	78da      	ldrb	r2, [r3, #3]
 8000a5e:	b2d2      	uxtb	r2, r2
 8000a60:	3201      	adds	r2, #1
 8000a62:	b2d2      	uxtb	r2, r2
 8000a64:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < length; i++) {
 8000a66:	89fb      	ldrh	r3, [r7, #14]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	81fb      	strh	r3, [r7, #14]
 8000a6c:	89fa      	ldrh	r2, [r7, #14]
 8000a6e:	887b      	ldrh	r3, [r7, #2]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d3e4      	bcc.n	8000a3e <UP_datafromUSB+0x12>
  }
}
 8000a74:	bf00      	nop
 8000a76:	bf00      	nop
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	2000017c 	.word	0x2000017c

08000a88 <en_InitENG>:
 *      Author: Baccon
 */
#include "engines.h"
#include "stdlib.h"

void en_InitENG(_sEng *engines,uint16_t maxSpeed){
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	807b      	strh	r3, [r7, #2]

	engines->estado=FREE;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2202      	movs	r2, #2
 8000a98:	709a      	strb	r2, [r3, #2]
	engines->speed=0;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	801a      	strh	r2, [r3, #0]
	engines->maxSpeed=maxSpeed;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	887a      	ldrh	r2, [r7, #2]
 8000aa4:	809a      	strh	r2, [r3, #4]

}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
	...

08000ab4 <HAL_ADC_ConvCpltCallback>:
//void I2C_1_Abstract_Mem_Read_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b088      	sub	sp, #32
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]

	uint8_t u=0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	77fb      	strb	r3, [r7, #31]
	char palabra[18];

	for(u=0;u<NUM_CHANNELS;u++){
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	77fb      	strb	r3, [r7, #31]
 8000ac4:	e00c      	b.n	8000ae0 <HAL_ADC_ConvCpltCallback+0x2c>

//		casts.u16[0]=adcBuffer[u];
		sprintf(&palabra[0],"Channel %d:%i\n",u,adcBuffer[u]);
 8000ac6:	7ffa      	ldrb	r2, [r7, #31]
 8000ac8:	7ffb      	ldrb	r3, [r7, #31]
 8000aca:	490b      	ldr	r1, [pc, #44]	@ (8000af8 <HAL_ADC_ConvCpltCallback+0x44>)
 8000acc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ad0:	f107 000c 	add.w	r0, r7, #12
 8000ad4:	4909      	ldr	r1, [pc, #36]	@ (8000afc <HAL_ADC_ConvCpltCallback+0x48>)
 8000ad6:	f00c fe71 	bl	800d7bc <siprintf>
	for(u=0;u<NUM_CHANNELS;u++){
 8000ada:	7ffb      	ldrb	r3, [r7, #31]
 8000adc:	3301      	adds	r3, #1
 8000ade:	77fb      	strb	r3, [r7, #31]
 8000ae0:	7ffb      	ldrb	r3, [r7, #31]
 8000ae2:	2b07      	cmp	r3, #7
 8000ae4:	d9ef      	bls.n	8000ac6 <HAL_ADC_ConvCpltCallback+0x12>
//		memcpy(datosComSerie.bufferTx,palabra,sizeof(palabra));
//		datosComSerie.indexWriteTx  += sizeof(palabra);
	}
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000ae6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aea:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000aec:	f002 fbe9 	bl	80032c2 <HAL_GPIO_TogglePin>
}
 8000af0:	bf00      	nop
 8000af2:	3720      	adds	r7, #32
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000384 	.word	0x20000384
 8000afc:	0800dfb8 	.word	0x0800dfb8
 8000b00:	40020800 	.word	0x40020800

08000b04 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM11) {
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a04      	ldr	r2, [pc, #16]	@ (8000b24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d101      	bne.n	8000b1a <HAL_TIM_PeriodElapsedCallback+0x16>
		task10ms();//cambiar esto por una bandera
 8000b16:	f000 f823 	bl	8000b60 <task10ms>
	}
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40014800 	.word	0x40014800

08000b28 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress==SSD1306_I2C_ADDR){
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b34:	2b78      	cmp	r3, #120	@ 0x78
 8000b36:	d101      	bne.n	8000b3c <HAL_I2C_MemTxCpltCallback+0x14>
		SSD1306_DMAREADY();
 8000b38:	f000 fe5c 	bl	80017f4 <SSD1306_DMAREADY>
	}
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress==MPU6050_ADDR){
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b50:	2bd0      	cmp	r3, #208	@ 0xd0
 8000b52:	d101      	bne.n	8000b58 <HAL_I2C_MemRxCpltCallback+0x14>
		MPU6050_DMAREADY();
 8000b54:	f000 fc10 	bl	8001378 <MPU6050_DMAREADY>
	}
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <task10ms>:

void task10ms(){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
//		if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 5000) == HAL_OK){
//
//			SISINIT=TRUE;
//		}
//	}
	if(ticker%10==0){
 8000b64:	4b1d      	ldr	r3, [pc, #116]	@ (8000bdc <task10ms+0x7c>)
 8000b66:	781a      	ldrb	r2, [r3, #0]
 8000b68:	4b1d      	ldr	r3, [pc, #116]	@ (8000be0 <task10ms+0x80>)
 8000b6a:	fba3 1302 	umull	r1, r3, r3, r2
 8000b6e:	08d9      	lsrs	r1, r3, #3
 8000b70:	460b      	mov	r3, r1
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	440b      	add	r3, r1
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d104      	bne.n	8000b8a <task10ms+0x2a>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000b80:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b84:	4817      	ldr	r0, [pc, #92]	@ (8000be4 <task10ms+0x84>)
 8000b86:	f002 fb9c 	bl	80032c2 <HAL_GPIO_TogglePin>

	}
	if(ticker%200==0){
 8000b8a:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <task10ms+0x7c>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	4a16      	ldr	r2, [pc, #88]	@ (8000be8 <task10ms+0x88>)
 8000b90:	fba2 1203 	umull	r1, r2, r2, r3
 8000b94:	0992      	lsrs	r2, r2, #6
 8000b96:	21c8      	movs	r1, #200	@ 0xc8
 8000b98:	fb01 f202 	mul.w	r2, r1, r2
 8000b9c:	1a9b      	subs	r3, r3, r2
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d112      	bne.n	8000bca <task10ms+0x6a>
		if(SISINIT){
 8000ba4:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <task10ms+0x8c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d003      	beq.n	8000bba <task10ms+0x5a>
			SSD1306_Clear();
 8000bb2:	f000 fde3 	bl	800177c <SSD1306_Clear>
			SSD1306_RefreshReady();
 8000bb6:	f000 fe29 	bl	800180c <SSD1306_RefreshReady>
		}
		SISINIT=TRUE;
 8000bba:	4a0c      	ldr	r2, [pc, #48]	@ (8000bec <task10ms+0x8c>)
 8000bbc:	7813      	ldrb	r3, [r2, #0]
 8000bbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bc2:	7013      	strb	r3, [r2, #0]
		ticker=0;
 8000bc4:	4b05      	ldr	r3, [pc, #20]	@ (8000bdc <task10ms+0x7c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
	}
	ticker++;
 8000bca:	4b04      	ldr	r3, [pc, #16]	@ (8000bdc <task10ms+0x7c>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4b02      	ldr	r3, [pc, #8]	@ (8000bdc <task10ms+0x7c>)
 8000bd4:	701a      	strb	r2, [r3, #0]
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200003a6 	.word	0x200003a6
 8000be0:	cccccccd 	.word	0xcccccccd
 8000be4:	40020800 	.word	0x40020800
 8000be8:	51eb851f 	.word	0x51eb851f
 8000bec:	20000394 	.word	0x20000394

08000bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf6:	f001 f8d3 	bl	8001da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bfa:	f000 f86f 	bl	8000cdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bfe:	f000 fa23 	bl	8001048 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c02:	f000 f9f9 	bl	8000ff8 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000c06:	f00b ffa5 	bl	800cb54 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8000c0a:	f000 f94f 	bl	8000eac <MX_TIM3_Init>
  MX_TIM11_Init();
 8000c0e:	f000 f9cf 	bl	8000fb0 <MX_TIM11_Init>
  MX_ADC1_Init();
 8000c12:	f000 f8cb 	bl	8000dac <MX_ADC1_Init>
  MX_I2C1_Init();
 8000c16:	f000 f91b 	bl	8000e50 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000c1a:	4823      	ldr	r0, [pc, #140]	@ (8000ca8 <main+0xb8>)
 8000c1c:	f007 fcfa 	bl	8008614 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8000c20:	4822      	ldr	r0, [pc, #136]	@ (8000cac <main+0xbc>)
 8000c22:	f007 fcf7 	bl	8008614 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000c26:	2104      	movs	r1, #4
 8000c28:	481f      	ldr	r0, [pc, #124]	@ (8000ca8 <main+0xb8>)
 8000c2a:	f007 fdaf 	bl	800878c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c2e:	2100      	movs	r1, #0
 8000c30:	481d      	ldr	r0, [pc, #116]	@ (8000ca8 <main+0xb8>)
 8000c32:	f007 fdab 	bl	800878c <HAL_TIM_PWM_Start>

  Display_Set_I2C_Master_Transmit(&I2C_DMA_Transmit, &I2C_1_Abstract_Master_Transmit_Blocking);
 8000c36:	491e      	ldr	r1, [pc, #120]	@ (8000cb0 <main+0xc0>)
 8000c38:	481e      	ldr	r0, [pc, #120]	@ (8000cb4 <main+0xc4>)
 8000c3a:	f000 fdc5 	bl	80017c8 <Display_Set_I2C_Master_Transmit>
  MPU6050_I2C_Blocking(&I2C_RBlocking,&I2C_1_Abstract_Mem_Write_Blocking);
 8000c3e:	491e      	ldr	r1, [pc, #120]	@ (8000cb8 <main+0xc8>)
 8000c40:	481e      	ldr	r0, [pc, #120]	@ (8000cbc <main+0xcc>)
 8000c42:	f000 fb83 	bl	800134c <MPU6050_I2C_Blocking>
  MPU6050_NonBlocking_DMA(&I2C_DMA_Transmit,&I2C_DMA_Recive);
 8000c46:	491e      	ldr	r1, [pc, #120]	@ (8000cc0 <main+0xd0>)
 8000c48:	481a      	ldr	r0, [pc, #104]	@ (8000cb4 <main+0xc4>)
 8000c4a:	f000 fb69 	bl	8001320 <MPU6050_NonBlocking_DMA>
  SSD1306_Init();
 8000c4e:	f000 fc07 	bl	8001460 <SSD1306_Init>

  CDC_AttachRxData(&UP_datafromUSB);
 8000c52:	481c      	ldr	r0, [pc, #112]	@ (8000cc4 <main+0xd4>)
 8000c54:	f00c f8d2 	bl	800cdfc <CDC_AttachRxData>
  myFlags.allFlags=0;
 8000c58:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc8 <main+0xd8>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
  UP_initprotocol(&datosComSerie,(uint8_t)RINGBUFFER);
 8000c5e:	2100      	movs	r1, #0
 8000c60:	481a      	ldr	r0, [pc, #104]	@ (8000ccc <main+0xdc>)
 8000c62:	f7ff fca3 	bl	80005ac <UP_initprotocol>
  en_InitENG(&motorL, (uint16_t)htim3.Instance->ARR);
 8000c66:	4b10      	ldr	r3, [pc, #64]	@ (8000ca8 <main+0xb8>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4817      	ldr	r0, [pc, #92]	@ (8000cd0 <main+0xe0>)
 8000c72:	f7ff ff09 	bl	8000a88 <en_InitENG>
  en_InitENG(&motorR, (uint16_t)htim3.Instance->ARR);
 8000c76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <main+0xb8>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4814      	ldr	r0, [pc, #80]	@ (8000cd4 <main+0xe4>)
 8000c82:	f7ff ff01 	bl	8000a88 <en_InitENG>
  SSD1306_DrawBitmap(0, 0, LogoMicros, 128, 64, WHITE);
 8000c86:	2301      	movs	r3, #1
 8000c88:	9301      	str	r3, [sp, #4]
 8000c8a:	2340      	movs	r3, #64	@ 0x40
 8000c8c:	9300      	str	r3, [sp, #0]
 8000c8e:	2380      	movs	r3, #128	@ 0x80
 8000c90:	4a11      	ldr	r2, [pc, #68]	@ (8000cd8 <main+0xe8>)
 8000c92:	2100      	movs	r1, #0
 8000c94:	2000      	movs	r0, #0
 8000c96:	f000 fb7b 	bl	8001390 <SSD1306_DrawBitmap>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	UP_comunicationsTask(&datosComSerie);
 8000c9a:	480c      	ldr	r0, [pc, #48]	@ (8000ccc <main+0xdc>)
 8000c9c:	f000 fa60 	bl	8001160 <UP_comunicationsTask>
	SSD1306_UpdateScreen();
 8000ca0:	f000 fc90 	bl	80015c4 <SSD1306_UpdateScreen>
	UP_comunicationsTask(&datosComSerie);
 8000ca4:	bf00      	nop
 8000ca6:	e7f8      	b.n	8000c9a <main+0xaa>
 8000ca8:	200002e0 	.word	0x200002e0
 8000cac:	20000328 	.word	0x20000328
 8000cb0:	0800122d 	.word	0x0800122d
 8000cb4:	080011f5 	.word	0x080011f5
 8000cb8:	08001261 	.word	0x08001261
 8000cbc:	080012d9 	.word	0x080012d9
 8000cc0:	080012a1 	.word	0x080012a1
 8000cc4:	08000a2d 	.word	0x08000a2d
 8000cc8:	20000394 	.word	0x20000394
 8000ccc:	20000370 	.word	0x20000370
 8000cd0:	20000398 	.word	0x20000398
 8000cd4:	200003a0 	.word	0x200003a0
 8000cd8:	0800e010 	.word	0x0800e010

08000cdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b094      	sub	sp, #80	@ 0x50
 8000ce0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce2:	f107 0320 	add.w	r3, r7, #32
 8000ce6:	2230      	movs	r2, #48	@ 0x30
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f00c fd88 	bl	800d800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d00:	2300      	movs	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	4b27      	ldr	r3, [pc, #156]	@ (8000da4 <SystemClock_Config+0xc8>)
 8000d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d08:	4a26      	ldr	r2, [pc, #152]	@ (8000da4 <SystemClock_Config+0xc8>)
 8000d0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d10:	4b24      	ldr	r3, [pc, #144]	@ (8000da4 <SystemClock_Config+0xc8>)
 8000d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	4b21      	ldr	r3, [pc, #132]	@ (8000da8 <SystemClock_Config+0xcc>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a20      	ldr	r2, [pc, #128]	@ (8000da8 <SystemClock_Config+0xcc>)
 8000d26:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d2a:	6013      	str	r3, [r2, #0]
 8000d2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000da8 <SystemClock_Config+0xcc>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d40:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d42:	2302      	movs	r3, #2
 8000d44:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d46:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000d4c:	2319      	movs	r3, #25
 8000d4e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000d50:	23c0      	movs	r3, #192	@ 0xc0
 8000d52:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d54:	2302      	movs	r3, #2
 8000d56:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d58:	2304      	movs	r3, #4
 8000d5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d5c:	f107 0320 	add.w	r3, r7, #32
 8000d60:	4618      	mov	r0, r3
 8000d62:	f006 ffc3 	bl	8007cec <HAL_RCC_OscConfig>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d6c:	f000 fad2 	bl	8001314 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d70:	230f      	movs	r3, #15
 8000d72:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d74:	2302      	movs	r3, #2
 8000d76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d86:	f107 030c 	add.w	r3, r7, #12
 8000d8a:	2103      	movs	r1, #3
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f007 fa25 	bl	80081dc <HAL_RCC_ClockConfig>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d98:	f000 fabc 	bl	8001314 <Error_Handler>
  }
}
 8000d9c:	bf00      	nop
 8000d9e:	3750      	adds	r7, #80	@ 0x50
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40007000 	.word	0x40007000

08000dac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000db2:	463b      	mov	r3, r7
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dbe:	4b21      	ldr	r3, [pc, #132]	@ (8000e44 <MX_ADC1_Init+0x98>)
 8000dc0:	4a21      	ldr	r2, [pc, #132]	@ (8000e48 <MX_ADC1_Init+0x9c>)
 8000dc2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dc4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e44 <MX_ADC1_Init+0x98>)
 8000dc6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000dca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e44 <MX_ADC1_Init+0x98>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e44 <MX_ADC1_Init+0x98>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dd8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e44 <MX_ADC1_Init+0x98>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dde:	4b19      	ldr	r3, [pc, #100]	@ (8000e44 <MX_ADC1_Init+0x98>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000de6:	4b17      	ldr	r3, [pc, #92]	@ (8000e44 <MX_ADC1_Init+0x98>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dec:	4b15      	ldr	r3, [pc, #84]	@ (8000e44 <MX_ADC1_Init+0x98>)
 8000dee:	4a17      	ldr	r2, [pc, #92]	@ (8000e4c <MX_ADC1_Init+0xa0>)
 8000df0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000df2:	4b14      	ldr	r3, [pc, #80]	@ (8000e44 <MX_ADC1_Init+0x98>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000df8:	4b12      	ldr	r3, [pc, #72]	@ (8000e44 <MX_ADC1_Init+0x98>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dfe:	4b11      	ldr	r3, [pc, #68]	@ (8000e44 <MX_ADC1_Init+0x98>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e06:	4b0f      	ldr	r3, [pc, #60]	@ (8000e44 <MX_ADC1_Init+0x98>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e0c:	480d      	ldr	r0, [pc, #52]	@ (8000e44 <MX_ADC1_Init+0x98>)
 8000e0e:	f001 f85d 	bl	8001ecc <HAL_ADC_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e18:	f000 fa7c 	bl	8001314 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e20:	2301      	movs	r3, #1
 8000e22:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e28:	463b      	mov	r3, r7
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4805      	ldr	r0, [pc, #20]	@ (8000e44 <MX_ADC1_Init+0x98>)
 8000e2e:	f001 f9b5 	bl	800219c <HAL_ADC_ConfigChannel>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e38:	f000 fa6c 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e3c:	bf00      	nop
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000184 	.word	0x20000184
 8000e48:	40012000 	.word	0x40012000
 8000e4c:	0f000001 	.word	0x0f000001

08000e50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e54:	4b12      	ldr	r3, [pc, #72]	@ (8000ea0 <MX_I2C1_Init+0x50>)
 8000e56:	4a13      	ldr	r2, [pc, #76]	@ (8000ea4 <MX_I2C1_Init+0x54>)
 8000e58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ea0 <MX_I2C1_Init+0x50>)
 8000e5c:	4a12      	ldr	r2, [pc, #72]	@ (8000ea8 <MX_I2C1_Init+0x58>)
 8000e5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea0 <MX_I2C1_Init+0x50>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea0 <MX_I2C1_Init+0x50>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea0 <MX_I2C1_Init+0x50>)
 8000e6e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e74:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea0 <MX_I2C1_Init+0x50>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ea0 <MX_I2C1_Init+0x50>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e80:	4b07      	ldr	r3, [pc, #28]	@ (8000ea0 <MX_I2C1_Init+0x50>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e86:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <MX_I2C1_Init+0x50>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e8c:	4804      	ldr	r0, [pc, #16]	@ (8000ea0 <MX_I2C1_Init+0x50>)
 8000e8e:	f002 fa33 	bl	80032f8 <HAL_I2C_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e98:	f000 fa3c 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	200001cc 	.word	0x200001cc
 8000ea4:	40005400 	.word	0x40005400
 8000ea8:	00061a80 	.word	0x00061a80

08000eac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08e      	sub	sp, #56	@ 0x38
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec0:	f107 0320 	add.w	r3, r7, #32
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
 8000ed8:	615a      	str	r2, [r3, #20]
 8000eda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000edc:	4b32      	ldr	r3, [pc, #200]	@ (8000fa8 <MX_TIM3_Init+0xfc>)
 8000ede:	4a33      	ldr	r2, [pc, #204]	@ (8000fac <MX_TIM3_Init+0x100>)
 8000ee0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8000ee2:	4b31      	ldr	r3, [pc, #196]	@ (8000fa8 <MX_TIM3_Init+0xfc>)
 8000ee4:	220f      	movs	r2, #15
 8000ee6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee8:	4b2f      	ldr	r3, [pc, #188]	@ (8000fa8 <MX_TIM3_Init+0xfc>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8000eee:	4b2e      	ldr	r3, [pc, #184]	@ (8000fa8 <MX_TIM3_Init+0xfc>)
 8000ef0:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000ef4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef6:	4b2c      	ldr	r3, [pc, #176]	@ (8000fa8 <MX_TIM3_Init+0xfc>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000efc:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa8 <MX_TIM3_Init+0xfc>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f02:	4829      	ldr	r0, [pc, #164]	@ (8000fa8 <MX_TIM3_Init+0xfc>)
 8000f04:	f007 fb36 	bl	8008574 <HAL_TIM_Base_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000f0e:	f000 fa01 	bl	8001314 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f16:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f18:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4822      	ldr	r0, [pc, #136]	@ (8000fa8 <MX_TIM3_Init+0xfc>)
 8000f20:	f007 fe96 	bl	8008c50 <HAL_TIM_ConfigClockSource>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000f2a:	f000 f9f3 	bl	8001314 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f2e:	481e      	ldr	r0, [pc, #120]	@ (8000fa8 <MX_TIM3_Init+0xfc>)
 8000f30:	f007 fbd2 	bl	80086d8 <HAL_TIM_PWM_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000f3a:	f000 f9eb 	bl	8001314 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f46:	f107 0320 	add.w	r3, r7, #32
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4816      	ldr	r0, [pc, #88]	@ (8000fa8 <MX_TIM3_Init+0xfc>)
 8000f4e:	f008 fa41 	bl	80093d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000f58:	f000 f9dc 	bl	8001314 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f5c:	2360      	movs	r3, #96	@ 0x60
 8000f5e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	2200      	movs	r2, #0
 8000f70:	4619      	mov	r1, r3
 8000f72:	480d      	ldr	r0, [pc, #52]	@ (8000fa8 <MX_TIM3_Init+0xfc>)
 8000f74:	f007 fdaa 	bl	8008acc <HAL_TIM_PWM_ConfigChannel>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000f7e:	f000 f9c9 	bl	8001314 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2204      	movs	r2, #4
 8000f86:	4619      	mov	r1, r3
 8000f88:	4807      	ldr	r0, [pc, #28]	@ (8000fa8 <MX_TIM3_Init+0xfc>)
 8000f8a:	f007 fd9f 	bl	8008acc <HAL_TIM_PWM_ConfigChannel>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000f94:	f000 f9be 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f98:	4803      	ldr	r0, [pc, #12]	@ (8000fa8 <MX_TIM3_Init+0xfc>)
 8000f9a:	f000 fdd5 	bl	8001b48 <HAL_TIM_MspPostInit>

}
 8000f9e:	bf00      	nop
 8000fa0:	3738      	adds	r7, #56	@ 0x38
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200002e0 	.word	0x200002e0
 8000fac:	40000400 	.word	0x40000400

08000fb0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff0 <MX_TIM11_Init+0x40>)
 8000fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8000ff4 <MX_TIM11_Init+0x44>)
 8000fb8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 95;
 8000fba:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff0 <MX_TIM11_Init+0x40>)
 8000fbc:	225f      	movs	r2, #95	@ 0x5f
 8000fbe:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <MX_TIM11_Init+0x40>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 9999;
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff0 <MX_TIM11_Init+0x40>)
 8000fc8:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000fcc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fce:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <MX_TIM11_Init+0x40>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <MX_TIM11_Init+0x40>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000fda:	4805      	ldr	r0, [pc, #20]	@ (8000ff0 <MX_TIM11_Init+0x40>)
 8000fdc:	f007 faca 	bl	8008574 <HAL_TIM_Base_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000fe6:	f000 f995 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000328 	.word	0x20000328
 8000ff4:	40014800 	.word	0x40014800

08000ff8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	4b10      	ldr	r3, [pc, #64]	@ (8001044 <MX_DMA_Init+0x4c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	4a0f      	ldr	r2, [pc, #60]	@ (8001044 <MX_DMA_Init+0x4c>)
 8001008:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800100c:	6313      	str	r3, [r2, #48]	@ 0x30
 800100e:	4b0d      	ldr	r3, [pc, #52]	@ (8001044 <MX_DMA_Init+0x4c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2100      	movs	r1, #0
 800101e:	200b      	movs	r0, #11
 8001020:	f001 fbcf 	bl	80027c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001024:	200b      	movs	r0, #11
 8001026:	f001 fbe8 	bl	80027fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2100      	movs	r1, #0
 800102e:	200c      	movs	r0, #12
 8001030:	f001 fbc7 	bl	80027c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001034:	200c      	movs	r0, #12
 8001036:	f001 fbe0 	bl	80027fa <HAL_NVIC_EnableIRQ>

}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800

08001048 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	@ 0x28
 800104c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	4b3b      	ldr	r3, [pc, #236]	@ (8001150 <MX_GPIO_Init+0x108>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	4a3a      	ldr	r2, [pc, #232]	@ (8001150 <MX_GPIO_Init+0x108>)
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	6313      	str	r3, [r2, #48]	@ 0x30
 800106e:	4b38      	ldr	r3, [pc, #224]	@ (8001150 <MX_GPIO_Init+0x108>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	4b34      	ldr	r3, [pc, #208]	@ (8001150 <MX_GPIO_Init+0x108>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	4a33      	ldr	r2, [pc, #204]	@ (8001150 <MX_GPIO_Init+0x108>)
 8001084:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001088:	6313      	str	r3, [r2, #48]	@ 0x30
 800108a:	4b31      	ldr	r3, [pc, #196]	@ (8001150 <MX_GPIO_Init+0x108>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	4b2d      	ldr	r3, [pc, #180]	@ (8001150 <MX_GPIO_Init+0x108>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	4a2c      	ldr	r2, [pc, #176]	@ (8001150 <MX_GPIO_Init+0x108>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001150 <MX_GPIO_Init+0x108>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	4b26      	ldr	r3, [pc, #152]	@ (8001150 <MX_GPIO_Init+0x108>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	4a25      	ldr	r2, [pc, #148]	@ (8001150 <MX_GPIO_Init+0x108>)
 80010bc:	f043 0302 	orr.w	r3, r3, #2
 80010c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c2:	4b23      	ldr	r3, [pc, #140]	@ (8001150 <MX_GPIO_Init+0x108>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010d4:	481f      	ldr	r0, [pc, #124]	@ (8001154 <MX_GPIO_Init+0x10c>)
 80010d6:	f002 f8db 	bl	8003290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Out2_2_Pin|Out2_1_Pin|Out1_2_Pin, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	f44f 4106 	mov.w	r1, #34304	@ 0x8600
 80010e0:	481d      	ldr	r0, [pc, #116]	@ (8001158 <MX_GPIO_Init+0x110>)
 80010e2:	f002 f8d5 	bl	8003290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Out1_1_GPIO_Port, Out1_1_Pin, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2108      	movs	r1, #8
 80010ea:	481c      	ldr	r0, [pc, #112]	@ (800115c <MX_GPIO_Init+0x114>)
 80010ec:	f002 f8d0 	bl	8003290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80010f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	4812      	ldr	r0, [pc, #72]	@ (8001154 <MX_GPIO_Init+0x10c>)
 800110a:	f001 ff3d 	bl	8002f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : Out2_2_Pin Out2_1_Pin Out1_2_Pin */
  GPIO_InitStruct.Pin = Out2_2_Pin|Out2_1_Pin|Out1_2_Pin;
 800110e:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 8001112:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001114:	2301      	movs	r3, #1
 8001116:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	4619      	mov	r1, r3
 8001126:	480c      	ldr	r0, [pc, #48]	@ (8001158 <MX_GPIO_Init+0x110>)
 8001128:	f001 ff2e 	bl	8002f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : Out1_1_Pin */
  GPIO_InitStruct.Pin = Out1_1_Pin;
 800112c:	2308      	movs	r3, #8
 800112e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001130:	2301      	movs	r3, #1
 8001132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Out1_1_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4619      	mov	r1, r3
 8001142:	4806      	ldr	r0, [pc, #24]	@ (800115c <MX_GPIO_Init+0x114>)
 8001144:	f001 ff20 	bl	8002f88 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001148:	bf00      	nop
 800114a:	3728      	adds	r7, #40	@ 0x28
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40023800 	.word	0x40023800
 8001154:	40020800 	.word	0x40020800
 8001158:	40020000 	.word	0x40020000
 800115c:	40020400 	.word	0x40020400

08001160 <UP_comunicationsTask>:

/* USER CODE BEGIN 4 */
void UP_comunicationsTask(_sDato *datosCom){
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]

	if(datosCom->indexReadRx!=datosCom->indexWriteRx ){
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	791a      	ldrb	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	78db      	ldrb	r3, [r3, #3]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	429a      	cmp	r2, r3
 8001174:	d007      	beq.n	8001186 <UP_comunicationsTask+0x26>
		UP_decodeHeader(datosCom);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff faea 	bl	8000750 <UP_decodeHeader>
		datosCom->indexReadRx=datosCom->indexWriteRx;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	78db      	ldrb	r3, [r3, #3]
 8001180:	b2da      	uxtb	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	711a      	strb	r2, [r3, #4]
	}

	if(datosCom->indexReadTx!=datosCom->indexWriteTx ){
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	799a      	ldrb	r2, [r3, #6]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	795b      	ldrb	r3, [r3, #5]
 800118e:	429a      	cmp	r2, r3
 8001190:	d02b      	beq.n	80011ea <UP_comunicationsTask+0x8a>

		if(datosCom->indexWriteTx > datosCom->indexReadTx){
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	795a      	ldrb	r2, [r3, #5]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	799b      	ldrb	r3, [r3, #6]
 800119a:	429a      	cmp	r2, r3
 800119c:	d908      	bls.n	80011b0 <UP_comunicationsTask+0x50>
				datosCom->bytesTosend = datosCom->indexWriteTx - datosCom->indexReadTx;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	795a      	ldrb	r2, [r3, #5]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	799b      	ldrb	r3, [r3, #6]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	741a      	strb	r2, [r3, #16]
 80011ae:	e006      	b.n	80011be <UP_comunicationsTask+0x5e>
		    }else{
		    	datosCom->bytesTosend =  sizeof(datosCom->bufferRx) - datosCom->indexReadTx;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	799b      	ldrb	r3, [r3, #6]
 80011b4:	f1c3 0304 	rsb	r3, r3, #4
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	741a      	strb	r2, [r3, #16]
		    }
		    if(CDC_Transmit_FS(&datosCom->bufferTx[datosCom->indexReadTx], datosCom->bytesTosend) == USBD_OK){
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	7992      	ldrb	r2, [r2, #6]
 80011c6:	441a      	add	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	7c1b      	ldrb	r3, [r3, #16]
 80011cc:	4619      	mov	r1, r3
 80011ce:	4610      	mov	r0, r2
 80011d0:	f00b fddc 	bl	800cd8c <CDC_Transmit_FS>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d107      	bne.n	80011ea <UP_comunicationsTask+0x8a>
		    	datosCom->indexReadTx += datosCom->bytesTosend;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	799a      	ldrb	r2, [r3, #6]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7c1b      	ldrb	r3, [r3, #16]
 80011e2:	4413      	add	r3, r2
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	719a      	strb	r2, [r3, #6]
		    }
	}
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <I2C_DMA_Transmit>:

uint8_t I2C_DMA_Transmit(uint16_t Dev_Address,uint16_t reg,uint8_t *p_Data, uint16_t _Size){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af02      	add	r7, sp, #8
 80011fa:	60ba      	str	r2, [r7, #8]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4603      	mov	r3, r0
 8001200:	81fb      	strh	r3, [r7, #14]
 8001202:	460b      	mov	r3, r1
 8001204:	81bb      	strh	r3, [r7, #12]
 8001206:	4613      	mov	r3, r2
 8001208:	80fb      	strh	r3, [r7, #6]

//	if(HAL_I2C_Master_Transmit_DMA(&hi2c1, Dev_Address, p_Data, _Size)==HAL_OK)
//		return 1;
//	HAL_I2C_Master_Transmit_DMA(&hi2c1, Dev_Address, p_Data, _Size);
	HAL_I2C_Mem_Write_DMA(&hi2c1, Dev_Address, reg, 1, p_Data, _Size);
 800120a:	89ba      	ldrh	r2, [r7, #12]
 800120c:	89f9      	ldrh	r1, [r7, #14]
 800120e:	88fb      	ldrh	r3, [r7, #6]
 8001210:	9301      	str	r3, [sp, #4]
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	2301      	movs	r3, #1
 8001218:	4803      	ldr	r0, [pc, #12]	@ (8001228 <I2C_DMA_Transmit+0x34>)
 800121a:	f002 fdf1 	bl	8003e00 <HAL_I2C_Mem_Write_DMA>
//		return 1;

//	 if(HAL_I2C_Master_Transmit_DMA(&hi2c1, Dev_Address, p_Data, _Size)==HAL_OK){
//		 return 1;
//	 }
	 return 1;
 800121e:	2301      	movs	r3, #1
//		return 1;
//	HAL_I2C_Mem_Write(&hi2c1, Dev_Address, 0x40, 1, p_Data, _Size, 10);
}
 8001220:	4618      	mov	r0, r3
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	200001cc 	.word	0x200001cc

0800122c <I2C_1_Abstract_Master_Transmit_Blocking>:

uint8_t I2C_1_Abstract_Master_Transmit_Blocking(uint16_t Dev_Address, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af02      	add	r7, sp, #8
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	4603      	mov	r3, r0
 8001238:	81fb      	strh	r3, [r7, #14]
 800123a:	4613      	mov	r3, r2
 800123c:	81bb      	strh	r3, [r7, #12]
	return (uint8_t)HAL_I2C_Master_Transmit(&hi2c1, Dev_Address, p_Data, _Size, _Timeout);
 800123e:	89ba      	ldrh	r2, [r7, #12]
 8001240:	89f9      	ldrh	r1, [r7, #14]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	4613      	mov	r3, r2
 8001248:	68ba      	ldr	r2, [r7, #8]
 800124a:	4804      	ldr	r0, [pc, #16]	@ (800125c <I2C_1_Abstract_Master_Transmit_Blocking+0x30>)
 800124c:	f002 f9ae 	bl	80035ac <HAL_I2C_Master_Transmit>
 8001250:	4603      	mov	r3, r0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200001cc 	.word	0x200001cc

08001260 <I2C_1_Abstract_Mem_Write_Blocking>:

uint8_t I2C_1_Abstract_Mem_Write_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af04      	add	r7, sp, #16
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	4603      	mov	r3, r0
 800126a:	80fb      	strh	r3, [r7, #6]
 800126c:	460b      	mov	r3, r1
 800126e:	717b      	strb	r3, [r7, #5]
 8001270:	4613      	mov	r3, r2
 8001272:	713b      	strb	r3, [r7, #4]
	return (uint8_t)HAL_I2C_Mem_Write(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 8001274:	797b      	ldrb	r3, [r7, #5]
 8001276:	b29a      	uxth	r2, r3
 8001278:	793b      	ldrb	r3, [r7, #4]
 800127a:	b298      	uxth	r0, r3
 800127c:	88f9      	ldrh	r1, [r7, #6]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	9302      	str	r3, [sp, #8]
 8001282:	8a3b      	ldrh	r3, [r7, #16]
 8001284:	9301      	str	r3, [sp, #4]
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	4603      	mov	r3, r0
 800128c:	4803      	ldr	r0, [pc, #12]	@ (800129c <I2C_1_Abstract_Mem_Write_Blocking+0x3c>)
 800128e:	f002 fa8b 	bl	80037a8 <HAL_I2C_Mem_Write>
 8001292:	4603      	mov	r3, r0
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	200001cc 	.word	0x200001cc

080012a0 <I2C_DMA_Recive>:

uint8_t I2C_DMA_Recive(uint16_t Dev_Address,uint16_t reg,uint8_t *p_Data, uint16_t _Size){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af02      	add	r7, sp, #8
 80012a6:	60ba      	str	r2, [r7, #8]
 80012a8:	461a      	mov	r2, r3
 80012aa:	4603      	mov	r3, r0
 80012ac:	81fb      	strh	r3, [r7, #14]
 80012ae:	460b      	mov	r3, r1
 80012b0:	81bb      	strh	r3, [r7, #12]
 80012b2:	4613      	mov	r3, r2
 80012b4:	80fb      	strh	r3, [r7, #6]
	HAL_I2C_Mem_Read_DMA(&hi2c1, Dev_Address, reg, 1, p_Data, _Size);
 80012b6:	89ba      	ldrh	r2, [r7, #12]
 80012b8:	89f9      	ldrh	r1, [r7, #14]
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	9301      	str	r3, [sp, #4]
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	2301      	movs	r3, #1
 80012c4:	4803      	ldr	r0, [pc, #12]	@ (80012d4 <I2C_DMA_Recive+0x34>)
 80012c6:	f002 fef9 	bl	80040bc <HAL_I2C_Mem_Read_DMA>
	return 1;
 80012ca:	2301      	movs	r3, #1
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	200001cc 	.word	0x200001cc

080012d8 <I2C_RBlocking>:

uint8_t I2C_RBlocking(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af04      	add	r7, sp, #16
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	4603      	mov	r3, r0
 80012e2:	81fb      	strh	r3, [r7, #14]
 80012e4:	460b      	mov	r3, r1
 80012e6:	81bb      	strh	r3, [r7, #12]
 80012e8:	4613      	mov	r3, r2
 80012ea:	817b      	strh	r3, [r7, #10]

	HAL_I2C_Mem_Read(&hi2c1, DevAddress, MemAddress, MemAddSize, pData, Size,100);
 80012ec:	8978      	ldrh	r0, [r7, #10]
 80012ee:	89ba      	ldrh	r2, [r7, #12]
 80012f0:	89f9      	ldrh	r1, [r7, #14]
 80012f2:	2364      	movs	r3, #100	@ 0x64
 80012f4:	9302      	str	r3, [sp, #8]
 80012f6:	8b3b      	ldrh	r3, [r7, #24]
 80012f8:	9301      	str	r3, [sp, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	4603      	mov	r3, r0
 8001300:	4803      	ldr	r0, [pc, #12]	@ (8001310 <I2C_RBlocking+0x38>)
 8001302:	f002 fb4b 	bl	800399c <HAL_I2C_Mem_Read>
	return 1;
 8001306:	2301      	movs	r3, #1

}
 8001308:	4618      	mov	r0, r3
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	200001cc 	.word	0x200001cc

08001314 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001318:	b672      	cpsid	i
}
 800131a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <Error_Handler+0x8>

08001320 <MPU6050_NonBlocking_DMA>:
    Kalman->P[1][1] -= K[1] * P01_temp;

    return Kalman->angle;
};

void MPU6050_NonBlocking_DMA(uint8_t (*Master_Transmit)(uint16_t DevAddress,uint16_t reg,uint8_t *pData, uint16_t Size),uint8_t (*Master_Recive)(uint16_t DevAddress,uint16_t reg,uint8_t *pData, uint16_t Size)){
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
	I2C_Transmit = Master_Transmit;
 800132a:	4a06      	ldr	r2, [pc, #24]	@ (8001344 <MPU6050_NonBlocking_DMA+0x24>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6013      	str	r3, [r2, #0]
	I2C_Recive = Master_Recive;
 8001330:	4a05      	ldr	r2, [pc, #20]	@ (8001348 <MPU6050_NonBlocking_DMA+0x28>)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	6013      	str	r3, [r2, #0]
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	200003ac 	.word	0x200003ac
 8001348:	200003a8 	.word	0x200003a8

0800134c <MPU6050_I2C_Blocking>:
void MPU6050_I2C_Blocking(uint8_t (*Recive_Blocking)(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size),uint8_t (*Transmit_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout)){
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
	I2C_Recive_Blocking = Recive_Blocking;
 8001356:	4a06      	ldr	r2, [pc, #24]	@ (8001370 <MPU6050_I2C_Blocking+0x24>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6013      	str	r3, [r2, #0]
	I2C_Transmit_Blocking = Transmit_Blocking;
 800135c:	4a05      	ldr	r2, [pc, #20]	@ (8001374 <MPU6050_I2C_Blocking+0x28>)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	6013      	str	r3, [r2, #0]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	200003b0 	.word	0x200003b0
 8001374:	200003b4 	.word	0x200003b4

08001378 <MPU6050_DMAREADY>:
void MPU6050_DMAREADY(){
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
	DMAREADY=1;
 800137c:	4b03      	ldr	r3, [pc, #12]	@ (800138c <MPU6050_DMAREADY+0x14>)
 800137e:	2201      	movs	r2, #1
 8001380:	701a      	strb	r2, [r3, #0]
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	200003b8 	.word	0x200003b8

08001390 <SSD1306_DrawBitmap>:
	if(i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
	else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
}

void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60ba      	str	r2, [r7, #8]
 8001398:	461a      	mov	r2, r3
 800139a:	4603      	mov	r3, r0
 800139c:	81fb      	strh	r3, [r7, #14]
 800139e:	460b      	mov	r3, r1
 80013a0:	81bb      	strh	r3, [r7, #12]
 80013a2:	4613      	mov	r3, r2
 80013a4:	80fb      	strh	r3, [r7, #6]
	int16_t byteWidth = (w + 7) / 8;
 80013a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013aa:	3307      	adds	r3, #7
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	da00      	bge.n	80013b2 <SSD1306_DrawBitmap+0x22>
 80013b0:	3307      	adds	r3, #7
 80013b2:	10db      	asrs	r3, r3, #3
 80013b4:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	75fb      	strb	r3, [r7, #23]
    for(int16_t j=0; j<h; j++, y++)
 80013ba:	2300      	movs	r3, #0
 80013bc:	82bb      	strh	r3, [r7, #20]
 80013be:	e044      	b.n	800144a <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 80013c0:	2300      	movs	r3, #0
 80013c2:	827b      	strh	r3, [r7, #18]
 80013c4:	e02f      	b.n	8001426 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 80013c6:	8a7b      	ldrh	r3, [r7, #18]
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 80013d0:	7dfb      	ldrb	r3, [r7, #23]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	75fb      	strb	r3, [r7, #23]
 80013d6:	e012      	b.n	80013fe <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80013d8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013dc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80013e0:	fb03 f202 	mul.w	r2, r3, r2
 80013e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	da00      	bge.n	80013ee <SSD1306_DrawBitmap+0x5e>
 80013ec:	3307      	adds	r3, #7
 80013ee:	10db      	asrs	r3, r3, #3
 80013f0:	b21b      	sxth	r3, r3
 80013f2:	4413      	add	r3, r2
 80013f4:	461a      	mov	r2, r3
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	4413      	add	r3, r2
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 80013fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001402:	2b00      	cmp	r3, #0
 8001404:	da09      	bge.n	800141a <SSD1306_DrawBitmap+0x8a>
 8001406:	89fa      	ldrh	r2, [r7, #14]
 8001408:	8a7b      	ldrh	r3, [r7, #18]
 800140a:	4413      	add	r3, r2
 800140c:	b29b      	uxth	r3, r3
 800140e:	89b9      	ldrh	r1, [r7, #12]
 8001410:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	4618      	mov	r0, r3
 8001416:	f000 f951 	bl	80016bc <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 800141a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800141e:	b29b      	uxth	r3, r3
 8001420:	3301      	adds	r3, #1
 8001422:	b29b      	uxth	r3, r3
 8001424:	827b      	strh	r3, [r7, #18]
 8001426:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800142a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800142e:	429a      	cmp	r2, r3
 8001430:	dbc9      	blt.n	80013c6 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8001432:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001436:	b29b      	uxth	r3, r3
 8001438:	3301      	adds	r3, #1
 800143a:	b29b      	uxth	r3, r3
 800143c:	82bb      	strh	r3, [r7, #20]
 800143e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001442:	b29b      	uxth	r3, r3
 8001444:	3301      	adds	r3, #1
 8001446:	b29b      	uxth	r3, r3
 8001448:	81bb      	strh	r3, [r7, #12]
 800144a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800144e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001452:	429a      	cmp	r2, r3
 8001454:	dbb4      	blt.n	80013c0 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8001456:	bf00      	nop
 8001458:	bf00      	nop
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <SSD1306_Init>:

void SSD1306_Init()
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0

	SSD1306_WRITECOMMAND(0xAE);
 8001464:	22ae      	movs	r2, #174	@ 0xae
 8001466:	2100      	movs	r1, #0
 8001468:	2078      	movs	r0, #120	@ 0x78
 800146a:	f000 f991 	bl	8001790 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 800146e:	2220      	movs	r2, #32
 8001470:	2100      	movs	r1, #0
 8001472:	2078      	movs	r0, #120	@ 0x78
 8001474:	f000 f98c 	bl	8001790 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 8001478:	2210      	movs	r2, #16
 800147a:	2100      	movs	r1, #0
 800147c:	2078      	movs	r0, #120	@ 0x78
 800147e:	f000 f987 	bl	8001790 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0);
 8001482:	22b0      	movs	r2, #176	@ 0xb0
 8001484:	2100      	movs	r1, #0
 8001486:	2078      	movs	r0, #120	@ 0x78
 8001488:	f000 f982 	bl	8001790 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8);
 800148c:	22c8      	movs	r2, #200	@ 0xc8
 800148e:	2100      	movs	r1, #0
 8001490:	2078      	movs	r0, #120	@ 0x78
 8001492:	f000 f97d 	bl	8001790 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	2078      	movs	r0, #120	@ 0x78
 800149c:	f000 f978 	bl	8001790 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 80014a0:	2210      	movs	r2, #16
 80014a2:	2100      	movs	r1, #0
 80014a4:	2078      	movs	r0, #120	@ 0x78
 80014a6:	f000 f973 	bl	8001790 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40);
 80014aa:	2240      	movs	r2, #64	@ 0x40
 80014ac:	2100      	movs	r1, #0
 80014ae:	2078      	movs	r0, #120	@ 0x78
 80014b0:	f000 f96e 	bl	8001790 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81);
 80014b4:	2281      	movs	r2, #129	@ 0x81
 80014b6:	2100      	movs	r1, #0
 80014b8:	2078      	movs	r0, #120	@ 0x78
 80014ba:	f000 f969 	bl	8001790 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80014be:	22ff      	movs	r2, #255	@ 0xff
 80014c0:	2100      	movs	r1, #0
 80014c2:	2078      	movs	r0, #120	@ 0x78
 80014c4:	f000 f964 	bl	8001790 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1);
 80014c8:	22a1      	movs	r2, #161	@ 0xa1
 80014ca:	2100      	movs	r1, #0
 80014cc:	2078      	movs	r0, #120	@ 0x78
 80014ce:	f000 f95f 	bl	8001790 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6);
 80014d2:	22a6      	movs	r2, #166	@ 0xa6
 80014d4:	2100      	movs	r1, #0
 80014d6:	2078      	movs	r0, #120	@ 0x78
 80014d8:	f000 f95a 	bl	8001790 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8);
 80014dc:	22a8      	movs	r2, #168	@ 0xa8
 80014de:	2100      	movs	r1, #0
 80014e0:	2078      	movs	r0, #120	@ 0x78
 80014e2:	f000 f955 	bl	8001790 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F);
 80014e6:	223f      	movs	r2, #63	@ 0x3f
 80014e8:	2100      	movs	r1, #0
 80014ea:	2078      	movs	r0, #120	@ 0x78
 80014ec:	f000 f950 	bl	8001790 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4);
 80014f0:	22a4      	movs	r2, #164	@ 0xa4
 80014f2:	2100      	movs	r1, #0
 80014f4:	2078      	movs	r0, #120	@ 0x78
 80014f6:	f000 f94b 	bl	8001790 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3);
 80014fa:	22d3      	movs	r2, #211	@ 0xd3
 80014fc:	2100      	movs	r1, #0
 80014fe:	2078      	movs	r0, #120	@ 0x78
 8001500:	f000 f946 	bl	8001790 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 8001504:	2200      	movs	r2, #0
 8001506:	2100      	movs	r1, #0
 8001508:	2078      	movs	r0, #120	@ 0x78
 800150a:	f000 f941 	bl	8001790 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5);
 800150e:	22d5      	movs	r2, #213	@ 0xd5
 8001510:	2100      	movs	r1, #0
 8001512:	2078      	movs	r0, #120	@ 0x78
 8001514:	f000 f93c 	bl	8001790 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0);
 8001518:	22f0      	movs	r2, #240	@ 0xf0
 800151a:	2100      	movs	r1, #0
 800151c:	2078      	movs	r0, #120	@ 0x78
 800151e:	f000 f937 	bl	8001790 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9);
 8001522:	22d9      	movs	r2, #217	@ 0xd9
 8001524:	2100      	movs	r1, #0
 8001526:	2078      	movs	r0, #120	@ 0x78
 8001528:	f000 f932 	bl	8001790 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22);
 800152c:	2222      	movs	r2, #34	@ 0x22
 800152e:	2100      	movs	r1, #0
 8001530:	2078      	movs	r0, #120	@ 0x78
 8001532:	f000 f92d 	bl	8001790 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA);
 8001536:	22da      	movs	r2, #218	@ 0xda
 8001538:	2100      	movs	r1, #0
 800153a:	2078      	movs	r0, #120	@ 0x78
 800153c:	f000 f928 	bl	8001790 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001540:	2212      	movs	r2, #18
 8001542:	2100      	movs	r1, #0
 8001544:	2078      	movs	r0, #120	@ 0x78
 8001546:	f000 f923 	bl	8001790 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB);
 800154a:	22db      	movs	r2, #219	@ 0xdb
 800154c:	2100      	movs	r1, #0
 800154e:	2078      	movs	r0, #120	@ 0x78
 8001550:	f000 f91e 	bl	8001790 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 8001554:	2220      	movs	r2, #32
 8001556:	2100      	movs	r1, #0
 8001558:	2078      	movs	r0, #120	@ 0x78
 800155a:	f000 f919 	bl	8001790 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D);
 800155e:	228d      	movs	r2, #141	@ 0x8d
 8001560:	2100      	movs	r1, #0
 8001562:	2078      	movs	r0, #120	@ 0x78
 8001564:	f000 f914 	bl	8001790 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14);
 8001568:	2214      	movs	r2, #20
 800156a:	2100      	movs	r1, #0
 800156c:	2078      	movs	r0, #120	@ 0x78
 800156e:	f000 f90f 	bl	8001790 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF);
 8001572:	22af      	movs	r2, #175	@ 0xaf
 8001574:	2100      	movs	r1, #0
 8001576:	2078      	movs	r0, #120	@ 0x78
 8001578:	f000 f90a 	bl	8001790 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800157c:	222e      	movs	r2, #46	@ 0x2e
 800157e:	2100      	movs	r1, #0
 8001580:	2078      	movs	r0, #120	@ 0x78
 8001582:	f000 f905 	bl	8001790 <SSD1306_I2C_Write>

	SSD1306.CurrentX = 0;
 8001586:	4b0e      	ldr	r3, [pc, #56]	@ (80015c0 <SSD1306_Init+0x160>)
 8001588:	2200      	movs	r2, #0
 800158a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800158c:	4b0c      	ldr	r3, [pc, #48]	@ (80015c0 <SSD1306_Init+0x160>)
 800158e:	2200      	movs	r2, #0
 8001590:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8001592:	4b0b      	ldr	r3, [pc, #44]	@ (80015c0 <SSD1306_Init+0x160>)
 8001594:	2201      	movs	r2, #1
 8001596:	715a      	strb	r2, [r3, #5]
	SSD1306.Page=0;
 8001598:	4b09      	ldr	r3, [pc, #36]	@ (80015c0 <SSD1306_Init+0x160>)
 800159a:	2200      	movs	r2, #0
 800159c:	719a      	strb	r2, [r3, #6]
	SSD1306.DMA = CMD;
 800159e:	4b08      	ldr	r3, [pc, #32]	@ (80015c0 <SSD1306_Init+0x160>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	71da      	strb	r2, [r3, #7]
	SSD1306.DMAREADY=1;
 80015a4:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <SSD1306_Init+0x160>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	745a      	strb	r2, [r3, #17]
	SSD1306.Needtorefresh=1;
 80015aa:	4b05      	ldr	r3, [pc, #20]	@ (80015c0 <SSD1306_Init+0x160>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	741a      	strb	r2, [r3, #16]
	SSD1306_Fill(BLACK);
 80015b0:	2000      	movs	r0, #0
 80015b2:	f000 f86b 	bl	800168c <SSD1306_Fill>
	SSD1306_UpdateScreen();
 80015b6:	f000 f805 	bl	80015c4 <SSD1306_UpdateScreen>

}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200007c4 	.word	0x200007c4

080015c4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void)
{
 80015c4:	b598      	push	{r3, r4, r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	if(SSD1306.DMAREADY && SSD1306.Needtorefresh){
 80015c8:	4b2c      	ldr	r3, [pc, #176]	@ (800167c <SSD1306_UpdateScreen+0xb8>)
 80015ca:	7c5b      	ldrb	r3, [r3, #17]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d052      	beq.n	8001676 <SSD1306_UpdateScreen+0xb2>
 80015d0:	4b2a      	ldr	r3, [pc, #168]	@ (800167c <SSD1306_UpdateScreen+0xb8>)
 80015d2:	7c1b      	ldrb	r3, [r3, #16]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d04e      	beq.n	8001676 <SSD1306_UpdateScreen+0xb2>
		switch(SSD1306.DMA){
 80015d8:	4b28      	ldr	r3, [pc, #160]	@ (800167c <SSD1306_UpdateScreen+0xb8>)
 80015da:	79db      	ldrb	r3, [r3, #7]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d01c      	beq.n	800161a <SSD1306_UpdateScreen+0x56>
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d137      	bne.n	8001654 <SSD1306_UpdateScreen+0x90>
			case Data:
				if(I2C_DMA_Master_Transmit(SSD1306_I2C_ADDR,0x40, &SSD1306_Buffer[SSD1306_WIDTH*SSD1306.Page], SSD1306_WIDTH)==1){
 80015e4:	4b26      	ldr	r3, [pc, #152]	@ (8001680 <SSD1306_UpdateScreen+0xbc>)
 80015e6:	681c      	ldr	r4, [r3, #0]
 80015e8:	4b24      	ldr	r3, [pc, #144]	@ (800167c <SSD1306_UpdateScreen+0xb8>)
 80015ea:	799b      	ldrb	r3, [r3, #6]
 80015ec:	01db      	lsls	r3, r3, #7
 80015ee:	4a25      	ldr	r2, [pc, #148]	@ (8001684 <SSD1306_UpdateScreen+0xc0>)
 80015f0:	441a      	add	r2, r3
 80015f2:	2380      	movs	r3, #128	@ 0x80
 80015f4:	2140      	movs	r1, #64	@ 0x40
 80015f6:	2078      	movs	r0, #120	@ 0x78
 80015f8:	47a0      	blx	r4
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d12d      	bne.n	800165c <SSD1306_UpdateScreen+0x98>
					SSD1306.Page++;
 8001600:	4b1e      	ldr	r3, [pc, #120]	@ (800167c <SSD1306_UpdateScreen+0xb8>)
 8001602:	799b      	ldrb	r3, [r3, #6]
 8001604:	3301      	adds	r3, #1
 8001606:	b2da      	uxtb	r2, r3
 8001608:	4b1c      	ldr	r3, [pc, #112]	@ (800167c <SSD1306_UpdateScreen+0xb8>)
 800160a:	719a      	strb	r2, [r3, #6]
					SSD1306.DMA=CMD;
 800160c:	4b1b      	ldr	r3, [pc, #108]	@ (800167c <SSD1306_UpdateScreen+0xb8>)
 800160e:	2200      	movs	r2, #0
 8001610:	71da      	strb	r2, [r3, #7]
					SSD1306.DMAREADY=0;
 8001612:	4b1a      	ldr	r3, [pc, #104]	@ (800167c <SSD1306_UpdateScreen+0xb8>)
 8001614:	2200      	movs	r2, #0
 8001616:	745a      	strb	r2, [r3, #17]
				}
				break;
 8001618:	e020      	b.n	800165c <SSD1306_UpdateScreen+0x98>
			case CMD:

				SSD1306.Commands[0]=0xB0 + SSD1306.Page;
 800161a:	4b18      	ldr	r3, [pc, #96]	@ (800167c <SSD1306_UpdateScreen+0xb8>)
 800161c:	799b      	ldrb	r3, [r3, #6]
 800161e:	3b50      	subs	r3, #80	@ 0x50
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4b16      	ldr	r3, [pc, #88]	@ (800167c <SSD1306_UpdateScreen+0xb8>)
 8001624:	721a      	strb	r2, [r3, #8]
				SSD1306.Commands[1]=0x00;
 8001626:	4b15      	ldr	r3, [pc, #84]	@ (800167c <SSD1306_UpdateScreen+0xb8>)
 8001628:	2200      	movs	r2, #0
 800162a:	725a      	strb	r2, [r3, #9]
				SSD1306.Commands[2]=0x10;
 800162c:	4b13      	ldr	r3, [pc, #76]	@ (800167c <SSD1306_UpdateScreen+0xb8>)
 800162e:	2210      	movs	r2, #16
 8001630:	729a      	strb	r2, [r3, #10]

				if(I2C_DMA_Master_Transmit(SSD1306_I2C_ADDR,0x00, &SSD1306.Commands[0],3)==1){
 8001632:	4b13      	ldr	r3, [pc, #76]	@ (8001680 <SSD1306_UpdateScreen+0xbc>)
 8001634:	681c      	ldr	r4, [r3, #0]
 8001636:	2303      	movs	r3, #3
 8001638:	4a13      	ldr	r2, [pc, #76]	@ (8001688 <SSD1306_UpdateScreen+0xc4>)
 800163a:	2100      	movs	r1, #0
 800163c:	2078      	movs	r0, #120	@ 0x78
 800163e:	47a0      	blx	r4
 8001640:	4603      	mov	r3, r0
 8001642:	2b01      	cmp	r3, #1
 8001644:	d10c      	bne.n	8001660 <SSD1306_UpdateScreen+0x9c>
					SSD1306.DMA=Data;
 8001646:	4b0d      	ldr	r3, [pc, #52]	@ (800167c <SSD1306_UpdateScreen+0xb8>)
 8001648:	2201      	movs	r2, #1
 800164a:	71da      	strb	r2, [r3, #7]
					SSD1306.DMAREADY=0;
 800164c:	4b0b      	ldr	r3, [pc, #44]	@ (800167c <SSD1306_UpdateScreen+0xb8>)
 800164e:	2200      	movs	r2, #0
 8001650:	745a      	strb	r2, [r3, #17]
				}
				break;
 8001652:	e005      	b.n	8001660 <SSD1306_UpdateScreen+0x9c>

			default:
				SSD1306.Page=8;
 8001654:	4b09      	ldr	r3, [pc, #36]	@ (800167c <SSD1306_UpdateScreen+0xb8>)
 8001656:	2208      	movs	r2, #8
 8001658:	719a      	strb	r2, [r3, #6]
				break;
 800165a:	e002      	b.n	8001662 <SSD1306_UpdateScreen+0x9e>
				break;
 800165c:	bf00      	nop
 800165e:	e000      	b.n	8001662 <SSD1306_UpdateScreen+0x9e>
				break;
 8001660:	bf00      	nop
			}
		if(SSD1306.Page>7){
 8001662:	4b06      	ldr	r3, [pc, #24]	@ (800167c <SSD1306_UpdateScreen+0xb8>)
 8001664:	799b      	ldrb	r3, [r3, #6]
 8001666:	2b07      	cmp	r3, #7
 8001668:	d905      	bls.n	8001676 <SSD1306_UpdateScreen+0xb2>
			SSD1306.Page=0;
 800166a:	4b04      	ldr	r3, [pc, #16]	@ (800167c <SSD1306_UpdateScreen+0xb8>)
 800166c:	2200      	movs	r2, #0
 800166e:	719a      	strb	r2, [r3, #6]
			SSD1306.Needtorefresh=0;
 8001670:	4b02      	ldr	r3, [pc, #8]	@ (800167c <SSD1306_UpdateScreen+0xb8>)
 8001672:	2200      	movs	r2, #0
 8001674:	741a      	strb	r2, [r3, #16]
		}
	}
}
 8001676:	bf00      	nop
 8001678:	bd98      	pop	{r3, r4, r7, pc}
 800167a:	bf00      	nop
 800167c:	200007c4 	.word	0x200007c4
 8001680:	200007bc 	.word	0x200007bc
 8001684:	200003bc 	.word	0x200003bc
 8001688:	200007cc 	.word	0x200007cc

0800168c <SSD1306_Fill>:
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
	memset(SSD1306_Buffer, (color == BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <SSD1306_Fill+0x14>
 800169c:	2300      	movs	r3, #0
 800169e:	e000      	b.n	80016a2 <SSD1306_Fill+0x16>
 80016a0:	23ff      	movs	r3, #255	@ 0xff
 80016a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016a6:	4619      	mov	r1, r3
 80016a8:	4803      	ldr	r0, [pc, #12]	@ (80016b8 <SSD1306_Fill+0x2c>)
 80016aa:	f00c f8a9 	bl	800d800 <memset>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200003bc 	.word	0x200003bc

080016bc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	80fb      	strh	r3, [r7, #6]
 80016c6:	460b      	mov	r3, r1
 80016c8:	80bb      	strh	r3, [r7, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	70fb      	strb	r3, [r7, #3]
	if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT){
 80016ce:	88fb      	ldrh	r3, [r7, #6]
 80016d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80016d2:	d848      	bhi.n	8001766 <SSD1306_DrawPixel+0xaa>
 80016d4:	88bb      	ldrh	r3, [r7, #4]
 80016d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80016d8:	d845      	bhi.n	8001766 <SSD1306_DrawPixel+0xaa>
		return;
	}

	if(SSD1306.Inverted){
 80016da:	4b26      	ldr	r3, [pc, #152]	@ (8001774 <SSD1306_DrawPixel+0xb8>)
 80016dc:	791b      	ldrb	r3, [r3, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d006      	beq.n	80016f0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80016e2:	78fb      	ldrb	r3, [r7, #3]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	bf0c      	ite	eq
 80016e8:	2301      	moveq	r3, #1
 80016ea:	2300      	movne	r3, #0
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	70fb      	strb	r3, [r7, #3]
	}

	if(color == WHITE){
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d11a      	bne.n	800172c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80016f6:	88fa      	ldrh	r2, [r7, #6]
 80016f8:	88bb      	ldrh	r3, [r7, #4]
 80016fa:	08db      	lsrs	r3, r3, #3
 80016fc:	b298      	uxth	r0, r3
 80016fe:	4603      	mov	r3, r0
 8001700:	01db      	lsls	r3, r3, #7
 8001702:	4413      	add	r3, r2
 8001704:	4a1c      	ldr	r2, [pc, #112]	@ (8001778 <SSD1306_DrawPixel+0xbc>)
 8001706:	5cd3      	ldrb	r3, [r2, r3]
 8001708:	b25a      	sxtb	r2, r3
 800170a:	88bb      	ldrh	r3, [r7, #4]
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	2101      	movs	r1, #1
 8001712:	fa01 f303 	lsl.w	r3, r1, r3
 8001716:	b25b      	sxtb	r3, r3
 8001718:	4313      	orrs	r3, r2
 800171a:	b259      	sxtb	r1, r3
 800171c:	88fa      	ldrh	r2, [r7, #6]
 800171e:	4603      	mov	r3, r0
 8001720:	01db      	lsls	r3, r3, #7
 8001722:	4413      	add	r3, r2
 8001724:	b2c9      	uxtb	r1, r1
 8001726:	4a14      	ldr	r2, [pc, #80]	@ (8001778 <SSD1306_DrawPixel+0xbc>)
 8001728:	54d1      	strb	r1, [r2, r3]
 800172a:	e01d      	b.n	8001768 <SSD1306_DrawPixel+0xac>
	}else{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800172c:	88fa      	ldrh	r2, [r7, #6]
 800172e:	88bb      	ldrh	r3, [r7, #4]
 8001730:	08db      	lsrs	r3, r3, #3
 8001732:	b298      	uxth	r0, r3
 8001734:	4603      	mov	r3, r0
 8001736:	01db      	lsls	r3, r3, #7
 8001738:	4413      	add	r3, r2
 800173a:	4a0f      	ldr	r2, [pc, #60]	@ (8001778 <SSD1306_DrawPixel+0xbc>)
 800173c:	5cd3      	ldrb	r3, [r2, r3]
 800173e:	b25a      	sxtb	r2, r3
 8001740:	88bb      	ldrh	r3, [r7, #4]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	2101      	movs	r1, #1
 8001748:	fa01 f303 	lsl.w	r3, r1, r3
 800174c:	b25b      	sxtb	r3, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	b25b      	sxtb	r3, r3
 8001752:	4013      	ands	r3, r2
 8001754:	b259      	sxtb	r1, r3
 8001756:	88fa      	ldrh	r2, [r7, #6]
 8001758:	4603      	mov	r3, r0
 800175a:	01db      	lsls	r3, r3, #7
 800175c:	4413      	add	r3, r2
 800175e:	b2c9      	uxtb	r1, r1
 8001760:	4a05      	ldr	r2, [pc, #20]	@ (8001778 <SSD1306_DrawPixel+0xbc>)
 8001762:	54d1      	strb	r1, [r2, r3]
 8001764:	e000      	b.n	8001768 <SSD1306_DrawPixel+0xac>
		return;
 8001766:	bf00      	nop
	}
}
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	200007c4 	.word	0x200007c4
 8001778:	200003bc 	.word	0x200003bc

0800177c <SSD1306_Clear>:
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
    }
}

void SSD1306_Clear(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
	SSD1306_Fill(0);
 8001780:	2000      	movs	r0, #0
 8001782:	f7ff ff83 	bl	800168c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001786:	f7ff ff1d 	bl	80015c4 <SSD1306_UpdateScreen>
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <SSD1306_I2C_Write>:
//uint8_t SSD1306_I2C_WriteMulti(uint8_t address, uint16_t reg, uint8_t* data, uint16_t count) {
//
//	return (uint8_t)I2C_DMA_Master_Transmit(address, reg, data, count);
//}

void SSD1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data){
 8001790:	b590      	push	{r4, r7, lr}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	71fb      	strb	r3, [r7, #7]
 800179a:	460b      	mov	r3, r1
 800179c:	71bb      	strb	r3, [r7, #6]
 800179e:	4613      	mov	r3, r2
 80017a0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80017a2:	79bb      	ldrb	r3, [r7, #6]
 80017a4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80017a6:	797b      	ldrb	r3, [r7, #5]
 80017a8:	737b      	strb	r3, [r7, #13]
	I2C_Master_Transmit_Blocking(address, dt, 2, 10);
 80017aa:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <SSD1306_I2C_Write+0x34>)
 80017ac:	681c      	ldr	r4, [r3, #0]
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	b298      	uxth	r0, r3
 80017b2:	f107 010c 	add.w	r1, r7, #12
 80017b6:	230a      	movs	r3, #10
 80017b8:	2202      	movs	r2, #2
 80017ba:	47a0      	blx	r4
}
 80017bc:	bf00      	nop
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd90      	pop	{r4, r7, pc}
 80017c4:	200007c0 	.word	0x200007c0

080017c8 <Display_Set_I2C_Master_Transmit>:

void Display_Set_I2C_Master_Transmit(uint8_t (*Master_Transmit)(uint16_t DevAddress,uint16_t reg, uint8_t *pData, uint16_t Size),uint8_t (*Master_Transmit_Blocking)(uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)){
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
	I2C_DMA_Master_Transmit = Master_Transmit;
 80017d2:	4a06      	ldr	r2, [pc, #24]	@ (80017ec <Display_Set_I2C_Master_Transmit+0x24>)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6013      	str	r3, [r2, #0]
	I2C_Master_Transmit_Blocking = Master_Transmit_Blocking;
 80017d8:	4a05      	ldr	r2, [pc, #20]	@ (80017f0 <Display_Set_I2C_Master_Transmit+0x28>)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	6013      	str	r3, [r2, #0]
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	200007bc 	.word	0x200007bc
 80017f0:	200007c0 	.word	0x200007c0

080017f4 <SSD1306_DMAREADY>:

void SSD1306_DMAREADY(){
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
	SSD1306.DMAREADY=1;
 80017f8:	4b03      	ldr	r3, [pc, #12]	@ (8001808 <SSD1306_DMAREADY+0x14>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	745a      	strb	r2, [r3, #17]
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	200007c4 	.word	0x200007c4

0800180c <SSD1306_RefreshReady>:

void SSD1306_RefreshReady(){
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
	SSD1306.Needtorefresh=1;
 8001810:	4b03      	ldr	r3, [pc, #12]	@ (8001820 <SSD1306_RefreshReady+0x14>)
 8001812:	2201      	movs	r2, #1
 8001814:	741a      	strb	r2, [r3, #16]
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	200007c4 	.word	0x200007c4

08001824 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	4b10      	ldr	r3, [pc, #64]	@ (8001870 <HAL_MspInit+0x4c>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001832:	4a0f      	ldr	r2, [pc, #60]	@ (8001870 <HAL_MspInit+0x4c>)
 8001834:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001838:	6453      	str	r3, [r2, #68]	@ 0x44
 800183a:	4b0d      	ldr	r3, [pc, #52]	@ (8001870 <HAL_MspInit+0x4c>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800183e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	603b      	str	r3, [r7, #0]
 800184a:	4b09      	ldr	r3, [pc, #36]	@ (8001870 <HAL_MspInit+0x4c>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184e:	4a08      	ldr	r2, [pc, #32]	@ (8001870 <HAL_MspInit+0x4c>)
 8001850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001854:	6413      	str	r3, [r2, #64]	@ 0x40
 8001856:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <HAL_MspInit+0x4c>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	40023800 	.word	0x40023800

08001874 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08a      	sub	sp, #40	@ 0x28
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a28      	ldr	r2, [pc, #160]	@ (8001934 <HAL_ADC_MspInit+0xc0>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d149      	bne.n	800192a <HAL_ADC_MspInit+0xb6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	4b27      	ldr	r3, [pc, #156]	@ (8001938 <HAL_ADC_MspInit+0xc4>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189e:	4a26      	ldr	r2, [pc, #152]	@ (8001938 <HAL_ADC_MspInit+0xc4>)
 80018a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018a6:	4b24      	ldr	r3, [pc, #144]	@ (8001938 <HAL_ADC_MspInit+0xc4>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	4b20      	ldr	r3, [pc, #128]	@ (8001938 <HAL_ADC_MspInit+0xc4>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	4a1f      	ldr	r2, [pc, #124]	@ (8001938 <HAL_ADC_MspInit+0xc4>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001938 <HAL_ADC_MspInit+0xc4>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	4b19      	ldr	r3, [pc, #100]	@ (8001938 <HAL_ADC_MspInit+0xc4>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	4a18      	ldr	r2, [pc, #96]	@ (8001938 <HAL_ADC_MspInit+0xc4>)
 80018d8:	f043 0302 	orr.w	r3, r3, #2
 80018dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018de:	4b16      	ldr	r3, [pc, #88]	@ (8001938 <HAL_ADC_MspInit+0xc4>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80018ea:	23fe      	movs	r3, #254	@ 0xfe
 80018ec:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ee:	2303      	movs	r3, #3
 80018f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	480f      	ldr	r0, [pc, #60]	@ (800193c <HAL_ADC_MspInit+0xc8>)
 80018fe:	f001 fb43 	bl	8002f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001902:	2301      	movs	r3, #1
 8001904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001906:	2303      	movs	r3, #3
 8001908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190e:	f107 0314 	add.w	r3, r7, #20
 8001912:	4619      	mov	r1, r3
 8001914:	480a      	ldr	r0, [pc, #40]	@ (8001940 <HAL_ADC_MspInit+0xcc>)
 8001916:	f001 fb37 	bl	8002f88 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	2100      	movs	r1, #0
 800191e:	2012      	movs	r0, #18
 8001920:	f000 ff4f 	bl	80027c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001924:	2012      	movs	r0, #18
 8001926:	f000 ff68 	bl	80027fa <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800192a:	bf00      	nop
 800192c:	3728      	adds	r7, #40	@ 0x28
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40012000 	.word	0x40012000
 8001938:	40023800 	.word	0x40023800
 800193c:	40020000 	.word	0x40020000
 8001940:	40020400 	.word	0x40020400

08001944 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08a      	sub	sp, #40	@ 0x28
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a4f      	ldr	r2, [pc, #316]	@ (8001aa0 <HAL_I2C_MspInit+0x15c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	f040 8097 	bne.w	8001a96 <HAL_I2C_MspInit+0x152>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001968:	2300      	movs	r3, #0
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	4b4d      	ldr	r3, [pc, #308]	@ (8001aa4 <HAL_I2C_MspInit+0x160>)
 800196e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001970:	4a4c      	ldr	r2, [pc, #304]	@ (8001aa4 <HAL_I2C_MspInit+0x160>)
 8001972:	f043 0302 	orr.w	r3, r3, #2
 8001976:	6313      	str	r3, [r2, #48]	@ 0x30
 8001978:	4b4a      	ldr	r3, [pc, #296]	@ (8001aa4 <HAL_I2C_MspInit+0x160>)
 800197a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001984:	23c0      	movs	r3, #192	@ 0xc0
 8001986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001988:	2312      	movs	r3, #18
 800198a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001990:	2303      	movs	r3, #3
 8001992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001994:	2304      	movs	r3, #4
 8001996:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	4619      	mov	r1, r3
 800199e:	4842      	ldr	r0, [pc, #264]	@ (8001aa8 <HAL_I2C_MspInit+0x164>)
 80019a0:	f001 faf2 	bl	8002f88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	4b3e      	ldr	r3, [pc, #248]	@ (8001aa4 <HAL_I2C_MspInit+0x160>)
 80019aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ac:	4a3d      	ldr	r2, [pc, #244]	@ (8001aa4 <HAL_I2C_MspInit+0x160>)
 80019ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80019b4:	4b3b      	ldr	r3, [pc, #236]	@ (8001aa4 <HAL_I2C_MspInit+0x160>)
 80019b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 80019c0:	4b3a      	ldr	r3, [pc, #232]	@ (8001aac <HAL_I2C_MspInit+0x168>)
 80019c2:	4a3b      	ldr	r2, [pc, #236]	@ (8001ab0 <HAL_I2C_MspInit+0x16c>)
 80019c4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 80019c6:	4b39      	ldr	r3, [pc, #228]	@ (8001aac <HAL_I2C_MspInit+0x168>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019cc:	4b37      	ldr	r3, [pc, #220]	@ (8001aac <HAL_I2C_MspInit+0x168>)
 80019ce:	2240      	movs	r2, #64	@ 0x40
 80019d0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019d2:	4b36      	ldr	r3, [pc, #216]	@ (8001aac <HAL_I2C_MspInit+0x168>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019d8:	4b34      	ldr	r3, [pc, #208]	@ (8001aac <HAL_I2C_MspInit+0x168>)
 80019da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019de:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019e0:	4b32      	ldr	r3, [pc, #200]	@ (8001aac <HAL_I2C_MspInit+0x168>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019e6:	4b31      	ldr	r3, [pc, #196]	@ (8001aac <HAL_I2C_MspInit+0x168>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80019ec:	4b2f      	ldr	r3, [pc, #188]	@ (8001aac <HAL_I2C_MspInit+0x168>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019f2:	4b2e      	ldr	r3, [pc, #184]	@ (8001aac <HAL_I2C_MspInit+0x168>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019f8:	4b2c      	ldr	r3, [pc, #176]	@ (8001aac <HAL_I2C_MspInit+0x168>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80019fe:	482b      	ldr	r0, [pc, #172]	@ (8001aac <HAL_I2C_MspInit+0x168>)
 8001a00:	f000 ff16 	bl	8002830 <HAL_DMA_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8001a0a:	f7ff fc83 	bl	8001314 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a26      	ldr	r2, [pc, #152]	@ (8001aac <HAL_I2C_MspInit+0x168>)
 8001a12:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a14:	4a25      	ldr	r2, [pc, #148]	@ (8001aac <HAL_I2C_MspInit+0x168>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001a1a:	4b26      	ldr	r3, [pc, #152]	@ (8001ab4 <HAL_I2C_MspInit+0x170>)
 8001a1c:	4a26      	ldr	r2, [pc, #152]	@ (8001ab8 <HAL_I2C_MspInit+0x174>)
 8001a1e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001a20:	4b24      	ldr	r3, [pc, #144]	@ (8001ab4 <HAL_I2C_MspInit+0x170>)
 8001a22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a26:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a28:	4b22      	ldr	r3, [pc, #136]	@ (8001ab4 <HAL_I2C_MspInit+0x170>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a2e:	4b21      	ldr	r3, [pc, #132]	@ (8001ab4 <HAL_I2C_MspInit+0x170>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a34:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab4 <HAL_I2C_MspInit+0x170>)
 8001a36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a3a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab4 <HAL_I2C_MspInit+0x170>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a42:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab4 <HAL_I2C_MspInit+0x170>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001a48:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab4 <HAL_I2C_MspInit+0x170>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a4e:	4b19      	ldr	r3, [pc, #100]	@ (8001ab4 <HAL_I2C_MspInit+0x170>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a54:	4b17      	ldr	r3, [pc, #92]	@ (8001ab4 <HAL_I2C_MspInit+0x170>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001a5a:	4816      	ldr	r0, [pc, #88]	@ (8001ab4 <HAL_I2C_MspInit+0x170>)
 8001a5c:	f000 fee8 	bl	8002830 <HAL_DMA_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 8001a66:	f7ff fc55 	bl	8001314 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a11      	ldr	r2, [pc, #68]	@ (8001ab4 <HAL_I2C_MspInit+0x170>)
 8001a6e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a70:	4a10      	ldr	r2, [pc, #64]	@ (8001ab4 <HAL_I2C_MspInit+0x170>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2100      	movs	r1, #0
 8001a7a:	201f      	movs	r0, #31
 8001a7c:	f000 fea1 	bl	80027c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a80:	201f      	movs	r0, #31
 8001a82:	f000 feba 	bl	80027fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	2020      	movs	r0, #32
 8001a8c:	f000 fe99 	bl	80027c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001a90:	2020      	movs	r0, #32
 8001a92:	f000 feb2 	bl	80027fa <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a96:	bf00      	nop
 8001a98:	3728      	adds	r7, #40	@ 0x28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40005400 	.word	0x40005400
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40020400 	.word	0x40020400
 8001aac:	20000220 	.word	0x20000220
 8001ab0:	40026028 	.word	0x40026028
 8001ab4:	20000280 	.word	0x20000280
 8001ab8:	40026010 	.word	0x40026010

08001abc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a1c      	ldr	r2, [pc, #112]	@ (8001b3c <HAL_TIM_Base_MspInit+0x80>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d116      	bne.n	8001afc <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b40 <HAL_TIM_Base_MspInit+0x84>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad6:	4a1a      	ldr	r2, [pc, #104]	@ (8001b40 <HAL_TIM_Base_MspInit+0x84>)
 8001ad8:	f043 0302 	orr.w	r3, r3, #2
 8001adc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ade:	4b18      	ldr	r3, [pc, #96]	@ (8001b40 <HAL_TIM_Base_MspInit+0x84>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2100      	movs	r1, #0
 8001aee:	201d      	movs	r0, #29
 8001af0:	f000 fe67 	bl	80027c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001af4:	201d      	movs	r0, #29
 8001af6:	f000 fe80 	bl	80027fa <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM11_MspInit 1 */

    /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001afa:	e01a      	b.n	8001b32 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a10      	ldr	r2, [pc, #64]	@ (8001b44 <HAL_TIM_Base_MspInit+0x88>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d115      	bne.n	8001b32 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b40 <HAL_TIM_Base_MspInit+0x84>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0e:	4a0c      	ldr	r2, [pc, #48]	@ (8001b40 <HAL_TIM_Base_MspInit+0x84>)
 8001b10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b16:	4b0a      	ldr	r3, [pc, #40]	@ (8001b40 <HAL_TIM_Base_MspInit+0x84>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2100      	movs	r1, #0
 8001b26:	201a      	movs	r0, #26
 8001b28:	f000 fe4b 	bl	80027c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001b2c:	201a      	movs	r0, #26
 8001b2e:	f000 fe64 	bl	80027fa <HAL_NVIC_EnableIRQ>
}
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40000400 	.word	0x40000400
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40014800 	.word	0x40014800

08001b48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 030c 	add.w	r3, r7, #12
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a12      	ldr	r2, [pc, #72]	@ (8001bb0 <HAL_TIM_MspPostInit+0x68>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d11d      	bne.n	8001ba6 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	4b11      	ldr	r3, [pc, #68]	@ (8001bb4 <HAL_TIM_MspPostInit+0x6c>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	4a10      	ldr	r2, [pc, #64]	@ (8001bb4 <HAL_TIM_MspPostInit+0x6c>)
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb4 <HAL_TIM_MspPostInit+0x6c>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Eng2PWM_Pin|Eng1PWM_Pin;
 8001b86:	2330      	movs	r3, #48	@ 0x30
 8001b88:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b96:	2302      	movs	r3, #2
 8001b98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9a:	f107 030c 	add.w	r3, r7, #12
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4805      	ldr	r0, [pc, #20]	@ (8001bb8 <HAL_TIM_MspPostInit+0x70>)
 8001ba2:	f001 f9f1 	bl	8002f88 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ba6:	bf00      	nop
 8001ba8:	3720      	adds	r7, #32
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40000400 	.word	0x40000400
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40020400 	.word	0x40020400

08001bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bc0:	bf00      	nop
 8001bc2:	e7fd      	b.n	8001bc0 <NMI_Handler+0x4>

08001bc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <HardFault_Handler+0x4>

08001bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd0:	bf00      	nop
 8001bd2:	e7fd      	b.n	8001bd0 <MemManage_Handler+0x4>

08001bd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <BusFault_Handler+0x4>

08001bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <UsageFault_Handler+0x4>

08001be4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c12:	f000 f917 	bl	8001e44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001c20:	4802      	ldr	r0, [pc, #8]	@ (8001c2c <DMA1_Stream0_IRQHandler+0x10>)
 8001c22:	f000 ff2d 	bl	8002a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000280 	.word	0x20000280

08001c30 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001c34:	4802      	ldr	r0, [pc, #8]	@ (8001c40 <DMA1_Stream1_IRQHandler+0x10>)
 8001c36:	f000 ff23 	bl	8002a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000220 	.word	0x20000220

08001c44 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c48:	4802      	ldr	r0, [pc, #8]	@ (8001c54 <ADC_IRQHandler+0x10>)
 8001c4a:	f000 f982 	bl	8001f52 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000184 	.word	0x20000184

08001c58 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001c5c:	4802      	ldr	r0, [pc, #8]	@ (8001c68 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001c5e:	f006 fe45 	bl	80088ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000328 	.word	0x20000328

08001c6c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c70:	4802      	ldr	r0, [pc, #8]	@ (8001c7c <TIM3_IRQHandler+0x10>)
 8001c72:	f006 fe3b 	bl	80088ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	200002e0 	.word	0x200002e0

08001c80 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001c84:	4802      	ldr	r0, [pc, #8]	@ (8001c90 <I2C1_EV_IRQHandler+0x10>)
 8001c86:	f002 fba9 	bl	80043dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	200001cc 	.word	0x200001cc

08001c94 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001c98:	4802      	ldr	r0, [pc, #8]	@ (8001ca4 <I2C1_ER_IRQHandler+0x10>)
 8001c9a:	f002 fd10 	bl	80046be <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	200001cc 	.word	0x200001cc

08001ca8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001cac:	4802      	ldr	r0, [pc, #8]	@ (8001cb8 <OTG_FS_IRQHandler+0x10>)
 8001cae:	f004 ff0e 	bl	8006ace <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200010c4 	.word	0x200010c4

08001cbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cc4:	4a14      	ldr	r2, [pc, #80]	@ (8001d18 <_sbrk+0x5c>)
 8001cc6:	4b15      	ldr	r3, [pc, #84]	@ (8001d1c <_sbrk+0x60>)
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cd0:	4b13      	ldr	r3, [pc, #76]	@ (8001d20 <_sbrk+0x64>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d102      	bne.n	8001cde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cd8:	4b11      	ldr	r3, [pc, #68]	@ (8001d20 <_sbrk+0x64>)
 8001cda:	4a12      	ldr	r2, [pc, #72]	@ (8001d24 <_sbrk+0x68>)
 8001cdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cde:	4b10      	ldr	r3, [pc, #64]	@ (8001d20 <_sbrk+0x64>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d207      	bcs.n	8001cfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cec:	f00b fda0 	bl	800d830 <__errno>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	220c      	movs	r2, #12
 8001cf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfa:	e009      	b.n	8001d10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cfc:	4b08      	ldr	r3, [pc, #32]	@ (8001d20 <_sbrk+0x64>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d02:	4b07      	ldr	r3, [pc, #28]	@ (8001d20 <_sbrk+0x64>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	4a05      	ldr	r2, [pc, #20]	@ (8001d20 <_sbrk+0x64>)
 8001d0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20020000 	.word	0x20020000
 8001d1c:	00000400 	.word	0x00000400
 8001d20:	200007d8 	.word	0x200007d8
 8001d24:	20001910 	.word	0x20001910

08001d28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d2c:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <SystemInit+0x20>)
 8001d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d32:	4a05      	ldr	r2, [pc, #20]	@ (8001d48 <SystemInit+0x20>)
 8001d34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d50:	f7ff ffea 	bl	8001d28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d54:	480c      	ldr	r0, [pc, #48]	@ (8001d88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d56:	490d      	ldr	r1, [pc, #52]	@ (8001d8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d58:	4a0d      	ldr	r2, [pc, #52]	@ (8001d90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d5c:	e002      	b.n	8001d64 <LoopCopyDataInit>

08001d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d62:	3304      	adds	r3, #4

08001d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d68:	d3f9      	bcc.n	8001d5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d6c:	4c0a      	ldr	r4, [pc, #40]	@ (8001d98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d70:	e001      	b.n	8001d76 <LoopFillZerobss>

08001d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d74:	3204      	adds	r2, #4

08001d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d78:	d3fb      	bcc.n	8001d72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d7a:	f00b fd5f 	bl	800d83c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d7e:	f7fe ff37 	bl	8000bf0 <main>
  bx  lr    
 8001d82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d8c:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8001d90:	0800e474 	.word	0x0800e474
  ldr r2, =_sbss
 8001d94:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8001d98:	20001910 	.word	0x20001910

08001d9c <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d9c:	e7fe      	b.n	8001d9c <DMA1_Stream2_IRQHandler>
	...

08001da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001da4:	4b0e      	ldr	r3, [pc, #56]	@ (8001de0 <HAL_Init+0x40>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0d      	ldr	r2, [pc, #52]	@ (8001de0 <HAL_Init+0x40>)
 8001daa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001db0:	4b0b      	ldr	r3, [pc, #44]	@ (8001de0 <HAL_Init+0x40>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a0a      	ldr	r2, [pc, #40]	@ (8001de0 <HAL_Init+0x40>)
 8001db6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dbc:	4b08      	ldr	r3, [pc, #32]	@ (8001de0 <HAL_Init+0x40>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a07      	ldr	r2, [pc, #28]	@ (8001de0 <HAL_Init+0x40>)
 8001dc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dc8:	2003      	movs	r0, #3
 8001dca:	f000 fcef 	bl	80027ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dce:	200f      	movs	r0, #15
 8001dd0:	f000 f808 	bl	8001de4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dd4:	f7ff fd26 	bl	8001824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40023c00 	.word	0x40023c00

08001de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dec:	4b12      	ldr	r3, [pc, #72]	@ (8001e38 <HAL_InitTick+0x54>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4b12      	ldr	r3, [pc, #72]	@ (8001e3c <HAL_InitTick+0x58>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	4619      	mov	r1, r3
 8001df6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 fd07 	bl	8002816 <HAL_SYSTICK_Config>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e00e      	b.n	8001e30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b0f      	cmp	r3, #15
 8001e16:	d80a      	bhi.n	8001e2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e20:	f000 fccf 	bl	80027c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e24:	4a06      	ldr	r2, [pc, #24]	@ (8001e40 <HAL_InitTick+0x5c>)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e000      	b.n	8001e30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20000004 	.word	0x20000004
 8001e3c:	2000000c 	.word	0x2000000c
 8001e40:	20000008 	.word	0x20000008

08001e44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e48:	4b06      	ldr	r3, [pc, #24]	@ (8001e64 <HAL_IncTick+0x20>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4b06      	ldr	r3, [pc, #24]	@ (8001e68 <HAL_IncTick+0x24>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4413      	add	r3, r2
 8001e54:	4a04      	ldr	r2, [pc, #16]	@ (8001e68 <HAL_IncTick+0x24>)
 8001e56:	6013      	str	r3, [r2, #0]
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	2000000c 	.word	0x2000000c
 8001e68:	200007dc 	.word	0x200007dc

08001e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e70:	4b03      	ldr	r3, [pc, #12]	@ (8001e80 <HAL_GetTick+0x14>)
 8001e72:	681b      	ldr	r3, [r3, #0]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	200007dc 	.word	0x200007dc

08001e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e8c:	f7ff ffee 	bl	8001e6c <HAL_GetTick>
 8001e90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e9c:	d005      	beq.n	8001eaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec8 <HAL_Delay+0x44>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eaa:	bf00      	nop
 8001eac:	f7ff ffde 	bl	8001e6c <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d8f7      	bhi.n	8001eac <HAL_Delay+0x28>
  {
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	bf00      	nop
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	2000000c 	.word	0x2000000c

08001ecc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e033      	b.n	8001f4a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d109      	bne.n	8001efe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff fcc2 	bl	8001874 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	f003 0310 	and.w	r3, r3, #16
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d118      	bne.n	8001f3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f12:	f023 0302 	bic.w	r3, r3, #2
 8001f16:	f043 0202 	orr.w	r2, r3, #2
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 fa6e 	bl	8002400 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2e:	f023 0303 	bic.w	r3, r3, #3
 8001f32:	f043 0201 	orr.w	r2, r3, #1
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f3a:	e001      	b.n	8001f40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b086      	sub	sp, #24
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	f003 0320 	and.w	r3, r3, #32
 8001f80:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d049      	beq.n	800201c <HAL_ADC_IRQHandler+0xca>
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d046      	beq.n	800201c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f92:	f003 0310 	and.w	r3, r3, #16
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d105      	bne.n	8001fa6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d12b      	bne.n	800200c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d127      	bne.n	800200c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d006      	beq.n	8001fd8 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d119      	bne.n	800200c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 0220 	bic.w	r2, r2, #32
 8001fe6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d105      	bne.n	800200c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002004:	f043 0201 	orr.w	r2, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7fe fd51 	bl	8000ab4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f06f 0212 	mvn.w	r2, #18
 800201a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800202a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d057      	beq.n	80020e2 <HAL_ADC_IRQHandler+0x190>
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d054      	beq.n	80020e2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203c:	f003 0310 	and.w	r3, r3, #16
 8002040:	2b00      	cmp	r3, #0
 8002042:	d105      	bne.n	8002050 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002048:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d139      	bne.n	80020d2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002064:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002068:	2b00      	cmp	r3, #0
 800206a:	d006      	beq.n	800207a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002076:	2b00      	cmp	r3, #0
 8002078:	d12b      	bne.n	80020d2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002084:	2b00      	cmp	r3, #0
 8002086:	d124      	bne.n	80020d2 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002092:	2b00      	cmp	r3, #0
 8002094:	d11d      	bne.n	80020d2 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800209a:	2b00      	cmp	r3, #0
 800209c:	d119      	bne.n	80020d2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020ac:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d105      	bne.n	80020d2 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ca:	f043 0201 	orr.w	r2, r3, #1
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 fa90 	bl	80025f8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f06f 020c 	mvn.w	r2, #12
 80020e0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020f0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d017      	beq.n	8002128 <HAL_ADC_IRQHandler+0x1d6>
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d014      	beq.n	8002128 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b01      	cmp	r3, #1
 800210a:	d10d      	bne.n	8002128 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002110:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f82a 	bl	8002172 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f06f 0201 	mvn.w	r2, #1
 8002126:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f003 0320 	and.w	r3, r3, #32
 800212e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002136:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d015      	beq.n	800216a <HAL_ADC_IRQHandler+0x218>
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d012      	beq.n	800216a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002148:	f043 0202 	orr.w	r2, r3, #2
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0220 	mvn.w	r2, #32
 8002158:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f813 	bl	8002186 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f06f 0220 	mvn.w	r2, #32
 8002168:	601a      	str	r2, [r3, #0]
  }
}
 800216a:	bf00      	nop
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
	...

0800219c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d101      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x1c>
 80021b4:	2302      	movs	r3, #2
 80021b6:	e113      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x244>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b09      	cmp	r3, #9
 80021c6:	d925      	bls.n	8002214 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68d9      	ldr	r1, [r3, #12]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	461a      	mov	r2, r3
 80021d6:	4613      	mov	r3, r2
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	4413      	add	r3, r2
 80021dc:	3b1e      	subs	r3, #30
 80021de:	2207      	movs	r2, #7
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43da      	mvns	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	400a      	ands	r2, r1
 80021ec:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68d9      	ldr	r1, [r3, #12]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	4618      	mov	r0, r3
 8002200:	4603      	mov	r3, r0
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4403      	add	r3, r0
 8002206:	3b1e      	subs	r3, #30
 8002208:	409a      	lsls	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	e022      	b.n	800225a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6919      	ldr	r1, [r3, #16]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	b29b      	uxth	r3, r3
 8002220:	461a      	mov	r2, r3
 8002222:	4613      	mov	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4413      	add	r3, r2
 8002228:	2207      	movs	r2, #7
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43da      	mvns	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	400a      	ands	r2, r1
 8002236:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6919      	ldr	r1, [r3, #16]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	b29b      	uxth	r3, r3
 8002248:	4618      	mov	r0, r3
 800224a:	4603      	mov	r3, r0
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	4403      	add	r3, r0
 8002250:	409a      	lsls	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b06      	cmp	r3, #6
 8002260:	d824      	bhi.n	80022ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	3b05      	subs	r3, #5
 8002274:	221f      	movs	r2, #31
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43da      	mvns	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	400a      	ands	r2, r1
 8002282:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	b29b      	uxth	r3, r3
 8002290:	4618      	mov	r0, r3
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	4613      	mov	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	3b05      	subs	r3, #5
 800229e:	fa00 f203 	lsl.w	r2, r0, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80022aa:	e04c      	b.n	8002346 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b0c      	cmp	r3, #12
 80022b2:	d824      	bhi.n	80022fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	3b23      	subs	r3, #35	@ 0x23
 80022c6:	221f      	movs	r2, #31
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43da      	mvns	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	400a      	ands	r2, r1
 80022d4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	4618      	mov	r0, r3
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	3b23      	subs	r3, #35	@ 0x23
 80022f0:	fa00 f203 	lsl.w	r2, r0, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80022fc:	e023      	b.n	8002346 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	3b41      	subs	r3, #65	@ 0x41
 8002310:	221f      	movs	r2, #31
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43da      	mvns	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	400a      	ands	r2, r1
 800231e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	b29b      	uxth	r3, r3
 800232c:	4618      	mov	r0, r3
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	3b41      	subs	r3, #65	@ 0x41
 800233a:	fa00 f203 	lsl.w	r2, r0, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002346:	4b29      	ldr	r3, [pc, #164]	@ (80023ec <HAL_ADC_ConfigChannel+0x250>)
 8002348:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a28      	ldr	r2, [pc, #160]	@ (80023f0 <HAL_ADC_ConfigChannel+0x254>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d10f      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x1d8>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b12      	cmp	r3, #18
 800235a:	d10b      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a1d      	ldr	r2, [pc, #116]	@ (80023f0 <HAL_ADC_ConfigChannel+0x254>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d12b      	bne.n	80023d6 <HAL_ADC_ConfigChannel+0x23a>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a1c      	ldr	r2, [pc, #112]	@ (80023f4 <HAL_ADC_ConfigChannel+0x258>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d003      	beq.n	8002390 <HAL_ADC_ConfigChannel+0x1f4>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b11      	cmp	r3, #17
 800238e:	d122      	bne.n	80023d6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a11      	ldr	r2, [pc, #68]	@ (80023f4 <HAL_ADC_ConfigChannel+0x258>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d111      	bne.n	80023d6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023b2:	4b11      	ldr	r3, [pc, #68]	@ (80023f8 <HAL_ADC_ConfigChannel+0x25c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a11      	ldr	r2, [pc, #68]	@ (80023fc <HAL_ADC_ConfigChannel+0x260>)
 80023b8:	fba2 2303 	umull	r2, r3, r2, r3
 80023bc:	0c9a      	lsrs	r2, r3, #18
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80023c8:	e002      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	3b01      	subs	r3, #1
 80023ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f9      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	40012300 	.word	0x40012300
 80023f0:	40012000 	.word	0x40012000
 80023f4:	10000012 	.word	0x10000012
 80023f8:	20000004 	.word	0x20000004
 80023fc:	431bde83 	.word	0x431bde83

08002400 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002408:	4b79      	ldr	r3, [pc, #484]	@ (80025f0 <ADC_Init+0x1f0>)
 800240a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	431a      	orrs	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002434:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6859      	ldr	r1, [r3, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	021a      	lsls	r2, r3, #8
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002458:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6859      	ldr	r1, [r3, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800247a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6899      	ldr	r1, [r3, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002492:	4a58      	ldr	r2, [pc, #352]	@ (80025f4 <ADC_Init+0x1f4>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d022      	beq.n	80024de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6899      	ldr	r1, [r3, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80024c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6899      	ldr	r1, [r3, #8]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	e00f      	b.n	80024fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80024fc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0202 	bic.w	r2, r2, #2
 800250c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6899      	ldr	r1, [r3, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	7e1b      	ldrb	r3, [r3, #24]
 8002518:	005a      	lsls	r2, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d01b      	beq.n	8002564 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800253a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800254a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6859      	ldr	r1, [r3, #4]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002556:	3b01      	subs	r3, #1
 8002558:	035a      	lsls	r2, r3, #13
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	e007      	b.n	8002574 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002572:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002582:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	3b01      	subs	r3, #1
 8002590:	051a      	lsls	r2, r3, #20
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	430a      	orrs	r2, r1
 8002598:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80025a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6899      	ldr	r1, [r3, #8]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80025b6:	025a      	lsls	r2, r3, #9
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6899      	ldr	r1, [r3, #8]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	029a      	lsls	r2, r3, #10
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	609a      	str	r2, [r3, #8]
}
 80025e4:	bf00      	nop
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	40012300 	.word	0x40012300
 80025f4:	0f000001 	.word	0x0f000001

080025f8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800261c:	4b0c      	ldr	r3, [pc, #48]	@ (8002650 <__NVIC_SetPriorityGrouping+0x44>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002628:	4013      	ands	r3, r2
 800262a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002634:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800263c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800263e:	4a04      	ldr	r2, [pc, #16]	@ (8002650 <__NVIC_SetPriorityGrouping+0x44>)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	60d3      	str	r3, [r2, #12]
}
 8002644:	bf00      	nop
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002658:	4b04      	ldr	r3, [pc, #16]	@ (800266c <__NVIC_GetPriorityGrouping+0x18>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	0a1b      	lsrs	r3, r3, #8
 800265e:	f003 0307 	and.w	r3, r3, #7
}
 8002662:	4618      	mov	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800267a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267e:	2b00      	cmp	r3, #0
 8002680:	db0b      	blt.n	800269a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	f003 021f 	and.w	r2, r3, #31
 8002688:	4907      	ldr	r1, [pc, #28]	@ (80026a8 <__NVIC_EnableIRQ+0x38>)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	095b      	lsrs	r3, r3, #5
 8002690:	2001      	movs	r0, #1
 8002692:	fa00 f202 	lsl.w	r2, r0, r2
 8002696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	e000e100 	.word	0xe000e100

080026ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	6039      	str	r1, [r7, #0]
 80026b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	db0a      	blt.n	80026d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	490c      	ldr	r1, [pc, #48]	@ (80026f8 <__NVIC_SetPriority+0x4c>)
 80026c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ca:	0112      	lsls	r2, r2, #4
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	440b      	add	r3, r1
 80026d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026d4:	e00a      	b.n	80026ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	4908      	ldr	r1, [pc, #32]	@ (80026fc <__NVIC_SetPriority+0x50>)
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	3b04      	subs	r3, #4
 80026e4:	0112      	lsls	r2, r2, #4
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	440b      	add	r3, r1
 80026ea:	761a      	strb	r2, [r3, #24]
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	e000e100 	.word	0xe000e100
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002700:	b480      	push	{r7}
 8002702:	b089      	sub	sp, #36	@ 0x24
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f1c3 0307 	rsb	r3, r3, #7
 800271a:	2b04      	cmp	r3, #4
 800271c:	bf28      	it	cs
 800271e:	2304      	movcs	r3, #4
 8002720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3304      	adds	r3, #4
 8002726:	2b06      	cmp	r3, #6
 8002728:	d902      	bls.n	8002730 <NVIC_EncodePriority+0x30>
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3b03      	subs	r3, #3
 800272e:	e000      	b.n	8002732 <NVIC_EncodePriority+0x32>
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002734:	f04f 32ff 	mov.w	r2, #4294967295
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43da      	mvns	r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	401a      	ands	r2, r3
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002748:	f04f 31ff 	mov.w	r1, #4294967295
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	fa01 f303 	lsl.w	r3, r1, r3
 8002752:	43d9      	mvns	r1, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002758:	4313      	orrs	r3, r2
         );
}
 800275a:	4618      	mov	r0, r3
 800275c:	3724      	adds	r7, #36	@ 0x24
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3b01      	subs	r3, #1
 8002774:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002778:	d301      	bcc.n	800277e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800277a:	2301      	movs	r3, #1
 800277c:	e00f      	b.n	800279e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800277e:	4a0a      	ldr	r2, [pc, #40]	@ (80027a8 <SysTick_Config+0x40>)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3b01      	subs	r3, #1
 8002784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002786:	210f      	movs	r1, #15
 8002788:	f04f 30ff 	mov.w	r0, #4294967295
 800278c:	f7ff ff8e 	bl	80026ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002790:	4b05      	ldr	r3, [pc, #20]	@ (80027a8 <SysTick_Config+0x40>)
 8002792:	2200      	movs	r2, #0
 8002794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002796:	4b04      	ldr	r3, [pc, #16]	@ (80027a8 <SysTick_Config+0x40>)
 8002798:	2207      	movs	r2, #7
 800279a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	e000e010 	.word	0xe000e010

080027ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff ff29 	bl	800260c <__NVIC_SetPriorityGrouping>
}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b086      	sub	sp, #24
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	4603      	mov	r3, r0
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	607a      	str	r2, [r7, #4]
 80027ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027d4:	f7ff ff3e 	bl	8002654 <__NVIC_GetPriorityGrouping>
 80027d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	68b9      	ldr	r1, [r7, #8]
 80027de:	6978      	ldr	r0, [r7, #20]
 80027e0:	f7ff ff8e 	bl	8002700 <NVIC_EncodePriority>
 80027e4:	4602      	mov	r2, r0
 80027e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ea:	4611      	mov	r1, r2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff5d 	bl	80026ac <__NVIC_SetPriority>
}
 80027f2:	bf00      	nop
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	4603      	mov	r3, r0
 8002802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff ff31 	bl	8002670 <__NVIC_EnableIRQ>
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b082      	sub	sp, #8
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7ff ffa2 	bl	8002768 <SysTick_Config>
 8002824:	4603      	mov	r3, r0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800283c:	f7ff fb16 	bl	8001e6c <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e099      	b.n	8002980 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2202      	movs	r2, #2
 8002850:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0201 	bic.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800286c:	e00f      	b.n	800288e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800286e:	f7ff fafd 	bl	8001e6c <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b05      	cmp	r3, #5
 800287a:	d908      	bls.n	800288e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2220      	movs	r2, #32
 8002880:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2203      	movs	r2, #3
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e078      	b.n	8002980 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1e8      	bne.n	800286e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	4b38      	ldr	r3, [pc, #224]	@ (8002988 <HAL_DMA_Init+0x158>)
 80028a8:	4013      	ands	r3, r2
 80028aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	4313      	orrs	r3, r2
 80028de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e4:	2b04      	cmp	r3, #4
 80028e6:	d107      	bne.n	80028f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f0:	4313      	orrs	r3, r2
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f023 0307 	bic.w	r3, r3, #7
 800290e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	4313      	orrs	r3, r2
 8002918:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291e:	2b04      	cmp	r3, #4
 8002920:	d117      	bne.n	8002952 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	4313      	orrs	r3, r2
 800292a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00e      	beq.n	8002952 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 faab 	bl	8002e90 <DMA_CheckFifoParam>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2240      	movs	r2, #64	@ 0x40
 8002944:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800294e:	2301      	movs	r3, #1
 8002950:	e016      	b.n	8002980 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 fa62 	bl	8002e24 <DMA_CalcBaseAndBitshift>
 8002960:	4603      	mov	r3, r0
 8002962:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002968:	223f      	movs	r2, #63	@ 0x3f
 800296a:	409a      	lsls	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	f010803f 	.word	0xf010803f

0800298c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
 8002998:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d101      	bne.n	80029b2 <HAL_DMA_Start_IT+0x26>
 80029ae:	2302      	movs	r3, #2
 80029b0:	e040      	b.n	8002a34 <HAL_DMA_Start_IT+0xa8>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d12f      	bne.n	8002a26 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2202      	movs	r2, #2
 80029ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f9f4 	bl	8002dc8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e4:	223f      	movs	r2, #63	@ 0x3f
 80029e6:	409a      	lsls	r2, r3
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0216 	orr.w	r2, r2, #22
 80029fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d007      	beq.n	8002a14 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0208 	orr.w	r2, r2, #8
 8002a12:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0201 	orr.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	e005      	b.n	8002a32 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d004      	beq.n	8002a5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2280      	movs	r2, #128	@ 0x80
 8002a54:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e00c      	b.n	8002a74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2205      	movs	r2, #5
 8002a5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0201 	bic.w	r2, r2, #1
 8002a70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a8c:	4b8e      	ldr	r3, [pc, #568]	@ (8002cc8 <HAL_DMA_IRQHandler+0x248>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a8e      	ldr	r2, [pc, #568]	@ (8002ccc <HAL_DMA_IRQHandler+0x24c>)
 8002a92:	fba2 2303 	umull	r2, r3, r2, r3
 8002a96:	0a9b      	lsrs	r3, r3, #10
 8002a98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aaa:	2208      	movs	r2, #8
 8002aac:	409a      	lsls	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d01a      	beq.n	8002aec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d013      	beq.n	8002aec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0204 	bic.w	r2, r2, #4
 8002ad2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad8:	2208      	movs	r2, #8
 8002ada:	409a      	lsls	r2, r3
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae4:	f043 0201 	orr.w	r2, r3, #1
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af0:	2201      	movs	r2, #1
 8002af2:	409a      	lsls	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4013      	ands	r3, r2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d012      	beq.n	8002b22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00b      	beq.n	8002b22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b0e:	2201      	movs	r2, #1
 8002b10:	409a      	lsls	r2, r3
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b1a:	f043 0202 	orr.w	r2, r3, #2
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b26:	2204      	movs	r2, #4
 8002b28:	409a      	lsls	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d012      	beq.n	8002b58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00b      	beq.n	8002b58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b44:	2204      	movs	r2, #4
 8002b46:	409a      	lsls	r2, r3
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b50:	f043 0204 	orr.w	r2, r3, #4
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b5c:	2210      	movs	r2, #16
 8002b5e:	409a      	lsls	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4013      	ands	r3, r2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d043      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d03c      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7a:	2210      	movs	r2, #16
 8002b7c:	409a      	lsls	r2, r3
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d018      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d108      	bne.n	8002bb0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d024      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	4798      	blx	r3
 8002bae:	e01f      	b.n	8002bf0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d01b      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	4798      	blx	r3
 8002bc0:	e016      	b.n	8002bf0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d107      	bne.n	8002be0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0208 	bic.w	r2, r2, #8
 8002bde:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 808f 	beq.w	8002d20 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0310 	and.w	r3, r3, #16
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 8087 	beq.w	8002d20 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c16:	2220      	movs	r2, #32
 8002c18:	409a      	lsls	r2, r3
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b05      	cmp	r3, #5
 8002c28:	d136      	bne.n	8002c98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0216 	bic.w	r2, r2, #22
 8002c38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	695a      	ldr	r2, [r3, #20]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d103      	bne.n	8002c5a <HAL_DMA_IRQHandler+0x1da>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d007      	beq.n	8002c6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0208 	bic.w	r2, r2, #8
 8002c68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c6e:	223f      	movs	r2, #63	@ 0x3f
 8002c70:	409a      	lsls	r2, r3
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d07e      	beq.n	8002d8c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	4798      	blx	r3
        }
        return;
 8002c96:	e079      	b.n	8002d8c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d01d      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10d      	bne.n	8002cd0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d031      	beq.n	8002d20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	4798      	blx	r3
 8002cc4:	e02c      	b.n	8002d20 <HAL_DMA_IRQHandler+0x2a0>
 8002cc6:	bf00      	nop
 8002cc8:	20000004 	.word	0x20000004
 8002ccc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d023      	beq.n	8002d20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	4798      	blx	r3
 8002ce0:	e01e      	b.n	8002d20 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10f      	bne.n	8002d10 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0210 	bic.w	r2, r2, #16
 8002cfe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d003      	beq.n	8002d20 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d032      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d022      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2205      	movs	r2, #5
 8002d38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0201 	bic.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d307      	bcc.n	8002d68 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f2      	bne.n	8002d4c <HAL_DMA_IRQHandler+0x2cc>
 8002d66:	e000      	b.n	8002d6a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d68:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d005      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	4798      	blx	r3
 8002d8a:	e000      	b.n	8002d8e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d8c:	bf00      	nop
    }
  }
}
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002da2:	b2db      	uxtb	r3, r3
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
 8002dd4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002de4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2b40      	cmp	r3, #64	@ 0x40
 8002df4:	d108      	bne.n	8002e08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e06:	e007      	b.n	8002e18 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	60da      	str	r2, [r3, #12]
}
 8002e18:	bf00      	nop
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	3b10      	subs	r3, #16
 8002e34:	4a14      	ldr	r2, [pc, #80]	@ (8002e88 <DMA_CalcBaseAndBitshift+0x64>)
 8002e36:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3a:	091b      	lsrs	r3, r3, #4
 8002e3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e3e:	4a13      	ldr	r2, [pc, #76]	@ (8002e8c <DMA_CalcBaseAndBitshift+0x68>)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4413      	add	r3, r2
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	461a      	mov	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2b03      	cmp	r3, #3
 8002e50:	d909      	bls.n	8002e66 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e5a:	f023 0303 	bic.w	r3, r3, #3
 8002e5e:	1d1a      	adds	r2, r3, #4
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e64:	e007      	b.n	8002e76 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e6e:	f023 0303 	bic.w	r3, r3, #3
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	aaaaaaab 	.word	0xaaaaaaab
 8002e8c:	0800e428 	.word	0x0800e428

08002e90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d11f      	bne.n	8002eea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d856      	bhi.n	8002f5e <DMA_CheckFifoParam+0xce>
 8002eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8002eb8 <DMA_CheckFifoParam+0x28>)
 8002eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb6:	bf00      	nop
 8002eb8:	08002ec9 	.word	0x08002ec9
 8002ebc:	08002edb 	.word	0x08002edb
 8002ec0:	08002ec9 	.word	0x08002ec9
 8002ec4:	08002f5f 	.word	0x08002f5f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ecc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d046      	beq.n	8002f62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ed8:	e043      	b.n	8002f62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ede:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ee2:	d140      	bne.n	8002f66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ee8:	e03d      	b.n	8002f66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ef2:	d121      	bne.n	8002f38 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	d837      	bhi.n	8002f6a <DMA_CheckFifoParam+0xda>
 8002efa:	a201      	add	r2, pc, #4	@ (adr r2, 8002f00 <DMA_CheckFifoParam+0x70>)
 8002efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f00:	08002f11 	.word	0x08002f11
 8002f04:	08002f17 	.word	0x08002f17
 8002f08:	08002f11 	.word	0x08002f11
 8002f0c:	08002f29 	.word	0x08002f29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
      break;
 8002f14:	e030      	b.n	8002f78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d025      	beq.n	8002f6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f26:	e022      	b.n	8002f6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f30:	d11f      	bne.n	8002f72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f36:	e01c      	b.n	8002f72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d903      	bls.n	8002f46 <DMA_CheckFifoParam+0xb6>
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b03      	cmp	r3, #3
 8002f42:	d003      	beq.n	8002f4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f44:	e018      	b.n	8002f78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	73fb      	strb	r3, [r7, #15]
      break;
 8002f4a:	e015      	b.n	8002f78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00e      	beq.n	8002f76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f5c:	e00b      	b.n	8002f76 <DMA_CheckFifoParam+0xe6>
      break;
 8002f5e:	bf00      	nop
 8002f60:	e00a      	b.n	8002f78 <DMA_CheckFifoParam+0xe8>
      break;
 8002f62:	bf00      	nop
 8002f64:	e008      	b.n	8002f78 <DMA_CheckFifoParam+0xe8>
      break;
 8002f66:	bf00      	nop
 8002f68:	e006      	b.n	8002f78 <DMA_CheckFifoParam+0xe8>
      break;
 8002f6a:	bf00      	nop
 8002f6c:	e004      	b.n	8002f78 <DMA_CheckFifoParam+0xe8>
      break;
 8002f6e:	bf00      	nop
 8002f70:	e002      	b.n	8002f78 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f72:	bf00      	nop
 8002f74:	e000      	b.n	8002f78 <DMA_CheckFifoParam+0xe8>
      break;
 8002f76:	bf00      	nop
    }
  } 
  
  return status; 
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop

08002f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b089      	sub	sp, #36	@ 0x24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f96:	2300      	movs	r3, #0
 8002f98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61fb      	str	r3, [r7, #28]
 8002fa2:	e159      	b.n	8003258 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	f040 8148 	bne.w	8003252 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d005      	beq.n	8002fda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d130      	bne.n	800303c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4313      	orrs	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003010:	2201      	movs	r2, #1
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	091b      	lsrs	r3, r3, #4
 8003026:	f003 0201 	and.w	r2, r3, #1
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	2b03      	cmp	r3, #3
 8003046:	d017      	beq.n	8003078 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	2203      	movs	r2, #3
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4013      	ands	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 0303 	and.w	r3, r3, #3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d123      	bne.n	80030cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	08da      	lsrs	r2, r3, #3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3208      	adds	r2, #8
 800308c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003090:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	220f      	movs	r2, #15
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	691a      	ldr	r2, [r3, #16]
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	08da      	lsrs	r2, r3, #3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	3208      	adds	r2, #8
 80030c6:	69b9      	ldr	r1, [r7, #24]
 80030c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	2203      	movs	r2, #3
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 0203 	and.w	r2, r3, #3
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 80a2 	beq.w	8003252 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	4b57      	ldr	r3, [pc, #348]	@ (8003270 <HAL_GPIO_Init+0x2e8>)
 8003114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003116:	4a56      	ldr	r2, [pc, #344]	@ (8003270 <HAL_GPIO_Init+0x2e8>)
 8003118:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800311c:	6453      	str	r3, [r2, #68]	@ 0x44
 800311e:	4b54      	ldr	r3, [pc, #336]	@ (8003270 <HAL_GPIO_Init+0x2e8>)
 8003120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003122:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800312a:	4a52      	ldr	r2, [pc, #328]	@ (8003274 <HAL_GPIO_Init+0x2ec>)
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	089b      	lsrs	r3, r3, #2
 8003130:	3302      	adds	r3, #2
 8003132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003136:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	220f      	movs	r2, #15
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4013      	ands	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a49      	ldr	r2, [pc, #292]	@ (8003278 <HAL_GPIO_Init+0x2f0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d019      	beq.n	800318a <HAL_GPIO_Init+0x202>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a48      	ldr	r2, [pc, #288]	@ (800327c <HAL_GPIO_Init+0x2f4>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d013      	beq.n	8003186 <HAL_GPIO_Init+0x1fe>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a47      	ldr	r2, [pc, #284]	@ (8003280 <HAL_GPIO_Init+0x2f8>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d00d      	beq.n	8003182 <HAL_GPIO_Init+0x1fa>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a46      	ldr	r2, [pc, #280]	@ (8003284 <HAL_GPIO_Init+0x2fc>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d007      	beq.n	800317e <HAL_GPIO_Init+0x1f6>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a45      	ldr	r2, [pc, #276]	@ (8003288 <HAL_GPIO_Init+0x300>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d101      	bne.n	800317a <HAL_GPIO_Init+0x1f2>
 8003176:	2304      	movs	r3, #4
 8003178:	e008      	b.n	800318c <HAL_GPIO_Init+0x204>
 800317a:	2307      	movs	r3, #7
 800317c:	e006      	b.n	800318c <HAL_GPIO_Init+0x204>
 800317e:	2303      	movs	r3, #3
 8003180:	e004      	b.n	800318c <HAL_GPIO_Init+0x204>
 8003182:	2302      	movs	r3, #2
 8003184:	e002      	b.n	800318c <HAL_GPIO_Init+0x204>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <HAL_GPIO_Init+0x204>
 800318a:	2300      	movs	r3, #0
 800318c:	69fa      	ldr	r2, [r7, #28]
 800318e:	f002 0203 	and.w	r2, r2, #3
 8003192:	0092      	lsls	r2, r2, #2
 8003194:	4093      	lsls	r3, r2
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4313      	orrs	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800319c:	4935      	ldr	r1, [pc, #212]	@ (8003274 <HAL_GPIO_Init+0x2ec>)
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	089b      	lsrs	r3, r3, #2
 80031a2:	3302      	adds	r3, #2
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031aa:	4b38      	ldr	r3, [pc, #224]	@ (800328c <HAL_GPIO_Init+0x304>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	43db      	mvns	r3, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4013      	ands	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ce:	4a2f      	ldr	r2, [pc, #188]	@ (800328c <HAL_GPIO_Init+0x304>)
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031d4:	4b2d      	ldr	r3, [pc, #180]	@ (800328c <HAL_GPIO_Init+0x304>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	43db      	mvns	r3, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4013      	ands	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031f8:	4a24      	ldr	r2, [pc, #144]	@ (800328c <HAL_GPIO_Init+0x304>)
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031fe:	4b23      	ldr	r3, [pc, #140]	@ (800328c <HAL_GPIO_Init+0x304>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	43db      	mvns	r3, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4013      	ands	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003222:	4a1a      	ldr	r2, [pc, #104]	@ (800328c <HAL_GPIO_Init+0x304>)
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003228:	4b18      	ldr	r3, [pc, #96]	@ (800328c <HAL_GPIO_Init+0x304>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800324c:	4a0f      	ldr	r2, [pc, #60]	@ (800328c <HAL_GPIO_Init+0x304>)
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	3301      	adds	r3, #1
 8003256:	61fb      	str	r3, [r7, #28]
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	2b0f      	cmp	r3, #15
 800325c:	f67f aea2 	bls.w	8002fa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003260:	bf00      	nop
 8003262:	bf00      	nop
 8003264:	3724      	adds	r7, #36	@ 0x24
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40023800 	.word	0x40023800
 8003274:	40013800 	.word	0x40013800
 8003278:	40020000 	.word	0x40020000
 800327c:	40020400 	.word	0x40020400
 8003280:	40020800 	.word	0x40020800
 8003284:	40020c00 	.word	0x40020c00
 8003288:	40021000 	.word	0x40021000
 800328c:	40013c00 	.word	0x40013c00

08003290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	460b      	mov	r3, r1
 800329a:	807b      	strh	r3, [r7, #2]
 800329c:	4613      	mov	r3, r2
 800329e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032a0:	787b      	ldrb	r3, [r7, #1]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032a6:	887a      	ldrh	r2, [r7, #2]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032ac:	e003      	b.n	80032b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032ae:	887b      	ldrh	r3, [r7, #2]
 80032b0:	041a      	lsls	r2, r3, #16
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	619a      	str	r2, [r3, #24]
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b085      	sub	sp, #20
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	460b      	mov	r3, r1
 80032cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032d4:	887a      	ldrh	r2, [r7, #2]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	4013      	ands	r3, r2
 80032da:	041a      	lsls	r2, r3, #16
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	43d9      	mvns	r1, r3
 80032e0:	887b      	ldrh	r3, [r7, #2]
 80032e2:	400b      	ands	r3, r1
 80032e4:	431a      	orrs	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	619a      	str	r2, [r3, #24]
}
 80032ea:	bf00      	nop
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
	...

080032f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e12b      	b.n	8003562 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d106      	bne.n	8003324 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7fe fb10 	bl	8001944 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2224      	movs	r2, #36	@ 0x24
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0201 	bic.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800334a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800335a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800335c:	f005 f8f6 	bl	800854c <HAL_RCC_GetPCLK1Freq>
 8003360:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	4a81      	ldr	r2, [pc, #516]	@ (800356c <HAL_I2C_Init+0x274>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d807      	bhi.n	800337c <HAL_I2C_Init+0x84>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4a80      	ldr	r2, [pc, #512]	@ (8003570 <HAL_I2C_Init+0x278>)
 8003370:	4293      	cmp	r3, r2
 8003372:	bf94      	ite	ls
 8003374:	2301      	movls	r3, #1
 8003376:	2300      	movhi	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	e006      	b.n	800338a <HAL_I2C_Init+0x92>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4a7d      	ldr	r2, [pc, #500]	@ (8003574 <HAL_I2C_Init+0x27c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	bf94      	ite	ls
 8003384:	2301      	movls	r3, #1
 8003386:	2300      	movhi	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e0e7      	b.n	8003562 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4a78      	ldr	r2, [pc, #480]	@ (8003578 <HAL_I2C_Init+0x280>)
 8003396:	fba2 2303 	umull	r2, r3, r2, r3
 800339a:	0c9b      	lsrs	r3, r3, #18
 800339c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	4a6a      	ldr	r2, [pc, #424]	@ (800356c <HAL_I2C_Init+0x274>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d802      	bhi.n	80033cc <HAL_I2C_Init+0xd4>
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	3301      	adds	r3, #1
 80033ca:	e009      	b.n	80033e0 <HAL_I2C_Init+0xe8>
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80033d2:	fb02 f303 	mul.w	r3, r2, r3
 80033d6:	4a69      	ldr	r2, [pc, #420]	@ (800357c <HAL_I2C_Init+0x284>)
 80033d8:	fba2 2303 	umull	r2, r3, r2, r3
 80033dc:	099b      	lsrs	r3, r3, #6
 80033de:	3301      	adds	r3, #1
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6812      	ldr	r2, [r2, #0]
 80033e4:	430b      	orrs	r3, r1
 80033e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80033f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	495c      	ldr	r1, [pc, #368]	@ (800356c <HAL_I2C_Init+0x274>)
 80033fc:	428b      	cmp	r3, r1
 80033fe:	d819      	bhi.n	8003434 <HAL_I2C_Init+0x13c>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	1e59      	subs	r1, r3, #1
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	fbb1 f3f3 	udiv	r3, r1, r3
 800340e:	1c59      	adds	r1, r3, #1
 8003410:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003414:	400b      	ands	r3, r1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <HAL_I2C_Init+0x138>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	1e59      	subs	r1, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	fbb1 f3f3 	udiv	r3, r1, r3
 8003428:	3301      	adds	r3, #1
 800342a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800342e:	e051      	b.n	80034d4 <HAL_I2C_Init+0x1dc>
 8003430:	2304      	movs	r3, #4
 8003432:	e04f      	b.n	80034d4 <HAL_I2C_Init+0x1dc>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d111      	bne.n	8003460 <HAL_I2C_Init+0x168>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	1e58      	subs	r0, r3, #1
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6859      	ldr	r1, [r3, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	440b      	add	r3, r1
 800344a:	fbb0 f3f3 	udiv	r3, r0, r3
 800344e:	3301      	adds	r3, #1
 8003450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003454:	2b00      	cmp	r3, #0
 8003456:	bf0c      	ite	eq
 8003458:	2301      	moveq	r3, #1
 800345a:	2300      	movne	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	e012      	b.n	8003486 <HAL_I2C_Init+0x18e>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	1e58      	subs	r0, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6859      	ldr	r1, [r3, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	0099      	lsls	r1, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	fbb0 f3f3 	udiv	r3, r0, r3
 8003476:	3301      	adds	r3, #1
 8003478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800347c:	2b00      	cmp	r3, #0
 800347e:	bf0c      	ite	eq
 8003480:	2301      	moveq	r3, #1
 8003482:	2300      	movne	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_I2C_Init+0x196>
 800348a:	2301      	movs	r3, #1
 800348c:	e022      	b.n	80034d4 <HAL_I2C_Init+0x1dc>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10e      	bne.n	80034b4 <HAL_I2C_Init+0x1bc>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	1e58      	subs	r0, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6859      	ldr	r1, [r3, #4]
 800349e:	460b      	mov	r3, r1
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	440b      	add	r3, r1
 80034a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80034a8:	3301      	adds	r3, #1
 80034aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034b2:	e00f      	b.n	80034d4 <HAL_I2C_Init+0x1dc>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	1e58      	subs	r0, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6859      	ldr	r1, [r3, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	0099      	lsls	r1, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ca:	3301      	adds	r3, #1
 80034cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	6809      	ldr	r1, [r1, #0]
 80034d8:	4313      	orrs	r3, r2
 80034da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69da      	ldr	r2, [r3, #28]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003502:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6911      	ldr	r1, [r2, #16]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	68d2      	ldr	r2, [r2, #12]
 800350e:	4311      	orrs	r1, r2
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6812      	ldr	r2, [r2, #0]
 8003514:	430b      	orrs	r3, r1
 8003516:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	695a      	ldr	r2, [r3, #20]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0201 	orr.w	r2, r2, #1
 8003542:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2220      	movs	r2, #32
 800354e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	000186a0 	.word	0x000186a0
 8003570:	001e847f 	.word	0x001e847f
 8003574:	003d08ff 	.word	0x003d08ff
 8003578:	431bde83 	.word	0x431bde83
 800357c:	10624dd3 	.word	0x10624dd3

08003580 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003592:	2b80      	cmp	r3, #128	@ 0x80
 8003594:	d103      	bne.n	800359e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2200      	movs	r2, #0
 800359c:	611a      	str	r2, [r3, #16]
  }
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
	...

080035ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b088      	sub	sp, #32
 80035b0:	af02      	add	r7, sp, #8
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	607a      	str	r2, [r7, #4]
 80035b6:	461a      	mov	r2, r3
 80035b8:	460b      	mov	r3, r1
 80035ba:	817b      	strh	r3, [r7, #10]
 80035bc:	4613      	mov	r3, r2
 80035be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035c0:	f7fe fc54 	bl	8001e6c <HAL_GetTick>
 80035c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b20      	cmp	r3, #32
 80035d0:	f040 80e0 	bne.w	8003794 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	2319      	movs	r3, #25
 80035da:	2201      	movs	r2, #1
 80035dc:	4970      	ldr	r1, [pc, #448]	@ (80037a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f002 feae 	bl	8006340 <I2C_WaitOnFlagUntilTimeout>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80035ea:	2302      	movs	r3, #2
 80035ec:	e0d3      	b.n	8003796 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <HAL_I2C_Master_Transmit+0x50>
 80035f8:	2302      	movs	r3, #2
 80035fa:	e0cc      	b.n	8003796 <HAL_I2C_Master_Transmit+0x1ea>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b01      	cmp	r3, #1
 8003610:	d007      	beq.n	8003622 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f042 0201 	orr.w	r2, r2, #1
 8003620:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003630:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2221      	movs	r2, #33	@ 0x21
 8003636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2210      	movs	r2, #16
 800363e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	893a      	ldrh	r2, [r7, #8]
 8003652:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4a50      	ldr	r2, [pc, #320]	@ (80037a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003662:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003664:	8979      	ldrh	r1, [r7, #10]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	6a3a      	ldr	r2, [r7, #32]
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f002 faa4 	bl	8005bb8 <I2C_MasterRequestWrite>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e08d      	b.n	8003796 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800367a:	2300      	movs	r3, #0
 800367c:	613b      	str	r3, [r7, #16]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	613b      	str	r3, [r7, #16]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	613b      	str	r3, [r7, #16]
 800368e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003690:	e066      	b.n	8003760 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	6a39      	ldr	r1, [r7, #32]
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f002 ff6c 	bl	8006574 <I2C_WaitOnTXEFlagUntilTimeout>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00d      	beq.n	80036be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d107      	bne.n	80036ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e06b      	b.n	8003796 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c2:	781a      	ldrb	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ce:	1c5a      	adds	r2, r3, #1
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d8:	b29b      	uxth	r3, r3
 80036da:	3b01      	subs	r3, #1
 80036dc:	b29a      	uxth	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e6:	3b01      	subs	r3, #1
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d11b      	bne.n	8003734 <HAL_I2C_Master_Transmit+0x188>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003700:	2b00      	cmp	r3, #0
 8003702:	d017      	beq.n	8003734 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003708:	781a      	ldrb	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800371e:	b29b      	uxth	r3, r3
 8003720:	3b01      	subs	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800372c:	3b01      	subs	r3, #1
 800372e:	b29a      	uxth	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	6a39      	ldr	r1, [r7, #32]
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f002 ff63 	bl	8006604 <I2C_WaitOnBTFFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00d      	beq.n	8003760 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003748:	2b04      	cmp	r3, #4
 800374a:	d107      	bne.n	800375c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800375a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e01a      	b.n	8003796 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003764:	2b00      	cmp	r3, #0
 8003766:	d194      	bne.n	8003692 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003776:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003790:	2300      	movs	r3, #0
 8003792:	e000      	b.n	8003796 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003794:	2302      	movs	r3, #2
  }
}
 8003796:	4618      	mov	r0, r3
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	00100002 	.word	0x00100002
 80037a4:	ffff0000 	.word	0xffff0000

080037a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b088      	sub	sp, #32
 80037ac:	af02      	add	r7, sp, #8
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	4608      	mov	r0, r1
 80037b2:	4611      	mov	r1, r2
 80037b4:	461a      	mov	r2, r3
 80037b6:	4603      	mov	r3, r0
 80037b8:	817b      	strh	r3, [r7, #10]
 80037ba:	460b      	mov	r3, r1
 80037bc:	813b      	strh	r3, [r7, #8]
 80037be:	4613      	mov	r3, r2
 80037c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037c2:	f7fe fb53 	bl	8001e6c <HAL_GetTick>
 80037c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b20      	cmp	r3, #32
 80037d2:	f040 80d9 	bne.w	8003988 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	2319      	movs	r3, #25
 80037dc:	2201      	movs	r2, #1
 80037de:	496d      	ldr	r1, [pc, #436]	@ (8003994 <HAL_I2C_Mem_Write+0x1ec>)
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f002 fdad 	bl	8006340 <I2C_WaitOnFlagUntilTimeout>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80037ec:	2302      	movs	r3, #2
 80037ee:	e0cc      	b.n	800398a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d101      	bne.n	80037fe <HAL_I2C_Mem_Write+0x56>
 80037fa:	2302      	movs	r3, #2
 80037fc:	e0c5      	b.n	800398a <HAL_I2C_Mem_Write+0x1e2>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b01      	cmp	r3, #1
 8003812:	d007      	beq.n	8003824 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0201 	orr.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003832:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2221      	movs	r2, #33	@ 0x21
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2240      	movs	r2, #64	@ 0x40
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a3a      	ldr	r2, [r7, #32]
 800384e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003854:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800385a:	b29a      	uxth	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4a4d      	ldr	r2, [pc, #308]	@ (8003998 <HAL_I2C_Mem_Write+0x1f0>)
 8003864:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003866:	88f8      	ldrh	r0, [r7, #6]
 8003868:	893a      	ldrh	r2, [r7, #8]
 800386a:	8979      	ldrh	r1, [r7, #10]
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	9301      	str	r3, [sp, #4]
 8003870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	4603      	mov	r3, r0
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f002 fa20 	bl	8005cbc <I2C_RequestMemoryWrite>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d052      	beq.n	8003928 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e081      	b.n	800398a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f002 fe72 	bl	8006574 <I2C_WaitOnTXEFlagUntilTimeout>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00d      	beq.n	80038b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389a:	2b04      	cmp	r3, #4
 800389c:	d107      	bne.n	80038ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e06b      	b.n	800398a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b6:	781a      	ldrb	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038cc:	3b01      	subs	r3, #1
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d8:	b29b      	uxth	r3, r3
 80038da:	3b01      	subs	r3, #1
 80038dc:	b29a      	uxth	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	d11b      	bne.n	8003928 <HAL_I2C_Mem_Write+0x180>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d017      	beq.n	8003928 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fc:	781a      	ldrb	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800391e:	b29b      	uxth	r3, r3
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1aa      	bne.n	8003886 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f002 fe65 	bl	8006604 <I2C_WaitOnBTFFlagUntilTimeout>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00d      	beq.n	800395c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003944:	2b04      	cmp	r3, #4
 8003946:	d107      	bne.n	8003958 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003956:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e016      	b.n	800398a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800396a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2220      	movs	r2, #32
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003984:	2300      	movs	r3, #0
 8003986:	e000      	b.n	800398a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003988:	2302      	movs	r3, #2
  }
}
 800398a:	4618      	mov	r0, r3
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	00100002 	.word	0x00100002
 8003998:	ffff0000 	.word	0xffff0000

0800399c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08c      	sub	sp, #48	@ 0x30
 80039a0:	af02      	add	r7, sp, #8
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	4608      	mov	r0, r1
 80039a6:	4611      	mov	r1, r2
 80039a8:	461a      	mov	r2, r3
 80039aa:	4603      	mov	r3, r0
 80039ac:	817b      	strh	r3, [r7, #10]
 80039ae:	460b      	mov	r3, r1
 80039b0:	813b      	strh	r3, [r7, #8]
 80039b2:	4613      	mov	r3, r2
 80039b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039b6:	f7fe fa59 	bl	8001e6c <HAL_GetTick>
 80039ba:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b20      	cmp	r3, #32
 80039c6:	f040 8214 	bne.w	8003df2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	2319      	movs	r3, #25
 80039d0:	2201      	movs	r2, #1
 80039d2:	497b      	ldr	r1, [pc, #492]	@ (8003bc0 <HAL_I2C_Mem_Read+0x224>)
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f002 fcb3 	bl	8006340 <I2C_WaitOnFlagUntilTimeout>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80039e0:	2302      	movs	r3, #2
 80039e2:	e207      	b.n	8003df4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d101      	bne.n	80039f2 <HAL_I2C_Mem_Read+0x56>
 80039ee:	2302      	movs	r3, #2
 80039f0:	e200      	b.n	8003df4 <HAL_I2C_Mem_Read+0x458>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d007      	beq.n	8003a18 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f042 0201 	orr.w	r2, r2, #1
 8003a16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2222      	movs	r2, #34	@ 0x22
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2240      	movs	r2, #64	@ 0x40
 8003a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003a48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4a5b      	ldr	r2, [pc, #364]	@ (8003bc4 <HAL_I2C_Mem_Read+0x228>)
 8003a58:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a5a:	88f8      	ldrh	r0, [r7, #6]
 8003a5c:	893a      	ldrh	r2, [r7, #8]
 8003a5e:	8979      	ldrh	r1, [r7, #10]
 8003a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a62:	9301      	str	r3, [sp, #4]
 8003a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	4603      	mov	r3, r0
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f002 f9bc 	bl	8005de8 <I2C_RequestMemoryRead>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e1bc      	b.n	8003df4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d113      	bne.n	8003aaa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a82:	2300      	movs	r3, #0
 8003a84:	623b      	str	r3, [r7, #32]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	623b      	str	r3, [r7, #32]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	623b      	str	r3, [r7, #32]
 8003a96:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	e190      	b.n	8003dcc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d11b      	bne.n	8003aea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ac0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61fb      	str	r3, [r7, #28]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	61fb      	str	r3, [r7, #28]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	61fb      	str	r3, [r7, #28]
 8003ad6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ae6:	601a      	str	r2, [r3, #0]
 8003ae8:	e170      	b.n	8003dcc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d11b      	bne.n	8003b2a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b00:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b12:	2300      	movs	r3, #0
 8003b14:	61bb      	str	r3, [r7, #24]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	61bb      	str	r3, [r7, #24]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	61bb      	str	r3, [r7, #24]
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	e150      	b.n	8003dcc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	617b      	str	r3, [r7, #20]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	617b      	str	r3, [r7, #20]
 8003b3e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003b40:	e144      	b.n	8003dcc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b46:	2b03      	cmp	r3, #3
 8003b48:	f200 80f1 	bhi.w	8003d2e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d123      	bne.n	8003b9c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b56:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f002 fdcd 	bl	80066f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e145      	b.n	8003df4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	691a      	ldr	r2, [r3, #16]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7a:	1c5a      	adds	r2, r3, #1
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b84:	3b01      	subs	r3, #1
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	3b01      	subs	r3, #1
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b9a:	e117      	b.n	8003dcc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d14e      	bne.n	8003c42 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003baa:	2200      	movs	r2, #0
 8003bac:	4906      	ldr	r1, [pc, #24]	@ (8003bc8 <HAL_I2C_Mem_Read+0x22c>)
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f002 fbc6 	bl	8006340 <I2C_WaitOnFlagUntilTimeout>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d008      	beq.n	8003bcc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e11a      	b.n	8003df4 <HAL_I2C_Mem_Read+0x458>
 8003bbe:	bf00      	nop
 8003bc0:	00100002 	.word	0x00100002
 8003bc4:	ffff0000 	.word	0xffff0000
 8003bc8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	691a      	ldr	r2, [r3, #16]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bee:	1c5a      	adds	r2, r3, #1
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c40:	e0c4      	b.n	8003dcc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c48:	2200      	movs	r2, #0
 8003c4a:	496c      	ldr	r1, [pc, #432]	@ (8003dfc <HAL_I2C_Mem_Read+0x460>)
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f002 fb77 	bl	8006340 <I2C_WaitOnFlagUntilTimeout>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e0cb      	b.n	8003df4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	691a      	ldr	r2, [r3, #16]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	4955      	ldr	r1, [pc, #340]	@ (8003dfc <HAL_I2C_Mem_Read+0x460>)
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f002 fb49 	bl	8006340 <I2C_WaitOnFlagUntilTimeout>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e09d      	b.n	8003df4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	691a      	ldr	r2, [r3, #16]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd2:	b2d2      	uxtb	r2, r2
 8003cd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	691a      	ldr	r2, [r3, #16]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d04:	b2d2      	uxtb	r2, r2
 8003d06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0c:	1c5a      	adds	r2, r3, #1
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d16:	3b01      	subs	r3, #1
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d2c:	e04e      	b.n	8003dcc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d30:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f002 fce0 	bl	80066f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e058      	b.n	8003df4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	691a      	ldr	r2, [r3, #16]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4c:	b2d2      	uxtb	r2, r2
 8003d4e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d54:	1c5a      	adds	r2, r3, #1
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d124      	bne.n	8003dcc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d86:	2b03      	cmp	r3, #3
 8003d88:	d107      	bne.n	8003d9a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d98:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	691a      	ldr	r2, [r3, #16]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da4:	b2d2      	uxtb	r2, r2
 8003da6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003db6:	3b01      	subs	r3, #1
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f47f aeb6 	bne.w	8003b42 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	e000      	b.n	8003df4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003df2:	2302      	movs	r3, #2
  }
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3728      	adds	r7, #40	@ 0x28
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	00010004 	.word	0x00010004

08003e00 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08a      	sub	sp, #40	@ 0x28
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	4608      	mov	r0, r1
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	4603      	mov	r3, r0
 8003e10:	817b      	strh	r3, [r7, #10]
 8003e12:	460b      	mov	r3, r1
 8003e14:	813b      	strh	r3, [r7, #8]
 8003e16:	4613      	mov	r3, r2
 8003e18:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e1e:	f7fe f825 	bl	8001e6c <HAL_GetTick>
 8003e22:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b20      	cmp	r3, #32
 8003e2e:	f040 8136 	bne.w	800409e <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e32:	4b9d      	ldr	r3, [pc, #628]	@ (80040a8 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	08db      	lsrs	r3, r3, #3
 8003e38:	4a9c      	ldr	r2, [pc, #624]	@ (80040ac <HAL_I2C_Mem_Write_DMA+0x2ac>)
 8003e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3e:	0a1a      	lsrs	r2, r3, #8
 8003e40:	4613      	mov	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4413      	add	r3, r2
 8003e46:	009a      	lsls	r2, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d112      	bne.n	8003e7e <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2220      	movs	r2, #32
 8003e62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e72:	f043 0220 	orr.w	r2, r3, #32
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	e110      	b.n	80040a0 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d0df      	beq.n	8003e4c <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d101      	bne.n	8003e9a <HAL_I2C_Mem_Write_DMA+0x9a>
 8003e96:	2302      	movs	r3, #2
 8003e98:	e102      	b.n	80040a0 <HAL_I2C_Mem_Write_DMA+0x2a0>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d007      	beq.n	8003ec0 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0201 	orr.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ece:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2221      	movs	r2, #33	@ 0x21
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2240      	movs	r2, #64	@ 0x40
 8003edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003eea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003ef0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4a6c      	ldr	r2, [pc, #432]	@ (80040b0 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8003f00:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8003f02:	897a      	ldrh	r2, [r7, #10]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8003f08:	893a      	ldrh	r2, [r7, #8]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003f0e:	88fa      	ldrh	r2, [r7, #6]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 80a9 	beq.w	8004076 <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d02a      	beq.n	8003f82 <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f30:	4a60      	ldr	r2, [pc, #384]	@ (80040b4 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8003f32:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f38:	4a5f      	ldr	r2, [pc, #380]	@ (80040b8 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8003f3a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f40:	2200      	movs	r2, #0
 8003f42:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f48:	2200      	movs	r2, #0
 8003f4a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f50:	2200      	movs	r2, #0
 8003f52:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f58:	2200      	movs	r2, #0
 8003f5a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f64:	4619      	mov	r1, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3310      	adds	r3, #16
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f72:	f7fe fd0b 	bl	800298c <HAL_DMA_Start_IT>
 8003f76:	4603      	mov	r3, r0
 8003f78:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003f7a:	7efb      	ldrb	r3, [r7, #27]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d166      	bne.n	800404e <HAL_I2C_Mem_Write_DMA+0x24e>
 8003f80:	e013      	b.n	8003faa <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f96:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e07a      	b.n	80040a0 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003faa:	88f8      	ldrh	r0, [r7, #6]
 8003fac:	893a      	ldrh	r2, [r7, #8]
 8003fae:	8979      	ldrh	r1, [r7, #10]
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	9301      	str	r3, [sp, #4]
 8003fb4:	2323      	movs	r3, #35	@ 0x23
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	4603      	mov	r3, r0
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f001 fe7e 	bl	8005cbc <I2C_RequestMemoryWrite>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d022      	beq.n	800400c <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fe fd36 	bl	8002a3c <HAL_DMA_Abort_IT>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fd8:	2200      	movs	r2, #0
 8003fda:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fea:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0201 	bic.w	r2, r2, #1
 8004006:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e049      	b.n	80040a0 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800400c:	2300      	movs	r3, #0
 800400e:	613b      	str	r3, [r7, #16]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	613b      	str	r3, [r7, #16]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	613b      	str	r3, [r7, #16]
 8004020:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004038:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004048:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 800404a:	2300      	movs	r3, #0
 800404c:	e028      	b.n	80040a0 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2220      	movs	r2, #32
 8004052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004062:	f043 0210 	orr.w	r2, r3, #16
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e014      	b.n	80040a0 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2220      	movs	r2, #32
 800407a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 800409e:	2302      	movs	r3, #2
  }
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3720      	adds	r7, #32
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	20000004 	.word	0x20000004
 80040ac:	14f8b589 	.word	0x14f8b589
 80040b0:	ffff0000 	.word	0xffff0000
 80040b4:	08005fb9 	.word	0x08005fb9
 80040b8:	08006177 	.word	0x08006177

080040bc <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08c      	sub	sp, #48	@ 0x30
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	4608      	mov	r0, r1
 80040c6:	4611      	mov	r1, r2
 80040c8:	461a      	mov	r2, r3
 80040ca:	4603      	mov	r3, r0
 80040cc:	817b      	strh	r3, [r7, #10]
 80040ce:	460b      	mov	r3, r1
 80040d0:	813b      	strh	r3, [r7, #8]
 80040d2:	4613      	mov	r3, r2
 80040d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040d6:	f7fd fec9 	bl	8001e6c <HAL_GetTick>
 80040da:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 80040dc:	2300      	movs	r3, #0
 80040de:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b20      	cmp	r3, #32
 80040ea:	f040 8172 	bne.w	80043d2 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80040ee:	4b93      	ldr	r3, [pc, #588]	@ (800433c <HAL_I2C_Mem_Read_DMA+0x280>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	08db      	lsrs	r3, r3, #3
 80040f4:	4a92      	ldr	r2, [pc, #584]	@ (8004340 <HAL_I2C_Mem_Read_DMA+0x284>)
 80040f6:	fba2 2303 	umull	r2, r3, r2, r3
 80040fa:	0a1a      	lsrs	r2, r3, #8
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	009a      	lsls	r2, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	3b01      	subs	r3, #1
 800410c:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d112      	bne.n	800413a <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2220      	movs	r2, #32
 800411e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412e:	f043 0220 	orr.w	r2, r3, #32
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8004136:	2302      	movs	r3, #2
 8004138:	e14c      	b.n	80043d4 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b02      	cmp	r3, #2
 8004146:	d0df      	beq.n	8004108 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800414e:	2b01      	cmp	r3, #1
 8004150:	d101      	bne.n	8004156 <HAL_I2C_Mem_Read_DMA+0x9a>
 8004152:	2302      	movs	r3, #2
 8004154:	e13e      	b.n	80043d4 <HAL_I2C_Mem_Read_DMA+0x318>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b01      	cmp	r3, #1
 800416a:	d007      	beq.n	800417c <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0201 	orr.w	r2, r2, #1
 800417a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800418a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2222      	movs	r2, #34	@ 0x22
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2240      	movs	r2, #64	@ 0x40
 8004198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80041ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4a62      	ldr	r2, [pc, #392]	@ (8004344 <HAL_I2C_Mem_Read_DMA+0x288>)
 80041bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80041be:	897a      	ldrh	r2, [r7, #10]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80041c4:	893a      	ldrh	r2, [r7, #8]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80041ca:	88fa      	ldrh	r2, [r7, #6]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f000 80cc 	beq.w	8004378 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d02d      	beq.n	8004244 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ec:	4a56      	ldr	r2, [pc, #344]	@ (8004348 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80041ee:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f4:	4a55      	ldr	r2, [pc, #340]	@ (800434c <HAL_I2C_Mem_Read_DMA+0x290>)
 80041f6:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041fc:	2200      	movs	r2, #0
 80041fe:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004204:	2200      	movs	r2, #0
 8004206:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800420c:	2200      	movs	r2, #0
 800420e:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004214:	2200      	movs	r2, #0
 8004216:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	3310      	adds	r3, #16
 8004222:	4619      	mov	r1, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004228:	461a      	mov	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800422e:	f7fe fbad 	bl	800298c <HAL_DMA_Start_IT>
 8004232:	4603      	mov	r3, r0
 8004234:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004238:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800423c:	2b00      	cmp	r3, #0
 800423e:	f040 8087 	bne.w	8004350 <HAL_I2C_Mem_Read_DMA+0x294>
 8004242:	e013      	b.n	800426c <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004258:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e0b3      	b.n	80043d4 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800426c:	88f8      	ldrh	r0, [r7, #6]
 800426e:	893a      	ldrh	r2, [r7, #8]
 8004270:	8979      	ldrh	r1, [r7, #10]
 8004272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004274:	9301      	str	r3, [sp, #4]
 8004276:	2323      	movs	r3, #35	@ 0x23
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	4603      	mov	r3, r0
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f001 fdb3 	bl	8005de8 <I2C_RequestMemoryRead>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d023      	beq.n	80042d0 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800428c:	4618      	mov	r0, r3
 800428e:	f7fe fbd5 	bl	8002a3c <HAL_DMA_Abort_IT>
 8004292:	4603      	mov	r3, r0
 8004294:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800429c:	2200      	movs	r2, #0
 800429e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042ae:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0201 	bic.w	r2, r2, #1
 80042ca:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e081      	b.n	80043d4 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d108      	bne.n	80042ea <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	e007      	b.n	80042fa <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80042f8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042fa:	2300      	movs	r3, #0
 80042fc:	61bb      	str	r3, [r7, #24]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	61bb      	str	r3, [r7, #24]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	61bb      	str	r3, [r7, #24]
 800430e:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004326:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004336:	605a      	str	r2, [r3, #4]
 8004338:	e049      	b.n	80043ce <HAL_I2C_Mem_Read_DMA+0x312>
 800433a:	bf00      	nop
 800433c:	20000004 	.word	0x20000004
 8004340:	14f8b589 	.word	0x14f8b589
 8004344:	ffff0000 	.word	0xffff0000
 8004348:	08005fb9 	.word	0x08005fb9
 800434c:	08006177 	.word	0x08006177
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2220      	movs	r2, #32
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004364:	f043 0210 	orr.w	r2, r3, #16
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e02d      	b.n	80043d4 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004378:	88f8      	ldrh	r0, [r7, #6]
 800437a:	893a      	ldrh	r2, [r7, #8]
 800437c:	8979      	ldrh	r1, [r7, #10]
 800437e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004380:	9301      	str	r3, [sp, #4]
 8004382:	2323      	movs	r3, #35	@ 0x23
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	4603      	mov	r3, r0
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f001 fd2d 	bl	8005de8 <I2C_RequestMemoryRead>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e01d      	b.n	80043d4 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004398:	2300      	movs	r3, #0
 800439a:	617b      	str	r3, [r7, #20]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	617b      	str	r3, [r7, #20]
 80043ac:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043bc:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	e000      	b.n	80043d4 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 80043d2:	2302      	movs	r3, #2
  }
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3728      	adds	r7, #40	@ 0x28
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b088      	sub	sp, #32
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043fc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004404:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004406:	7bfb      	ldrb	r3, [r7, #15]
 8004408:	2b10      	cmp	r3, #16
 800440a:	d003      	beq.n	8004414 <HAL_I2C_EV_IRQHandler+0x38>
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	2b40      	cmp	r3, #64	@ 0x40
 8004410:	f040 80c1 	bne.w	8004596 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10d      	bne.n	800444a <HAL_I2C_EV_IRQHandler+0x6e>
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004434:	d003      	beq.n	800443e <HAL_I2C_EV_IRQHandler+0x62>
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800443c:	d101      	bne.n	8004442 <HAL_I2C_EV_IRQHandler+0x66>
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <HAL_I2C_EV_IRQHandler+0x68>
 8004442:	2300      	movs	r3, #0
 8004444:	2b01      	cmp	r3, #1
 8004446:	f000 8132 	beq.w	80046ae <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00c      	beq.n	800446e <HAL_I2C_EV_IRQHandler+0x92>
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	0a5b      	lsrs	r3, r3, #9
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	d006      	beq.n	800446e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f002 f9d5 	bl	8006810 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 fd87 	bl	8004f7a <I2C_Master_SB>
 800446c:	e092      	b.n	8004594 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	08db      	lsrs	r3, r3, #3
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	d009      	beq.n	800448e <HAL_I2C_EV_IRQHandler+0xb2>
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	0a5b      	lsrs	r3, r3, #9
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fdfd 	bl	8005086 <I2C_Master_ADD10>
 800448c:	e082      	b.n	8004594 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	085b      	lsrs	r3, r3, #1
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d009      	beq.n	80044ae <HAL_I2C_EV_IRQHandler+0xd2>
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	0a5b      	lsrs	r3, r3, #9
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 fe17 	bl	80050da <I2C_Master_ADDR>
 80044ac:	e072      	b.n	8004594 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	089b      	lsrs	r3, r3, #2
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d03b      	beq.n	8004532 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044c8:	f000 80f3 	beq.w	80046b2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	09db      	lsrs	r3, r3, #7
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00f      	beq.n	80044f8 <HAL_I2C_EV_IRQHandler+0x11c>
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	0a9b      	lsrs	r3, r3, #10
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d009      	beq.n	80044f8 <HAL_I2C_EV_IRQHandler+0x11c>
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	089b      	lsrs	r3, r3, #2
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d103      	bne.n	80044f8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f9df 	bl	80048b4 <I2C_MasterTransmit_TXE>
 80044f6:	e04d      	b.n	8004594 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	089b      	lsrs	r3, r3, #2
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 80d6 	beq.w	80046b2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	0a5b      	lsrs	r3, r3, #9
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 80cf 	beq.w	80046b2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004514:	7bbb      	ldrb	r3, [r7, #14]
 8004516:	2b21      	cmp	r3, #33	@ 0x21
 8004518:	d103      	bne.n	8004522 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fa66 	bl	80049ec <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004520:	e0c7      	b.n	80046b2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004522:	7bfb      	ldrb	r3, [r7, #15]
 8004524:	2b40      	cmp	r3, #64	@ 0x40
 8004526:	f040 80c4 	bne.w	80046b2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fad4 	bl	8004ad8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004530:	e0bf      	b.n	80046b2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800453c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004540:	f000 80b7 	beq.w	80046b2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	099b      	lsrs	r3, r3, #6
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00f      	beq.n	8004570 <HAL_I2C_EV_IRQHandler+0x194>
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	0a9b      	lsrs	r3, r3, #10
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	d009      	beq.n	8004570 <HAL_I2C_EV_IRQHandler+0x194>
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	089b      	lsrs	r3, r3, #2
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	d103      	bne.n	8004570 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 fb4d 	bl	8004c08 <I2C_MasterReceive_RXNE>
 800456e:	e011      	b.n	8004594 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	089b      	lsrs	r3, r3, #2
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 809a 	beq.w	80046b2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	0a5b      	lsrs	r3, r3, #9
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 8093 	beq.w	80046b2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 fc03 	bl	8004d98 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004592:	e08e      	b.n	80046b2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004594:	e08d      	b.n	80046b2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459a:	2b00      	cmp	r3, #0
 800459c:	d004      	beq.n	80045a8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	61fb      	str	r3, [r7, #28]
 80045a6:	e007      	b.n	80045b8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	085b      	lsrs	r3, r3, #1
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d012      	beq.n	80045ea <HAL_I2C_EV_IRQHandler+0x20e>
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	0a5b      	lsrs	r3, r3, #9
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00c      	beq.n	80045ea <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80045e0:	69b9      	ldr	r1, [r7, #24]
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 ffc8 	bl	8005578 <I2C_Slave_ADDR>
 80045e8:	e066      	b.n	80046b8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	091b      	lsrs	r3, r3, #4
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d009      	beq.n	800460a <HAL_I2C_EV_IRQHandler+0x22e>
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	0a5b      	lsrs	r3, r3, #9
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f001 f802 	bl	800560c <I2C_Slave_STOPF>
 8004608:	e056      	b.n	80046b8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800460a:	7bbb      	ldrb	r3, [r7, #14]
 800460c:	2b21      	cmp	r3, #33	@ 0x21
 800460e:	d002      	beq.n	8004616 <HAL_I2C_EV_IRQHandler+0x23a>
 8004610:	7bbb      	ldrb	r3, [r7, #14]
 8004612:	2b29      	cmp	r3, #41	@ 0x29
 8004614:	d125      	bne.n	8004662 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	09db      	lsrs	r3, r3, #7
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00f      	beq.n	8004642 <HAL_I2C_EV_IRQHandler+0x266>
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	0a9b      	lsrs	r3, r3, #10
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d009      	beq.n	8004642 <HAL_I2C_EV_IRQHandler+0x266>
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	089b      	lsrs	r3, r3, #2
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d103      	bne.n	8004642 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 fede 	bl	80053fc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004640:	e039      	b.n	80046b6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	089b      	lsrs	r3, r3, #2
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d033      	beq.n	80046b6 <HAL_I2C_EV_IRQHandler+0x2da>
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	0a5b      	lsrs	r3, r3, #9
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d02d      	beq.n	80046b6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 ff0b 	bl	8005476 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004660:	e029      	b.n	80046b6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	099b      	lsrs	r3, r3, #6
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00f      	beq.n	800468e <HAL_I2C_EV_IRQHandler+0x2b2>
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	0a9b      	lsrs	r3, r3, #10
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d009      	beq.n	800468e <HAL_I2C_EV_IRQHandler+0x2b2>
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	089b      	lsrs	r3, r3, #2
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d103      	bne.n	800468e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 ff16 	bl	80054b8 <I2C_SlaveReceive_RXNE>
 800468c:	e014      	b.n	80046b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	089b      	lsrs	r3, r3, #2
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00e      	beq.n	80046b8 <HAL_I2C_EV_IRQHandler+0x2dc>
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	0a5b      	lsrs	r3, r3, #9
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d008      	beq.n	80046b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 ff44 	bl	8005534 <I2C_SlaveReceive_BTF>
 80046ac:	e004      	b.n	80046b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80046ae:	bf00      	nop
 80046b0:	e002      	b.n	80046b8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046b2:	bf00      	nop
 80046b4:	e000      	b.n	80046b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046b6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80046b8:	3720      	adds	r7, #32
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b08a      	sub	sp, #40	@ 0x28
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80046d6:	2300      	movs	r3, #0
 80046d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046e0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80046e2:	6a3b      	ldr	r3, [r7, #32]
 80046e4:	0a1b      	lsrs	r3, r3, #8
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00e      	beq.n	800470c <HAL_I2C_ER_IRQHandler+0x4e>
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	0a1b      	lsrs	r3, r3, #8
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d008      	beq.n	800470c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80046fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fc:	f043 0301 	orr.w	r3, r3, #1
 8004700:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800470a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	0a5b      	lsrs	r3, r3, #9
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00e      	beq.n	8004736 <HAL_I2C_ER_IRQHandler+0x78>
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	0a1b      	lsrs	r3, r3, #8
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b00      	cmp	r3, #0
 8004722:	d008      	beq.n	8004736 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004726:	f043 0302 	orr.w	r3, r3, #2
 800472a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8004734:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004736:	6a3b      	ldr	r3, [r7, #32]
 8004738:	0a9b      	lsrs	r3, r3, #10
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d03f      	beq.n	80047c2 <HAL_I2C_ER_IRQHandler+0x104>
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	0a1b      	lsrs	r3, r3, #8
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d039      	beq.n	80047c2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800474e:	7efb      	ldrb	r3, [r7, #27]
 8004750:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004756:	b29b      	uxth	r3, r3
 8004758:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004760:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004766:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004768:	7ebb      	ldrb	r3, [r7, #26]
 800476a:	2b20      	cmp	r3, #32
 800476c:	d112      	bne.n	8004794 <HAL_I2C_ER_IRQHandler+0xd6>
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10f      	bne.n	8004794 <HAL_I2C_ER_IRQHandler+0xd6>
 8004774:	7cfb      	ldrb	r3, [r7, #19]
 8004776:	2b21      	cmp	r3, #33	@ 0x21
 8004778:	d008      	beq.n	800478c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800477a:	7cfb      	ldrb	r3, [r7, #19]
 800477c:	2b29      	cmp	r3, #41	@ 0x29
 800477e:	d005      	beq.n	800478c <HAL_I2C_ER_IRQHandler+0xce>
 8004780:	7cfb      	ldrb	r3, [r7, #19]
 8004782:	2b28      	cmp	r3, #40	@ 0x28
 8004784:	d106      	bne.n	8004794 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2b21      	cmp	r3, #33	@ 0x21
 800478a:	d103      	bne.n	8004794 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f001 f86d 	bl	800586c <I2C_Slave_AF>
 8004792:	e016      	b.n	80047c2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800479c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800479e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a0:	f043 0304 	orr.w	r3, r3, #4
 80047a4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80047a6:	7efb      	ldrb	r3, [r7, #27]
 80047a8:	2b10      	cmp	r3, #16
 80047aa:	d002      	beq.n	80047b2 <HAL_I2C_ER_IRQHandler+0xf4>
 80047ac:	7efb      	ldrb	r3, [r7, #27]
 80047ae:	2b40      	cmp	r3, #64	@ 0x40
 80047b0:	d107      	bne.n	80047c2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047c0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80047c2:	6a3b      	ldr	r3, [r7, #32]
 80047c4:	0adb      	lsrs	r3, r3, #11
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00e      	beq.n	80047ec <HAL_I2C_ER_IRQHandler+0x12e>
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	0a1b      	lsrs	r3, r3, #8
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d008      	beq.n	80047ec <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80047da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047dc:	f043 0308 	orr.w	r3, r3, #8
 80047e0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80047ea:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80047ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d008      	beq.n	8004804 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f8:	431a      	orrs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f001 f8a8 	bl	8005954 <I2C_ITError>
  }
}
 8004804:	bf00      	nop
 8004806:	3728      	adds	r7, #40	@ 0x28
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	460b      	mov	r3, r1
 8004866:	70fb      	strb	r3, [r7, #3]
 8004868:	4613      	mov	r3, r2
 800486a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048c2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048ca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d150      	bne.n	800497c <I2C_MasterTransmit_TXE+0xc8>
 80048da:	7bfb      	ldrb	r3, [r7, #15]
 80048dc:	2b21      	cmp	r3, #33	@ 0x21
 80048de:	d14d      	bne.n	800497c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	2b08      	cmp	r3, #8
 80048e4:	d01d      	beq.n	8004922 <I2C_MasterTransmit_TXE+0x6e>
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	d01a      	beq.n	8004922 <I2C_MasterTransmit_TXE+0x6e>
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80048f2:	d016      	beq.n	8004922 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004902:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2211      	movs	r2, #17
 8004908:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2220      	movs	r2, #32
 8004916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7ff ff76 	bl	800480c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004920:	e060      	b.n	80049e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004930:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004940:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b40      	cmp	r3, #64	@ 0x40
 800495a:	d107      	bne.n	800496c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7fc f8df 	bl	8000b28 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800496a:	e03b      	b.n	80049e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7ff ff49 	bl	800480c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800497a:	e033      	b.n	80049e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800497c:	7bfb      	ldrb	r3, [r7, #15]
 800497e:	2b21      	cmp	r3, #33	@ 0x21
 8004980:	d005      	beq.n	800498e <I2C_MasterTransmit_TXE+0xda>
 8004982:	7bbb      	ldrb	r3, [r7, #14]
 8004984:	2b40      	cmp	r3, #64	@ 0x40
 8004986:	d12d      	bne.n	80049e4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004988:	7bfb      	ldrb	r3, [r7, #15]
 800498a:	2b22      	cmp	r3, #34	@ 0x22
 800498c:	d12a      	bne.n	80049e4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004992:	b29b      	uxth	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d108      	bne.n	80049aa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049a6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80049a8:	e01c      	b.n	80049e4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b40      	cmp	r3, #64	@ 0x40
 80049b4:	d103      	bne.n	80049be <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f88e 	bl	8004ad8 <I2C_MemoryTransmit_TXE_BTF>
}
 80049bc:	e012      	b.n	80049e4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c2:	781a      	ldrb	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ce:	1c5a      	adds	r2, r3, #1
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d8:	b29b      	uxth	r3, r3
 80049da:	3b01      	subs	r3, #1
 80049dc:	b29a      	uxth	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80049e2:	e7ff      	b.n	80049e4 <I2C_MasterTransmit_TXE+0x130>
 80049e4:	bf00      	nop
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b21      	cmp	r3, #33	@ 0x21
 8004a04:	d164      	bne.n	8004ad0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d012      	beq.n	8004a36 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a14:	781a      	ldrb	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a20:	1c5a      	adds	r2, r3, #1
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004a34:	e04c      	b.n	8004ad0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	d01d      	beq.n	8004a78 <I2C_MasterTransmit_BTF+0x8c>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2b20      	cmp	r3, #32
 8004a40:	d01a      	beq.n	8004a78 <I2C_MasterTransmit_BTF+0x8c>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a48:	d016      	beq.n	8004a78 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a58:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2211      	movs	r2, #17
 8004a5e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff fecb 	bl	800480c <HAL_I2C_MasterTxCpltCallback>
}
 8004a76:	e02b      	b.n	8004ad0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a86:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a96:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b40      	cmp	r3, #64	@ 0x40
 8004ab0:	d107      	bne.n	8004ac2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7fc f834 	bl	8000b28 <HAL_I2C_MemTxCpltCallback>
}
 8004ac0:	e006      	b.n	8004ad0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7ff fe9e 	bl	800480c <HAL_I2C_MasterTxCpltCallback>
}
 8004ad0:	bf00      	nop
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ae6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d11d      	bne.n	8004b2c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d10b      	bne.n	8004b10 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b08:	1c9a      	adds	r2, r3, #2
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004b0e:	e077      	b.n	8004c00 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	121b      	asrs	r3, r3, #8
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004b2a:	e069      	b.n	8004c00 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d10b      	bne.n	8004b4c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b44:	1c5a      	adds	r2, r3, #1
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004b4a:	e059      	b.n	8004c00 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d152      	bne.n	8004bfa <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
 8004b56:	2b22      	cmp	r3, #34	@ 0x22
 8004b58:	d10d      	bne.n	8004b76 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b68:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b6e:	1c5a      	adds	r2, r3, #1
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004b74:	e044      	b.n	8004c00 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d015      	beq.n	8004bac <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004b80:	7bfb      	ldrb	r3, [r7, #15]
 8004b82:	2b21      	cmp	r3, #33	@ 0x21
 8004b84:	d112      	bne.n	8004bac <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8a:	781a      	ldrb	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004baa:	e029      	b.n	8004c00 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d124      	bne.n	8004c00 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004bb6:	7bfb      	ldrb	r3, [r7, #15]
 8004bb8:	2b21      	cmp	r3, #33	@ 0x21
 8004bba:	d121      	bne.n	8004c00 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004bca:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bda:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2220      	movs	r2, #32
 8004be6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7fb ff98 	bl	8000b28 <HAL_I2C_MemTxCpltCallback>
}
 8004bf8:	e002      	b.n	8004c00 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7fe fcc0 	bl	8003580 <I2C_Flush_DR>
}
 8004c00:	bf00      	nop
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b22      	cmp	r3, #34	@ 0x22
 8004c1a:	f040 80b9 	bne.w	8004d90 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c22:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	2b03      	cmp	r3, #3
 8004c30:	d921      	bls.n	8004c76 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	691a      	ldr	r2, [r3, #16]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c44:	1c5a      	adds	r2, r3, #1
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	2b03      	cmp	r3, #3
 8004c60:	f040 8096 	bne.w	8004d90 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c72:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004c74:	e08c      	b.n	8004d90 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d07f      	beq.n	8004d7e <I2C_MasterReceive_RXNE+0x176>
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d002      	beq.n	8004c8a <I2C_MasterReceive_RXNE+0x82>
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d179      	bne.n	8004d7e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f001 fd02 	bl	8006694 <I2C_WaitOnSTOPRequestThroughIT>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d14c      	bne.n	8004d30 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ca4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004cb4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	691a      	ldr	r2, [r3, #16]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc0:	b2d2      	uxtb	r2, r2
 8004cc2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b40      	cmp	r3, #64	@ 0x40
 8004cee:	d10a      	bne.n	8004d06 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7fb ff20 	bl	8000b44 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d04:	e044      	b.n	8004d90 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d002      	beq.n	8004d1a <I2C_MasterReceive_RXNE+0x112>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2b20      	cmp	r3, #32
 8004d18:	d103      	bne.n	8004d22 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d20:	e002      	b.n	8004d28 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2212      	movs	r2, #18
 8004d26:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f7ff fd79 	bl	8004820 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d2e:	e02f      	b.n	8004d90 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d3e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	691a      	ldr	r2, [r3, #16]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4a:	b2d2      	uxtb	r2, r2
 8004d4c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d52:	1c5a      	adds	r2, r3, #1
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7ff fd88 	bl	800488c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d7c:	e008      	b.n	8004d90 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d8c:	605a      	str	r2, [r3, #4]
}
 8004d8e:	e7ff      	b.n	8004d90 <I2C_MasterReceive_RXNE+0x188>
 8004d90:	bf00      	nop
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	2b04      	cmp	r3, #4
 8004dae:	d11b      	bne.n	8004de8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dbe:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	691a      	ldr	r2, [r3, #16]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd2:	1c5a      	adds	r2, r3, #1
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	3b01      	subs	r3, #1
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004de6:	e0c4      	b.n	8004f72 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	2b03      	cmp	r3, #3
 8004df0:	d129      	bne.n	8004e46 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e00:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2b04      	cmp	r3, #4
 8004e06:	d00a      	beq.n	8004e1e <I2C_MasterReceive_BTF+0x86>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d007      	beq.n	8004e1e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e1c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	691a      	ldr	r2, [r3, #16]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e28:	b2d2      	uxtb	r2, r2
 8004e2a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e30:	1c5a      	adds	r2, r3, #1
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004e44:	e095      	b.n	8004f72 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d17d      	bne.n	8004f4c <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d002      	beq.n	8004e5c <I2C_MasterReceive_BTF+0xc4>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2b10      	cmp	r3, #16
 8004e5a:	d108      	bne.n	8004e6e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	e016      	b.n	8004e9c <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b04      	cmp	r3, #4
 8004e72:	d002      	beq.n	8004e7a <I2C_MasterReceive_BTF+0xe2>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d108      	bne.n	8004e8c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004e88:	601a      	str	r2, [r3, #0]
 8004e8a:	e007      	b.n	8004e9c <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e9a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	691a      	ldr	r2, [r3, #16]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea6:	b2d2      	uxtb	r2, r2
 8004ea8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eae:	1c5a      	adds	r2, r3, #1
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	691a      	ldr	r2, [r3, #16]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ecc:	b2d2      	uxtb	r2, r2
 8004ece:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed4:	1c5a      	adds	r2, r3, #1
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004ef6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2220      	movs	r2, #32
 8004efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b40      	cmp	r3, #64	@ 0x40
 8004f0a:	d10a      	bne.n	8004f22 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7fb fe12 	bl	8000b44 <HAL_I2C_MemRxCpltCallback>
}
 8004f20:	e027      	b.n	8004f72 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d002      	beq.n	8004f36 <I2C_MasterReceive_BTF+0x19e>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2b20      	cmp	r3, #32
 8004f34:	d103      	bne.n	8004f3e <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f3c:	e002      	b.n	8004f44 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2212      	movs	r2, #18
 8004f42:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f7ff fc6b 	bl	8004820 <HAL_I2C_MasterRxCpltCallback>
}
 8004f4a:	e012      	b.n	8004f72 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	691a      	ldr	r2, [r3, #16]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5e:	1c5a      	adds	r2, r3, #1
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004f72:	bf00      	nop
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b40      	cmp	r3, #64	@ 0x40
 8004f8c:	d117      	bne.n	8004fbe <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d109      	bne.n	8004faa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004fa6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004fa8:	e067      	b.n	800507a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	f043 0301 	orr.w	r3, r3, #1
 8004fb4:	b2da      	uxtb	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	611a      	str	r2, [r3, #16]
}
 8004fbc:	e05d      	b.n	800507a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fc6:	d133      	bne.n	8005030 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b21      	cmp	r3, #33	@ 0x21
 8004fd2:	d109      	bne.n	8004fe8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	461a      	mov	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004fe4:	611a      	str	r2, [r3, #16]
 8004fe6:	e008      	b.n	8004ffa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	f043 0301 	orr.w	r3, r3, #1
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d004      	beq.n	800500c <I2C_Master_SB+0x92>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005008:	2b00      	cmp	r3, #0
 800500a:	d108      	bne.n	800501e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005010:	2b00      	cmp	r3, #0
 8005012:	d032      	beq.n	800507a <I2C_Master_SB+0x100>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800501a:	2b00      	cmp	r3, #0
 800501c:	d02d      	beq.n	800507a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800502c:	605a      	str	r2, [r3, #4]
}
 800502e:	e024      	b.n	800507a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10e      	bne.n	8005056 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800503c:	b29b      	uxth	r3, r3
 800503e:	11db      	asrs	r3, r3, #7
 8005040:	b2db      	uxtb	r3, r3
 8005042:	f003 0306 	and.w	r3, r3, #6
 8005046:	b2db      	uxtb	r3, r3
 8005048:	f063 030f 	orn	r3, r3, #15
 800504c:	b2da      	uxtb	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	611a      	str	r2, [r3, #16]
}
 8005054:	e011      	b.n	800507a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800505a:	2b01      	cmp	r3, #1
 800505c:	d10d      	bne.n	800507a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005062:	b29b      	uxth	r3, r3
 8005064:	11db      	asrs	r3, r3, #7
 8005066:	b2db      	uxtb	r3, r3
 8005068:	f003 0306 	and.w	r3, r3, #6
 800506c:	b2db      	uxtb	r3, r3
 800506e:	f063 030e 	orn	r3, r3, #14
 8005072:	b2da      	uxtb	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	611a      	str	r2, [r3, #16]
}
 800507a:	bf00      	nop
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005086:	b480      	push	{r7}
 8005088:	b083      	sub	sp, #12
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005092:	b2da      	uxtb	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d004      	beq.n	80050ac <I2C_Master_ADD10+0x26>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d108      	bne.n	80050be <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00c      	beq.n	80050ce <I2C_Master_ADD10+0x48>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d007      	beq.n	80050ce <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050cc:	605a      	str	r2, [r3, #4]
  }
}
 80050ce:	bf00      	nop
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80050da:	b480      	push	{r7}
 80050dc:	b091      	sub	sp, #68	@ 0x44
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050e8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b22      	cmp	r3, #34	@ 0x22
 8005102:	f040 8169 	bne.w	80053d8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10f      	bne.n	800512e <I2C_Master_ADDR+0x54>
 800510e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005112:	2b40      	cmp	r3, #64	@ 0x40
 8005114:	d10b      	bne.n	800512e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005116:	2300      	movs	r3, #0
 8005118:	633b      	str	r3, [r7, #48]	@ 0x30
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	633b      	str	r3, [r7, #48]	@ 0x30
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	633b      	str	r3, [r7, #48]	@ 0x30
 800512a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512c:	e160      	b.n	80053f0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005132:	2b00      	cmp	r3, #0
 8005134:	d11d      	bne.n	8005172 <I2C_Master_ADDR+0x98>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800513e:	d118      	bne.n	8005172 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005140:	2300      	movs	r3, #0
 8005142:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005164:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005170:	e13e      	b.n	80053f0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005176:	b29b      	uxth	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	d113      	bne.n	80051a4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800517c:	2300      	movs	r3, #0
 800517e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005190:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051a0:	601a      	str	r2, [r3, #0]
 80051a2:	e115      	b.n	80053d0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	f040 808a 	bne.w	80052c4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80051b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80051b6:	d137      	bne.n	8005228 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051c6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051d6:	d113      	bne.n	8005200 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051e6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051e8:	2300      	movs	r3, #0
 80051ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80051fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fe:	e0e7      	b.n	80053d0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005200:	2300      	movs	r3, #0
 8005202:	623b      	str	r3, [r7, #32]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	623b      	str	r3, [r7, #32]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	623b      	str	r3, [r7, #32]
 8005214:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	e0d3      	b.n	80053d0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800522a:	2b08      	cmp	r3, #8
 800522c:	d02e      	beq.n	800528c <I2C_Master_ADDR+0x1b2>
 800522e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005230:	2b20      	cmp	r3, #32
 8005232:	d02b      	beq.n	800528c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005236:	2b12      	cmp	r3, #18
 8005238:	d102      	bne.n	8005240 <I2C_Master_ADDR+0x166>
 800523a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800523c:	2b01      	cmp	r3, #1
 800523e:	d125      	bne.n	800528c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005242:	2b04      	cmp	r3, #4
 8005244:	d00e      	beq.n	8005264 <I2C_Master_ADDR+0x18a>
 8005246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005248:	2b02      	cmp	r3, #2
 800524a:	d00b      	beq.n	8005264 <I2C_Master_ADDR+0x18a>
 800524c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800524e:	2b10      	cmp	r3, #16
 8005250:	d008      	beq.n	8005264 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	e007      	b.n	8005274 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005272:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005274:	2300      	movs	r3, #0
 8005276:	61fb      	str	r3, [r7, #28]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	61fb      	str	r3, [r7, #28]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	61fb      	str	r3, [r7, #28]
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	e0a1      	b.n	80053d0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800529a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800529c:	2300      	movs	r3, #0
 800529e:	61bb      	str	r3, [r7, #24]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	61bb      	str	r3, [r7, #24]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	61bb      	str	r3, [r7, #24]
 80052b0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	e085      	b.n	80053d0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d14d      	bne.n	800536a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80052ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d0:	2b04      	cmp	r3, #4
 80052d2:	d016      	beq.n	8005302 <I2C_Master_ADDR+0x228>
 80052d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d013      	beq.n	8005302 <I2C_Master_ADDR+0x228>
 80052da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052dc:	2b10      	cmp	r3, #16
 80052de:	d010      	beq.n	8005302 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052ee:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	e007      	b.n	8005312 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005310:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800531c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005320:	d117      	bne.n	8005352 <I2C_Master_ADDR+0x278>
 8005322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005324:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005328:	d00b      	beq.n	8005342 <I2C_Master_ADDR+0x268>
 800532a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800532c:	2b01      	cmp	r3, #1
 800532e:	d008      	beq.n	8005342 <I2C_Master_ADDR+0x268>
 8005330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005332:	2b08      	cmp	r3, #8
 8005334:	d005      	beq.n	8005342 <I2C_Master_ADDR+0x268>
 8005336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005338:	2b10      	cmp	r3, #16
 800533a:	d002      	beq.n	8005342 <I2C_Master_ADDR+0x268>
 800533c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800533e:	2b20      	cmp	r3, #32
 8005340:	d107      	bne.n	8005352 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005350:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005352:	2300      	movs	r3, #0
 8005354:	617b      	str	r3, [r7, #20]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	617b      	str	r3, [r7, #20]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	617b      	str	r3, [r7, #20]
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	e032      	b.n	80053d0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005378:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005384:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005388:	d117      	bne.n	80053ba <I2C_Master_ADDR+0x2e0>
 800538a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800538c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005390:	d00b      	beq.n	80053aa <I2C_Master_ADDR+0x2d0>
 8005392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005394:	2b01      	cmp	r3, #1
 8005396:	d008      	beq.n	80053aa <I2C_Master_ADDR+0x2d0>
 8005398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800539a:	2b08      	cmp	r3, #8
 800539c:	d005      	beq.n	80053aa <I2C_Master_ADDR+0x2d0>
 800539e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a0:	2b10      	cmp	r3, #16
 80053a2:	d002      	beq.n	80053aa <I2C_Master_ADDR+0x2d0>
 80053a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a6:	2b20      	cmp	r3, #32
 80053a8:	d107      	bne.n	80053ba <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80053b8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ba:	2300      	movs	r3, #0
 80053bc:	613b      	str	r3, [r7, #16]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	613b      	str	r3, [r7, #16]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	613b      	str	r3, [r7, #16]
 80053ce:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80053d6:	e00b      	b.n	80053f0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053d8:	2300      	movs	r3, #0
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	68fb      	ldr	r3, [r7, #12]
}
 80053ee:	e7ff      	b.n	80053f0 <I2C_Master_ADDR+0x316>
 80053f0:	bf00      	nop
 80053f2:	3744      	adds	r7, #68	@ 0x44
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800540a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005410:	b29b      	uxth	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d02b      	beq.n	800546e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800541a:	781a      	ldrb	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005426:	1c5a      	adds	r2, r3, #1
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005430:	b29b      	uxth	r3, r3
 8005432:	3b01      	subs	r3, #1
 8005434:	b29a      	uxth	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800543e:	b29b      	uxth	r3, r3
 8005440:	2b00      	cmp	r3, #0
 8005442:	d114      	bne.n	800546e <I2C_SlaveTransmit_TXE+0x72>
 8005444:	7bfb      	ldrb	r3, [r7, #15]
 8005446:	2b29      	cmp	r3, #41	@ 0x29
 8005448:	d111      	bne.n	800546e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005458:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2221      	movs	r2, #33	@ 0x21
 800545e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2228      	movs	r2, #40	@ 0x28
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f7ff f9e3 	bl	8004834 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800546e:	bf00      	nop
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005476:	b480      	push	{r7}
 8005478:	b083      	sub	sp, #12
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005482:	b29b      	uxth	r3, r3
 8005484:	2b00      	cmp	r3, #0
 8005486:	d011      	beq.n	80054ac <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800548c:	781a      	ldrb	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	3b01      	subs	r3, #1
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d02c      	beq.n	800552c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	691a      	ldr	r2, [r3, #16]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054dc:	b2d2      	uxtb	r2, r2
 80054de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	3b01      	subs	r3, #1
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d114      	bne.n	800552c <I2C_SlaveReceive_RXNE+0x74>
 8005502:	7bfb      	ldrb	r3, [r7, #15]
 8005504:	2b2a      	cmp	r3, #42	@ 0x2a
 8005506:	d111      	bne.n	800552c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005516:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2222      	movs	r2, #34	@ 0x22
 800551c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2228      	movs	r2, #40	@ 0x28
 8005522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7ff f98e 	bl	8004848 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800552c:	bf00      	nop
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005540:	b29b      	uxth	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d012      	beq.n	800556c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	691a      	ldr	r2, [r3, #16]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005550:	b2d2      	uxtb	r2, r2
 8005552:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005558:	1c5a      	adds	r2, r3, #1
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005562:	b29b      	uxth	r3, r3
 8005564:	3b01      	subs	r3, #1
 8005566:	b29a      	uxth	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005582:	2300      	movs	r3, #0
 8005584:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800558c:	b2db      	uxtb	r3, r3
 800558e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005592:	2b28      	cmp	r3, #40	@ 0x28
 8005594:	d127      	bne.n	80055e6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055a4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	089b      	lsrs	r3, r3, #2
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80055b2:	2301      	movs	r3, #1
 80055b4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	09db      	lsrs	r3, r3, #7
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d103      	bne.n	80055ca <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	81bb      	strh	r3, [r7, #12]
 80055c8:	e002      	b.n	80055d0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80055d8:	89ba      	ldrh	r2, [r7, #12]
 80055da:	7bfb      	ldrb	r3, [r7, #15]
 80055dc:	4619      	mov	r1, r3
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7ff f93c 	bl	800485c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80055e4:	e00e      	b.n	8005604 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055e6:	2300      	movs	r3, #0
 80055e8:	60bb      	str	r3, [r7, #8]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	60bb      	str	r3, [r7, #8]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	60bb      	str	r3, [r7, #8]
 80055fa:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005604:	bf00      	nop
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800561a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800562a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800562c:	2300      	movs	r3, #0
 800562e:	60bb      	str	r3, [r7, #8]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	60bb      	str	r3, [r7, #8]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0201 	orr.w	r2, r2, #1
 8005646:	601a      	str	r2, [r3, #0]
 8005648:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005658:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005664:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005668:	d172      	bne.n	8005750 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800566a:	7bfb      	ldrb	r3, [r7, #15]
 800566c:	2b22      	cmp	r3, #34	@ 0x22
 800566e:	d002      	beq.n	8005676 <I2C_Slave_STOPF+0x6a>
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	2b2a      	cmp	r3, #42	@ 0x2a
 8005674:	d135      	bne.n	80056e2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	b29a      	uxth	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005688:	b29b      	uxth	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d005      	beq.n	800569a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005692:	f043 0204 	orr.w	r2, r3, #4
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056a8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fd fb70 	bl	8002d94 <HAL_DMA_GetState>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d049      	beq.n	800574e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056be:	4a69      	ldr	r2, [pc, #420]	@ (8005864 <I2C_Slave_STOPF+0x258>)
 80056c0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fd f9b8 	bl	8002a3c <HAL_DMA_Abort_IT>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d03d      	beq.n	800574e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80056dc:	4610      	mov	r0, r2
 80056de:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80056e0:	e035      	b.n	800574e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d005      	beq.n	8005706 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fe:	f043 0204 	orr.w	r2, r3, #4
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005714:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800571a:	4618      	mov	r0, r3
 800571c:	f7fd fb3a 	bl	8002d94 <HAL_DMA_GetState>
 8005720:	4603      	mov	r3, r0
 8005722:	2b01      	cmp	r3, #1
 8005724:	d014      	beq.n	8005750 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800572a:	4a4e      	ldr	r2, [pc, #312]	@ (8005864 <I2C_Slave_STOPF+0x258>)
 800572c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005732:	4618      	mov	r0, r3
 8005734:	f7fd f982 	bl	8002a3c <HAL_DMA_Abort_IT>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d008      	beq.n	8005750 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005748:	4610      	mov	r0, r2
 800574a:	4798      	blx	r3
 800574c:	e000      	b.n	8005750 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800574e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005754:	b29b      	uxth	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d03e      	beq.n	80057d8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	f003 0304 	and.w	r3, r3, #4
 8005764:	2b04      	cmp	r3, #4
 8005766:	d112      	bne.n	800578e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	691a      	ldr	r2, [r3, #16]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005772:	b2d2      	uxtb	r2, r2
 8005774:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005784:	b29b      	uxth	r3, r3
 8005786:	3b01      	subs	r3, #1
 8005788:	b29a      	uxth	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005798:	2b40      	cmp	r3, #64	@ 0x40
 800579a:	d112      	bne.n	80057c2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	691a      	ldr	r2, [r3, #16]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a6:	b2d2      	uxtb	r2, r2
 80057a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ae:	1c5a      	adds	r2, r3, #1
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	3b01      	subs	r3, #1
 80057bc:	b29a      	uxth	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d0:	f043 0204 	orr.w	r2, r3, #4
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d003      	beq.n	80057e8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 f8b7 	bl	8005954 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80057e6:	e039      	b.n	800585c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
 80057ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80057ec:	d109      	bne.n	8005802 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2228      	movs	r2, #40	@ 0x28
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7ff f823 	bl	8004848 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b28      	cmp	r3, #40	@ 0x28
 800580c:	d111      	bne.n	8005832 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a15      	ldr	r2, [pc, #84]	@ (8005868 <I2C_Slave_STOPF+0x25c>)
 8005812:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2220      	movs	r2, #32
 800581e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f7ff f824 	bl	8004878 <HAL_I2C_ListenCpltCallback>
}
 8005830:	e014      	b.n	800585c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005836:	2b22      	cmp	r3, #34	@ 0x22
 8005838:	d002      	beq.n	8005840 <I2C_Slave_STOPF+0x234>
 800583a:	7bfb      	ldrb	r3, [r7, #15]
 800583c:	2b22      	cmp	r3, #34	@ 0x22
 800583e:	d10d      	bne.n	800585c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2220      	movs	r2, #32
 800584a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7fe fff6 	bl	8004848 <HAL_I2C_SlaveRxCpltCallback>
}
 800585c:	bf00      	nop
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	080061f1 	.word	0x080061f1
 8005868:	ffff0000 	.word	0xffff0000

0800586c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800587a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005880:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	2b08      	cmp	r3, #8
 8005886:	d002      	beq.n	800588e <I2C_Slave_AF+0x22>
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2b20      	cmp	r3, #32
 800588c:	d129      	bne.n	80058e2 <I2C_Slave_AF+0x76>
 800588e:	7bfb      	ldrb	r3, [r7, #15]
 8005890:	2b28      	cmp	r3, #40	@ 0x28
 8005892:	d126      	bne.n	80058e2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a2e      	ldr	r2, [pc, #184]	@ (8005950 <I2C_Slave_AF+0xe4>)
 8005898:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685a      	ldr	r2, [r3, #4]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80058a8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80058b2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058c2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2220      	movs	r2, #32
 80058ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7fe ffcc 	bl	8004878 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80058e0:	e031      	b.n	8005946 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80058e2:	7bfb      	ldrb	r3, [r7, #15]
 80058e4:	2b21      	cmp	r3, #33	@ 0x21
 80058e6:	d129      	bne.n	800593c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a19      	ldr	r2, [pc, #100]	@ (8005950 <I2C_Slave_AF+0xe4>)
 80058ec:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2221      	movs	r2, #33	@ 0x21
 80058f2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2220      	movs	r2, #32
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005912:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800591c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800592c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7fd fe26 	bl	8003580 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f7fe ff7d 	bl	8004834 <HAL_I2C_SlaveTxCpltCallback>
}
 800593a:	e004      	b.n	8005946 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005944:	615a      	str	r2, [r3, #20]
}
 8005946:	bf00      	nop
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	ffff0000 	.word	0xffff0000

08005954 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005962:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800596a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800596c:	7bbb      	ldrb	r3, [r7, #14]
 800596e:	2b10      	cmp	r3, #16
 8005970:	d002      	beq.n	8005978 <I2C_ITError+0x24>
 8005972:	7bbb      	ldrb	r3, [r7, #14]
 8005974:	2b40      	cmp	r3, #64	@ 0x40
 8005976:	d10a      	bne.n	800598e <I2C_ITError+0x3a>
 8005978:	7bfb      	ldrb	r3, [r7, #15]
 800597a:	2b22      	cmp	r3, #34	@ 0x22
 800597c:	d107      	bne.n	800598e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800598c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800598e:	7bfb      	ldrb	r3, [r7, #15]
 8005990:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005994:	2b28      	cmp	r3, #40	@ 0x28
 8005996:	d107      	bne.n	80059a8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2228      	movs	r2, #40	@ 0x28
 80059a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80059a6:	e015      	b.n	80059d4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059b6:	d00a      	beq.n	80059ce <I2C_ITError+0x7a>
 80059b8:	7bfb      	ldrb	r3, [r7, #15]
 80059ba:	2b60      	cmp	r3, #96	@ 0x60
 80059bc:	d007      	beq.n	80059ce <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2220      	movs	r2, #32
 80059c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059e2:	d162      	bne.n	8005aaa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059f2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d020      	beq.n	8005a44 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a06:	4a6a      	ldr	r2, [pc, #424]	@ (8005bb0 <I2C_ITError+0x25c>)
 8005a08:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fd f814 	bl	8002a3c <HAL_DMA_Abort_IT>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f000 8089 	beq.w	8005b2e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f022 0201 	bic.w	r2, r2, #1
 8005a2a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005a3e:	4610      	mov	r0, r2
 8005a40:	4798      	blx	r3
 8005a42:	e074      	b.n	8005b2e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a48:	4a59      	ldr	r2, [pc, #356]	@ (8005bb0 <I2C_ITError+0x25c>)
 8005a4a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7fc fff3 	bl	8002a3c <HAL_DMA_Abort_IT>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d068      	beq.n	8005b2e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a66:	2b40      	cmp	r3, #64	@ 0x40
 8005a68:	d10b      	bne.n	8005a82 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	691a      	ldr	r2, [r3, #16]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a74:	b2d2      	uxtb	r2, r2
 8005a76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7c:	1c5a      	adds	r2, r3, #1
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0201 	bic.w	r2, r2, #1
 8005a90:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2220      	movs	r2, #32
 8005a96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	4798      	blx	r3
 8005aa8:	e041      	b.n	8005b2e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b60      	cmp	r3, #96	@ 0x60
 8005ab4:	d125      	bne.n	8005b02 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ace:	2b40      	cmp	r3, #64	@ 0x40
 8005ad0:	d10b      	bne.n	8005aea <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	691a      	ldr	r2, [r3, #16]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005adc:	b2d2      	uxtb	r2, r2
 8005ade:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae4:	1c5a      	adds	r2, r3, #1
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f022 0201 	bic.w	r2, r2, #1
 8005af8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7fe fed0 	bl	80048a0 <HAL_I2C_AbortCpltCallback>
 8005b00:	e015      	b.n	8005b2e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b0c:	2b40      	cmp	r3, #64	@ 0x40
 8005b0e:	d10b      	bne.n	8005b28 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	691a      	ldr	r2, [r3, #16]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b1a:	b2d2      	uxtb	r2, r2
 8005b1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b22:	1c5a      	adds	r2, r3, #1
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f7fe feaf 	bl	800488c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b32:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10e      	bne.n	8005b5c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d109      	bne.n	8005b5c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d104      	bne.n	8005b5c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d007      	beq.n	8005b6c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005b6a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b72:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b04      	cmp	r3, #4
 8005b7e:	d113      	bne.n	8005ba8 <I2C_ITError+0x254>
 8005b80:	7bfb      	ldrb	r3, [r7, #15]
 8005b82:	2b28      	cmp	r3, #40	@ 0x28
 8005b84:	d110      	bne.n	8005ba8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a0a      	ldr	r2, [pc, #40]	@ (8005bb4 <I2C_ITError+0x260>)
 8005b8a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2220      	movs	r2, #32
 8005b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7fe fe68 	bl	8004878 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ba8:	bf00      	nop
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	080061f1 	.word	0x080061f1
 8005bb4:	ffff0000 	.word	0xffff0000

08005bb8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b088      	sub	sp, #32
 8005bbc:	af02      	add	r7, sp, #8
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	607a      	str	r2, [r7, #4]
 8005bc2:	603b      	str	r3, [r7, #0]
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bcc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	2b08      	cmp	r3, #8
 8005bd2:	d006      	beq.n	8005be2 <I2C_MasterRequestWrite+0x2a>
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d003      	beq.n	8005be2 <I2C_MasterRequestWrite+0x2a>
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005be0:	d108      	bne.n	8005bf4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	e00b      	b.n	8005c0c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf8:	2b12      	cmp	r3, #18
 8005bfa:	d107      	bne.n	8005c0c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f000 fb91 	bl	8006340 <I2C_WaitOnFlagUntilTimeout>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00d      	beq.n	8005c40 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c32:	d103      	bne.n	8005c3c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e035      	b.n	8005cac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c48:	d108      	bne.n	8005c5c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c4a:	897b      	ldrh	r3, [r7, #10]
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	461a      	mov	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005c58:	611a      	str	r2, [r3, #16]
 8005c5a:	e01b      	b.n	8005c94 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005c5c:	897b      	ldrh	r3, [r7, #10]
 8005c5e:	11db      	asrs	r3, r3, #7
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	f003 0306 	and.w	r3, r3, #6
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	f063 030f 	orn	r3, r3, #15
 8005c6c:	b2da      	uxtb	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	490e      	ldr	r1, [pc, #56]	@ (8005cb4 <I2C_MasterRequestWrite+0xfc>)
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f000 fbda 	bl	8006434 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e010      	b.n	8005cac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c8a:	897b      	ldrh	r3, [r7, #10]
 8005c8c:	b2da      	uxtb	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	4907      	ldr	r1, [pc, #28]	@ (8005cb8 <I2C_MasterRequestWrite+0x100>)
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f000 fbca 	bl	8006434 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e000      	b.n	8005cac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3718      	adds	r7, #24
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	00010008 	.word	0x00010008
 8005cb8:	00010002 	.word	0x00010002

08005cbc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b088      	sub	sp, #32
 8005cc0:	af02      	add	r7, sp, #8
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	4608      	mov	r0, r1
 8005cc6:	4611      	mov	r1, r2
 8005cc8:	461a      	mov	r2, r3
 8005cca:	4603      	mov	r3, r0
 8005ccc:	817b      	strh	r3, [r7, #10]
 8005cce:	460b      	mov	r3, r1
 8005cd0:	813b      	strh	r3, [r7, #8]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ce4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce8:	9300      	str	r3, [sp, #0]
 8005cea:	6a3b      	ldr	r3, [r7, #32]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 fb24 	bl	8006340 <I2C_WaitOnFlagUntilTimeout>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00d      	beq.n	8005d1a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d0c:	d103      	bne.n	8005d16 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d14:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e05f      	b.n	8005dda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d1a:	897b      	ldrh	r3, [r7, #10]
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	461a      	mov	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005d28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2c:	6a3a      	ldr	r2, [r7, #32]
 8005d2e:	492d      	ldr	r1, [pc, #180]	@ (8005de4 <I2C_RequestMemoryWrite+0x128>)
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 fb7f 	bl	8006434 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e04c      	b.n	8005dda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d40:	2300      	movs	r3, #0
 8005d42:	617b      	str	r3, [r7, #20]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	617b      	str	r3, [r7, #20]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	617b      	str	r3, [r7, #20]
 8005d54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d58:	6a39      	ldr	r1, [r7, #32]
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f000 fc0a 	bl	8006574 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00d      	beq.n	8005d82 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d6a:	2b04      	cmp	r3, #4
 8005d6c:	d107      	bne.n	8005d7e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e02b      	b.n	8005dda <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d82:	88fb      	ldrh	r3, [r7, #6]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d105      	bne.n	8005d94 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d88:	893b      	ldrh	r3, [r7, #8]
 8005d8a:	b2da      	uxtb	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	611a      	str	r2, [r3, #16]
 8005d92:	e021      	b.n	8005dd8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d94:	893b      	ldrh	r3, [r7, #8]
 8005d96:	0a1b      	lsrs	r3, r3, #8
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	b2da      	uxtb	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005da4:	6a39      	ldr	r1, [r7, #32]
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f000 fbe4 	bl	8006574 <I2C_WaitOnTXEFlagUntilTimeout>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00d      	beq.n	8005dce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db6:	2b04      	cmp	r3, #4
 8005db8:	d107      	bne.n	8005dca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dc8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e005      	b.n	8005dda <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005dce:	893b      	ldrh	r3, [r7, #8]
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3718      	adds	r7, #24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	00010002 	.word	0x00010002

08005de8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b088      	sub	sp, #32
 8005dec:	af02      	add	r7, sp, #8
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	4608      	mov	r0, r1
 8005df2:	4611      	mov	r1, r2
 8005df4:	461a      	mov	r2, r3
 8005df6:	4603      	mov	r3, r0
 8005df8:	817b      	strh	r3, [r7, #10]
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	813b      	strh	r3, [r7, #8]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005e10:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e24:	9300      	str	r3, [sp, #0]
 8005e26:	6a3b      	ldr	r3, [r7, #32]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f000 fa86 	bl	8006340 <I2C_WaitOnFlagUntilTimeout>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00d      	beq.n	8005e56 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e48:	d103      	bne.n	8005e52 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e50:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e0aa      	b.n	8005fac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e56:	897b      	ldrh	r3, [r7, #10]
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005e64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e68:	6a3a      	ldr	r2, [r7, #32]
 8005e6a:	4952      	ldr	r1, [pc, #328]	@ (8005fb4 <I2C_RequestMemoryRead+0x1cc>)
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f000 fae1 	bl	8006434 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d001      	beq.n	8005e7c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e097      	b.n	8005fac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	617b      	str	r3, [r7, #20]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	617b      	str	r3, [r7, #20]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	617b      	str	r3, [r7, #20]
 8005e90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e94:	6a39      	ldr	r1, [r7, #32]
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f000 fb6c 	bl	8006574 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00d      	beq.n	8005ebe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea6:	2b04      	cmp	r3, #4
 8005ea8:	d107      	bne.n	8005eba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005eb8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e076      	b.n	8005fac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ebe:	88fb      	ldrh	r3, [r7, #6]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d105      	bne.n	8005ed0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ec4:	893b      	ldrh	r3, [r7, #8]
 8005ec6:	b2da      	uxtb	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	611a      	str	r2, [r3, #16]
 8005ece:	e021      	b.n	8005f14 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ed0:	893b      	ldrh	r3, [r7, #8]
 8005ed2:	0a1b      	lsrs	r3, r3, #8
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ee0:	6a39      	ldr	r1, [r7, #32]
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f000 fb46 	bl	8006574 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00d      	beq.n	8005f0a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef2:	2b04      	cmp	r3, #4
 8005ef4:	d107      	bne.n	8005f06 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e050      	b.n	8005fac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f0a:	893b      	ldrh	r3, [r7, #8]
 8005f0c:	b2da      	uxtb	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f16:	6a39      	ldr	r1, [r7, #32]
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f000 fb2b 	bl	8006574 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00d      	beq.n	8005f40 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f28:	2b04      	cmp	r3, #4
 8005f2a:	d107      	bne.n	8005f3c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f3a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e035      	b.n	8005fac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f4e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	6a3b      	ldr	r3, [r7, #32]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f000 f9ef 	bl	8006340 <I2C_WaitOnFlagUntilTimeout>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00d      	beq.n	8005f84 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f76:	d103      	bne.n	8005f80 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f7e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e013      	b.n	8005fac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005f84:	897b      	ldrh	r3, [r7, #10]
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	f043 0301 	orr.w	r3, r3, #1
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f96:	6a3a      	ldr	r2, [r7, #32]
 8005f98:	4906      	ldr	r1, [pc, #24]	@ (8005fb4 <I2C_RequestMemoryRead+0x1cc>)
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 fa4a 	bl	8006434 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e000      	b.n	8005fac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3718      	adds	r7, #24
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	00010002 	.word	0x00010002

08005fb8 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b086      	sub	sp, #24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fc4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fcc:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005fd4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005fea:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d003      	beq.n	8005ffc <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006000:	2b00      	cmp	r3, #0
 8006002:	d003      	beq.n	800600c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006008:	2200      	movs	r2, #0
 800600a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800600c:	7cfb      	ldrb	r3, [r7, #19]
 800600e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8006012:	2b21      	cmp	r3, #33	@ 0x21
 8006014:	d007      	beq.n	8006026 <I2C_DMAXferCplt+0x6e>
 8006016:	7cfb      	ldrb	r3, [r7, #19]
 8006018:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 800601c:	2b22      	cmp	r3, #34	@ 0x22
 800601e:	d131      	bne.n	8006084 <I2C_DMAXferCplt+0xcc>
 8006020:	7cbb      	ldrb	r3, [r7, #18]
 8006022:	2b20      	cmp	r3, #32
 8006024:	d12e      	bne.n	8006084 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006034:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	2200      	movs	r2, #0
 800603a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800603c:	7cfb      	ldrb	r3, [r7, #19]
 800603e:	2b29      	cmp	r3, #41	@ 0x29
 8006040:	d10a      	bne.n	8006058 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	2221      	movs	r2, #33	@ 0x21
 8006046:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	2228      	movs	r2, #40	@ 0x28
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006050:	6978      	ldr	r0, [r7, #20]
 8006052:	f7fe fbef 	bl	8004834 <HAL_I2C_SlaveTxCpltCallback>
 8006056:	e00c      	b.n	8006072 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006058:	7cfb      	ldrb	r3, [r7, #19]
 800605a:	2b2a      	cmp	r3, #42	@ 0x2a
 800605c:	d109      	bne.n	8006072 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	2222      	movs	r2, #34	@ 0x22
 8006062:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	2228      	movs	r2, #40	@ 0x28
 8006068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800606c:	6978      	ldr	r0, [r7, #20]
 800606e:	f7fe fbeb 	bl	8004848 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	685a      	ldr	r2, [r3, #4]
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006080:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006082:	e074      	b.n	800616e <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b00      	cmp	r3, #0
 800608e:	d06e      	beq.n	800616e <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006094:	b29b      	uxth	r3, r3
 8006096:	2b01      	cmp	r3, #1
 8006098:	d107      	bne.n	80060aa <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060a8:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80060b8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80060c0:	d009      	beq.n	80060d6 <I2C_DMAXferCplt+0x11e>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2b08      	cmp	r3, #8
 80060c6:	d006      	beq.n	80060d6 <I2C_DMAXferCplt+0x11e>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80060ce:	d002      	beq.n	80060d6 <I2C_DMAXferCplt+0x11e>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2b20      	cmp	r3, #32
 80060d4:	d107      	bne.n	80060e6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060e4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	685a      	ldr	r2, [r3, #4]
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80060f4:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006104:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	2200      	movs	r2, #0
 800610a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006110:	2b00      	cmp	r3, #0
 8006112:	d003      	beq.n	800611c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8006114:	6978      	ldr	r0, [r7, #20]
 8006116:	f7fe fbb9 	bl	800488c <HAL_I2C_ErrorCallback>
}
 800611a:	e028      	b.n	800616e <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	2220      	movs	r2, #32
 8006120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b40      	cmp	r3, #64	@ 0x40
 800612e:	d10a      	bne.n	8006146 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	2200      	movs	r2, #0
 800613c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800613e:	6978      	ldr	r0, [r7, #20]
 8006140:	f7fa fd00 	bl	8000b44 <HAL_I2C_MemRxCpltCallback>
}
 8006144:	e013      	b.n	800616e <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2b08      	cmp	r3, #8
 8006152:	d002      	beq.n	800615a <I2C_DMAXferCplt+0x1a2>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2b20      	cmp	r3, #32
 8006158:	d103      	bne.n	8006162 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	2200      	movs	r2, #0
 800615e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006160:	e002      	b.n	8006168 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	2212      	movs	r2, #18
 8006166:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8006168:	6978      	ldr	r0, [r7, #20]
 800616a:	f7fe fb59 	bl	8004820 <HAL_I2C_MasterRxCpltCallback>
}
 800616e:	bf00      	nop
 8006170:	3718      	adds	r7, #24
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b084      	sub	sp, #16
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006182:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006188:	2b00      	cmp	r3, #0
 800618a:	d003      	beq.n	8006194 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006190:	2200      	movs	r2, #0
 8006192:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006198:	2b00      	cmp	r3, #0
 800619a:	d003      	beq.n	80061a4 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a0:	2200      	movs	r2, #0
 80061a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f7fc fe03 	bl	8002db0 <HAL_DMA_GetError>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d01b      	beq.n	80061e8 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061be:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2220      	movs	r2, #32
 80061ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061da:	f043 0210 	orr.w	r2, r3, #16
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f7fe fb52 	bl	800488c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80061e8:	bf00      	nop
 80061ea:	3710      	adds	r7, #16
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061f8:	2300      	movs	r3, #0
 80061fa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006200:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006208:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800620a:	4b4b      	ldr	r3, [pc, #300]	@ (8006338 <I2C_DMAAbort+0x148>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	08db      	lsrs	r3, r3, #3
 8006210:	4a4a      	ldr	r2, [pc, #296]	@ (800633c <I2C_DMAAbort+0x14c>)
 8006212:	fba2 2303 	umull	r2, r3, r2, r3
 8006216:	0a1a      	lsrs	r2, r3, #8
 8006218:	4613      	mov	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	00da      	lsls	r2, r3, #3
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d106      	bne.n	8006238 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800622e:	f043 0220 	orr.w	r2, r3, #32
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8006236:	e00a      	b.n	800624e <I2C_DMAAbort+0x5e>
    }
    count--;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	3b01      	subs	r3, #1
 800623c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006248:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800624c:	d0ea      	beq.n	8006224 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006252:	2b00      	cmp	r3, #0
 8006254:	d003      	beq.n	800625e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800625a:	2200      	movs	r2, #0
 800625c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800626a:	2200      	movs	r2, #0
 800626c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800627c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	2200      	movs	r2, #0
 8006282:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006290:	2200      	movs	r2, #0
 8006292:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006298:	2b00      	cmp	r3, #0
 800629a:	d003      	beq.n	80062a4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a0:	2200      	movs	r2, #0
 80062a2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 0201 	bic.w	r2, r2, #1
 80062b2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b60      	cmp	r3, #96	@ 0x60
 80062be:	d10e      	bne.n	80062de <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	2200      	movs	r2, #0
 80062d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80062d6:	6978      	ldr	r0, [r7, #20]
 80062d8:	f7fe fae2 	bl	80048a0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80062dc:	e027      	b.n	800632e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80062de:	7cfb      	ldrb	r3, [r7, #19]
 80062e0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80062e4:	2b28      	cmp	r3, #40	@ 0x28
 80062e6:	d117      	bne.n	8006318 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f042 0201 	orr.w	r2, r2, #1
 80062f6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006306:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	2200      	movs	r2, #0
 800630c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	2228      	movs	r2, #40	@ 0x28
 8006312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006316:	e007      	b.n	8006328 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	2220      	movs	r2, #32
 800631c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006328:	6978      	ldr	r0, [r7, #20]
 800632a:	f7fe faaf 	bl	800488c <HAL_I2C_ErrorCallback>
}
 800632e:	bf00      	nop
 8006330:	3718      	adds	r7, #24
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	20000004 	.word	0x20000004
 800633c:	14f8b589 	.word	0x14f8b589

08006340 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	603b      	str	r3, [r7, #0]
 800634c:	4613      	mov	r3, r2
 800634e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006350:	e048      	b.n	80063e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006358:	d044      	beq.n	80063e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800635a:	f7fb fd87 	bl	8001e6c <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	429a      	cmp	r2, r3
 8006368:	d302      	bcc.n	8006370 <I2C_WaitOnFlagUntilTimeout+0x30>
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d139      	bne.n	80063e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	0c1b      	lsrs	r3, r3, #16
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b01      	cmp	r3, #1
 8006378:	d10d      	bne.n	8006396 <I2C_WaitOnFlagUntilTimeout+0x56>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	695b      	ldr	r3, [r3, #20]
 8006380:	43da      	mvns	r2, r3
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	4013      	ands	r3, r2
 8006386:	b29b      	uxth	r3, r3
 8006388:	2b00      	cmp	r3, #0
 800638a:	bf0c      	ite	eq
 800638c:	2301      	moveq	r3, #1
 800638e:	2300      	movne	r3, #0
 8006390:	b2db      	uxtb	r3, r3
 8006392:	461a      	mov	r2, r3
 8006394:	e00c      	b.n	80063b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	43da      	mvns	r2, r3
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	4013      	ands	r3, r2
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	bf0c      	ite	eq
 80063a8:	2301      	moveq	r3, #1
 80063aa:	2300      	movne	r3, #0
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	461a      	mov	r2, r3
 80063b0:	79fb      	ldrb	r3, [r7, #7]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d116      	bne.n	80063e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2220      	movs	r2, #32
 80063c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d0:	f043 0220 	orr.w	r2, r3, #32
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e023      	b.n	800642c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	0c1b      	lsrs	r3, r3, #16
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d10d      	bne.n	800640a <I2C_WaitOnFlagUntilTimeout+0xca>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	43da      	mvns	r2, r3
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	4013      	ands	r3, r2
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	bf0c      	ite	eq
 8006400:	2301      	moveq	r3, #1
 8006402:	2300      	movne	r3, #0
 8006404:	b2db      	uxtb	r3, r3
 8006406:	461a      	mov	r2, r3
 8006408:	e00c      	b.n	8006424 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	43da      	mvns	r2, r3
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	4013      	ands	r3, r2
 8006416:	b29b      	uxth	r3, r3
 8006418:	2b00      	cmp	r3, #0
 800641a:	bf0c      	ite	eq
 800641c:	2301      	moveq	r3, #1
 800641e:	2300      	movne	r3, #0
 8006420:	b2db      	uxtb	r3, r3
 8006422:	461a      	mov	r2, r3
 8006424:	79fb      	ldrb	r3, [r7, #7]
 8006426:	429a      	cmp	r2, r3
 8006428:	d093      	beq.n	8006352 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
 8006440:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006442:	e071      	b.n	8006528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800644e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006452:	d123      	bne.n	800649c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006462:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800646c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2220      	movs	r2, #32
 8006478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006488:	f043 0204 	orr.w	r2, r3, #4
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e067      	b.n	800656c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a2:	d041      	beq.n	8006528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064a4:	f7fb fce2 	bl	8001e6c <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d302      	bcc.n	80064ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d136      	bne.n	8006528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	0c1b      	lsrs	r3, r3, #16
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d10c      	bne.n	80064de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	43da      	mvns	r2, r3
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	4013      	ands	r3, r2
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	bf14      	ite	ne
 80064d6:	2301      	movne	r3, #1
 80064d8:	2300      	moveq	r3, #0
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	e00b      	b.n	80064f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	43da      	mvns	r2, r3
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	4013      	ands	r3, r2
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	bf14      	ite	ne
 80064f0:	2301      	movne	r3, #1
 80064f2:	2300      	moveq	r3, #0
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d016      	beq.n	8006528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2220      	movs	r2, #32
 8006504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006514:	f043 0220 	orr.w	r2, r3, #32
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e021      	b.n	800656c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	0c1b      	lsrs	r3, r3, #16
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b01      	cmp	r3, #1
 8006530:	d10c      	bne.n	800654c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	43da      	mvns	r2, r3
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	4013      	ands	r3, r2
 800653e:	b29b      	uxth	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	bf14      	ite	ne
 8006544:	2301      	movne	r3, #1
 8006546:	2300      	moveq	r3, #0
 8006548:	b2db      	uxtb	r3, r3
 800654a:	e00b      	b.n	8006564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	43da      	mvns	r2, r3
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	4013      	ands	r3, r2
 8006558:	b29b      	uxth	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	bf14      	ite	ne
 800655e:	2301      	movne	r3, #1
 8006560:	2300      	moveq	r3, #0
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b00      	cmp	r3, #0
 8006566:	f47f af6d 	bne.w	8006444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3710      	adds	r7, #16
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006580:	e034      	b.n	80065ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f000 f915 	bl	80067b2 <I2C_IsAcknowledgeFailed>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e034      	b.n	80065fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006598:	d028      	beq.n	80065ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800659a:	f7fb fc67 	bl	8001e6c <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d302      	bcc.n	80065b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d11d      	bne.n	80065ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065ba:	2b80      	cmp	r3, #128	@ 0x80
 80065bc:	d016      	beq.n	80065ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2220      	movs	r2, #32
 80065c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d8:	f043 0220 	orr.w	r2, r3, #32
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e007      	b.n	80065fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065f6:	2b80      	cmp	r3, #128	@ 0x80
 80065f8:	d1c3      	bne.n	8006582 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3710      	adds	r7, #16
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006610:	e034      	b.n	800667c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f000 f8cd 	bl	80067b2 <I2C_IsAcknowledgeFailed>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e034      	b.n	800668c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006628:	d028      	beq.n	800667c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800662a:	f7fb fc1f 	bl	8001e6c <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	429a      	cmp	r2, r3
 8006638:	d302      	bcc.n	8006640 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d11d      	bne.n	800667c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	f003 0304 	and.w	r3, r3, #4
 800664a:	2b04      	cmp	r3, #4
 800664c:	d016      	beq.n	800667c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2220      	movs	r2, #32
 8006658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006668:	f043 0220 	orr.w	r2, r3, #32
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e007      	b.n	800668c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	f003 0304 	and.w	r3, r3, #4
 8006686:	2b04      	cmp	r3, #4
 8006688:	d1c3      	bne.n	8006612 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800669c:	2300      	movs	r3, #0
 800669e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80066a0:	4b13      	ldr	r3, [pc, #76]	@ (80066f0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	08db      	lsrs	r3, r3, #3
 80066a6:	4a13      	ldr	r2, [pc, #76]	@ (80066f4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80066a8:	fba2 2303 	umull	r2, r3, r2, r3
 80066ac:	0a1a      	lsrs	r2, r3, #8
 80066ae:	4613      	mov	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4413      	add	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	3b01      	subs	r3, #1
 80066ba:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d107      	bne.n	80066d2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c6:	f043 0220 	orr.w	r2, r3, #32
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e008      	b.n	80066e4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066e0:	d0e9      	beq.n	80066b6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3714      	adds	r7, #20
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	20000004 	.word	0x20000004
 80066f4:	14f8b589 	.word	0x14f8b589

080066f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006704:	e049      	b.n	800679a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	f003 0310 	and.w	r3, r3, #16
 8006710:	2b10      	cmp	r3, #16
 8006712:	d119      	bne.n	8006748 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f06f 0210 	mvn.w	r2, #16
 800671c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2220      	movs	r2, #32
 8006728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e030      	b.n	80067aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006748:	f7fb fb90 	bl	8001e6c <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	429a      	cmp	r2, r3
 8006756:	d302      	bcc.n	800675e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d11d      	bne.n	800679a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	695b      	ldr	r3, [r3, #20]
 8006764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006768:	2b40      	cmp	r3, #64	@ 0x40
 800676a:	d016      	beq.n	800679a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2220      	movs	r2, #32
 8006776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006786:	f043 0220 	orr.w	r2, r3, #32
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e007      	b.n	80067aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	695b      	ldr	r3, [r3, #20]
 80067a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067a4:	2b40      	cmp	r3, #64	@ 0x40
 80067a6:	d1ae      	bne.n	8006706 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b083      	sub	sp, #12
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	695b      	ldr	r3, [r3, #20]
 80067c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067c8:	d11b      	bne.n	8006802 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80067d2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2220      	movs	r2, #32
 80067de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ee:	f043 0204 	orr.w	r2, r3, #4
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e000      	b.n	8006804 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800681c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006820:	d103      	bne.n	800682a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006828:	e007      	b.n	800683a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800682e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006832:	d102      	bne.n	800683a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2208      	movs	r2, #8
 8006838:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800683a:	bf00      	nop
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b086      	sub	sp, #24
 800684a:	af02      	add	r7, sp, #8
 800684c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e101      	b.n	8006a5c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	d106      	bne.n	8006878 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f006 fbe2 	bl	800d03c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2203      	movs	r2, #3
 800687c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006886:	d102      	bne.n	800688e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4618      	mov	r0, r3
 8006894:	f002 ff37 	bl	8009706 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6818      	ldr	r0, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	7c1a      	ldrb	r2, [r3, #16]
 80068a0:	f88d 2000 	strb.w	r2, [sp]
 80068a4:	3304      	adds	r3, #4
 80068a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068a8:	f002 fe16 	bl	80094d8 <USB_CoreInit>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d005      	beq.n	80068be <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2202      	movs	r2, #2
 80068b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e0ce      	b.n	8006a5c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2100      	movs	r1, #0
 80068c4:	4618      	mov	r0, r3
 80068c6:	f002 ff2f 	bl	8009728 <USB_SetCurrentMode>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d005      	beq.n	80068dc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2202      	movs	r2, #2
 80068d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e0bf      	b.n	8006a5c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068dc:	2300      	movs	r3, #0
 80068de:	73fb      	strb	r3, [r7, #15]
 80068e0:	e04a      	b.n	8006978 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80068e2:	7bfa      	ldrb	r2, [r7, #15]
 80068e4:	6879      	ldr	r1, [r7, #4]
 80068e6:	4613      	mov	r3, r2
 80068e8:	00db      	lsls	r3, r3, #3
 80068ea:	4413      	add	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	440b      	add	r3, r1
 80068f0:	3315      	adds	r3, #21
 80068f2:	2201      	movs	r2, #1
 80068f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80068f6:	7bfa      	ldrb	r2, [r7, #15]
 80068f8:	6879      	ldr	r1, [r7, #4]
 80068fa:	4613      	mov	r3, r2
 80068fc:	00db      	lsls	r3, r3, #3
 80068fe:	4413      	add	r3, r2
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	440b      	add	r3, r1
 8006904:	3314      	adds	r3, #20
 8006906:	7bfa      	ldrb	r2, [r7, #15]
 8006908:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800690a:	7bfa      	ldrb	r2, [r7, #15]
 800690c:	7bfb      	ldrb	r3, [r7, #15]
 800690e:	b298      	uxth	r0, r3
 8006910:	6879      	ldr	r1, [r7, #4]
 8006912:	4613      	mov	r3, r2
 8006914:	00db      	lsls	r3, r3, #3
 8006916:	4413      	add	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	440b      	add	r3, r1
 800691c:	332e      	adds	r3, #46	@ 0x2e
 800691e:	4602      	mov	r2, r0
 8006920:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006922:	7bfa      	ldrb	r2, [r7, #15]
 8006924:	6879      	ldr	r1, [r7, #4]
 8006926:	4613      	mov	r3, r2
 8006928:	00db      	lsls	r3, r3, #3
 800692a:	4413      	add	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	440b      	add	r3, r1
 8006930:	3318      	adds	r3, #24
 8006932:	2200      	movs	r2, #0
 8006934:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006936:	7bfa      	ldrb	r2, [r7, #15]
 8006938:	6879      	ldr	r1, [r7, #4]
 800693a:	4613      	mov	r3, r2
 800693c:	00db      	lsls	r3, r3, #3
 800693e:	4413      	add	r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	440b      	add	r3, r1
 8006944:	331c      	adds	r3, #28
 8006946:	2200      	movs	r2, #0
 8006948:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800694a:	7bfa      	ldrb	r2, [r7, #15]
 800694c:	6879      	ldr	r1, [r7, #4]
 800694e:	4613      	mov	r3, r2
 8006950:	00db      	lsls	r3, r3, #3
 8006952:	4413      	add	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	440b      	add	r3, r1
 8006958:	3320      	adds	r3, #32
 800695a:	2200      	movs	r2, #0
 800695c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800695e:	7bfa      	ldrb	r2, [r7, #15]
 8006960:	6879      	ldr	r1, [r7, #4]
 8006962:	4613      	mov	r3, r2
 8006964:	00db      	lsls	r3, r3, #3
 8006966:	4413      	add	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	440b      	add	r3, r1
 800696c:	3324      	adds	r3, #36	@ 0x24
 800696e:	2200      	movs	r2, #0
 8006970:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006972:	7bfb      	ldrb	r3, [r7, #15]
 8006974:	3301      	adds	r3, #1
 8006976:	73fb      	strb	r3, [r7, #15]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	791b      	ldrb	r3, [r3, #4]
 800697c:	7bfa      	ldrb	r2, [r7, #15]
 800697e:	429a      	cmp	r2, r3
 8006980:	d3af      	bcc.n	80068e2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006982:	2300      	movs	r3, #0
 8006984:	73fb      	strb	r3, [r7, #15]
 8006986:	e044      	b.n	8006a12 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006988:	7bfa      	ldrb	r2, [r7, #15]
 800698a:	6879      	ldr	r1, [r7, #4]
 800698c:	4613      	mov	r3, r2
 800698e:	00db      	lsls	r3, r3, #3
 8006990:	4413      	add	r3, r2
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	440b      	add	r3, r1
 8006996:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800699a:	2200      	movs	r2, #0
 800699c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800699e:	7bfa      	ldrb	r2, [r7, #15]
 80069a0:	6879      	ldr	r1, [r7, #4]
 80069a2:	4613      	mov	r3, r2
 80069a4:	00db      	lsls	r3, r3, #3
 80069a6:	4413      	add	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	440b      	add	r3, r1
 80069ac:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80069b0:	7bfa      	ldrb	r2, [r7, #15]
 80069b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80069b4:	7bfa      	ldrb	r2, [r7, #15]
 80069b6:	6879      	ldr	r1, [r7, #4]
 80069b8:	4613      	mov	r3, r2
 80069ba:	00db      	lsls	r3, r3, #3
 80069bc:	4413      	add	r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	440b      	add	r3, r1
 80069c2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80069c6:	2200      	movs	r2, #0
 80069c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80069ca:	7bfa      	ldrb	r2, [r7, #15]
 80069cc:	6879      	ldr	r1, [r7, #4]
 80069ce:	4613      	mov	r3, r2
 80069d0:	00db      	lsls	r3, r3, #3
 80069d2:	4413      	add	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	440b      	add	r3, r1
 80069d8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80069dc:	2200      	movs	r2, #0
 80069de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80069e0:	7bfa      	ldrb	r2, [r7, #15]
 80069e2:	6879      	ldr	r1, [r7, #4]
 80069e4:	4613      	mov	r3, r2
 80069e6:	00db      	lsls	r3, r3, #3
 80069e8:	4413      	add	r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	440b      	add	r3, r1
 80069ee:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80069f2:	2200      	movs	r2, #0
 80069f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80069f6:	7bfa      	ldrb	r2, [r7, #15]
 80069f8:	6879      	ldr	r1, [r7, #4]
 80069fa:	4613      	mov	r3, r2
 80069fc:	00db      	lsls	r3, r3, #3
 80069fe:	4413      	add	r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	440b      	add	r3, r1
 8006a04:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006a08:	2200      	movs	r2, #0
 8006a0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	73fb      	strb	r3, [r7, #15]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	791b      	ldrb	r3, [r3, #4]
 8006a16:	7bfa      	ldrb	r2, [r7, #15]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d3b5      	bcc.n	8006988 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6818      	ldr	r0, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	7c1a      	ldrb	r2, [r3, #16]
 8006a24:	f88d 2000 	strb.w	r2, [sp]
 8006a28:	3304      	adds	r3, #4
 8006a2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a2c:	f002 fec8 	bl	80097c0 <USB_DevInit>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d005      	beq.n	8006a42 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2202      	movs	r2, #2
 8006a3a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e00c      	b.n	8006a5c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4618      	mov	r0, r3
 8006a56:	f003 ff12 	bl	800a87e <USB_DevDisconnect>

  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d101      	bne.n	8006a80 <HAL_PCD_Start+0x1c>
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	e022      	b.n	8006ac6 <HAL_PCD_Start+0x62>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d009      	beq.n	8006aa8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d105      	bne.n	8006aa8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4618      	mov	r0, r3
 8006aae:	f002 fe19 	bl	80096e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f003 fec0 	bl	800a83c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006ace:	b590      	push	{r4, r7, lr}
 8006ad0:	b08d      	sub	sp, #52	@ 0x34
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006adc:	6a3b      	ldr	r3, [r7, #32]
 8006ade:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f003 ff7e 	bl	800a9e6 <USB_GetMode>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f040 848c 	bne.w	800740a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f003 fee2 	bl	800a8c0 <USB_ReadInterrupts>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f000 8482 	beq.w	8007408 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	0a1b      	lsrs	r3, r3, #8
 8006b0e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f003 fecf 	bl	800a8c0 <USB_ReadInterrupts>
 8006b22:	4603      	mov	r3, r0
 8006b24:	f003 0302 	and.w	r3, r3, #2
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d107      	bne.n	8006b3c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	695a      	ldr	r2, [r3, #20]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f002 0202 	and.w	r2, r2, #2
 8006b3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4618      	mov	r0, r3
 8006b42:	f003 febd 	bl	800a8c0 <USB_ReadInterrupts>
 8006b46:	4603      	mov	r3, r0
 8006b48:	f003 0310 	and.w	r3, r3, #16
 8006b4c:	2b10      	cmp	r3, #16
 8006b4e:	d161      	bne.n	8006c14 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	699a      	ldr	r2, [r3, #24]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f022 0210 	bic.w	r2, r2, #16
 8006b5e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006b60:	6a3b      	ldr	r3, [r7, #32]
 8006b62:	6a1b      	ldr	r3, [r3, #32]
 8006b64:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	f003 020f 	and.w	r2, r3, #15
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	00db      	lsls	r3, r3, #3
 8006b70:	4413      	add	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006b86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b8a:	d124      	bne.n	8006bd6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006b92:	4013      	ands	r3, r2
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d035      	beq.n	8006c04 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	091b      	lsrs	r3, r3, #4
 8006ba0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006ba2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	461a      	mov	r2, r3
 8006baa:	6a38      	ldr	r0, [r7, #32]
 8006bac:	f003 fcf4 	bl	800a598 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	68da      	ldr	r2, [r3, #12]
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	091b      	lsrs	r3, r3, #4
 8006bb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bbc:	441a      	add	r2, r3
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	695a      	ldr	r2, [r3, #20]
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	091b      	lsrs	r3, r3, #4
 8006bca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bce:	441a      	add	r2, r3
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	615a      	str	r2, [r3, #20]
 8006bd4:	e016      	b.n	8006c04 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006bdc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006be0:	d110      	bne.n	8006c04 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006be8:	2208      	movs	r2, #8
 8006bea:	4619      	mov	r1, r3
 8006bec:	6a38      	ldr	r0, [r7, #32]
 8006bee:	f003 fcd3 	bl	800a598 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	695a      	ldr	r2, [r3, #20]
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	091b      	lsrs	r3, r3, #4
 8006bfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bfe:	441a      	add	r2, r3
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	699a      	ldr	r2, [r3, #24]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f042 0210 	orr.w	r2, r2, #16
 8006c12:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f003 fe51 	bl	800a8c0 <USB_ReadInterrupts>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006c24:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006c28:	f040 80a7 	bne.w	8006d7a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4618      	mov	r0, r3
 8006c36:	f003 fe56 	bl	800a8e6 <USB_ReadDevAllOutEpInterrupt>
 8006c3a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006c3c:	e099      	b.n	8006d72 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c40:	f003 0301 	and.w	r3, r3, #1
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f000 808e 	beq.w	8006d66 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c50:	b2d2      	uxtb	r2, r2
 8006c52:	4611      	mov	r1, r2
 8006c54:	4618      	mov	r0, r3
 8006c56:	f003 fe7a 	bl	800a94e <USB_ReadDevOutEPInterrupt>
 8006c5a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00c      	beq.n	8006c80 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c68:	015a      	lsls	r2, r3, #5
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c72:	461a      	mov	r2, r3
 8006c74:	2301      	movs	r3, #1
 8006c76:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006c78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 fea4 	bl	80079c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	f003 0308 	and.w	r3, r3, #8
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00c      	beq.n	8006ca4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c8c:	015a      	lsls	r2, r3, #5
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	4413      	add	r3, r2
 8006c92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c96:	461a      	mov	r2, r3
 8006c98:	2308      	movs	r3, #8
 8006c9a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006c9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 ff7a 	bl	8007b98 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	f003 0310 	and.w	r3, r3, #16
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d008      	beq.n	8006cc0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb0:	015a      	lsls	r2, r3, #5
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cba:	461a      	mov	r2, r3
 8006cbc:	2310      	movs	r3, #16
 8006cbe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d030      	beq.n	8006d2c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006cca:	6a3b      	ldr	r3, [r7, #32]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cd2:	2b80      	cmp	r3, #128	@ 0x80
 8006cd4:	d109      	bne.n	8006cea <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	69fa      	ldr	r2, [r7, #28]
 8006ce0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ce4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006ce8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cec:	4613      	mov	r3, r2
 8006cee:	00db      	lsls	r3, r3, #3
 8006cf0:	4413      	add	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	3304      	adds	r3, #4
 8006cfe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	78db      	ldrb	r3, [r3, #3]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d108      	bne.n	8006d1a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	4619      	mov	r1, r3
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f006 fa8d 	bl	800d234 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1c:	015a      	lsls	r2, r3, #5
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	4413      	add	r3, r2
 8006d22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d26:	461a      	mov	r2, r3
 8006d28:	2302      	movs	r3, #2
 8006d2a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	f003 0320 	and.w	r3, r3, #32
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d008      	beq.n	8006d48 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d38:	015a      	lsls	r2, r3, #5
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d42:	461a      	mov	r2, r3
 8006d44:	2320      	movs	r3, #32
 8006d46:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d009      	beq.n	8006d66 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d54:	015a      	lsls	r2, r3, #5
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	4413      	add	r3, r2
 8006d5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d5e:	461a      	mov	r2, r3
 8006d60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006d64:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d68:	3301      	adds	r3, #1
 8006d6a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d6e:	085b      	lsrs	r3, r3, #1
 8006d70:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f47f af62 	bne.w	8006c3e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f003 fd9e 	bl	800a8c0 <USB_ReadInterrupts>
 8006d84:	4603      	mov	r3, r0
 8006d86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d8a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d8e:	f040 80db 	bne.w	8006f48 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4618      	mov	r0, r3
 8006d98:	f003 fdbf 	bl	800a91a <USB_ReadDevAllInEpInterrupt>
 8006d9c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006da2:	e0cd      	b.n	8006f40 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f000 80c2 	beq.w	8006f34 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006db6:	b2d2      	uxtb	r2, r2
 8006db8:	4611      	mov	r1, r2
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f003 fde5 	bl	800a98a <USB_ReadDevInEPInterrupt>
 8006dc0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	f003 0301 	and.w	r3, r3, #1
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d057      	beq.n	8006e7c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dce:	f003 030f 	and.w	r3, r3, #15
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006de0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	43db      	mvns	r3, r3
 8006de6:	69f9      	ldr	r1, [r7, #28]
 8006de8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006dec:	4013      	ands	r3, r2
 8006dee:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df2:	015a      	lsls	r2, r3, #5
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	4413      	add	r3, r2
 8006df8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	2301      	movs	r3, #1
 8006e00:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	799b      	ldrb	r3, [r3, #6]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d132      	bne.n	8006e70 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006e0a:	6879      	ldr	r1, [r7, #4]
 8006e0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e0e:	4613      	mov	r3, r2
 8006e10:	00db      	lsls	r3, r3, #3
 8006e12:	4413      	add	r3, r2
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	440b      	add	r3, r1
 8006e18:	3320      	adds	r3, #32
 8006e1a:	6819      	ldr	r1, [r3, #0]
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e20:	4613      	mov	r3, r2
 8006e22:	00db      	lsls	r3, r3, #3
 8006e24:	4413      	add	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4403      	add	r3, r0
 8006e2a:	331c      	adds	r3, #28
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4419      	add	r1, r3
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e34:	4613      	mov	r3, r2
 8006e36:	00db      	lsls	r3, r3, #3
 8006e38:	4413      	add	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4403      	add	r3, r0
 8006e3e:	3320      	adds	r3, #32
 8006e40:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d113      	bne.n	8006e70 <HAL_PCD_IRQHandler+0x3a2>
 8006e48:	6879      	ldr	r1, [r7, #4]
 8006e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	00db      	lsls	r3, r3, #3
 8006e50:	4413      	add	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	440b      	add	r3, r1
 8006e56:	3324      	adds	r3, #36	@ 0x24
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d108      	bne.n	8006e70 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6818      	ldr	r0, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006e68:	461a      	mov	r2, r3
 8006e6a:	2101      	movs	r1, #1
 8006e6c:	f003 fdec 	bl	800aa48 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	4619      	mov	r1, r3
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f006 f961 	bl	800d13e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	f003 0308 	and.w	r3, r3, #8
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d008      	beq.n	8006e98 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e88:	015a      	lsls	r2, r3, #5
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e92:	461a      	mov	r2, r3
 8006e94:	2308      	movs	r3, #8
 8006e96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	f003 0310 	and.w	r3, r3, #16
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d008      	beq.n	8006eb4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea4:	015a      	lsls	r2, r3, #5
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eae:	461a      	mov	r2, r3
 8006eb0:	2310      	movs	r3, #16
 8006eb2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d008      	beq.n	8006ed0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec0:	015a      	lsls	r2, r3, #5
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eca:	461a      	mov	r2, r3
 8006ecc:	2340      	movs	r3, #64	@ 0x40
 8006ece:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	f003 0302 	and.w	r3, r3, #2
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d023      	beq.n	8006f22 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006eda:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006edc:	6a38      	ldr	r0, [r7, #32]
 8006ede:	f002 fdd3 	bl	8009a88 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	00db      	lsls	r3, r3, #3
 8006ee8:	4413      	add	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	3310      	adds	r3, #16
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	3304      	adds	r3, #4
 8006ef4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	78db      	ldrb	r3, [r3, #3]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d108      	bne.n	8006f10 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	2200      	movs	r2, #0
 8006f02:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	4619      	mov	r1, r3
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f006 f9a4 	bl	800d258 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f12:	015a      	lsls	r2, r3, #5
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	4413      	add	r3, r2
 8006f18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	2302      	movs	r3, #2
 8006f20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d003      	beq.n	8006f34 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006f2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fcbd 	bl	80078ae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f36:	3301      	adds	r3, #1
 8006f38:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f3c:	085b      	lsrs	r3, r3, #1
 8006f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f47f af2e 	bne.w	8006da4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f003 fcb7 	bl	800a8c0 <USB_ReadInterrupts>
 8006f52:	4603      	mov	r3, r0
 8006f54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f5c:	d122      	bne.n	8006fa4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	69fa      	ldr	r2, [r7, #28]
 8006f68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f6c:	f023 0301 	bic.w	r3, r3, #1
 8006f70:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d108      	bne.n	8006f8e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006f84:	2100      	movs	r1, #0
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fea4 	bl	8007cd4 <HAL_PCDEx_LPM_Callback>
 8006f8c:	e002      	b.n	8006f94 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f006 f942 	bl	800d218 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	695a      	ldr	r2, [r3, #20]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8006fa2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f003 fc89 	bl	800a8c0 <USB_ReadInterrupts>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fb8:	d112      	bne.n	8006fe0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d102      	bne.n	8006fd0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f006 f8fe 	bl	800d1cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	695a      	ldr	r2, [r3, #20]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006fde:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f003 fc6b 	bl	800a8c0 <USB_ReadInterrupts>
 8006fea:	4603      	mov	r3, r0
 8006fec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006ff0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ff4:	f040 80b7 	bne.w	8007166 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	69fa      	ldr	r2, [r7, #28]
 8007002:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007006:	f023 0301 	bic.w	r3, r3, #1
 800700a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2110      	movs	r1, #16
 8007012:	4618      	mov	r0, r3
 8007014:	f002 fd38 	bl	8009a88 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007018:	2300      	movs	r3, #0
 800701a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800701c:	e046      	b.n	80070ac <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800701e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007020:	015a      	lsls	r2, r3, #5
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	4413      	add	r3, r2
 8007026:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800702a:	461a      	mov	r2, r3
 800702c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007030:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007034:	015a      	lsls	r2, r3, #5
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	4413      	add	r3, r2
 800703a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007042:	0151      	lsls	r1, r2, #5
 8007044:	69fa      	ldr	r2, [r7, #28]
 8007046:	440a      	add	r2, r1
 8007048:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800704c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007050:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007054:	015a      	lsls	r2, r3, #5
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	4413      	add	r3, r2
 800705a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800705e:	461a      	mov	r2, r3
 8007060:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007064:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	4413      	add	r3, r2
 800706e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007076:	0151      	lsls	r1, r2, #5
 8007078:	69fa      	ldr	r2, [r7, #28]
 800707a:	440a      	add	r2, r1
 800707c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007080:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007084:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	4413      	add	r3, r2
 800708e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007096:	0151      	lsls	r1, r2, #5
 8007098:	69fa      	ldr	r2, [r7, #28]
 800709a:	440a      	add	r2, r1
 800709c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80070a4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a8:	3301      	adds	r3, #1
 80070aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	791b      	ldrb	r3, [r3, #4]
 80070b0:	461a      	mov	r2, r3
 80070b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d3b2      	bcc.n	800701e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070be:	69db      	ldr	r3, [r3, #28]
 80070c0:	69fa      	ldr	r2, [r7, #28]
 80070c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070c6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80070ca:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	7bdb      	ldrb	r3, [r3, #15]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d016      	beq.n	8007102 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070de:	69fa      	ldr	r2, [r7, #28]
 80070e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070e4:	f043 030b 	orr.w	r3, r3, #11
 80070e8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070f4:	69fa      	ldr	r2, [r7, #28]
 80070f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070fa:	f043 030b 	orr.w	r3, r3, #11
 80070fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8007100:	e015      	b.n	800712e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	69fa      	ldr	r2, [r7, #28]
 800710c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007110:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007114:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8007118:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	69fa      	ldr	r2, [r7, #28]
 8007124:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007128:	f043 030b 	orr.w	r3, r3, #11
 800712c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	69fa      	ldr	r2, [r7, #28]
 8007138:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800713c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007140:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6818      	ldr	r0, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007150:	461a      	mov	r2, r3
 8007152:	f003 fc79 	bl	800aa48 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	695a      	ldr	r2, [r3, #20]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007164:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4618      	mov	r0, r3
 800716c:	f003 fba8 	bl	800a8c0 <USB_ReadInterrupts>
 8007170:	4603      	mov	r3, r0
 8007172:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007176:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800717a:	d123      	bne.n	80071c4 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4618      	mov	r0, r3
 8007182:	f003 fc3e 	bl	800aa02 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4618      	mov	r0, r3
 800718c:	f002 fcf5 	bl	8009b7a <USB_GetDevSpeed>
 8007190:	4603      	mov	r3, r0
 8007192:	461a      	mov	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681c      	ldr	r4, [r3, #0]
 800719c:	f001 f9ca 	bl	8008534 <HAL_RCC_GetHCLKFreq>
 80071a0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80071a6:	461a      	mov	r2, r3
 80071a8:	4620      	mov	r0, r4
 80071aa:	f002 f9f9 	bl	80095a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f005 ffed 	bl	800d18e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	695a      	ldr	r2, [r3, #20]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80071c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4618      	mov	r0, r3
 80071ca:	f003 fb79 	bl	800a8c0 <USB_ReadInterrupts>
 80071ce:	4603      	mov	r3, r0
 80071d0:	f003 0308 	and.w	r3, r3, #8
 80071d4:	2b08      	cmp	r3, #8
 80071d6:	d10a      	bne.n	80071ee <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f005 ffca 	bl	800d172 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	695a      	ldr	r2, [r3, #20]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f002 0208 	and.w	r2, r2, #8
 80071ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4618      	mov	r0, r3
 80071f4:	f003 fb64 	bl	800a8c0 <USB_ReadInterrupts>
 80071f8:	4603      	mov	r3, r0
 80071fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071fe:	2b80      	cmp	r3, #128	@ 0x80
 8007200:	d123      	bne.n	800724a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007202:	6a3b      	ldr	r3, [r7, #32]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800720a:	6a3b      	ldr	r3, [r7, #32]
 800720c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800720e:	2301      	movs	r3, #1
 8007210:	627b      	str	r3, [r7, #36]	@ 0x24
 8007212:	e014      	b.n	800723e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007214:	6879      	ldr	r1, [r7, #4]
 8007216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007218:	4613      	mov	r3, r2
 800721a:	00db      	lsls	r3, r3, #3
 800721c:	4413      	add	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	440b      	add	r3, r1
 8007222:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	2b01      	cmp	r3, #1
 800722a:	d105      	bne.n	8007238 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800722c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722e:	b2db      	uxtb	r3, r3
 8007230:	4619      	mov	r1, r3
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 fb0a 	bl	800784c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800723a:	3301      	adds	r3, #1
 800723c:	627b      	str	r3, [r7, #36]	@ 0x24
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	791b      	ldrb	r3, [r3, #4]
 8007242:	461a      	mov	r2, r3
 8007244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007246:	4293      	cmp	r3, r2
 8007248:	d3e4      	bcc.n	8007214 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4618      	mov	r0, r3
 8007250:	f003 fb36 	bl	800a8c0 <USB_ReadInterrupts>
 8007254:	4603      	mov	r3, r0
 8007256:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800725a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800725e:	d13c      	bne.n	80072da <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007260:	2301      	movs	r3, #1
 8007262:	627b      	str	r3, [r7, #36]	@ 0x24
 8007264:	e02b      	b.n	80072be <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007268:	015a      	lsls	r2, r3, #5
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	4413      	add	r3, r2
 800726e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007276:	6879      	ldr	r1, [r7, #4]
 8007278:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800727a:	4613      	mov	r3, r2
 800727c:	00db      	lsls	r3, r3, #3
 800727e:	4413      	add	r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	440b      	add	r3, r1
 8007284:	3318      	adds	r3, #24
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d115      	bne.n	80072b8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800728c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800728e:	2b00      	cmp	r3, #0
 8007290:	da12      	bge.n	80072b8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007292:	6879      	ldr	r1, [r7, #4]
 8007294:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007296:	4613      	mov	r3, r2
 8007298:	00db      	lsls	r3, r3, #3
 800729a:	4413      	add	r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	440b      	add	r3, r1
 80072a0:	3317      	adds	r3, #23
 80072a2:	2201      	movs	r2, #1
 80072a4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80072a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	4619      	mov	r1, r3
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 faca 	bl	800784c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80072b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ba:	3301      	adds	r3, #1
 80072bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	791b      	ldrb	r3, [r3, #4]
 80072c2:	461a      	mov	r2, r3
 80072c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d3cd      	bcc.n	8007266 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	695a      	ldr	r2, [r3, #20]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80072d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4618      	mov	r0, r3
 80072e0:	f003 faee 	bl	800a8c0 <USB_ReadInterrupts>
 80072e4:	4603      	mov	r3, r0
 80072e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80072ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80072ee:	d156      	bne.n	800739e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80072f0:	2301      	movs	r3, #1
 80072f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80072f4:	e045      	b.n	8007382 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80072f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f8:	015a      	lsls	r2, r3, #5
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	4413      	add	r3, r2
 80072fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007306:	6879      	ldr	r1, [r7, #4]
 8007308:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800730a:	4613      	mov	r3, r2
 800730c:	00db      	lsls	r3, r3, #3
 800730e:	4413      	add	r3, r2
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	440b      	add	r3, r1
 8007314:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d12e      	bne.n	800737c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800731e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007320:	2b00      	cmp	r3, #0
 8007322:	da2b      	bge.n	800737c <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	0c1a      	lsrs	r2, r3, #16
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800732e:	4053      	eors	r3, r2
 8007330:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007334:	2b00      	cmp	r3, #0
 8007336:	d121      	bne.n	800737c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007338:	6879      	ldr	r1, [r7, #4]
 800733a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800733c:	4613      	mov	r3, r2
 800733e:	00db      	lsls	r3, r3, #3
 8007340:	4413      	add	r3, r2
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	440b      	add	r3, r1
 8007346:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800734a:	2201      	movs	r2, #1
 800734c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800734e:	6a3b      	ldr	r3, [r7, #32]
 8007350:	699b      	ldr	r3, [r3, #24]
 8007352:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007356:	6a3b      	ldr	r3, [r7, #32]
 8007358:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	695b      	ldr	r3, [r3, #20]
 800735e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007362:	2b00      	cmp	r3, #0
 8007364:	d10a      	bne.n	800737c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	69fa      	ldr	r2, [r7, #28]
 8007370:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007374:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007378:	6053      	str	r3, [r2, #4]
            break;
 800737a:	e008      	b.n	800738e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800737c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737e:	3301      	adds	r3, #1
 8007380:	627b      	str	r3, [r7, #36]	@ 0x24
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	791b      	ldrb	r3, [r3, #4]
 8007386:	461a      	mov	r2, r3
 8007388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800738a:	4293      	cmp	r3, r2
 800738c:	d3b3      	bcc.n	80072f6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	695a      	ldr	r2, [r3, #20]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800739c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4618      	mov	r0, r3
 80073a4:	f003 fa8c 	bl	800a8c0 <USB_ReadInterrupts>
 80073a8:	4603      	mov	r3, r0
 80073aa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80073ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073b2:	d10a      	bne.n	80073ca <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f005 ff61 	bl	800d27c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	695a      	ldr	r2, [r3, #20]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80073c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4618      	mov	r0, r3
 80073d0:	f003 fa76 	bl	800a8c0 <USB_ReadInterrupts>
 80073d4:	4603      	mov	r3, r0
 80073d6:	f003 0304 	and.w	r3, r3, #4
 80073da:	2b04      	cmp	r3, #4
 80073dc:	d115      	bne.n	800740a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	f003 0304 	and.w	r3, r3, #4
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d002      	beq.n	80073f6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f005 ff51 	bl	800d298 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	6859      	ldr	r1, [r3, #4]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	69ba      	ldr	r2, [r7, #24]
 8007402:	430a      	orrs	r2, r1
 8007404:	605a      	str	r2, [r3, #4]
 8007406:	e000      	b.n	800740a <HAL_PCD_IRQHandler+0x93c>
      return;
 8007408:	bf00      	nop
    }
  }
}
 800740a:	3734      	adds	r7, #52	@ 0x34
 800740c:	46bd      	mov	sp, r7
 800740e:	bd90      	pop	{r4, r7, pc}

08007410 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	460b      	mov	r3, r1
 800741a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007422:	2b01      	cmp	r3, #1
 8007424:	d101      	bne.n	800742a <HAL_PCD_SetAddress+0x1a>
 8007426:	2302      	movs	r3, #2
 8007428:	e012      	b.n	8007450 <HAL_PCD_SetAddress+0x40>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	78fa      	ldrb	r2, [r7, #3]
 8007436:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	78fa      	ldrb	r2, [r7, #3]
 800743e:	4611      	mov	r1, r2
 8007440:	4618      	mov	r0, r3
 8007442:	f003 f9d5 	bl	800a7f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	4608      	mov	r0, r1
 8007462:	4611      	mov	r1, r2
 8007464:	461a      	mov	r2, r3
 8007466:	4603      	mov	r3, r0
 8007468:	70fb      	strb	r3, [r7, #3]
 800746a:	460b      	mov	r3, r1
 800746c:	803b      	strh	r3, [r7, #0]
 800746e:	4613      	mov	r3, r2
 8007470:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007472:	2300      	movs	r3, #0
 8007474:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007476:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800747a:	2b00      	cmp	r3, #0
 800747c:	da0f      	bge.n	800749e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800747e:	78fb      	ldrb	r3, [r7, #3]
 8007480:	f003 020f 	and.w	r2, r3, #15
 8007484:	4613      	mov	r3, r2
 8007486:	00db      	lsls	r3, r3, #3
 8007488:	4413      	add	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	3310      	adds	r3, #16
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	4413      	add	r3, r2
 8007492:	3304      	adds	r3, #4
 8007494:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2201      	movs	r2, #1
 800749a:	705a      	strb	r2, [r3, #1]
 800749c:	e00f      	b.n	80074be <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800749e:	78fb      	ldrb	r3, [r7, #3]
 80074a0:	f003 020f 	and.w	r2, r3, #15
 80074a4:	4613      	mov	r3, r2
 80074a6:	00db      	lsls	r3, r3, #3
 80074a8:	4413      	add	r3, r2
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	4413      	add	r3, r2
 80074b4:	3304      	adds	r3, #4
 80074b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80074be:	78fb      	ldrb	r3, [r7, #3]
 80074c0:	f003 030f 	and.w	r3, r3, #15
 80074c4:	b2da      	uxtb	r2, r3
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80074ca:	883b      	ldrh	r3, [r7, #0]
 80074cc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	78ba      	ldrb	r2, [r7, #2]
 80074d8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	785b      	ldrb	r3, [r3, #1]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d004      	beq.n	80074ec <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	461a      	mov	r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80074ec:	78bb      	ldrb	r3, [r7, #2]
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	d102      	bne.n	80074f8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d101      	bne.n	8007506 <HAL_PCD_EP_Open+0xae>
 8007502:	2302      	movs	r3, #2
 8007504:	e00e      	b.n	8007524 <HAL_PCD_EP_Open+0xcc>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68f9      	ldr	r1, [r7, #12]
 8007514:	4618      	mov	r0, r3
 8007516:	f002 fb55 	bl	8009bc4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8007522:	7afb      	ldrb	r3, [r7, #11]
}
 8007524:	4618      	mov	r0, r3
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	460b      	mov	r3, r1
 8007536:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007538:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800753c:	2b00      	cmp	r3, #0
 800753e:	da0f      	bge.n	8007560 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007540:	78fb      	ldrb	r3, [r7, #3]
 8007542:	f003 020f 	and.w	r2, r3, #15
 8007546:	4613      	mov	r3, r2
 8007548:	00db      	lsls	r3, r3, #3
 800754a:	4413      	add	r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	3310      	adds	r3, #16
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	4413      	add	r3, r2
 8007554:	3304      	adds	r3, #4
 8007556:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2201      	movs	r2, #1
 800755c:	705a      	strb	r2, [r3, #1]
 800755e:	e00f      	b.n	8007580 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007560:	78fb      	ldrb	r3, [r7, #3]
 8007562:	f003 020f 	and.w	r2, r3, #15
 8007566:	4613      	mov	r3, r2
 8007568:	00db      	lsls	r3, r3, #3
 800756a:	4413      	add	r3, r2
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	4413      	add	r3, r2
 8007576:	3304      	adds	r3, #4
 8007578:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007580:	78fb      	ldrb	r3, [r7, #3]
 8007582:	f003 030f 	and.w	r3, r3, #15
 8007586:	b2da      	uxtb	r2, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007592:	2b01      	cmp	r3, #1
 8007594:	d101      	bne.n	800759a <HAL_PCD_EP_Close+0x6e>
 8007596:	2302      	movs	r3, #2
 8007598:	e00e      	b.n	80075b8 <HAL_PCD_EP_Close+0x8c>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68f9      	ldr	r1, [r7, #12]
 80075a8:	4618      	mov	r0, r3
 80075aa:	f002 fb93 	bl	8009cd4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	607a      	str	r2, [r7, #4]
 80075ca:	603b      	str	r3, [r7, #0]
 80075cc:	460b      	mov	r3, r1
 80075ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80075d0:	7afb      	ldrb	r3, [r7, #11]
 80075d2:	f003 020f 	and.w	r2, r3, #15
 80075d6:	4613      	mov	r3, r2
 80075d8:	00db      	lsls	r3, r3, #3
 80075da:	4413      	add	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	4413      	add	r3, r2
 80075e6:	3304      	adds	r3, #4
 80075e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	683a      	ldr	r2, [r7, #0]
 80075f4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	2200      	movs	r2, #0
 80075fa:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	2200      	movs	r2, #0
 8007600:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007602:	7afb      	ldrb	r3, [r7, #11]
 8007604:	f003 030f 	and.w	r3, r3, #15
 8007608:	b2da      	uxtb	r2, r3
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	799b      	ldrb	r3, [r3, #6]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d102      	bne.n	800761c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6818      	ldr	r0, [r3, #0]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	799b      	ldrb	r3, [r3, #6]
 8007624:	461a      	mov	r2, r3
 8007626:	6979      	ldr	r1, [r7, #20]
 8007628:	f002 fc30 	bl	8009e8c <USB_EPStartXfer>

  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3718      	adds	r7, #24
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007636:	b480      	push	{r7}
 8007638:	b083      	sub	sp, #12
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	460b      	mov	r3, r1
 8007640:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007642:	78fb      	ldrb	r3, [r7, #3]
 8007644:	f003 020f 	and.w	r2, r3, #15
 8007648:	6879      	ldr	r1, [r7, #4]
 800764a:	4613      	mov	r3, r2
 800764c:	00db      	lsls	r3, r3, #3
 800764e:	4413      	add	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	440b      	add	r3, r1
 8007654:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8007658:	681b      	ldr	r3, [r3, #0]
}
 800765a:	4618      	mov	r0, r3
 800765c:	370c      	adds	r7, #12
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr

08007666 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b086      	sub	sp, #24
 800766a:	af00      	add	r7, sp, #0
 800766c:	60f8      	str	r0, [r7, #12]
 800766e:	607a      	str	r2, [r7, #4]
 8007670:	603b      	str	r3, [r7, #0]
 8007672:	460b      	mov	r3, r1
 8007674:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007676:	7afb      	ldrb	r3, [r7, #11]
 8007678:	f003 020f 	and.w	r2, r3, #15
 800767c:	4613      	mov	r3, r2
 800767e:	00db      	lsls	r3, r3, #3
 8007680:	4413      	add	r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	3310      	adds	r3, #16
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	4413      	add	r3, r2
 800768a:	3304      	adds	r3, #4
 800768c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	683a      	ldr	r2, [r7, #0]
 8007698:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	2200      	movs	r2, #0
 800769e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	2201      	movs	r2, #1
 80076a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80076a6:	7afb      	ldrb	r3, [r7, #11]
 80076a8:	f003 030f 	and.w	r3, r3, #15
 80076ac:	b2da      	uxtb	r2, r3
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	799b      	ldrb	r3, [r3, #6]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d102      	bne.n	80076c0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6818      	ldr	r0, [r3, #0]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	799b      	ldrb	r3, [r3, #6]
 80076c8:	461a      	mov	r2, r3
 80076ca:	6979      	ldr	r1, [r7, #20]
 80076cc:	f002 fbde 	bl	8009e8c <USB_EPStartXfer>

  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3718      	adds	r7, #24
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b084      	sub	sp, #16
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
 80076e2:	460b      	mov	r3, r1
 80076e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80076e6:	78fb      	ldrb	r3, [r7, #3]
 80076e8:	f003 030f 	and.w	r3, r3, #15
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	7912      	ldrb	r2, [r2, #4]
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d901      	bls.n	80076f8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e04f      	b.n	8007798 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80076f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	da0f      	bge.n	8007720 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007700:	78fb      	ldrb	r3, [r7, #3]
 8007702:	f003 020f 	and.w	r2, r3, #15
 8007706:	4613      	mov	r3, r2
 8007708:	00db      	lsls	r3, r3, #3
 800770a:	4413      	add	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	3310      	adds	r3, #16
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	4413      	add	r3, r2
 8007714:	3304      	adds	r3, #4
 8007716:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2201      	movs	r2, #1
 800771c:	705a      	strb	r2, [r3, #1]
 800771e:	e00d      	b.n	800773c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007720:	78fa      	ldrb	r2, [r7, #3]
 8007722:	4613      	mov	r3, r2
 8007724:	00db      	lsls	r3, r3, #3
 8007726:	4413      	add	r3, r2
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	4413      	add	r3, r2
 8007732:	3304      	adds	r3, #4
 8007734:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2200      	movs	r2, #0
 800773a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2201      	movs	r2, #1
 8007740:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007742:	78fb      	ldrb	r3, [r7, #3]
 8007744:	f003 030f 	and.w	r3, r3, #15
 8007748:	b2da      	uxtb	r2, r3
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007754:	2b01      	cmp	r3, #1
 8007756:	d101      	bne.n	800775c <HAL_PCD_EP_SetStall+0x82>
 8007758:	2302      	movs	r3, #2
 800775a:	e01d      	b.n	8007798 <HAL_PCD_EP_SetStall+0xbe>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68f9      	ldr	r1, [r7, #12]
 800776a:	4618      	mov	r0, r3
 800776c:	f002 ff6c 	bl	800a648 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007770:	78fb      	ldrb	r3, [r7, #3]
 8007772:	f003 030f 	and.w	r3, r3, #15
 8007776:	2b00      	cmp	r3, #0
 8007778:	d109      	bne.n	800778e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6818      	ldr	r0, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	7999      	ldrb	r1, [r3, #6]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007788:	461a      	mov	r2, r3
 800778a:	f003 f95d 	bl	800aa48 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3710      	adds	r7, #16
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	460b      	mov	r3, r1
 80077aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80077ac:	78fb      	ldrb	r3, [r7, #3]
 80077ae:	f003 030f 	and.w	r3, r3, #15
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	7912      	ldrb	r2, [r2, #4]
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d901      	bls.n	80077be <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e042      	b.n	8007844 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80077be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	da0f      	bge.n	80077e6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80077c6:	78fb      	ldrb	r3, [r7, #3]
 80077c8:	f003 020f 	and.w	r2, r3, #15
 80077cc:	4613      	mov	r3, r2
 80077ce:	00db      	lsls	r3, r3, #3
 80077d0:	4413      	add	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	3310      	adds	r3, #16
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	4413      	add	r3, r2
 80077da:	3304      	adds	r3, #4
 80077dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2201      	movs	r2, #1
 80077e2:	705a      	strb	r2, [r3, #1]
 80077e4:	e00f      	b.n	8007806 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80077e6:	78fb      	ldrb	r3, [r7, #3]
 80077e8:	f003 020f 	and.w	r2, r3, #15
 80077ec:	4613      	mov	r3, r2
 80077ee:	00db      	lsls	r3, r3, #3
 80077f0:	4413      	add	r3, r2
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	4413      	add	r3, r2
 80077fc:	3304      	adds	r3, #4
 80077fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2200      	movs	r2, #0
 8007804:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800780c:	78fb      	ldrb	r3, [r7, #3]
 800780e:	f003 030f 	and.w	r3, r3, #15
 8007812:	b2da      	uxtb	r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800781e:	2b01      	cmp	r3, #1
 8007820:	d101      	bne.n	8007826 <HAL_PCD_EP_ClrStall+0x86>
 8007822:	2302      	movs	r3, #2
 8007824:	e00e      	b.n	8007844 <HAL_PCD_EP_ClrStall+0xa4>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68f9      	ldr	r1, [r7, #12]
 8007834:	4618      	mov	r0, r3
 8007836:	f002 ff75 	bl	800a724 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3710      	adds	r7, #16
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	460b      	mov	r3, r1
 8007856:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007858:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800785c:	2b00      	cmp	r3, #0
 800785e:	da0c      	bge.n	800787a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007860:	78fb      	ldrb	r3, [r7, #3]
 8007862:	f003 020f 	and.w	r2, r3, #15
 8007866:	4613      	mov	r3, r2
 8007868:	00db      	lsls	r3, r3, #3
 800786a:	4413      	add	r3, r2
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	3310      	adds	r3, #16
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	4413      	add	r3, r2
 8007874:	3304      	adds	r3, #4
 8007876:	60fb      	str	r3, [r7, #12]
 8007878:	e00c      	b.n	8007894 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800787a:	78fb      	ldrb	r3, [r7, #3]
 800787c:	f003 020f 	and.w	r2, r3, #15
 8007880:	4613      	mov	r3, r2
 8007882:	00db      	lsls	r3, r3, #3
 8007884:	4413      	add	r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	4413      	add	r3, r2
 8007890:	3304      	adds	r3, #4
 8007892:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68f9      	ldr	r1, [r7, #12]
 800789a:	4618      	mov	r0, r3
 800789c:	f002 fd94 	bl	800a3c8 <USB_EPStopXfer>
 80078a0:	4603      	mov	r3, r0
 80078a2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80078a4:	7afb      	ldrb	r3, [r7, #11]
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b08a      	sub	sp, #40	@ 0x28
 80078b2:	af02      	add	r7, sp, #8
 80078b4:	6078      	str	r0, [r7, #4]
 80078b6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80078c2:	683a      	ldr	r2, [r7, #0]
 80078c4:	4613      	mov	r3, r2
 80078c6:	00db      	lsls	r3, r3, #3
 80078c8:	4413      	add	r3, r2
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	3310      	adds	r3, #16
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	4413      	add	r3, r2
 80078d2:	3304      	adds	r3, #4
 80078d4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	695a      	ldr	r2, [r3, #20]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d901      	bls.n	80078e6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e06b      	b.n	80079be <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	691a      	ldr	r2, [r3, #16]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	695b      	ldr	r3, [r3, #20]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	69fa      	ldr	r2, [r7, #28]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d902      	bls.n	8007902 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	3303      	adds	r3, #3
 8007906:	089b      	lsrs	r3, r3, #2
 8007908:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800790a:	e02a      	b.n	8007962 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	691a      	ldr	r2, [r3, #16]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	695b      	ldr	r3, [r3, #20]
 8007914:	1ad3      	subs	r3, r2, r3
 8007916:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	69fa      	ldr	r2, [r7, #28]
 800791e:	429a      	cmp	r2, r3
 8007920:	d902      	bls.n	8007928 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	3303      	adds	r3, #3
 800792c:	089b      	lsrs	r3, r3, #2
 800792e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	68d9      	ldr	r1, [r3, #12]
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	b2da      	uxtb	r2, r3
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007940:	9300      	str	r3, [sp, #0]
 8007942:	4603      	mov	r3, r0
 8007944:	6978      	ldr	r0, [r7, #20]
 8007946:	f002 fde9 	bl	800a51c <USB_WritePacket>

    ep->xfer_buff  += len;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	68da      	ldr	r2, [r3, #12]
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	441a      	add	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	695a      	ldr	r2, [r3, #20]
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	441a      	add	r2, r3
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	015a      	lsls	r2, r3, #5
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	4413      	add	r3, r2
 800796a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007972:	69ba      	ldr	r2, [r7, #24]
 8007974:	429a      	cmp	r2, r3
 8007976:	d809      	bhi.n	800798c <PCD_WriteEmptyTxFifo+0xde>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	695a      	ldr	r2, [r3, #20]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007980:	429a      	cmp	r2, r3
 8007982:	d203      	bcs.n	800798c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1bf      	bne.n	800790c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	691a      	ldr	r2, [r3, #16]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	695b      	ldr	r3, [r3, #20]
 8007994:	429a      	cmp	r2, r3
 8007996:	d811      	bhi.n	80079bc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	f003 030f 	and.w	r3, r3, #15
 800799e:	2201      	movs	r2, #1
 80079a0:	fa02 f303 	lsl.w	r3, r2, r3
 80079a4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	43db      	mvns	r3, r3
 80079b2:	6939      	ldr	r1, [r7, #16]
 80079b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80079b8:	4013      	ands	r3, r2
 80079ba:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3720      	adds	r7, #32
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
	...

080079c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b088      	sub	sp, #32
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	333c      	adds	r3, #60	@ 0x3c
 80079e0:	3304      	adds	r3, #4
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	015a      	lsls	r2, r3, #5
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	4413      	add	r3, r2
 80079ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	799b      	ldrb	r3, [r3, #6]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d17b      	bne.n	8007af6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	f003 0308 	and.w	r3, r3, #8
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d015      	beq.n	8007a34 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	4a61      	ldr	r2, [pc, #388]	@ (8007b90 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	f240 80b9 	bls.w	8007b84 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f000 80b3 	beq.w	8007b84 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	015a      	lsls	r2, r3, #5
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	4413      	add	r3, r2
 8007a26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a30:	6093      	str	r3, [r2, #8]
 8007a32:	e0a7      	b.n	8007b84 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	f003 0320 	and.w	r3, r3, #32
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d009      	beq.n	8007a52 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	015a      	lsls	r2, r3, #5
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	4413      	add	r3, r2
 8007a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	2320      	movs	r3, #32
 8007a4e:	6093      	str	r3, [r2, #8]
 8007a50:	e098      	b.n	8007b84 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f040 8093 	bne.w	8007b84 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	4a4b      	ldr	r2, [pc, #300]	@ (8007b90 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d90f      	bls.n	8007a86 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00a      	beq.n	8007a86 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	015a      	lsls	r2, r3, #5
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	4413      	add	r3, r2
 8007a78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a82:	6093      	str	r3, [r2, #8]
 8007a84:	e07e      	b.n	8007b84 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007a86:	683a      	ldr	r2, [r7, #0]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	00db      	lsls	r3, r3, #3
 8007a8c:	4413      	add	r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	4413      	add	r3, r2
 8007a98:	3304      	adds	r3, #4
 8007a9a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6a1a      	ldr	r2, [r3, #32]
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	0159      	lsls	r1, r3, #5
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	440b      	add	r3, r1
 8007aa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ab2:	1ad2      	subs	r2, r2, r3
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d114      	bne.n	8007ae8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d109      	bne.n	8007ada <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6818      	ldr	r0, [r3, #0]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	2101      	movs	r1, #1
 8007ad4:	f002 ffb8 	bl	800aa48 <USB_EP0_OutStart>
 8007ad8:	e006      	b.n	8007ae8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	68da      	ldr	r2, [r3, #12]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	695b      	ldr	r3, [r3, #20]
 8007ae2:	441a      	add	r2, r3
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	4619      	mov	r1, r3
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f005 fb0a 	bl	800d108 <HAL_PCD_DataOutStageCallback>
 8007af4:	e046      	b.n	8007b84 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	4a26      	ldr	r2, [pc, #152]	@ (8007b94 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d124      	bne.n	8007b48 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00a      	beq.n	8007b1e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	015a      	lsls	r2, r3, #5
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	4413      	add	r3, r2
 8007b10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b14:	461a      	mov	r2, r3
 8007b16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b1a:	6093      	str	r3, [r2, #8]
 8007b1c:	e032      	b.n	8007b84 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	f003 0320 	and.w	r3, r3, #32
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d008      	beq.n	8007b3a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	015a      	lsls	r2, r3, #5
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	4413      	add	r3, r2
 8007b30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b34:	461a      	mov	r2, r3
 8007b36:	2320      	movs	r3, #32
 8007b38:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	4619      	mov	r1, r3
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f005 fae1 	bl	800d108 <HAL_PCD_DataOutStageCallback>
 8007b46:	e01d      	b.n	8007b84 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d114      	bne.n	8007b78 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007b4e:	6879      	ldr	r1, [r7, #4]
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	4613      	mov	r3, r2
 8007b54:	00db      	lsls	r3, r3, #3
 8007b56:	4413      	add	r3, r2
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	440b      	add	r3, r1
 8007b5c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d108      	bne.n	8007b78 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6818      	ldr	r0, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007b70:	461a      	mov	r2, r3
 8007b72:	2100      	movs	r1, #0
 8007b74:	f002 ff68 	bl	800aa48 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f005 fac2 	bl	800d108 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3720      	adds	r7, #32
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	4f54300a 	.word	0x4f54300a
 8007b94:	4f54310a 	.word	0x4f54310a

08007b98 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b086      	sub	sp, #24
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	333c      	adds	r3, #60	@ 0x3c
 8007bb0:	3304      	adds	r3, #4
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	015a      	lsls	r2, r3, #5
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	4a15      	ldr	r2, [pc, #84]	@ (8007c20 <PCD_EP_OutSetupPacket_int+0x88>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d90e      	bls.n	8007bec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d009      	beq.n	8007bec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	015a      	lsls	r2, r3, #5
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	4413      	add	r3, r2
 8007be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007be4:	461a      	mov	r2, r3
 8007be6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f005 fa79 	bl	800d0e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8007c20 <PCD_EP_OutSetupPacket_int+0x88>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d90c      	bls.n	8007c14 <PCD_EP_OutSetupPacket_int+0x7c>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	799b      	ldrb	r3, [r3, #6]
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d108      	bne.n	8007c14 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6818      	ldr	r0, [r3, #0]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	2101      	movs	r1, #1
 8007c10:	f002 ff1a 	bl	800aa48 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3718      	adds	r7, #24
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	4f54300a 	.word	0x4f54300a

08007c24 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	70fb      	strb	r3, [r7, #3]
 8007c30:	4613      	mov	r3, r2
 8007c32:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c3a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007c3c:	78fb      	ldrb	r3, [r7, #3]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d107      	bne.n	8007c52 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007c42:	883b      	ldrh	r3, [r7, #0]
 8007c44:	0419      	lsls	r1, r3, #16
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	68ba      	ldr	r2, [r7, #8]
 8007c4c:	430a      	orrs	r2, r1
 8007c4e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007c50:	e028      	b.n	8007ca4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c58:	0c1b      	lsrs	r3, r3, #16
 8007c5a:	68ba      	ldr	r2, [r7, #8]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007c60:	2300      	movs	r3, #0
 8007c62:	73fb      	strb	r3, [r7, #15]
 8007c64:	e00d      	b.n	8007c82 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	7bfb      	ldrb	r3, [r7, #15]
 8007c6c:	3340      	adds	r3, #64	@ 0x40
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4413      	add	r3, r2
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	0c1b      	lsrs	r3, r3, #16
 8007c76:	68ba      	ldr	r2, [r7, #8]
 8007c78:	4413      	add	r3, r2
 8007c7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	73fb      	strb	r3, [r7, #15]
 8007c82:	7bfa      	ldrb	r2, [r7, #15]
 8007c84:	78fb      	ldrb	r3, [r7, #3]
 8007c86:	3b01      	subs	r3, #1
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d3ec      	bcc.n	8007c66 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007c8c:	883b      	ldrh	r3, [r7, #0]
 8007c8e:	0418      	lsls	r0, r3, #16
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6819      	ldr	r1, [r3, #0]
 8007c94:	78fb      	ldrb	r3, [r7, #3]
 8007c96:	3b01      	subs	r3, #1
 8007c98:	68ba      	ldr	r2, [r7, #8]
 8007c9a:	4302      	orrs	r2, r0
 8007c9c:	3340      	adds	r3, #64	@ 0x40
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	440b      	add	r3, r1
 8007ca2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3714      	adds	r7, #20
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	b083      	sub	sp, #12
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
 8007cba:	460b      	mov	r3, r1
 8007cbc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	887a      	ldrh	r2, [r7, #2]
 8007cc4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	460b      	mov	r3, r1
 8007cde:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d101      	bne.n	8007cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e267      	b.n	80081ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 0301 	and.w	r3, r3, #1
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d075      	beq.n	8007df6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007d0a:	4b88      	ldr	r3, [pc, #544]	@ (8007f2c <HAL_RCC_OscConfig+0x240>)
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	f003 030c 	and.w	r3, r3, #12
 8007d12:	2b04      	cmp	r3, #4
 8007d14:	d00c      	beq.n	8007d30 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d16:	4b85      	ldr	r3, [pc, #532]	@ (8007f2c <HAL_RCC_OscConfig+0x240>)
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007d1e:	2b08      	cmp	r3, #8
 8007d20:	d112      	bne.n	8007d48 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d22:	4b82      	ldr	r3, [pc, #520]	@ (8007f2c <HAL_RCC_OscConfig+0x240>)
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d2e:	d10b      	bne.n	8007d48 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d30:	4b7e      	ldr	r3, [pc, #504]	@ (8007f2c <HAL_RCC_OscConfig+0x240>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d05b      	beq.n	8007df4 <HAL_RCC_OscConfig+0x108>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d157      	bne.n	8007df4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	e242      	b.n	80081ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d50:	d106      	bne.n	8007d60 <HAL_RCC_OscConfig+0x74>
 8007d52:	4b76      	ldr	r3, [pc, #472]	@ (8007f2c <HAL_RCC_OscConfig+0x240>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a75      	ldr	r2, [pc, #468]	@ (8007f2c <HAL_RCC_OscConfig+0x240>)
 8007d58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d5c:	6013      	str	r3, [r2, #0]
 8007d5e:	e01d      	b.n	8007d9c <HAL_RCC_OscConfig+0xb0>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d68:	d10c      	bne.n	8007d84 <HAL_RCC_OscConfig+0x98>
 8007d6a:	4b70      	ldr	r3, [pc, #448]	@ (8007f2c <HAL_RCC_OscConfig+0x240>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a6f      	ldr	r2, [pc, #444]	@ (8007f2c <HAL_RCC_OscConfig+0x240>)
 8007d70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d74:	6013      	str	r3, [r2, #0]
 8007d76:	4b6d      	ldr	r3, [pc, #436]	@ (8007f2c <HAL_RCC_OscConfig+0x240>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a6c      	ldr	r2, [pc, #432]	@ (8007f2c <HAL_RCC_OscConfig+0x240>)
 8007d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d80:	6013      	str	r3, [r2, #0]
 8007d82:	e00b      	b.n	8007d9c <HAL_RCC_OscConfig+0xb0>
 8007d84:	4b69      	ldr	r3, [pc, #420]	@ (8007f2c <HAL_RCC_OscConfig+0x240>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a68      	ldr	r2, [pc, #416]	@ (8007f2c <HAL_RCC_OscConfig+0x240>)
 8007d8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d8e:	6013      	str	r3, [r2, #0]
 8007d90:	4b66      	ldr	r3, [pc, #408]	@ (8007f2c <HAL_RCC_OscConfig+0x240>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a65      	ldr	r2, [pc, #404]	@ (8007f2c <HAL_RCC_OscConfig+0x240>)
 8007d96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d013      	beq.n	8007dcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007da4:	f7fa f862 	bl	8001e6c <HAL_GetTick>
 8007da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007daa:	e008      	b.n	8007dbe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007dac:	f7fa f85e 	bl	8001e6c <HAL_GetTick>
 8007db0:	4602      	mov	r2, r0
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	2b64      	cmp	r3, #100	@ 0x64
 8007db8:	d901      	bls.n	8007dbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e207      	b.n	80081ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dbe:	4b5b      	ldr	r3, [pc, #364]	@ (8007f2c <HAL_RCC_OscConfig+0x240>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d0f0      	beq.n	8007dac <HAL_RCC_OscConfig+0xc0>
 8007dca:	e014      	b.n	8007df6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dcc:	f7fa f84e 	bl	8001e6c <HAL_GetTick>
 8007dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007dd2:	e008      	b.n	8007de6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007dd4:	f7fa f84a 	bl	8001e6c <HAL_GetTick>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	2b64      	cmp	r3, #100	@ 0x64
 8007de0:	d901      	bls.n	8007de6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007de2:	2303      	movs	r3, #3
 8007de4:	e1f3      	b.n	80081ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007de6:	4b51      	ldr	r3, [pc, #324]	@ (8007f2c <HAL_RCC_OscConfig+0x240>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1f0      	bne.n	8007dd4 <HAL_RCC_OscConfig+0xe8>
 8007df2:	e000      	b.n	8007df6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 0302 	and.w	r3, r3, #2
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d063      	beq.n	8007eca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007e02:	4b4a      	ldr	r3, [pc, #296]	@ (8007f2c <HAL_RCC_OscConfig+0x240>)
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	f003 030c 	and.w	r3, r3, #12
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00b      	beq.n	8007e26 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e0e:	4b47      	ldr	r3, [pc, #284]	@ (8007f2c <HAL_RCC_OscConfig+0x240>)
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007e16:	2b08      	cmp	r3, #8
 8007e18:	d11c      	bne.n	8007e54 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e1a:	4b44      	ldr	r3, [pc, #272]	@ (8007f2c <HAL_RCC_OscConfig+0x240>)
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d116      	bne.n	8007e54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e26:	4b41      	ldr	r3, [pc, #260]	@ (8007f2c <HAL_RCC_OscConfig+0x240>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 0302 	and.w	r3, r3, #2
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d005      	beq.n	8007e3e <HAL_RCC_OscConfig+0x152>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d001      	beq.n	8007e3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e1c7      	b.n	80081ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e3e:	4b3b      	ldr	r3, [pc, #236]	@ (8007f2c <HAL_RCC_OscConfig+0x240>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	00db      	lsls	r3, r3, #3
 8007e4c:	4937      	ldr	r1, [pc, #220]	@ (8007f2c <HAL_RCC_OscConfig+0x240>)
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e52:	e03a      	b.n	8007eca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d020      	beq.n	8007e9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e5c:	4b34      	ldr	r3, [pc, #208]	@ (8007f30 <HAL_RCC_OscConfig+0x244>)
 8007e5e:	2201      	movs	r2, #1
 8007e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e62:	f7fa f803 	bl	8001e6c <HAL_GetTick>
 8007e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e68:	e008      	b.n	8007e7c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e6a:	f7f9 ffff 	bl	8001e6c <HAL_GetTick>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	d901      	bls.n	8007e7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e1a8      	b.n	80081ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e7c:	4b2b      	ldr	r3, [pc, #172]	@ (8007f2c <HAL_RCC_OscConfig+0x240>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f003 0302 	and.w	r3, r3, #2
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d0f0      	beq.n	8007e6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e88:	4b28      	ldr	r3, [pc, #160]	@ (8007f2c <HAL_RCC_OscConfig+0x240>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	00db      	lsls	r3, r3, #3
 8007e96:	4925      	ldr	r1, [pc, #148]	@ (8007f2c <HAL_RCC_OscConfig+0x240>)
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	600b      	str	r3, [r1, #0]
 8007e9c:	e015      	b.n	8007eca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e9e:	4b24      	ldr	r3, [pc, #144]	@ (8007f30 <HAL_RCC_OscConfig+0x244>)
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ea4:	f7f9 ffe2 	bl	8001e6c <HAL_GetTick>
 8007ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007eaa:	e008      	b.n	8007ebe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007eac:	f7f9 ffde 	bl	8001e6c <HAL_GetTick>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	2b02      	cmp	r3, #2
 8007eb8:	d901      	bls.n	8007ebe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e187      	b.n	80081ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ebe:	4b1b      	ldr	r3, [pc, #108]	@ (8007f2c <HAL_RCC_OscConfig+0x240>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 0302 	and.w	r3, r3, #2
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1f0      	bne.n	8007eac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 0308 	and.w	r3, r3, #8
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d036      	beq.n	8007f44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d016      	beq.n	8007f0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ede:	4b15      	ldr	r3, [pc, #84]	@ (8007f34 <HAL_RCC_OscConfig+0x248>)
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ee4:	f7f9 ffc2 	bl	8001e6c <HAL_GetTick>
 8007ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007eea:	e008      	b.n	8007efe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007eec:	f7f9 ffbe 	bl	8001e6c <HAL_GetTick>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d901      	bls.n	8007efe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e167      	b.n	80081ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007efe:	4b0b      	ldr	r3, [pc, #44]	@ (8007f2c <HAL_RCC_OscConfig+0x240>)
 8007f00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f02:	f003 0302 	and.w	r3, r3, #2
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d0f0      	beq.n	8007eec <HAL_RCC_OscConfig+0x200>
 8007f0a:	e01b      	b.n	8007f44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f0c:	4b09      	ldr	r3, [pc, #36]	@ (8007f34 <HAL_RCC_OscConfig+0x248>)
 8007f0e:	2200      	movs	r2, #0
 8007f10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f12:	f7f9 ffab 	bl	8001e6c <HAL_GetTick>
 8007f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f18:	e00e      	b.n	8007f38 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f1a:	f7f9 ffa7 	bl	8001e6c <HAL_GetTick>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	1ad3      	subs	r3, r2, r3
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d907      	bls.n	8007f38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e150      	b.n	80081ce <HAL_RCC_OscConfig+0x4e2>
 8007f2c:	40023800 	.word	0x40023800
 8007f30:	42470000 	.word	0x42470000
 8007f34:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f38:	4b88      	ldr	r3, [pc, #544]	@ (800815c <HAL_RCC_OscConfig+0x470>)
 8007f3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f3c:	f003 0302 	and.w	r3, r3, #2
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d1ea      	bne.n	8007f1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 0304 	and.w	r3, r3, #4
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f000 8097 	beq.w	8008080 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f52:	2300      	movs	r3, #0
 8007f54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f56:	4b81      	ldr	r3, [pc, #516]	@ (800815c <HAL_RCC_OscConfig+0x470>)
 8007f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10f      	bne.n	8007f82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f62:	2300      	movs	r3, #0
 8007f64:	60bb      	str	r3, [r7, #8]
 8007f66:	4b7d      	ldr	r3, [pc, #500]	@ (800815c <HAL_RCC_OscConfig+0x470>)
 8007f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f6a:	4a7c      	ldr	r2, [pc, #496]	@ (800815c <HAL_RCC_OscConfig+0x470>)
 8007f6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f70:	6413      	str	r3, [r2, #64]	@ 0x40
 8007f72:	4b7a      	ldr	r3, [pc, #488]	@ (800815c <HAL_RCC_OscConfig+0x470>)
 8007f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f7a:	60bb      	str	r3, [r7, #8]
 8007f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f82:	4b77      	ldr	r3, [pc, #476]	@ (8008160 <HAL_RCC_OscConfig+0x474>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d118      	bne.n	8007fc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f8e:	4b74      	ldr	r3, [pc, #464]	@ (8008160 <HAL_RCC_OscConfig+0x474>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a73      	ldr	r2, [pc, #460]	@ (8008160 <HAL_RCC_OscConfig+0x474>)
 8007f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f9a:	f7f9 ff67 	bl	8001e6c <HAL_GetTick>
 8007f9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fa0:	e008      	b.n	8007fb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fa2:	f7f9 ff63 	bl	8001e6c <HAL_GetTick>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	1ad3      	subs	r3, r2, r3
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d901      	bls.n	8007fb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e10c      	b.n	80081ce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fb4:	4b6a      	ldr	r3, [pc, #424]	@ (8008160 <HAL_RCC_OscConfig+0x474>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d0f0      	beq.n	8007fa2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d106      	bne.n	8007fd6 <HAL_RCC_OscConfig+0x2ea>
 8007fc8:	4b64      	ldr	r3, [pc, #400]	@ (800815c <HAL_RCC_OscConfig+0x470>)
 8007fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fcc:	4a63      	ldr	r2, [pc, #396]	@ (800815c <HAL_RCC_OscConfig+0x470>)
 8007fce:	f043 0301 	orr.w	r3, r3, #1
 8007fd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fd4:	e01c      	b.n	8008010 <HAL_RCC_OscConfig+0x324>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	2b05      	cmp	r3, #5
 8007fdc:	d10c      	bne.n	8007ff8 <HAL_RCC_OscConfig+0x30c>
 8007fde:	4b5f      	ldr	r3, [pc, #380]	@ (800815c <HAL_RCC_OscConfig+0x470>)
 8007fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fe2:	4a5e      	ldr	r2, [pc, #376]	@ (800815c <HAL_RCC_OscConfig+0x470>)
 8007fe4:	f043 0304 	orr.w	r3, r3, #4
 8007fe8:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fea:	4b5c      	ldr	r3, [pc, #368]	@ (800815c <HAL_RCC_OscConfig+0x470>)
 8007fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fee:	4a5b      	ldr	r2, [pc, #364]	@ (800815c <HAL_RCC_OscConfig+0x470>)
 8007ff0:	f043 0301 	orr.w	r3, r3, #1
 8007ff4:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ff6:	e00b      	b.n	8008010 <HAL_RCC_OscConfig+0x324>
 8007ff8:	4b58      	ldr	r3, [pc, #352]	@ (800815c <HAL_RCC_OscConfig+0x470>)
 8007ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ffc:	4a57      	ldr	r2, [pc, #348]	@ (800815c <HAL_RCC_OscConfig+0x470>)
 8007ffe:	f023 0301 	bic.w	r3, r3, #1
 8008002:	6713      	str	r3, [r2, #112]	@ 0x70
 8008004:	4b55      	ldr	r3, [pc, #340]	@ (800815c <HAL_RCC_OscConfig+0x470>)
 8008006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008008:	4a54      	ldr	r2, [pc, #336]	@ (800815c <HAL_RCC_OscConfig+0x470>)
 800800a:	f023 0304 	bic.w	r3, r3, #4
 800800e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d015      	beq.n	8008044 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008018:	f7f9 ff28 	bl	8001e6c <HAL_GetTick>
 800801c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800801e:	e00a      	b.n	8008036 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008020:	f7f9 ff24 	bl	8001e6c <HAL_GetTick>
 8008024:	4602      	mov	r2, r0
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800802e:	4293      	cmp	r3, r2
 8008030:	d901      	bls.n	8008036 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008032:	2303      	movs	r3, #3
 8008034:	e0cb      	b.n	80081ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008036:	4b49      	ldr	r3, [pc, #292]	@ (800815c <HAL_RCC_OscConfig+0x470>)
 8008038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800803a:	f003 0302 	and.w	r3, r3, #2
 800803e:	2b00      	cmp	r3, #0
 8008040:	d0ee      	beq.n	8008020 <HAL_RCC_OscConfig+0x334>
 8008042:	e014      	b.n	800806e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008044:	f7f9 ff12 	bl	8001e6c <HAL_GetTick>
 8008048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800804a:	e00a      	b.n	8008062 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800804c:	f7f9 ff0e 	bl	8001e6c <HAL_GetTick>
 8008050:	4602      	mov	r2, r0
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	1ad3      	subs	r3, r2, r3
 8008056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800805a:	4293      	cmp	r3, r2
 800805c:	d901      	bls.n	8008062 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800805e:	2303      	movs	r3, #3
 8008060:	e0b5      	b.n	80081ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008062:	4b3e      	ldr	r3, [pc, #248]	@ (800815c <HAL_RCC_OscConfig+0x470>)
 8008064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008066:	f003 0302 	and.w	r3, r3, #2
 800806a:	2b00      	cmp	r3, #0
 800806c:	d1ee      	bne.n	800804c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800806e:	7dfb      	ldrb	r3, [r7, #23]
 8008070:	2b01      	cmp	r3, #1
 8008072:	d105      	bne.n	8008080 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008074:	4b39      	ldr	r3, [pc, #228]	@ (800815c <HAL_RCC_OscConfig+0x470>)
 8008076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008078:	4a38      	ldr	r2, [pc, #224]	@ (800815c <HAL_RCC_OscConfig+0x470>)
 800807a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800807e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	699b      	ldr	r3, [r3, #24]
 8008084:	2b00      	cmp	r3, #0
 8008086:	f000 80a1 	beq.w	80081cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800808a:	4b34      	ldr	r3, [pc, #208]	@ (800815c <HAL_RCC_OscConfig+0x470>)
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	f003 030c 	and.w	r3, r3, #12
 8008092:	2b08      	cmp	r3, #8
 8008094:	d05c      	beq.n	8008150 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	699b      	ldr	r3, [r3, #24]
 800809a:	2b02      	cmp	r3, #2
 800809c:	d141      	bne.n	8008122 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800809e:	4b31      	ldr	r3, [pc, #196]	@ (8008164 <HAL_RCC_OscConfig+0x478>)
 80080a0:	2200      	movs	r2, #0
 80080a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080a4:	f7f9 fee2 	bl	8001e6c <HAL_GetTick>
 80080a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080aa:	e008      	b.n	80080be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080ac:	f7f9 fede 	bl	8001e6c <HAL_GetTick>
 80080b0:	4602      	mov	r2, r0
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	1ad3      	subs	r3, r2, r3
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d901      	bls.n	80080be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80080ba:	2303      	movs	r3, #3
 80080bc:	e087      	b.n	80081ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080be:	4b27      	ldr	r3, [pc, #156]	@ (800815c <HAL_RCC_OscConfig+0x470>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1f0      	bne.n	80080ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	69da      	ldr	r2, [r3, #28]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a1b      	ldr	r3, [r3, #32]
 80080d2:	431a      	orrs	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080d8:	019b      	lsls	r3, r3, #6
 80080da:	431a      	orrs	r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080e0:	085b      	lsrs	r3, r3, #1
 80080e2:	3b01      	subs	r3, #1
 80080e4:	041b      	lsls	r3, r3, #16
 80080e6:	431a      	orrs	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ec:	061b      	lsls	r3, r3, #24
 80080ee:	491b      	ldr	r1, [pc, #108]	@ (800815c <HAL_RCC_OscConfig+0x470>)
 80080f0:	4313      	orrs	r3, r2
 80080f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080f4:	4b1b      	ldr	r3, [pc, #108]	@ (8008164 <HAL_RCC_OscConfig+0x478>)
 80080f6:	2201      	movs	r2, #1
 80080f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080fa:	f7f9 feb7 	bl	8001e6c <HAL_GetTick>
 80080fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008100:	e008      	b.n	8008114 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008102:	f7f9 feb3 	bl	8001e6c <HAL_GetTick>
 8008106:	4602      	mov	r2, r0
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	1ad3      	subs	r3, r2, r3
 800810c:	2b02      	cmp	r3, #2
 800810e:	d901      	bls.n	8008114 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008110:	2303      	movs	r3, #3
 8008112:	e05c      	b.n	80081ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008114:	4b11      	ldr	r3, [pc, #68]	@ (800815c <HAL_RCC_OscConfig+0x470>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800811c:	2b00      	cmp	r3, #0
 800811e:	d0f0      	beq.n	8008102 <HAL_RCC_OscConfig+0x416>
 8008120:	e054      	b.n	80081cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008122:	4b10      	ldr	r3, [pc, #64]	@ (8008164 <HAL_RCC_OscConfig+0x478>)
 8008124:	2200      	movs	r2, #0
 8008126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008128:	f7f9 fea0 	bl	8001e6c <HAL_GetTick>
 800812c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800812e:	e008      	b.n	8008142 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008130:	f7f9 fe9c 	bl	8001e6c <HAL_GetTick>
 8008134:	4602      	mov	r2, r0
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	1ad3      	subs	r3, r2, r3
 800813a:	2b02      	cmp	r3, #2
 800813c:	d901      	bls.n	8008142 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800813e:	2303      	movs	r3, #3
 8008140:	e045      	b.n	80081ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008142:	4b06      	ldr	r3, [pc, #24]	@ (800815c <HAL_RCC_OscConfig+0x470>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1f0      	bne.n	8008130 <HAL_RCC_OscConfig+0x444>
 800814e:	e03d      	b.n	80081cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d107      	bne.n	8008168 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e038      	b.n	80081ce <HAL_RCC_OscConfig+0x4e2>
 800815c:	40023800 	.word	0x40023800
 8008160:	40007000 	.word	0x40007000
 8008164:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008168:	4b1b      	ldr	r3, [pc, #108]	@ (80081d8 <HAL_RCC_OscConfig+0x4ec>)
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	699b      	ldr	r3, [r3, #24]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d028      	beq.n	80081c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008180:	429a      	cmp	r2, r3
 8008182:	d121      	bne.n	80081c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800818e:	429a      	cmp	r2, r3
 8008190:	d11a      	bne.n	80081c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008198:	4013      	ands	r3, r2
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800819e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d111      	bne.n	80081c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ae:	085b      	lsrs	r3, r3, #1
 80081b0:	3b01      	subs	r3, #1
 80081b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d107      	bne.n	80081c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d001      	beq.n	80081cc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	e000      	b.n	80081ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3718      	adds	r7, #24
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	40023800 	.word	0x40023800

080081dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d101      	bne.n	80081f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e0cc      	b.n	800838a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80081f0:	4b68      	ldr	r3, [pc, #416]	@ (8008394 <HAL_RCC_ClockConfig+0x1b8>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 0307 	and.w	r3, r3, #7
 80081f8:	683a      	ldr	r2, [r7, #0]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d90c      	bls.n	8008218 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081fe:	4b65      	ldr	r3, [pc, #404]	@ (8008394 <HAL_RCC_ClockConfig+0x1b8>)
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	b2d2      	uxtb	r2, r2
 8008204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008206:	4b63      	ldr	r3, [pc, #396]	@ (8008394 <HAL_RCC_ClockConfig+0x1b8>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 0307 	and.w	r3, r3, #7
 800820e:	683a      	ldr	r2, [r7, #0]
 8008210:	429a      	cmp	r2, r3
 8008212:	d001      	beq.n	8008218 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	e0b8      	b.n	800838a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f003 0302 	and.w	r3, r3, #2
 8008220:	2b00      	cmp	r3, #0
 8008222:	d020      	beq.n	8008266 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 0304 	and.w	r3, r3, #4
 800822c:	2b00      	cmp	r3, #0
 800822e:	d005      	beq.n	800823c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008230:	4b59      	ldr	r3, [pc, #356]	@ (8008398 <HAL_RCC_ClockConfig+0x1bc>)
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	4a58      	ldr	r2, [pc, #352]	@ (8008398 <HAL_RCC_ClockConfig+0x1bc>)
 8008236:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800823a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 0308 	and.w	r3, r3, #8
 8008244:	2b00      	cmp	r3, #0
 8008246:	d005      	beq.n	8008254 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008248:	4b53      	ldr	r3, [pc, #332]	@ (8008398 <HAL_RCC_ClockConfig+0x1bc>)
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	4a52      	ldr	r2, [pc, #328]	@ (8008398 <HAL_RCC_ClockConfig+0x1bc>)
 800824e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008252:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008254:	4b50      	ldr	r3, [pc, #320]	@ (8008398 <HAL_RCC_ClockConfig+0x1bc>)
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	494d      	ldr	r1, [pc, #308]	@ (8008398 <HAL_RCC_ClockConfig+0x1bc>)
 8008262:	4313      	orrs	r3, r2
 8008264:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 0301 	and.w	r3, r3, #1
 800826e:	2b00      	cmp	r3, #0
 8008270:	d044      	beq.n	80082fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	2b01      	cmp	r3, #1
 8008278:	d107      	bne.n	800828a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800827a:	4b47      	ldr	r3, [pc, #284]	@ (8008398 <HAL_RCC_ClockConfig+0x1bc>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008282:	2b00      	cmp	r3, #0
 8008284:	d119      	bne.n	80082ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	e07f      	b.n	800838a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	2b02      	cmp	r3, #2
 8008290:	d003      	beq.n	800829a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008296:	2b03      	cmp	r3, #3
 8008298:	d107      	bne.n	80082aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800829a:	4b3f      	ldr	r3, [pc, #252]	@ (8008398 <HAL_RCC_ClockConfig+0x1bc>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d109      	bne.n	80082ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e06f      	b.n	800838a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082aa:	4b3b      	ldr	r3, [pc, #236]	@ (8008398 <HAL_RCC_ClockConfig+0x1bc>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f003 0302 	and.w	r3, r3, #2
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d101      	bne.n	80082ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e067      	b.n	800838a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80082ba:	4b37      	ldr	r3, [pc, #220]	@ (8008398 <HAL_RCC_ClockConfig+0x1bc>)
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	f023 0203 	bic.w	r2, r3, #3
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	4934      	ldr	r1, [pc, #208]	@ (8008398 <HAL_RCC_ClockConfig+0x1bc>)
 80082c8:	4313      	orrs	r3, r2
 80082ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80082cc:	f7f9 fdce 	bl	8001e6c <HAL_GetTick>
 80082d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082d2:	e00a      	b.n	80082ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082d4:	f7f9 fdca 	bl	8001e6c <HAL_GetTick>
 80082d8:	4602      	mov	r2, r0
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	1ad3      	subs	r3, r2, r3
 80082de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d901      	bls.n	80082ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80082e6:	2303      	movs	r3, #3
 80082e8:	e04f      	b.n	800838a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082ea:	4b2b      	ldr	r3, [pc, #172]	@ (8008398 <HAL_RCC_ClockConfig+0x1bc>)
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	f003 020c 	and.w	r2, r3, #12
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d1eb      	bne.n	80082d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80082fc:	4b25      	ldr	r3, [pc, #148]	@ (8008394 <HAL_RCC_ClockConfig+0x1b8>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f003 0307 	and.w	r3, r3, #7
 8008304:	683a      	ldr	r2, [r7, #0]
 8008306:	429a      	cmp	r2, r3
 8008308:	d20c      	bcs.n	8008324 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800830a:	4b22      	ldr	r3, [pc, #136]	@ (8008394 <HAL_RCC_ClockConfig+0x1b8>)
 800830c:	683a      	ldr	r2, [r7, #0]
 800830e:	b2d2      	uxtb	r2, r2
 8008310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008312:	4b20      	ldr	r3, [pc, #128]	@ (8008394 <HAL_RCC_ClockConfig+0x1b8>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 0307 	and.w	r3, r3, #7
 800831a:	683a      	ldr	r2, [r7, #0]
 800831c:	429a      	cmp	r2, r3
 800831e:	d001      	beq.n	8008324 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	e032      	b.n	800838a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 0304 	and.w	r3, r3, #4
 800832c:	2b00      	cmp	r3, #0
 800832e:	d008      	beq.n	8008342 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008330:	4b19      	ldr	r3, [pc, #100]	@ (8008398 <HAL_RCC_ClockConfig+0x1bc>)
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	4916      	ldr	r1, [pc, #88]	@ (8008398 <HAL_RCC_ClockConfig+0x1bc>)
 800833e:	4313      	orrs	r3, r2
 8008340:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f003 0308 	and.w	r3, r3, #8
 800834a:	2b00      	cmp	r3, #0
 800834c:	d009      	beq.n	8008362 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800834e:	4b12      	ldr	r3, [pc, #72]	@ (8008398 <HAL_RCC_ClockConfig+0x1bc>)
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	00db      	lsls	r3, r3, #3
 800835c:	490e      	ldr	r1, [pc, #56]	@ (8008398 <HAL_RCC_ClockConfig+0x1bc>)
 800835e:	4313      	orrs	r3, r2
 8008360:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008362:	f000 f821 	bl	80083a8 <HAL_RCC_GetSysClockFreq>
 8008366:	4602      	mov	r2, r0
 8008368:	4b0b      	ldr	r3, [pc, #44]	@ (8008398 <HAL_RCC_ClockConfig+0x1bc>)
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	091b      	lsrs	r3, r3, #4
 800836e:	f003 030f 	and.w	r3, r3, #15
 8008372:	490a      	ldr	r1, [pc, #40]	@ (800839c <HAL_RCC_ClockConfig+0x1c0>)
 8008374:	5ccb      	ldrb	r3, [r1, r3]
 8008376:	fa22 f303 	lsr.w	r3, r2, r3
 800837a:	4a09      	ldr	r2, [pc, #36]	@ (80083a0 <HAL_RCC_ClockConfig+0x1c4>)
 800837c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800837e:	4b09      	ldr	r3, [pc, #36]	@ (80083a4 <HAL_RCC_ClockConfig+0x1c8>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4618      	mov	r0, r3
 8008384:	f7f9 fd2e 	bl	8001de4 <HAL_InitTick>

  return HAL_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3710      	adds	r7, #16
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	40023c00 	.word	0x40023c00
 8008398:	40023800 	.word	0x40023800
 800839c:	0800e410 	.word	0x0800e410
 80083a0:	20000004 	.word	0x20000004
 80083a4:	20000008 	.word	0x20000008

080083a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80083a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083ac:	b090      	sub	sp, #64	@ 0x40
 80083ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80083b0:	2300      	movs	r3, #0
 80083b2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80083b4:	2300      	movs	r3, #0
 80083b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80083b8:	2300      	movs	r3, #0
 80083ba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80083bc:	2300      	movs	r3, #0
 80083be:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80083c0:	4b59      	ldr	r3, [pc, #356]	@ (8008528 <HAL_RCC_GetSysClockFreq+0x180>)
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	f003 030c 	and.w	r3, r3, #12
 80083c8:	2b08      	cmp	r3, #8
 80083ca:	d00d      	beq.n	80083e8 <HAL_RCC_GetSysClockFreq+0x40>
 80083cc:	2b08      	cmp	r3, #8
 80083ce:	f200 80a1 	bhi.w	8008514 <HAL_RCC_GetSysClockFreq+0x16c>
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d002      	beq.n	80083dc <HAL_RCC_GetSysClockFreq+0x34>
 80083d6:	2b04      	cmp	r3, #4
 80083d8:	d003      	beq.n	80083e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80083da:	e09b      	b.n	8008514 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80083dc:	4b53      	ldr	r3, [pc, #332]	@ (800852c <HAL_RCC_GetSysClockFreq+0x184>)
 80083de:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80083e0:	e09b      	b.n	800851a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80083e2:	4b53      	ldr	r3, [pc, #332]	@ (8008530 <HAL_RCC_GetSysClockFreq+0x188>)
 80083e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80083e6:	e098      	b.n	800851a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80083e8:	4b4f      	ldr	r3, [pc, #316]	@ (8008528 <HAL_RCC_GetSysClockFreq+0x180>)
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80083f0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80083f2:	4b4d      	ldr	r3, [pc, #308]	@ (8008528 <HAL_RCC_GetSysClockFreq+0x180>)
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d028      	beq.n	8008450 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083fe:	4b4a      	ldr	r3, [pc, #296]	@ (8008528 <HAL_RCC_GetSysClockFreq+0x180>)
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	099b      	lsrs	r3, r3, #6
 8008404:	2200      	movs	r2, #0
 8008406:	623b      	str	r3, [r7, #32]
 8008408:	627a      	str	r2, [r7, #36]	@ 0x24
 800840a:	6a3b      	ldr	r3, [r7, #32]
 800840c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008410:	2100      	movs	r1, #0
 8008412:	4b47      	ldr	r3, [pc, #284]	@ (8008530 <HAL_RCC_GetSysClockFreq+0x188>)
 8008414:	fb03 f201 	mul.w	r2, r3, r1
 8008418:	2300      	movs	r3, #0
 800841a:	fb00 f303 	mul.w	r3, r0, r3
 800841e:	4413      	add	r3, r2
 8008420:	4a43      	ldr	r2, [pc, #268]	@ (8008530 <HAL_RCC_GetSysClockFreq+0x188>)
 8008422:	fba0 1202 	umull	r1, r2, r0, r2
 8008426:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008428:	460a      	mov	r2, r1
 800842a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800842c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800842e:	4413      	add	r3, r2
 8008430:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008434:	2200      	movs	r2, #0
 8008436:	61bb      	str	r3, [r7, #24]
 8008438:	61fa      	str	r2, [r7, #28]
 800843a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800843e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008442:	f7f7 ff1d 	bl	8000280 <__aeabi_uldivmod>
 8008446:	4602      	mov	r2, r0
 8008448:	460b      	mov	r3, r1
 800844a:	4613      	mov	r3, r2
 800844c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800844e:	e053      	b.n	80084f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008450:	4b35      	ldr	r3, [pc, #212]	@ (8008528 <HAL_RCC_GetSysClockFreq+0x180>)
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	099b      	lsrs	r3, r3, #6
 8008456:	2200      	movs	r2, #0
 8008458:	613b      	str	r3, [r7, #16]
 800845a:	617a      	str	r2, [r7, #20]
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008462:	f04f 0b00 	mov.w	fp, #0
 8008466:	4652      	mov	r2, sl
 8008468:	465b      	mov	r3, fp
 800846a:	f04f 0000 	mov.w	r0, #0
 800846e:	f04f 0100 	mov.w	r1, #0
 8008472:	0159      	lsls	r1, r3, #5
 8008474:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008478:	0150      	lsls	r0, r2, #5
 800847a:	4602      	mov	r2, r0
 800847c:	460b      	mov	r3, r1
 800847e:	ebb2 080a 	subs.w	r8, r2, sl
 8008482:	eb63 090b 	sbc.w	r9, r3, fp
 8008486:	f04f 0200 	mov.w	r2, #0
 800848a:	f04f 0300 	mov.w	r3, #0
 800848e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008492:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008496:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800849a:	ebb2 0408 	subs.w	r4, r2, r8
 800849e:	eb63 0509 	sbc.w	r5, r3, r9
 80084a2:	f04f 0200 	mov.w	r2, #0
 80084a6:	f04f 0300 	mov.w	r3, #0
 80084aa:	00eb      	lsls	r3, r5, #3
 80084ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084b0:	00e2      	lsls	r2, r4, #3
 80084b2:	4614      	mov	r4, r2
 80084b4:	461d      	mov	r5, r3
 80084b6:	eb14 030a 	adds.w	r3, r4, sl
 80084ba:	603b      	str	r3, [r7, #0]
 80084bc:	eb45 030b 	adc.w	r3, r5, fp
 80084c0:	607b      	str	r3, [r7, #4]
 80084c2:	f04f 0200 	mov.w	r2, #0
 80084c6:	f04f 0300 	mov.w	r3, #0
 80084ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80084ce:	4629      	mov	r1, r5
 80084d0:	028b      	lsls	r3, r1, #10
 80084d2:	4621      	mov	r1, r4
 80084d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80084d8:	4621      	mov	r1, r4
 80084da:	028a      	lsls	r2, r1, #10
 80084dc:	4610      	mov	r0, r2
 80084de:	4619      	mov	r1, r3
 80084e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084e2:	2200      	movs	r2, #0
 80084e4:	60bb      	str	r3, [r7, #8]
 80084e6:	60fa      	str	r2, [r7, #12]
 80084e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80084ec:	f7f7 fec8 	bl	8000280 <__aeabi_uldivmod>
 80084f0:	4602      	mov	r2, r0
 80084f2:	460b      	mov	r3, r1
 80084f4:	4613      	mov	r3, r2
 80084f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80084f8:	4b0b      	ldr	r3, [pc, #44]	@ (8008528 <HAL_RCC_GetSysClockFreq+0x180>)
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	0c1b      	lsrs	r3, r3, #16
 80084fe:	f003 0303 	and.w	r3, r3, #3
 8008502:	3301      	adds	r3, #1
 8008504:	005b      	lsls	r3, r3, #1
 8008506:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008508:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800850a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008510:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008512:	e002      	b.n	800851a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008514:	4b05      	ldr	r3, [pc, #20]	@ (800852c <HAL_RCC_GetSysClockFreq+0x184>)
 8008516:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008518:	bf00      	nop
    }
  }
  return sysclockfreq;
 800851a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800851c:	4618      	mov	r0, r3
 800851e:	3740      	adds	r7, #64	@ 0x40
 8008520:	46bd      	mov	sp, r7
 8008522:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008526:	bf00      	nop
 8008528:	40023800 	.word	0x40023800
 800852c:	00f42400 	.word	0x00f42400
 8008530:	017d7840 	.word	0x017d7840

08008534 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008534:	b480      	push	{r7}
 8008536:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008538:	4b03      	ldr	r3, [pc, #12]	@ (8008548 <HAL_RCC_GetHCLKFreq+0x14>)
 800853a:	681b      	ldr	r3, [r3, #0]
}
 800853c:	4618      	mov	r0, r3
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop
 8008548:	20000004 	.word	0x20000004

0800854c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008550:	f7ff fff0 	bl	8008534 <HAL_RCC_GetHCLKFreq>
 8008554:	4602      	mov	r2, r0
 8008556:	4b05      	ldr	r3, [pc, #20]	@ (800856c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	0a9b      	lsrs	r3, r3, #10
 800855c:	f003 0307 	and.w	r3, r3, #7
 8008560:	4903      	ldr	r1, [pc, #12]	@ (8008570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008562:	5ccb      	ldrb	r3, [r1, r3]
 8008564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008568:	4618      	mov	r0, r3
 800856a:	bd80      	pop	{r7, pc}
 800856c:	40023800 	.word	0x40023800
 8008570:	0800e420 	.word	0x0800e420

08008574 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d101      	bne.n	8008586 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e041      	b.n	800860a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800858c:	b2db      	uxtb	r3, r3
 800858e:	2b00      	cmp	r3, #0
 8008590:	d106      	bne.n	80085a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f7f9 fa8e 	bl	8001abc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2202      	movs	r2, #2
 80085a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	3304      	adds	r3, #4
 80085b0:	4619      	mov	r1, r3
 80085b2:	4610      	mov	r0, r2
 80085b4:	f000 fc3c 	bl	8008e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3708      	adds	r7, #8
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
	...

08008614 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008622:	b2db      	uxtb	r3, r3
 8008624:	2b01      	cmp	r3, #1
 8008626:	d001      	beq.n	800862c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	e044      	b.n	80086b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2202      	movs	r2, #2
 8008630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	68da      	ldr	r2, [r3, #12]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f042 0201 	orr.w	r2, r2, #1
 8008642:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a1e      	ldr	r2, [pc, #120]	@ (80086c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d018      	beq.n	8008680 <HAL_TIM_Base_Start_IT+0x6c>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008656:	d013      	beq.n	8008680 <HAL_TIM_Base_Start_IT+0x6c>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a1a      	ldr	r2, [pc, #104]	@ (80086c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d00e      	beq.n	8008680 <HAL_TIM_Base_Start_IT+0x6c>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a19      	ldr	r2, [pc, #100]	@ (80086cc <HAL_TIM_Base_Start_IT+0xb8>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d009      	beq.n	8008680 <HAL_TIM_Base_Start_IT+0x6c>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a17      	ldr	r2, [pc, #92]	@ (80086d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d004      	beq.n	8008680 <HAL_TIM_Base_Start_IT+0x6c>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a16      	ldr	r2, [pc, #88]	@ (80086d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d111      	bne.n	80086a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	f003 0307 	and.w	r3, r3, #7
 800868a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2b06      	cmp	r3, #6
 8008690:	d010      	beq.n	80086b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f042 0201 	orr.w	r2, r2, #1
 80086a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086a2:	e007      	b.n	80086b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f042 0201 	orr.w	r2, r2, #1
 80086b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3714      	adds	r7, #20
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	40010000 	.word	0x40010000
 80086c8:	40000400 	.word	0x40000400
 80086cc:	40000800 	.word	0x40000800
 80086d0:	40000c00 	.word	0x40000c00
 80086d4:	40014000 	.word	0x40014000

080086d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d101      	bne.n	80086ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80086e6:	2301      	movs	r3, #1
 80086e8:	e041      	b.n	800876e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d106      	bne.n	8008704 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 f839 	bl	8008776 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2202      	movs	r2, #2
 8008708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	3304      	adds	r3, #4
 8008714:	4619      	mov	r1, r3
 8008716:	4610      	mov	r0, r2
 8008718:	f000 fb8a 	bl	8008e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008776:	b480      	push	{r7}
 8008778:	b083      	sub	sp, #12
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800877e:	bf00      	nop
 8008780:	370c      	adds	r7, #12
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr
	...

0800878c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d109      	bne.n	80087b0 <HAL_TIM_PWM_Start+0x24>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	bf14      	ite	ne
 80087a8:	2301      	movne	r3, #1
 80087aa:	2300      	moveq	r3, #0
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	e022      	b.n	80087f6 <HAL_TIM_PWM_Start+0x6a>
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	2b04      	cmp	r3, #4
 80087b4:	d109      	bne.n	80087ca <HAL_TIM_PWM_Start+0x3e>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	2b01      	cmp	r3, #1
 80087c0:	bf14      	ite	ne
 80087c2:	2301      	movne	r3, #1
 80087c4:	2300      	moveq	r3, #0
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	e015      	b.n	80087f6 <HAL_TIM_PWM_Start+0x6a>
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	2b08      	cmp	r3, #8
 80087ce:	d109      	bne.n	80087e4 <HAL_TIM_PWM_Start+0x58>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	2b01      	cmp	r3, #1
 80087da:	bf14      	ite	ne
 80087dc:	2301      	movne	r3, #1
 80087de:	2300      	moveq	r3, #0
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	e008      	b.n	80087f6 <HAL_TIM_PWM_Start+0x6a>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	bf14      	ite	ne
 80087f0:	2301      	movne	r3, #1
 80087f2:	2300      	moveq	r3, #0
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d001      	beq.n	80087fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	e068      	b.n	80088d0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d104      	bne.n	800880e <HAL_TIM_PWM_Start+0x82>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2202      	movs	r2, #2
 8008808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800880c:	e013      	b.n	8008836 <HAL_TIM_PWM_Start+0xaa>
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	2b04      	cmp	r3, #4
 8008812:	d104      	bne.n	800881e <HAL_TIM_PWM_Start+0x92>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2202      	movs	r2, #2
 8008818:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800881c:	e00b      	b.n	8008836 <HAL_TIM_PWM_Start+0xaa>
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	2b08      	cmp	r3, #8
 8008822:	d104      	bne.n	800882e <HAL_TIM_PWM_Start+0xa2>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2202      	movs	r2, #2
 8008828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800882c:	e003      	b.n	8008836 <HAL_TIM_PWM_Start+0xaa>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2202      	movs	r2, #2
 8008832:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2201      	movs	r2, #1
 800883c:	6839      	ldr	r1, [r7, #0]
 800883e:	4618      	mov	r0, r3
 8008840:	f000 fda2 	bl	8009388 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a23      	ldr	r2, [pc, #140]	@ (80088d8 <HAL_TIM_PWM_Start+0x14c>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d107      	bne.n	800885e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800885c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a1d      	ldr	r2, [pc, #116]	@ (80088d8 <HAL_TIM_PWM_Start+0x14c>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d018      	beq.n	800889a <HAL_TIM_PWM_Start+0x10e>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008870:	d013      	beq.n	800889a <HAL_TIM_PWM_Start+0x10e>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a19      	ldr	r2, [pc, #100]	@ (80088dc <HAL_TIM_PWM_Start+0x150>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d00e      	beq.n	800889a <HAL_TIM_PWM_Start+0x10e>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a17      	ldr	r2, [pc, #92]	@ (80088e0 <HAL_TIM_PWM_Start+0x154>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d009      	beq.n	800889a <HAL_TIM_PWM_Start+0x10e>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a16      	ldr	r2, [pc, #88]	@ (80088e4 <HAL_TIM_PWM_Start+0x158>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d004      	beq.n	800889a <HAL_TIM_PWM_Start+0x10e>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a14      	ldr	r2, [pc, #80]	@ (80088e8 <HAL_TIM_PWM_Start+0x15c>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d111      	bne.n	80088be <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	f003 0307 	and.w	r3, r3, #7
 80088a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2b06      	cmp	r3, #6
 80088aa:	d010      	beq.n	80088ce <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f042 0201 	orr.w	r2, r2, #1
 80088ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088bc:	e007      	b.n	80088ce <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f042 0201 	orr.w	r2, r2, #1
 80088cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3710      	adds	r7, #16
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	40010000 	.word	0x40010000
 80088dc:	40000400 	.word	0x40000400
 80088e0:	40000800 	.word	0x40000800
 80088e4:	40000c00 	.word	0x40000c00
 80088e8:	40014000 	.word	0x40014000

080088ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	f003 0302 	and.w	r3, r3, #2
 800890a:	2b00      	cmp	r3, #0
 800890c:	d020      	beq.n	8008950 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f003 0302 	and.w	r3, r3, #2
 8008914:	2b00      	cmp	r3, #0
 8008916:	d01b      	beq.n	8008950 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f06f 0202 	mvn.w	r2, #2
 8008920:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2201      	movs	r2, #1
 8008926:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	699b      	ldr	r3, [r3, #24]
 800892e:	f003 0303 	and.w	r3, r3, #3
 8008932:	2b00      	cmp	r3, #0
 8008934:	d003      	beq.n	800893e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 fa5b 	bl	8008df2 <HAL_TIM_IC_CaptureCallback>
 800893c:	e005      	b.n	800894a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fa4d 	bl	8008dde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 fa5e 	bl	8008e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	f003 0304 	and.w	r3, r3, #4
 8008956:	2b00      	cmp	r3, #0
 8008958:	d020      	beq.n	800899c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f003 0304 	and.w	r3, r3, #4
 8008960:	2b00      	cmp	r3, #0
 8008962:	d01b      	beq.n	800899c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f06f 0204 	mvn.w	r2, #4
 800896c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2202      	movs	r2, #2
 8008972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	699b      	ldr	r3, [r3, #24]
 800897a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800897e:	2b00      	cmp	r3, #0
 8008980:	d003      	beq.n	800898a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 fa35 	bl	8008df2 <HAL_TIM_IC_CaptureCallback>
 8008988:	e005      	b.n	8008996 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fa27 	bl	8008dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 fa38 	bl	8008e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	f003 0308 	and.w	r3, r3, #8
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d020      	beq.n	80089e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f003 0308 	and.w	r3, r3, #8
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d01b      	beq.n	80089e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f06f 0208 	mvn.w	r2, #8
 80089b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2204      	movs	r2, #4
 80089be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	69db      	ldr	r3, [r3, #28]
 80089c6:	f003 0303 	and.w	r3, r3, #3
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d003      	beq.n	80089d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 fa0f 	bl	8008df2 <HAL_TIM_IC_CaptureCallback>
 80089d4:	e005      	b.n	80089e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fa01 	bl	8008dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fa12 	bl	8008e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	f003 0310 	and.w	r3, r3, #16
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d020      	beq.n	8008a34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f003 0310 	and.w	r3, r3, #16
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d01b      	beq.n	8008a34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f06f 0210 	mvn.w	r2, #16
 8008a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2208      	movs	r2, #8
 8008a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	69db      	ldr	r3, [r3, #28]
 8008a12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d003      	beq.n	8008a22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f9e9 	bl	8008df2 <HAL_TIM_IC_CaptureCallback>
 8008a20:	e005      	b.n	8008a2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f9db 	bl	8008dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 f9ec 	bl	8008e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	f003 0301 	and.w	r3, r3, #1
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00c      	beq.n	8008a58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f003 0301 	and.w	r3, r3, #1
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d007      	beq.n	8008a58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f06f 0201 	mvn.w	r2, #1
 8008a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7f8 f856 	bl	8000b04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00c      	beq.n	8008a7c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d007      	beq.n	8008a7c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fd24 	bl	80094c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00c      	beq.n	8008aa0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d007      	beq.n	8008aa0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f9bd 	bl	8008e1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	f003 0320 	and.w	r3, r3, #32
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00c      	beq.n	8008ac4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f003 0320 	and.w	r3, r3, #32
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d007      	beq.n	8008ac4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f06f 0220 	mvn.w	r2, #32
 8008abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 fcf6 	bl	80094b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ac4:	bf00      	nop
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b086      	sub	sp, #24
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d101      	bne.n	8008aea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008ae6:	2302      	movs	r3, #2
 8008ae8:	e0ae      	b.n	8008c48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2b0c      	cmp	r3, #12
 8008af6:	f200 809f 	bhi.w	8008c38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008afa:	a201      	add	r2, pc, #4	@ (adr r2, 8008b00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b00:	08008b35 	.word	0x08008b35
 8008b04:	08008c39 	.word	0x08008c39
 8008b08:	08008c39 	.word	0x08008c39
 8008b0c:	08008c39 	.word	0x08008c39
 8008b10:	08008b75 	.word	0x08008b75
 8008b14:	08008c39 	.word	0x08008c39
 8008b18:	08008c39 	.word	0x08008c39
 8008b1c:	08008c39 	.word	0x08008c39
 8008b20:	08008bb7 	.word	0x08008bb7
 8008b24:	08008c39 	.word	0x08008c39
 8008b28:	08008c39 	.word	0x08008c39
 8008b2c:	08008c39 	.word	0x08008c39
 8008b30:	08008bf7 	.word	0x08008bf7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	68b9      	ldr	r1, [r7, #8]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 f9fe 	bl	8008f3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	699a      	ldr	r2, [r3, #24]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f042 0208 	orr.w	r2, r2, #8
 8008b4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	699a      	ldr	r2, [r3, #24]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f022 0204 	bic.w	r2, r2, #4
 8008b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	6999      	ldr	r1, [r3, #24]
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	691a      	ldr	r2, [r3, #16]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	430a      	orrs	r2, r1
 8008b70:	619a      	str	r2, [r3, #24]
      break;
 8008b72:	e064      	b.n	8008c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	68b9      	ldr	r1, [r7, #8]
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 fa44 	bl	8009008 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	699a      	ldr	r2, [r3, #24]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	699a      	ldr	r2, [r3, #24]
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	6999      	ldr	r1, [r3, #24]
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	691b      	ldr	r3, [r3, #16]
 8008baa:	021a      	lsls	r2, r3, #8
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	430a      	orrs	r2, r1
 8008bb2:	619a      	str	r2, [r3, #24]
      break;
 8008bb4:	e043      	b.n	8008c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	68b9      	ldr	r1, [r7, #8]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f000 fa8f 	bl	80090e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	69da      	ldr	r2, [r3, #28]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f042 0208 	orr.w	r2, r2, #8
 8008bd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	69da      	ldr	r2, [r3, #28]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f022 0204 	bic.w	r2, r2, #4
 8008be0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	69d9      	ldr	r1, [r3, #28]
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	691a      	ldr	r2, [r3, #16]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	430a      	orrs	r2, r1
 8008bf2:	61da      	str	r2, [r3, #28]
      break;
 8008bf4:	e023      	b.n	8008c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	68b9      	ldr	r1, [r7, #8]
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f000 fad9 	bl	80091b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	69da      	ldr	r2, [r3, #28]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	69da      	ldr	r2, [r3, #28]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	69d9      	ldr	r1, [r3, #28]
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	691b      	ldr	r3, [r3, #16]
 8008c2c:	021a      	lsls	r2, r3, #8
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	430a      	orrs	r2, r1
 8008c34:	61da      	str	r2, [r3, #28]
      break;
 8008c36:	e002      	b.n	8008c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8008c3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2200      	movs	r2, #0
 8008c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3718      	adds	r7, #24
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d101      	bne.n	8008c6c <HAL_TIM_ConfigClockSource+0x1c>
 8008c68:	2302      	movs	r3, #2
 8008c6a:	e0b4      	b.n	8008dd6 <HAL_TIM_ConfigClockSource+0x186>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2202      	movs	r2, #2
 8008c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008c8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008c92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ca4:	d03e      	beq.n	8008d24 <HAL_TIM_ConfigClockSource+0xd4>
 8008ca6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008caa:	f200 8087 	bhi.w	8008dbc <HAL_TIM_ConfigClockSource+0x16c>
 8008cae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cb2:	f000 8086 	beq.w	8008dc2 <HAL_TIM_ConfigClockSource+0x172>
 8008cb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cba:	d87f      	bhi.n	8008dbc <HAL_TIM_ConfigClockSource+0x16c>
 8008cbc:	2b70      	cmp	r3, #112	@ 0x70
 8008cbe:	d01a      	beq.n	8008cf6 <HAL_TIM_ConfigClockSource+0xa6>
 8008cc0:	2b70      	cmp	r3, #112	@ 0x70
 8008cc2:	d87b      	bhi.n	8008dbc <HAL_TIM_ConfigClockSource+0x16c>
 8008cc4:	2b60      	cmp	r3, #96	@ 0x60
 8008cc6:	d050      	beq.n	8008d6a <HAL_TIM_ConfigClockSource+0x11a>
 8008cc8:	2b60      	cmp	r3, #96	@ 0x60
 8008cca:	d877      	bhi.n	8008dbc <HAL_TIM_ConfigClockSource+0x16c>
 8008ccc:	2b50      	cmp	r3, #80	@ 0x50
 8008cce:	d03c      	beq.n	8008d4a <HAL_TIM_ConfigClockSource+0xfa>
 8008cd0:	2b50      	cmp	r3, #80	@ 0x50
 8008cd2:	d873      	bhi.n	8008dbc <HAL_TIM_ConfigClockSource+0x16c>
 8008cd4:	2b40      	cmp	r3, #64	@ 0x40
 8008cd6:	d058      	beq.n	8008d8a <HAL_TIM_ConfigClockSource+0x13a>
 8008cd8:	2b40      	cmp	r3, #64	@ 0x40
 8008cda:	d86f      	bhi.n	8008dbc <HAL_TIM_ConfigClockSource+0x16c>
 8008cdc:	2b30      	cmp	r3, #48	@ 0x30
 8008cde:	d064      	beq.n	8008daa <HAL_TIM_ConfigClockSource+0x15a>
 8008ce0:	2b30      	cmp	r3, #48	@ 0x30
 8008ce2:	d86b      	bhi.n	8008dbc <HAL_TIM_ConfigClockSource+0x16c>
 8008ce4:	2b20      	cmp	r3, #32
 8008ce6:	d060      	beq.n	8008daa <HAL_TIM_ConfigClockSource+0x15a>
 8008ce8:	2b20      	cmp	r3, #32
 8008cea:	d867      	bhi.n	8008dbc <HAL_TIM_ConfigClockSource+0x16c>
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d05c      	beq.n	8008daa <HAL_TIM_ConfigClockSource+0x15a>
 8008cf0:	2b10      	cmp	r3, #16
 8008cf2:	d05a      	beq.n	8008daa <HAL_TIM_ConfigClockSource+0x15a>
 8008cf4:	e062      	b.n	8008dbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008d06:	f000 fb1f 	bl	8009348 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008d18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	68ba      	ldr	r2, [r7, #8]
 8008d20:	609a      	str	r2, [r3, #8]
      break;
 8008d22:	e04f      	b.n	8008dc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008d34:	f000 fb08 	bl	8009348 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	689a      	ldr	r2, [r3, #8]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008d46:	609a      	str	r2, [r3, #8]
      break;
 8008d48:	e03c      	b.n	8008dc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d56:	461a      	mov	r2, r3
 8008d58:	f000 fa7c 	bl	8009254 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2150      	movs	r1, #80	@ 0x50
 8008d62:	4618      	mov	r0, r3
 8008d64:	f000 fad5 	bl	8009312 <TIM_ITRx_SetConfig>
      break;
 8008d68:	e02c      	b.n	8008dc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d76:	461a      	mov	r2, r3
 8008d78:	f000 fa9b 	bl	80092b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2160      	movs	r1, #96	@ 0x60
 8008d82:	4618      	mov	r0, r3
 8008d84:	f000 fac5 	bl	8009312 <TIM_ITRx_SetConfig>
      break;
 8008d88:	e01c      	b.n	8008dc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d96:	461a      	mov	r2, r3
 8008d98:	f000 fa5c 	bl	8009254 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	2140      	movs	r1, #64	@ 0x40
 8008da2:	4618      	mov	r0, r3
 8008da4:	f000 fab5 	bl	8009312 <TIM_ITRx_SetConfig>
      break;
 8008da8:	e00c      	b.n	8008dc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4619      	mov	r1, r3
 8008db4:	4610      	mov	r0, r2
 8008db6:	f000 faac 	bl	8009312 <TIM_ITRx_SetConfig>
      break;
 8008dba:	e003      	b.n	8008dc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8008dc0:	e000      	b.n	8008dc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008dc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3710      	adds	r7, #16
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008dde:	b480      	push	{r7}
 8008de0:	b083      	sub	sp, #12
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008de6:	bf00      	nop
 8008de8:	370c      	adds	r7, #12
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr

08008df2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008df2:	b480      	push	{r7}
 8008df4:	b083      	sub	sp, #12
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008dfa:	bf00      	nop
 8008dfc:	370c      	adds	r7, #12
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr

08008e06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e06:	b480      	push	{r7}
 8008e08:	b083      	sub	sp, #12
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e0e:	bf00      	nop
 8008e10:	370c      	adds	r7, #12
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr

08008e1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e1a:	b480      	push	{r7}
 8008e1c:	b083      	sub	sp, #12
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e22:	bf00      	nop
 8008e24:	370c      	adds	r7, #12
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
	...

08008e30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4a37      	ldr	r2, [pc, #220]	@ (8008f20 <TIM_Base_SetConfig+0xf0>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d00f      	beq.n	8008e68 <TIM_Base_SetConfig+0x38>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e4e:	d00b      	beq.n	8008e68 <TIM_Base_SetConfig+0x38>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a34      	ldr	r2, [pc, #208]	@ (8008f24 <TIM_Base_SetConfig+0xf4>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d007      	beq.n	8008e68 <TIM_Base_SetConfig+0x38>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a33      	ldr	r2, [pc, #204]	@ (8008f28 <TIM_Base_SetConfig+0xf8>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d003      	beq.n	8008e68 <TIM_Base_SetConfig+0x38>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a32      	ldr	r2, [pc, #200]	@ (8008f2c <TIM_Base_SetConfig+0xfc>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d108      	bne.n	8008e7a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	68fa      	ldr	r2, [r7, #12]
 8008e76:	4313      	orrs	r3, r2
 8008e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4a28      	ldr	r2, [pc, #160]	@ (8008f20 <TIM_Base_SetConfig+0xf0>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d01b      	beq.n	8008eba <TIM_Base_SetConfig+0x8a>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e88:	d017      	beq.n	8008eba <TIM_Base_SetConfig+0x8a>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4a25      	ldr	r2, [pc, #148]	@ (8008f24 <TIM_Base_SetConfig+0xf4>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d013      	beq.n	8008eba <TIM_Base_SetConfig+0x8a>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4a24      	ldr	r2, [pc, #144]	@ (8008f28 <TIM_Base_SetConfig+0xf8>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d00f      	beq.n	8008eba <TIM_Base_SetConfig+0x8a>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4a23      	ldr	r2, [pc, #140]	@ (8008f2c <TIM_Base_SetConfig+0xfc>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d00b      	beq.n	8008eba <TIM_Base_SetConfig+0x8a>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4a22      	ldr	r2, [pc, #136]	@ (8008f30 <TIM_Base_SetConfig+0x100>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d007      	beq.n	8008eba <TIM_Base_SetConfig+0x8a>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4a21      	ldr	r2, [pc, #132]	@ (8008f34 <TIM_Base_SetConfig+0x104>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d003      	beq.n	8008eba <TIM_Base_SetConfig+0x8a>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4a20      	ldr	r2, [pc, #128]	@ (8008f38 <TIM_Base_SetConfig+0x108>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d108      	bne.n	8008ecc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	68db      	ldr	r3, [r3, #12]
 8008ec6:	68fa      	ldr	r2, [r7, #12]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	695b      	ldr	r3, [r3, #20]
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	689a      	ldr	r2, [r3, #8]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4a0c      	ldr	r2, [pc, #48]	@ (8008f20 <TIM_Base_SetConfig+0xf0>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d103      	bne.n	8008efa <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	691a      	ldr	r2, [r3, #16]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f043 0204 	orr.w	r2, r3, #4
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	601a      	str	r2, [r3, #0]
}
 8008f12:	bf00      	nop
 8008f14:	3714      	adds	r7, #20
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop
 8008f20:	40010000 	.word	0x40010000
 8008f24:	40000400 	.word	0x40000400
 8008f28:	40000800 	.word	0x40000800
 8008f2c:	40000c00 	.word	0x40000c00
 8008f30:	40014000 	.word	0x40014000
 8008f34:	40014400 	.word	0x40014400
 8008f38:	40014800 	.word	0x40014800

08008f3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b087      	sub	sp, #28
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6a1b      	ldr	r3, [r3, #32]
 8008f4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6a1b      	ldr	r3, [r3, #32]
 8008f50:	f023 0201 	bic.w	r2, r3, #1
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	699b      	ldr	r3, [r3, #24]
 8008f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f023 0303 	bic.w	r3, r3, #3
 8008f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	f023 0302 	bic.w	r3, r3, #2
 8008f84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	697a      	ldr	r2, [r7, #20]
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a1c      	ldr	r2, [pc, #112]	@ (8009004 <TIM_OC1_SetConfig+0xc8>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d10c      	bne.n	8008fb2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	f023 0308 	bic.w	r3, r3, #8
 8008f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	697a      	ldr	r2, [r7, #20]
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	f023 0304 	bic.w	r3, r3, #4
 8008fb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	4a13      	ldr	r2, [pc, #76]	@ (8009004 <TIM_OC1_SetConfig+0xc8>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d111      	bne.n	8008fde <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008fc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	695b      	ldr	r3, [r3, #20]
 8008fce:	693a      	ldr	r2, [r7, #16]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	699b      	ldr	r3, [r3, #24]
 8008fd8:	693a      	ldr	r2, [r7, #16]
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	693a      	ldr	r2, [r7, #16]
 8008fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	685a      	ldr	r2, [r3, #4]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	697a      	ldr	r2, [r7, #20]
 8008ff6:	621a      	str	r2, [r3, #32]
}
 8008ff8:	bf00      	nop
 8008ffa:	371c      	adds	r7, #28
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr
 8009004:	40010000 	.word	0x40010000

08009008 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009008:	b480      	push	{r7}
 800900a:	b087      	sub	sp, #28
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a1b      	ldr	r3, [r3, #32]
 8009016:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6a1b      	ldr	r3, [r3, #32]
 800901c:	f023 0210 	bic.w	r2, r3, #16
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	699b      	ldr	r3, [r3, #24]
 800902e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800903e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	021b      	lsls	r3, r3, #8
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	4313      	orrs	r3, r2
 800904a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	f023 0320 	bic.w	r3, r3, #32
 8009052:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	011b      	lsls	r3, r3, #4
 800905a:	697a      	ldr	r2, [r7, #20]
 800905c:	4313      	orrs	r3, r2
 800905e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4a1e      	ldr	r2, [pc, #120]	@ (80090dc <TIM_OC2_SetConfig+0xd4>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d10d      	bne.n	8009084 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800906e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	011b      	lsls	r3, r3, #4
 8009076:	697a      	ldr	r2, [r7, #20]
 8009078:	4313      	orrs	r3, r2
 800907a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009082:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a15      	ldr	r2, [pc, #84]	@ (80090dc <TIM_OC2_SetConfig+0xd4>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d113      	bne.n	80090b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009092:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800909a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	695b      	ldr	r3, [r3, #20]
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	693a      	ldr	r2, [r7, #16]
 80090a4:	4313      	orrs	r3, r2
 80090a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	699b      	ldr	r3, [r3, #24]
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	693a      	ldr	r2, [r7, #16]
 80090b0:	4313      	orrs	r3, r2
 80090b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	693a      	ldr	r2, [r7, #16]
 80090b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	68fa      	ldr	r2, [r7, #12]
 80090be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	685a      	ldr	r2, [r3, #4]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	697a      	ldr	r2, [r7, #20]
 80090cc:	621a      	str	r2, [r3, #32]
}
 80090ce:	bf00      	nop
 80090d0:	371c      	adds	r7, #28
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop
 80090dc:	40010000 	.word	0x40010000

080090e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b087      	sub	sp, #28
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6a1b      	ldr	r3, [r3, #32]
 80090ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6a1b      	ldr	r3, [r3, #32]
 80090f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	69db      	ldr	r3, [r3, #28]
 8009106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800910e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f023 0303 	bic.w	r3, r3, #3
 8009116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	68fa      	ldr	r2, [r7, #12]
 800911e:	4313      	orrs	r3, r2
 8009120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009128:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	021b      	lsls	r3, r3, #8
 8009130:	697a      	ldr	r2, [r7, #20]
 8009132:	4313      	orrs	r3, r2
 8009134:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4a1d      	ldr	r2, [pc, #116]	@ (80091b0 <TIM_OC3_SetConfig+0xd0>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d10d      	bne.n	800915a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009144:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	021b      	lsls	r3, r3, #8
 800914c:	697a      	ldr	r2, [r7, #20]
 800914e:	4313      	orrs	r3, r2
 8009150:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009158:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4a14      	ldr	r2, [pc, #80]	@ (80091b0 <TIM_OC3_SetConfig+0xd0>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d113      	bne.n	800918a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009168:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009170:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	695b      	ldr	r3, [r3, #20]
 8009176:	011b      	lsls	r3, r3, #4
 8009178:	693a      	ldr	r2, [r7, #16]
 800917a:	4313      	orrs	r3, r2
 800917c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	699b      	ldr	r3, [r3, #24]
 8009182:	011b      	lsls	r3, r3, #4
 8009184:	693a      	ldr	r2, [r7, #16]
 8009186:	4313      	orrs	r3, r2
 8009188:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	693a      	ldr	r2, [r7, #16]
 800918e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	68fa      	ldr	r2, [r7, #12]
 8009194:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	685a      	ldr	r2, [r3, #4]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	697a      	ldr	r2, [r7, #20]
 80091a2:	621a      	str	r2, [r3, #32]
}
 80091a4:	bf00      	nop
 80091a6:	371c      	adds	r7, #28
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr
 80091b0:	40010000 	.word	0x40010000

080091b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b087      	sub	sp, #28
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a1b      	ldr	r3, [r3, #32]
 80091c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6a1b      	ldr	r3, [r3, #32]
 80091c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	69db      	ldr	r3, [r3, #28]
 80091da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80091ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	021b      	lsls	r3, r3, #8
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	4313      	orrs	r3, r2
 80091f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80091fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	031b      	lsls	r3, r3, #12
 8009206:	693a      	ldr	r2, [r7, #16]
 8009208:	4313      	orrs	r3, r2
 800920a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	4a10      	ldr	r2, [pc, #64]	@ (8009250 <TIM_OC4_SetConfig+0x9c>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d109      	bne.n	8009228 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800921a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	695b      	ldr	r3, [r3, #20]
 8009220:	019b      	lsls	r3, r3, #6
 8009222:	697a      	ldr	r2, [r7, #20]
 8009224:	4313      	orrs	r3, r2
 8009226:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	697a      	ldr	r2, [r7, #20]
 800922c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	685a      	ldr	r2, [r3, #4]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	621a      	str	r2, [r3, #32]
}
 8009242:	bf00      	nop
 8009244:	371c      	adds	r7, #28
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop
 8009250:	40010000 	.word	0x40010000

08009254 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009254:	b480      	push	{r7}
 8009256:	b087      	sub	sp, #28
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6a1b      	ldr	r3, [r3, #32]
 8009264:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	6a1b      	ldr	r3, [r3, #32]
 800926a:	f023 0201 	bic.w	r2, r3, #1
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	699b      	ldr	r3, [r3, #24]
 8009276:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800927e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	011b      	lsls	r3, r3, #4
 8009284:	693a      	ldr	r2, [r7, #16]
 8009286:	4313      	orrs	r3, r2
 8009288:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	f023 030a 	bic.w	r3, r3, #10
 8009290:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009292:	697a      	ldr	r2, [r7, #20]
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	4313      	orrs	r3, r2
 8009298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	693a      	ldr	r2, [r7, #16]
 800929e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	697a      	ldr	r2, [r7, #20]
 80092a4:	621a      	str	r2, [r3, #32]
}
 80092a6:	bf00      	nop
 80092a8:	371c      	adds	r7, #28
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr

080092b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092b2:	b480      	push	{r7}
 80092b4:	b087      	sub	sp, #28
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	60f8      	str	r0, [r7, #12]
 80092ba:	60b9      	str	r1, [r7, #8]
 80092bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6a1b      	ldr	r3, [r3, #32]
 80092c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6a1b      	ldr	r3, [r3, #32]
 80092c8:	f023 0210 	bic.w	r2, r3, #16
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	699b      	ldr	r3, [r3, #24]
 80092d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80092dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	031b      	lsls	r3, r3, #12
 80092e2:	693a      	ldr	r2, [r7, #16]
 80092e4:	4313      	orrs	r3, r2
 80092e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80092ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	011b      	lsls	r3, r3, #4
 80092f4:	697a      	ldr	r2, [r7, #20]
 80092f6:	4313      	orrs	r3, r2
 80092f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	693a      	ldr	r2, [r7, #16]
 80092fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	697a      	ldr	r2, [r7, #20]
 8009304:	621a      	str	r2, [r3, #32]
}
 8009306:	bf00      	nop
 8009308:	371c      	adds	r7, #28
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr

08009312 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009312:	b480      	push	{r7}
 8009314:	b085      	sub	sp, #20
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
 800931a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009328:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800932a:	683a      	ldr	r2, [r7, #0]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	4313      	orrs	r3, r2
 8009330:	f043 0307 	orr.w	r3, r3, #7
 8009334:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	609a      	str	r2, [r3, #8]
}
 800933c:	bf00      	nop
 800933e:	3714      	adds	r7, #20
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009348:	b480      	push	{r7}
 800934a:	b087      	sub	sp, #28
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	607a      	str	r2, [r7, #4]
 8009354:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009362:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	021a      	lsls	r2, r3, #8
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	431a      	orrs	r2, r3
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	4313      	orrs	r3, r2
 8009370:	697a      	ldr	r2, [r7, #20]
 8009372:	4313      	orrs	r3, r2
 8009374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	697a      	ldr	r2, [r7, #20]
 800937a:	609a      	str	r2, [r3, #8]
}
 800937c:	bf00      	nop
 800937e:	371c      	adds	r7, #28
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009388:	b480      	push	{r7}
 800938a:	b087      	sub	sp, #28
 800938c:	af00      	add	r7, sp, #0
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	60b9      	str	r1, [r7, #8]
 8009392:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	f003 031f 	and.w	r3, r3, #31
 800939a:	2201      	movs	r2, #1
 800939c:	fa02 f303 	lsl.w	r3, r2, r3
 80093a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6a1a      	ldr	r2, [r3, #32]
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	43db      	mvns	r3, r3
 80093aa:	401a      	ands	r2, r3
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6a1a      	ldr	r2, [r3, #32]
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	f003 031f 	and.w	r3, r3, #31
 80093ba:	6879      	ldr	r1, [r7, #4]
 80093bc:	fa01 f303 	lsl.w	r3, r1, r3
 80093c0:	431a      	orrs	r2, r3
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	621a      	str	r2, [r3, #32]
}
 80093c6:	bf00      	nop
 80093c8:	371c      	adds	r7, #28
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr
	...

080093d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d101      	bne.n	80093ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80093e8:	2302      	movs	r3, #2
 80093ea:	e050      	b.n	800948e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2201      	movs	r2, #1
 80093f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2202      	movs	r2, #2
 80093f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009412:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	4313      	orrs	r3, r2
 800941c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	68fa      	ldr	r2, [r7, #12]
 8009424:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a1c      	ldr	r2, [pc, #112]	@ (800949c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d018      	beq.n	8009462 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009438:	d013      	beq.n	8009462 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a18      	ldr	r2, [pc, #96]	@ (80094a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d00e      	beq.n	8009462 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a16      	ldr	r2, [pc, #88]	@ (80094a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d009      	beq.n	8009462 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a15      	ldr	r2, [pc, #84]	@ (80094a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d004      	beq.n	8009462 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a13      	ldr	r2, [pc, #76]	@ (80094ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d10c      	bne.n	800947c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009468:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	68ba      	ldr	r2, [r7, #8]
 8009470:	4313      	orrs	r3, r2
 8009472:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68ba      	ldr	r2, [r7, #8]
 800947a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2201      	movs	r2, #1
 8009480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2200      	movs	r2, #0
 8009488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	3714      	adds	r7, #20
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop
 800949c:	40010000 	.word	0x40010000
 80094a0:	40000400 	.word	0x40000400
 80094a4:	40000800 	.word	0x40000800
 80094a8:	40000c00 	.word	0x40000c00
 80094ac:	40014000 	.word	0x40014000

080094b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80094b8:	bf00      	nop
 80094ba:	370c      	adds	r7, #12
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80094cc:	bf00      	nop
 80094ce:	370c      	adds	r7, #12
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80094d8:	b084      	sub	sp, #16
 80094da:	b580      	push	{r7, lr}
 80094dc:	b084      	sub	sp, #16
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
 80094e2:	f107 001c 	add.w	r0, r7, #28
 80094e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80094ea:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d123      	bne.n	800953a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	68db      	ldr	r3, [r3, #12]
 8009502:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009506:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800951a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800951e:	2b01      	cmp	r3, #1
 8009520:	d105      	bne.n	800952e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f001 fae8 	bl	800ab04 <USB_CoreReset>
 8009534:	4603      	mov	r3, r0
 8009536:	73fb      	strb	r3, [r7, #15]
 8009538:	e01b      	b.n	8009572 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f001 fadc 	bl	800ab04 <USB_CoreReset>
 800954c:	4603      	mov	r3, r0
 800954e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009550:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009554:	2b00      	cmp	r3, #0
 8009556:	d106      	bne.n	8009566 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800955c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	639a      	str	r2, [r3, #56]	@ 0x38
 8009564:	e005      	b.n	8009572 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800956a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009572:	7fbb      	ldrb	r3, [r7, #30]
 8009574:	2b01      	cmp	r3, #1
 8009576:	d10b      	bne.n	8009590 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	f043 0206 	orr.w	r2, r3, #6
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	f043 0220 	orr.w	r2, r3, #32
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009590:	7bfb      	ldrb	r3, [r7, #15]
}
 8009592:	4618      	mov	r0, r3
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800959c:	b004      	add	sp, #16
 800959e:	4770      	bx	lr

080095a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b087      	sub	sp, #28
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	4613      	mov	r3, r2
 80095ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80095ae:	79fb      	ldrb	r3, [r7, #7]
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	d165      	bne.n	8009680 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	4a41      	ldr	r2, [pc, #260]	@ (80096bc <USB_SetTurnaroundTime+0x11c>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d906      	bls.n	80095ca <USB_SetTurnaroundTime+0x2a>
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	4a40      	ldr	r2, [pc, #256]	@ (80096c0 <USB_SetTurnaroundTime+0x120>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d202      	bcs.n	80095ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80095c4:	230f      	movs	r3, #15
 80095c6:	617b      	str	r3, [r7, #20]
 80095c8:	e062      	b.n	8009690 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	4a3c      	ldr	r2, [pc, #240]	@ (80096c0 <USB_SetTurnaroundTime+0x120>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d306      	bcc.n	80095e0 <USB_SetTurnaroundTime+0x40>
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	4a3b      	ldr	r2, [pc, #236]	@ (80096c4 <USB_SetTurnaroundTime+0x124>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d202      	bcs.n	80095e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80095da:	230e      	movs	r3, #14
 80095dc:	617b      	str	r3, [r7, #20]
 80095de:	e057      	b.n	8009690 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	4a38      	ldr	r2, [pc, #224]	@ (80096c4 <USB_SetTurnaroundTime+0x124>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d306      	bcc.n	80095f6 <USB_SetTurnaroundTime+0x56>
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	4a37      	ldr	r2, [pc, #220]	@ (80096c8 <USB_SetTurnaroundTime+0x128>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d202      	bcs.n	80095f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80095f0:	230d      	movs	r3, #13
 80095f2:	617b      	str	r3, [r7, #20]
 80095f4:	e04c      	b.n	8009690 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	4a33      	ldr	r2, [pc, #204]	@ (80096c8 <USB_SetTurnaroundTime+0x128>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d306      	bcc.n	800960c <USB_SetTurnaroundTime+0x6c>
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	4a32      	ldr	r2, [pc, #200]	@ (80096cc <USB_SetTurnaroundTime+0x12c>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d802      	bhi.n	800960c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009606:	230c      	movs	r3, #12
 8009608:	617b      	str	r3, [r7, #20]
 800960a:	e041      	b.n	8009690 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	4a2f      	ldr	r2, [pc, #188]	@ (80096cc <USB_SetTurnaroundTime+0x12c>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d906      	bls.n	8009622 <USB_SetTurnaroundTime+0x82>
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	4a2e      	ldr	r2, [pc, #184]	@ (80096d0 <USB_SetTurnaroundTime+0x130>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d802      	bhi.n	8009622 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800961c:	230b      	movs	r3, #11
 800961e:	617b      	str	r3, [r7, #20]
 8009620:	e036      	b.n	8009690 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	4a2a      	ldr	r2, [pc, #168]	@ (80096d0 <USB_SetTurnaroundTime+0x130>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d906      	bls.n	8009638 <USB_SetTurnaroundTime+0x98>
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	4a29      	ldr	r2, [pc, #164]	@ (80096d4 <USB_SetTurnaroundTime+0x134>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d802      	bhi.n	8009638 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009632:	230a      	movs	r3, #10
 8009634:	617b      	str	r3, [r7, #20]
 8009636:	e02b      	b.n	8009690 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	4a26      	ldr	r2, [pc, #152]	@ (80096d4 <USB_SetTurnaroundTime+0x134>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d906      	bls.n	800964e <USB_SetTurnaroundTime+0xae>
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	4a25      	ldr	r2, [pc, #148]	@ (80096d8 <USB_SetTurnaroundTime+0x138>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d202      	bcs.n	800964e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009648:	2309      	movs	r3, #9
 800964a:	617b      	str	r3, [r7, #20]
 800964c:	e020      	b.n	8009690 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	4a21      	ldr	r2, [pc, #132]	@ (80096d8 <USB_SetTurnaroundTime+0x138>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d306      	bcc.n	8009664 <USB_SetTurnaroundTime+0xc4>
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	4a20      	ldr	r2, [pc, #128]	@ (80096dc <USB_SetTurnaroundTime+0x13c>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d802      	bhi.n	8009664 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800965e:	2308      	movs	r3, #8
 8009660:	617b      	str	r3, [r7, #20]
 8009662:	e015      	b.n	8009690 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	4a1d      	ldr	r2, [pc, #116]	@ (80096dc <USB_SetTurnaroundTime+0x13c>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d906      	bls.n	800967a <USB_SetTurnaroundTime+0xda>
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	4a1c      	ldr	r2, [pc, #112]	@ (80096e0 <USB_SetTurnaroundTime+0x140>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d202      	bcs.n	800967a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009674:	2307      	movs	r3, #7
 8009676:	617b      	str	r3, [r7, #20]
 8009678:	e00a      	b.n	8009690 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800967a:	2306      	movs	r3, #6
 800967c:	617b      	str	r3, [r7, #20]
 800967e:	e007      	b.n	8009690 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009680:	79fb      	ldrb	r3, [r7, #7]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d102      	bne.n	800968c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009686:	2309      	movs	r3, #9
 8009688:	617b      	str	r3, [r7, #20]
 800968a:	e001      	b.n	8009690 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800968c:	2309      	movs	r3, #9
 800968e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	68da      	ldr	r2, [r3, #12]
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	029b      	lsls	r3, r3, #10
 80096a4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80096a8:	431a      	orrs	r2, r3
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	371c      	adds	r7, #28
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr
 80096bc:	00d8acbf 	.word	0x00d8acbf
 80096c0:	00e4e1c0 	.word	0x00e4e1c0
 80096c4:	00f42400 	.word	0x00f42400
 80096c8:	01067380 	.word	0x01067380
 80096cc:	011a499f 	.word	0x011a499f
 80096d0:	01312cff 	.word	0x01312cff
 80096d4:	014ca43f 	.word	0x014ca43f
 80096d8:	016e3600 	.word	0x016e3600
 80096dc:	01a6ab1f 	.word	0x01a6ab1f
 80096e0:	01e84800 	.word	0x01e84800

080096e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	f043 0201 	orr.w	r2, r3, #1
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80096f8:	2300      	movs	r3, #0
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	370c      	adds	r7, #12
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr

08009706 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009706:	b480      	push	{r7}
 8009708:	b083      	sub	sp, #12
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	689b      	ldr	r3, [r3, #8]
 8009712:	f023 0201 	bic.w	r2, r3, #1
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	370c      	adds	r7, #12
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr

08009728 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	460b      	mov	r3, r1
 8009732:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009734:	2300      	movs	r3, #0
 8009736:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009744:	78fb      	ldrb	r3, [r7, #3]
 8009746:	2b01      	cmp	r3, #1
 8009748:	d115      	bne.n	8009776 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009756:	200a      	movs	r0, #10
 8009758:	f7f8 fb94 	bl	8001e84 <HAL_Delay>
      ms += 10U;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	330a      	adds	r3, #10
 8009760:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f001 f93f 	bl	800a9e6 <USB_GetMode>
 8009768:	4603      	mov	r3, r0
 800976a:	2b01      	cmp	r3, #1
 800976c:	d01e      	beq.n	80097ac <USB_SetCurrentMode+0x84>
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2bc7      	cmp	r3, #199	@ 0xc7
 8009772:	d9f0      	bls.n	8009756 <USB_SetCurrentMode+0x2e>
 8009774:	e01a      	b.n	80097ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009776:	78fb      	ldrb	r3, [r7, #3]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d115      	bne.n	80097a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009788:	200a      	movs	r0, #10
 800978a:	f7f8 fb7b 	bl	8001e84 <HAL_Delay>
      ms += 10U;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	330a      	adds	r3, #10
 8009792:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f001 f926 	bl	800a9e6 <USB_GetMode>
 800979a:	4603      	mov	r3, r0
 800979c:	2b00      	cmp	r3, #0
 800979e:	d005      	beq.n	80097ac <USB_SetCurrentMode+0x84>
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2bc7      	cmp	r3, #199	@ 0xc7
 80097a4:	d9f0      	bls.n	8009788 <USB_SetCurrentMode+0x60>
 80097a6:	e001      	b.n	80097ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	e005      	b.n	80097b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2bc8      	cmp	r3, #200	@ 0xc8
 80097b0:	d101      	bne.n	80097b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80097b2:	2301      	movs	r3, #1
 80097b4:	e000      	b.n	80097b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80097b6:	2300      	movs	r3, #0
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3710      	adds	r7, #16
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80097c0:	b084      	sub	sp, #16
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b086      	sub	sp, #24
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
 80097ca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80097ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80097d2:	2300      	movs	r3, #0
 80097d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80097da:	2300      	movs	r3, #0
 80097dc:	613b      	str	r3, [r7, #16]
 80097de:	e009      	b.n	80097f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	3340      	adds	r3, #64	@ 0x40
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	4413      	add	r3, r2
 80097ea:	2200      	movs	r2, #0
 80097ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	3301      	adds	r3, #1
 80097f2:	613b      	str	r3, [r7, #16]
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	2b0e      	cmp	r3, #14
 80097f8:	d9f2      	bls.n	80097e0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80097fa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d11c      	bne.n	800983c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	68fa      	ldr	r2, [r7, #12]
 800980c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009810:	f043 0302 	orr.w	r3, r3, #2
 8009814:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800981a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009826:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009832:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	639a      	str	r2, [r3, #56]	@ 0x38
 800983a:	e00b      	b.n	8009854 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009840:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800984c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800985a:	461a      	mov	r2, r3
 800985c:	2300      	movs	r3, #0
 800985e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009860:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009864:	2b01      	cmp	r3, #1
 8009866:	d10d      	bne.n	8009884 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009868:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800986c:	2b00      	cmp	r3, #0
 800986e:	d104      	bne.n	800987a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009870:	2100      	movs	r1, #0
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 f968 	bl	8009b48 <USB_SetDevSpeed>
 8009878:	e008      	b.n	800988c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800987a:	2101      	movs	r1, #1
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 f963 	bl	8009b48 <USB_SetDevSpeed>
 8009882:	e003      	b.n	800988c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009884:	2103      	movs	r1, #3
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 f95e 	bl	8009b48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800988c:	2110      	movs	r1, #16
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 f8fa 	bl	8009a88 <USB_FlushTxFifo>
 8009894:	4603      	mov	r3, r0
 8009896:	2b00      	cmp	r3, #0
 8009898:	d001      	beq.n	800989e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 f924 	bl	8009aec <USB_FlushRxFifo>
 80098a4:	4603      	mov	r3, r0
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d001      	beq.n	80098ae <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80098aa:	2301      	movs	r3, #1
 80098ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098b4:	461a      	mov	r2, r3
 80098b6:	2300      	movs	r3, #0
 80098b8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098c0:	461a      	mov	r2, r3
 80098c2:	2300      	movs	r3, #0
 80098c4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098cc:	461a      	mov	r2, r3
 80098ce:	2300      	movs	r3, #0
 80098d0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098d2:	2300      	movs	r3, #0
 80098d4:	613b      	str	r3, [r7, #16]
 80098d6:	e043      	b.n	8009960 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	015a      	lsls	r2, r3, #5
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	4413      	add	r3, r2
 80098e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80098ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80098ee:	d118      	bne.n	8009922 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d10a      	bne.n	800990c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	015a      	lsls	r2, r3, #5
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	4413      	add	r3, r2
 80098fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009902:	461a      	mov	r2, r3
 8009904:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009908:	6013      	str	r3, [r2, #0]
 800990a:	e013      	b.n	8009934 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	015a      	lsls	r2, r3, #5
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	4413      	add	r3, r2
 8009914:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009918:	461a      	mov	r2, r3
 800991a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800991e:	6013      	str	r3, [r2, #0]
 8009920:	e008      	b.n	8009934 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	015a      	lsls	r2, r3, #5
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	4413      	add	r3, r2
 800992a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800992e:	461a      	mov	r2, r3
 8009930:	2300      	movs	r3, #0
 8009932:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	015a      	lsls	r2, r3, #5
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	4413      	add	r3, r2
 800993c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009940:	461a      	mov	r2, r3
 8009942:	2300      	movs	r3, #0
 8009944:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	015a      	lsls	r2, r3, #5
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	4413      	add	r3, r2
 800994e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009952:	461a      	mov	r2, r3
 8009954:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009958:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	3301      	adds	r3, #1
 800995e:	613b      	str	r3, [r7, #16]
 8009960:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009964:	461a      	mov	r2, r3
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	4293      	cmp	r3, r2
 800996a:	d3b5      	bcc.n	80098d8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800996c:	2300      	movs	r3, #0
 800996e:	613b      	str	r3, [r7, #16]
 8009970:	e043      	b.n	80099fa <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	015a      	lsls	r2, r3, #5
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	4413      	add	r3, r2
 800997a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009984:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009988:	d118      	bne.n	80099bc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d10a      	bne.n	80099a6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	015a      	lsls	r2, r3, #5
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	4413      	add	r3, r2
 8009998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800999c:	461a      	mov	r2, r3
 800999e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80099a2:	6013      	str	r3, [r2, #0]
 80099a4:	e013      	b.n	80099ce <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	015a      	lsls	r2, r3, #5
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	4413      	add	r3, r2
 80099ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099b2:	461a      	mov	r2, r3
 80099b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80099b8:	6013      	str	r3, [r2, #0]
 80099ba:	e008      	b.n	80099ce <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	015a      	lsls	r2, r3, #5
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	4413      	add	r3, r2
 80099c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099c8:	461a      	mov	r2, r3
 80099ca:	2300      	movs	r3, #0
 80099cc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	015a      	lsls	r2, r3, #5
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	4413      	add	r3, r2
 80099d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099da:	461a      	mov	r2, r3
 80099dc:	2300      	movs	r3, #0
 80099de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	015a      	lsls	r2, r3, #5
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	4413      	add	r3, r2
 80099e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099ec:	461a      	mov	r2, r3
 80099ee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80099f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	3301      	adds	r3, #1
 80099f8:	613b      	str	r3, [r7, #16]
 80099fa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80099fe:	461a      	mov	r2, r3
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d3b5      	bcc.n	8009972 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	68fa      	ldr	r2, [r7, #12]
 8009a10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a18:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009a26:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009a28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d105      	bne.n	8009a3c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	699b      	ldr	r3, [r3, #24]
 8009a34:	f043 0210 	orr.w	r2, r3, #16
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	699a      	ldr	r2, [r3, #24]
 8009a40:	4b10      	ldr	r3, [pc, #64]	@ (8009a84 <USB_DevInit+0x2c4>)
 8009a42:	4313      	orrs	r3, r2
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009a48:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d005      	beq.n	8009a5c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	699b      	ldr	r3, [r3, #24]
 8009a54:	f043 0208 	orr.w	r2, r3, #8
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009a5c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d107      	bne.n	8009a74 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	699b      	ldr	r3, [r3, #24]
 8009a68:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009a6c:	f043 0304 	orr.w	r3, r3, #4
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3718      	adds	r7, #24
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a80:	b004      	add	sp, #16
 8009a82:	4770      	bx	lr
 8009a84:	803c3800 	.word	0x803c3800

08009a88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b085      	sub	sp, #20
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009a92:	2300      	movs	r3, #0
 8009a94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	3301      	adds	r3, #1
 8009a9a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009aa2:	d901      	bls.n	8009aa8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009aa4:	2303      	movs	r3, #3
 8009aa6:	e01b      	b.n	8009ae0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	691b      	ldr	r3, [r3, #16]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	daf2      	bge.n	8009a96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	019b      	lsls	r3, r3, #6
 8009ab8:	f043 0220 	orr.w	r2, r3, #32
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009acc:	d901      	bls.n	8009ad2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009ace:	2303      	movs	r3, #3
 8009ad0:	e006      	b.n	8009ae0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	691b      	ldr	r3, [r3, #16]
 8009ad6:	f003 0320 	and.w	r3, r3, #32
 8009ada:	2b20      	cmp	r3, #32
 8009adc:	d0f0      	beq.n	8009ac0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009ade:	2300      	movs	r3, #0
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3714      	adds	r7, #20
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b085      	sub	sp, #20
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009af4:	2300      	movs	r3, #0
 8009af6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	3301      	adds	r3, #1
 8009afc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b04:	d901      	bls.n	8009b0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009b06:	2303      	movs	r3, #3
 8009b08:	e018      	b.n	8009b3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	691b      	ldr	r3, [r3, #16]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	daf2      	bge.n	8009af8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009b12:	2300      	movs	r3, #0
 8009b14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2210      	movs	r2, #16
 8009b1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	3301      	adds	r3, #1
 8009b20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b28:	d901      	bls.n	8009b2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009b2a:	2303      	movs	r3, #3
 8009b2c:	e006      	b.n	8009b3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	691b      	ldr	r3, [r3, #16]
 8009b32:	f003 0310 	and.w	r3, r3, #16
 8009b36:	2b10      	cmp	r3, #16
 8009b38:	d0f0      	beq.n	8009b1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009b3a:	2300      	movs	r3, #0
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3714      	adds	r7, #20
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr

08009b48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b085      	sub	sp, #20
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	460b      	mov	r3, r1
 8009b52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	78fb      	ldrb	r3, [r7, #3]
 8009b62:	68f9      	ldr	r1, [r7, #12]
 8009b64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009b6c:	2300      	movs	r3, #0
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3714      	adds	r7, #20
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr

08009b7a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009b7a:	b480      	push	{r7}
 8009b7c:	b087      	sub	sp, #28
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b8c:	689b      	ldr	r3, [r3, #8]
 8009b8e:	f003 0306 	and.w	r3, r3, #6
 8009b92:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d102      	bne.n	8009ba0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	75fb      	strb	r3, [r7, #23]
 8009b9e:	e00a      	b.n	8009bb6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2b02      	cmp	r3, #2
 8009ba4:	d002      	beq.n	8009bac <USB_GetDevSpeed+0x32>
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2b06      	cmp	r3, #6
 8009baa:	d102      	bne.n	8009bb2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009bac:	2302      	movs	r3, #2
 8009bae:	75fb      	strb	r3, [r7, #23]
 8009bb0:	e001      	b.n	8009bb6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009bb2:	230f      	movs	r3, #15
 8009bb4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	371c      	adds	r7, #28
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b085      	sub	sp, #20
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	785b      	ldrb	r3, [r3, #1]
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d13a      	bne.n	8009c56 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009be6:	69da      	ldr	r2, [r3, #28]
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	f003 030f 	and.w	r3, r3, #15
 8009bf0:	2101      	movs	r1, #1
 8009bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	68f9      	ldr	r1, [r7, #12]
 8009bfa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	015a      	lsls	r2, r3, #5
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	4413      	add	r3, r2
 8009c0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d155      	bne.n	8009cc4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	015a      	lsls	r2, r3, #5
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	4413      	add	r3, r2
 8009c20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	791b      	ldrb	r3, [r3, #4]
 8009c32:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c34:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	059b      	lsls	r3, r3, #22
 8009c3a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	68ba      	ldr	r2, [r7, #8]
 8009c40:	0151      	lsls	r1, r2, #5
 8009c42:	68fa      	ldr	r2, [r7, #12]
 8009c44:	440a      	add	r2, r1
 8009c46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c52:	6013      	str	r3, [r2, #0]
 8009c54:	e036      	b.n	8009cc4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c5c:	69da      	ldr	r2, [r3, #28]
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	f003 030f 	and.w	r3, r3, #15
 8009c66:	2101      	movs	r1, #1
 8009c68:	fa01 f303 	lsl.w	r3, r1, r3
 8009c6c:	041b      	lsls	r3, r3, #16
 8009c6e:	68f9      	ldr	r1, [r7, #12]
 8009c70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c74:	4313      	orrs	r3, r2
 8009c76:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	015a      	lsls	r2, r3, #5
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	4413      	add	r3, r2
 8009c80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d11a      	bne.n	8009cc4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	015a      	lsls	r2, r3, #5
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	4413      	add	r3, r2
 8009c96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	791b      	ldrb	r3, [r3, #4]
 8009ca8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009caa:	430b      	orrs	r3, r1
 8009cac:	4313      	orrs	r3, r2
 8009cae:	68ba      	ldr	r2, [r7, #8]
 8009cb0:	0151      	lsls	r1, r2, #5
 8009cb2:	68fa      	ldr	r2, [r7, #12]
 8009cb4:	440a      	add	r2, r1
 8009cb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009cba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009cbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009cc2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3714      	adds	r7, #20
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr
	...

08009cd4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b085      	sub	sp, #20
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	785b      	ldrb	r3, [r3, #1]
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d161      	bne.n	8009db4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	015a      	lsls	r2, r3, #5
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	4413      	add	r3, r2
 8009cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d06:	d11f      	bne.n	8009d48 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	015a      	lsls	r2, r3, #5
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	4413      	add	r3, r2
 8009d10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	68ba      	ldr	r2, [r7, #8]
 8009d18:	0151      	lsls	r1, r2, #5
 8009d1a:	68fa      	ldr	r2, [r7, #12]
 8009d1c:	440a      	add	r2, r1
 8009d1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d22:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009d26:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	015a      	lsls	r2, r3, #5
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	4413      	add	r3, r2
 8009d30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	68ba      	ldr	r2, [r7, #8]
 8009d38:	0151      	lsls	r1, r2, #5
 8009d3a:	68fa      	ldr	r2, [r7, #12]
 8009d3c:	440a      	add	r2, r1
 8009d3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d42:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009d46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	f003 030f 	and.w	r3, r3, #15
 8009d58:	2101      	movs	r1, #1
 8009d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	43db      	mvns	r3, r3
 8009d62:	68f9      	ldr	r1, [r7, #12]
 8009d64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d68:	4013      	ands	r3, r2
 8009d6a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d72:	69da      	ldr	r2, [r3, #28]
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	f003 030f 	and.w	r3, r3, #15
 8009d7c:	2101      	movs	r1, #1
 8009d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	43db      	mvns	r3, r3
 8009d86:	68f9      	ldr	r1, [r7, #12]
 8009d88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d8c:	4013      	ands	r3, r2
 8009d8e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	015a      	lsls	r2, r3, #5
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	4413      	add	r3, r2
 8009d98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	0159      	lsls	r1, r3, #5
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	440b      	add	r3, r1
 8009da6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009daa:	4619      	mov	r1, r3
 8009dac:	4b35      	ldr	r3, [pc, #212]	@ (8009e84 <USB_DeactivateEndpoint+0x1b0>)
 8009dae:	4013      	ands	r3, r2
 8009db0:	600b      	str	r3, [r1, #0]
 8009db2:	e060      	b.n	8009e76 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	015a      	lsls	r2, r3, #5
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	4413      	add	r3, r2
 8009dbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009dc6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009dca:	d11f      	bne.n	8009e0c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	015a      	lsls	r2, r3, #5
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	4413      	add	r3, r2
 8009dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	68ba      	ldr	r2, [r7, #8]
 8009ddc:	0151      	lsls	r1, r2, #5
 8009dde:	68fa      	ldr	r2, [r7, #12]
 8009de0:	440a      	add	r2, r1
 8009de2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009de6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009dea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	015a      	lsls	r2, r3, #5
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	4413      	add	r3, r2
 8009df4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	68ba      	ldr	r2, [r7, #8]
 8009dfc:	0151      	lsls	r1, r2, #5
 8009dfe:	68fa      	ldr	r2, [r7, #12]
 8009e00:	440a      	add	r2, r1
 8009e02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e06:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009e0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	f003 030f 	and.w	r3, r3, #15
 8009e1c:	2101      	movs	r1, #1
 8009e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e22:	041b      	lsls	r3, r3, #16
 8009e24:	43db      	mvns	r3, r3
 8009e26:	68f9      	ldr	r1, [r7, #12]
 8009e28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e2c:	4013      	ands	r3, r2
 8009e2e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e36:	69da      	ldr	r2, [r3, #28]
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	f003 030f 	and.w	r3, r3, #15
 8009e40:	2101      	movs	r1, #1
 8009e42:	fa01 f303 	lsl.w	r3, r1, r3
 8009e46:	041b      	lsls	r3, r3, #16
 8009e48:	43db      	mvns	r3, r3
 8009e4a:	68f9      	ldr	r1, [r7, #12]
 8009e4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e50:	4013      	ands	r3, r2
 8009e52:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	015a      	lsls	r2, r3, #5
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	0159      	lsls	r1, r3, #5
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	440b      	add	r3, r1
 8009e6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e6e:	4619      	mov	r1, r3
 8009e70:	4b05      	ldr	r3, [pc, #20]	@ (8009e88 <USB_DeactivateEndpoint+0x1b4>)
 8009e72:	4013      	ands	r3, r2
 8009e74:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009e76:	2300      	movs	r3, #0
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3714      	adds	r7, #20
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr
 8009e84:	ec337800 	.word	0xec337800
 8009e88:	eff37800 	.word	0xeff37800

08009e8c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b08a      	sub	sp, #40	@ 0x28
 8009e90:	af02      	add	r7, sp, #8
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	60b9      	str	r1, [r7, #8]
 8009e96:	4613      	mov	r3, r2
 8009e98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	785b      	ldrb	r3, [r3, #1]
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	f040 817f 	bne.w	800a1ac <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	691b      	ldr	r3, [r3, #16]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d132      	bne.n	8009f1c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	015a      	lsls	r2, r3, #5
 8009eba:	69fb      	ldr	r3, [r7, #28]
 8009ebc:	4413      	add	r3, r2
 8009ebe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ec2:	691b      	ldr	r3, [r3, #16]
 8009ec4:	69ba      	ldr	r2, [r7, #24]
 8009ec6:	0151      	lsls	r1, r2, #5
 8009ec8:	69fa      	ldr	r2, [r7, #28]
 8009eca:	440a      	add	r2, r1
 8009ecc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ed0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009ed4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009ed8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	015a      	lsls	r2, r3, #5
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ee6:	691b      	ldr	r3, [r3, #16]
 8009ee8:	69ba      	ldr	r2, [r7, #24]
 8009eea:	0151      	lsls	r1, r2, #5
 8009eec:	69fa      	ldr	r2, [r7, #28]
 8009eee:	440a      	add	r2, r1
 8009ef0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ef4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009ef8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	015a      	lsls	r2, r3, #5
 8009efe:	69fb      	ldr	r3, [r7, #28]
 8009f00:	4413      	add	r3, r2
 8009f02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f06:	691b      	ldr	r3, [r3, #16]
 8009f08:	69ba      	ldr	r2, [r7, #24]
 8009f0a:	0151      	lsls	r1, r2, #5
 8009f0c:	69fa      	ldr	r2, [r7, #28]
 8009f0e:	440a      	add	r2, r1
 8009f10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f14:	0cdb      	lsrs	r3, r3, #19
 8009f16:	04db      	lsls	r3, r3, #19
 8009f18:	6113      	str	r3, [r2, #16]
 8009f1a:	e097      	b.n	800a04c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009f1c:	69bb      	ldr	r3, [r7, #24]
 8009f1e:	015a      	lsls	r2, r3, #5
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	4413      	add	r3, r2
 8009f24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f28:	691b      	ldr	r3, [r3, #16]
 8009f2a:	69ba      	ldr	r2, [r7, #24]
 8009f2c:	0151      	lsls	r1, r2, #5
 8009f2e:	69fa      	ldr	r2, [r7, #28]
 8009f30:	440a      	add	r2, r1
 8009f32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f36:	0cdb      	lsrs	r3, r3, #19
 8009f38:	04db      	lsls	r3, r3, #19
 8009f3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	015a      	lsls	r2, r3, #5
 8009f40:	69fb      	ldr	r3, [r7, #28]
 8009f42:	4413      	add	r3, r2
 8009f44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f48:	691b      	ldr	r3, [r3, #16]
 8009f4a:	69ba      	ldr	r2, [r7, #24]
 8009f4c:	0151      	lsls	r1, r2, #5
 8009f4e:	69fa      	ldr	r2, [r7, #28]
 8009f50:	440a      	add	r2, r1
 8009f52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f56:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009f5a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009f5e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009f60:	69bb      	ldr	r3, [r7, #24]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d11a      	bne.n	8009f9c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	691a      	ldr	r2, [r3, #16]
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d903      	bls.n	8009f7a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	689a      	ldr	r2, [r3, #8]
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009f7a:	69bb      	ldr	r3, [r7, #24]
 8009f7c:	015a      	lsls	r2, r3, #5
 8009f7e:	69fb      	ldr	r3, [r7, #28]
 8009f80:	4413      	add	r3, r2
 8009f82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f86:	691b      	ldr	r3, [r3, #16]
 8009f88:	69ba      	ldr	r2, [r7, #24]
 8009f8a:	0151      	lsls	r1, r2, #5
 8009f8c:	69fa      	ldr	r2, [r7, #28]
 8009f8e:	440a      	add	r2, r1
 8009f90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f94:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009f98:	6113      	str	r3, [r2, #16]
 8009f9a:	e044      	b.n	800a026 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	691a      	ldr	r2, [r3, #16]
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	4413      	add	r3, r2
 8009fa6:	1e5a      	subs	r2, r3, #1
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fb0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8009fb2:	69bb      	ldr	r3, [r7, #24]
 8009fb4:	015a      	lsls	r2, r3, #5
 8009fb6:	69fb      	ldr	r3, [r7, #28]
 8009fb8:	4413      	add	r3, r2
 8009fba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fbe:	691a      	ldr	r2, [r3, #16]
 8009fc0:	8afb      	ldrh	r3, [r7, #22]
 8009fc2:	04d9      	lsls	r1, r3, #19
 8009fc4:	4ba4      	ldr	r3, [pc, #656]	@ (800a258 <USB_EPStartXfer+0x3cc>)
 8009fc6:	400b      	ands	r3, r1
 8009fc8:	69b9      	ldr	r1, [r7, #24]
 8009fca:	0148      	lsls	r0, r1, #5
 8009fcc:	69f9      	ldr	r1, [r7, #28]
 8009fce:	4401      	add	r1, r0
 8009fd0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	791b      	ldrb	r3, [r3, #4]
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d122      	bne.n	800a026 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009fe0:	69bb      	ldr	r3, [r7, #24]
 8009fe2:	015a      	lsls	r2, r3, #5
 8009fe4:	69fb      	ldr	r3, [r7, #28]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fec:	691b      	ldr	r3, [r3, #16]
 8009fee:	69ba      	ldr	r2, [r7, #24]
 8009ff0:	0151      	lsls	r1, r2, #5
 8009ff2:	69fa      	ldr	r2, [r7, #28]
 8009ff4:	440a      	add	r2, r1
 8009ff6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ffa:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009ffe:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800a000:	69bb      	ldr	r3, [r7, #24]
 800a002:	015a      	lsls	r2, r3, #5
 800a004:	69fb      	ldr	r3, [r7, #28]
 800a006:	4413      	add	r3, r2
 800a008:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a00c:	691a      	ldr	r2, [r3, #16]
 800a00e:	8afb      	ldrh	r3, [r7, #22]
 800a010:	075b      	lsls	r3, r3, #29
 800a012:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a016:	69b9      	ldr	r1, [r7, #24]
 800a018:	0148      	lsls	r0, r1, #5
 800a01a:	69f9      	ldr	r1, [r7, #28]
 800a01c:	4401      	add	r1, r0
 800a01e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a022:	4313      	orrs	r3, r2
 800a024:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a026:	69bb      	ldr	r3, [r7, #24]
 800a028:	015a      	lsls	r2, r3, #5
 800a02a:	69fb      	ldr	r3, [r7, #28]
 800a02c:	4413      	add	r3, r2
 800a02e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a032:	691a      	ldr	r2, [r3, #16]
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	691b      	ldr	r3, [r3, #16]
 800a038:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a03c:	69b9      	ldr	r1, [r7, #24]
 800a03e:	0148      	lsls	r0, r1, #5
 800a040:	69f9      	ldr	r1, [r7, #28]
 800a042:	4401      	add	r1, r0
 800a044:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a048:	4313      	orrs	r3, r2
 800a04a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a04c:	79fb      	ldrb	r3, [r7, #7]
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d14b      	bne.n	800a0ea <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	69db      	ldr	r3, [r3, #28]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d009      	beq.n	800a06e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a05a:	69bb      	ldr	r3, [r7, #24]
 800a05c:	015a      	lsls	r2, r3, #5
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	4413      	add	r3, r2
 800a062:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a066:	461a      	mov	r2, r3
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	69db      	ldr	r3, [r3, #28]
 800a06c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	791b      	ldrb	r3, [r3, #4]
 800a072:	2b01      	cmp	r3, #1
 800a074:	d128      	bne.n	800a0c8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a076:	69fb      	ldr	r3, [r7, #28]
 800a078:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a07c:	689b      	ldr	r3, [r3, #8]
 800a07e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a082:	2b00      	cmp	r3, #0
 800a084:	d110      	bne.n	800a0a8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	015a      	lsls	r2, r3, #5
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	4413      	add	r3, r2
 800a08e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	69ba      	ldr	r2, [r7, #24]
 800a096:	0151      	lsls	r1, r2, #5
 800a098:	69fa      	ldr	r2, [r7, #28]
 800a09a:	440a      	add	r2, r1
 800a09c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a0a4:	6013      	str	r3, [r2, #0]
 800a0a6:	e00f      	b.n	800a0c8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	015a      	lsls	r2, r3, #5
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	4413      	add	r3, r2
 800a0b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	69ba      	ldr	r2, [r7, #24]
 800a0b8:	0151      	lsls	r1, r2, #5
 800a0ba:	69fa      	ldr	r2, [r7, #28]
 800a0bc:	440a      	add	r2, r1
 800a0be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a0c6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a0c8:	69bb      	ldr	r3, [r7, #24]
 800a0ca:	015a      	lsls	r2, r3, #5
 800a0cc:	69fb      	ldr	r3, [r7, #28]
 800a0ce:	4413      	add	r3, r2
 800a0d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	69ba      	ldr	r2, [r7, #24]
 800a0d8:	0151      	lsls	r1, r2, #5
 800a0da:	69fa      	ldr	r2, [r7, #28]
 800a0dc:	440a      	add	r2, r1
 800a0de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0e2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a0e6:	6013      	str	r3, [r2, #0]
 800a0e8:	e166      	b.n	800a3b8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	015a      	lsls	r2, r3, #5
 800a0ee:	69fb      	ldr	r3, [r7, #28]
 800a0f0:	4413      	add	r3, r2
 800a0f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	69ba      	ldr	r2, [r7, #24]
 800a0fa:	0151      	lsls	r1, r2, #5
 800a0fc:	69fa      	ldr	r2, [r7, #28]
 800a0fe:	440a      	add	r2, r1
 800a100:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a104:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a108:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	791b      	ldrb	r3, [r3, #4]
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d015      	beq.n	800a13e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	691b      	ldr	r3, [r3, #16]
 800a116:	2b00      	cmp	r3, #0
 800a118:	f000 814e 	beq.w	800a3b8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a122:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	f003 030f 	and.w	r3, r3, #15
 800a12c:	2101      	movs	r1, #1
 800a12e:	fa01 f303 	lsl.w	r3, r1, r3
 800a132:	69f9      	ldr	r1, [r7, #28]
 800a134:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a138:	4313      	orrs	r3, r2
 800a13a:	634b      	str	r3, [r1, #52]	@ 0x34
 800a13c:	e13c      	b.n	800a3b8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a13e:	69fb      	ldr	r3, [r7, #28]
 800a140:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d110      	bne.n	800a170 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a14e:	69bb      	ldr	r3, [r7, #24]
 800a150:	015a      	lsls	r2, r3, #5
 800a152:	69fb      	ldr	r3, [r7, #28]
 800a154:	4413      	add	r3, r2
 800a156:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	69ba      	ldr	r2, [r7, #24]
 800a15e:	0151      	lsls	r1, r2, #5
 800a160:	69fa      	ldr	r2, [r7, #28]
 800a162:	440a      	add	r2, r1
 800a164:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a168:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a16c:	6013      	str	r3, [r2, #0]
 800a16e:	e00f      	b.n	800a190 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	015a      	lsls	r2, r3, #5
 800a174:	69fb      	ldr	r3, [r7, #28]
 800a176:	4413      	add	r3, r2
 800a178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	69ba      	ldr	r2, [r7, #24]
 800a180:	0151      	lsls	r1, r2, #5
 800a182:	69fa      	ldr	r2, [r7, #28]
 800a184:	440a      	add	r2, r1
 800a186:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a18a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a18e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	68d9      	ldr	r1, [r3, #12]
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	781a      	ldrb	r2, [r3, #0]
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	691b      	ldr	r3, [r3, #16]
 800a19c:	b298      	uxth	r0, r3
 800a19e:	79fb      	ldrb	r3, [r7, #7]
 800a1a0:	9300      	str	r3, [sp, #0]
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	f000 f9b9 	bl	800a51c <USB_WritePacket>
 800a1aa:	e105      	b.n	800a3b8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a1ac:	69bb      	ldr	r3, [r7, #24]
 800a1ae:	015a      	lsls	r2, r3, #5
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	4413      	add	r3, r2
 800a1b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1b8:	691b      	ldr	r3, [r3, #16]
 800a1ba:	69ba      	ldr	r2, [r7, #24]
 800a1bc:	0151      	lsls	r1, r2, #5
 800a1be:	69fa      	ldr	r2, [r7, #28]
 800a1c0:	440a      	add	r2, r1
 800a1c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1c6:	0cdb      	lsrs	r3, r3, #19
 800a1c8:	04db      	lsls	r3, r3, #19
 800a1ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a1cc:	69bb      	ldr	r3, [r7, #24]
 800a1ce:	015a      	lsls	r2, r3, #5
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	4413      	add	r3, r2
 800a1d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1d8:	691b      	ldr	r3, [r3, #16]
 800a1da:	69ba      	ldr	r2, [r7, #24]
 800a1dc:	0151      	lsls	r1, r2, #5
 800a1de:	69fa      	ldr	r2, [r7, #28]
 800a1e0:	440a      	add	r2, r1
 800a1e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1e6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a1ea:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a1ee:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d132      	bne.n	800a25c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	691b      	ldr	r3, [r3, #16]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d003      	beq.n	800a206 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	689a      	ldr	r2, [r3, #8]
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	689a      	ldr	r2, [r3, #8]
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	015a      	lsls	r2, r3, #5
 800a212:	69fb      	ldr	r3, [r7, #28]
 800a214:	4413      	add	r3, r2
 800a216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a21a:	691a      	ldr	r2, [r3, #16]
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	6a1b      	ldr	r3, [r3, #32]
 800a220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a224:	69b9      	ldr	r1, [r7, #24]
 800a226:	0148      	lsls	r0, r1, #5
 800a228:	69f9      	ldr	r1, [r7, #28]
 800a22a:	4401      	add	r1, r0
 800a22c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a230:	4313      	orrs	r3, r2
 800a232:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a234:	69bb      	ldr	r3, [r7, #24]
 800a236:	015a      	lsls	r2, r3, #5
 800a238:	69fb      	ldr	r3, [r7, #28]
 800a23a:	4413      	add	r3, r2
 800a23c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a240:	691b      	ldr	r3, [r3, #16]
 800a242:	69ba      	ldr	r2, [r7, #24]
 800a244:	0151      	lsls	r1, r2, #5
 800a246:	69fa      	ldr	r2, [r7, #28]
 800a248:	440a      	add	r2, r1
 800a24a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a24e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a252:	6113      	str	r3, [r2, #16]
 800a254:	e062      	b.n	800a31c <USB_EPStartXfer+0x490>
 800a256:	bf00      	nop
 800a258:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	691b      	ldr	r3, [r3, #16]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d123      	bne.n	800a2ac <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a264:	69bb      	ldr	r3, [r7, #24]
 800a266:	015a      	lsls	r2, r3, #5
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	4413      	add	r3, r2
 800a26c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a270:	691a      	ldr	r2, [r3, #16]
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a27a:	69b9      	ldr	r1, [r7, #24]
 800a27c:	0148      	lsls	r0, r1, #5
 800a27e:	69f9      	ldr	r1, [r7, #28]
 800a280:	4401      	add	r1, r0
 800a282:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a286:	4313      	orrs	r3, r2
 800a288:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a28a:	69bb      	ldr	r3, [r7, #24]
 800a28c:	015a      	lsls	r2, r3, #5
 800a28e:	69fb      	ldr	r3, [r7, #28]
 800a290:	4413      	add	r3, r2
 800a292:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a296:	691b      	ldr	r3, [r3, #16]
 800a298:	69ba      	ldr	r2, [r7, #24]
 800a29a:	0151      	lsls	r1, r2, #5
 800a29c:	69fa      	ldr	r2, [r7, #28]
 800a29e:	440a      	add	r2, r1
 800a2a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a2a8:	6113      	str	r3, [r2, #16]
 800a2aa:	e037      	b.n	800a31c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	691a      	ldr	r2, [r3, #16]
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	1e5a      	subs	r2, r3, #1
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2c0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	8afa      	ldrh	r2, [r7, #22]
 800a2c8:	fb03 f202 	mul.w	r2, r3, r2
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	015a      	lsls	r2, r3, #5
 800a2d4:	69fb      	ldr	r3, [r7, #28]
 800a2d6:	4413      	add	r3, r2
 800a2d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2dc:	691a      	ldr	r2, [r3, #16]
 800a2de:	8afb      	ldrh	r3, [r7, #22]
 800a2e0:	04d9      	lsls	r1, r3, #19
 800a2e2:	4b38      	ldr	r3, [pc, #224]	@ (800a3c4 <USB_EPStartXfer+0x538>)
 800a2e4:	400b      	ands	r3, r1
 800a2e6:	69b9      	ldr	r1, [r7, #24]
 800a2e8:	0148      	lsls	r0, r1, #5
 800a2ea:	69f9      	ldr	r1, [r7, #28]
 800a2ec:	4401      	add	r1, r0
 800a2ee:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	015a      	lsls	r2, r3, #5
 800a2fa:	69fb      	ldr	r3, [r7, #28]
 800a2fc:	4413      	add	r3, r2
 800a2fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a302:	691a      	ldr	r2, [r3, #16]
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	6a1b      	ldr	r3, [r3, #32]
 800a308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a30c:	69b9      	ldr	r1, [r7, #24]
 800a30e:	0148      	lsls	r0, r1, #5
 800a310:	69f9      	ldr	r1, [r7, #28]
 800a312:	4401      	add	r1, r0
 800a314:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a318:	4313      	orrs	r3, r2
 800a31a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a31c:	79fb      	ldrb	r3, [r7, #7]
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d10d      	bne.n	800a33e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d009      	beq.n	800a33e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	68d9      	ldr	r1, [r3, #12]
 800a32e:	69bb      	ldr	r3, [r7, #24]
 800a330:	015a      	lsls	r2, r3, #5
 800a332:	69fb      	ldr	r3, [r7, #28]
 800a334:	4413      	add	r3, r2
 800a336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a33a:	460a      	mov	r2, r1
 800a33c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	791b      	ldrb	r3, [r3, #4]
 800a342:	2b01      	cmp	r3, #1
 800a344:	d128      	bne.n	800a398 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a346:	69fb      	ldr	r3, [r7, #28]
 800a348:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a34c:	689b      	ldr	r3, [r3, #8]
 800a34e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a352:	2b00      	cmp	r3, #0
 800a354:	d110      	bne.n	800a378 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	015a      	lsls	r2, r3, #5
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	4413      	add	r3, r2
 800a35e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	69ba      	ldr	r2, [r7, #24]
 800a366:	0151      	lsls	r1, r2, #5
 800a368:	69fa      	ldr	r2, [r7, #28]
 800a36a:	440a      	add	r2, r1
 800a36c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a370:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a374:	6013      	str	r3, [r2, #0]
 800a376:	e00f      	b.n	800a398 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a378:	69bb      	ldr	r3, [r7, #24]
 800a37a:	015a      	lsls	r2, r3, #5
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	4413      	add	r3, r2
 800a380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	69ba      	ldr	r2, [r7, #24]
 800a388:	0151      	lsls	r1, r2, #5
 800a38a:	69fa      	ldr	r2, [r7, #28]
 800a38c:	440a      	add	r2, r1
 800a38e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a392:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a396:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a398:	69bb      	ldr	r3, [r7, #24]
 800a39a:	015a      	lsls	r2, r3, #5
 800a39c:	69fb      	ldr	r3, [r7, #28]
 800a39e:	4413      	add	r3, r2
 800a3a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	69ba      	ldr	r2, [r7, #24]
 800a3a8:	0151      	lsls	r1, r2, #5
 800a3aa:	69fa      	ldr	r2, [r7, #28]
 800a3ac:	440a      	add	r2, r1
 800a3ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3b2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a3b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a3b8:	2300      	movs	r3, #0
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3720      	adds	r7, #32
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	1ff80000 	.word	0x1ff80000

0800a3c8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b087      	sub	sp, #28
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	785b      	ldrb	r3, [r3, #1]
 800a3e2:	2b01      	cmp	r3, #1
 800a3e4:	d14a      	bne.n	800a47c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	015a      	lsls	r2, r3, #5
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a3fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a3fe:	f040 8086 	bne.w	800a50e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	015a      	lsls	r2, r3, #5
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	4413      	add	r3, r2
 800a40c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	683a      	ldr	r2, [r7, #0]
 800a414:	7812      	ldrb	r2, [r2, #0]
 800a416:	0151      	lsls	r1, r2, #5
 800a418:	693a      	ldr	r2, [r7, #16]
 800a41a:	440a      	add	r2, r1
 800a41c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a420:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a424:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	015a      	lsls	r2, r3, #5
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	4413      	add	r3, r2
 800a430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	683a      	ldr	r2, [r7, #0]
 800a438:	7812      	ldrb	r2, [r2, #0]
 800a43a:	0151      	lsls	r1, r2, #5
 800a43c:	693a      	ldr	r2, [r7, #16]
 800a43e:	440a      	add	r2, r1
 800a440:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a444:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a448:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	3301      	adds	r3, #1
 800a44e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a456:	4293      	cmp	r3, r2
 800a458:	d902      	bls.n	800a460 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a45a:	2301      	movs	r3, #1
 800a45c:	75fb      	strb	r3, [r7, #23]
          break;
 800a45e:	e056      	b.n	800a50e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	015a      	lsls	r2, r3, #5
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	4413      	add	r3, r2
 800a46a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a474:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a478:	d0e7      	beq.n	800a44a <USB_EPStopXfer+0x82>
 800a47a:	e048      	b.n	800a50e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	015a      	lsls	r2, r3, #5
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	4413      	add	r3, r2
 800a486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a490:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a494:	d13b      	bne.n	800a50e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	015a      	lsls	r2, r3, #5
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	4413      	add	r3, r2
 800a4a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	683a      	ldr	r2, [r7, #0]
 800a4a8:	7812      	ldrb	r2, [r2, #0]
 800a4aa:	0151      	lsls	r1, r2, #5
 800a4ac:	693a      	ldr	r2, [r7, #16]
 800a4ae:	440a      	add	r2, r1
 800a4b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4b4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a4b8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	015a      	lsls	r2, r3, #5
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	4413      	add	r3, r2
 800a4c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	683a      	ldr	r2, [r7, #0]
 800a4cc:	7812      	ldrb	r2, [r2, #0]
 800a4ce:	0151      	lsls	r1, r2, #5
 800a4d0:	693a      	ldr	r2, [r7, #16]
 800a4d2:	440a      	add	r2, r1
 800a4d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a4dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d902      	bls.n	800a4f4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	75fb      	strb	r3, [r7, #23]
          break;
 800a4f2:	e00c      	b.n	800a50e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	781b      	ldrb	r3, [r3, #0]
 800a4f8:	015a      	lsls	r2, r3, #5
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a508:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a50c:	d0e7      	beq.n	800a4de <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a50e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a510:	4618      	mov	r0, r3
 800a512:	371c      	adds	r7, #28
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr

0800a51c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b089      	sub	sp, #36	@ 0x24
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	60b9      	str	r1, [r7, #8]
 800a526:	4611      	mov	r1, r2
 800a528:	461a      	mov	r2, r3
 800a52a:	460b      	mov	r3, r1
 800a52c:	71fb      	strb	r3, [r7, #7]
 800a52e:	4613      	mov	r3, r2
 800a530:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a53a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d123      	bne.n	800a58a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a542:	88bb      	ldrh	r3, [r7, #4]
 800a544:	3303      	adds	r3, #3
 800a546:	089b      	lsrs	r3, r3, #2
 800a548:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a54a:	2300      	movs	r3, #0
 800a54c:	61bb      	str	r3, [r7, #24]
 800a54e:	e018      	b.n	800a582 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a550:	79fb      	ldrb	r3, [r7, #7]
 800a552:	031a      	lsls	r2, r3, #12
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	4413      	add	r3, r2
 800a558:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a55c:	461a      	mov	r2, r3
 800a55e:	69fb      	ldr	r3, [r7, #28]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	3301      	adds	r3, #1
 800a568:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a56a:	69fb      	ldr	r3, [r7, #28]
 800a56c:	3301      	adds	r3, #1
 800a56e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a570:	69fb      	ldr	r3, [r7, #28]
 800a572:	3301      	adds	r3, #1
 800a574:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	3301      	adds	r3, #1
 800a57a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	3301      	adds	r3, #1
 800a580:	61bb      	str	r3, [r7, #24]
 800a582:	69ba      	ldr	r2, [r7, #24]
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	429a      	cmp	r2, r3
 800a588:	d3e2      	bcc.n	800a550 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a58a:	2300      	movs	r3, #0
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3724      	adds	r7, #36	@ 0x24
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr

0800a598 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a598:	b480      	push	{r7}
 800a59a:	b08b      	sub	sp, #44	@ 0x2c
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	4613      	mov	r3, r2
 800a5a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a5ae:	88fb      	ldrh	r3, [r7, #6]
 800a5b0:	089b      	lsrs	r3, r3, #2
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a5b6:	88fb      	ldrh	r3, [r7, #6]
 800a5b8:	f003 0303 	and.w	r3, r3, #3
 800a5bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a5be:	2300      	movs	r3, #0
 800a5c0:	623b      	str	r3, [r7, #32]
 800a5c2:	e014      	b.n	800a5ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a5c4:	69bb      	ldr	r3, [r7, #24]
 800a5c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5ca:	681a      	ldr	r2, [r3, #0]
 800a5cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ce:	601a      	str	r2, [r3, #0]
    pDest++;
 800a5d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d8:	3301      	adds	r3, #1
 800a5da:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5de:	3301      	adds	r3, #1
 800a5e0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a5e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a5e8:	6a3b      	ldr	r3, [r7, #32]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	623b      	str	r3, [r7, #32]
 800a5ee:	6a3a      	ldr	r2, [r7, #32]
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d3e6      	bcc.n	800a5c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a5f6:	8bfb      	ldrh	r3, [r7, #30]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d01e      	beq.n	800a63a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a606:	461a      	mov	r2, r3
 800a608:	f107 0310 	add.w	r3, r7, #16
 800a60c:	6812      	ldr	r2, [r2, #0]
 800a60e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a610:	693a      	ldr	r2, [r7, #16]
 800a612:	6a3b      	ldr	r3, [r7, #32]
 800a614:	b2db      	uxtb	r3, r3
 800a616:	00db      	lsls	r3, r3, #3
 800a618:	fa22 f303 	lsr.w	r3, r2, r3
 800a61c:	b2da      	uxtb	r2, r3
 800a61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a620:	701a      	strb	r2, [r3, #0]
      i++;
 800a622:	6a3b      	ldr	r3, [r7, #32]
 800a624:	3301      	adds	r3, #1
 800a626:	623b      	str	r3, [r7, #32]
      pDest++;
 800a628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a62a:	3301      	adds	r3, #1
 800a62c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a62e:	8bfb      	ldrh	r3, [r7, #30]
 800a630:	3b01      	subs	r3, #1
 800a632:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a634:	8bfb      	ldrh	r3, [r7, #30]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d1ea      	bne.n	800a610 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	372c      	adds	r7, #44	@ 0x2c
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a648:	b480      	push	{r7}
 800a64a:	b085      	sub	sp, #20
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	785b      	ldrb	r3, [r3, #1]
 800a660:	2b01      	cmp	r3, #1
 800a662:	d12c      	bne.n	800a6be <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	015a      	lsls	r2, r3, #5
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	4413      	add	r3, r2
 800a66c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	2b00      	cmp	r3, #0
 800a674:	db12      	blt.n	800a69c <USB_EPSetStall+0x54>
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d00f      	beq.n	800a69c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	015a      	lsls	r2, r3, #5
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	4413      	add	r3, r2
 800a684:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	68ba      	ldr	r2, [r7, #8]
 800a68c:	0151      	lsls	r1, r2, #5
 800a68e:	68fa      	ldr	r2, [r7, #12]
 800a690:	440a      	add	r2, r1
 800a692:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a696:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a69a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	015a      	lsls	r2, r3, #5
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	4413      	add	r3, r2
 800a6a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	68ba      	ldr	r2, [r7, #8]
 800a6ac:	0151      	lsls	r1, r2, #5
 800a6ae:	68fa      	ldr	r2, [r7, #12]
 800a6b0:	440a      	add	r2, r1
 800a6b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a6ba:	6013      	str	r3, [r2, #0]
 800a6bc:	e02b      	b.n	800a716 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	015a      	lsls	r2, r3, #5
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	4413      	add	r3, r2
 800a6c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	db12      	blt.n	800a6f6 <USB_EPSetStall+0xae>
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d00f      	beq.n	800a6f6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	015a      	lsls	r2, r3, #5
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	4413      	add	r3, r2
 800a6de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	68ba      	ldr	r2, [r7, #8]
 800a6e6:	0151      	lsls	r1, r2, #5
 800a6e8:	68fa      	ldr	r2, [r7, #12]
 800a6ea:	440a      	add	r2, r1
 800a6ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6f0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a6f4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	015a      	lsls	r2, r3, #5
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	68ba      	ldr	r2, [r7, #8]
 800a706:	0151      	lsls	r1, r2, #5
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	440a      	add	r2, r1
 800a70c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a710:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a714:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a716:	2300      	movs	r3, #0
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3714      	adds	r7, #20
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a724:	b480      	push	{r7}
 800a726:	b085      	sub	sp, #20
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	785b      	ldrb	r3, [r3, #1]
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d128      	bne.n	800a792 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	015a      	lsls	r2, r3, #5
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	4413      	add	r3, r2
 800a748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	68ba      	ldr	r2, [r7, #8]
 800a750:	0151      	lsls	r1, r2, #5
 800a752:	68fa      	ldr	r2, [r7, #12]
 800a754:	440a      	add	r2, r1
 800a756:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a75a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a75e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	791b      	ldrb	r3, [r3, #4]
 800a764:	2b03      	cmp	r3, #3
 800a766:	d003      	beq.n	800a770 <USB_EPClearStall+0x4c>
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	791b      	ldrb	r3, [r3, #4]
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	d138      	bne.n	800a7e2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	015a      	lsls	r2, r3, #5
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	4413      	add	r3, r2
 800a778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	68ba      	ldr	r2, [r7, #8]
 800a780:	0151      	lsls	r1, r2, #5
 800a782:	68fa      	ldr	r2, [r7, #12]
 800a784:	440a      	add	r2, r1
 800a786:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a78a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a78e:	6013      	str	r3, [r2, #0]
 800a790:	e027      	b.n	800a7e2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	015a      	lsls	r2, r3, #5
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	4413      	add	r3, r2
 800a79a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	68ba      	ldr	r2, [r7, #8]
 800a7a2:	0151      	lsls	r1, r2, #5
 800a7a4:	68fa      	ldr	r2, [r7, #12]
 800a7a6:	440a      	add	r2, r1
 800a7a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7ac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a7b0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	791b      	ldrb	r3, [r3, #4]
 800a7b6:	2b03      	cmp	r3, #3
 800a7b8:	d003      	beq.n	800a7c2 <USB_EPClearStall+0x9e>
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	791b      	ldrb	r3, [r3, #4]
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	d10f      	bne.n	800a7e2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	015a      	lsls	r2, r3, #5
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	68ba      	ldr	r2, [r7, #8]
 800a7d2:	0151      	lsls	r1, r2, #5
 800a7d4:	68fa      	ldr	r2, [r7, #12]
 800a7d6:	440a      	add	r2, r1
 800a7d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a7e0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a7e2:	2300      	movs	r3, #0
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3714      	adds	r7, #20
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b085      	sub	sp, #20
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	68fa      	ldr	r2, [r7, #12]
 800a80a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a80e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a812:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	78fb      	ldrb	r3, [r7, #3]
 800a81e:	011b      	lsls	r3, r3, #4
 800a820:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a824:	68f9      	ldr	r1, [r7, #12]
 800a826:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a82a:	4313      	orrs	r3, r2
 800a82c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a82e:	2300      	movs	r3, #0
}
 800a830:	4618      	mov	r0, r3
 800a832:	3714      	adds	r7, #20
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr

0800a83c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b085      	sub	sp, #20
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	68fa      	ldr	r2, [r7, #12]
 800a852:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a856:	f023 0303 	bic.w	r3, r3, #3
 800a85a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	68fa      	ldr	r2, [r7, #12]
 800a866:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a86a:	f023 0302 	bic.w	r3, r3, #2
 800a86e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a870:	2300      	movs	r3, #0
}
 800a872:	4618      	mov	r0, r3
 800a874:	3714      	adds	r7, #20
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr

0800a87e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a87e:	b480      	push	{r7}
 800a880:	b085      	sub	sp, #20
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	68fa      	ldr	r2, [r7, #12]
 800a894:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a898:	f023 0303 	bic.w	r3, r3, #3
 800a89c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	68fa      	ldr	r2, [r7, #12]
 800a8a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a8ac:	f043 0302 	orr.w	r3, r3, #2
 800a8b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a8b2:	2300      	movs	r3, #0
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3714      	adds	r7, #20
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b085      	sub	sp, #20
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	695b      	ldr	r3, [r3, #20]
 800a8cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	699b      	ldr	r3, [r3, #24]
 800a8d2:	68fa      	ldr	r2, [r7, #12]
 800a8d4:	4013      	ands	r3, r2
 800a8d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3714      	adds	r7, #20
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr

0800a8e6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a8e6:	b480      	push	{r7}
 800a8e8:	b085      	sub	sp, #20
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8f8:	699b      	ldr	r3, [r3, #24]
 800a8fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a902:	69db      	ldr	r3, [r3, #28]
 800a904:	68ba      	ldr	r2, [r7, #8]
 800a906:	4013      	ands	r3, r2
 800a908:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	0c1b      	lsrs	r3, r3, #16
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3714      	adds	r7, #20
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr

0800a91a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a91a:	b480      	push	{r7}
 800a91c:	b085      	sub	sp, #20
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a92c:	699b      	ldr	r3, [r3, #24]
 800a92e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a936:	69db      	ldr	r3, [r3, #28]
 800a938:	68ba      	ldr	r2, [r7, #8]
 800a93a:	4013      	ands	r3, r2
 800a93c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	b29b      	uxth	r3, r3
}
 800a942:	4618      	mov	r0, r3
 800a944:	3714      	adds	r7, #20
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr

0800a94e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a94e:	b480      	push	{r7}
 800a950:	b085      	sub	sp, #20
 800a952:	af00      	add	r7, sp, #0
 800a954:	6078      	str	r0, [r7, #4]
 800a956:	460b      	mov	r3, r1
 800a958:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a95e:	78fb      	ldrb	r3, [r7, #3]
 800a960:	015a      	lsls	r2, r3, #5
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	4413      	add	r3, r2
 800a966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a96a:	689b      	ldr	r3, [r3, #8]
 800a96c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a974:	695b      	ldr	r3, [r3, #20]
 800a976:	68ba      	ldr	r2, [r7, #8]
 800a978:	4013      	ands	r3, r2
 800a97a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a97c:	68bb      	ldr	r3, [r7, #8]
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3714      	adds	r7, #20
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr

0800a98a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a98a:	b480      	push	{r7}
 800a98c:	b087      	sub	sp, #28
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
 800a992:	460b      	mov	r3, r1
 800a994:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9ac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a9ae:	78fb      	ldrb	r3, [r7, #3]
 800a9b0:	f003 030f 	and.w	r3, r3, #15
 800a9b4:	68fa      	ldr	r2, [r7, #12]
 800a9b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a9ba:	01db      	lsls	r3, r3, #7
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	693a      	ldr	r2, [r7, #16]
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a9c4:	78fb      	ldrb	r3, [r7, #3]
 800a9c6:	015a      	lsls	r2, r3, #5
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	693a      	ldr	r2, [r7, #16]
 800a9d4:	4013      	ands	r3, r2
 800a9d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a9d8:	68bb      	ldr	r3, [r7, #8]
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	371c      	adds	r7, #28
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr

0800a9e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a9e6:	b480      	push	{r7}
 800a9e8:	b083      	sub	sp, #12
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	695b      	ldr	r3, [r3, #20]
 800a9f2:	f003 0301 	and.w	r3, r3, #1
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	370c      	adds	r7, #12
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr

0800aa02 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800aa02:	b480      	push	{r7}
 800aa04:	b085      	sub	sp, #20
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	68fa      	ldr	r2, [r7, #12]
 800aa18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa1c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800aa20:	f023 0307 	bic.w	r3, r3, #7
 800aa24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	68fa      	ldr	r2, [r7, #12]
 800aa30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa3a:	2300      	movs	r3, #0
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3714      	adds	r7, #20
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr

0800aa48 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b087      	sub	sp, #28
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	60f8      	str	r0, [r7, #12]
 800aa50:	460b      	mov	r3, r1
 800aa52:	607a      	str	r2, [r7, #4]
 800aa54:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	333c      	adds	r3, #60	@ 0x3c
 800aa5e:	3304      	adds	r3, #4
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	4a26      	ldr	r2, [pc, #152]	@ (800ab00 <USB_EP0_OutStart+0xb8>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d90a      	bls.n	800aa82 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aa78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa7c:	d101      	bne.n	800aa82 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	e037      	b.n	800aaf2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa88:	461a      	mov	r2, r3
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa94:	691b      	ldr	r3, [r3, #16]
 800aa96:	697a      	ldr	r2, [r7, #20]
 800aa98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa9c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aaa0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaa8:	691b      	ldr	r3, [r3, #16]
 800aaaa:	697a      	ldr	r2, [r7, #20]
 800aaac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aab0:	f043 0318 	orr.w	r3, r3, #24
 800aab4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aabc:	691b      	ldr	r3, [r3, #16]
 800aabe:	697a      	ldr	r2, [r7, #20]
 800aac0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aac4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800aac8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800aaca:	7afb      	ldrb	r3, [r7, #11]
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d10f      	bne.n	800aaf0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aad6:	461a      	mov	r2, r3
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	697a      	ldr	r2, [r7, #20]
 800aae6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aaea:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800aaee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aaf0:	2300      	movs	r3, #0
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	371c      	adds	r7, #28
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr
 800aafe:	bf00      	nop
 800ab00:	4f54300a 	.word	0x4f54300a

0800ab04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b085      	sub	sp, #20
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	3301      	adds	r3, #1
 800ab14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab1c:	d901      	bls.n	800ab22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ab1e:	2303      	movs	r3, #3
 800ab20:	e022      	b.n	800ab68 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	691b      	ldr	r3, [r3, #16]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	daf2      	bge.n	800ab10 <USB_CoreReset+0xc>

  count = 10U;
 800ab2a:	230a      	movs	r3, #10
 800ab2c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800ab2e:	e002      	b.n	800ab36 <USB_CoreReset+0x32>
  {
    count--;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	3b01      	subs	r3, #1
 800ab34:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d1f9      	bne.n	800ab30 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	f043 0201 	orr.w	r2, r3, #1
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab54:	d901      	bls.n	800ab5a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800ab56:	2303      	movs	r3, #3
 800ab58:	e006      	b.n	800ab68 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	691b      	ldr	r3, [r3, #16]
 800ab5e:	f003 0301 	and.w	r3, r3, #1
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d0f0      	beq.n	800ab48 <USB_CoreReset+0x44>

  return HAL_OK;
 800ab66:	2300      	movs	r3, #0
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3714      	adds	r7, #20
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr

0800ab74 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b084      	sub	sp, #16
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ab80:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ab84:	f002 fd20 	bl	800d5c8 <USBD_static_malloc>
 800ab88:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d109      	bne.n	800aba4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	32b0      	adds	r2, #176	@ 0xb0
 800ab9a:	2100      	movs	r1, #0
 800ab9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800aba0:	2302      	movs	r3, #2
 800aba2:	e0d4      	b.n	800ad4e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800aba4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800aba8:	2100      	movs	r1, #0
 800abaa:	68f8      	ldr	r0, [r7, #12]
 800abac:	f002 fe28 	bl	800d800 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	32b0      	adds	r2, #176	@ 0xb0
 800abba:	68f9      	ldr	r1, [r7, #12]
 800abbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	32b0      	adds	r2, #176	@ 0xb0
 800abca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	7c1b      	ldrb	r3, [r3, #16]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d138      	bne.n	800ac4e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800abdc:	4b5e      	ldr	r3, [pc, #376]	@ (800ad58 <USBD_CDC_Init+0x1e4>)
 800abde:	7819      	ldrb	r1, [r3, #0]
 800abe0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800abe4:	2202      	movs	r2, #2
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f002 fbcb 	bl	800d382 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800abec:	4b5a      	ldr	r3, [pc, #360]	@ (800ad58 <USBD_CDC_Init+0x1e4>)
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	f003 020f 	and.w	r2, r3, #15
 800abf4:	6879      	ldr	r1, [r7, #4]
 800abf6:	4613      	mov	r3, r2
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	4413      	add	r3, r2
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	440b      	add	r3, r1
 800ac00:	3323      	adds	r3, #35	@ 0x23
 800ac02:	2201      	movs	r2, #1
 800ac04:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ac06:	4b55      	ldr	r3, [pc, #340]	@ (800ad5c <USBD_CDC_Init+0x1e8>)
 800ac08:	7819      	ldrb	r1, [r3, #0]
 800ac0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac0e:	2202      	movs	r2, #2
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f002 fbb6 	bl	800d382 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ac16:	4b51      	ldr	r3, [pc, #324]	@ (800ad5c <USBD_CDC_Init+0x1e8>)
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	f003 020f 	and.w	r2, r3, #15
 800ac1e:	6879      	ldr	r1, [r7, #4]
 800ac20:	4613      	mov	r3, r2
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	4413      	add	r3, r2
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	440b      	add	r3, r1
 800ac2a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800ac2e:	2201      	movs	r2, #1
 800ac30:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ac32:	4b4b      	ldr	r3, [pc, #300]	@ (800ad60 <USBD_CDC_Init+0x1ec>)
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	f003 020f 	and.w	r2, r3, #15
 800ac3a:	6879      	ldr	r1, [r7, #4]
 800ac3c:	4613      	mov	r3, r2
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	4413      	add	r3, r2
 800ac42:	009b      	lsls	r3, r3, #2
 800ac44:	440b      	add	r3, r1
 800ac46:	331c      	adds	r3, #28
 800ac48:	2210      	movs	r2, #16
 800ac4a:	601a      	str	r2, [r3, #0]
 800ac4c:	e035      	b.n	800acba <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ac4e:	4b42      	ldr	r3, [pc, #264]	@ (800ad58 <USBD_CDC_Init+0x1e4>)
 800ac50:	7819      	ldrb	r1, [r3, #0]
 800ac52:	2340      	movs	r3, #64	@ 0x40
 800ac54:	2202      	movs	r2, #2
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f002 fb93 	bl	800d382 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ac5c:	4b3e      	ldr	r3, [pc, #248]	@ (800ad58 <USBD_CDC_Init+0x1e4>)
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	f003 020f 	and.w	r2, r3, #15
 800ac64:	6879      	ldr	r1, [r7, #4]
 800ac66:	4613      	mov	r3, r2
 800ac68:	009b      	lsls	r3, r3, #2
 800ac6a:	4413      	add	r3, r2
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	440b      	add	r3, r1
 800ac70:	3323      	adds	r3, #35	@ 0x23
 800ac72:	2201      	movs	r2, #1
 800ac74:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ac76:	4b39      	ldr	r3, [pc, #228]	@ (800ad5c <USBD_CDC_Init+0x1e8>)
 800ac78:	7819      	ldrb	r1, [r3, #0]
 800ac7a:	2340      	movs	r3, #64	@ 0x40
 800ac7c:	2202      	movs	r2, #2
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f002 fb7f 	bl	800d382 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ac84:	4b35      	ldr	r3, [pc, #212]	@ (800ad5c <USBD_CDC_Init+0x1e8>)
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	f003 020f 	and.w	r2, r3, #15
 800ac8c:	6879      	ldr	r1, [r7, #4]
 800ac8e:	4613      	mov	r3, r2
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	4413      	add	r3, r2
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	440b      	add	r3, r1
 800ac98:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800aca0:	4b2f      	ldr	r3, [pc, #188]	@ (800ad60 <USBD_CDC_Init+0x1ec>)
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	f003 020f 	and.w	r2, r3, #15
 800aca8:	6879      	ldr	r1, [r7, #4]
 800acaa:	4613      	mov	r3, r2
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	4413      	add	r3, r2
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	440b      	add	r3, r1
 800acb4:	331c      	adds	r3, #28
 800acb6:	2210      	movs	r2, #16
 800acb8:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800acba:	4b29      	ldr	r3, [pc, #164]	@ (800ad60 <USBD_CDC_Init+0x1ec>)
 800acbc:	7819      	ldrb	r1, [r3, #0]
 800acbe:	2308      	movs	r3, #8
 800acc0:	2203      	movs	r2, #3
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f002 fb5d 	bl	800d382 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800acc8:	4b25      	ldr	r3, [pc, #148]	@ (800ad60 <USBD_CDC_Init+0x1ec>)
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	f003 020f 	and.w	r2, r3, #15
 800acd0:	6879      	ldr	r1, [r7, #4]
 800acd2:	4613      	mov	r3, r2
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	4413      	add	r3, r2
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	440b      	add	r3, r1
 800acdc:	3323      	adds	r3, #35	@ 0x23
 800acde:	2201      	movs	r2, #1
 800ace0:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2200      	movs	r2, #0
 800ace6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	33b0      	adds	r3, #176	@ 0xb0
 800acf4:	009b      	lsls	r3, r3, #2
 800acf6:	4413      	add	r3, r2
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2200      	movs	r2, #0
 800ad02:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d101      	bne.n	800ad1c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ad18:	2302      	movs	r3, #2
 800ad1a:	e018      	b.n	800ad4e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	7c1b      	ldrb	r3, [r3, #16]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d10a      	bne.n	800ad3a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad24:	4b0d      	ldr	r3, [pc, #52]	@ (800ad5c <USBD_CDC_Init+0x1e8>)
 800ad26:	7819      	ldrb	r1, [r3, #0]
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f002 fc14 	bl	800d560 <USBD_LL_PrepareReceive>
 800ad38:	e008      	b.n	800ad4c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad3a:	4b08      	ldr	r3, [pc, #32]	@ (800ad5c <USBD_CDC_Init+0x1e8>)
 800ad3c:	7819      	ldrb	r1, [r3, #0]
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad44:	2340      	movs	r3, #64	@ 0x40
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f002 fc0a 	bl	800d560 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ad4c:	2300      	movs	r3, #0
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3710      	adds	r7, #16
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	20000097 	.word	0x20000097
 800ad5c:	20000098 	.word	0x20000098
 800ad60:	20000099 	.word	0x20000099

0800ad64 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ad70:	4b3a      	ldr	r3, [pc, #232]	@ (800ae5c <USBD_CDC_DeInit+0xf8>)
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	4619      	mov	r1, r3
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f002 fb29 	bl	800d3ce <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ad7c:	4b37      	ldr	r3, [pc, #220]	@ (800ae5c <USBD_CDC_DeInit+0xf8>)
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	f003 020f 	and.w	r2, r3, #15
 800ad84:	6879      	ldr	r1, [r7, #4]
 800ad86:	4613      	mov	r3, r2
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	4413      	add	r3, r2
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	440b      	add	r3, r1
 800ad90:	3323      	adds	r3, #35	@ 0x23
 800ad92:	2200      	movs	r2, #0
 800ad94:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ad96:	4b32      	ldr	r3, [pc, #200]	@ (800ae60 <USBD_CDC_DeInit+0xfc>)
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f002 fb16 	bl	800d3ce <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ada2:	4b2f      	ldr	r3, [pc, #188]	@ (800ae60 <USBD_CDC_DeInit+0xfc>)
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	f003 020f 	and.w	r2, r3, #15
 800adaa:	6879      	ldr	r1, [r7, #4]
 800adac:	4613      	mov	r3, r2
 800adae:	009b      	lsls	r3, r3, #2
 800adb0:	4413      	add	r3, r2
 800adb2:	009b      	lsls	r3, r3, #2
 800adb4:	440b      	add	r3, r1
 800adb6:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800adba:	2200      	movs	r2, #0
 800adbc:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800adbe:	4b29      	ldr	r3, [pc, #164]	@ (800ae64 <USBD_CDC_DeInit+0x100>)
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	4619      	mov	r1, r3
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f002 fb02 	bl	800d3ce <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800adca:	4b26      	ldr	r3, [pc, #152]	@ (800ae64 <USBD_CDC_DeInit+0x100>)
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	f003 020f 	and.w	r2, r3, #15
 800add2:	6879      	ldr	r1, [r7, #4]
 800add4:	4613      	mov	r3, r2
 800add6:	009b      	lsls	r3, r3, #2
 800add8:	4413      	add	r3, r2
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	440b      	add	r3, r1
 800adde:	3323      	adds	r3, #35	@ 0x23
 800ade0:	2200      	movs	r2, #0
 800ade2:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ade4:	4b1f      	ldr	r3, [pc, #124]	@ (800ae64 <USBD_CDC_DeInit+0x100>)
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	f003 020f 	and.w	r2, r3, #15
 800adec:	6879      	ldr	r1, [r7, #4]
 800adee:	4613      	mov	r3, r2
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	4413      	add	r3, r2
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	440b      	add	r3, r1
 800adf8:	331c      	adds	r3, #28
 800adfa:	2200      	movs	r2, #0
 800adfc:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	32b0      	adds	r2, #176	@ 0xb0
 800ae08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d01f      	beq.n	800ae50 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	33b0      	adds	r3, #176	@ 0xb0
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	4413      	add	r3, r2
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	32b0      	adds	r2, #176	@ 0xb0
 800ae2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae32:	4618      	mov	r0, r3
 800ae34:	f002 fbd6 	bl	800d5e4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	32b0      	adds	r2, #176	@ 0xb0
 800ae42:	2100      	movs	r1, #0
 800ae44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ae50:	2300      	movs	r3, #0
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3708      	adds	r7, #8
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	bf00      	nop
 800ae5c:	20000097 	.word	0x20000097
 800ae60:	20000098 	.word	0x20000098
 800ae64:	20000099 	.word	0x20000099

0800ae68 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b086      	sub	sp, #24
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	32b0      	adds	r2, #176	@ 0xb0
 800ae7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae80:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ae82:	2300      	movs	r3, #0
 800ae84:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ae86:	2300      	movs	r3, #0
 800ae88:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d101      	bne.n	800ae98 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ae94:	2303      	movs	r3, #3
 800ae96:	e0bf      	b.n	800b018 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d050      	beq.n	800af46 <USBD_CDC_Setup+0xde>
 800aea4:	2b20      	cmp	r3, #32
 800aea6:	f040 80af 	bne.w	800b008 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	88db      	ldrh	r3, [r3, #6]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d03a      	beq.n	800af28 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	b25b      	sxtb	r3, r3
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	da1b      	bge.n	800aef4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	33b0      	adds	r3, #176	@ 0xb0
 800aec6:	009b      	lsls	r3, r3, #2
 800aec8:	4413      	add	r3, r2
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	683a      	ldr	r2, [r7, #0]
 800aed0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800aed2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aed4:	683a      	ldr	r2, [r7, #0]
 800aed6:	88d2      	ldrh	r2, [r2, #6]
 800aed8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	88db      	ldrh	r3, [r3, #6]
 800aede:	2b07      	cmp	r3, #7
 800aee0:	bf28      	it	cs
 800aee2:	2307      	movcs	r3, #7
 800aee4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	89fa      	ldrh	r2, [r7, #14]
 800aeea:	4619      	mov	r1, r3
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f001 fda9 	bl	800ca44 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800aef2:	e090      	b.n	800b016 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	785a      	ldrb	r2, [r3, #1]
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	88db      	ldrh	r3, [r3, #6]
 800af02:	2b3f      	cmp	r3, #63	@ 0x3f
 800af04:	d803      	bhi.n	800af0e <USBD_CDC_Setup+0xa6>
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	88db      	ldrh	r3, [r3, #6]
 800af0a:	b2da      	uxtb	r2, r3
 800af0c:	e000      	b.n	800af10 <USBD_CDC_Setup+0xa8>
 800af0e:	2240      	movs	r2, #64	@ 0x40
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800af16:	6939      	ldr	r1, [r7, #16]
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800af1e:	461a      	mov	r2, r3
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f001 fdbe 	bl	800caa2 <USBD_CtlPrepareRx>
      break;
 800af26:	e076      	b.n	800b016 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	33b0      	adds	r3, #176	@ 0xb0
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	4413      	add	r3, r2
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	689b      	ldr	r3, [r3, #8]
 800af3a:	683a      	ldr	r2, [r7, #0]
 800af3c:	7850      	ldrb	r0, [r2, #1]
 800af3e:	2200      	movs	r2, #0
 800af40:	6839      	ldr	r1, [r7, #0]
 800af42:	4798      	blx	r3
      break;
 800af44:	e067      	b.n	800b016 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	785b      	ldrb	r3, [r3, #1]
 800af4a:	2b0b      	cmp	r3, #11
 800af4c:	d851      	bhi.n	800aff2 <USBD_CDC_Setup+0x18a>
 800af4e:	a201      	add	r2, pc, #4	@ (adr r2, 800af54 <USBD_CDC_Setup+0xec>)
 800af50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af54:	0800af85 	.word	0x0800af85
 800af58:	0800b001 	.word	0x0800b001
 800af5c:	0800aff3 	.word	0x0800aff3
 800af60:	0800aff3 	.word	0x0800aff3
 800af64:	0800aff3 	.word	0x0800aff3
 800af68:	0800aff3 	.word	0x0800aff3
 800af6c:	0800aff3 	.word	0x0800aff3
 800af70:	0800aff3 	.word	0x0800aff3
 800af74:	0800aff3 	.word	0x0800aff3
 800af78:	0800aff3 	.word	0x0800aff3
 800af7c:	0800afaf 	.word	0x0800afaf
 800af80:	0800afd9 	.word	0x0800afd9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	2b03      	cmp	r3, #3
 800af8e:	d107      	bne.n	800afa0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800af90:	f107 030a 	add.w	r3, r7, #10
 800af94:	2202      	movs	r2, #2
 800af96:	4619      	mov	r1, r3
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f001 fd53 	bl	800ca44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800af9e:	e032      	b.n	800b006 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800afa0:	6839      	ldr	r1, [r7, #0]
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f001 fcd1 	bl	800c94a <USBD_CtlError>
            ret = USBD_FAIL;
 800afa8:	2303      	movs	r3, #3
 800afaa:	75fb      	strb	r3, [r7, #23]
          break;
 800afac:	e02b      	b.n	800b006 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	2b03      	cmp	r3, #3
 800afb8:	d107      	bne.n	800afca <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800afba:	f107 030d 	add.w	r3, r7, #13
 800afbe:	2201      	movs	r2, #1
 800afc0:	4619      	mov	r1, r3
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f001 fd3e 	bl	800ca44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800afc8:	e01d      	b.n	800b006 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800afca:	6839      	ldr	r1, [r7, #0]
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f001 fcbc 	bl	800c94a <USBD_CtlError>
            ret = USBD_FAIL;
 800afd2:	2303      	movs	r3, #3
 800afd4:	75fb      	strb	r3, [r7, #23]
          break;
 800afd6:	e016      	b.n	800b006 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	2b03      	cmp	r3, #3
 800afe2:	d00f      	beq.n	800b004 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800afe4:	6839      	ldr	r1, [r7, #0]
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f001 fcaf 	bl	800c94a <USBD_CtlError>
            ret = USBD_FAIL;
 800afec:	2303      	movs	r3, #3
 800afee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aff0:	e008      	b.n	800b004 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aff2:	6839      	ldr	r1, [r7, #0]
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f001 fca8 	bl	800c94a <USBD_CtlError>
          ret = USBD_FAIL;
 800affa:	2303      	movs	r3, #3
 800affc:	75fb      	strb	r3, [r7, #23]
          break;
 800affe:	e002      	b.n	800b006 <USBD_CDC_Setup+0x19e>
          break;
 800b000:	bf00      	nop
 800b002:	e008      	b.n	800b016 <USBD_CDC_Setup+0x1ae>
          break;
 800b004:	bf00      	nop
      }
      break;
 800b006:	e006      	b.n	800b016 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b008:	6839      	ldr	r1, [r7, #0]
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f001 fc9d 	bl	800c94a <USBD_CtlError>
      ret = USBD_FAIL;
 800b010:	2303      	movs	r3, #3
 800b012:	75fb      	strb	r3, [r7, #23]
      break;
 800b014:	bf00      	nop
  }

  return (uint8_t)ret;
 800b016:	7dfb      	ldrb	r3, [r7, #23]
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3718      	adds	r7, #24
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	460b      	mov	r3, r1
 800b02a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b032:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	32b0      	adds	r2, #176	@ 0xb0
 800b03e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d101      	bne.n	800b04a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b046:	2303      	movs	r3, #3
 800b048:	e065      	b.n	800b116 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	32b0      	adds	r2, #176	@ 0xb0
 800b054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b058:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b05a:	78fb      	ldrb	r3, [r7, #3]
 800b05c:	f003 020f 	and.w	r2, r3, #15
 800b060:	6879      	ldr	r1, [r7, #4]
 800b062:	4613      	mov	r3, r2
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	4413      	add	r3, r2
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	440b      	add	r3, r1
 800b06c:	3314      	adds	r3, #20
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d02f      	beq.n	800b0d4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b074:	78fb      	ldrb	r3, [r7, #3]
 800b076:	f003 020f 	and.w	r2, r3, #15
 800b07a:	6879      	ldr	r1, [r7, #4]
 800b07c:	4613      	mov	r3, r2
 800b07e:	009b      	lsls	r3, r3, #2
 800b080:	4413      	add	r3, r2
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	440b      	add	r3, r1
 800b086:	3314      	adds	r3, #20
 800b088:	681a      	ldr	r2, [r3, #0]
 800b08a:	78fb      	ldrb	r3, [r7, #3]
 800b08c:	f003 010f 	and.w	r1, r3, #15
 800b090:	68f8      	ldr	r0, [r7, #12]
 800b092:	460b      	mov	r3, r1
 800b094:	00db      	lsls	r3, r3, #3
 800b096:	440b      	add	r3, r1
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	4403      	add	r3, r0
 800b09c:	331c      	adds	r3, #28
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	fbb2 f1f3 	udiv	r1, r2, r3
 800b0a4:	fb01 f303 	mul.w	r3, r1, r3
 800b0a8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d112      	bne.n	800b0d4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b0ae:	78fb      	ldrb	r3, [r7, #3]
 800b0b0:	f003 020f 	and.w	r2, r3, #15
 800b0b4:	6879      	ldr	r1, [r7, #4]
 800b0b6:	4613      	mov	r3, r2
 800b0b8:	009b      	lsls	r3, r3, #2
 800b0ba:	4413      	add	r3, r2
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	440b      	add	r3, r1
 800b0c0:	3314      	adds	r3, #20
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b0c6:	78f9      	ldrb	r1, [r7, #3]
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f002 fa26 	bl	800d51e <USBD_LL_Transmit>
 800b0d2:	e01f      	b.n	800b114 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	33b0      	adds	r3, #176	@ 0xb0
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	4413      	add	r3, r2
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	691b      	ldr	r3, [r3, #16]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d010      	beq.n	800b114 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	33b0      	adds	r3, #176	@ 0xb0
 800b0fc:	009b      	lsls	r3, r3, #2
 800b0fe:	4413      	add	r3, r2
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	691b      	ldr	r3, [r3, #16]
 800b104:	68ba      	ldr	r2, [r7, #8]
 800b106:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b10a:	68ba      	ldr	r2, [r7, #8]
 800b10c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b110:	78fa      	ldrb	r2, [r7, #3]
 800b112:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b114:	2300      	movs	r3, #0
}
 800b116:	4618      	mov	r0, r3
 800b118:	3710      	adds	r7, #16
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}

0800b11e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b11e:	b580      	push	{r7, lr}
 800b120:	b084      	sub	sp, #16
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
 800b126:	460b      	mov	r3, r1
 800b128:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	32b0      	adds	r2, #176	@ 0xb0
 800b134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b138:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	32b0      	adds	r2, #176	@ 0xb0
 800b144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d101      	bne.n	800b150 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b14c:	2303      	movs	r3, #3
 800b14e:	e01a      	b.n	800b186 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b150:	78fb      	ldrb	r3, [r7, #3]
 800b152:	4619      	mov	r1, r3
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f002 fa24 	bl	800d5a2 <USBD_LL_GetRxDataSize>
 800b15a:	4602      	mov	r2, r0
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b168:	687a      	ldr	r2, [r7, #4]
 800b16a:	33b0      	adds	r3, #176	@ 0xb0
 800b16c:	009b      	lsls	r3, r3, #2
 800b16e:	4413      	add	r3, r2
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	68db      	ldr	r3, [r3, #12]
 800b174:	68fa      	ldr	r2, [r7, #12]
 800b176:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b17a:	68fa      	ldr	r2, [r7, #12]
 800b17c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b180:	4611      	mov	r1, r2
 800b182:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b184:	2300      	movs	r3, #0
}
 800b186:	4618      	mov	r0, r3
 800b188:	3710      	adds	r7, #16
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}

0800b18e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b18e:	b580      	push	{r7, lr}
 800b190:	b084      	sub	sp, #16
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	32b0      	adds	r2, #176	@ 0xb0
 800b1a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d101      	bne.n	800b1b0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b1ac:	2303      	movs	r3, #3
 800b1ae:	e024      	b.n	800b1fa <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1b6:	687a      	ldr	r2, [r7, #4]
 800b1b8:	33b0      	adds	r3, #176	@ 0xb0
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	4413      	add	r3, r2
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d019      	beq.n	800b1f8 <USBD_CDC_EP0_RxReady+0x6a>
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b1ca:	2bff      	cmp	r3, #255	@ 0xff
 800b1cc:	d014      	beq.n	800b1f8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1d4:	687a      	ldr	r2, [r7, #4]
 800b1d6:	33b0      	adds	r3, #176	@ 0xb0
 800b1d8:	009b      	lsls	r3, r3, #2
 800b1da:	4413      	add	r3, r2
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	689b      	ldr	r3, [r3, #8]
 800b1e0:	68fa      	ldr	r2, [r7, #12]
 800b1e2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b1e6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b1e8:	68fa      	ldr	r2, [r7, #12]
 800b1ea:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b1ee:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	22ff      	movs	r2, #255	@ 0xff
 800b1f4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b1f8:	2300      	movs	r3, #0
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3710      	adds	r7, #16
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
	...

0800b204 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b086      	sub	sp, #24
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b20c:	2182      	movs	r1, #130	@ 0x82
 800b20e:	4818      	ldr	r0, [pc, #96]	@ (800b270 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b210:	f000 fd62 	bl	800bcd8 <USBD_GetEpDesc>
 800b214:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b216:	2101      	movs	r1, #1
 800b218:	4815      	ldr	r0, [pc, #84]	@ (800b270 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b21a:	f000 fd5d 	bl	800bcd8 <USBD_GetEpDesc>
 800b21e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b220:	2181      	movs	r1, #129	@ 0x81
 800b222:	4813      	ldr	r0, [pc, #76]	@ (800b270 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b224:	f000 fd58 	bl	800bcd8 <USBD_GetEpDesc>
 800b228:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d002      	beq.n	800b236 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	2210      	movs	r2, #16
 800b234:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d006      	beq.n	800b24a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	2200      	movs	r2, #0
 800b240:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b244:	711a      	strb	r2, [r3, #4]
 800b246:	2200      	movs	r2, #0
 800b248:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d006      	beq.n	800b25e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2200      	movs	r2, #0
 800b254:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b258:	711a      	strb	r2, [r3, #4]
 800b25a:	2200      	movs	r2, #0
 800b25c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2243      	movs	r2, #67	@ 0x43
 800b262:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b264:	4b02      	ldr	r3, [pc, #8]	@ (800b270 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b266:	4618      	mov	r0, r3
 800b268:	3718      	adds	r7, #24
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
 800b26e:	bf00      	nop
 800b270:	20000054 	.word	0x20000054

0800b274 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b086      	sub	sp, #24
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b27c:	2182      	movs	r1, #130	@ 0x82
 800b27e:	4818      	ldr	r0, [pc, #96]	@ (800b2e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b280:	f000 fd2a 	bl	800bcd8 <USBD_GetEpDesc>
 800b284:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b286:	2101      	movs	r1, #1
 800b288:	4815      	ldr	r0, [pc, #84]	@ (800b2e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b28a:	f000 fd25 	bl	800bcd8 <USBD_GetEpDesc>
 800b28e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b290:	2181      	movs	r1, #129	@ 0x81
 800b292:	4813      	ldr	r0, [pc, #76]	@ (800b2e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b294:	f000 fd20 	bl	800bcd8 <USBD_GetEpDesc>
 800b298:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d002      	beq.n	800b2a6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	2210      	movs	r2, #16
 800b2a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d006      	beq.n	800b2ba <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	711a      	strb	r2, [r3, #4]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	f042 0202 	orr.w	r2, r2, #2
 800b2b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d006      	beq.n	800b2ce <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	711a      	strb	r2, [r3, #4]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	f042 0202 	orr.w	r2, r2, #2
 800b2cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2243      	movs	r2, #67	@ 0x43
 800b2d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b2d4:	4b02      	ldr	r3, [pc, #8]	@ (800b2e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3718      	adds	r7, #24
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	20000054 	.word	0x20000054

0800b2e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b086      	sub	sp, #24
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b2ec:	2182      	movs	r1, #130	@ 0x82
 800b2ee:	4818      	ldr	r0, [pc, #96]	@ (800b350 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b2f0:	f000 fcf2 	bl	800bcd8 <USBD_GetEpDesc>
 800b2f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b2f6:	2101      	movs	r1, #1
 800b2f8:	4815      	ldr	r0, [pc, #84]	@ (800b350 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b2fa:	f000 fced 	bl	800bcd8 <USBD_GetEpDesc>
 800b2fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b300:	2181      	movs	r1, #129	@ 0x81
 800b302:	4813      	ldr	r0, [pc, #76]	@ (800b350 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b304:	f000 fce8 	bl	800bcd8 <USBD_GetEpDesc>
 800b308:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d002      	beq.n	800b316 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	2210      	movs	r2, #16
 800b314:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d006      	beq.n	800b32a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	2200      	movs	r2, #0
 800b320:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b324:	711a      	strb	r2, [r3, #4]
 800b326:	2200      	movs	r2, #0
 800b328:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d006      	beq.n	800b33e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	2200      	movs	r2, #0
 800b334:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b338:	711a      	strb	r2, [r3, #4]
 800b33a:	2200      	movs	r2, #0
 800b33c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2243      	movs	r2, #67	@ 0x43
 800b342:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b344:	4b02      	ldr	r3, [pc, #8]	@ (800b350 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b346:	4618      	mov	r0, r3
 800b348:	3718      	adds	r7, #24
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	20000054 	.word	0x20000054

0800b354 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b354:	b480      	push	{r7}
 800b356:	b083      	sub	sp, #12
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	220a      	movs	r2, #10
 800b360:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b362:	4b03      	ldr	r3, [pc, #12]	@ (800b370 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b364:	4618      	mov	r0, r3
 800b366:	370c      	adds	r7, #12
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr
 800b370:	20000010 	.word	0x20000010

0800b374 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d101      	bne.n	800b388 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b384:	2303      	movs	r3, #3
 800b386:	e009      	b.n	800b39c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b38e:	687a      	ldr	r2, [r7, #4]
 800b390:	33b0      	adds	r3, #176	@ 0xb0
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	4413      	add	r3, r2
 800b396:	683a      	ldr	r2, [r7, #0]
 800b398:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b39a:	2300      	movs	r3, #0
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	370c      	adds	r7, #12
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b087      	sub	sp, #28
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	60f8      	str	r0, [r7, #12]
 800b3b0:	60b9      	str	r1, [r7, #8]
 800b3b2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	32b0      	adds	r2, #176	@ 0xb0
 800b3be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3c2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d101      	bne.n	800b3ce <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b3ca:	2303      	movs	r3, #3
 800b3cc:	e008      	b.n	800b3e0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	68ba      	ldr	r2, [r7, #8]
 800b3d2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b3de:	2300      	movs	r3, #0
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	371c      	adds	r7, #28
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b085      	sub	sp, #20
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	32b0      	adds	r2, #176	@ 0xb0
 800b400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b404:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d101      	bne.n	800b410 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b40c:	2303      	movs	r3, #3
 800b40e:	e004      	b.n	800b41a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	683a      	ldr	r2, [r7, #0]
 800b414:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b418:	2300      	movs	r3, #0
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3714      	adds	r7, #20
 800b41e:	46bd      	mov	sp, r7
 800b420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b424:	4770      	bx	lr
	...

0800b428 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	32b0      	adds	r2, #176	@ 0xb0
 800b43a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b43e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b440:	2301      	movs	r3, #1
 800b442:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d101      	bne.n	800b44e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b44a:	2303      	movs	r3, #3
 800b44c:	e025      	b.n	800b49a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b454:	2b00      	cmp	r3, #0
 800b456:	d11f      	bne.n	800b498 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	2201      	movs	r2, #1
 800b45c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b460:	4b10      	ldr	r3, [pc, #64]	@ (800b4a4 <USBD_CDC_TransmitPacket+0x7c>)
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	f003 020f 	and.w	r2, r3, #15
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	4613      	mov	r3, r2
 800b472:	009b      	lsls	r3, r3, #2
 800b474:	4413      	add	r3, r2
 800b476:	009b      	lsls	r3, r3, #2
 800b478:	4403      	add	r3, r0
 800b47a:	3314      	adds	r3, #20
 800b47c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b47e:	4b09      	ldr	r3, [pc, #36]	@ (800b4a4 <USBD_CDC_TransmitPacket+0x7c>)
 800b480:	7819      	ldrb	r1, [r3, #0]
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f002 f845 	bl	800d51e <USBD_LL_Transmit>

    ret = USBD_OK;
 800b494:	2300      	movs	r3, #0
 800b496:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b498:	7bfb      	ldrb	r3, [r7, #15]
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3710      	adds	r7, #16
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
 800b4a2:	bf00      	nop
 800b4a4:	20000097 	.word	0x20000097

0800b4a8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	32b0      	adds	r2, #176	@ 0xb0
 800b4ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4be:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	32b0      	adds	r2, #176	@ 0xb0
 800b4ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d101      	bne.n	800b4d6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b4d2:	2303      	movs	r3, #3
 800b4d4:	e018      	b.n	800b508 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	7c1b      	ldrb	r3, [r3, #16]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d10a      	bne.n	800b4f4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b4de:	4b0c      	ldr	r3, [pc, #48]	@ (800b510 <USBD_CDC_ReceivePacket+0x68>)
 800b4e0:	7819      	ldrb	r1, [r3, #0]
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b4e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f002 f837 	bl	800d560 <USBD_LL_PrepareReceive>
 800b4f2:	e008      	b.n	800b506 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b4f4:	4b06      	ldr	r3, [pc, #24]	@ (800b510 <USBD_CDC_ReceivePacket+0x68>)
 800b4f6:	7819      	ldrb	r1, [r3, #0]
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b4fe:	2340      	movs	r3, #64	@ 0x40
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f002 f82d 	bl	800d560 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b506:	2300      	movs	r3, #0
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3710      	adds	r7, #16
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}
 800b510:	20000098 	.word	0x20000098

0800b514 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b086      	sub	sp, #24
 800b518:	af00      	add	r7, sp, #0
 800b51a:	60f8      	str	r0, [r7, #12]
 800b51c:	60b9      	str	r1, [r7, #8]
 800b51e:	4613      	mov	r3, r2
 800b520:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d101      	bne.n	800b52c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b528:	2303      	movs	r3, #3
 800b52a:	e01f      	b.n	800b56c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2200      	movs	r2, #0
 800b530:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2200      	movs	r2, #0
 800b538:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2200      	movs	r2, #0
 800b540:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d003      	beq.n	800b552 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	68ba      	ldr	r2, [r7, #8]
 800b54e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2201      	movs	r2, #1
 800b556:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	79fa      	ldrb	r2, [r7, #7]
 800b55e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b560:	68f8      	ldr	r0, [r7, #12]
 800b562:	f001 fea7 	bl	800d2b4 <USBD_LL_Init>
 800b566:	4603      	mov	r3, r0
 800b568:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b56a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3718      	adds	r7, #24
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b57e:	2300      	movs	r3, #0
 800b580:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d101      	bne.n	800b58c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b588:	2303      	movs	r3, #3
 800b58a:	e025      	b.n	800b5d8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	683a      	ldr	r2, [r7, #0]
 800b590:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	32ae      	adds	r2, #174	@ 0xae
 800b59e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d00f      	beq.n	800b5c8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	32ae      	adds	r2, #174	@ 0xae
 800b5b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5b8:	f107 020e 	add.w	r2, r7, #14
 800b5bc:	4610      	mov	r0, r2
 800b5be:	4798      	blx	r3
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b5ce:	1c5a      	adds	r2, r3, #1
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b5d6:	2300      	movs	r3, #0
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3710      	adds	r7, #16
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b082      	sub	sp, #8
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f001 feaf 	bl	800d34c <USBD_LL_Start>
 800b5ee:	4603      	mov	r3, r0
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3708      	adds	r7, #8
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b083      	sub	sp, #12
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b600:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b602:	4618      	mov	r0, r3
 800b604:	370c      	adds	r7, #12
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr

0800b60e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b60e:	b580      	push	{r7, lr}
 800b610:	b084      	sub	sp, #16
 800b612:	af00      	add	r7, sp, #0
 800b614:	6078      	str	r0, [r7, #4]
 800b616:	460b      	mov	r3, r1
 800b618:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b61a:	2300      	movs	r3, #0
 800b61c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b624:	2b00      	cmp	r3, #0
 800b626:	d009      	beq.n	800b63c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	78fa      	ldrb	r2, [r7, #3]
 800b632:	4611      	mov	r1, r2
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	4798      	blx	r3
 800b638:	4603      	mov	r3, r0
 800b63a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b63c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3710      	adds	r7, #16
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b646:	b580      	push	{r7, lr}
 800b648:	b084      	sub	sp, #16
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
 800b64e:	460b      	mov	r3, r1
 800b650:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b652:	2300      	movs	r3, #0
 800b654:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b65c:	685b      	ldr	r3, [r3, #4]
 800b65e:	78fa      	ldrb	r2, [r7, #3]
 800b660:	4611      	mov	r1, r2
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	4798      	blx	r3
 800b666:	4603      	mov	r3, r0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d001      	beq.n	800b670 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b66c:	2303      	movs	r3, #3
 800b66e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b670:	7bfb      	ldrb	r3, [r7, #15]
}
 800b672:	4618      	mov	r0, r3
 800b674:	3710      	adds	r7, #16
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}

0800b67a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b67a:	b580      	push	{r7, lr}
 800b67c:	b084      	sub	sp, #16
 800b67e:	af00      	add	r7, sp, #0
 800b680:	6078      	str	r0, [r7, #4]
 800b682:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b68a:	6839      	ldr	r1, [r7, #0]
 800b68c:	4618      	mov	r0, r3
 800b68e:	f001 f922 	bl	800c8d6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2201      	movs	r2, #1
 800b696:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b6a0:	461a      	mov	r2, r3
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b6ae:	f003 031f 	and.w	r3, r3, #31
 800b6b2:	2b02      	cmp	r3, #2
 800b6b4:	d01a      	beq.n	800b6ec <USBD_LL_SetupStage+0x72>
 800b6b6:	2b02      	cmp	r3, #2
 800b6b8:	d822      	bhi.n	800b700 <USBD_LL_SetupStage+0x86>
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d002      	beq.n	800b6c4 <USBD_LL_SetupStage+0x4a>
 800b6be:	2b01      	cmp	r3, #1
 800b6c0:	d00a      	beq.n	800b6d8 <USBD_LL_SetupStage+0x5e>
 800b6c2:	e01d      	b.n	800b700 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f000 fb77 	bl	800bdc0 <USBD_StdDevReq>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	73fb      	strb	r3, [r7, #15]
      break;
 800b6d6:	e020      	b.n	800b71a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b6de:	4619      	mov	r1, r3
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f000 fbdf 	bl	800bea4 <USBD_StdItfReq>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	73fb      	strb	r3, [r7, #15]
      break;
 800b6ea:	e016      	b.n	800b71a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 fc41 	bl	800bf7c <USBD_StdEPReq>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	73fb      	strb	r3, [r7, #15]
      break;
 800b6fe:	e00c      	b.n	800b71a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b706:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b70a:	b2db      	uxtb	r3, r3
 800b70c:	4619      	mov	r1, r3
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f001 fe7c 	bl	800d40c <USBD_LL_StallEP>
 800b714:	4603      	mov	r3, r0
 800b716:	73fb      	strb	r3, [r7, #15]
      break;
 800b718:	bf00      	nop
  }

  return ret;
 800b71a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3710      	adds	r7, #16
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b086      	sub	sp, #24
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	460b      	mov	r3, r1
 800b72e:	607a      	str	r2, [r7, #4]
 800b730:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b732:	2300      	movs	r3, #0
 800b734:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800b736:	7afb      	ldrb	r3, [r7, #11]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d177      	bne.n	800b82c <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b742:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b74a:	2b03      	cmp	r3, #3
 800b74c:	f040 80a1 	bne.w	800b892 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	693a      	ldr	r2, [r7, #16]
 800b756:	8992      	ldrh	r2, [r2, #12]
 800b758:	4293      	cmp	r3, r2
 800b75a:	d91c      	bls.n	800b796 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	693a      	ldr	r2, [r7, #16]
 800b762:	8992      	ldrh	r2, [r2, #12]
 800b764:	1a9a      	subs	r2, r3, r2
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	691b      	ldr	r3, [r3, #16]
 800b76e:	693a      	ldr	r2, [r7, #16]
 800b770:	8992      	ldrh	r2, [r2, #12]
 800b772:	441a      	add	r2, r3
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	6919      	ldr	r1, [r3, #16]
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	899b      	ldrh	r3, [r3, #12]
 800b780:	461a      	mov	r2, r3
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	4293      	cmp	r3, r2
 800b788:	bf38      	it	cc
 800b78a:	4613      	movcc	r3, r2
 800b78c:	461a      	mov	r2, r3
 800b78e:	68f8      	ldr	r0, [r7, #12]
 800b790:	f001 f9a8 	bl	800cae4 <USBD_CtlContinueRx>
 800b794:	e07d      	b.n	800b892 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b79c:	f003 031f 	and.w	r3, r3, #31
 800b7a0:	2b02      	cmp	r3, #2
 800b7a2:	d014      	beq.n	800b7ce <USBD_LL_DataOutStage+0xaa>
 800b7a4:	2b02      	cmp	r3, #2
 800b7a6:	d81d      	bhi.n	800b7e4 <USBD_LL_DataOutStage+0xc0>
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d002      	beq.n	800b7b2 <USBD_LL_DataOutStage+0x8e>
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	d003      	beq.n	800b7b8 <USBD_LL_DataOutStage+0x94>
 800b7b0:	e018      	b.n	800b7e4 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	75bb      	strb	r3, [r7, #22]
            break;
 800b7b6:	e018      	b.n	800b7ea <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b7be:	b2db      	uxtb	r3, r3
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	68f8      	ldr	r0, [r7, #12]
 800b7c4:	f000 fa6e 	bl	800bca4 <USBD_CoreFindIF>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	75bb      	strb	r3, [r7, #22]
            break;
 800b7cc:	e00d      	b.n	800b7ea <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	4619      	mov	r1, r3
 800b7d8:	68f8      	ldr	r0, [r7, #12]
 800b7da:	f000 fa70 	bl	800bcbe <USBD_CoreFindEP>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	75bb      	strb	r3, [r7, #22]
            break;
 800b7e2:	e002      	b.n	800b7ea <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	75bb      	strb	r3, [r7, #22]
            break;
 800b7e8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b7ea:	7dbb      	ldrb	r3, [r7, #22]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d119      	bne.n	800b824 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7f6:	b2db      	uxtb	r3, r3
 800b7f8:	2b03      	cmp	r3, #3
 800b7fa:	d113      	bne.n	800b824 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b7fc:	7dba      	ldrb	r2, [r7, #22]
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	32ae      	adds	r2, #174	@ 0xae
 800b802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b806:	691b      	ldr	r3, [r3, #16]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d00b      	beq.n	800b824 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800b80c:	7dba      	ldrb	r2, [r7, #22]
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b814:	7dba      	ldrb	r2, [r7, #22]
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	32ae      	adds	r2, #174	@ 0xae
 800b81a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b81e:	691b      	ldr	r3, [r3, #16]
 800b820:	68f8      	ldr	r0, [r7, #12]
 800b822:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b824:	68f8      	ldr	r0, [r7, #12]
 800b826:	f001 f96e 	bl	800cb06 <USBD_CtlSendStatus>
 800b82a:	e032      	b.n	800b892 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b82c:	7afb      	ldrb	r3, [r7, #11]
 800b82e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b832:	b2db      	uxtb	r3, r3
 800b834:	4619      	mov	r1, r3
 800b836:	68f8      	ldr	r0, [r7, #12]
 800b838:	f000 fa41 	bl	800bcbe <USBD_CoreFindEP>
 800b83c:	4603      	mov	r3, r0
 800b83e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b840:	7dbb      	ldrb	r3, [r7, #22]
 800b842:	2bff      	cmp	r3, #255	@ 0xff
 800b844:	d025      	beq.n	800b892 <USBD_LL_DataOutStage+0x16e>
 800b846:	7dbb      	ldrb	r3, [r7, #22]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d122      	bne.n	800b892 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b852:	b2db      	uxtb	r3, r3
 800b854:	2b03      	cmp	r3, #3
 800b856:	d117      	bne.n	800b888 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b858:	7dba      	ldrb	r2, [r7, #22]
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	32ae      	adds	r2, #174	@ 0xae
 800b85e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b862:	699b      	ldr	r3, [r3, #24]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d00f      	beq.n	800b888 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800b868:	7dba      	ldrb	r2, [r7, #22]
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b870:	7dba      	ldrb	r2, [r7, #22]
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	32ae      	adds	r2, #174	@ 0xae
 800b876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b87a:	699b      	ldr	r3, [r3, #24]
 800b87c:	7afa      	ldrb	r2, [r7, #11]
 800b87e:	4611      	mov	r1, r2
 800b880:	68f8      	ldr	r0, [r7, #12]
 800b882:	4798      	blx	r3
 800b884:	4603      	mov	r3, r0
 800b886:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b888:	7dfb      	ldrb	r3, [r7, #23]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d001      	beq.n	800b892 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800b88e:	7dfb      	ldrb	r3, [r7, #23]
 800b890:	e000      	b.n	800b894 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800b892:	2300      	movs	r3, #0
}
 800b894:	4618      	mov	r0, r3
 800b896:	3718      	adds	r7, #24
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b086      	sub	sp, #24
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	607a      	str	r2, [r7, #4]
 800b8a8:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800b8aa:	7afb      	ldrb	r3, [r7, #11]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d178      	bne.n	800b9a2 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	3314      	adds	r3, #20
 800b8b4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b8bc:	2b02      	cmp	r3, #2
 800b8be:	d163      	bne.n	800b988 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	693a      	ldr	r2, [r7, #16]
 800b8c6:	8992      	ldrh	r2, [r2, #12]
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d91c      	bls.n	800b906 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	693a      	ldr	r2, [r7, #16]
 800b8d2:	8992      	ldrh	r2, [r2, #12]
 800b8d4:	1a9a      	subs	r2, r3, r2
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	691b      	ldr	r3, [r3, #16]
 800b8de:	693a      	ldr	r2, [r7, #16]
 800b8e0:	8992      	ldrh	r2, [r2, #12]
 800b8e2:	441a      	add	r2, r3
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	6919      	ldr	r1, [r3, #16]
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	68f8      	ldr	r0, [r7, #12]
 800b8f4:	f001 f8c4 	bl	800ca80 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	2100      	movs	r1, #0
 800b8fe:	68f8      	ldr	r0, [r7, #12]
 800b900:	f001 fe2e 	bl	800d560 <USBD_LL_PrepareReceive>
 800b904:	e040      	b.n	800b988 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	899b      	ldrh	r3, [r3, #12]
 800b90a:	461a      	mov	r2, r3
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	429a      	cmp	r2, r3
 800b912:	d11c      	bne.n	800b94e <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	693a      	ldr	r2, [r7, #16]
 800b91a:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d316      	bcc.n	800b94e <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	681a      	ldr	r2, [r3, #0]
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d20f      	bcs.n	800b94e <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b92e:	2200      	movs	r2, #0
 800b930:	2100      	movs	r1, #0
 800b932:	68f8      	ldr	r0, [r7, #12]
 800b934:	f001 f8a4 	bl	800ca80 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2200      	movs	r2, #0
 800b93c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b940:	2300      	movs	r3, #0
 800b942:	2200      	movs	r2, #0
 800b944:	2100      	movs	r1, #0
 800b946:	68f8      	ldr	r0, [r7, #12]
 800b948:	f001 fe0a 	bl	800d560 <USBD_LL_PrepareReceive>
 800b94c:	e01c      	b.n	800b988 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b954:	b2db      	uxtb	r3, r3
 800b956:	2b03      	cmp	r3, #3
 800b958:	d10f      	bne.n	800b97a <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b960:	68db      	ldr	r3, [r3, #12]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d009      	beq.n	800b97a <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2200      	movs	r2, #0
 800b96a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b974:	68db      	ldr	r3, [r3, #12]
 800b976:	68f8      	ldr	r0, [r7, #12]
 800b978:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b97a:	2180      	movs	r1, #128	@ 0x80
 800b97c:	68f8      	ldr	r0, [r7, #12]
 800b97e:	f001 fd45 	bl	800d40c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b982:	68f8      	ldr	r0, [r7, #12]
 800b984:	f001 f8d2 	bl	800cb2c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d03a      	beq.n	800ba08 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800b992:	68f8      	ldr	r0, [r7, #12]
 800b994:	f7ff fe30 	bl	800b5f8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2200      	movs	r2, #0
 800b99c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b9a0:	e032      	b.n	800ba08 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b9a2:	7afb      	ldrb	r3, [r7, #11]
 800b9a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b9a8:	b2db      	uxtb	r3, r3
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	68f8      	ldr	r0, [r7, #12]
 800b9ae:	f000 f986 	bl	800bcbe <USBD_CoreFindEP>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b9b6:	7dfb      	ldrb	r3, [r7, #23]
 800b9b8:	2bff      	cmp	r3, #255	@ 0xff
 800b9ba:	d025      	beq.n	800ba08 <USBD_LL_DataInStage+0x16c>
 800b9bc:	7dfb      	ldrb	r3, [r7, #23]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d122      	bne.n	800ba08 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9c8:	b2db      	uxtb	r3, r3
 800b9ca:	2b03      	cmp	r3, #3
 800b9cc:	d11c      	bne.n	800ba08 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b9ce:	7dfa      	ldrb	r2, [r7, #23]
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	32ae      	adds	r2, #174	@ 0xae
 800b9d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9d8:	695b      	ldr	r3, [r3, #20]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d014      	beq.n	800ba08 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800b9de:	7dfa      	ldrb	r2, [r7, #23]
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b9e6:	7dfa      	ldrb	r2, [r7, #23]
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	32ae      	adds	r2, #174	@ 0xae
 800b9ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9f0:	695b      	ldr	r3, [r3, #20]
 800b9f2:	7afa      	ldrb	r2, [r7, #11]
 800b9f4:	4611      	mov	r1, r2
 800b9f6:	68f8      	ldr	r0, [r7, #12]
 800b9f8:	4798      	blx	r3
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b9fe:	7dbb      	ldrb	r3, [r7, #22]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d001      	beq.n	800ba08 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800ba04:	7dbb      	ldrb	r3, [r7, #22]
 800ba06:	e000      	b.n	800ba0a <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800ba08:	2300      	movs	r3, #0
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3718      	adds	r7, #24
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}

0800ba12 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ba12:	b580      	push	{r7, lr}
 800ba14:	b084      	sub	sp, #16
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2201      	movs	r2, #1
 800ba22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2200      	movs	r2, #0
 800ba32:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2200      	movs	r2, #0
 800ba38:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d014      	beq.n	800ba78 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d00e      	beq.n	800ba78 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	6852      	ldr	r2, [r2, #4]
 800ba66:	b2d2      	uxtb	r2, r2
 800ba68:	4611      	mov	r1, r2
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	4798      	blx	r3
 800ba6e:	4603      	mov	r3, r0
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d001      	beq.n	800ba78 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ba74:	2303      	movs	r3, #3
 800ba76:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba78:	2340      	movs	r3, #64	@ 0x40
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	2100      	movs	r1, #0
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f001 fc7f 	bl	800d382 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2201      	movs	r2, #1
 800ba88:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2240      	movs	r2, #64	@ 0x40
 800ba90:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba94:	2340      	movs	r3, #64	@ 0x40
 800ba96:	2200      	movs	r2, #0
 800ba98:	2180      	movs	r1, #128	@ 0x80
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f001 fc71 	bl	800d382 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2201      	movs	r2, #1
 800baa4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2240      	movs	r2, #64	@ 0x40
 800baac:	841a      	strh	r2, [r3, #32]

  return ret;
 800baae:	7bfb      	ldrb	r3, [r7, #15]
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3710      	adds	r7, #16
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}

0800bab8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bab8:	b480      	push	{r7}
 800baba:	b083      	sub	sp, #12
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	460b      	mov	r3, r1
 800bac2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	78fa      	ldrb	r2, [r7, #3]
 800bac8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800baca:	2300      	movs	r3, #0
}
 800bacc:	4618      	mov	r0, r3
 800bace:	370c      	adds	r7, #12
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr

0800bad8 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bad8:	b480      	push	{r7}
 800bada:	b083      	sub	sp, #12
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	2b04      	cmp	r3, #4
 800baea:	d006      	beq.n	800bafa <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800baf2:	b2da      	uxtb	r2, r3
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2204      	movs	r2, #4
 800bafe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bb02:	2300      	movs	r3, #0
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	370c      	adds	r7, #12
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr

0800bb10 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b083      	sub	sp, #12
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb1e:	b2db      	uxtb	r3, r3
 800bb20:	2b04      	cmp	r3, #4
 800bb22:	d106      	bne.n	800bb32 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bb2a:	b2da      	uxtb	r2, r3
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	370c      	adds	r7, #12
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr

0800bb40 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b082      	sub	sp, #8
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb4e:	b2db      	uxtb	r3, r3
 800bb50:	2b03      	cmp	r3, #3
 800bb52:	d110      	bne.n	800bb76 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d00b      	beq.n	800bb76 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb64:	69db      	ldr	r3, [r3, #28]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d005      	beq.n	800bb76 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb70:	69db      	ldr	r3, [r3, #28]
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bb76:	2300      	movs	r3, #0
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3708      	adds	r7, #8
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b082      	sub	sp, #8
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	460b      	mov	r3, r1
 800bb8a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	32ae      	adds	r2, #174	@ 0xae
 800bb96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d101      	bne.n	800bba2 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bb9e:	2303      	movs	r3, #3
 800bba0:	e01c      	b.n	800bbdc <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bba8:	b2db      	uxtb	r3, r3
 800bbaa:	2b03      	cmp	r3, #3
 800bbac:	d115      	bne.n	800bbda <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	32ae      	adds	r2, #174	@ 0xae
 800bbb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbbc:	6a1b      	ldr	r3, [r3, #32]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d00b      	beq.n	800bbda <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	32ae      	adds	r2, #174	@ 0xae
 800bbcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbd0:	6a1b      	ldr	r3, [r3, #32]
 800bbd2:	78fa      	ldrb	r2, [r7, #3]
 800bbd4:	4611      	mov	r1, r2
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bbda:	2300      	movs	r3, #0
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3708      	adds	r7, #8
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}

0800bbe4 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b082      	sub	sp, #8
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	460b      	mov	r3, r1
 800bbee:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	32ae      	adds	r2, #174	@ 0xae
 800bbfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d101      	bne.n	800bc06 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bc02:	2303      	movs	r3, #3
 800bc04:	e01c      	b.n	800bc40 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	2b03      	cmp	r3, #3
 800bc10:	d115      	bne.n	800bc3e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	32ae      	adds	r2, #174	@ 0xae
 800bc1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d00b      	beq.n	800bc3e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	32ae      	adds	r2, #174	@ 0xae
 800bc30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc36:	78fa      	ldrb	r2, [r7, #3]
 800bc38:	4611      	mov	r1, r2
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc3e:	2300      	movs	r3, #0
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3708      	adds	r7, #8
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b083      	sub	sp, #12
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bc50:	2300      	movs	r3, #0
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	370c      	adds	r7, #12
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr

0800bc5e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bc5e:	b580      	push	{r7, lr}
 800bc60:	b084      	sub	sp, #16
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bc66:	2300      	movs	r3, #0
 800bc68:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d00e      	beq.n	800bc9a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	687a      	ldr	r2, [r7, #4]
 800bc86:	6852      	ldr	r2, [r2, #4]
 800bc88:	b2d2      	uxtb	r2, r2
 800bc8a:	4611      	mov	r1, r2
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	4798      	blx	r3
 800bc90:	4603      	mov	r3, r0
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d001      	beq.n	800bc9a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bc96:	2303      	movs	r3, #3
 800bc98:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bc9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3710      	adds	r7, #16
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	460b      	mov	r3, r1
 800bcae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bcb0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	370c      	adds	r7, #12
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbc:	4770      	bx	lr

0800bcbe <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bcbe:	b480      	push	{r7}
 800bcc0:	b083      	sub	sp, #12
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bcca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	370c      	adds	r7, #12
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd6:	4770      	bx	lr

0800bcd8 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b086      	sub	sp, #24
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	460b      	mov	r3, r1
 800bce2:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bcec:	2300      	movs	r3, #0
 800bcee:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	885b      	ldrh	r3, [r3, #2]
 800bcf4:	b29b      	uxth	r3, r3
 800bcf6:	68fa      	ldr	r2, [r7, #12]
 800bcf8:	7812      	ldrb	r2, [r2, #0]
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d91f      	bls.n	800bd3e <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	781b      	ldrb	r3, [r3, #0]
 800bd02:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bd04:	e013      	b.n	800bd2e <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bd06:	f107 030a 	add.w	r3, r7, #10
 800bd0a:	4619      	mov	r1, r3
 800bd0c:	6978      	ldr	r0, [r7, #20]
 800bd0e:	f000 f81b 	bl	800bd48 <USBD_GetNextDesc>
 800bd12:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	785b      	ldrb	r3, [r3, #1]
 800bd18:	2b05      	cmp	r3, #5
 800bd1a:	d108      	bne.n	800bd2e <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	789b      	ldrb	r3, [r3, #2]
 800bd24:	78fa      	ldrb	r2, [r7, #3]
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d008      	beq.n	800bd3c <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	885b      	ldrh	r3, [r3, #2]
 800bd32:	b29a      	uxth	r2, r3
 800bd34:	897b      	ldrh	r3, [r7, #10]
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d8e5      	bhi.n	800bd06 <USBD_GetEpDesc+0x2e>
 800bd3a:	e000      	b.n	800bd3e <USBD_GetEpDesc+0x66>
          break;
 800bd3c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bd3e:	693b      	ldr	r3, [r7, #16]
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3718      	adds	r7, #24
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b085      	sub	sp, #20
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	881b      	ldrh	r3, [r3, #0]
 800bd5a:	68fa      	ldr	r2, [r7, #12]
 800bd5c:	7812      	ldrb	r2, [r2, #0]
 800bd5e:	4413      	add	r3, r2
 800bd60:	b29a      	uxth	r2, r3
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	781b      	ldrb	r3, [r3, #0]
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	4413      	add	r3, r2
 800bd70:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bd72:	68fb      	ldr	r3, [r7, #12]
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3714      	adds	r7, #20
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr

0800bd80 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b087      	sub	sp, #28
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	781b      	ldrb	r3, [r3, #0]
 800bd90:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	3301      	adds	r3, #1
 800bd96:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bd9e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800bda2:	021b      	lsls	r3, r3, #8
 800bda4:	b21a      	sxth	r2, r3
 800bda6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	b21b      	sxth	r3, r3
 800bdae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bdb0:	89fb      	ldrh	r3, [r7, #14]
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	371c      	adds	r7, #28
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbc:	4770      	bx	lr
	...

0800bdc0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
 800bdc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bdd6:	2b40      	cmp	r3, #64	@ 0x40
 800bdd8:	d005      	beq.n	800bde6 <USBD_StdDevReq+0x26>
 800bdda:	2b40      	cmp	r3, #64	@ 0x40
 800bddc:	d857      	bhi.n	800be8e <USBD_StdDevReq+0xce>
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d00f      	beq.n	800be02 <USBD_StdDevReq+0x42>
 800bde2:	2b20      	cmp	r3, #32
 800bde4:	d153      	bne.n	800be8e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	32ae      	adds	r2, #174	@ 0xae
 800bdf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdf4:	689b      	ldr	r3, [r3, #8]
 800bdf6:	6839      	ldr	r1, [r7, #0]
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	4798      	blx	r3
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	73fb      	strb	r3, [r7, #15]
      break;
 800be00:	e04a      	b.n	800be98 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	785b      	ldrb	r3, [r3, #1]
 800be06:	2b09      	cmp	r3, #9
 800be08:	d83b      	bhi.n	800be82 <USBD_StdDevReq+0xc2>
 800be0a:	a201      	add	r2, pc, #4	@ (adr r2, 800be10 <USBD_StdDevReq+0x50>)
 800be0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be10:	0800be65 	.word	0x0800be65
 800be14:	0800be79 	.word	0x0800be79
 800be18:	0800be83 	.word	0x0800be83
 800be1c:	0800be6f 	.word	0x0800be6f
 800be20:	0800be83 	.word	0x0800be83
 800be24:	0800be43 	.word	0x0800be43
 800be28:	0800be39 	.word	0x0800be39
 800be2c:	0800be83 	.word	0x0800be83
 800be30:	0800be5b 	.word	0x0800be5b
 800be34:	0800be4d 	.word	0x0800be4d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800be38:	6839      	ldr	r1, [r7, #0]
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 fa3e 	bl	800c2bc <USBD_GetDescriptor>
          break;
 800be40:	e024      	b.n	800be8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800be42:	6839      	ldr	r1, [r7, #0]
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 fba3 	bl	800c590 <USBD_SetAddress>
          break;
 800be4a:	e01f      	b.n	800be8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800be4c:	6839      	ldr	r1, [r7, #0]
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f000 fbe2 	bl	800c618 <USBD_SetConfig>
 800be54:	4603      	mov	r3, r0
 800be56:	73fb      	strb	r3, [r7, #15]
          break;
 800be58:	e018      	b.n	800be8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800be5a:	6839      	ldr	r1, [r7, #0]
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f000 fc85 	bl	800c76c <USBD_GetConfig>
          break;
 800be62:	e013      	b.n	800be8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be64:	6839      	ldr	r1, [r7, #0]
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f000 fcb6 	bl	800c7d8 <USBD_GetStatus>
          break;
 800be6c:	e00e      	b.n	800be8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be6e:	6839      	ldr	r1, [r7, #0]
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f000 fce5 	bl	800c840 <USBD_SetFeature>
          break;
 800be76:	e009      	b.n	800be8c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800be78:	6839      	ldr	r1, [r7, #0]
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 fd09 	bl	800c892 <USBD_ClrFeature>
          break;
 800be80:	e004      	b.n	800be8c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800be82:	6839      	ldr	r1, [r7, #0]
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f000 fd60 	bl	800c94a <USBD_CtlError>
          break;
 800be8a:	bf00      	nop
      }
      break;
 800be8c:	e004      	b.n	800be98 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800be8e:	6839      	ldr	r1, [r7, #0]
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 fd5a 	bl	800c94a <USBD_CtlError>
      break;
 800be96:	bf00      	nop
  }

  return ret;
 800be98:	7bfb      	ldrb	r3, [r7, #15]
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3710      	adds	r7, #16
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}
 800bea2:	bf00      	nop

0800bea4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b084      	sub	sp, #16
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800beae:	2300      	movs	r3, #0
 800beb0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	781b      	ldrb	r3, [r3, #0]
 800beb6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800beba:	2b40      	cmp	r3, #64	@ 0x40
 800bebc:	d005      	beq.n	800beca <USBD_StdItfReq+0x26>
 800bebe:	2b40      	cmp	r3, #64	@ 0x40
 800bec0:	d852      	bhi.n	800bf68 <USBD_StdItfReq+0xc4>
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d001      	beq.n	800beca <USBD_StdItfReq+0x26>
 800bec6:	2b20      	cmp	r3, #32
 800bec8:	d14e      	bne.n	800bf68 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bed0:	b2db      	uxtb	r3, r3
 800bed2:	3b01      	subs	r3, #1
 800bed4:	2b02      	cmp	r3, #2
 800bed6:	d840      	bhi.n	800bf5a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	889b      	ldrh	r3, [r3, #4]
 800bedc:	b2db      	uxtb	r3, r3
 800bede:	2b01      	cmp	r3, #1
 800bee0:	d836      	bhi.n	800bf50 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	889b      	ldrh	r3, [r3, #4]
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	4619      	mov	r1, r3
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f7ff feda 	bl	800bca4 <USBD_CoreFindIF>
 800bef0:	4603      	mov	r3, r0
 800bef2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bef4:	7bbb      	ldrb	r3, [r7, #14]
 800bef6:	2bff      	cmp	r3, #255	@ 0xff
 800bef8:	d01d      	beq.n	800bf36 <USBD_StdItfReq+0x92>
 800befa:	7bbb      	ldrb	r3, [r7, #14]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d11a      	bne.n	800bf36 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bf00:	7bba      	ldrb	r2, [r7, #14]
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	32ae      	adds	r2, #174	@ 0xae
 800bf06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf0a:	689b      	ldr	r3, [r3, #8]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d00f      	beq.n	800bf30 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bf10:	7bba      	ldrb	r2, [r7, #14]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bf18:	7bba      	ldrb	r2, [r7, #14]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	32ae      	adds	r2, #174	@ 0xae
 800bf1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf22:	689b      	ldr	r3, [r3, #8]
 800bf24:	6839      	ldr	r1, [r7, #0]
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	4798      	blx	r3
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf2e:	e004      	b.n	800bf3a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bf30:	2303      	movs	r3, #3
 800bf32:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf34:	e001      	b.n	800bf3a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bf36:	2303      	movs	r3, #3
 800bf38:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	88db      	ldrh	r3, [r3, #6]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d110      	bne.n	800bf64 <USBD_StdItfReq+0xc0>
 800bf42:	7bfb      	ldrb	r3, [r7, #15]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d10d      	bne.n	800bf64 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f000 fddc 	bl	800cb06 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bf4e:	e009      	b.n	800bf64 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bf50:	6839      	ldr	r1, [r7, #0]
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f000 fcf9 	bl	800c94a <USBD_CtlError>
          break;
 800bf58:	e004      	b.n	800bf64 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bf5a:	6839      	ldr	r1, [r7, #0]
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f000 fcf4 	bl	800c94a <USBD_CtlError>
          break;
 800bf62:	e000      	b.n	800bf66 <USBD_StdItfReq+0xc2>
          break;
 800bf64:	bf00      	nop
      }
      break;
 800bf66:	e004      	b.n	800bf72 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bf68:	6839      	ldr	r1, [r7, #0]
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f000 fced 	bl	800c94a <USBD_CtlError>
      break;
 800bf70:	bf00      	nop
  }

  return ret;
 800bf72:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3710      	adds	r7, #16
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}

0800bf7c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b084      	sub	sp, #16
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bf86:	2300      	movs	r3, #0
 800bf88:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	889b      	ldrh	r3, [r3, #4]
 800bf8e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	781b      	ldrb	r3, [r3, #0]
 800bf94:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bf98:	2b40      	cmp	r3, #64	@ 0x40
 800bf9a:	d007      	beq.n	800bfac <USBD_StdEPReq+0x30>
 800bf9c:	2b40      	cmp	r3, #64	@ 0x40
 800bf9e:	f200 8181 	bhi.w	800c2a4 <USBD_StdEPReq+0x328>
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d02a      	beq.n	800bffc <USBD_StdEPReq+0x80>
 800bfa6:	2b20      	cmp	r3, #32
 800bfa8:	f040 817c 	bne.w	800c2a4 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bfac:	7bbb      	ldrb	r3, [r7, #14]
 800bfae:	4619      	mov	r1, r3
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f7ff fe84 	bl	800bcbe <USBD_CoreFindEP>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bfba:	7b7b      	ldrb	r3, [r7, #13]
 800bfbc:	2bff      	cmp	r3, #255	@ 0xff
 800bfbe:	f000 8176 	beq.w	800c2ae <USBD_StdEPReq+0x332>
 800bfc2:	7b7b      	ldrb	r3, [r7, #13]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	f040 8172 	bne.w	800c2ae <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800bfca:	7b7a      	ldrb	r2, [r7, #13]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bfd2:	7b7a      	ldrb	r2, [r7, #13]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	32ae      	adds	r2, #174	@ 0xae
 800bfd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfdc:	689b      	ldr	r3, [r3, #8]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	f000 8165 	beq.w	800c2ae <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bfe4:	7b7a      	ldrb	r2, [r7, #13]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	32ae      	adds	r2, #174	@ 0xae
 800bfea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfee:	689b      	ldr	r3, [r3, #8]
 800bff0:	6839      	ldr	r1, [r7, #0]
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	4798      	blx	r3
 800bff6:	4603      	mov	r3, r0
 800bff8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bffa:	e158      	b.n	800c2ae <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	785b      	ldrb	r3, [r3, #1]
 800c000:	2b03      	cmp	r3, #3
 800c002:	d008      	beq.n	800c016 <USBD_StdEPReq+0x9a>
 800c004:	2b03      	cmp	r3, #3
 800c006:	f300 8147 	bgt.w	800c298 <USBD_StdEPReq+0x31c>
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	f000 809b 	beq.w	800c146 <USBD_StdEPReq+0x1ca>
 800c010:	2b01      	cmp	r3, #1
 800c012:	d03c      	beq.n	800c08e <USBD_StdEPReq+0x112>
 800c014:	e140      	b.n	800c298 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c01c:	b2db      	uxtb	r3, r3
 800c01e:	2b02      	cmp	r3, #2
 800c020:	d002      	beq.n	800c028 <USBD_StdEPReq+0xac>
 800c022:	2b03      	cmp	r3, #3
 800c024:	d016      	beq.n	800c054 <USBD_StdEPReq+0xd8>
 800c026:	e02c      	b.n	800c082 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c028:	7bbb      	ldrb	r3, [r7, #14]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d00d      	beq.n	800c04a <USBD_StdEPReq+0xce>
 800c02e:	7bbb      	ldrb	r3, [r7, #14]
 800c030:	2b80      	cmp	r3, #128	@ 0x80
 800c032:	d00a      	beq.n	800c04a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c034:	7bbb      	ldrb	r3, [r7, #14]
 800c036:	4619      	mov	r1, r3
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f001 f9e7 	bl	800d40c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c03e:	2180      	movs	r1, #128	@ 0x80
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f001 f9e3 	bl	800d40c <USBD_LL_StallEP>
 800c046:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c048:	e020      	b.n	800c08c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c04a:	6839      	ldr	r1, [r7, #0]
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f000 fc7c 	bl	800c94a <USBD_CtlError>
              break;
 800c052:	e01b      	b.n	800c08c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	885b      	ldrh	r3, [r3, #2]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d10e      	bne.n	800c07a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c05c:	7bbb      	ldrb	r3, [r7, #14]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d00b      	beq.n	800c07a <USBD_StdEPReq+0xfe>
 800c062:	7bbb      	ldrb	r3, [r7, #14]
 800c064:	2b80      	cmp	r3, #128	@ 0x80
 800c066:	d008      	beq.n	800c07a <USBD_StdEPReq+0xfe>
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	88db      	ldrh	r3, [r3, #6]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d104      	bne.n	800c07a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c070:	7bbb      	ldrb	r3, [r7, #14]
 800c072:	4619      	mov	r1, r3
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f001 f9c9 	bl	800d40c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f000 fd43 	bl	800cb06 <USBD_CtlSendStatus>

              break;
 800c080:	e004      	b.n	800c08c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c082:	6839      	ldr	r1, [r7, #0]
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f000 fc60 	bl	800c94a <USBD_CtlError>
              break;
 800c08a:	bf00      	nop
          }
          break;
 800c08c:	e109      	b.n	800c2a2 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c094:	b2db      	uxtb	r3, r3
 800c096:	2b02      	cmp	r3, #2
 800c098:	d002      	beq.n	800c0a0 <USBD_StdEPReq+0x124>
 800c09a:	2b03      	cmp	r3, #3
 800c09c:	d016      	beq.n	800c0cc <USBD_StdEPReq+0x150>
 800c09e:	e04b      	b.n	800c138 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0a0:	7bbb      	ldrb	r3, [r7, #14]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d00d      	beq.n	800c0c2 <USBD_StdEPReq+0x146>
 800c0a6:	7bbb      	ldrb	r3, [r7, #14]
 800c0a8:	2b80      	cmp	r3, #128	@ 0x80
 800c0aa:	d00a      	beq.n	800c0c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0ac:	7bbb      	ldrb	r3, [r7, #14]
 800c0ae:	4619      	mov	r1, r3
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f001 f9ab 	bl	800d40c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0b6:	2180      	movs	r1, #128	@ 0x80
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f001 f9a7 	bl	800d40c <USBD_LL_StallEP>
 800c0be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c0c0:	e040      	b.n	800c144 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c0c2:	6839      	ldr	r1, [r7, #0]
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f000 fc40 	bl	800c94a <USBD_CtlError>
              break;
 800c0ca:	e03b      	b.n	800c144 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	885b      	ldrh	r3, [r3, #2]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d136      	bne.n	800c142 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c0d4:	7bbb      	ldrb	r3, [r7, #14]
 800c0d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d004      	beq.n	800c0e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c0de:	7bbb      	ldrb	r3, [r7, #14]
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f001 f9b1 	bl	800d44a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f000 fd0c 	bl	800cb06 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c0ee:	7bbb      	ldrb	r3, [r7, #14]
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f7ff fde3 	bl	800bcbe <USBD_CoreFindEP>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c0fc:	7b7b      	ldrb	r3, [r7, #13]
 800c0fe:	2bff      	cmp	r3, #255	@ 0xff
 800c100:	d01f      	beq.n	800c142 <USBD_StdEPReq+0x1c6>
 800c102:	7b7b      	ldrb	r3, [r7, #13]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d11c      	bne.n	800c142 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c108:	7b7a      	ldrb	r2, [r7, #13]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c110:	7b7a      	ldrb	r2, [r7, #13]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	32ae      	adds	r2, #174	@ 0xae
 800c116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c11a:	689b      	ldr	r3, [r3, #8]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d010      	beq.n	800c142 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c120:	7b7a      	ldrb	r2, [r7, #13]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	32ae      	adds	r2, #174	@ 0xae
 800c126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c12a:	689b      	ldr	r3, [r3, #8]
 800c12c:	6839      	ldr	r1, [r7, #0]
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	4798      	blx	r3
 800c132:	4603      	mov	r3, r0
 800c134:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c136:	e004      	b.n	800c142 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c138:	6839      	ldr	r1, [r7, #0]
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f000 fc05 	bl	800c94a <USBD_CtlError>
              break;
 800c140:	e000      	b.n	800c144 <USBD_StdEPReq+0x1c8>
              break;
 800c142:	bf00      	nop
          }
          break;
 800c144:	e0ad      	b.n	800c2a2 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c14c:	b2db      	uxtb	r3, r3
 800c14e:	2b02      	cmp	r3, #2
 800c150:	d002      	beq.n	800c158 <USBD_StdEPReq+0x1dc>
 800c152:	2b03      	cmp	r3, #3
 800c154:	d033      	beq.n	800c1be <USBD_StdEPReq+0x242>
 800c156:	e099      	b.n	800c28c <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c158:	7bbb      	ldrb	r3, [r7, #14]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d007      	beq.n	800c16e <USBD_StdEPReq+0x1f2>
 800c15e:	7bbb      	ldrb	r3, [r7, #14]
 800c160:	2b80      	cmp	r3, #128	@ 0x80
 800c162:	d004      	beq.n	800c16e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c164:	6839      	ldr	r1, [r7, #0]
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 fbef 	bl	800c94a <USBD_CtlError>
                break;
 800c16c:	e093      	b.n	800c296 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c16e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c172:	2b00      	cmp	r3, #0
 800c174:	da0b      	bge.n	800c18e <USBD_StdEPReq+0x212>
 800c176:	7bbb      	ldrb	r3, [r7, #14]
 800c178:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c17c:	4613      	mov	r3, r2
 800c17e:	009b      	lsls	r3, r3, #2
 800c180:	4413      	add	r3, r2
 800c182:	009b      	lsls	r3, r3, #2
 800c184:	3310      	adds	r3, #16
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	4413      	add	r3, r2
 800c18a:	3304      	adds	r3, #4
 800c18c:	e00b      	b.n	800c1a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c18e:	7bbb      	ldrb	r3, [r7, #14]
 800c190:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c194:	4613      	mov	r3, r2
 800c196:	009b      	lsls	r3, r3, #2
 800c198:	4413      	add	r3, r2
 800c19a:	009b      	lsls	r3, r3, #2
 800c19c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	4413      	add	r3, r2
 800c1a4:	3304      	adds	r3, #4
 800c1a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	330e      	adds	r3, #14
 800c1b2:	2202      	movs	r2, #2
 800c1b4:	4619      	mov	r1, r3
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f000 fc44 	bl	800ca44 <USBD_CtlSendData>
              break;
 800c1bc:	e06b      	b.n	800c296 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c1be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	da11      	bge.n	800c1ea <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c1c6:	7bbb      	ldrb	r3, [r7, #14]
 800c1c8:	f003 020f 	and.w	r2, r3, #15
 800c1cc:	6879      	ldr	r1, [r7, #4]
 800c1ce:	4613      	mov	r3, r2
 800c1d0:	009b      	lsls	r3, r3, #2
 800c1d2:	4413      	add	r3, r2
 800c1d4:	009b      	lsls	r3, r3, #2
 800c1d6:	440b      	add	r3, r1
 800c1d8:	3323      	adds	r3, #35	@ 0x23
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d117      	bne.n	800c210 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c1e0:	6839      	ldr	r1, [r7, #0]
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f000 fbb1 	bl	800c94a <USBD_CtlError>
                  break;
 800c1e8:	e055      	b.n	800c296 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c1ea:	7bbb      	ldrb	r3, [r7, #14]
 800c1ec:	f003 020f 	and.w	r2, r3, #15
 800c1f0:	6879      	ldr	r1, [r7, #4]
 800c1f2:	4613      	mov	r3, r2
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	4413      	add	r3, r2
 800c1f8:	009b      	lsls	r3, r3, #2
 800c1fa:	440b      	add	r3, r1
 800c1fc:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d104      	bne.n	800c210 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c206:	6839      	ldr	r1, [r7, #0]
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f000 fb9e 	bl	800c94a <USBD_CtlError>
                  break;
 800c20e:	e042      	b.n	800c296 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c210:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c214:	2b00      	cmp	r3, #0
 800c216:	da0b      	bge.n	800c230 <USBD_StdEPReq+0x2b4>
 800c218:	7bbb      	ldrb	r3, [r7, #14]
 800c21a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c21e:	4613      	mov	r3, r2
 800c220:	009b      	lsls	r3, r3, #2
 800c222:	4413      	add	r3, r2
 800c224:	009b      	lsls	r3, r3, #2
 800c226:	3310      	adds	r3, #16
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	4413      	add	r3, r2
 800c22c:	3304      	adds	r3, #4
 800c22e:	e00b      	b.n	800c248 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c230:	7bbb      	ldrb	r3, [r7, #14]
 800c232:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c236:	4613      	mov	r3, r2
 800c238:	009b      	lsls	r3, r3, #2
 800c23a:	4413      	add	r3, r2
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c242:	687a      	ldr	r2, [r7, #4]
 800c244:	4413      	add	r3, r2
 800c246:	3304      	adds	r3, #4
 800c248:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c24a:	7bbb      	ldrb	r3, [r7, #14]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d002      	beq.n	800c256 <USBD_StdEPReq+0x2da>
 800c250:	7bbb      	ldrb	r3, [r7, #14]
 800c252:	2b80      	cmp	r3, #128	@ 0x80
 800c254:	d103      	bne.n	800c25e <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	2200      	movs	r2, #0
 800c25a:	739a      	strb	r2, [r3, #14]
 800c25c:	e00e      	b.n	800c27c <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c25e:	7bbb      	ldrb	r3, [r7, #14]
 800c260:	4619      	mov	r1, r3
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f001 f910 	bl	800d488 <USBD_LL_IsStallEP>
 800c268:	4603      	mov	r3, r0
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d003      	beq.n	800c276 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	2201      	movs	r2, #1
 800c272:	739a      	strb	r2, [r3, #14]
 800c274:	e002      	b.n	800c27c <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	2200      	movs	r2, #0
 800c27a:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	330e      	adds	r3, #14
 800c280:	2202      	movs	r2, #2
 800c282:	4619      	mov	r1, r3
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f000 fbdd 	bl	800ca44 <USBD_CtlSendData>
              break;
 800c28a:	e004      	b.n	800c296 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800c28c:	6839      	ldr	r1, [r7, #0]
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 fb5b 	bl	800c94a <USBD_CtlError>
              break;
 800c294:	bf00      	nop
          }
          break;
 800c296:	e004      	b.n	800c2a2 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800c298:	6839      	ldr	r1, [r7, #0]
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f000 fb55 	bl	800c94a <USBD_CtlError>
          break;
 800c2a0:	bf00      	nop
      }
      break;
 800c2a2:	e005      	b.n	800c2b0 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800c2a4:	6839      	ldr	r1, [r7, #0]
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f000 fb4f 	bl	800c94a <USBD_CtlError>
      break;
 800c2ac:	e000      	b.n	800c2b0 <USBD_StdEPReq+0x334>
      break;
 800c2ae:	bf00      	nop
  }

  return ret;
 800c2b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3710      	adds	r7, #16
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
	...

0800c2bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	885b      	ldrh	r3, [r3, #2]
 800c2d6:	0a1b      	lsrs	r3, r3, #8
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	3b01      	subs	r3, #1
 800c2dc:	2b06      	cmp	r3, #6
 800c2de:	f200 8128 	bhi.w	800c532 <USBD_GetDescriptor+0x276>
 800c2e2:	a201      	add	r2, pc, #4	@ (adr r2, 800c2e8 <USBD_GetDescriptor+0x2c>)
 800c2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e8:	0800c305 	.word	0x0800c305
 800c2ec:	0800c31d 	.word	0x0800c31d
 800c2f0:	0800c35d 	.word	0x0800c35d
 800c2f4:	0800c533 	.word	0x0800c533
 800c2f8:	0800c533 	.word	0x0800c533
 800c2fc:	0800c4d3 	.word	0x0800c4d3
 800c300:	0800c4ff 	.word	0x0800c4ff
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	687a      	ldr	r2, [r7, #4]
 800c30e:	7c12      	ldrb	r2, [r2, #16]
 800c310:	f107 0108 	add.w	r1, r7, #8
 800c314:	4610      	mov	r0, r2
 800c316:	4798      	blx	r3
 800c318:	60f8      	str	r0, [r7, #12]
      break;
 800c31a:	e112      	b.n	800c542 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	7c1b      	ldrb	r3, [r3, #16]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d10d      	bne.n	800c340 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c32a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c32c:	f107 0208 	add.w	r2, r7, #8
 800c330:	4610      	mov	r0, r2
 800c332:	4798      	blx	r3
 800c334:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	3301      	adds	r3, #1
 800c33a:	2202      	movs	r2, #2
 800c33c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c33e:	e100      	b.n	800c542 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c348:	f107 0208 	add.w	r2, r7, #8
 800c34c:	4610      	mov	r0, r2
 800c34e:	4798      	blx	r3
 800c350:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	3301      	adds	r3, #1
 800c356:	2202      	movs	r2, #2
 800c358:	701a      	strb	r2, [r3, #0]
      break;
 800c35a:	e0f2      	b.n	800c542 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	885b      	ldrh	r3, [r3, #2]
 800c360:	b2db      	uxtb	r3, r3
 800c362:	2b05      	cmp	r3, #5
 800c364:	f200 80ac 	bhi.w	800c4c0 <USBD_GetDescriptor+0x204>
 800c368:	a201      	add	r2, pc, #4	@ (adr r2, 800c370 <USBD_GetDescriptor+0xb4>)
 800c36a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c36e:	bf00      	nop
 800c370:	0800c389 	.word	0x0800c389
 800c374:	0800c3bd 	.word	0x0800c3bd
 800c378:	0800c3f1 	.word	0x0800c3f1
 800c37c:	0800c425 	.word	0x0800c425
 800c380:	0800c459 	.word	0x0800c459
 800c384:	0800c48d 	.word	0x0800c48d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d00b      	beq.n	800c3ac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	687a      	ldr	r2, [r7, #4]
 800c39e:	7c12      	ldrb	r2, [r2, #16]
 800c3a0:	f107 0108 	add.w	r1, r7, #8
 800c3a4:	4610      	mov	r0, r2
 800c3a6:	4798      	blx	r3
 800c3a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3aa:	e091      	b.n	800c4d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3ac:	6839      	ldr	r1, [r7, #0]
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f000 facb 	bl	800c94a <USBD_CtlError>
            err++;
 800c3b4:	7afb      	ldrb	r3, [r7, #11]
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	72fb      	strb	r3, [r7, #11]
          break;
 800c3ba:	e089      	b.n	800c4d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3c2:	689b      	ldr	r3, [r3, #8]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d00b      	beq.n	800c3e0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3ce:	689b      	ldr	r3, [r3, #8]
 800c3d0:	687a      	ldr	r2, [r7, #4]
 800c3d2:	7c12      	ldrb	r2, [r2, #16]
 800c3d4:	f107 0108 	add.w	r1, r7, #8
 800c3d8:	4610      	mov	r0, r2
 800c3da:	4798      	blx	r3
 800c3dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3de:	e077      	b.n	800c4d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3e0:	6839      	ldr	r1, [r7, #0]
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f000 fab1 	bl	800c94a <USBD_CtlError>
            err++;
 800c3e8:	7afb      	ldrb	r3, [r7, #11]
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	72fb      	strb	r3, [r7, #11]
          break;
 800c3ee:	e06f      	b.n	800c4d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3f6:	68db      	ldr	r3, [r3, #12]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d00b      	beq.n	800c414 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c402:	68db      	ldr	r3, [r3, #12]
 800c404:	687a      	ldr	r2, [r7, #4]
 800c406:	7c12      	ldrb	r2, [r2, #16]
 800c408:	f107 0108 	add.w	r1, r7, #8
 800c40c:	4610      	mov	r0, r2
 800c40e:	4798      	blx	r3
 800c410:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c412:	e05d      	b.n	800c4d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c414:	6839      	ldr	r1, [r7, #0]
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f000 fa97 	bl	800c94a <USBD_CtlError>
            err++;
 800c41c:	7afb      	ldrb	r3, [r7, #11]
 800c41e:	3301      	adds	r3, #1
 800c420:	72fb      	strb	r3, [r7, #11]
          break;
 800c422:	e055      	b.n	800c4d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c42a:	691b      	ldr	r3, [r3, #16]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d00b      	beq.n	800c448 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c436:	691b      	ldr	r3, [r3, #16]
 800c438:	687a      	ldr	r2, [r7, #4]
 800c43a:	7c12      	ldrb	r2, [r2, #16]
 800c43c:	f107 0108 	add.w	r1, r7, #8
 800c440:	4610      	mov	r0, r2
 800c442:	4798      	blx	r3
 800c444:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c446:	e043      	b.n	800c4d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c448:	6839      	ldr	r1, [r7, #0]
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f000 fa7d 	bl	800c94a <USBD_CtlError>
            err++;
 800c450:	7afb      	ldrb	r3, [r7, #11]
 800c452:	3301      	adds	r3, #1
 800c454:	72fb      	strb	r3, [r7, #11]
          break;
 800c456:	e03b      	b.n	800c4d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c45e:	695b      	ldr	r3, [r3, #20]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d00b      	beq.n	800c47c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c46a:	695b      	ldr	r3, [r3, #20]
 800c46c:	687a      	ldr	r2, [r7, #4]
 800c46e:	7c12      	ldrb	r2, [r2, #16]
 800c470:	f107 0108 	add.w	r1, r7, #8
 800c474:	4610      	mov	r0, r2
 800c476:	4798      	blx	r3
 800c478:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c47a:	e029      	b.n	800c4d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c47c:	6839      	ldr	r1, [r7, #0]
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f000 fa63 	bl	800c94a <USBD_CtlError>
            err++;
 800c484:	7afb      	ldrb	r3, [r7, #11]
 800c486:	3301      	adds	r3, #1
 800c488:	72fb      	strb	r3, [r7, #11]
          break;
 800c48a:	e021      	b.n	800c4d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c492:	699b      	ldr	r3, [r3, #24]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d00b      	beq.n	800c4b0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c49e:	699b      	ldr	r3, [r3, #24]
 800c4a0:	687a      	ldr	r2, [r7, #4]
 800c4a2:	7c12      	ldrb	r2, [r2, #16]
 800c4a4:	f107 0108 	add.w	r1, r7, #8
 800c4a8:	4610      	mov	r0, r2
 800c4aa:	4798      	blx	r3
 800c4ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4ae:	e00f      	b.n	800c4d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c4b0:	6839      	ldr	r1, [r7, #0]
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f000 fa49 	bl	800c94a <USBD_CtlError>
            err++;
 800c4b8:	7afb      	ldrb	r3, [r7, #11]
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	72fb      	strb	r3, [r7, #11]
          break;
 800c4be:	e007      	b.n	800c4d0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c4c0:	6839      	ldr	r1, [r7, #0]
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f000 fa41 	bl	800c94a <USBD_CtlError>
          err++;
 800c4c8:	7afb      	ldrb	r3, [r7, #11]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c4ce:	bf00      	nop
      }
      break;
 800c4d0:	e037      	b.n	800c542 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	7c1b      	ldrb	r3, [r3, #16]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d109      	bne.n	800c4ee <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4e2:	f107 0208 	add.w	r2, r7, #8
 800c4e6:	4610      	mov	r0, r2
 800c4e8:	4798      	blx	r3
 800c4ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c4ec:	e029      	b.n	800c542 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c4ee:	6839      	ldr	r1, [r7, #0]
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f000 fa2a 	bl	800c94a <USBD_CtlError>
        err++;
 800c4f6:	7afb      	ldrb	r3, [r7, #11]
 800c4f8:	3301      	adds	r3, #1
 800c4fa:	72fb      	strb	r3, [r7, #11]
      break;
 800c4fc:	e021      	b.n	800c542 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	7c1b      	ldrb	r3, [r3, #16]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d10d      	bne.n	800c522 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c50c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c50e:	f107 0208 	add.w	r2, r7, #8
 800c512:	4610      	mov	r0, r2
 800c514:	4798      	blx	r3
 800c516:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	3301      	adds	r3, #1
 800c51c:	2207      	movs	r2, #7
 800c51e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c520:	e00f      	b.n	800c542 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c522:	6839      	ldr	r1, [r7, #0]
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f000 fa10 	bl	800c94a <USBD_CtlError>
        err++;
 800c52a:	7afb      	ldrb	r3, [r7, #11]
 800c52c:	3301      	adds	r3, #1
 800c52e:	72fb      	strb	r3, [r7, #11]
      break;
 800c530:	e007      	b.n	800c542 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c532:	6839      	ldr	r1, [r7, #0]
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f000 fa08 	bl	800c94a <USBD_CtlError>
      err++;
 800c53a:	7afb      	ldrb	r3, [r7, #11]
 800c53c:	3301      	adds	r3, #1
 800c53e:	72fb      	strb	r3, [r7, #11]
      break;
 800c540:	bf00      	nop
  }

  if (err != 0U)
 800c542:	7afb      	ldrb	r3, [r7, #11]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d11e      	bne.n	800c586 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	88db      	ldrh	r3, [r3, #6]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d016      	beq.n	800c57e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c550:	893b      	ldrh	r3, [r7, #8]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d00e      	beq.n	800c574 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	88da      	ldrh	r2, [r3, #6]
 800c55a:	893b      	ldrh	r3, [r7, #8]
 800c55c:	4293      	cmp	r3, r2
 800c55e:	bf28      	it	cs
 800c560:	4613      	movcs	r3, r2
 800c562:	b29b      	uxth	r3, r3
 800c564:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c566:	893b      	ldrh	r3, [r7, #8]
 800c568:	461a      	mov	r2, r3
 800c56a:	68f9      	ldr	r1, [r7, #12]
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f000 fa69 	bl	800ca44 <USBD_CtlSendData>
 800c572:	e009      	b.n	800c588 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c574:	6839      	ldr	r1, [r7, #0]
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f000 f9e7 	bl	800c94a <USBD_CtlError>
 800c57c:	e004      	b.n	800c588 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f000 fac1 	bl	800cb06 <USBD_CtlSendStatus>
 800c584:	e000      	b.n	800c588 <USBD_GetDescriptor+0x2cc>
    return;
 800c586:	bf00      	nop
  }
}
 800c588:	3710      	adds	r7, #16
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	bf00      	nop

0800c590 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b084      	sub	sp, #16
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	889b      	ldrh	r3, [r3, #4]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d131      	bne.n	800c606 <USBD_SetAddress+0x76>
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	88db      	ldrh	r3, [r3, #6]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d12d      	bne.n	800c606 <USBD_SetAddress+0x76>
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	885b      	ldrh	r3, [r3, #2]
 800c5ae:	2b7f      	cmp	r3, #127	@ 0x7f
 800c5b0:	d829      	bhi.n	800c606 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	885b      	ldrh	r3, [r3, #2]
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c5bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5c4:	b2db      	uxtb	r3, r3
 800c5c6:	2b03      	cmp	r3, #3
 800c5c8:	d104      	bne.n	800c5d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c5ca:	6839      	ldr	r1, [r7, #0]
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f000 f9bc 	bl	800c94a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5d2:	e01d      	b.n	800c610 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	7bfa      	ldrb	r2, [r7, #15]
 800c5d8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c5dc:	7bfb      	ldrb	r3, [r7, #15]
 800c5de:	4619      	mov	r1, r3
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f000 ff7d 	bl	800d4e0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 fa8d 	bl	800cb06 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c5ec:	7bfb      	ldrb	r3, [r7, #15]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d004      	beq.n	800c5fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2202      	movs	r2, #2
 800c5f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5fa:	e009      	b.n	800c610 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2201      	movs	r2, #1
 800c600:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c604:	e004      	b.n	800c610 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c606:	6839      	ldr	r1, [r7, #0]
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f000 f99e 	bl	800c94a <USBD_CtlError>
  }
}
 800c60e:	bf00      	nop
 800c610:	bf00      	nop
 800c612:	3710      	adds	r7, #16
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}

0800c618 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b084      	sub	sp, #16
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
 800c620:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c622:	2300      	movs	r3, #0
 800c624:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	885b      	ldrh	r3, [r3, #2]
 800c62a:	b2da      	uxtb	r2, r3
 800c62c:	4b4e      	ldr	r3, [pc, #312]	@ (800c768 <USBD_SetConfig+0x150>)
 800c62e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c630:	4b4d      	ldr	r3, [pc, #308]	@ (800c768 <USBD_SetConfig+0x150>)
 800c632:	781b      	ldrb	r3, [r3, #0]
 800c634:	2b01      	cmp	r3, #1
 800c636:	d905      	bls.n	800c644 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c638:	6839      	ldr	r1, [r7, #0]
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f000 f985 	bl	800c94a <USBD_CtlError>
    return USBD_FAIL;
 800c640:	2303      	movs	r3, #3
 800c642:	e08c      	b.n	800c75e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c64a:	b2db      	uxtb	r3, r3
 800c64c:	2b02      	cmp	r3, #2
 800c64e:	d002      	beq.n	800c656 <USBD_SetConfig+0x3e>
 800c650:	2b03      	cmp	r3, #3
 800c652:	d029      	beq.n	800c6a8 <USBD_SetConfig+0x90>
 800c654:	e075      	b.n	800c742 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c656:	4b44      	ldr	r3, [pc, #272]	@ (800c768 <USBD_SetConfig+0x150>)
 800c658:	781b      	ldrb	r3, [r3, #0]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d020      	beq.n	800c6a0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c65e:	4b42      	ldr	r3, [pc, #264]	@ (800c768 <USBD_SetConfig+0x150>)
 800c660:	781b      	ldrb	r3, [r3, #0]
 800c662:	461a      	mov	r2, r3
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c668:	4b3f      	ldr	r3, [pc, #252]	@ (800c768 <USBD_SetConfig+0x150>)
 800c66a:	781b      	ldrb	r3, [r3, #0]
 800c66c:	4619      	mov	r1, r3
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f7fe ffcd 	bl	800b60e <USBD_SetClassConfig>
 800c674:	4603      	mov	r3, r0
 800c676:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c678:	7bfb      	ldrb	r3, [r7, #15]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d008      	beq.n	800c690 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c67e:	6839      	ldr	r1, [r7, #0]
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f000 f962 	bl	800c94a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2202      	movs	r2, #2
 800c68a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c68e:	e065      	b.n	800c75c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f000 fa38 	bl	800cb06 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2203      	movs	r2, #3
 800c69a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c69e:	e05d      	b.n	800c75c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f000 fa30 	bl	800cb06 <USBD_CtlSendStatus>
      break;
 800c6a6:	e059      	b.n	800c75c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c6a8:	4b2f      	ldr	r3, [pc, #188]	@ (800c768 <USBD_SetConfig+0x150>)
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d112      	bne.n	800c6d6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2202      	movs	r2, #2
 800c6b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c6b8:	4b2b      	ldr	r3, [pc, #172]	@ (800c768 <USBD_SetConfig+0x150>)
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	461a      	mov	r2, r3
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c6c2:	4b29      	ldr	r3, [pc, #164]	@ (800c768 <USBD_SetConfig+0x150>)
 800c6c4:	781b      	ldrb	r3, [r3, #0]
 800c6c6:	4619      	mov	r1, r3
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f7fe ffbc 	bl	800b646 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f000 fa19 	bl	800cb06 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c6d4:	e042      	b.n	800c75c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c6d6:	4b24      	ldr	r3, [pc, #144]	@ (800c768 <USBD_SetConfig+0x150>)
 800c6d8:	781b      	ldrb	r3, [r3, #0]
 800c6da:	461a      	mov	r2, r3
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d02a      	beq.n	800c73a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	685b      	ldr	r3, [r3, #4]
 800c6e8:	b2db      	uxtb	r3, r3
 800c6ea:	4619      	mov	r1, r3
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f7fe ffaa 	bl	800b646 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c6f2:	4b1d      	ldr	r3, [pc, #116]	@ (800c768 <USBD_SetConfig+0x150>)
 800c6f4:	781b      	ldrb	r3, [r3, #0]
 800c6f6:	461a      	mov	r2, r3
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c6fc:	4b1a      	ldr	r3, [pc, #104]	@ (800c768 <USBD_SetConfig+0x150>)
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	4619      	mov	r1, r3
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f7fe ff83 	bl	800b60e <USBD_SetClassConfig>
 800c708:	4603      	mov	r3, r0
 800c70a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c70c:	7bfb      	ldrb	r3, [r7, #15]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d00f      	beq.n	800c732 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c712:	6839      	ldr	r1, [r7, #0]
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f000 f918 	bl	800c94a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	685b      	ldr	r3, [r3, #4]
 800c71e:	b2db      	uxtb	r3, r3
 800c720:	4619      	mov	r1, r3
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f7fe ff8f 	bl	800b646 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2202      	movs	r2, #2
 800c72c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c730:	e014      	b.n	800c75c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f000 f9e7 	bl	800cb06 <USBD_CtlSendStatus>
      break;
 800c738:	e010      	b.n	800c75c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f000 f9e3 	bl	800cb06 <USBD_CtlSendStatus>
      break;
 800c740:	e00c      	b.n	800c75c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c742:	6839      	ldr	r1, [r7, #0]
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f000 f900 	bl	800c94a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c74a:	4b07      	ldr	r3, [pc, #28]	@ (800c768 <USBD_SetConfig+0x150>)
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	4619      	mov	r1, r3
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f7fe ff78 	bl	800b646 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c756:	2303      	movs	r3, #3
 800c758:	73fb      	strb	r3, [r7, #15]
      break;
 800c75a:	bf00      	nop
  }

  return ret;
 800c75c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3710      	adds	r7, #16
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}
 800c766:	bf00      	nop
 800c768:	200007e0 	.word	0x200007e0

0800c76c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b082      	sub	sp, #8
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	88db      	ldrh	r3, [r3, #6]
 800c77a:	2b01      	cmp	r3, #1
 800c77c:	d004      	beq.n	800c788 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c77e:	6839      	ldr	r1, [r7, #0]
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f000 f8e2 	bl	800c94a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c786:	e023      	b.n	800c7d0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c78e:	b2db      	uxtb	r3, r3
 800c790:	2b02      	cmp	r3, #2
 800c792:	dc02      	bgt.n	800c79a <USBD_GetConfig+0x2e>
 800c794:	2b00      	cmp	r3, #0
 800c796:	dc03      	bgt.n	800c7a0 <USBD_GetConfig+0x34>
 800c798:	e015      	b.n	800c7c6 <USBD_GetConfig+0x5a>
 800c79a:	2b03      	cmp	r3, #3
 800c79c:	d00b      	beq.n	800c7b6 <USBD_GetConfig+0x4a>
 800c79e:	e012      	b.n	800c7c6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	3308      	adds	r3, #8
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f000 f948 	bl	800ca44 <USBD_CtlSendData>
        break;
 800c7b4:	e00c      	b.n	800c7d0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	3304      	adds	r3, #4
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	4619      	mov	r1, r3
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f000 f940 	bl	800ca44 <USBD_CtlSendData>
        break;
 800c7c4:	e004      	b.n	800c7d0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c7c6:	6839      	ldr	r1, [r7, #0]
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f000 f8be 	bl	800c94a <USBD_CtlError>
        break;
 800c7ce:	bf00      	nop
}
 800c7d0:	bf00      	nop
 800c7d2:	3708      	adds	r7, #8
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}

0800c7d8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b082      	sub	sp, #8
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7e8:	b2db      	uxtb	r3, r3
 800c7ea:	3b01      	subs	r3, #1
 800c7ec:	2b02      	cmp	r3, #2
 800c7ee:	d81e      	bhi.n	800c82e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	88db      	ldrh	r3, [r3, #6]
 800c7f4:	2b02      	cmp	r3, #2
 800c7f6:	d004      	beq.n	800c802 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c7f8:	6839      	ldr	r1, [r7, #0]
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 f8a5 	bl	800c94a <USBD_CtlError>
        break;
 800c800:	e01a      	b.n	800c838 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2201      	movs	r2, #1
 800c806:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d005      	beq.n	800c81e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	68db      	ldr	r3, [r3, #12]
 800c816:	f043 0202 	orr.w	r2, r3, #2
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	330c      	adds	r3, #12
 800c822:	2202      	movs	r2, #2
 800c824:	4619      	mov	r1, r3
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f000 f90c 	bl	800ca44 <USBD_CtlSendData>
      break;
 800c82c:	e004      	b.n	800c838 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c82e:	6839      	ldr	r1, [r7, #0]
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f000 f88a 	bl	800c94a <USBD_CtlError>
      break;
 800c836:	bf00      	nop
  }
}
 800c838:	bf00      	nop
 800c83a:	3708      	adds	r7, #8
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}

0800c840 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b082      	sub	sp, #8
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	885b      	ldrh	r3, [r3, #2]
 800c84e:	2b01      	cmp	r3, #1
 800c850:	d107      	bne.n	800c862 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2201      	movs	r2, #1
 800c856:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f000 f953 	bl	800cb06 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c860:	e013      	b.n	800c88a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	885b      	ldrh	r3, [r3, #2]
 800c866:	2b02      	cmp	r3, #2
 800c868:	d10b      	bne.n	800c882 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	889b      	ldrh	r3, [r3, #4]
 800c86e:	0a1b      	lsrs	r3, r3, #8
 800c870:	b29b      	uxth	r3, r3
 800c872:	b2da      	uxtb	r2, r3
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 f943 	bl	800cb06 <USBD_CtlSendStatus>
}
 800c880:	e003      	b.n	800c88a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c882:	6839      	ldr	r1, [r7, #0]
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f000 f860 	bl	800c94a <USBD_CtlError>
}
 800c88a:	bf00      	nop
 800c88c:	3708      	adds	r7, #8
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}

0800c892 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c892:	b580      	push	{r7, lr}
 800c894:	b082      	sub	sp, #8
 800c896:	af00      	add	r7, sp, #0
 800c898:	6078      	str	r0, [r7, #4]
 800c89a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	3b01      	subs	r3, #1
 800c8a6:	2b02      	cmp	r3, #2
 800c8a8:	d80b      	bhi.n	800c8c2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	885b      	ldrh	r3, [r3, #2]
 800c8ae:	2b01      	cmp	r3, #1
 800c8b0:	d10c      	bne.n	800c8cc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f000 f923 	bl	800cb06 <USBD_CtlSendStatus>
      }
      break;
 800c8c0:	e004      	b.n	800c8cc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c8c2:	6839      	ldr	r1, [r7, #0]
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f000 f840 	bl	800c94a <USBD_CtlError>
      break;
 800c8ca:	e000      	b.n	800c8ce <USBD_ClrFeature+0x3c>
      break;
 800c8cc:	bf00      	nop
  }
}
 800c8ce:	bf00      	nop
 800c8d0:	3708      	adds	r7, #8
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}

0800c8d6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c8d6:	b580      	push	{r7, lr}
 800c8d8:	b084      	sub	sp, #16
 800c8da:	af00      	add	r7, sp, #0
 800c8dc:	6078      	str	r0, [r7, #4]
 800c8de:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	781a      	ldrb	r2, [r3, #0]
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	3301      	adds	r3, #1
 800c8f0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	781a      	ldrb	r2, [r3, #0]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	3301      	adds	r3, #1
 800c8fe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c900:	68f8      	ldr	r0, [r7, #12]
 800c902:	f7ff fa3d 	bl	800bd80 <SWAPBYTE>
 800c906:	4603      	mov	r3, r0
 800c908:	461a      	mov	r2, r3
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	3301      	adds	r3, #1
 800c912:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	3301      	adds	r3, #1
 800c918:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c91a:	68f8      	ldr	r0, [r7, #12]
 800c91c:	f7ff fa30 	bl	800bd80 <SWAPBYTE>
 800c920:	4603      	mov	r3, r0
 800c922:	461a      	mov	r2, r3
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	3301      	adds	r3, #1
 800c92c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	3301      	adds	r3, #1
 800c932:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c934:	68f8      	ldr	r0, [r7, #12]
 800c936:	f7ff fa23 	bl	800bd80 <SWAPBYTE>
 800c93a:	4603      	mov	r3, r0
 800c93c:	461a      	mov	r2, r3
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	80da      	strh	r2, [r3, #6]
}
 800c942:	bf00      	nop
 800c944:	3710      	adds	r7, #16
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}

0800c94a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c94a:	b580      	push	{r7, lr}
 800c94c:	b082      	sub	sp, #8
 800c94e:	af00      	add	r7, sp, #0
 800c950:	6078      	str	r0, [r7, #4]
 800c952:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c954:	2180      	movs	r1, #128	@ 0x80
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f000 fd58 	bl	800d40c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c95c:	2100      	movs	r1, #0
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f000 fd54 	bl	800d40c <USBD_LL_StallEP>
}
 800c964:	bf00      	nop
 800c966:	3708      	adds	r7, #8
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b086      	sub	sp, #24
 800c970:	af00      	add	r7, sp, #0
 800c972:	60f8      	str	r0, [r7, #12]
 800c974:	60b9      	str	r1, [r7, #8]
 800c976:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c978:	2300      	movs	r3, #0
 800c97a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d042      	beq.n	800ca08 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c986:	6938      	ldr	r0, [r7, #16]
 800c988:	f000 f842 	bl	800ca10 <USBD_GetLen>
 800c98c:	4603      	mov	r3, r0
 800c98e:	3301      	adds	r3, #1
 800c990:	005b      	lsls	r3, r3, #1
 800c992:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c996:	d808      	bhi.n	800c9aa <USBD_GetString+0x3e>
 800c998:	6938      	ldr	r0, [r7, #16]
 800c99a:	f000 f839 	bl	800ca10 <USBD_GetLen>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	3301      	adds	r3, #1
 800c9a2:	b29b      	uxth	r3, r3
 800c9a4:	005b      	lsls	r3, r3, #1
 800c9a6:	b29a      	uxth	r2, r3
 800c9a8:	e001      	b.n	800c9ae <USBD_GetString+0x42>
 800c9aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c9b2:	7dfb      	ldrb	r3, [r7, #23]
 800c9b4:	68ba      	ldr	r2, [r7, #8]
 800c9b6:	4413      	add	r3, r2
 800c9b8:	687a      	ldr	r2, [r7, #4]
 800c9ba:	7812      	ldrb	r2, [r2, #0]
 800c9bc:	701a      	strb	r2, [r3, #0]
  idx++;
 800c9be:	7dfb      	ldrb	r3, [r7, #23]
 800c9c0:	3301      	adds	r3, #1
 800c9c2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c9c4:	7dfb      	ldrb	r3, [r7, #23]
 800c9c6:	68ba      	ldr	r2, [r7, #8]
 800c9c8:	4413      	add	r3, r2
 800c9ca:	2203      	movs	r2, #3
 800c9cc:	701a      	strb	r2, [r3, #0]
  idx++;
 800c9ce:	7dfb      	ldrb	r3, [r7, #23]
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c9d4:	e013      	b.n	800c9fe <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c9d6:	7dfb      	ldrb	r3, [r7, #23]
 800c9d8:	68ba      	ldr	r2, [r7, #8]
 800c9da:	4413      	add	r3, r2
 800c9dc:	693a      	ldr	r2, [r7, #16]
 800c9de:	7812      	ldrb	r2, [r2, #0]
 800c9e0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	3301      	adds	r3, #1
 800c9e6:	613b      	str	r3, [r7, #16]
    idx++;
 800c9e8:	7dfb      	ldrb	r3, [r7, #23]
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c9ee:	7dfb      	ldrb	r3, [r7, #23]
 800c9f0:	68ba      	ldr	r2, [r7, #8]
 800c9f2:	4413      	add	r3, r2
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	701a      	strb	r2, [r3, #0]
    idx++;
 800c9f8:	7dfb      	ldrb	r3, [r7, #23]
 800c9fa:	3301      	adds	r3, #1
 800c9fc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d1e7      	bne.n	800c9d6 <USBD_GetString+0x6a>
 800ca06:	e000      	b.n	800ca0a <USBD_GetString+0x9e>
    return;
 800ca08:	bf00      	nop
  }
}
 800ca0a:	3718      	adds	r7, #24
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b085      	sub	sp, #20
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ca20:	e005      	b.n	800ca2e <USBD_GetLen+0x1e>
  {
    len++;
 800ca22:	7bfb      	ldrb	r3, [r7, #15]
 800ca24:	3301      	adds	r3, #1
 800ca26:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	3301      	adds	r3, #1
 800ca2c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	781b      	ldrb	r3, [r3, #0]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d1f5      	bne.n	800ca22 <USBD_GetLen+0x12>
  }

  return len;
 800ca36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3714      	adds	r7, #20
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca42:	4770      	bx	lr

0800ca44 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b084      	sub	sp, #16
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	60f8      	str	r0, [r7, #12]
 800ca4c:	60b9      	str	r1, [r7, #8]
 800ca4e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	2202      	movs	r2, #2
 800ca54:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	687a      	ldr	r2, [r7, #4]
 800ca5c:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	68ba      	ldr	r2, [r7, #8]
 800ca62:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	687a      	ldr	r2, [r7, #4]
 800ca68:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	68ba      	ldr	r2, [r7, #8]
 800ca6e:	2100      	movs	r1, #0
 800ca70:	68f8      	ldr	r0, [r7, #12]
 800ca72:	f000 fd54 	bl	800d51e <USBD_LL_Transmit>

  return USBD_OK;
 800ca76:	2300      	movs	r3, #0
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3710      	adds	r7, #16
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}

0800ca80 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b084      	sub	sp, #16
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	60f8      	str	r0, [r7, #12]
 800ca88:	60b9      	str	r1, [r7, #8]
 800ca8a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	68ba      	ldr	r2, [r7, #8]
 800ca90:	2100      	movs	r1, #0
 800ca92:	68f8      	ldr	r0, [r7, #12]
 800ca94:	f000 fd43 	bl	800d51e <USBD_LL_Transmit>

  return USBD_OK;
 800ca98:	2300      	movs	r3, #0
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3710      	adds	r7, #16
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}

0800caa2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800caa2:	b580      	push	{r7, lr}
 800caa4:	b084      	sub	sp, #16
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	60f8      	str	r0, [r7, #12]
 800caaa:	60b9      	str	r1, [r7, #8]
 800caac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	2203      	movs	r2, #3
 800cab2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	687a      	ldr	r2, [r7, #4]
 800caba:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	68ba      	ldr	r2, [r7, #8]
 800cac2:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	687a      	ldr	r2, [r7, #4]
 800caca:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	68ba      	ldr	r2, [r7, #8]
 800cad2:	2100      	movs	r1, #0
 800cad4:	68f8      	ldr	r0, [r7, #12]
 800cad6:	f000 fd43 	bl	800d560 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cada:	2300      	movs	r3, #0
}
 800cadc:	4618      	mov	r0, r3
 800cade:	3710      	adds	r7, #16
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}

0800cae4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b084      	sub	sp, #16
 800cae8:	af00      	add	r7, sp, #0
 800caea:	60f8      	str	r0, [r7, #12]
 800caec:	60b9      	str	r1, [r7, #8]
 800caee:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	68ba      	ldr	r2, [r7, #8]
 800caf4:	2100      	movs	r1, #0
 800caf6:	68f8      	ldr	r0, [r7, #12]
 800caf8:	f000 fd32 	bl	800d560 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cafc:	2300      	movs	r3, #0
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3710      	adds	r7, #16
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}

0800cb06 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb06:	b580      	push	{r7, lr}
 800cb08:	b082      	sub	sp, #8
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2204      	movs	r2, #4
 800cb12:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cb16:	2300      	movs	r3, #0
 800cb18:	2200      	movs	r2, #0
 800cb1a:	2100      	movs	r1, #0
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f000 fcfe 	bl	800d51e <USBD_LL_Transmit>

  return USBD_OK;
 800cb22:	2300      	movs	r3, #0
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3708      	adds	r7, #8
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}

0800cb2c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b082      	sub	sp, #8
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2205      	movs	r2, #5
 800cb38:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	2200      	movs	r2, #0
 800cb40:	2100      	movs	r1, #0
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f000 fd0c 	bl	800d560 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb48:	2300      	movs	r3, #0
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3708      	adds	r7, #8
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
	...

0800cb54 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cb58:	2200      	movs	r2, #0
 800cb5a:	4912      	ldr	r1, [pc, #72]	@ (800cba4 <MX_USB_DEVICE_Init+0x50>)
 800cb5c:	4812      	ldr	r0, [pc, #72]	@ (800cba8 <MX_USB_DEVICE_Init+0x54>)
 800cb5e:	f7fe fcd9 	bl	800b514 <USBD_Init>
 800cb62:	4603      	mov	r3, r0
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d001      	beq.n	800cb6c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cb68:	f7f4 fbd4 	bl	8001314 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cb6c:	490f      	ldr	r1, [pc, #60]	@ (800cbac <MX_USB_DEVICE_Init+0x58>)
 800cb6e:	480e      	ldr	r0, [pc, #56]	@ (800cba8 <MX_USB_DEVICE_Init+0x54>)
 800cb70:	f7fe fd00 	bl	800b574 <USBD_RegisterClass>
 800cb74:	4603      	mov	r3, r0
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d001      	beq.n	800cb7e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cb7a:	f7f4 fbcb 	bl	8001314 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cb7e:	490c      	ldr	r1, [pc, #48]	@ (800cbb0 <MX_USB_DEVICE_Init+0x5c>)
 800cb80:	4809      	ldr	r0, [pc, #36]	@ (800cba8 <MX_USB_DEVICE_Init+0x54>)
 800cb82:	f7fe fbf7 	bl	800b374 <USBD_CDC_RegisterInterface>
 800cb86:	4603      	mov	r3, r0
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d001      	beq.n	800cb90 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cb8c:	f7f4 fbc2 	bl	8001314 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cb90:	4805      	ldr	r0, [pc, #20]	@ (800cba8 <MX_USB_DEVICE_Init+0x54>)
 800cb92:	f7fe fd25 	bl	800b5e0 <USBD_Start>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d001      	beq.n	800cba0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cb9c:	f7f4 fbba 	bl	8001314 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cba0:	bf00      	nop
 800cba2:	bd80      	pop	{r7, pc}
 800cba4:	200000b8 	.word	0x200000b8
 800cba8:	200007e4 	.word	0x200007e4
 800cbac:	2000001c 	.word	0x2000001c
 800cbb0:	200000a4 	.word	0x200000a4

0800cbb4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cbb8:	2200      	movs	r2, #0
 800cbba:	4905      	ldr	r1, [pc, #20]	@ (800cbd0 <CDC_Init_FS+0x1c>)
 800cbbc:	4805      	ldr	r0, [pc, #20]	@ (800cbd4 <CDC_Init_FS+0x20>)
 800cbbe:	f7fe fbf3 	bl	800b3a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cbc2:	4905      	ldr	r1, [pc, #20]	@ (800cbd8 <CDC_Init_FS+0x24>)
 800cbc4:	4803      	ldr	r0, [pc, #12]	@ (800cbd4 <CDC_Init_FS+0x20>)
 800cbc6:	f7fe fc11 	bl	800b3ec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cbca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	bd80      	pop	{r7, pc}
 800cbd0:	20000cc0 	.word	0x20000cc0
 800cbd4:	200007e4 	.word	0x200007e4
 800cbd8:	20000ac0 	.word	0x20000ac0

0800cbdc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cbdc:	b480      	push	{r7}
 800cbde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cbe0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbea:	4770      	bx	lr

0800cbec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cbec:	b480      	push	{r7}
 800cbee:	b083      	sub	sp, #12
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	6039      	str	r1, [r7, #0]
 800cbf6:	71fb      	strb	r3, [r7, #7]
 800cbf8:	4613      	mov	r3, r2
 800cbfa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cbfc:	79fb      	ldrb	r3, [r7, #7]
 800cbfe:	2b23      	cmp	r3, #35	@ 0x23
 800cc00:	f200 8098 	bhi.w	800cd34 <CDC_Control_FS+0x148>
 800cc04:	a201      	add	r2, pc, #4	@ (adr r2, 800cc0c <CDC_Control_FS+0x20>)
 800cc06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc0a:	bf00      	nop
 800cc0c:	0800cd35 	.word	0x0800cd35
 800cc10:	0800cd35 	.word	0x0800cd35
 800cc14:	0800cd35 	.word	0x0800cd35
 800cc18:	0800cd35 	.word	0x0800cd35
 800cc1c:	0800cd35 	.word	0x0800cd35
 800cc20:	0800cd35 	.word	0x0800cd35
 800cc24:	0800cd35 	.word	0x0800cd35
 800cc28:	0800cd35 	.word	0x0800cd35
 800cc2c:	0800cd35 	.word	0x0800cd35
 800cc30:	0800cd35 	.word	0x0800cd35
 800cc34:	0800cd35 	.word	0x0800cd35
 800cc38:	0800cd35 	.word	0x0800cd35
 800cc3c:	0800cd35 	.word	0x0800cd35
 800cc40:	0800cd35 	.word	0x0800cd35
 800cc44:	0800cd35 	.word	0x0800cd35
 800cc48:	0800cd35 	.word	0x0800cd35
 800cc4c:	0800cd35 	.word	0x0800cd35
 800cc50:	0800cd35 	.word	0x0800cd35
 800cc54:	0800cd35 	.word	0x0800cd35
 800cc58:	0800cd35 	.word	0x0800cd35
 800cc5c:	0800cd35 	.word	0x0800cd35
 800cc60:	0800cd35 	.word	0x0800cd35
 800cc64:	0800cd35 	.word	0x0800cd35
 800cc68:	0800cd35 	.word	0x0800cd35
 800cc6c:	0800cd35 	.word	0x0800cd35
 800cc70:	0800cd35 	.word	0x0800cd35
 800cc74:	0800cd35 	.word	0x0800cd35
 800cc78:	0800cd35 	.word	0x0800cd35
 800cc7c:	0800cd35 	.word	0x0800cd35
 800cc80:	0800cd35 	.word	0x0800cd35
 800cc84:	0800cd35 	.word	0x0800cd35
 800cc88:	0800cd35 	.word	0x0800cd35
 800cc8c:	0800cc9d 	.word	0x0800cc9d
 800cc90:	0800cce1 	.word	0x0800cce1
 800cc94:	0800cd35 	.word	0x0800cd35
 800cc98:	0800cd35 	.word	0x0800cd35
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
     	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2]<<16) | (pbuf[3]<<24));
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	461a      	mov	r2, r3
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	3301      	adds	r3, #1
 800cca6:	781b      	ldrb	r3, [r3, #0]
 800cca8:	021b      	lsls	r3, r3, #8
 800ccaa:	431a      	orrs	r2, r3
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	3302      	adds	r3, #2
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	041b      	lsls	r3, r3, #16
 800ccb4:	431a      	orrs	r2, r3
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	3303      	adds	r3, #3
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	061b      	lsls	r3, r3, #24
 800ccbe:	4313      	orrs	r3, r2
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	4b20      	ldr	r3, [pc, #128]	@ (800cd44 <CDC_Control_FS+0x158>)
 800ccc4:	601a      	str	r2, [r3, #0]
     	LineCoding.format = pbuf[4];
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	791a      	ldrb	r2, [r3, #4]
 800ccca:	4b1e      	ldr	r3, [pc, #120]	@ (800cd44 <CDC_Control_FS+0x158>)
 800cccc:	711a      	strb	r2, [r3, #4]
     	LineCoding.paritytype = pbuf[5];
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	795a      	ldrb	r2, [r3, #5]
 800ccd2:	4b1c      	ldr	r3, [pc, #112]	@ (800cd44 <CDC_Control_FS+0x158>)
 800ccd4:	715a      	strb	r2, [r3, #5]
     	LineCoding.datatype = pbuf[6];
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	799a      	ldrb	r2, [r3, #6]
 800ccda:	4b1a      	ldr	r3, [pc, #104]	@ (800cd44 <CDC_Control_FS+0x158>)
 800ccdc:	719a      	strb	r2, [r3, #6]
     break;
 800ccde:	e02a      	b.n	800cd36 <CDC_Control_FS+0x14a>

     case CDC_GET_LINE_CODING:
     	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800cce0:	4b18      	ldr	r3, [pc, #96]	@ (800cd44 <CDC_Control_FS+0x158>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	b2da      	uxtb	r2, r3
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	701a      	strb	r2, [r3, #0]
     	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800ccea:	4b16      	ldr	r3, [pc, #88]	@ (800cd44 <CDC_Control_FS+0x158>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	0a1a      	lsrs	r2, r3, #8
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	3301      	adds	r3, #1
 800ccf4:	b2d2      	uxtb	r2, r2
 800ccf6:	701a      	strb	r2, [r3, #0]
     	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800ccf8:	4b12      	ldr	r3, [pc, #72]	@ (800cd44 <CDC_Control_FS+0x158>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	0c1a      	lsrs	r2, r3, #16
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	3302      	adds	r3, #2
 800cd02:	b2d2      	uxtb	r2, r2
 800cd04:	701a      	strb	r2, [r3, #0]
     	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800cd06:	4b0f      	ldr	r3, [pc, #60]	@ (800cd44 <CDC_Control_FS+0x158>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	0e1a      	lsrs	r2, r3, #24
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	3303      	adds	r3, #3
 800cd10:	b2d2      	uxtb	r2, r2
 800cd12:	701a      	strb	r2, [r3, #0]
     	pbuf[4] = LineCoding.format;
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	3304      	adds	r3, #4
 800cd18:	4a0a      	ldr	r2, [pc, #40]	@ (800cd44 <CDC_Control_FS+0x158>)
 800cd1a:	7912      	ldrb	r2, [r2, #4]
 800cd1c:	701a      	strb	r2, [r3, #0]
     	pbuf[5] = LineCoding.paritytype;
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	3305      	adds	r3, #5
 800cd22:	4a08      	ldr	r2, [pc, #32]	@ (800cd44 <CDC_Control_FS+0x158>)
 800cd24:	7952      	ldrb	r2, [r2, #5]
 800cd26:	701a      	strb	r2, [r3, #0]
     	pbuf[6] = LineCoding.datatype;
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	3306      	adds	r3, #6
 800cd2c:	4a05      	ldr	r2, [pc, #20]	@ (800cd44 <CDC_Control_FS+0x158>)
 800cd2e:	7992      	ldrb	r2, [r2, #6]
 800cd30:	701a      	strb	r2, [r3, #0]
     break;
 800cd32:	e000      	b.n	800cd36 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cd34:	bf00      	nop
  }

  return (USBD_OK);
 800cd36:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	370c      	adds	r7, #12
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd42:	4770      	bx	lr
 800cd44:	2000009c 	.word	0x2000009c

0800cd48 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b082      	sub	sp, #8
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
 800cd50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 if(aPtrFunRx != NULL)
 800cd52:	4b0c      	ldr	r3, [pc, #48]	@ (800cd84 <CDC_Receive_FS+0x3c>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d007      	beq.n	800cd6a <CDC_Receive_FS+0x22>
			aPtrFunRx(Buf, *Len);
 800cd5a:	4b0a      	ldr	r3, [pc, #40]	@ (800cd84 <CDC_Receive_FS+0x3c>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	683a      	ldr	r2, [r7, #0]
 800cd60:	6812      	ldr	r2, [r2, #0]
 800cd62:	b292      	uxth	r2, r2
 800cd64:	4611      	mov	r1, r2
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	4798      	blx	r3
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cd6a:	6879      	ldr	r1, [r7, #4]
 800cd6c:	4806      	ldr	r0, [pc, #24]	@ (800cd88 <CDC_Receive_FS+0x40>)
 800cd6e:	f7fe fb3d 	bl	800b3ec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cd72:	4805      	ldr	r0, [pc, #20]	@ (800cd88 <CDC_Receive_FS+0x40>)
 800cd74:	f7fe fb98 	bl	800b4a8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cd78:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3708      	adds	r7, #8
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
 800cd82:	bf00      	nop
 800cd84:	20000ec0 	.word	0x20000ec0
 800cd88:	200007e4 	.word	0x200007e4

0800cd8c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b084      	sub	sp, #16
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
 800cd94:	460b      	mov	r3, r1
 800cd96:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cd9c:	4b0d      	ldr	r3, [pc, #52]	@ (800cdd4 <CDC_Transmit_FS+0x48>)
 800cd9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cda2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d001      	beq.n	800cdb2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cdae:	2301      	movs	r3, #1
 800cdb0:	e00b      	b.n	800cdca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cdb2:	887b      	ldrh	r3, [r7, #2]
 800cdb4:	461a      	mov	r2, r3
 800cdb6:	6879      	ldr	r1, [r7, #4]
 800cdb8:	4806      	ldr	r0, [pc, #24]	@ (800cdd4 <CDC_Transmit_FS+0x48>)
 800cdba:	f7fe faf5 	bl	800b3a8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cdbe:	4805      	ldr	r0, [pc, #20]	@ (800cdd4 <CDC_Transmit_FS+0x48>)
 800cdc0:	f7fe fb32 	bl	800b428 <USBD_CDC_TransmitPacket>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cdc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3710      	adds	r7, #16
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}
 800cdd2:	bf00      	nop
 800cdd4:	200007e4 	.word	0x200007e4

0800cdd8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cdd8:	b480      	push	{r7}
 800cdda:	b087      	sub	sp, #28
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	60f8      	str	r0, [r7, #12]
 800cde0:	60b9      	str	r1, [r7, #8]
 800cde2:	4613      	mov	r3, r2
 800cde4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cde6:	2300      	movs	r3, #0
 800cde8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cdea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	371c      	adds	r7, #28
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr
	...

0800cdfc <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 800cdfc:	b480      	push	{r7}
 800cdfe:	b083      	sub	sp, #12
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 800ce04:	4a04      	ldr	r2, [pc, #16]	@ (800ce18 <CDC_AttachRxData+0x1c>)
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6013      	str	r3, [r2, #0]
}
 800ce0a:	bf00      	nop
 800ce0c:	370c      	adds	r7, #12
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce14:	4770      	bx	lr
 800ce16:	bf00      	nop
 800ce18:	20000ec0 	.word	0x20000ec0

0800ce1c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b083      	sub	sp, #12
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	4603      	mov	r3, r0
 800ce24:	6039      	str	r1, [r7, #0]
 800ce26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	2212      	movs	r2, #18
 800ce2c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ce2e:	4b03      	ldr	r3, [pc, #12]	@ (800ce3c <USBD_FS_DeviceDescriptor+0x20>)
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	370c      	adds	r7, #12
 800ce34:	46bd      	mov	sp, r7
 800ce36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3a:	4770      	bx	lr
 800ce3c:	200000d4 	.word	0x200000d4

0800ce40 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b083      	sub	sp, #12
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	4603      	mov	r3, r0
 800ce48:	6039      	str	r1, [r7, #0]
 800ce4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	2204      	movs	r2, #4
 800ce50:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ce52:	4b03      	ldr	r3, [pc, #12]	@ (800ce60 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ce54:	4618      	mov	r0, r3
 800ce56:	370c      	adds	r7, #12
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5e:	4770      	bx	lr
 800ce60:	200000e8 	.word	0x200000e8

0800ce64 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b082      	sub	sp, #8
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	6039      	str	r1, [r7, #0]
 800ce6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ce70:	79fb      	ldrb	r3, [r7, #7]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d105      	bne.n	800ce82 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ce76:	683a      	ldr	r2, [r7, #0]
 800ce78:	4907      	ldr	r1, [pc, #28]	@ (800ce98 <USBD_FS_ProductStrDescriptor+0x34>)
 800ce7a:	4808      	ldr	r0, [pc, #32]	@ (800ce9c <USBD_FS_ProductStrDescriptor+0x38>)
 800ce7c:	f7ff fd76 	bl	800c96c <USBD_GetString>
 800ce80:	e004      	b.n	800ce8c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ce82:	683a      	ldr	r2, [r7, #0]
 800ce84:	4904      	ldr	r1, [pc, #16]	@ (800ce98 <USBD_FS_ProductStrDescriptor+0x34>)
 800ce86:	4805      	ldr	r0, [pc, #20]	@ (800ce9c <USBD_FS_ProductStrDescriptor+0x38>)
 800ce88:	f7ff fd70 	bl	800c96c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce8c:	4b02      	ldr	r3, [pc, #8]	@ (800ce98 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3708      	adds	r7, #8
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}
 800ce96:	bf00      	nop
 800ce98:	20000ec4 	.word	0x20000ec4
 800ce9c:	0800dfc8 	.word	0x0800dfc8

0800cea0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b082      	sub	sp, #8
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	4603      	mov	r3, r0
 800cea8:	6039      	str	r1, [r7, #0]
 800ceaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ceac:	683a      	ldr	r2, [r7, #0]
 800ceae:	4904      	ldr	r1, [pc, #16]	@ (800cec0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ceb0:	4804      	ldr	r0, [pc, #16]	@ (800cec4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ceb2:	f7ff fd5b 	bl	800c96c <USBD_GetString>
  return USBD_StrDesc;
 800ceb6:	4b02      	ldr	r3, [pc, #8]	@ (800cec0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3708      	adds	r7, #8
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}
 800cec0:	20000ec4 	.word	0x20000ec4
 800cec4:	0800dfe0 	.word	0x0800dfe0

0800cec8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b082      	sub	sp, #8
 800cecc:	af00      	add	r7, sp, #0
 800cece:	4603      	mov	r3, r0
 800ced0:	6039      	str	r1, [r7, #0]
 800ced2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	221a      	movs	r2, #26
 800ced8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ceda:	f000 f843 	bl	800cf64 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cede:	4b02      	ldr	r3, [pc, #8]	@ (800cee8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3708      	adds	r7, #8
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}
 800cee8:	200000ec 	.word	0x200000ec

0800ceec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	4603      	mov	r3, r0
 800cef4:	6039      	str	r1, [r7, #0]
 800cef6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cef8:	79fb      	ldrb	r3, [r7, #7]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d105      	bne.n	800cf0a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cefe:	683a      	ldr	r2, [r7, #0]
 800cf00:	4907      	ldr	r1, [pc, #28]	@ (800cf20 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cf02:	4808      	ldr	r0, [pc, #32]	@ (800cf24 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cf04:	f7ff fd32 	bl	800c96c <USBD_GetString>
 800cf08:	e004      	b.n	800cf14 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cf0a:	683a      	ldr	r2, [r7, #0]
 800cf0c:	4904      	ldr	r1, [pc, #16]	@ (800cf20 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cf0e:	4805      	ldr	r0, [pc, #20]	@ (800cf24 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cf10:	f7ff fd2c 	bl	800c96c <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf14:	4b02      	ldr	r3, [pc, #8]	@ (800cf20 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	3708      	adds	r7, #8
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}
 800cf1e:	bf00      	nop
 800cf20:	20000ec4 	.word	0x20000ec4
 800cf24:	0800dff4 	.word	0x0800dff4

0800cf28 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b082      	sub	sp, #8
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	4603      	mov	r3, r0
 800cf30:	6039      	str	r1, [r7, #0]
 800cf32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cf34:	79fb      	ldrb	r3, [r7, #7]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d105      	bne.n	800cf46 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cf3a:	683a      	ldr	r2, [r7, #0]
 800cf3c:	4907      	ldr	r1, [pc, #28]	@ (800cf5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cf3e:	4808      	ldr	r0, [pc, #32]	@ (800cf60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cf40:	f7ff fd14 	bl	800c96c <USBD_GetString>
 800cf44:	e004      	b.n	800cf50 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cf46:	683a      	ldr	r2, [r7, #0]
 800cf48:	4904      	ldr	r1, [pc, #16]	@ (800cf5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cf4a:	4805      	ldr	r0, [pc, #20]	@ (800cf60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cf4c:	f7ff fd0e 	bl	800c96c <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf50:	4b02      	ldr	r3, [pc, #8]	@ (800cf5c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3708      	adds	r7, #8
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
 800cf5a:	bf00      	nop
 800cf5c:	20000ec4 	.word	0x20000ec4
 800cf60:	0800e000 	.word	0x0800e000

0800cf64 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b084      	sub	sp, #16
 800cf68:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cf6a:	4b0f      	ldr	r3, [pc, #60]	@ (800cfa8 <Get_SerialNum+0x44>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cf70:	4b0e      	ldr	r3, [pc, #56]	@ (800cfac <Get_SerialNum+0x48>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cf76:	4b0e      	ldr	r3, [pc, #56]	@ (800cfb0 <Get_SerialNum+0x4c>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cf7c:	68fa      	ldr	r2, [r7, #12]
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	4413      	add	r3, r2
 800cf82:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d009      	beq.n	800cf9e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cf8a:	2208      	movs	r2, #8
 800cf8c:	4909      	ldr	r1, [pc, #36]	@ (800cfb4 <Get_SerialNum+0x50>)
 800cf8e:	68f8      	ldr	r0, [r7, #12]
 800cf90:	f000 f814 	bl	800cfbc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cf94:	2204      	movs	r2, #4
 800cf96:	4908      	ldr	r1, [pc, #32]	@ (800cfb8 <Get_SerialNum+0x54>)
 800cf98:	68b8      	ldr	r0, [r7, #8]
 800cf9a:	f000 f80f 	bl	800cfbc <IntToUnicode>
  }
}
 800cf9e:	bf00      	nop
 800cfa0:	3710      	adds	r7, #16
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}
 800cfa6:	bf00      	nop
 800cfa8:	1fff7a10 	.word	0x1fff7a10
 800cfac:	1fff7a14 	.word	0x1fff7a14
 800cfb0:	1fff7a18 	.word	0x1fff7a18
 800cfb4:	200000ee 	.word	0x200000ee
 800cfb8:	200000fe 	.word	0x200000fe

0800cfbc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b087      	sub	sp, #28
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	60f8      	str	r0, [r7, #12]
 800cfc4:	60b9      	str	r1, [r7, #8]
 800cfc6:	4613      	mov	r3, r2
 800cfc8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cfce:	2300      	movs	r3, #0
 800cfd0:	75fb      	strb	r3, [r7, #23]
 800cfd2:	e027      	b.n	800d024 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	0f1b      	lsrs	r3, r3, #28
 800cfd8:	2b09      	cmp	r3, #9
 800cfda:	d80b      	bhi.n	800cff4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	0f1b      	lsrs	r3, r3, #28
 800cfe0:	b2da      	uxtb	r2, r3
 800cfe2:	7dfb      	ldrb	r3, [r7, #23]
 800cfe4:	005b      	lsls	r3, r3, #1
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	440b      	add	r3, r1
 800cfec:	3230      	adds	r2, #48	@ 0x30
 800cfee:	b2d2      	uxtb	r2, r2
 800cff0:	701a      	strb	r2, [r3, #0]
 800cff2:	e00a      	b.n	800d00a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	0f1b      	lsrs	r3, r3, #28
 800cff8:	b2da      	uxtb	r2, r3
 800cffa:	7dfb      	ldrb	r3, [r7, #23]
 800cffc:	005b      	lsls	r3, r3, #1
 800cffe:	4619      	mov	r1, r3
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	440b      	add	r3, r1
 800d004:	3237      	adds	r2, #55	@ 0x37
 800d006:	b2d2      	uxtb	r2, r2
 800d008:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	011b      	lsls	r3, r3, #4
 800d00e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d010:	7dfb      	ldrb	r3, [r7, #23]
 800d012:	005b      	lsls	r3, r3, #1
 800d014:	3301      	adds	r3, #1
 800d016:	68ba      	ldr	r2, [r7, #8]
 800d018:	4413      	add	r3, r2
 800d01a:	2200      	movs	r2, #0
 800d01c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d01e:	7dfb      	ldrb	r3, [r7, #23]
 800d020:	3301      	adds	r3, #1
 800d022:	75fb      	strb	r3, [r7, #23]
 800d024:	7dfa      	ldrb	r2, [r7, #23]
 800d026:	79fb      	ldrb	r3, [r7, #7]
 800d028:	429a      	cmp	r2, r3
 800d02a:	d3d3      	bcc.n	800cfd4 <IntToUnicode+0x18>
  }
}
 800d02c:	bf00      	nop
 800d02e:	bf00      	nop
 800d030:	371c      	adds	r7, #28
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr
	...

0800d03c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b08a      	sub	sp, #40	@ 0x28
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d044:	f107 0314 	add.w	r3, r7, #20
 800d048:	2200      	movs	r2, #0
 800d04a:	601a      	str	r2, [r3, #0]
 800d04c:	605a      	str	r2, [r3, #4]
 800d04e:	609a      	str	r2, [r3, #8]
 800d050:	60da      	str	r2, [r3, #12]
 800d052:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d05c:	d13a      	bne.n	800d0d4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d05e:	2300      	movs	r3, #0
 800d060:	613b      	str	r3, [r7, #16]
 800d062:	4b1e      	ldr	r3, [pc, #120]	@ (800d0dc <HAL_PCD_MspInit+0xa0>)
 800d064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d066:	4a1d      	ldr	r2, [pc, #116]	@ (800d0dc <HAL_PCD_MspInit+0xa0>)
 800d068:	f043 0301 	orr.w	r3, r3, #1
 800d06c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d06e:	4b1b      	ldr	r3, [pc, #108]	@ (800d0dc <HAL_PCD_MspInit+0xa0>)
 800d070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d072:	f003 0301 	and.w	r3, r3, #1
 800d076:	613b      	str	r3, [r7, #16]
 800d078:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d07a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d07e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d080:	2302      	movs	r3, #2
 800d082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d084:	2300      	movs	r3, #0
 800d086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d088:	2303      	movs	r3, #3
 800d08a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d08c:	230a      	movs	r3, #10
 800d08e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d090:	f107 0314 	add.w	r3, r7, #20
 800d094:	4619      	mov	r1, r3
 800d096:	4812      	ldr	r0, [pc, #72]	@ (800d0e0 <HAL_PCD_MspInit+0xa4>)
 800d098:	f7f5 ff76 	bl	8002f88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d09c:	4b0f      	ldr	r3, [pc, #60]	@ (800d0dc <HAL_PCD_MspInit+0xa0>)
 800d09e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0a0:	4a0e      	ldr	r2, [pc, #56]	@ (800d0dc <HAL_PCD_MspInit+0xa0>)
 800d0a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0a6:	6353      	str	r3, [r2, #52]	@ 0x34
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	60fb      	str	r3, [r7, #12]
 800d0ac:	4b0b      	ldr	r3, [pc, #44]	@ (800d0dc <HAL_PCD_MspInit+0xa0>)
 800d0ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0b0:	4a0a      	ldr	r2, [pc, #40]	@ (800d0dc <HAL_PCD_MspInit+0xa0>)
 800d0b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d0b6:	6453      	str	r3, [r2, #68]	@ 0x44
 800d0b8:	4b08      	ldr	r3, [pc, #32]	@ (800d0dc <HAL_PCD_MspInit+0xa0>)
 800d0ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d0c0:	60fb      	str	r3, [r7, #12]
 800d0c2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	2100      	movs	r1, #0
 800d0c8:	2043      	movs	r0, #67	@ 0x43
 800d0ca:	f7f5 fb7a 	bl	80027c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d0ce:	2043      	movs	r0, #67	@ 0x43
 800d0d0:	f7f5 fb93 	bl	80027fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d0d4:	bf00      	nop
 800d0d6:	3728      	adds	r7, #40	@ 0x28
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}
 800d0dc:	40023800 	.word	0x40023800
 800d0e0:	40020000 	.word	0x40020000

0800d0e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b082      	sub	sp, #8
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d0f8:	4619      	mov	r1, r3
 800d0fa:	4610      	mov	r0, r2
 800d0fc:	f7fe fabd 	bl	800b67a <USBD_LL_SetupStage>
}
 800d100:	bf00      	nop
 800d102:	3708      	adds	r7, #8
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}

0800d108 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b082      	sub	sp, #8
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	460b      	mov	r3, r1
 800d112:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d11a:	78fa      	ldrb	r2, [r7, #3]
 800d11c:	6879      	ldr	r1, [r7, #4]
 800d11e:	4613      	mov	r3, r2
 800d120:	00db      	lsls	r3, r3, #3
 800d122:	4413      	add	r3, r2
 800d124:	009b      	lsls	r3, r3, #2
 800d126:	440b      	add	r3, r1
 800d128:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d12c:	681a      	ldr	r2, [r3, #0]
 800d12e:	78fb      	ldrb	r3, [r7, #3]
 800d130:	4619      	mov	r1, r3
 800d132:	f7fe faf7 	bl	800b724 <USBD_LL_DataOutStage>
}
 800d136:	bf00      	nop
 800d138:	3708      	adds	r7, #8
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}

0800d13e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d13e:	b580      	push	{r7, lr}
 800d140:	b082      	sub	sp, #8
 800d142:	af00      	add	r7, sp, #0
 800d144:	6078      	str	r0, [r7, #4]
 800d146:	460b      	mov	r3, r1
 800d148:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d150:	78fa      	ldrb	r2, [r7, #3]
 800d152:	6879      	ldr	r1, [r7, #4]
 800d154:	4613      	mov	r3, r2
 800d156:	00db      	lsls	r3, r3, #3
 800d158:	4413      	add	r3, r2
 800d15a:	009b      	lsls	r3, r3, #2
 800d15c:	440b      	add	r3, r1
 800d15e:	3320      	adds	r3, #32
 800d160:	681a      	ldr	r2, [r3, #0]
 800d162:	78fb      	ldrb	r3, [r7, #3]
 800d164:	4619      	mov	r1, r3
 800d166:	f7fe fb99 	bl	800b89c <USBD_LL_DataInStage>
}
 800d16a:	bf00      	nop
 800d16c:	3708      	adds	r7, #8
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}

0800d172 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d172:	b580      	push	{r7, lr}
 800d174:	b082      	sub	sp, #8
 800d176:	af00      	add	r7, sp, #0
 800d178:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d180:	4618      	mov	r0, r3
 800d182:	f7fe fcdd 	bl	800bb40 <USBD_LL_SOF>
}
 800d186:	bf00      	nop
 800d188:	3708      	adds	r7, #8
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}

0800d18e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d18e:	b580      	push	{r7, lr}
 800d190:	b084      	sub	sp, #16
 800d192:	af00      	add	r7, sp, #0
 800d194:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d196:	2301      	movs	r3, #1
 800d198:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	79db      	ldrb	r3, [r3, #7]
 800d19e:	2b02      	cmp	r3, #2
 800d1a0:	d001      	beq.n	800d1a6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d1a2:	f7f4 f8b7 	bl	8001314 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d1ac:	7bfa      	ldrb	r2, [r7, #15]
 800d1ae:	4611      	mov	r1, r2
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f7fe fc81 	bl	800bab8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f7fe fc28 	bl	800ba12 <USBD_LL_Reset>
}
 800d1c2:	bf00      	nop
 800d1c4:	3710      	adds	r7, #16
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}
	...

0800d1cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b082      	sub	sp, #8
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7fe fc7c 	bl	800bad8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	687a      	ldr	r2, [r7, #4]
 800d1ec:	6812      	ldr	r2, [r2, #0]
 800d1ee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d1f2:	f043 0301 	orr.w	r3, r3, #1
 800d1f6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	7adb      	ldrb	r3, [r3, #11]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d005      	beq.n	800d20c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d200:	4b04      	ldr	r3, [pc, #16]	@ (800d214 <HAL_PCD_SuspendCallback+0x48>)
 800d202:	691b      	ldr	r3, [r3, #16]
 800d204:	4a03      	ldr	r2, [pc, #12]	@ (800d214 <HAL_PCD_SuspendCallback+0x48>)
 800d206:	f043 0306 	orr.w	r3, r3, #6
 800d20a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d20c:	bf00      	nop
 800d20e:	3708      	adds	r7, #8
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}
 800d214:	e000ed00 	.word	0xe000ed00

0800d218 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b082      	sub	sp, #8
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d226:	4618      	mov	r0, r3
 800d228:	f7fe fc72 	bl	800bb10 <USBD_LL_Resume>
}
 800d22c:	bf00      	nop
 800d22e:	3708      	adds	r7, #8
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}

0800d234 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b082      	sub	sp, #8
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
 800d23c:	460b      	mov	r3, r1
 800d23e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d246:	78fa      	ldrb	r2, [r7, #3]
 800d248:	4611      	mov	r1, r2
 800d24a:	4618      	mov	r0, r3
 800d24c:	f7fe fcca 	bl	800bbe4 <USBD_LL_IsoOUTIncomplete>
}
 800d250:	bf00      	nop
 800d252:	3708      	adds	r7, #8
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}

0800d258 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b082      	sub	sp, #8
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	460b      	mov	r3, r1
 800d262:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d26a:	78fa      	ldrb	r2, [r7, #3]
 800d26c:	4611      	mov	r1, r2
 800d26e:	4618      	mov	r0, r3
 800d270:	f7fe fc86 	bl	800bb80 <USBD_LL_IsoINIncomplete>
}
 800d274:	bf00      	nop
 800d276:	3708      	adds	r7, #8
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}

0800d27c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b082      	sub	sp, #8
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d28a:	4618      	mov	r0, r3
 800d28c:	f7fe fcdc 	bl	800bc48 <USBD_LL_DevConnected>
}
 800d290:	bf00      	nop
 800d292:	3708      	adds	r7, #8
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}

0800d298 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b082      	sub	sp, #8
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f7fe fcd9 	bl	800bc5e <USBD_LL_DevDisconnected>
}
 800d2ac:	bf00      	nop
 800d2ae:	3708      	adds	r7, #8
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}

0800d2b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b082      	sub	sp, #8
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d13c      	bne.n	800d33e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d2c4:	4a20      	ldr	r2, [pc, #128]	@ (800d348 <USBD_LL_Init+0x94>)
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	4a1e      	ldr	r2, [pc, #120]	@ (800d348 <USBD_LL_Init+0x94>)
 800d2d0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d2d4:	4b1c      	ldr	r3, [pc, #112]	@ (800d348 <USBD_LL_Init+0x94>)
 800d2d6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d2da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d2dc:	4b1a      	ldr	r3, [pc, #104]	@ (800d348 <USBD_LL_Init+0x94>)
 800d2de:	2204      	movs	r2, #4
 800d2e0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d2e2:	4b19      	ldr	r3, [pc, #100]	@ (800d348 <USBD_LL_Init+0x94>)
 800d2e4:	2202      	movs	r2, #2
 800d2e6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d2e8:	4b17      	ldr	r3, [pc, #92]	@ (800d348 <USBD_LL_Init+0x94>)
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d2ee:	4b16      	ldr	r3, [pc, #88]	@ (800d348 <USBD_LL_Init+0x94>)
 800d2f0:	2202      	movs	r2, #2
 800d2f2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d2f4:	4b14      	ldr	r3, [pc, #80]	@ (800d348 <USBD_LL_Init+0x94>)
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d2fa:	4b13      	ldr	r3, [pc, #76]	@ (800d348 <USBD_LL_Init+0x94>)
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d300:	4b11      	ldr	r3, [pc, #68]	@ (800d348 <USBD_LL_Init+0x94>)
 800d302:	2200      	movs	r2, #0
 800d304:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d306:	4b10      	ldr	r3, [pc, #64]	@ (800d348 <USBD_LL_Init+0x94>)
 800d308:	2200      	movs	r2, #0
 800d30a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d30c:	4b0e      	ldr	r3, [pc, #56]	@ (800d348 <USBD_LL_Init+0x94>)
 800d30e:	2200      	movs	r2, #0
 800d310:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d312:	480d      	ldr	r0, [pc, #52]	@ (800d348 <USBD_LL_Init+0x94>)
 800d314:	f7f9 fa97 	bl	8006846 <HAL_PCD_Init>
 800d318:	4603      	mov	r3, r0
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d001      	beq.n	800d322 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d31e:	f7f3 fff9 	bl	8001314 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d322:	2180      	movs	r1, #128	@ 0x80
 800d324:	4808      	ldr	r0, [pc, #32]	@ (800d348 <USBD_LL_Init+0x94>)
 800d326:	f7fa fcc4 	bl	8007cb2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d32a:	2240      	movs	r2, #64	@ 0x40
 800d32c:	2100      	movs	r1, #0
 800d32e:	4806      	ldr	r0, [pc, #24]	@ (800d348 <USBD_LL_Init+0x94>)
 800d330:	f7fa fc78 	bl	8007c24 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d334:	2280      	movs	r2, #128	@ 0x80
 800d336:	2101      	movs	r1, #1
 800d338:	4803      	ldr	r0, [pc, #12]	@ (800d348 <USBD_LL_Init+0x94>)
 800d33a:	f7fa fc73 	bl	8007c24 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d33e:	2300      	movs	r3, #0
}
 800d340:	4618      	mov	r0, r3
 800d342:	3708      	adds	r7, #8
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}
 800d348:	200010c4 	.word	0x200010c4

0800d34c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b084      	sub	sp, #16
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d354:	2300      	movs	r3, #0
 800d356:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d358:	2300      	movs	r3, #0
 800d35a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d362:	4618      	mov	r0, r3
 800d364:	f7f9 fb7e 	bl	8006a64 <HAL_PCD_Start>
 800d368:	4603      	mov	r3, r0
 800d36a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d36c:	7bfb      	ldrb	r3, [r7, #15]
 800d36e:	4618      	mov	r0, r3
 800d370:	f000 f942 	bl	800d5f8 <USBD_Get_USB_Status>
 800d374:	4603      	mov	r3, r0
 800d376:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d378:	7bbb      	ldrb	r3, [r7, #14]
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	3710      	adds	r7, #16
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}

0800d382 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d382:	b580      	push	{r7, lr}
 800d384:	b084      	sub	sp, #16
 800d386:	af00      	add	r7, sp, #0
 800d388:	6078      	str	r0, [r7, #4]
 800d38a:	4608      	mov	r0, r1
 800d38c:	4611      	mov	r1, r2
 800d38e:	461a      	mov	r2, r3
 800d390:	4603      	mov	r3, r0
 800d392:	70fb      	strb	r3, [r7, #3]
 800d394:	460b      	mov	r3, r1
 800d396:	70bb      	strb	r3, [r7, #2]
 800d398:	4613      	mov	r3, r2
 800d39a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d39c:	2300      	movs	r3, #0
 800d39e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d3aa:	78bb      	ldrb	r3, [r7, #2]
 800d3ac:	883a      	ldrh	r2, [r7, #0]
 800d3ae:	78f9      	ldrb	r1, [r7, #3]
 800d3b0:	f7fa f852 	bl	8007458 <HAL_PCD_EP_Open>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3b8:	7bfb      	ldrb	r3, [r7, #15]
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f000 f91c 	bl	800d5f8 <USBD_Get_USB_Status>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	3710      	adds	r7, #16
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}

0800d3ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3ce:	b580      	push	{r7, lr}
 800d3d0:	b084      	sub	sp, #16
 800d3d2:	af00      	add	r7, sp, #0
 800d3d4:	6078      	str	r0, [r7, #4]
 800d3d6:	460b      	mov	r3, r1
 800d3d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d3e8:	78fa      	ldrb	r2, [r7, #3]
 800d3ea:	4611      	mov	r1, r2
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7fa f89d 	bl	800752c <HAL_PCD_EP_Close>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3f6:	7bfb      	ldrb	r3, [r7, #15]
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f000 f8fd 	bl	800d5f8 <USBD_Get_USB_Status>
 800d3fe:	4603      	mov	r3, r0
 800d400:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d402:	7bbb      	ldrb	r3, [r7, #14]
}
 800d404:	4618      	mov	r0, r3
 800d406:	3710      	adds	r7, #16
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b084      	sub	sp, #16
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	460b      	mov	r3, r1
 800d416:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d418:	2300      	movs	r3, #0
 800d41a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d41c:	2300      	movs	r3, #0
 800d41e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d426:	78fa      	ldrb	r2, [r7, #3]
 800d428:	4611      	mov	r1, r2
 800d42a:	4618      	mov	r0, r3
 800d42c:	f7fa f955 	bl	80076da <HAL_PCD_EP_SetStall>
 800d430:	4603      	mov	r3, r0
 800d432:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d434:	7bfb      	ldrb	r3, [r7, #15]
 800d436:	4618      	mov	r0, r3
 800d438:	f000 f8de 	bl	800d5f8 <USBD_Get_USB_Status>
 800d43c:	4603      	mov	r3, r0
 800d43e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d440:	7bbb      	ldrb	r3, [r7, #14]
}
 800d442:	4618      	mov	r0, r3
 800d444:	3710      	adds	r7, #16
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}

0800d44a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d44a:	b580      	push	{r7, lr}
 800d44c:	b084      	sub	sp, #16
 800d44e:	af00      	add	r7, sp, #0
 800d450:	6078      	str	r0, [r7, #4]
 800d452:	460b      	mov	r3, r1
 800d454:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d456:	2300      	movs	r3, #0
 800d458:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d45a:	2300      	movs	r3, #0
 800d45c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d464:	78fa      	ldrb	r2, [r7, #3]
 800d466:	4611      	mov	r1, r2
 800d468:	4618      	mov	r0, r3
 800d46a:	f7fa f999 	bl	80077a0 <HAL_PCD_EP_ClrStall>
 800d46e:	4603      	mov	r3, r0
 800d470:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d472:	7bfb      	ldrb	r3, [r7, #15]
 800d474:	4618      	mov	r0, r3
 800d476:	f000 f8bf 	bl	800d5f8 <USBD_Get_USB_Status>
 800d47a:	4603      	mov	r3, r0
 800d47c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d47e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d480:	4618      	mov	r0, r3
 800d482:	3710      	adds	r7, #16
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}

0800d488 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d488:	b480      	push	{r7}
 800d48a:	b085      	sub	sp, #20
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	460b      	mov	r3, r1
 800d492:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d49a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d49c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	da0b      	bge.n	800d4bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d4a4:	78fb      	ldrb	r3, [r7, #3]
 800d4a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d4aa:	68f9      	ldr	r1, [r7, #12]
 800d4ac:	4613      	mov	r3, r2
 800d4ae:	00db      	lsls	r3, r3, #3
 800d4b0:	4413      	add	r3, r2
 800d4b2:	009b      	lsls	r3, r3, #2
 800d4b4:	440b      	add	r3, r1
 800d4b6:	3316      	adds	r3, #22
 800d4b8:	781b      	ldrb	r3, [r3, #0]
 800d4ba:	e00b      	b.n	800d4d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d4bc:	78fb      	ldrb	r3, [r7, #3]
 800d4be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d4c2:	68f9      	ldr	r1, [r7, #12]
 800d4c4:	4613      	mov	r3, r2
 800d4c6:	00db      	lsls	r3, r3, #3
 800d4c8:	4413      	add	r3, r2
 800d4ca:	009b      	lsls	r3, r3, #2
 800d4cc:	440b      	add	r3, r1
 800d4ce:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d4d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3714      	adds	r7, #20
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr

0800d4e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b084      	sub	sp, #16
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
 800d4e8:	460b      	mov	r3, r1
 800d4ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d4fa:	78fa      	ldrb	r2, [r7, #3]
 800d4fc:	4611      	mov	r1, r2
 800d4fe:	4618      	mov	r0, r3
 800d500:	f7f9 ff86 	bl	8007410 <HAL_PCD_SetAddress>
 800d504:	4603      	mov	r3, r0
 800d506:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d508:	7bfb      	ldrb	r3, [r7, #15]
 800d50a:	4618      	mov	r0, r3
 800d50c:	f000 f874 	bl	800d5f8 <USBD_Get_USB_Status>
 800d510:	4603      	mov	r3, r0
 800d512:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d514:	7bbb      	ldrb	r3, [r7, #14]
}
 800d516:	4618      	mov	r0, r3
 800d518:	3710      	adds	r7, #16
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}

0800d51e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d51e:	b580      	push	{r7, lr}
 800d520:	b086      	sub	sp, #24
 800d522:	af00      	add	r7, sp, #0
 800d524:	60f8      	str	r0, [r7, #12]
 800d526:	607a      	str	r2, [r7, #4]
 800d528:	603b      	str	r3, [r7, #0]
 800d52a:	460b      	mov	r3, r1
 800d52c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d52e:	2300      	movs	r3, #0
 800d530:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d532:	2300      	movs	r3, #0
 800d534:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d53c:	7af9      	ldrb	r1, [r7, #11]
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	687a      	ldr	r2, [r7, #4]
 800d542:	f7fa f890 	bl	8007666 <HAL_PCD_EP_Transmit>
 800d546:	4603      	mov	r3, r0
 800d548:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d54a:	7dfb      	ldrb	r3, [r7, #23]
 800d54c:	4618      	mov	r0, r3
 800d54e:	f000 f853 	bl	800d5f8 <USBD_Get_USB_Status>
 800d552:	4603      	mov	r3, r0
 800d554:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d556:	7dbb      	ldrb	r3, [r7, #22]
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3718      	adds	r7, #24
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}

0800d560 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b086      	sub	sp, #24
 800d564:	af00      	add	r7, sp, #0
 800d566:	60f8      	str	r0, [r7, #12]
 800d568:	607a      	str	r2, [r7, #4]
 800d56a:	603b      	str	r3, [r7, #0]
 800d56c:	460b      	mov	r3, r1
 800d56e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d570:	2300      	movs	r3, #0
 800d572:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d574:	2300      	movs	r3, #0
 800d576:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d57e:	7af9      	ldrb	r1, [r7, #11]
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	687a      	ldr	r2, [r7, #4]
 800d584:	f7fa f81c 	bl	80075c0 <HAL_PCD_EP_Receive>
 800d588:	4603      	mov	r3, r0
 800d58a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d58c:	7dfb      	ldrb	r3, [r7, #23]
 800d58e:	4618      	mov	r0, r3
 800d590:	f000 f832 	bl	800d5f8 <USBD_Get_USB_Status>
 800d594:	4603      	mov	r3, r0
 800d596:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d598:	7dbb      	ldrb	r3, [r7, #22]
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	3718      	adds	r7, #24
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}

0800d5a2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5a2:	b580      	push	{r7, lr}
 800d5a4:	b082      	sub	sp, #8
 800d5a6:	af00      	add	r7, sp, #0
 800d5a8:	6078      	str	r0, [r7, #4]
 800d5aa:	460b      	mov	r3, r1
 800d5ac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d5b4:	78fa      	ldrb	r2, [r7, #3]
 800d5b6:	4611      	mov	r1, r2
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f7fa f83c 	bl	8007636 <HAL_PCD_EP_GetRxCount>
 800d5be:	4603      	mov	r3, r0
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3708      	adds	r7, #8
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b083      	sub	sp, #12
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d5d0:	4b03      	ldr	r3, [pc, #12]	@ (800d5e0 <USBD_static_malloc+0x18>)
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	370c      	adds	r7, #12
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5dc:	4770      	bx	lr
 800d5de:	bf00      	nop
 800d5e0:	200015a8 	.word	0x200015a8

0800d5e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b083      	sub	sp, #12
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]

}
 800d5ec:	bf00      	nop
 800d5ee:	370c      	adds	r7, #12
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f6:	4770      	bx	lr

0800d5f8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d5f8:	b480      	push	{r7}
 800d5fa:	b085      	sub	sp, #20
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	4603      	mov	r3, r0
 800d600:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d602:	2300      	movs	r3, #0
 800d604:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d606:	79fb      	ldrb	r3, [r7, #7]
 800d608:	2b03      	cmp	r3, #3
 800d60a:	d817      	bhi.n	800d63c <USBD_Get_USB_Status+0x44>
 800d60c:	a201      	add	r2, pc, #4	@ (adr r2, 800d614 <USBD_Get_USB_Status+0x1c>)
 800d60e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d612:	bf00      	nop
 800d614:	0800d625 	.word	0x0800d625
 800d618:	0800d62b 	.word	0x0800d62b
 800d61c:	0800d631 	.word	0x0800d631
 800d620:	0800d637 	.word	0x0800d637
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d624:	2300      	movs	r3, #0
 800d626:	73fb      	strb	r3, [r7, #15]
    break;
 800d628:	e00b      	b.n	800d642 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d62a:	2303      	movs	r3, #3
 800d62c:	73fb      	strb	r3, [r7, #15]
    break;
 800d62e:	e008      	b.n	800d642 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d630:	2301      	movs	r3, #1
 800d632:	73fb      	strb	r3, [r7, #15]
    break;
 800d634:	e005      	b.n	800d642 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d636:	2303      	movs	r3, #3
 800d638:	73fb      	strb	r3, [r7, #15]
    break;
 800d63a:	e002      	b.n	800d642 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d63c:	2303      	movs	r3, #3
 800d63e:	73fb      	strb	r3, [r7, #15]
    break;
 800d640:	bf00      	nop
  }
  return usb_status;
 800d642:	7bfb      	ldrb	r3, [r7, #15]
}
 800d644:	4618      	mov	r0, r3
 800d646:	3714      	adds	r7, #20
 800d648:	46bd      	mov	sp, r7
 800d64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64e:	4770      	bx	lr

0800d650 <malloc>:
 800d650:	4b02      	ldr	r3, [pc, #8]	@ (800d65c <malloc+0xc>)
 800d652:	4601      	mov	r1, r0
 800d654:	6818      	ldr	r0, [r3, #0]
 800d656:	f000 b825 	b.w	800d6a4 <_malloc_r>
 800d65a:	bf00      	nop
 800d65c:	20000108 	.word	0x20000108

0800d660 <sbrk_aligned>:
 800d660:	b570      	push	{r4, r5, r6, lr}
 800d662:	4e0f      	ldr	r6, [pc, #60]	@ (800d6a0 <sbrk_aligned+0x40>)
 800d664:	460c      	mov	r4, r1
 800d666:	6831      	ldr	r1, [r6, #0]
 800d668:	4605      	mov	r5, r0
 800d66a:	b911      	cbnz	r1, 800d672 <sbrk_aligned+0x12>
 800d66c:	f000 f8d0 	bl	800d810 <_sbrk_r>
 800d670:	6030      	str	r0, [r6, #0]
 800d672:	4621      	mov	r1, r4
 800d674:	4628      	mov	r0, r5
 800d676:	f000 f8cb 	bl	800d810 <_sbrk_r>
 800d67a:	1c43      	adds	r3, r0, #1
 800d67c:	d103      	bne.n	800d686 <sbrk_aligned+0x26>
 800d67e:	f04f 34ff 	mov.w	r4, #4294967295
 800d682:	4620      	mov	r0, r4
 800d684:	bd70      	pop	{r4, r5, r6, pc}
 800d686:	1cc4      	adds	r4, r0, #3
 800d688:	f024 0403 	bic.w	r4, r4, #3
 800d68c:	42a0      	cmp	r0, r4
 800d68e:	d0f8      	beq.n	800d682 <sbrk_aligned+0x22>
 800d690:	1a21      	subs	r1, r4, r0
 800d692:	4628      	mov	r0, r5
 800d694:	f000 f8bc 	bl	800d810 <_sbrk_r>
 800d698:	3001      	adds	r0, #1
 800d69a:	d1f2      	bne.n	800d682 <sbrk_aligned+0x22>
 800d69c:	e7ef      	b.n	800d67e <sbrk_aligned+0x1e>
 800d69e:	bf00      	nop
 800d6a0:	200017c8 	.word	0x200017c8

0800d6a4 <_malloc_r>:
 800d6a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6a8:	1ccd      	adds	r5, r1, #3
 800d6aa:	f025 0503 	bic.w	r5, r5, #3
 800d6ae:	3508      	adds	r5, #8
 800d6b0:	2d0c      	cmp	r5, #12
 800d6b2:	bf38      	it	cc
 800d6b4:	250c      	movcc	r5, #12
 800d6b6:	2d00      	cmp	r5, #0
 800d6b8:	4606      	mov	r6, r0
 800d6ba:	db01      	blt.n	800d6c0 <_malloc_r+0x1c>
 800d6bc:	42a9      	cmp	r1, r5
 800d6be:	d904      	bls.n	800d6ca <_malloc_r+0x26>
 800d6c0:	230c      	movs	r3, #12
 800d6c2:	6033      	str	r3, [r6, #0]
 800d6c4:	2000      	movs	r0, #0
 800d6c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d7a0 <_malloc_r+0xfc>
 800d6ce:	f000 f869 	bl	800d7a4 <__malloc_lock>
 800d6d2:	f8d8 3000 	ldr.w	r3, [r8]
 800d6d6:	461c      	mov	r4, r3
 800d6d8:	bb44      	cbnz	r4, 800d72c <_malloc_r+0x88>
 800d6da:	4629      	mov	r1, r5
 800d6dc:	4630      	mov	r0, r6
 800d6de:	f7ff ffbf 	bl	800d660 <sbrk_aligned>
 800d6e2:	1c43      	adds	r3, r0, #1
 800d6e4:	4604      	mov	r4, r0
 800d6e6:	d158      	bne.n	800d79a <_malloc_r+0xf6>
 800d6e8:	f8d8 4000 	ldr.w	r4, [r8]
 800d6ec:	4627      	mov	r7, r4
 800d6ee:	2f00      	cmp	r7, #0
 800d6f0:	d143      	bne.n	800d77a <_malloc_r+0xd6>
 800d6f2:	2c00      	cmp	r4, #0
 800d6f4:	d04b      	beq.n	800d78e <_malloc_r+0xea>
 800d6f6:	6823      	ldr	r3, [r4, #0]
 800d6f8:	4639      	mov	r1, r7
 800d6fa:	4630      	mov	r0, r6
 800d6fc:	eb04 0903 	add.w	r9, r4, r3
 800d700:	f000 f886 	bl	800d810 <_sbrk_r>
 800d704:	4581      	cmp	r9, r0
 800d706:	d142      	bne.n	800d78e <_malloc_r+0xea>
 800d708:	6821      	ldr	r1, [r4, #0]
 800d70a:	1a6d      	subs	r5, r5, r1
 800d70c:	4629      	mov	r1, r5
 800d70e:	4630      	mov	r0, r6
 800d710:	f7ff ffa6 	bl	800d660 <sbrk_aligned>
 800d714:	3001      	adds	r0, #1
 800d716:	d03a      	beq.n	800d78e <_malloc_r+0xea>
 800d718:	6823      	ldr	r3, [r4, #0]
 800d71a:	442b      	add	r3, r5
 800d71c:	6023      	str	r3, [r4, #0]
 800d71e:	f8d8 3000 	ldr.w	r3, [r8]
 800d722:	685a      	ldr	r2, [r3, #4]
 800d724:	bb62      	cbnz	r2, 800d780 <_malloc_r+0xdc>
 800d726:	f8c8 7000 	str.w	r7, [r8]
 800d72a:	e00f      	b.n	800d74c <_malloc_r+0xa8>
 800d72c:	6822      	ldr	r2, [r4, #0]
 800d72e:	1b52      	subs	r2, r2, r5
 800d730:	d420      	bmi.n	800d774 <_malloc_r+0xd0>
 800d732:	2a0b      	cmp	r2, #11
 800d734:	d917      	bls.n	800d766 <_malloc_r+0xc2>
 800d736:	1961      	adds	r1, r4, r5
 800d738:	42a3      	cmp	r3, r4
 800d73a:	6025      	str	r5, [r4, #0]
 800d73c:	bf18      	it	ne
 800d73e:	6059      	strne	r1, [r3, #4]
 800d740:	6863      	ldr	r3, [r4, #4]
 800d742:	bf08      	it	eq
 800d744:	f8c8 1000 	streq.w	r1, [r8]
 800d748:	5162      	str	r2, [r4, r5]
 800d74a:	604b      	str	r3, [r1, #4]
 800d74c:	4630      	mov	r0, r6
 800d74e:	f000 f82f 	bl	800d7b0 <__malloc_unlock>
 800d752:	f104 000b 	add.w	r0, r4, #11
 800d756:	1d23      	adds	r3, r4, #4
 800d758:	f020 0007 	bic.w	r0, r0, #7
 800d75c:	1ac2      	subs	r2, r0, r3
 800d75e:	bf1c      	itt	ne
 800d760:	1a1b      	subne	r3, r3, r0
 800d762:	50a3      	strne	r3, [r4, r2]
 800d764:	e7af      	b.n	800d6c6 <_malloc_r+0x22>
 800d766:	6862      	ldr	r2, [r4, #4]
 800d768:	42a3      	cmp	r3, r4
 800d76a:	bf0c      	ite	eq
 800d76c:	f8c8 2000 	streq.w	r2, [r8]
 800d770:	605a      	strne	r2, [r3, #4]
 800d772:	e7eb      	b.n	800d74c <_malloc_r+0xa8>
 800d774:	4623      	mov	r3, r4
 800d776:	6864      	ldr	r4, [r4, #4]
 800d778:	e7ae      	b.n	800d6d8 <_malloc_r+0x34>
 800d77a:	463c      	mov	r4, r7
 800d77c:	687f      	ldr	r7, [r7, #4]
 800d77e:	e7b6      	b.n	800d6ee <_malloc_r+0x4a>
 800d780:	461a      	mov	r2, r3
 800d782:	685b      	ldr	r3, [r3, #4]
 800d784:	42a3      	cmp	r3, r4
 800d786:	d1fb      	bne.n	800d780 <_malloc_r+0xdc>
 800d788:	2300      	movs	r3, #0
 800d78a:	6053      	str	r3, [r2, #4]
 800d78c:	e7de      	b.n	800d74c <_malloc_r+0xa8>
 800d78e:	230c      	movs	r3, #12
 800d790:	6033      	str	r3, [r6, #0]
 800d792:	4630      	mov	r0, r6
 800d794:	f000 f80c 	bl	800d7b0 <__malloc_unlock>
 800d798:	e794      	b.n	800d6c4 <_malloc_r+0x20>
 800d79a:	6005      	str	r5, [r0, #0]
 800d79c:	e7d6      	b.n	800d74c <_malloc_r+0xa8>
 800d79e:	bf00      	nop
 800d7a0:	200017cc 	.word	0x200017cc

0800d7a4 <__malloc_lock>:
 800d7a4:	4801      	ldr	r0, [pc, #4]	@ (800d7ac <__malloc_lock+0x8>)
 800d7a6:	f000 b86d 	b.w	800d884 <__retarget_lock_acquire_recursive>
 800d7aa:	bf00      	nop
 800d7ac:	2000190c 	.word	0x2000190c

0800d7b0 <__malloc_unlock>:
 800d7b0:	4801      	ldr	r0, [pc, #4]	@ (800d7b8 <__malloc_unlock+0x8>)
 800d7b2:	f000 b868 	b.w	800d886 <__retarget_lock_release_recursive>
 800d7b6:	bf00      	nop
 800d7b8:	2000190c 	.word	0x2000190c

0800d7bc <siprintf>:
 800d7bc:	b40e      	push	{r1, r2, r3}
 800d7be:	b510      	push	{r4, lr}
 800d7c0:	b09d      	sub	sp, #116	@ 0x74
 800d7c2:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d7c4:	9002      	str	r0, [sp, #8]
 800d7c6:	9006      	str	r0, [sp, #24]
 800d7c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d7cc:	480a      	ldr	r0, [pc, #40]	@ (800d7f8 <siprintf+0x3c>)
 800d7ce:	9107      	str	r1, [sp, #28]
 800d7d0:	9104      	str	r1, [sp, #16]
 800d7d2:	490a      	ldr	r1, [pc, #40]	@ (800d7fc <siprintf+0x40>)
 800d7d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7d8:	9105      	str	r1, [sp, #20]
 800d7da:	2400      	movs	r4, #0
 800d7dc:	a902      	add	r1, sp, #8
 800d7de:	6800      	ldr	r0, [r0, #0]
 800d7e0:	9301      	str	r3, [sp, #4]
 800d7e2:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d7e4:	f000 f8f6 	bl	800d9d4 <_svfiprintf_r>
 800d7e8:	9b02      	ldr	r3, [sp, #8]
 800d7ea:	701c      	strb	r4, [r3, #0]
 800d7ec:	b01d      	add	sp, #116	@ 0x74
 800d7ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7f2:	b003      	add	sp, #12
 800d7f4:	4770      	bx	lr
 800d7f6:	bf00      	nop
 800d7f8:	20000108 	.word	0x20000108
 800d7fc:	ffff0208 	.word	0xffff0208

0800d800 <memset>:
 800d800:	4402      	add	r2, r0
 800d802:	4603      	mov	r3, r0
 800d804:	4293      	cmp	r3, r2
 800d806:	d100      	bne.n	800d80a <memset+0xa>
 800d808:	4770      	bx	lr
 800d80a:	f803 1b01 	strb.w	r1, [r3], #1
 800d80e:	e7f9      	b.n	800d804 <memset+0x4>

0800d810 <_sbrk_r>:
 800d810:	b538      	push	{r3, r4, r5, lr}
 800d812:	4d06      	ldr	r5, [pc, #24]	@ (800d82c <_sbrk_r+0x1c>)
 800d814:	2300      	movs	r3, #0
 800d816:	4604      	mov	r4, r0
 800d818:	4608      	mov	r0, r1
 800d81a:	602b      	str	r3, [r5, #0]
 800d81c:	f7f4 fa4e 	bl	8001cbc <_sbrk>
 800d820:	1c43      	adds	r3, r0, #1
 800d822:	d102      	bne.n	800d82a <_sbrk_r+0x1a>
 800d824:	682b      	ldr	r3, [r5, #0]
 800d826:	b103      	cbz	r3, 800d82a <_sbrk_r+0x1a>
 800d828:	6023      	str	r3, [r4, #0]
 800d82a:	bd38      	pop	{r3, r4, r5, pc}
 800d82c:	20001908 	.word	0x20001908

0800d830 <__errno>:
 800d830:	4b01      	ldr	r3, [pc, #4]	@ (800d838 <__errno+0x8>)
 800d832:	6818      	ldr	r0, [r3, #0]
 800d834:	4770      	bx	lr
 800d836:	bf00      	nop
 800d838:	20000108 	.word	0x20000108

0800d83c <__libc_init_array>:
 800d83c:	b570      	push	{r4, r5, r6, lr}
 800d83e:	4d0d      	ldr	r5, [pc, #52]	@ (800d874 <__libc_init_array+0x38>)
 800d840:	4c0d      	ldr	r4, [pc, #52]	@ (800d878 <__libc_init_array+0x3c>)
 800d842:	1b64      	subs	r4, r4, r5
 800d844:	10a4      	asrs	r4, r4, #2
 800d846:	2600      	movs	r6, #0
 800d848:	42a6      	cmp	r6, r4
 800d84a:	d109      	bne.n	800d860 <__libc_init_array+0x24>
 800d84c:	4d0b      	ldr	r5, [pc, #44]	@ (800d87c <__libc_init_array+0x40>)
 800d84e:	4c0c      	ldr	r4, [pc, #48]	@ (800d880 <__libc_init_array+0x44>)
 800d850:	f000 fba6 	bl	800dfa0 <_init>
 800d854:	1b64      	subs	r4, r4, r5
 800d856:	10a4      	asrs	r4, r4, #2
 800d858:	2600      	movs	r6, #0
 800d85a:	42a6      	cmp	r6, r4
 800d85c:	d105      	bne.n	800d86a <__libc_init_array+0x2e>
 800d85e:	bd70      	pop	{r4, r5, r6, pc}
 800d860:	f855 3b04 	ldr.w	r3, [r5], #4
 800d864:	4798      	blx	r3
 800d866:	3601      	adds	r6, #1
 800d868:	e7ee      	b.n	800d848 <__libc_init_array+0xc>
 800d86a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d86e:	4798      	blx	r3
 800d870:	3601      	adds	r6, #1
 800d872:	e7f2      	b.n	800d85a <__libc_init_array+0x1e>
 800d874:	0800e46c 	.word	0x0800e46c
 800d878:	0800e46c 	.word	0x0800e46c
 800d87c:	0800e46c 	.word	0x0800e46c
 800d880:	0800e470 	.word	0x0800e470

0800d884 <__retarget_lock_acquire_recursive>:
 800d884:	4770      	bx	lr

0800d886 <__retarget_lock_release_recursive>:
 800d886:	4770      	bx	lr

0800d888 <_free_r>:
 800d888:	b538      	push	{r3, r4, r5, lr}
 800d88a:	4605      	mov	r5, r0
 800d88c:	2900      	cmp	r1, #0
 800d88e:	d041      	beq.n	800d914 <_free_r+0x8c>
 800d890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d894:	1f0c      	subs	r4, r1, #4
 800d896:	2b00      	cmp	r3, #0
 800d898:	bfb8      	it	lt
 800d89a:	18e4      	addlt	r4, r4, r3
 800d89c:	f7ff ff82 	bl	800d7a4 <__malloc_lock>
 800d8a0:	4a1d      	ldr	r2, [pc, #116]	@ (800d918 <_free_r+0x90>)
 800d8a2:	6813      	ldr	r3, [r2, #0]
 800d8a4:	b933      	cbnz	r3, 800d8b4 <_free_r+0x2c>
 800d8a6:	6063      	str	r3, [r4, #4]
 800d8a8:	6014      	str	r4, [r2, #0]
 800d8aa:	4628      	mov	r0, r5
 800d8ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d8b0:	f7ff bf7e 	b.w	800d7b0 <__malloc_unlock>
 800d8b4:	42a3      	cmp	r3, r4
 800d8b6:	d908      	bls.n	800d8ca <_free_r+0x42>
 800d8b8:	6820      	ldr	r0, [r4, #0]
 800d8ba:	1821      	adds	r1, r4, r0
 800d8bc:	428b      	cmp	r3, r1
 800d8be:	bf01      	itttt	eq
 800d8c0:	6819      	ldreq	r1, [r3, #0]
 800d8c2:	685b      	ldreq	r3, [r3, #4]
 800d8c4:	1809      	addeq	r1, r1, r0
 800d8c6:	6021      	streq	r1, [r4, #0]
 800d8c8:	e7ed      	b.n	800d8a6 <_free_r+0x1e>
 800d8ca:	461a      	mov	r2, r3
 800d8cc:	685b      	ldr	r3, [r3, #4]
 800d8ce:	b10b      	cbz	r3, 800d8d4 <_free_r+0x4c>
 800d8d0:	42a3      	cmp	r3, r4
 800d8d2:	d9fa      	bls.n	800d8ca <_free_r+0x42>
 800d8d4:	6811      	ldr	r1, [r2, #0]
 800d8d6:	1850      	adds	r0, r2, r1
 800d8d8:	42a0      	cmp	r0, r4
 800d8da:	d10b      	bne.n	800d8f4 <_free_r+0x6c>
 800d8dc:	6820      	ldr	r0, [r4, #0]
 800d8de:	4401      	add	r1, r0
 800d8e0:	1850      	adds	r0, r2, r1
 800d8e2:	4283      	cmp	r3, r0
 800d8e4:	6011      	str	r1, [r2, #0]
 800d8e6:	d1e0      	bne.n	800d8aa <_free_r+0x22>
 800d8e8:	6818      	ldr	r0, [r3, #0]
 800d8ea:	685b      	ldr	r3, [r3, #4]
 800d8ec:	6053      	str	r3, [r2, #4]
 800d8ee:	4408      	add	r0, r1
 800d8f0:	6010      	str	r0, [r2, #0]
 800d8f2:	e7da      	b.n	800d8aa <_free_r+0x22>
 800d8f4:	d902      	bls.n	800d8fc <_free_r+0x74>
 800d8f6:	230c      	movs	r3, #12
 800d8f8:	602b      	str	r3, [r5, #0]
 800d8fa:	e7d6      	b.n	800d8aa <_free_r+0x22>
 800d8fc:	6820      	ldr	r0, [r4, #0]
 800d8fe:	1821      	adds	r1, r4, r0
 800d900:	428b      	cmp	r3, r1
 800d902:	bf04      	itt	eq
 800d904:	6819      	ldreq	r1, [r3, #0]
 800d906:	685b      	ldreq	r3, [r3, #4]
 800d908:	6063      	str	r3, [r4, #4]
 800d90a:	bf04      	itt	eq
 800d90c:	1809      	addeq	r1, r1, r0
 800d90e:	6021      	streq	r1, [r4, #0]
 800d910:	6054      	str	r4, [r2, #4]
 800d912:	e7ca      	b.n	800d8aa <_free_r+0x22>
 800d914:	bd38      	pop	{r3, r4, r5, pc}
 800d916:	bf00      	nop
 800d918:	200017cc 	.word	0x200017cc

0800d91c <__ssputs_r>:
 800d91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d920:	688e      	ldr	r6, [r1, #8]
 800d922:	461f      	mov	r7, r3
 800d924:	42be      	cmp	r6, r7
 800d926:	680b      	ldr	r3, [r1, #0]
 800d928:	4682      	mov	sl, r0
 800d92a:	460c      	mov	r4, r1
 800d92c:	4690      	mov	r8, r2
 800d92e:	d82d      	bhi.n	800d98c <__ssputs_r+0x70>
 800d930:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d934:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d938:	d026      	beq.n	800d988 <__ssputs_r+0x6c>
 800d93a:	6965      	ldr	r5, [r4, #20]
 800d93c:	6909      	ldr	r1, [r1, #16]
 800d93e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d942:	eba3 0901 	sub.w	r9, r3, r1
 800d946:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d94a:	1c7b      	adds	r3, r7, #1
 800d94c:	444b      	add	r3, r9
 800d94e:	106d      	asrs	r5, r5, #1
 800d950:	429d      	cmp	r5, r3
 800d952:	bf38      	it	cc
 800d954:	461d      	movcc	r5, r3
 800d956:	0553      	lsls	r3, r2, #21
 800d958:	d527      	bpl.n	800d9aa <__ssputs_r+0x8e>
 800d95a:	4629      	mov	r1, r5
 800d95c:	f7ff fea2 	bl	800d6a4 <_malloc_r>
 800d960:	4606      	mov	r6, r0
 800d962:	b360      	cbz	r0, 800d9be <__ssputs_r+0xa2>
 800d964:	6921      	ldr	r1, [r4, #16]
 800d966:	464a      	mov	r2, r9
 800d968:	f000 fad6 	bl	800df18 <memcpy>
 800d96c:	89a3      	ldrh	r3, [r4, #12]
 800d96e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d976:	81a3      	strh	r3, [r4, #12]
 800d978:	6126      	str	r6, [r4, #16]
 800d97a:	6165      	str	r5, [r4, #20]
 800d97c:	444e      	add	r6, r9
 800d97e:	eba5 0509 	sub.w	r5, r5, r9
 800d982:	6026      	str	r6, [r4, #0]
 800d984:	60a5      	str	r5, [r4, #8]
 800d986:	463e      	mov	r6, r7
 800d988:	42be      	cmp	r6, r7
 800d98a:	d900      	bls.n	800d98e <__ssputs_r+0x72>
 800d98c:	463e      	mov	r6, r7
 800d98e:	6820      	ldr	r0, [r4, #0]
 800d990:	4632      	mov	r2, r6
 800d992:	4641      	mov	r1, r8
 800d994:	f000 faa6 	bl	800dee4 <memmove>
 800d998:	68a3      	ldr	r3, [r4, #8]
 800d99a:	1b9b      	subs	r3, r3, r6
 800d99c:	60a3      	str	r3, [r4, #8]
 800d99e:	6823      	ldr	r3, [r4, #0]
 800d9a0:	4433      	add	r3, r6
 800d9a2:	6023      	str	r3, [r4, #0]
 800d9a4:	2000      	movs	r0, #0
 800d9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9aa:	462a      	mov	r2, r5
 800d9ac:	f000 fac2 	bl	800df34 <_realloc_r>
 800d9b0:	4606      	mov	r6, r0
 800d9b2:	2800      	cmp	r0, #0
 800d9b4:	d1e0      	bne.n	800d978 <__ssputs_r+0x5c>
 800d9b6:	6921      	ldr	r1, [r4, #16]
 800d9b8:	4650      	mov	r0, sl
 800d9ba:	f7ff ff65 	bl	800d888 <_free_r>
 800d9be:	230c      	movs	r3, #12
 800d9c0:	f8ca 3000 	str.w	r3, [sl]
 800d9c4:	89a3      	ldrh	r3, [r4, #12]
 800d9c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d9ca:	81a3      	strh	r3, [r4, #12]
 800d9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d9d0:	e7e9      	b.n	800d9a6 <__ssputs_r+0x8a>
	...

0800d9d4 <_svfiprintf_r>:
 800d9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9d8:	4698      	mov	r8, r3
 800d9da:	898b      	ldrh	r3, [r1, #12]
 800d9dc:	061b      	lsls	r3, r3, #24
 800d9de:	b09d      	sub	sp, #116	@ 0x74
 800d9e0:	4607      	mov	r7, r0
 800d9e2:	460d      	mov	r5, r1
 800d9e4:	4614      	mov	r4, r2
 800d9e6:	d510      	bpl.n	800da0a <_svfiprintf_r+0x36>
 800d9e8:	690b      	ldr	r3, [r1, #16]
 800d9ea:	b973      	cbnz	r3, 800da0a <_svfiprintf_r+0x36>
 800d9ec:	2140      	movs	r1, #64	@ 0x40
 800d9ee:	f7ff fe59 	bl	800d6a4 <_malloc_r>
 800d9f2:	6028      	str	r0, [r5, #0]
 800d9f4:	6128      	str	r0, [r5, #16]
 800d9f6:	b930      	cbnz	r0, 800da06 <_svfiprintf_r+0x32>
 800d9f8:	230c      	movs	r3, #12
 800d9fa:	603b      	str	r3, [r7, #0]
 800d9fc:	f04f 30ff 	mov.w	r0, #4294967295
 800da00:	b01d      	add	sp, #116	@ 0x74
 800da02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da06:	2340      	movs	r3, #64	@ 0x40
 800da08:	616b      	str	r3, [r5, #20]
 800da0a:	2300      	movs	r3, #0
 800da0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800da0e:	2320      	movs	r3, #32
 800da10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800da14:	f8cd 800c 	str.w	r8, [sp, #12]
 800da18:	2330      	movs	r3, #48	@ 0x30
 800da1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dbb8 <_svfiprintf_r+0x1e4>
 800da1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800da22:	f04f 0901 	mov.w	r9, #1
 800da26:	4623      	mov	r3, r4
 800da28:	469a      	mov	sl, r3
 800da2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da2e:	b10a      	cbz	r2, 800da34 <_svfiprintf_r+0x60>
 800da30:	2a25      	cmp	r2, #37	@ 0x25
 800da32:	d1f9      	bne.n	800da28 <_svfiprintf_r+0x54>
 800da34:	ebba 0b04 	subs.w	fp, sl, r4
 800da38:	d00b      	beq.n	800da52 <_svfiprintf_r+0x7e>
 800da3a:	465b      	mov	r3, fp
 800da3c:	4622      	mov	r2, r4
 800da3e:	4629      	mov	r1, r5
 800da40:	4638      	mov	r0, r7
 800da42:	f7ff ff6b 	bl	800d91c <__ssputs_r>
 800da46:	3001      	adds	r0, #1
 800da48:	f000 80a7 	beq.w	800db9a <_svfiprintf_r+0x1c6>
 800da4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da4e:	445a      	add	r2, fp
 800da50:	9209      	str	r2, [sp, #36]	@ 0x24
 800da52:	f89a 3000 	ldrb.w	r3, [sl]
 800da56:	2b00      	cmp	r3, #0
 800da58:	f000 809f 	beq.w	800db9a <_svfiprintf_r+0x1c6>
 800da5c:	2300      	movs	r3, #0
 800da5e:	f04f 32ff 	mov.w	r2, #4294967295
 800da62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da66:	f10a 0a01 	add.w	sl, sl, #1
 800da6a:	9304      	str	r3, [sp, #16]
 800da6c:	9307      	str	r3, [sp, #28]
 800da6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800da72:	931a      	str	r3, [sp, #104]	@ 0x68
 800da74:	4654      	mov	r4, sl
 800da76:	2205      	movs	r2, #5
 800da78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da7c:	484e      	ldr	r0, [pc, #312]	@ (800dbb8 <_svfiprintf_r+0x1e4>)
 800da7e:	f7f2 fbaf 	bl	80001e0 <memchr>
 800da82:	9a04      	ldr	r2, [sp, #16]
 800da84:	b9d8      	cbnz	r0, 800dabe <_svfiprintf_r+0xea>
 800da86:	06d0      	lsls	r0, r2, #27
 800da88:	bf44      	itt	mi
 800da8a:	2320      	movmi	r3, #32
 800da8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da90:	0711      	lsls	r1, r2, #28
 800da92:	bf44      	itt	mi
 800da94:	232b      	movmi	r3, #43	@ 0x2b
 800da96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da9a:	f89a 3000 	ldrb.w	r3, [sl]
 800da9e:	2b2a      	cmp	r3, #42	@ 0x2a
 800daa0:	d015      	beq.n	800dace <_svfiprintf_r+0xfa>
 800daa2:	9a07      	ldr	r2, [sp, #28]
 800daa4:	4654      	mov	r4, sl
 800daa6:	2000      	movs	r0, #0
 800daa8:	f04f 0c0a 	mov.w	ip, #10
 800daac:	4621      	mov	r1, r4
 800daae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dab2:	3b30      	subs	r3, #48	@ 0x30
 800dab4:	2b09      	cmp	r3, #9
 800dab6:	d94b      	bls.n	800db50 <_svfiprintf_r+0x17c>
 800dab8:	b1b0      	cbz	r0, 800dae8 <_svfiprintf_r+0x114>
 800daba:	9207      	str	r2, [sp, #28]
 800dabc:	e014      	b.n	800dae8 <_svfiprintf_r+0x114>
 800dabe:	eba0 0308 	sub.w	r3, r0, r8
 800dac2:	fa09 f303 	lsl.w	r3, r9, r3
 800dac6:	4313      	orrs	r3, r2
 800dac8:	9304      	str	r3, [sp, #16]
 800daca:	46a2      	mov	sl, r4
 800dacc:	e7d2      	b.n	800da74 <_svfiprintf_r+0xa0>
 800dace:	9b03      	ldr	r3, [sp, #12]
 800dad0:	1d19      	adds	r1, r3, #4
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	9103      	str	r1, [sp, #12]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	bfbb      	ittet	lt
 800dada:	425b      	neglt	r3, r3
 800dadc:	f042 0202 	orrlt.w	r2, r2, #2
 800dae0:	9307      	strge	r3, [sp, #28]
 800dae2:	9307      	strlt	r3, [sp, #28]
 800dae4:	bfb8      	it	lt
 800dae6:	9204      	strlt	r2, [sp, #16]
 800dae8:	7823      	ldrb	r3, [r4, #0]
 800daea:	2b2e      	cmp	r3, #46	@ 0x2e
 800daec:	d10a      	bne.n	800db04 <_svfiprintf_r+0x130>
 800daee:	7863      	ldrb	r3, [r4, #1]
 800daf0:	2b2a      	cmp	r3, #42	@ 0x2a
 800daf2:	d132      	bne.n	800db5a <_svfiprintf_r+0x186>
 800daf4:	9b03      	ldr	r3, [sp, #12]
 800daf6:	1d1a      	adds	r2, r3, #4
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	9203      	str	r2, [sp, #12]
 800dafc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800db00:	3402      	adds	r4, #2
 800db02:	9305      	str	r3, [sp, #20]
 800db04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dbc8 <_svfiprintf_r+0x1f4>
 800db08:	7821      	ldrb	r1, [r4, #0]
 800db0a:	2203      	movs	r2, #3
 800db0c:	4650      	mov	r0, sl
 800db0e:	f7f2 fb67 	bl	80001e0 <memchr>
 800db12:	b138      	cbz	r0, 800db24 <_svfiprintf_r+0x150>
 800db14:	9b04      	ldr	r3, [sp, #16]
 800db16:	eba0 000a 	sub.w	r0, r0, sl
 800db1a:	2240      	movs	r2, #64	@ 0x40
 800db1c:	4082      	lsls	r2, r0
 800db1e:	4313      	orrs	r3, r2
 800db20:	3401      	adds	r4, #1
 800db22:	9304      	str	r3, [sp, #16]
 800db24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db28:	4824      	ldr	r0, [pc, #144]	@ (800dbbc <_svfiprintf_r+0x1e8>)
 800db2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800db2e:	2206      	movs	r2, #6
 800db30:	f7f2 fb56 	bl	80001e0 <memchr>
 800db34:	2800      	cmp	r0, #0
 800db36:	d036      	beq.n	800dba6 <_svfiprintf_r+0x1d2>
 800db38:	4b21      	ldr	r3, [pc, #132]	@ (800dbc0 <_svfiprintf_r+0x1ec>)
 800db3a:	bb1b      	cbnz	r3, 800db84 <_svfiprintf_r+0x1b0>
 800db3c:	9b03      	ldr	r3, [sp, #12]
 800db3e:	3307      	adds	r3, #7
 800db40:	f023 0307 	bic.w	r3, r3, #7
 800db44:	3308      	adds	r3, #8
 800db46:	9303      	str	r3, [sp, #12]
 800db48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db4a:	4433      	add	r3, r6
 800db4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800db4e:	e76a      	b.n	800da26 <_svfiprintf_r+0x52>
 800db50:	fb0c 3202 	mla	r2, ip, r2, r3
 800db54:	460c      	mov	r4, r1
 800db56:	2001      	movs	r0, #1
 800db58:	e7a8      	b.n	800daac <_svfiprintf_r+0xd8>
 800db5a:	2300      	movs	r3, #0
 800db5c:	3401      	adds	r4, #1
 800db5e:	9305      	str	r3, [sp, #20]
 800db60:	4619      	mov	r1, r3
 800db62:	f04f 0c0a 	mov.w	ip, #10
 800db66:	4620      	mov	r0, r4
 800db68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db6c:	3a30      	subs	r2, #48	@ 0x30
 800db6e:	2a09      	cmp	r2, #9
 800db70:	d903      	bls.n	800db7a <_svfiprintf_r+0x1a6>
 800db72:	2b00      	cmp	r3, #0
 800db74:	d0c6      	beq.n	800db04 <_svfiprintf_r+0x130>
 800db76:	9105      	str	r1, [sp, #20]
 800db78:	e7c4      	b.n	800db04 <_svfiprintf_r+0x130>
 800db7a:	fb0c 2101 	mla	r1, ip, r1, r2
 800db7e:	4604      	mov	r4, r0
 800db80:	2301      	movs	r3, #1
 800db82:	e7f0      	b.n	800db66 <_svfiprintf_r+0x192>
 800db84:	ab03      	add	r3, sp, #12
 800db86:	9300      	str	r3, [sp, #0]
 800db88:	462a      	mov	r2, r5
 800db8a:	4b0e      	ldr	r3, [pc, #56]	@ (800dbc4 <_svfiprintf_r+0x1f0>)
 800db8c:	a904      	add	r1, sp, #16
 800db8e:	4638      	mov	r0, r7
 800db90:	f3af 8000 	nop.w
 800db94:	1c42      	adds	r2, r0, #1
 800db96:	4606      	mov	r6, r0
 800db98:	d1d6      	bne.n	800db48 <_svfiprintf_r+0x174>
 800db9a:	89ab      	ldrh	r3, [r5, #12]
 800db9c:	065b      	lsls	r3, r3, #25
 800db9e:	f53f af2d 	bmi.w	800d9fc <_svfiprintf_r+0x28>
 800dba2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dba4:	e72c      	b.n	800da00 <_svfiprintf_r+0x2c>
 800dba6:	ab03      	add	r3, sp, #12
 800dba8:	9300      	str	r3, [sp, #0]
 800dbaa:	462a      	mov	r2, r5
 800dbac:	4b05      	ldr	r3, [pc, #20]	@ (800dbc4 <_svfiprintf_r+0x1f0>)
 800dbae:	a904      	add	r1, sp, #16
 800dbb0:	4638      	mov	r0, r7
 800dbb2:	f000 f879 	bl	800dca8 <_printf_i>
 800dbb6:	e7ed      	b.n	800db94 <_svfiprintf_r+0x1c0>
 800dbb8:	0800e430 	.word	0x0800e430
 800dbbc:	0800e43a 	.word	0x0800e43a
 800dbc0:	00000000 	.word	0x00000000
 800dbc4:	0800d91d 	.word	0x0800d91d
 800dbc8:	0800e436 	.word	0x0800e436

0800dbcc <_printf_common>:
 800dbcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbd0:	4616      	mov	r6, r2
 800dbd2:	4698      	mov	r8, r3
 800dbd4:	688a      	ldr	r2, [r1, #8]
 800dbd6:	690b      	ldr	r3, [r1, #16]
 800dbd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dbdc:	4293      	cmp	r3, r2
 800dbde:	bfb8      	it	lt
 800dbe0:	4613      	movlt	r3, r2
 800dbe2:	6033      	str	r3, [r6, #0]
 800dbe4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dbe8:	4607      	mov	r7, r0
 800dbea:	460c      	mov	r4, r1
 800dbec:	b10a      	cbz	r2, 800dbf2 <_printf_common+0x26>
 800dbee:	3301      	adds	r3, #1
 800dbf0:	6033      	str	r3, [r6, #0]
 800dbf2:	6823      	ldr	r3, [r4, #0]
 800dbf4:	0699      	lsls	r1, r3, #26
 800dbf6:	bf42      	ittt	mi
 800dbf8:	6833      	ldrmi	r3, [r6, #0]
 800dbfa:	3302      	addmi	r3, #2
 800dbfc:	6033      	strmi	r3, [r6, #0]
 800dbfe:	6825      	ldr	r5, [r4, #0]
 800dc00:	f015 0506 	ands.w	r5, r5, #6
 800dc04:	d106      	bne.n	800dc14 <_printf_common+0x48>
 800dc06:	f104 0a19 	add.w	sl, r4, #25
 800dc0a:	68e3      	ldr	r3, [r4, #12]
 800dc0c:	6832      	ldr	r2, [r6, #0]
 800dc0e:	1a9b      	subs	r3, r3, r2
 800dc10:	42ab      	cmp	r3, r5
 800dc12:	dc26      	bgt.n	800dc62 <_printf_common+0x96>
 800dc14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dc18:	6822      	ldr	r2, [r4, #0]
 800dc1a:	3b00      	subs	r3, #0
 800dc1c:	bf18      	it	ne
 800dc1e:	2301      	movne	r3, #1
 800dc20:	0692      	lsls	r2, r2, #26
 800dc22:	d42b      	bmi.n	800dc7c <_printf_common+0xb0>
 800dc24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dc28:	4641      	mov	r1, r8
 800dc2a:	4638      	mov	r0, r7
 800dc2c:	47c8      	blx	r9
 800dc2e:	3001      	adds	r0, #1
 800dc30:	d01e      	beq.n	800dc70 <_printf_common+0xa4>
 800dc32:	6823      	ldr	r3, [r4, #0]
 800dc34:	6922      	ldr	r2, [r4, #16]
 800dc36:	f003 0306 	and.w	r3, r3, #6
 800dc3a:	2b04      	cmp	r3, #4
 800dc3c:	bf02      	ittt	eq
 800dc3e:	68e5      	ldreq	r5, [r4, #12]
 800dc40:	6833      	ldreq	r3, [r6, #0]
 800dc42:	1aed      	subeq	r5, r5, r3
 800dc44:	68a3      	ldr	r3, [r4, #8]
 800dc46:	bf0c      	ite	eq
 800dc48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc4c:	2500      	movne	r5, #0
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	bfc4      	itt	gt
 800dc52:	1a9b      	subgt	r3, r3, r2
 800dc54:	18ed      	addgt	r5, r5, r3
 800dc56:	2600      	movs	r6, #0
 800dc58:	341a      	adds	r4, #26
 800dc5a:	42b5      	cmp	r5, r6
 800dc5c:	d11a      	bne.n	800dc94 <_printf_common+0xc8>
 800dc5e:	2000      	movs	r0, #0
 800dc60:	e008      	b.n	800dc74 <_printf_common+0xa8>
 800dc62:	2301      	movs	r3, #1
 800dc64:	4652      	mov	r2, sl
 800dc66:	4641      	mov	r1, r8
 800dc68:	4638      	mov	r0, r7
 800dc6a:	47c8      	blx	r9
 800dc6c:	3001      	adds	r0, #1
 800dc6e:	d103      	bne.n	800dc78 <_printf_common+0xac>
 800dc70:	f04f 30ff 	mov.w	r0, #4294967295
 800dc74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc78:	3501      	adds	r5, #1
 800dc7a:	e7c6      	b.n	800dc0a <_printf_common+0x3e>
 800dc7c:	18e1      	adds	r1, r4, r3
 800dc7e:	1c5a      	adds	r2, r3, #1
 800dc80:	2030      	movs	r0, #48	@ 0x30
 800dc82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dc86:	4422      	add	r2, r4
 800dc88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dc8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dc90:	3302      	adds	r3, #2
 800dc92:	e7c7      	b.n	800dc24 <_printf_common+0x58>
 800dc94:	2301      	movs	r3, #1
 800dc96:	4622      	mov	r2, r4
 800dc98:	4641      	mov	r1, r8
 800dc9a:	4638      	mov	r0, r7
 800dc9c:	47c8      	blx	r9
 800dc9e:	3001      	adds	r0, #1
 800dca0:	d0e6      	beq.n	800dc70 <_printf_common+0xa4>
 800dca2:	3601      	adds	r6, #1
 800dca4:	e7d9      	b.n	800dc5a <_printf_common+0x8e>
	...

0800dca8 <_printf_i>:
 800dca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dcac:	7e0f      	ldrb	r7, [r1, #24]
 800dcae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dcb0:	2f78      	cmp	r7, #120	@ 0x78
 800dcb2:	4691      	mov	r9, r2
 800dcb4:	4680      	mov	r8, r0
 800dcb6:	460c      	mov	r4, r1
 800dcb8:	469a      	mov	sl, r3
 800dcba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dcbe:	d807      	bhi.n	800dcd0 <_printf_i+0x28>
 800dcc0:	2f62      	cmp	r7, #98	@ 0x62
 800dcc2:	d80a      	bhi.n	800dcda <_printf_i+0x32>
 800dcc4:	2f00      	cmp	r7, #0
 800dcc6:	f000 80d1 	beq.w	800de6c <_printf_i+0x1c4>
 800dcca:	2f58      	cmp	r7, #88	@ 0x58
 800dccc:	f000 80b8 	beq.w	800de40 <_printf_i+0x198>
 800dcd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dcd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dcd8:	e03a      	b.n	800dd50 <_printf_i+0xa8>
 800dcda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dcde:	2b15      	cmp	r3, #21
 800dce0:	d8f6      	bhi.n	800dcd0 <_printf_i+0x28>
 800dce2:	a101      	add	r1, pc, #4	@ (adr r1, 800dce8 <_printf_i+0x40>)
 800dce4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dce8:	0800dd41 	.word	0x0800dd41
 800dcec:	0800dd55 	.word	0x0800dd55
 800dcf0:	0800dcd1 	.word	0x0800dcd1
 800dcf4:	0800dcd1 	.word	0x0800dcd1
 800dcf8:	0800dcd1 	.word	0x0800dcd1
 800dcfc:	0800dcd1 	.word	0x0800dcd1
 800dd00:	0800dd55 	.word	0x0800dd55
 800dd04:	0800dcd1 	.word	0x0800dcd1
 800dd08:	0800dcd1 	.word	0x0800dcd1
 800dd0c:	0800dcd1 	.word	0x0800dcd1
 800dd10:	0800dcd1 	.word	0x0800dcd1
 800dd14:	0800de53 	.word	0x0800de53
 800dd18:	0800dd7f 	.word	0x0800dd7f
 800dd1c:	0800de0d 	.word	0x0800de0d
 800dd20:	0800dcd1 	.word	0x0800dcd1
 800dd24:	0800dcd1 	.word	0x0800dcd1
 800dd28:	0800de75 	.word	0x0800de75
 800dd2c:	0800dcd1 	.word	0x0800dcd1
 800dd30:	0800dd7f 	.word	0x0800dd7f
 800dd34:	0800dcd1 	.word	0x0800dcd1
 800dd38:	0800dcd1 	.word	0x0800dcd1
 800dd3c:	0800de15 	.word	0x0800de15
 800dd40:	6833      	ldr	r3, [r6, #0]
 800dd42:	1d1a      	adds	r2, r3, #4
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	6032      	str	r2, [r6, #0]
 800dd48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dd4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dd50:	2301      	movs	r3, #1
 800dd52:	e09c      	b.n	800de8e <_printf_i+0x1e6>
 800dd54:	6833      	ldr	r3, [r6, #0]
 800dd56:	6820      	ldr	r0, [r4, #0]
 800dd58:	1d19      	adds	r1, r3, #4
 800dd5a:	6031      	str	r1, [r6, #0]
 800dd5c:	0606      	lsls	r6, r0, #24
 800dd5e:	d501      	bpl.n	800dd64 <_printf_i+0xbc>
 800dd60:	681d      	ldr	r5, [r3, #0]
 800dd62:	e003      	b.n	800dd6c <_printf_i+0xc4>
 800dd64:	0645      	lsls	r5, r0, #25
 800dd66:	d5fb      	bpl.n	800dd60 <_printf_i+0xb8>
 800dd68:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dd6c:	2d00      	cmp	r5, #0
 800dd6e:	da03      	bge.n	800dd78 <_printf_i+0xd0>
 800dd70:	232d      	movs	r3, #45	@ 0x2d
 800dd72:	426d      	negs	r5, r5
 800dd74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dd78:	4858      	ldr	r0, [pc, #352]	@ (800dedc <_printf_i+0x234>)
 800dd7a:	230a      	movs	r3, #10
 800dd7c:	e011      	b.n	800dda2 <_printf_i+0xfa>
 800dd7e:	6821      	ldr	r1, [r4, #0]
 800dd80:	6833      	ldr	r3, [r6, #0]
 800dd82:	0608      	lsls	r0, r1, #24
 800dd84:	f853 5b04 	ldr.w	r5, [r3], #4
 800dd88:	d402      	bmi.n	800dd90 <_printf_i+0xe8>
 800dd8a:	0649      	lsls	r1, r1, #25
 800dd8c:	bf48      	it	mi
 800dd8e:	b2ad      	uxthmi	r5, r5
 800dd90:	2f6f      	cmp	r7, #111	@ 0x6f
 800dd92:	4852      	ldr	r0, [pc, #328]	@ (800dedc <_printf_i+0x234>)
 800dd94:	6033      	str	r3, [r6, #0]
 800dd96:	bf14      	ite	ne
 800dd98:	230a      	movne	r3, #10
 800dd9a:	2308      	moveq	r3, #8
 800dd9c:	2100      	movs	r1, #0
 800dd9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dda2:	6866      	ldr	r6, [r4, #4]
 800dda4:	60a6      	str	r6, [r4, #8]
 800dda6:	2e00      	cmp	r6, #0
 800dda8:	db05      	blt.n	800ddb6 <_printf_i+0x10e>
 800ddaa:	6821      	ldr	r1, [r4, #0]
 800ddac:	432e      	orrs	r6, r5
 800ddae:	f021 0104 	bic.w	r1, r1, #4
 800ddb2:	6021      	str	r1, [r4, #0]
 800ddb4:	d04b      	beq.n	800de4e <_printf_i+0x1a6>
 800ddb6:	4616      	mov	r6, r2
 800ddb8:	fbb5 f1f3 	udiv	r1, r5, r3
 800ddbc:	fb03 5711 	mls	r7, r3, r1, r5
 800ddc0:	5dc7      	ldrb	r7, [r0, r7]
 800ddc2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ddc6:	462f      	mov	r7, r5
 800ddc8:	42bb      	cmp	r3, r7
 800ddca:	460d      	mov	r5, r1
 800ddcc:	d9f4      	bls.n	800ddb8 <_printf_i+0x110>
 800ddce:	2b08      	cmp	r3, #8
 800ddd0:	d10b      	bne.n	800ddea <_printf_i+0x142>
 800ddd2:	6823      	ldr	r3, [r4, #0]
 800ddd4:	07df      	lsls	r7, r3, #31
 800ddd6:	d508      	bpl.n	800ddea <_printf_i+0x142>
 800ddd8:	6923      	ldr	r3, [r4, #16]
 800ddda:	6861      	ldr	r1, [r4, #4]
 800dddc:	4299      	cmp	r1, r3
 800ddde:	bfde      	ittt	le
 800dde0:	2330      	movle	r3, #48	@ 0x30
 800dde2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dde6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ddea:	1b92      	subs	r2, r2, r6
 800ddec:	6122      	str	r2, [r4, #16]
 800ddee:	f8cd a000 	str.w	sl, [sp]
 800ddf2:	464b      	mov	r3, r9
 800ddf4:	aa03      	add	r2, sp, #12
 800ddf6:	4621      	mov	r1, r4
 800ddf8:	4640      	mov	r0, r8
 800ddfa:	f7ff fee7 	bl	800dbcc <_printf_common>
 800ddfe:	3001      	adds	r0, #1
 800de00:	d14a      	bne.n	800de98 <_printf_i+0x1f0>
 800de02:	f04f 30ff 	mov.w	r0, #4294967295
 800de06:	b004      	add	sp, #16
 800de08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de0c:	6823      	ldr	r3, [r4, #0]
 800de0e:	f043 0320 	orr.w	r3, r3, #32
 800de12:	6023      	str	r3, [r4, #0]
 800de14:	4832      	ldr	r0, [pc, #200]	@ (800dee0 <_printf_i+0x238>)
 800de16:	2778      	movs	r7, #120	@ 0x78
 800de18:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800de1c:	6823      	ldr	r3, [r4, #0]
 800de1e:	6831      	ldr	r1, [r6, #0]
 800de20:	061f      	lsls	r7, r3, #24
 800de22:	f851 5b04 	ldr.w	r5, [r1], #4
 800de26:	d402      	bmi.n	800de2e <_printf_i+0x186>
 800de28:	065f      	lsls	r7, r3, #25
 800de2a:	bf48      	it	mi
 800de2c:	b2ad      	uxthmi	r5, r5
 800de2e:	6031      	str	r1, [r6, #0]
 800de30:	07d9      	lsls	r1, r3, #31
 800de32:	bf44      	itt	mi
 800de34:	f043 0320 	orrmi.w	r3, r3, #32
 800de38:	6023      	strmi	r3, [r4, #0]
 800de3a:	b11d      	cbz	r5, 800de44 <_printf_i+0x19c>
 800de3c:	2310      	movs	r3, #16
 800de3e:	e7ad      	b.n	800dd9c <_printf_i+0xf4>
 800de40:	4826      	ldr	r0, [pc, #152]	@ (800dedc <_printf_i+0x234>)
 800de42:	e7e9      	b.n	800de18 <_printf_i+0x170>
 800de44:	6823      	ldr	r3, [r4, #0]
 800de46:	f023 0320 	bic.w	r3, r3, #32
 800de4a:	6023      	str	r3, [r4, #0]
 800de4c:	e7f6      	b.n	800de3c <_printf_i+0x194>
 800de4e:	4616      	mov	r6, r2
 800de50:	e7bd      	b.n	800ddce <_printf_i+0x126>
 800de52:	6833      	ldr	r3, [r6, #0]
 800de54:	6825      	ldr	r5, [r4, #0]
 800de56:	6961      	ldr	r1, [r4, #20]
 800de58:	1d18      	adds	r0, r3, #4
 800de5a:	6030      	str	r0, [r6, #0]
 800de5c:	062e      	lsls	r6, r5, #24
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	d501      	bpl.n	800de66 <_printf_i+0x1be>
 800de62:	6019      	str	r1, [r3, #0]
 800de64:	e002      	b.n	800de6c <_printf_i+0x1c4>
 800de66:	0668      	lsls	r0, r5, #25
 800de68:	d5fb      	bpl.n	800de62 <_printf_i+0x1ba>
 800de6a:	8019      	strh	r1, [r3, #0]
 800de6c:	2300      	movs	r3, #0
 800de6e:	6123      	str	r3, [r4, #16]
 800de70:	4616      	mov	r6, r2
 800de72:	e7bc      	b.n	800ddee <_printf_i+0x146>
 800de74:	6833      	ldr	r3, [r6, #0]
 800de76:	1d1a      	adds	r2, r3, #4
 800de78:	6032      	str	r2, [r6, #0]
 800de7a:	681e      	ldr	r6, [r3, #0]
 800de7c:	6862      	ldr	r2, [r4, #4]
 800de7e:	2100      	movs	r1, #0
 800de80:	4630      	mov	r0, r6
 800de82:	f7f2 f9ad 	bl	80001e0 <memchr>
 800de86:	b108      	cbz	r0, 800de8c <_printf_i+0x1e4>
 800de88:	1b80      	subs	r0, r0, r6
 800de8a:	6060      	str	r0, [r4, #4]
 800de8c:	6863      	ldr	r3, [r4, #4]
 800de8e:	6123      	str	r3, [r4, #16]
 800de90:	2300      	movs	r3, #0
 800de92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800de96:	e7aa      	b.n	800ddee <_printf_i+0x146>
 800de98:	6923      	ldr	r3, [r4, #16]
 800de9a:	4632      	mov	r2, r6
 800de9c:	4649      	mov	r1, r9
 800de9e:	4640      	mov	r0, r8
 800dea0:	47d0      	blx	sl
 800dea2:	3001      	adds	r0, #1
 800dea4:	d0ad      	beq.n	800de02 <_printf_i+0x15a>
 800dea6:	6823      	ldr	r3, [r4, #0]
 800dea8:	079b      	lsls	r3, r3, #30
 800deaa:	d413      	bmi.n	800ded4 <_printf_i+0x22c>
 800deac:	68e0      	ldr	r0, [r4, #12]
 800deae:	9b03      	ldr	r3, [sp, #12]
 800deb0:	4298      	cmp	r0, r3
 800deb2:	bfb8      	it	lt
 800deb4:	4618      	movlt	r0, r3
 800deb6:	e7a6      	b.n	800de06 <_printf_i+0x15e>
 800deb8:	2301      	movs	r3, #1
 800deba:	4632      	mov	r2, r6
 800debc:	4649      	mov	r1, r9
 800debe:	4640      	mov	r0, r8
 800dec0:	47d0      	blx	sl
 800dec2:	3001      	adds	r0, #1
 800dec4:	d09d      	beq.n	800de02 <_printf_i+0x15a>
 800dec6:	3501      	adds	r5, #1
 800dec8:	68e3      	ldr	r3, [r4, #12]
 800deca:	9903      	ldr	r1, [sp, #12]
 800decc:	1a5b      	subs	r3, r3, r1
 800dece:	42ab      	cmp	r3, r5
 800ded0:	dcf2      	bgt.n	800deb8 <_printf_i+0x210>
 800ded2:	e7eb      	b.n	800deac <_printf_i+0x204>
 800ded4:	2500      	movs	r5, #0
 800ded6:	f104 0619 	add.w	r6, r4, #25
 800deda:	e7f5      	b.n	800dec8 <_printf_i+0x220>
 800dedc:	0800e441 	.word	0x0800e441
 800dee0:	0800e452 	.word	0x0800e452

0800dee4 <memmove>:
 800dee4:	4288      	cmp	r0, r1
 800dee6:	b510      	push	{r4, lr}
 800dee8:	eb01 0402 	add.w	r4, r1, r2
 800deec:	d902      	bls.n	800def4 <memmove+0x10>
 800deee:	4284      	cmp	r4, r0
 800def0:	4623      	mov	r3, r4
 800def2:	d807      	bhi.n	800df04 <memmove+0x20>
 800def4:	1e43      	subs	r3, r0, #1
 800def6:	42a1      	cmp	r1, r4
 800def8:	d008      	beq.n	800df0c <memmove+0x28>
 800defa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800defe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df02:	e7f8      	b.n	800def6 <memmove+0x12>
 800df04:	4402      	add	r2, r0
 800df06:	4601      	mov	r1, r0
 800df08:	428a      	cmp	r2, r1
 800df0a:	d100      	bne.n	800df0e <memmove+0x2a>
 800df0c:	bd10      	pop	{r4, pc}
 800df0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800df16:	e7f7      	b.n	800df08 <memmove+0x24>

0800df18 <memcpy>:
 800df18:	440a      	add	r2, r1
 800df1a:	4291      	cmp	r1, r2
 800df1c:	f100 33ff 	add.w	r3, r0, #4294967295
 800df20:	d100      	bne.n	800df24 <memcpy+0xc>
 800df22:	4770      	bx	lr
 800df24:	b510      	push	{r4, lr}
 800df26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df2e:	4291      	cmp	r1, r2
 800df30:	d1f9      	bne.n	800df26 <memcpy+0xe>
 800df32:	bd10      	pop	{r4, pc}

0800df34 <_realloc_r>:
 800df34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df38:	4607      	mov	r7, r0
 800df3a:	4614      	mov	r4, r2
 800df3c:	460d      	mov	r5, r1
 800df3e:	b921      	cbnz	r1, 800df4a <_realloc_r+0x16>
 800df40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df44:	4611      	mov	r1, r2
 800df46:	f7ff bbad 	b.w	800d6a4 <_malloc_r>
 800df4a:	b92a      	cbnz	r2, 800df58 <_realloc_r+0x24>
 800df4c:	f7ff fc9c 	bl	800d888 <_free_r>
 800df50:	4625      	mov	r5, r4
 800df52:	4628      	mov	r0, r5
 800df54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df58:	f000 f81a 	bl	800df90 <_malloc_usable_size_r>
 800df5c:	4284      	cmp	r4, r0
 800df5e:	4606      	mov	r6, r0
 800df60:	d802      	bhi.n	800df68 <_realloc_r+0x34>
 800df62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800df66:	d8f4      	bhi.n	800df52 <_realloc_r+0x1e>
 800df68:	4621      	mov	r1, r4
 800df6a:	4638      	mov	r0, r7
 800df6c:	f7ff fb9a 	bl	800d6a4 <_malloc_r>
 800df70:	4680      	mov	r8, r0
 800df72:	b908      	cbnz	r0, 800df78 <_realloc_r+0x44>
 800df74:	4645      	mov	r5, r8
 800df76:	e7ec      	b.n	800df52 <_realloc_r+0x1e>
 800df78:	42b4      	cmp	r4, r6
 800df7a:	4622      	mov	r2, r4
 800df7c:	4629      	mov	r1, r5
 800df7e:	bf28      	it	cs
 800df80:	4632      	movcs	r2, r6
 800df82:	f7ff ffc9 	bl	800df18 <memcpy>
 800df86:	4629      	mov	r1, r5
 800df88:	4638      	mov	r0, r7
 800df8a:	f7ff fc7d 	bl	800d888 <_free_r>
 800df8e:	e7f1      	b.n	800df74 <_realloc_r+0x40>

0800df90 <_malloc_usable_size_r>:
 800df90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df94:	1f18      	subs	r0, r3, #4
 800df96:	2b00      	cmp	r3, #0
 800df98:	bfbc      	itt	lt
 800df9a:	580b      	ldrlt	r3, [r1, r0]
 800df9c:	18c0      	addlt	r0, r0, r3
 800df9e:	4770      	bx	lr

0800dfa0 <_init>:
 800dfa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfa2:	bf00      	nop
 800dfa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfa6:	bc08      	pop	{r3}
 800dfa8:	469e      	mov	lr, r3
 800dfaa:	4770      	bx	lr

0800dfac <_fini>:
 800dfac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfae:	bf00      	nop
 800dfb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfb2:	bc08      	pop	{r3}
 800dfb4:	469e      	mov	lr, r3
 800dfb6:	4770      	bx	lr
